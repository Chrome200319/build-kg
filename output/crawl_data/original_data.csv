qualified_name,functionality_description
java.applet.AppletContext.getApplet(java.lang.String),finds and returns the applet in the document represented by this applet context with the given name.
java.applet.AppletContext.getApplets(),finds all the applets in the document represented by this applet context.
java.applet.AppletContext.getAudioClip(java.net.URL),creates an audio clip.
java.applet.AppletContext.getImage(java.net.URL),returns an image object that can then be painted on the screen.
java.applet.AppletContext.getStream(java.lang.String),returns the stream to which specified key is associated within this applet context.
java.applet.AppletContext.getStreamKeys(),finds all the keys of the streams in this applet context.
"java.applet.AppletContext.setStream(java.lang.String,java.io.InputStream)",associates the specified stream with the specified key in this applet context.
java.applet.AppletContext.showDocument(java.net.URL),requests that the browser or applet viewer show the web page indicated by the url argument.
"java.applet.AppletContext.showDocument(java.net.URL,java.lang.String)",requests that the browser or applet viewer show the web page indicated by the url argument.
java.applet.AppletContext.showStatus(java.lang.String),"requests that the argument string be displayed in the ""status window""."
"java.applet.AppletStub.appletResize(int,int)",called when the applet wants to be resized.
java.applet.AppletStub.getAppletContext(),returns the applet's context.
java.applet.AppletStub.getCodeBase(),gets the base url.
java.applet.AppletStub.getDocumentBase(),gets the url of the document in which the applet is embedded.
java.applet.AppletStub.getParameter(java.lang.String),returns the value of the named parameter in the html tag.
java.applet.AppletStub.isActive(),determines if the applet is active.
java.applet.AudioClip.loop(),starts playing this audio clip in a loop.
java.applet.AudioClip.play(),starts playing this audio clip.
java.applet.AudioClip.stop(),stops playing this audio clip.
java.applet.Applet.destroy(),called by the browser or applet viewer to inform this applet that it is being reclaimed and that it should destroy any resources that it has allocated.
java.applet.Applet.getAccessibleContext(),gets the accessiblecontext associated with this applet.
java.applet.Applet.getAppletContext(),"determines this applet's context, which allows the applet to query and affect the environment in which it runs."
java.applet.Applet.getAppletInfo(),returns information about this applet.
java.applet.Applet.getAudioClip(java.net.URL),returns the audioclip object specified by the url argument.
"java.applet.Applet.getAudioClip(java.net.URL,java.lang.String)",returns the audioclip object specified by the url and name arguments.
java.applet.Applet.getCodeBase(),gets the base url.
java.applet.Applet.getDocumentBase(),gets the url of the document in which this applet is embedded.
java.applet.Applet.getImage(java.net.URL),returns an image object that can then be painted on the screen.
"java.applet.Applet.getImage(java.net.URL,java.lang.String)",returns an image object that can then be painted on the screen.
java.applet.Applet.getLocale(),gets the locale of the applet.
java.applet.Applet.getParameter(java.lang.String),returns the value of the named parameter in the html tag.
java.applet.Applet.getParameterInfo(),returns information about the parameters that are understood by this applet.
java.applet.Applet.init(),called by the browser or applet viewer to inform this applet that it has been loaded into the system.
java.applet.Applet.isActive(),determines if this applet is active.
java.applet.Applet.isValidateRoot(),indicates if this container is a validate root.
java.applet.Applet.newAudioClip(java.net.URL),get an audio clip from the given url.
java.applet.Applet.play(java.net.URL),plays the audio clip at the specified absolute url.
"java.applet.Applet.play(java.net.URL,java.lang.String)",plays the audio clip given the url and a specifier that is relative to it.
"java.applet.Applet.resize(int,int)",requests that this applet be resized.
java.applet.Applet.resize(java.awt.Dimension),requests that this applet be resized.
java.applet.Applet.setStub(java.applet.AppletStub),sets this applet's stub.
java.applet.Applet.showStatus(java.lang.String),"requests that the argument string be displayed in the ""status window""."
java.applet.Applet.start(),called by the browser or applet viewer to inform this applet that it should start its execution.
java.applet.Applet.stop(),called by the browser or applet viewer to inform this applet that it should stop its execution.
java.awt.ActiveEvent.dispatch(),"dispatch the event to its target, listeners of the events source, or do whatever it is this event is supposed to do."
java.awt.Adjustable.addAdjustmentListener(java.awt.event.AdjustmentListener),adds a listener to receive adjustment events when the value of the adjustable object changes.
java.awt.Adjustable.getBlockIncrement(),gets the block value increment for the adjustable object.
java.awt.Adjustable.getMaximum(),gets the maximum value of the adjustable object.
java.awt.Adjustable.getMinimum(),gets the minimum value of the adjustable object.
java.awt.Adjustable.getOrientation(),gets the orientation of the adjustable object.
java.awt.Adjustable.getUnitIncrement(),gets the unit value increment for the adjustable object.
java.awt.Adjustable.getValue(),gets the current value of the adjustable object.
java.awt.Adjustable.getVisibleAmount(),gets the length of the proportional indicator.
java.awt.Adjustable.removeAdjustmentListener(java.awt.event.AdjustmentListener),removes an adjustment listener.
java.awt.Adjustable.setBlockIncrement(int),sets the block value increment for the adjustable object.
java.awt.Adjustable.setMaximum(int),sets the maximum value of the adjustable object.
java.awt.Adjustable.setMinimum(int),sets the minimum value of the adjustable object.
java.awt.Adjustable.setUnitIncrement(int),sets the unit value increment for the adjustable object.
java.awt.Adjustable.setValue(int),sets the current value of the adjustable object.
java.awt.Adjustable.setVisibleAmount(int),sets the length of the proportional indicator of the adjustable object.
"java.awt.Composite.createContext(java.awt.image.ColorModel,java.awt.image.ColorModel,java.awt.RenderingHints)",creates a context containing state that is used to perform the compositing operation.
"java.awt.CompositeContext.compose(java.awt.image.Raster,java.awt.image.Raster,java.awt.image.WritableRaster)",composes the two source raster objects and places the result in the destination writableraster.
java.awt.CompositeContext.dispose(),releases resources allocated for a context.
java.awt.ItemSelectable.addItemListener(java.awt.event.ItemListener),adds a listener to receive item events when the state of an item is changed by the user.
java.awt.ItemSelectable.getSelectedObjects(),returns the selected items or null if no items are selected.
java.awt.ItemSelectable.removeItemListener(java.awt.event.ItemListener),removes an item listener.
java.awt.KeyEventDispatcher.dispatchKeyEvent(java.awt.event.KeyEvent),this method is called by the current keyboardfocusmanager requesting that this keyeventdispatcher dispatch the specified event on its behalf.
java.awt.KeyEventPostProcessor.postProcessKeyEvent(java.awt.event.KeyEvent),"this method is called by the current keyboardfocusmanager, requesting that this keyeventpostprocessor perform any necessary post-processing which should be part of the keyevent's final resolution."
"java.awt.LayoutManager.addLayoutComponent(java.lang.String,java.awt.Component)","if the layout manager uses a per-component string, adds the component comp to the layout, associating it with the string specified by name."
java.awt.LayoutManager.layoutContainer(java.awt.Container),lays out the specified container.
java.awt.LayoutManager.minimumLayoutSize(java.awt.Container),"calculates the minimum size dimensions for the specified container, given the components it contains."
java.awt.LayoutManager.preferredLayoutSize(java.awt.Container),"calculates the preferred size dimensions for the specified container, given the components it contains."
java.awt.LayoutManager.removeLayoutComponent(java.awt.Component),removes the specified component from the layout.
"java.awt.LayoutManager2.addLayoutComponent(java.awt.Component,java.lang.Object)","adds the specified component to the layout, using the specified constraint object."
java.awt.LayoutManager2.getLayoutAlignmentX(java.awt.Container),returns the alignment along the x axis.
java.awt.LayoutManager2.getLayoutAlignmentY(java.awt.Container),returns the alignment along the y axis.
java.awt.LayoutManager2.invalidateLayout(java.awt.Container),"invalidates the layout, indicating that if the layout manager has cached information it should be discarded."
java.awt.LayoutManager2.maximumLayoutSize(java.awt.Container),"calculates the maximum size dimensions for the specified container, given the components it contains."
"java.awt.Paint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)",creates and returns a paintcontext used to generate the color pattern.
java.awt.PaintContext.dispose(),releases the resources allocated for the operation.
java.awt.PaintContext.getColorModel(),returns the colormodel of the output.
"java.awt.PaintContext.getRaster(int,int,int,int)",returns a raster containing the colors generated for the graphics operation.
java.awt.PrintGraphics.getPrintJob(),returns the printjob object from which this printgraphics object originated.
java.awt.SecondaryLoop.enter(),blocks the execution of the current thread and enters a new secondary event loop on the event dispatch thread.
java.awt.SecondaryLoop.exit(),unblocks the execution of the thread blocked by the enter() method and exits the secondary loop.
"java.awt.Shape.contains(double,double)","tests if the specified coordinates are inside the boundary of the shape, as described by the
definition of insideness."
java.awt.Shape.contains(java.awt.geom.Point2D),"tests if a specified point2d is inside the boundary of the shape, as described by the
definition of insideness."
"java.awt.Shape.contains(double,double,double,double)",tests if the interior of the shape entirely contains the specified rectangular area.
java.awt.Shape.contains(java.awt.geom.Rectangle2D),tests if the interior of the shape entirely contains the specified rectangle2d.
java.awt.Shape.getBounds(),returns an integer rectangle that completely encloses the shape.
java.awt.Shape.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.Shape.getPathIterator(java.awt.geom.AffineTransform),returns an iterator object that iterates along the shape boundary and provides access to the geometry of the shape outline.
"java.awt.Shape.getPathIterator(java.awt.geom.AffineTransform,double)",returns an iterator object that iterates along the shape boundary and provides access to a flattened view of the shape outline geometry.
"java.awt.Shape.intersects(double,double,double,double)",tests if the interior of the shape intersects the interior of a specified rectangular area.
java.awt.Shape.intersects(java.awt.geom.Rectangle2D),tests if the interior of the shape intersects the interior of a specified rectangle2d.
java.awt.Stroke.createStrokedShape(java.awt.Shape),returns an outline shape which encloses the area that should be painted when the shape is stroked according to the rules defined by the object implementing the stroke interface.
java.awt.Transparency.getTransparency(),returns the type of this transparency.
"java.awt.AlphaComposite.createContext(java.awt.image.ColorModel,java.awt.image.ColorModel,java.awt.RenderingHints)",creates a context for the compositing operation.
java.awt.AlphaComposite.derive(int),returns a similar alphacomposite object that uses the specified compositing rule.
java.awt.AlphaComposite.derive(float),returns a similar alphacomposite object that uses the specified alpha value.
java.awt.AlphaComposite.equals(java.lang.Object),determines whether the specified object is equal to this alphacomposite.
java.awt.AlphaComposite.getAlpha(),returns the alpha value of this alphacomposite.
java.awt.AlphaComposite.getInstance(int),creates an alphacomposite object with the specified rule.
"java.awt.AlphaComposite.getInstance(int,float)",creates an alphacomposite object with the specified rule and the constant alpha to multiply with the alpha of the source.
java.awt.AlphaComposite.getRule(),returns the compositing rule of this alphacomposite.
java.awt.AlphaComposite.hashCode(),returns the hashcode for this composite.
java.awt.AWTEvent.consume(),"consumes this event, if this event can be consumed."
java.awt.AWTEvent.getID(),returns the event type.
java.awt.AWTEvent.isConsumed(),returns whether this event has been consumed.
java.awt.AWTEvent.paramString(),returns a string representing the state of this event.
java.awt.AWTEvent.setSource(java.lang.Object),retargets an event to a new source.
java.awt.AWTEvent.toString(),returns a string representation of this object.
java.awt.AWTEventMulticaster.actionPerformed(java.awt.event.ActionEvent),handles the actionperformed event by invoking the actionperformed methods on listener-a and listener-b.
"java.awt.AWTEventMulticaster.add(java.awt.event.ComponentListener,java.awt.event.ComponentListener)",adds component-listener-a with component-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.ContainerListener,java.awt.event.ContainerListener)",adds container-listener-a with container-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.FocusListener,java.awt.event.FocusListener)",adds focus-listener-a with focus-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.KeyListener,java.awt.event.KeyListener)",adds key-listener-a with key-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.MouseListener,java.awt.event.MouseListener)",adds mouse-listener-a with mouse-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.MouseMotionListener,java.awt.event.MouseMotionListener)",adds mouse-motion-listener-a with mouse-motion-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.WindowListener,java.awt.event.WindowListener)",adds window-listener-a with window-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.WindowStateListener,java.awt.event.WindowStateListener)",adds window-state-listener-a with window-state-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.WindowFocusListener,java.awt.event.WindowFocusListener)",adds window-focus-listener-a with window-focus-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.ActionListener,java.awt.event.ActionListener)",adds action-listener-a with action-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.ItemListener,java.awt.event.ItemListener)",adds item-listener-a with item-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.AdjustmentListener,java.awt.event.AdjustmentListener)",adds adjustment-listener-a with adjustment-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.InputMethodListener,java.awt.event.InputMethodListener)",adds input-method-listener-a with input-method-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.HierarchyListener,java.awt.event.HierarchyListener)",adds hierarchy-listener-a with hierarchy-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.HierarchyBoundsListener,java.awt.event.HierarchyBoundsListener)",adds hierarchy-bounds-listener-a with hierarchy-bounds-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.add(java.awt.event.MouseWheelListener,java.awt.event.MouseWheelListener)",adds mouse-wheel-listener-a with mouse-wheel-listener-b and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.addInternal(java.util.EventListener,java.util.EventListener)",returns the resulting multicast listener from adding listener-a and listener-b together.
java.awt.AWTEventMulticaster.adjustmentValueChanged(java.awt.event.AdjustmentEvent),handles the adjustmentvaluechanged event by invoking the adjustmentvaluechanged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.ancestorMoved(java.awt.event.HierarchyEvent),handles the ancestormoved event by invoking the ancestormoved methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.ancestorResized(java.awt.event.HierarchyEvent),handles the ancestorresized event by invoking the ancestorresized methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.caretPositionChanged(java.awt.event.InputMethodEvent),handles the caretpositionchanged event by invoking the caretpositionchanged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.componentAdded(java.awt.event.ContainerEvent),handles the componentadded container event by invoking the componentadded methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.componentHidden(java.awt.event.ComponentEvent),handles the componenthidden event by invoking the componenthidden methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.componentMoved(java.awt.event.ComponentEvent),handles the componentmoved event by invoking the componentmoved methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.componentRemoved(java.awt.event.ContainerEvent),handles the componentremoved container event by invoking the componentremoved methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.componentResized(java.awt.event.ComponentEvent),handles the componentresized event by invoking the componentresized methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.componentShown(java.awt.event.ComponentEvent),handles the componentshown event by invoking the componentshown methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.focusGained(java.awt.event.FocusEvent),handles the focusgained event by invoking the focusgained methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.focusLost(java.awt.event.FocusEvent),handles the focuslost event by invoking the focuslost methods on listener-a and listener-b.
"java.awt.AWTEventMulticaster.getListeners(java.util.EventListener,java.lang.Class<T>)",returns an array of all the objects chained as foolisteners by the specified java.
java.awt.AWTEventMulticaster.hierarchyChanged(java.awt.event.HierarchyEvent),handles the hierarchychanged event by invoking the hierarchychanged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.inputMethodTextChanged(java.awt.event.InputMethodEvent),handles the inputmethodtextchanged event by invoking the inputmethodtextchanged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.itemStateChanged(java.awt.event.ItemEvent),handles the itemstatechanged event by invoking the itemstatechanged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.keyPressed(java.awt.event.KeyEvent),handles the keypressed event by invoking the keypressed methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.keyReleased(java.awt.event.KeyEvent),handles the keyreleased event by invoking the keyreleased methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.keyTyped(java.awt.event.KeyEvent),handles the keytyped event by invoking the keytyped methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.mouseClicked(java.awt.event.MouseEvent),handles the mouseclicked event by invoking the mouseclicked methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.mouseDragged(java.awt.event.MouseEvent),handles the mousedragged event by invoking the mousedragged methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.mouseEntered(java.awt.event.MouseEvent),handles the mouseentered event by invoking the mouseentered methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.mouseExited(java.awt.event.MouseEvent),handles the mouseexited event by invoking the mouseexited methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.mouseMoved(java.awt.event.MouseEvent),handles the mousemoved event by invoking the mousemoved methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.mousePressed(java.awt.event.MouseEvent),handles the mousepressed event by invoking the mousepressed methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.mouseReleased(java.awt.event.MouseEvent),handles the mousereleased event by invoking the mousereleased methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.mouseWheelMoved(java.awt.event.MouseWheelEvent),handles the mousewheelmoved event by invoking the mousewheelmoved methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.remove(java.util.EventListener),removes a listener from this multicaster.
"java.awt.AWTEventMulticaster.remove(java.awt.event.ComponentListener,java.awt.event.ComponentListener)",removes the old component-listener from component-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.ContainerListener,java.awt.event.ContainerListener)",removes the old container-listener from container-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.FocusListener,java.awt.event.FocusListener)",removes the old focus-listener from focus-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.KeyListener,java.awt.event.KeyListener)",removes the old key-listener from key-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.MouseListener,java.awt.event.MouseListener)",removes the old mouse-listener from mouse-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.MouseMotionListener,java.awt.event.MouseMotionListener)",removes the old mouse-motion-listener from mouse-motion-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.WindowListener,java.awt.event.WindowListener)",removes the old window-listener from window-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.WindowStateListener,java.awt.event.WindowStateListener)",removes the old window-state-listener from window-state-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.WindowFocusListener,java.awt.event.WindowFocusListener)",removes the old window-focus-listener from window-focus-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.ActionListener,java.awt.event.ActionListener)",removes the old action-listener from action-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.ItemListener,java.awt.event.ItemListener)",removes the old item-listener from item-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.AdjustmentListener,java.awt.event.AdjustmentListener)",removes the old adjustment-listener from adjustment-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.InputMethodListener,java.awt.event.InputMethodListener)",removes the old input-method-listener from input-method-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.HierarchyListener,java.awt.event.HierarchyListener)",removes the old hierarchy-listener from hierarchy-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.HierarchyBoundsListener,java.awt.event.HierarchyBoundsListener)",removes the old hierarchy-bounds-listener from hierarchy-bounds-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.remove(java.awt.event.MouseWheelListener,java.awt.event.MouseWheelListener)",removes the old mouse-wheel-listener from mouse-wheel-listener-l and returns the resulting multicast listener.
"java.awt.AWTEventMulticaster.removeInternal(java.util.EventListener,java.util.EventListener)",returns the resulting multicast listener after removing the old listener from listener-l.
java.awt.AWTEventMulticaster.windowActivated(java.awt.event.WindowEvent),handles the windowactivated event by invoking the windowactivated methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.windowClosed(java.awt.event.WindowEvent),handles the windowclosed event by invoking the windowclosed methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.windowClosing(java.awt.event.WindowEvent),handles the windowclosing event by invoking the windowclosing methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.windowDeactivated(java.awt.event.WindowEvent),handles the windowdeactivated event by invoking the windowdeactivated methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.windowDeiconified(java.awt.event.WindowEvent),handles the windowdeiconfied event by invoking the windowdeiconified methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.windowGainedFocus(java.awt.event.WindowEvent),handles the windowgainedfocus event by invoking the windowgainedfocus methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.windowIconified(java.awt.event.WindowEvent),handles the windowiconified event by invoking the windowiconified methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.windowLostFocus(java.awt.event.WindowEvent),handles the windowlostfocus event by invoking the windowlostfocus methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.windowOpened(java.awt.event.WindowEvent),handles the windowopened event by invoking the windowopened methods on listener-a and listener-b.
java.awt.AWTEventMulticaster.windowStateChanged(java.awt.event.WindowEvent),handles the windowstatechanged event by invoking the windowstatechanged methods on listener-a and listener-b.
java.awt.AWTKeyStroke.equals(java.lang.Object),returns true if this object is identical to the specified object.
java.awt.AWTKeyStroke.getAWTKeyStroke(char),returns a shared instance of an awtkeystroke that represents a key_typed event for the specified character.
"java.awt.AWTKeyStroke.getAWTKeyStroke(java.lang.Character,int)",returns a shared instance of an awtkeystroke that represents a key_typed event for the specified character object and a set of modifiers.
"java.awt.AWTKeyStroke.getAWTKeyStroke(int,int,boolean)","returns a shared instance of an awtkeystroke, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released."
"java.awt.AWTKeyStroke.getAWTKeyStroke(int,int)","returns a shared instance of an awtkeystroke, given a numeric key code and a set of modifiers."
java.awt.AWTKeyStroke.getAWTKeyStroke(java.lang.String),parses a string and returns an awtkeystroke.
java.awt.AWTKeyStroke.getAWTKeyStrokeForEvent(java.awt.event.KeyEvent),returns an awtkeystroke which represents the stroke which generated a given keyevent.
java.awt.AWTKeyStroke.getKeyChar(),returns the character for this awtkeystroke.
java.awt.AWTKeyStroke.getKeyCode(),returns the numeric key code for this awtkeystroke.
java.awt.AWTKeyStroke.getKeyEventType(),returns the type of keyevent which corresponds to this awtkeystroke.
java.awt.AWTKeyStroke.getModifiers(),returns the modifier keys for this awtkeystroke.
java.awt.AWTKeyStroke.hashCode(),"returns a numeric value for this object that is likely to be unique, making it a good choice as the index value in a hash table."
java.awt.AWTKeyStroke.isOnKeyRelease(),returns whether this awtkeystroke represents a key release.
java.awt.AWTKeyStroke.readResolve(),returns a cached instance of awtkeystroke (or a subclass of awtkeystroke) which is equal to this instance.
java.awt.AWTKeyStroke.registerSubclass(java.lang.Class<?>),registers a new class which the factory methods in awtkeystroke will use when generating new instances of awtkeystrokes.
java.awt.AWTKeyStroke.toString(),returns a string that displays and identifies this object's properties.
java.awt.BasicStroke.createStrokedShape(java.awt.Shape),returns a shape whose interior defines the stroked outline of a specified shape.
java.awt.BasicStroke.equals(java.lang.Object),"tests if a specified object is equal to this basicstroke by first testing if it is a basicstroke and then comparing its width, join, cap, miter limit, dash, and dash phase attributes with those of this basicstroke."
java.awt.BasicStroke.getDashArray(),returns the array representing the lengths of the dash segments.
java.awt.BasicStroke.getDashPhase(),returns the current dash phase.
java.awt.BasicStroke.getEndCap(),returns the end cap style.
java.awt.BasicStroke.getLineJoin(),returns the line join style.
java.awt.BasicStroke.getLineWidth(),returns the line width.
java.awt.BasicStroke.getMiterLimit(),returns the limit of miter joins.
java.awt.BasicStroke.hashCode(),returns the hashcode for this stroke.
"java.awt.BorderLayout.addLayoutComponent(java.awt.Component,java.lang.Object)","adds the specified component to the layout, using the specified constraint object."
java.awt.BorderLayout.getConstraints(java.awt.Component),gets the constraints for the specified component.
java.awt.BorderLayout.getHgap(),returns the horizontal gap between components.
java.awt.BorderLayout.getLayoutAlignmentX(java.awt.Container),returns the alignment along the x axis.
java.awt.BorderLayout.getLayoutAlignmentY(java.awt.Container),returns the alignment along the y axis.
java.awt.BorderLayout.getLayoutComponent(java.lang.Object),gets the component that was added using the given constraint.
"java.awt.BorderLayout.getLayoutComponent(java.awt.Container,java.lang.Object)",returns the component that corresponds to the given constraint location based on the target container's component orientation.
java.awt.BorderLayout.getVgap(),returns the vertical gap between components.
java.awt.BorderLayout.invalidateLayout(java.awt.Container),"invalidates the layout, indicating that if the layout manager has cached information it should be discarded."
java.awt.BorderLayout.layoutContainer(java.awt.Container),lays out the container argument using this border layout.
java.awt.BorderLayout.maximumLayoutSize(java.awt.Container),returns the maximum dimensions for this layout given the components in the specified target container.
java.awt.BorderLayout.minimumLayoutSize(java.awt.Container),determines the minimum size of the target container using this layout manager.
java.awt.BorderLayout.preferredLayoutSize(java.awt.Container),"determines the preferred size of the target container using this layout manager, based on the components in the container."
java.awt.BorderLayout.removeLayoutComponent(java.awt.Component),removes the specified component from this border layout.
java.awt.BorderLayout.setHgap(int),sets the horizontal gap between components.
java.awt.BorderLayout.setVgap(int),sets the vertical gap between components.
java.awt.BorderLayout.toString(),returns a string representation of the state of this border layout.
java.awt.Button.addActionListener(java.awt.event.ActionListener),adds the specified action listener to receive action events from this button.
java.awt.Button.addNotify(),creates the peer of the button.
java.awt.Button.getAccessibleContext(),gets the accessiblecontext associated with this button.
java.awt.Button.getActionCommand(),returns the command name of the action event fired by this button.
java.awt.Button.getActionListeners(),returns an array of all the action listeners registered on this button.
java.awt.Button.getLabel(),gets the label of this button.
java.awt.Button.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this button.
java.awt.Button.paramString(),returns a string representing the state of this button.
java.awt.Button.processActionEvent(java.awt.event.ActionEvent),processes action events occurring on this button by dispatching them to any registered actionlistener objects.
java.awt.Button.processEvent(java.awt.AWTEvent),processes events on this button.
java.awt.Button.removeActionListener(java.awt.event.ActionListener),removes the specified action listener so that it no longer receives action events from this button.
java.awt.Button.setActionCommand(java.lang.String),sets the command name for the action event fired by this button.
java.awt.Button.setLabel(java.lang.String),sets the button's label to be the specified string.
java.awt.Canvas.addNotify(),creates the peer of the canvas.
java.awt.Canvas.createBufferStrategy(int),creates a new strategy for multi-buffering on this component.
"java.awt.Canvas.createBufferStrategy(int,java.awt.BufferCapabilities)",creates a new strategy for multi-buffering on this component with the required buffer capabilities.
java.awt.Canvas.getAccessibleContext(),gets the accessiblecontext associated with this canvas.
java.awt.Canvas.getBufferStrategy(),returns the bufferstrategy used by this component.
java.awt.Canvas.paint(java.awt.Graphics),paints this canvas.
java.awt.Canvas.update(java.awt.Graphics),updates this canvas.
"java.awt.CardLayout.addLayoutComponent(java.awt.Component,java.lang.Object)",adds the specified component to this card layout's internal table of names.
java.awt.CardLayout.first(java.awt.Container),flips to the first card of the container.
java.awt.CardLayout.getHgap(),gets the horizontal gap between components.
java.awt.CardLayout.getLayoutAlignmentX(java.awt.Container),returns the alignment along the x axis.
java.awt.CardLayout.getLayoutAlignmentY(java.awt.Container),returns the alignment along the y axis.
java.awt.CardLayout.getVgap(),gets the vertical gap between components.
java.awt.CardLayout.invalidateLayout(java.awt.Container),"invalidates the layout, indicating that if the layout manager has cached information it should be discarded."
java.awt.CardLayout.last(java.awt.Container),flips to the last card of the container.
java.awt.CardLayout.layoutContainer(java.awt.Container),lays out the specified container using this card layout.
java.awt.CardLayout.maximumLayoutSize(java.awt.Container),returns the maximum dimensions for this layout given the components in the specified target container.
java.awt.CardLayout.minimumLayoutSize(java.awt.Container),calculates the minimum size for the specified panel.
java.awt.CardLayout.next(java.awt.Container),flips to the next card of the specified container.
java.awt.CardLayout.preferredLayoutSize(java.awt.Container),determines the preferred size of the container argument using this card layout.
java.awt.CardLayout.previous(java.awt.Container),flips to the previous card of the specified container.
java.awt.CardLayout.removeLayoutComponent(java.awt.Component),removes the specified component from the layout.
java.awt.CardLayout.setHgap(int),sets the horizontal gap between components.
java.awt.CardLayout.setVgap(int),sets the vertical gap between components.
"java.awt.CardLayout.show(java.awt.Container,java.lang.String)","flips to the component that was added to this layout with the specified name, using addlayoutcomponent."
java.awt.CardLayout.toString(),returns a string representation of the state of this card layout.
java.awt.Checkbox.addItemListener(java.awt.event.ItemListener),adds the specified item listener to receive item events from this check box.
java.awt.Checkbox.addNotify(),creates the peer of the checkbox.
java.awt.Checkbox.getAccessibleContext(),gets the accessiblecontext associated with this checkbox.
java.awt.Checkbox.getCheckboxGroup(),determines this check box's group.
java.awt.Checkbox.getItemListeners(),returns an array of all the item listeners registered on this checkbox.
java.awt.Checkbox.getLabel(),gets the label of this check box.
java.awt.Checkbox.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this checkbox.
java.awt.Checkbox.getSelectedObjects(),returns an array (length 1) containing the checkbox label or null if the checkbox is not selected.
java.awt.Checkbox.getState(),"determines whether this check box is in the ""on"" or ""off"" state."
java.awt.Checkbox.paramString(),returns a string representing the state of this checkbox.
java.awt.Checkbox.processEvent(java.awt.AWTEvent),processes events on this check box.
java.awt.Checkbox.processItemEvent(java.awt.event.ItemEvent),processes item events occurring on this check box by dispatching them to any registered itemlistener objects.
java.awt.Checkbox.removeItemListener(java.awt.event.ItemListener),removes the specified item listener so that the item listener no longer receives item events from this check box.
java.awt.Checkbox.setCheckboxGroup(java.awt.CheckboxGroup),sets this check box's group to the specified check box group.
java.awt.Checkbox.setLabel(java.lang.String),sets this check box's label to be the string argument.
java.awt.Checkbox.setState(boolean),sets the state of this check box to the specified state.
java.awt.CheckboxGroup.getSelectedCheckbox(),gets the current choice from this check box group.
java.awt.CheckboxGroup.setSelectedCheckbox(java.awt.Checkbox),sets the currently selected check box in this group to be the specified check box.
java.awt.CheckboxGroup.toString(),"returns a string representation of this check box group, including the value of its current selection."
java.awt.CheckboxMenuItem.addItemListener(java.awt.event.ItemListener),adds the specified item listener to receive item events from this check box menu item.
java.awt.CheckboxMenuItem.addNotify(),creates the peer of the checkbox item.
java.awt.CheckboxMenuItem.getAccessibleContext(),gets the accessiblecontext associated with this checkboxmenuitem.
java.awt.CheckboxMenuItem.getItemListeners(),returns an array of all the item listeners registered on this checkbox menuitem.
java.awt.CheckboxMenuItem.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this checkboxmenuitem.
java.awt.CheckboxMenuItem.getSelectedObjects(),returns the an array (length 1) containing the checkbox menu item label or null if the checkbox is not selected.
java.awt.CheckboxMenuItem.getState(),"determines whether the state of this check box menu item is ""on"" or ""off."
java.awt.CheckboxMenuItem.paramString(),returns a string representing the state of this checkboxmenuitem.
java.awt.CheckboxMenuItem.processEvent(java.awt.AWTEvent),processes events on this check box menu item.
java.awt.CheckboxMenuItem.processItemEvent(java.awt.event.ItemEvent),processes item events occurring on this check box menu item by dispatching them to any registered itemlistener objects.
java.awt.CheckboxMenuItem.removeItemListener(java.awt.event.ItemListener),removes the specified item listener so that it no longer receives item events from this check box menu item.
java.awt.CheckboxMenuItem.setState(boolean),sets this check box menu item to the specified state.
java.awt.Choice.add(java.lang.String),adds an item to this choice menu.
java.awt.Choice.addItem(java.lang.String),obsolete as of java 2 platform v1.
java.awt.Choice.addItemListener(java.awt.event.ItemListener),adds the specified item listener to receive item events from this choice menu.
java.awt.Choice.addNotify(),creates the choice's peer.
java.awt.Choice.getAccessibleContext(),gets the accessiblecontext associated with this choice.
java.awt.Choice.getItem(int),gets the string at the specified index in this choice menu.
java.awt.Choice.getItemCount(),returns the number of items in this choice menu.
java.awt.Choice.getItemListeners(),returns an array of all the item listeners registered on this choice.
java.awt.Choice.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this choice.
java.awt.Choice.getSelectedIndex(),returns the index of the currently selected item.
java.awt.Choice.getSelectedItem(),gets a representation of the current choice as a string.
java.awt.Choice.getSelectedObjects(),returns an array (length 1) containing the currently selected item.
"java.awt.Choice.insert(java.lang.String,int)",inserts the item into this choice at the specified position.
java.awt.Choice.paramString(),returns a string representing the state of this choice menu.
java.awt.Choice.processEvent(java.awt.AWTEvent),processes events on this choice.
java.awt.Choice.processItemEvent(java.awt.event.ItemEvent),processes item events occurring on this choice menu by dispatching them to any registered itemlistener objects.
java.awt.Choice.remove(java.lang.String),removes the first occurrence of item from the choice menu.
java.awt.Choice.remove(int),removes an item from the choice menu at the specified position.
java.awt.Choice.removeAll(),removes all items from the choice menu.
java.awt.Choice.removeItemListener(java.awt.event.ItemListener),removes the specified item listener so that it no longer receives item events from this choice menu.
java.awt.Choice.select(int),sets the selected item in this choice menu to be the item at the specified position.
java.awt.Choice.select(java.lang.String),sets the selected item in this choice menu to be the item whose name is equal to the specified string.
java.awt.Color.brighter(),creates a new color that is a brighter version of this color.
"java.awt.Color.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)",creates and returns a paintcontext used to generate a solid color field pattern.
java.awt.Color.darker(),creates a new color that is a darker version of this color.
java.awt.Color.decode(java.lang.String),converts a string to an integer and returns the specified opaque color.
java.awt.Color.equals(java.lang.Object),determines whether another object is equal to this color.
java.awt.Color.getAlpha(),returns the alpha component in the range 0-255.
java.awt.Color.getBlue(),returns the blue component in the range 0-255 in the default srgb space.
java.awt.Color.getColor(java.lang.String),finds a color in the system properties.
"java.awt.Color.getColor(java.lang.String,java.awt.Color)",finds a color in the system properties.
"java.awt.Color.getColor(java.lang.String,int)",finds a color in the system properties.
java.awt.Color.getColorComponents(float[]),"returns a float array containing only the color components of the color, in the colorspace of the color."
"java.awt.Color.getColorComponents(java.awt.color.ColorSpace,float[])",returns a float array containing only the color components of the color in the colorspace specified by the cspace parameter.
java.awt.Color.getColorSpace(),returns the colorspace of this color.
java.awt.Color.getComponents(float[]),"returns a float array containing the color and alpha components of the color, in the colorspace of the color."
"java.awt.Color.getComponents(java.awt.color.ColorSpace,float[])","returns a float array containing the color and alpha components of the color, in the colorspace specified by the cspace parameter."
java.awt.Color.getGreen(),returns the green component in the range 0-255 in the default srgb space.
"java.awt.Color.getHSBColor(float,float,float)",creates a color object based on the specified values for the hsb color model.
java.awt.Color.getRed(),returns the red component in the range 0-255 in the default srgb space.
java.awt.Color.getRGB(),returns the rgb value representing the color in the default srgb colormodel.
java.awt.Color.getRGBColorComponents(float[]),"returns a float array containing only the color components of the color, in the default srgb color space."
java.awt.Color.getRGBComponents(float[]),"returns a float array containing the color and alpha components of the color, as represented in the default srgb color space."
java.awt.Color.getTransparency(),returns the transparency mode for this color.
java.awt.Color.hashCode(),computes the hash code for this color.
"java.awt.Color.HSBtoRGB(float,float,float)","converts the components of a color, as specified by the hsb model, to an equivalent set of values for the default rgb model."
"java.awt.Color.RGBtoHSB(int,int,int,float[])","converts the components of a color, as specified by the default rgb model, to an equivalent set of values for hue, saturation, and brightness that are the three components of the hsb model."
java.awt.Color.toString(),returns a string representation of this color.
java.awt.Component.add(java.awt.PopupMenu),adds the specified popup menu to the component.
java.awt.Component.addComponentListener(java.awt.event.ComponentListener),adds the specified component listener to receive component events from this component.
java.awt.Component.addFocusListener(java.awt.event.FocusListener),adds the specified focus listener to receive focus events from this component when this component gains input focus.
java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener),adds the specified hierarchy bounds listener to receive hierarchy bounds events from this component when the hierarchy to which this container belongs changes.
java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener),adds the specified hierarchy listener to receive hierarchy changed events from this component when the hierarchy to which this container belongs changes.
java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener),adds the specified input method listener to receive input method events from this component.
java.awt.Component.addKeyListener(java.awt.event.KeyListener),adds the specified key listener to receive key events from this component.
java.awt.Component.addMouseListener(java.awt.event.MouseListener),adds the specified mouse listener to receive mouse events from this component.
java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener),adds the specified mouse motion listener to receive mouse motion events from this component.
java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener),adds the specified mouse wheel listener to receive mouse wheel events from this component.
java.awt.Component.addNotify(),makes this component displayable by connecting it to a native screen resource.
java.awt.Component.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
"java.awt.Component.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",adds a propertychangelistener to the listener list for a specific property.
java.awt.Component.applyComponentOrientation(java.awt.ComponentOrientation),sets the componentorientation property of this component and all components contained within it.
java.awt.Component.areFocusTraversalKeysSet(int),returns whether the set of focus traversal keys for the given focus traversal operation has been explicitly defined for this component.
"java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)",returns the status of the construction of a screen representation of the specified image.
"java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",returns the status of the construction of a screen representation of the specified image.
"java.awt.Component.coalesceEvents(java.awt.AWTEvent,java.awt.AWTEvent)",potentially coalesce an event being posted with an existing event.
"java.awt.Component.contains(int,int)","checks whether this component ""contains"" the specified point, where x and y are defined to be relative to the coordinate system of this component."
java.awt.Component.contains(java.awt.Point),"checks whether this component ""contains"" the specified point, where the point's x and y coordinates are defined to be relative to the coordinate system of this component."
java.awt.Component.createImage(java.awt.image.ImageProducer),creates an image from the specified image producer.
"java.awt.Component.createImage(int,int)",creates an off-screen drawable image to be used for double buffering.
"java.awt.Component.createVolatileImage(int,int)",creates a volatile off-screen drawable image to be used for double buffering.
"java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities)","creates a volatile off-screen drawable image, with the given capabilities."
java.awt.Component.disableEvents(long),disables the events defined by the specified event mask parameter from being delivered to this component.
java.awt.Component.dispatchEvent(java.awt.AWTEvent),dispatches an event to this component or one of its sub components.
java.awt.Component.doLayout(),prompts the layout manager to lay out this component.
java.awt.Component.enableEvents(long),enables the events defined by the specified event mask parameter to be delivered to this component.
java.awt.Component.enableInputMethods(boolean),enables or disables input method support for this component.
"java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",support for reporting bound property changes for object properties.
"java.awt.Component.firePropertyChange(java.lang.String,boolean,boolean)",support for reporting bound property changes for boolean properties.
"java.awt.Component.firePropertyChange(java.lang.String,int,int)",support for reporting bound property changes for integer properties.
"java.awt.Component.firePropertyChange(java.lang.String,byte,byte)",reports a bound property change.
"java.awt.Component.firePropertyChange(java.lang.String,char,char)",reports a bound property change.
"java.awt.Component.firePropertyChange(java.lang.String,short,short)",reports a bound property change.
"java.awt.Component.firePropertyChange(java.lang.String,long,long)",reports a bound property change.
"java.awt.Component.firePropertyChange(java.lang.String,float,float)",reports a bound property change.
"java.awt.Component.firePropertyChange(java.lang.String,double,double)",reports a bound property change.
java.awt.Component.getAccessibleContext(),gets the accessiblecontext associated with this component.
java.awt.Component.getAlignmentX(),returns the alignment along the x axis.
java.awt.Component.getAlignmentY(),returns the alignment along the y axis.
java.awt.Component.getBackground(),gets the background color of this component.
"java.awt.Component.getBaseline(int,int)",returns the baseline.
java.awt.Component.getBaselineResizeBehavior(),returns an enum indicating how the baseline of the component changes as the size changes.
java.awt.Component.getBounds(),gets the bounds of this component in the form of a rectangle object.
java.awt.Component.getBounds(java.awt.Rectangle),"stores the bounds of this component into ""return value"" rv and return rv."
java.awt.Component.getColorModel(),gets the instance of colormodel used to display the component on the output device.
"java.awt.Component.getComponentAt(int,int)","determines if this component or one of its immediate subcomponents contains the (x, y) location, and if so, returns the containing component."
java.awt.Component.getComponentAt(java.awt.Point),returns the component or subcomponent that contains the specified point.
java.awt.Component.getComponentListeners(),returns an array of all the component listeners registered on this component.
java.awt.Component.getComponentOrientation(),retrieves the language-sensitive orientation that is to be used to order the elements or text within this component.
java.awt.Component.getCursor(),gets the cursor set in the component.
java.awt.Component.getDropTarget(),gets the droptarget associated with this component.
java.awt.Component.getFocusCycleRootAncestor(),returns the container which is the focus cycle root of this component's focus traversal cycle.
java.awt.Component.getFocusListeners(),returns an array of all the focus listeners registered on this component.
java.awt.Component.getFocusTraversalKeys(int),returns the set of focus traversal keys for a given traversal operation for this component.
java.awt.Component.getFocusTraversalKeysEnabled(),returns whether focus traversal keys are enabled for this component.
java.awt.Component.getFont(),gets the font of this component.
java.awt.Component.getFontMetrics(java.awt.Font),gets the font metrics for the specified font.
java.awt.Component.getForeground(),gets the foreground color of this component.
java.awt.Component.getGraphics(),creates a graphics context for this component.
java.awt.Component.getGraphicsConfiguration(),gets the graphicsconfiguration associated with this component.
java.awt.Component.getHeight(),returns the current height of this component.
java.awt.Component.getHierarchyBoundsListeners(),returns an array of all the hierarchy bounds listeners registered on this component.
java.awt.Component.getHierarchyListeners(),returns an array of all the hierarchy listeners registered on this component.
java.awt.Component.getInputContext(),gets the input context used by this component for handling the communication with input methods when text is entered in this component.
java.awt.Component.getInputMethodListeners(),returns an array of all the input method listeners registered on this component.
java.awt.Component.getInputMethodRequests(),gets the input method request handler which supports requests from input methods for this component.
java.awt.Component.getKeyListeners(),returns an array of all the key listeners registered on this component.
java.awt.Component.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this component.
java.awt.Component.getLocale(),gets the locale of this component.
java.awt.Component.getLocation(),gets the location of this component in the form of a point specifying the component's top-left corner.
java.awt.Component.getLocation(java.awt.Point),"stores the x,y origin of this component into ""return value"" rv and return rv."
java.awt.Component.getLocationOnScreen(),gets the location of this component in the form of a point specifying the component's top-left corner in the screen's coordinate space.
java.awt.Component.getMaximumSize(),gets the maximum size of this component.
java.awt.Component.getMinimumSize(),gets the minimum size of this component.
java.awt.Component.getMouseListeners(),returns an array of all the mouse listeners registered on this component.
java.awt.Component.getMouseMotionListeners(),returns an array of all the mouse motion listeners registered on this component.
java.awt.Component.getMousePosition(),"returns the position of the mouse pointer in this component's coordinate space if the component is directly under the mouse pointer, otherwise returns null."
java.awt.Component.getMouseWheelListeners(),returns an array of all the mouse wheel listeners registered on this component.
java.awt.Component.getName(),gets the name of the component.
java.awt.Component.getParent(),gets the parent of this component.
java.awt.Component.getPreferredSize(),gets the preferred size of this component.
java.awt.Component.getPropertyChangeListeners(),returns an array of all the property change listeners registered on this component.
java.awt.Component.getPropertyChangeListeners(java.lang.String),returns an array of all the listeners which have been associated with the named property.
java.awt.Component.getSize(),returns the size of this component in the form of a dimension object.
java.awt.Component.getSize(java.awt.Dimension),"stores the width/height of this component into ""return value"" rv and return rv."
java.awt.Component.getToolkit(),gets the toolkit of this component.
java.awt.Component.getTreeLock(),gets this component's locking object (the object that owns the thread synchronization monitor) for awt component-tree and layout operations.
java.awt.Component.getWidth(),returns the current width of this component.
java.awt.Component.getX(),returns the current x coordinate of the components origin.
java.awt.Component.getY(),returns the current y coordinate of the components origin.
java.awt.Component.hasFocus(),returns true if this component is the focus owner.
"java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)",repaints the component when the image has changed.
java.awt.Component.invalidate(),invalidates this component and its ancestors.
java.awt.Component.isBackgroundSet(),returns whether the background color has been explicitly set for this component.
java.awt.Component.isCursorSet(),returns whether the cursor has been explicitly set for this component.
java.awt.Component.isDisplayable(),determines whether this component is displayable.
java.awt.Component.isDoubleBuffered(),"returns true if this component is painted to an offscreen image (""buffer"") that's copied to the screen later."
java.awt.Component.isEnabled(),determines whether this component is enabled.
java.awt.Component.isFocusable(),returns whether this component can be focused.
java.awt.Component.isFocusCycleRoot(java.awt.Container),returns whether the specified container is the focus cycle root of this component's focus traversal cycle.
java.awt.Component.isFocusOwner(),returns true if this component is the focus owner.
java.awt.Component.isFontSet(),returns whether the font has been explicitly set for this component.
java.awt.Component.isForegroundSet(),returns whether the foreground color has been explicitly set for this component.
java.awt.Component.isLightweight(),a lightweight component doesn't have a native toolkit peer.
java.awt.Component.isMaximumSizeSet(),returns true if the maximum size has been set to a non-null value otherwise returns false.
java.awt.Component.isMinimumSizeSet(),returns whether or not setminimumsize has been invoked with a non-null value.
java.awt.Component.isOpaque(),"returns true if this component is completely opaque, returns false by default."
java.awt.Component.isPreferredSizeSet(),returns true if the preferred size has been set to a non-null value otherwise returns false.
java.awt.Component.isShowing(),determines whether this component is showing on screen.
java.awt.Component.isValid(),determines whether this component is valid.
java.awt.Component.isVisible(),determines whether this component should be visible when its parent is visible.
java.awt.Component.list(),prints a listing of this component to the standard system output stream system.
java.awt.Component.list(java.io.PrintStream),prints a listing of this component to the specified output stream.
"java.awt.Component.list(java.io.PrintStream,int)","prints out a list, starting at the specified indentation, to the specified print stream."
java.awt.Component.list(java.io.PrintWriter),prints a listing to the specified print writer.
"java.awt.Component.list(java.io.PrintWriter,int)","prints out a list, starting at the specified indentation, to the specified print writer."
java.awt.Component.paint(java.awt.Graphics),paints this component.
java.awt.Component.paintAll(java.awt.Graphics),paints this component and all of its subcomponents.
java.awt.Component.paramString(),returns a string representing the state of this component.
"java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)",prepares an image for rendering on this component.
"java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",prepares an image for rendering on this component at the specified width and height.
java.awt.Component.print(java.awt.Graphics),prints this component.
java.awt.Component.printAll(java.awt.Graphics),prints this component and all of its subcomponents.
java.awt.Component.processComponentEvent(java.awt.event.ComponentEvent),processes component events occurring on this component by dispatching them to any registered componentlistener objects.
java.awt.Component.processEvent(java.awt.AWTEvent),processes events occurring on this component.
java.awt.Component.processFocusEvent(java.awt.event.FocusEvent),processes focus events occurring on this component by dispatching them to any registered focuslistener objects.
java.awt.Component.processHierarchyBoundsEvent(java.awt.event.HierarchyEvent),processes hierarchy bounds events occurring on this component by dispatching them to any registered hierarchyboundslistener objects.
java.awt.Component.processHierarchyEvent(java.awt.event.HierarchyEvent),processes hierarchy events occurring on this component by dispatching them to any registered hierarchylistener objects.
java.awt.Component.processInputMethodEvent(java.awt.event.InputMethodEvent),processes input method events occurring on this component by dispatching them to any registered inputmethodlistener objects.
java.awt.Component.processKeyEvent(java.awt.event.KeyEvent),processes key events occurring on this component by dispatching them to any registered keylistener objects.
java.awt.Component.processMouseEvent(java.awt.event.MouseEvent),processes mouse events occurring on this component by dispatching them to any registered mouselistener objects.
java.awt.Component.processMouseMotionEvent(java.awt.event.MouseEvent),processes mouse motion events occurring on this component by dispatching them to any registered mousemotionlistener objects.
java.awt.Component.processMouseWheelEvent(java.awt.event.MouseWheelEvent),processes mouse wheel events occurring on this component by dispatching them to any registered mousewheellistener objects.
java.awt.Component.remove(java.awt.MenuComponent),removes the specified popup menu from the component.
java.awt.Component.removeComponentListener(java.awt.event.ComponentListener),removes the specified component listener so that it no longer receives component events from this component.
java.awt.Component.removeFocusListener(java.awt.event.FocusListener),removes the specified focus listener so that it no longer receives focus events from this component.
java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener),removes the specified hierarchy bounds listener so that it no longer receives hierarchy bounds events from this component.
java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener),removes the specified hierarchy listener so that it no longer receives hierarchy changed events from this component.
java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener),removes the specified input method listener so that it no longer receives input method events from this component.
java.awt.Component.removeKeyListener(java.awt.event.KeyListener),removes the specified key listener so that it no longer receives key events from this component.
java.awt.Component.removeMouseListener(java.awt.event.MouseListener),removes the specified mouse listener so that it no longer receives mouse events from this component.
java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener),removes the specified mouse motion listener so that it no longer receives mouse motion events from this component.
java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener),removes the specified mouse wheel listener so that it no longer receives mouse wheel events from this component.
java.awt.Component.removeNotify(),makes this component undisplayable by destroying it native screen resource.
java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychangelistener from the listener list.
"java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",removes a propertychangelistener from the listener list for a specific property.
java.awt.Component.repaint(),repaints this component.
java.awt.Component.repaint(long),repaints the component.
"java.awt.Component.repaint(int,int,int,int)",repaints the specified rectangle of this component.
"java.awt.Component.repaint(long,int,int,int,int)",repaints the specified rectangle of this component within tm milliseconds.
java.awt.Component.requestFocus(),"requests that this component get the input focus, and that this component's top-level ancestor become the focused window."
java.awt.Component.requestFocus(boolean),"requests that this component get the input focus, and that this component's top-level ancestor become the focused window."
java.awt.Component.requestFocusInWindow(),"requests that this component get the input focus, if this component's top-level ancestor is already the focused window."
java.awt.Component.requestFocusInWindow(boolean),"requests that this component get the input focus, if this component's top-level ancestor is already the focused window."
java.awt.Component.revalidate(),revalidates the component hierarchy up to the nearest validate root.
java.awt.Component.setBackground(java.awt.Color),sets the background color of this component.
"java.awt.Component.setBounds(int,int,int,int)",moves and resizes this component.
java.awt.Component.setBounds(java.awt.Rectangle),moves and resizes this component to conform to the new bounding rectangle r.
java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation),sets the language-sensitive orientation that is to be used to order the elements or text within this component.
java.awt.Component.setCursor(java.awt.Cursor),sets the cursor image to the specified cursor.
java.awt.Component.setDropTarget(java.awt.dnd.DropTarget),associate a droptarget with this component.
java.awt.Component.setEnabled(boolean),"enables or disables this component, depending on the value of the parameter b."
java.awt.Component.setFocusable(boolean),sets the focusable state of this component to the specified value.
"java.awt.Component.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)",sets the focus traversal keys for a given traversal operation for this component.
java.awt.Component.setFocusTraversalKeysEnabled(boolean),sets whether focus traversal keys are enabled for this component.
java.awt.Component.setFont(java.awt.Font),sets the font of this component.
java.awt.Component.setForeground(java.awt.Color),sets the foreground color of this component.
java.awt.Component.setIgnoreRepaint(boolean),sets whether or not paint messages received from the operating system should be ignored.
java.awt.Component.setLocale(java.util.Locale),sets the locale of this component.
"java.awt.Component.setLocation(int,int)",moves this component to a new location.
java.awt.Component.setLocation(java.awt.Point),moves this component to a new location.
java.awt.Component.setMaximumSize(java.awt.Dimension),sets the maximum size of this component to a constant value.
java.awt.Component.setMinimumSize(java.awt.Dimension),sets the minimum size of this component to a constant value.
java.awt.Component.setName(java.lang.String),sets the name of the component to the specified string.
java.awt.Component.setPreferredSize(java.awt.Dimension),sets the preferred size of this component to a constant value.
"java.awt.Component.setSize(int,int)",resizes this component so that it has width width and height height.
java.awt.Component.setSize(java.awt.Dimension),resizes this component so that it has width d.
java.awt.Component.setVisible(boolean),shows or hides this component depending on the value of parameter b.
java.awt.Component.toString(),returns a string representation of this component and its values.
java.awt.Component.transferFocus(),"transfers the focus to the next component, as though this component were the focus owner."
java.awt.Component.transferFocusBackward(),"transfers the focus to the previous component, as though this component were the focus owner."
java.awt.Component.transferFocusUpCycle(),transfers the focus up one focus traversal cycle.
java.awt.Component.update(java.awt.Graphics),updates this component.
java.awt.Component.validate(),validates this component.
java.awt.ComponentOrientation.getOrientation(java.util.Locale),returns the orientation that is appropriate for the given locale.
java.awt.ComponentOrientation.isHorizontal(),"are lines horizontal? this will return true for horizontal, left-to-right writing systems such as roman."
java.awt.ComponentOrientation.isLeftToRight(),"horizontallines: do items run left-to-right? vertical lines: do lines run left-to-right? this will return true for horizontal, left-to-right writing systems such as roman."
java.awt.Container.add(java.awt.Component),appends the specified component to the end of this container.
"java.awt.Container.add(java.lang.String,java.awt.Component)",adds the specified component to this container.
"java.awt.Container.add(java.awt.Component,int)",adds the specified component to this container at the given position.
"java.awt.Container.add(java.awt.Component,java.lang.Object)",adds the specified component to the end of this container.
"java.awt.Container.add(java.awt.Component,java.lang.Object,int)",adds the specified component to this container with the specified constraints at the specified index.
java.awt.Container.addContainerListener(java.awt.event.ContainerListener),adds the specified container listener to receive container events from this container.
"java.awt.Container.addImpl(java.awt.Component,java.lang.Object,int)",adds the specified component to this container at the specified index.
java.awt.Container.addNotify(),makes this container displayable by connecting it to a native screen resource.
java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
"java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",adds a propertychangelistener to the listener list for a specific property.
java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation),sets the componentorientation property of this container and all components contained within it.
java.awt.Container.areFocusTraversalKeysSet(int),returns whether the set of focus traversal keys for the given focus traversal operation has been explicitly defined for this container.
java.awt.Container.doLayout(),causes this container to lay out its components.
"java.awt.Container.findComponentAt(int,int)",locates the visible child component that contains the specified position.
java.awt.Container.findComponentAt(java.awt.Point),locates the visible child component that contains the specified point.
java.awt.Container.getAlignmentX(),returns the alignment along the x axis.
java.awt.Container.getAlignmentY(),returns the alignment along the y axis.
java.awt.Container.getComponent(int),gets the nth component in this container.
"java.awt.Container.getComponentAt(int,int)","locates the component that contains the x,y position."
java.awt.Container.getComponentAt(java.awt.Point),gets the component that contains the specified point.
java.awt.Container.getComponentCount(),gets the number of components in this panel.
java.awt.Container.getComponents(),gets all the components in this container.
java.awt.Container.getComponentZOrder(java.awt.Component),returns the z-order index of the component inside the container.
java.awt.Container.getContainerListeners(),returns an array of all the container listeners registered on this container.
java.awt.Container.getFocusTraversalKeys(int),returns the set of focus traversal keys for a given traversal operation for this container.
java.awt.Container.getFocusTraversalPolicy(),"returns the focus traversal policy that will manage keyboard traversal of this container's children, or null if this container is not a focus cycle root."
java.awt.Container.getInsets(),"determines the insets of this container, which indicate the size of the container's border."
java.awt.Container.getLayout(),gets the layout manager for this container.
java.awt.Container.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this container.
java.awt.Container.getMaximumSize(),returns the maximum size of this container.
java.awt.Container.getMinimumSize(),returns the minimum size of this container.
java.awt.Container.getMousePosition(boolean),"returns the position of the mouse pointer in this container's coordinate space if the container is under the mouse pointer, otherwise returns null."
java.awt.Container.getPreferredSize(),returns the preferred size of this container.
java.awt.Container.invalidate(),invalidates the container.
java.awt.Container.isAncestorOf(java.awt.Component),checks if the component is contained in the component hierarchy of this container.
java.awt.Container.isFocusCycleRoot(java.awt.Container),returns whether the specified container is the focus cycle root of this container's focus traversal cycle.
java.awt.Container.isFocusCycleRoot(),returns whether this container is the root of a focus traversal cycle.
java.awt.Container.isFocusTraversalPolicyProvider(),returns whether this container provides focus traversal policy.
java.awt.Container.isFocusTraversalPolicySet(),returns whether the focus traversal policy has been explicitly set for this container.
java.awt.Container.isValidateRoot(),indicates if this container is a validate root.
"java.awt.Container.list(java.io.PrintStream,int)",prints a listing of this container to the specified output stream.
"java.awt.Container.list(java.io.PrintWriter,int)","prints out a list, starting at the specified indentation, to the specified print writer."
java.awt.Container.paint(java.awt.Graphics),paints the container.
java.awt.Container.paintComponents(java.awt.Graphics),paints each of the components in this container.
java.awt.Container.paramString(),returns a string representing the state of this container.
java.awt.Container.print(java.awt.Graphics),prints the container.
java.awt.Container.printComponents(java.awt.Graphics),prints each of the components in this container.
java.awt.Container.processContainerEvent(java.awt.event.ContainerEvent),processes container events occurring on this container by dispatching them to any registered containerlistener objects.
java.awt.Container.processEvent(java.awt.AWTEvent),processes events on this container.
java.awt.Container.remove(int),"removes the component, specified by index, from this container."
java.awt.Container.remove(java.awt.Component),removes the specified component from this container.
java.awt.Container.removeAll(),removes all the components from this container.
java.awt.Container.removeContainerListener(java.awt.event.ContainerListener),removes the specified container listener so it no longer receives container events from this container.
java.awt.Container.removeNotify(),makes this container undisplayable by removing its connection to its native screen resource.
"java.awt.Container.setComponentZOrder(java.awt.Component,int)",moves the specified component to the specified z-order index in the container.
java.awt.Container.setFocusCycleRoot(boolean),sets whether this container is the root of a focus traversal cycle.
"java.awt.Container.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)",sets the focus traversal keys for a given traversal operation for this container.
java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy),"sets the focus traversal policy that will manage keyboard traversal of this container's children, if this container is a focus cycle root."
java.awt.Container.setFocusTraversalPolicyProvider(boolean),sets whether this container will be used to provide focus traversal policy.
java.awt.Container.setFont(java.awt.Font),sets the font of this container.
java.awt.Container.setLayout(java.awt.LayoutManager),sets the layout manager for this container.
java.awt.Container.transferFocusDownCycle(),transfers the focus down one focus traversal cycle.
java.awt.Container.update(java.awt.Graphics),updates the container.
java.awt.Container.validate(),validates this container and all of its subcomponents.
java.awt.Container.validateTree(),recursively descends the container tree and recomputes the layout for any subtrees marked as needing it (those marked as invalid).
java.awt.ContainerOrderFocusTraversalPolicy.accept(java.awt.Component),determines whether a component is an acceptable choice as the new focus owner.
"java.awt.ContainerOrderFocusTraversalPolicy.getComponentAfter(java.awt.Container,java.awt.Component)",returns the component that should receive the focus after acomponent.
"java.awt.ContainerOrderFocusTraversalPolicy.getComponentBefore(java.awt.Container,java.awt.Component)",returns the component that should receive the focus before acomponent.
java.awt.ContainerOrderFocusTraversalPolicy.getDefaultComponent(java.awt.Container),returns the default component to focus.
java.awt.ContainerOrderFocusTraversalPolicy.getFirstComponent(java.awt.Container),returns the first component in the traversal cycle.
java.awt.ContainerOrderFocusTraversalPolicy.getImplicitDownCycleTraversal(),returns whether this containerorderfocustraversalpolicy transfers focus down-cycle implicitly.
java.awt.ContainerOrderFocusTraversalPolicy.getLastComponent(java.awt.Container),returns the last component in the traversal cycle.
java.awt.ContainerOrderFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean),sets whether this containerorderfocustraversalpolicy transfers focus down-cycle implicitly.
java.awt.Cursor.getDefaultCursor(),return the system default cursor.
java.awt.Cursor.getName(),returns the name of this cursor.
java.awt.Cursor.getPredefinedCursor(int),returns a cursor object with the specified predefined type.
java.awt.Cursor.getSystemCustomCursor(java.lang.String),returns a system-specific custom cursor object matching the specified name.
java.awt.Cursor.getType(),returns the type for this cursor.
java.awt.Cursor.toString(),returns a string representation of this cursor.
java.awt.DefaultFocusTraversalPolicy.accept(java.awt.Component),determines whether a component is an acceptable choice as the new focus owner.
"java.awt.DefaultKeyboardFocusManager.dequeueKeyEvents(long,java.awt.Component)",releases for normal dispatching to the current focus owner all keyevents which were enqueued because of a call to enqueuekeyevents with the same timestamp and component.
java.awt.DefaultKeyboardFocusManager.discardKeyEvents(java.awt.Component),"discards all keyevents which were enqueued because of one or more calls to enqueuekeyevents with the specified component, or one of its descendants."
java.awt.DefaultKeyboardFocusManager.dispatchEvent(java.awt.AWTEvent),this method is called by the awt event dispatcher requesting that the current keyboardfocusmanager dispatch the specified event on its behalf.
java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(java.awt.event.KeyEvent),"called by dispatchevent if no other keyeventdispatcher in the dispatcher chain dispatched the keyevent, or if no other keyeventdispatchers are registered."
java.awt.DefaultKeyboardFocusManager.downFocusCycle(java.awt.Container),moves the focus down one focus traversal cycle.
"java.awt.DefaultKeyboardFocusManager.enqueueKeyEvents(long,java.awt.Component)",delays dispatching of keyevents until the specified component becomes the focus owner.
java.awt.DefaultKeyboardFocusManager.focusNextComponent(java.awt.Component),"focuses the component after acomponent, typically based on a focustraversalpolicy."
java.awt.DefaultKeyboardFocusManager.focusPreviousComponent(java.awt.Component),"focuses the component before acomponent, typically based on a focustraversalpolicy."
java.awt.DefaultKeyboardFocusManager.postProcessKeyEvent(java.awt.event.KeyEvent),this method will be called by dispatchkeyevent.
"java.awt.DefaultKeyboardFocusManager.processKeyEvent(java.awt.Component,java.awt.event.KeyEvent)",this method initiates a focus traversal operation if and only if the keyevent represents a focus traversal key for the specified focusedcomponent.
java.awt.DefaultKeyboardFocusManager.upFocusCycle(java.awt.Component),moves the focus up one focus traversal cycle.
java.awt.Desktop.browse(java.net.URI),launches the default browser to display a uri.
java.awt.Desktop.edit(java.io.File),launches the associated editor application and opens a file for editing.
java.awt.Desktop.getDesktop(),returns the desktop instance of the current browser context.
java.awt.Desktop.isDesktopSupported(),tests whether this class is supported on the current platform.
java.awt.Desktop.isSupported(java.awt.Desktop.Action),tests whether an action is supported on the current platform.
java.awt.Desktop.mail(),launches the mail composing window of the user default mail client.
java.awt.Desktop.mail(java.net.URI),"launches the mail composing window of the user default mail client, filling the message fields specified by a mailto: uri."
java.awt.Desktop.open(java.io.File),launches the associated application to open the file.
java.awt.Desktop.print(java.io.File),"prints a file with the native desktop printing facility, using the associated application's print command."
java.awt.Dialog.addNotify(),makes this dialog displayable by connecting it to a native screen resource.
java.awt.Dialog.getAccessibleContext(),gets the accessiblecontext associated with this dialog.
java.awt.Dialog.getModalityType(),returns the modality type of this dialog.
java.awt.Dialog.getTitle(),gets the title of the dialog.
java.awt.Dialog.isModal(),indicates whether the dialog is modal.
java.awt.Dialog.isResizable(),indicates whether this dialog is resizable by the user.
java.awt.Dialog.isUndecorated(),indicates whether this dialog is undecorated.
java.awt.Dialog.paramString(),returns a string representing the state of this dialog.
java.awt.Dialog.setBackground(java.awt.Color),sets the background color of this window.
java.awt.Dialog.setModal(boolean),specifies whether this dialog should be modal.
java.awt.Dialog.setModalityType(java.awt.Dialog.ModalityType),sets the modality type for this dialog.
java.awt.Dialog.setOpacity(float),sets the opacity of the window.
java.awt.Dialog.setResizable(boolean),sets whether this dialog is resizable by the user.
java.awt.Dialog.setShape(java.awt.Shape),sets the shape of the window.
java.awt.Dialog.setTitle(java.lang.String),sets the title of the dialog.
java.awt.Dialog.setUndecorated(boolean),disables or enables decorations for this dialog.
java.awt.Dialog.setVisible(boolean),shows or hides this dialog depending on the value of parameter b.
java.awt.Dialog.toBack(),"if this window is visible, sends this window to the back and may cause it to lose focus or activation if it is the focused or active window."
java.awt.Dimension.equals(java.lang.Object),checks whether two dimension objects have equal values.
java.awt.Dimension.getHeight(),returns the height of this dimension in double precision.
java.awt.Dimension.getSize(),gets the size of this dimension object.
java.awt.Dimension.getWidth(),returns the width of this dimension in double precision.
java.awt.Dimension.hashCode(),returns the hash code for this dimension.
"java.awt.Dimension.setSize(double,double)",sets the size of this dimension object to the specified width and height in double precision.
java.awt.Dimension.setSize(java.awt.Dimension),sets the size of this dimension object to the specified size.
"java.awt.Dimension.setSize(int,int)",sets the size of this dimension object to the specified width and height.
java.awt.Dimension.toString(),returns a string representation of the values of this dimension object's height and width fields.
java.awt.DisplayMode.equals(java.awt.DisplayMode),returns whether the two display modes are equal.
java.awt.DisplayMode.equals(java.lang.Object),"indicates whether some other object is ""equal to"" this one."
java.awt.DisplayMode.getBitDepth(),"returns the bit depth of the display, in bits per pixel."
java.awt.DisplayMode.getHeight(),"returns the height of the display, in pixels."
java.awt.DisplayMode.getRefreshRate(),"returns the refresh rate of the display, in hertz."
java.awt.DisplayMode.getWidth(),"returns the width of the display, in pixels."
java.awt.DisplayMode.hashCode(),returns a hash code value for the object.
java.awt.Event.controlDown(),note: the event class is obsolete and is available only for backwards compatibility.
java.awt.Event.metaDown(),note: the event class is obsolete and is available only for backwards compatibility.
java.awt.Event.paramString(),note: the event class is obsolete and is available only for backwards compatibility.
java.awt.Event.shiftDown(),note: the event class is obsolete and is available only for backwards compatibility.
java.awt.Event.toString(),note: the event class is obsolete and is available only for backwards compatibility.
"java.awt.Event.translate(int,int)",note: the event class is obsolete and is available only for backwards compatibility.
java.awt.EventQueue.createSecondaryLoop(),creates a new secondary loop associated with this event queue.
java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent),dispatches an event.
java.awt.EventQueue.getCurrentEvent(),returns the the event currently being dispatched by the eventqueue associated with the calling thread.
java.awt.EventQueue.getMostRecentEventTime(),"returns the timestamp of the most recent event that had a timestamp, and that was dispatched from the eventqueue associated with the calling thread."
java.awt.EventQueue.getNextEvent(),removes an event from the eventqueue and returns it.
java.awt.EventQueue.invokeAndWait(java.lang.Runnable),causes runnable to have its run method called in the dispatch thread of the system eventqueue.
java.awt.EventQueue.invokeLater(java.lang.Runnable),causes runnable to have its run method called in the dispatch thread of the system eventqueue.
java.awt.EventQueue.isDispatchThread(),returns true if the calling thread is the current awt eventqueue's dispatch thread.
java.awt.EventQueue.peekEvent(),returns the first event on the eventqueue without removing it.
java.awt.EventQueue.peekEvent(int),"returns the first event with the specified id, if any."
java.awt.EventQueue.pop(),stops dispatching events using this eventqueue.
java.awt.EventQueue.postEvent(java.awt.AWTEvent),posts a 1.
java.awt.EventQueue.push(java.awt.EventQueue),replaces the existing eventqueue with the specified one.
java.awt.FileDialog.addNotify(),creates the file dialog's peer.
java.awt.FileDialog.getDirectory(),gets the directory of this file dialog.
java.awt.FileDialog.getFile(),gets the selected file of this file dialog.
java.awt.FileDialog.getFilenameFilter(),determines this file dialog's filename filter.
java.awt.FileDialog.getFiles(),returns files that the user selects.
java.awt.FileDialog.getMode(),indicates whether this file dialog box is for loading from a file or for saving to a file.
java.awt.FileDialog.isMultipleMode(),returns whether the file dialog allows the multiple file selection.
java.awt.FileDialog.paramString(),returns a string representing the state of this filedialog window.
java.awt.FileDialog.setDirectory(java.lang.String),sets the directory of this file dialog window to be the specified directory.
java.awt.FileDialog.setFile(java.lang.String),sets the selected file for this file dialog window to be the specified file.
java.awt.FileDialog.setFilenameFilter(java.io.FilenameFilter),sets the filename filter for this file dialog window to the specified filter.
java.awt.FileDialog.setMode(int),sets the mode of the file dialog.
java.awt.FileDialog.setMultipleMode(boolean),enables or disables multiple file selection for the file dialog.
"java.awt.FlowLayout.addLayoutComponent(java.lang.String,java.awt.Component)",adds the specified component to the layout.
java.awt.FlowLayout.getAlignment(),gets the alignment for this layout.
java.awt.FlowLayout.getAlignOnBaseline(),returns true if components are to be vertically aligned along their baseline.
java.awt.FlowLayout.getHgap(),gets the horizontal gap between components and between the components and the borders of the container.
java.awt.FlowLayout.getVgap(),gets the vertical gap between components and between the components and the borders of the container.
java.awt.FlowLayout.layoutContainer(java.awt.Container),lays out the container.
java.awt.FlowLayout.minimumLayoutSize(java.awt.Container),returns the minimum dimensions needed to layout the visible components contained in the specified target container.
java.awt.FlowLayout.preferredLayoutSize(java.awt.Container),returns the preferred dimensions for this layout given the visible components in the specified target container.
java.awt.FlowLayout.removeLayoutComponent(java.awt.Component),removes the specified component from the layout.
java.awt.FlowLayout.setAlignment(int),sets the alignment for this layout.
java.awt.FlowLayout.setAlignOnBaseline(boolean),sets whether or not components should be vertically aligned along their baseline.
java.awt.FlowLayout.setHgap(int),sets the horizontal gap between components and between the components and the borders of the container.
java.awt.FlowLayout.setVgap(int),sets the vertical gap between components and between the components and the borders of the container.
java.awt.FlowLayout.toString(),returns a string representation of this flowlayout object and its values.
"java.awt.FocusTraversalPolicy.getComponentAfter(java.awt.Container,java.awt.Component)",returns the component that should receive the focus after acomponent.
"java.awt.FocusTraversalPolicy.getComponentBefore(java.awt.Container,java.awt.Component)",returns the component that should receive the focus before acomponent.
java.awt.FocusTraversalPolicy.getDefaultComponent(java.awt.Container),returns the default component to focus.
java.awt.FocusTraversalPolicy.getFirstComponent(java.awt.Container),returns the first component in the traversal cycle.
java.awt.FocusTraversalPolicy.getInitialComponent(java.awt.Window),returns the component that should receive the focus when a window is made visible for the first time.
java.awt.FocusTraversalPolicy.getLastComponent(java.awt.Container),returns the last component in the traversal cycle.
java.awt.Font.canDisplay(char),checks if this font has a glyph for the specified character.
java.awt.Font.canDisplay(int),checks if this font has a glyph for the specified character.
java.awt.Font.canDisplayUpTo(java.lang.String),indicates whether or not this font can display a specified string.
"java.awt.Font.canDisplayUpTo(char[],int,int)",indicates whether or not this font can display the characters in the specified text starting at start and ending at limit.
"java.awt.Font.canDisplayUpTo(java.text.CharacterIterator,int,int)",indicates whether or not this font can display the text specified by the iter starting at start and ending at limit.
"java.awt.Font.createFont(int,java.io.InputStream)",returns a new font using the specified font type and input data.
"java.awt.Font.createFont(int,java.io.File)",returns a new font using the specified font type and the specified font file.
"java.awt.Font.createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)",creates a glyphvector by mapping characters to glyphs one-to-one based on the unicode cmap in this font.
"java.awt.Font.createGlyphVector(java.awt.font.FontRenderContext,char[])",creates a glyphvector by mapping characters to glyphs one-to-one based on the unicode cmap in this font.
"java.awt.Font.createGlyphVector(java.awt.font.FontRenderContext,java.text.CharacterIterator)",creates a glyphvector by mapping the specified characters to glyphs one-to-one based on the unicode cmap in this font.
"java.awt.Font.createGlyphVector(java.awt.font.FontRenderContext,int[])",creates a glyphvector by mapping characters to glyphs one-to-one based on the unicode cmap in this font.
java.awt.Font.decode(java.lang.String),returns the font that the str argument describes.
"java.awt.Font.deriveFont(int,float)",creates a new font object by replicating this font object and applying a new style and size.
"java.awt.Font.deriveFont(int,java.awt.geom.AffineTransform)",creates a new font object by replicating this font object and applying a new style and transform.
java.awt.Font.deriveFont(float),creates a new font object by replicating the current font object and applying a new size to it.
java.awt.Font.deriveFont(java.awt.geom.AffineTransform),creates a new font object by replicating the current font object and applying a new transform to it.
java.awt.Font.deriveFont(int),creates a new font object by replicating the current font object and applying a new style to it.
"java.awt.Font.deriveFont(java.util.Map<? extends,?>)",creates a new font object by replicating the current font object and applying a new set of font attributes to it.
java.awt.Font.equals(java.lang.Object),compares this font object to the specified object.
java.awt.Font.getAttributes(),returns a map of font attributes available in this font.
java.awt.Font.getAvailableAttributes(),returns the keys of all the attributes supported by this font.
java.awt.Font.getBaselineFor(char),returns the baseline appropriate for displaying this character.
java.awt.Font.getFamily(),returns the family name of this font.
java.awt.Font.getFamily(java.util.Locale),"returns the family name of this font, localized for the specified locale."
"java.awt.Font.getFont(java.util.Map<? extends,?>)",returns a font appropriate to the attributes.
java.awt.Font.getFont(java.lang.String),returns a font object from the system properties list.
"java.awt.Font.getFont(java.lang.String,java.awt.Font)",gets the specified font from the system properties list.
java.awt.Font.getFontName(),returns the font face name of this font.
java.awt.Font.getFontName(java.util.Locale),"returns the font face name of the font, localized for the specified locale."
java.awt.Font.getItalicAngle(),returns the italic angle of this font.
"java.awt.Font.getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)",returns a linemetrics object created with the specified string and fontrendercontext.
"java.awt.Font.getLineMetrics(java.lang.String,int,int,java.awt.font.FontRenderContext)",returns a linemetrics object created with the specified arguments.
"java.awt.Font.getLineMetrics(char[],int,int,java.awt.font.FontRenderContext)",returns a linemetrics object created with the specified arguments.
"java.awt.Font.getLineMetrics(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)",returns a linemetrics object created with the specified arguments.
java.awt.Font.getMaxCharBounds(java.awt.font.FontRenderContext),returns the bounds for the character with the maximum bounds as defined in the specified fontrendercontext.
java.awt.Font.getMissingGlyphCode(),returns the glyphcode which is used when this font does not have a glyph for a specified unicode code point.
java.awt.Font.getName(),returns the logical name of this font.
java.awt.Font.getNumGlyphs(),returns the number of glyphs in this font.
java.awt.Font.getPSName(),returns the postscript name of this font.
java.awt.Font.getSize(),"returns the point size of this font, rounded to an integer."
java.awt.Font.getSize2D(),returns the point size of this font in float value.
"java.awt.Font.getStringBounds(java.lang.String,java.awt.font.FontRenderContext)",returns the logical bounds of the specified string in the specified fontrendercontext.
"java.awt.Font.getStringBounds(java.lang.String,int,int,java.awt.font.FontRenderContext)",returns the logical bounds of the specified string in the specified fontrendercontext.
"java.awt.Font.getStringBounds(char[],int,int,java.awt.font.FontRenderContext)",returns the logical bounds of the specified array of characters in the specified fontrendercontext.
"java.awt.Font.getStringBounds(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)",returns the logical bounds of the characters indexed in the specified characteriterator in the specified fontrendercontext.
java.awt.Font.getStyle(),returns the style of this font.
java.awt.Font.getTransform(),returns a copy of the transform associated with this font.
java.awt.Font.hashCode(),returns a hashcode for this font.
java.awt.Font.hasLayoutAttributes(),return true if this font contains attributes that require extra layout processing.
java.awt.Font.hasUniformLineMetrics(),checks whether or not this font has uniform line metrics.
java.awt.Font.isBold(),indicates whether or not this font object's style is bold.
java.awt.Font.isItalic(),indicates whether or not this font object's style is italic.
java.awt.Font.isPlain(),indicates whether or not this font object's style is plain.
java.awt.Font.isTransformed(),indicates whether or not this font object has a transform that affects its size in addition to the size attribute.
"java.awt.Font.layoutGlyphVector(java.awt.font.FontRenderContext,char[],int,int,int)","returns a new glyphvector object, performing full layout of the text if possible."
java.awt.Font.toString(),converts this font object to a string representation.
"java.awt.FontMetrics.bytesWidth(byte[],int,int)",returns the total advance width for showing the specified array of bytes in this font.
"java.awt.FontMetrics.charsWidth(char[],int,int)",returns the total advance width for showing the specified array of characters in this font.
java.awt.FontMetrics.charWidth(int),returns the advance width of the specified character in this font.
java.awt.FontMetrics.charWidth(char),returns the advance width of the specified character in this font.
java.awt.FontMetrics.getAscent(),determines the font ascent of the font described by this fontmetrics object.
java.awt.FontMetrics.getDescent(),determines the font descent of the font described by this fontmetrics object.
java.awt.FontMetrics.getFont(),gets the font described by this fontmetrics object.
java.awt.FontMetrics.getFontRenderContext(),gets the fontrendercontext used by this fontmetrics object to measure text.
java.awt.FontMetrics.getHeight(),gets the standard height of a line of text in this font.
java.awt.FontMetrics.getLeading(),determines the standard leading of the font described by this fontmetrics object.
"java.awt.FontMetrics.getLineMetrics(java.lang.String,java.awt.Graphics)",returns the linemetrics object for the specified string in the specified graphics context.
"java.awt.FontMetrics.getLineMetrics(java.lang.String,int,int,java.awt.Graphics)",returns the linemetrics object for the specified string in the specified graphics context.
"java.awt.FontMetrics.getLineMetrics(char[],int,int,java.awt.Graphics)",returns the linemetrics object for the specified character array in the specified graphics context.
"java.awt.FontMetrics.getLineMetrics(java.text.CharacterIterator,int,int,java.awt.Graphics)",returns the linemetrics object for the specified characteriterator in the specified graphics context.
java.awt.FontMetrics.getMaxAdvance(),gets the maximum advance width of any character in this font.
java.awt.FontMetrics.getMaxAscent(),determines the maximum ascent of the font described by this fontmetrics object.
java.awt.FontMetrics.getMaxCharBounds(java.awt.Graphics),returns the bounds for the character with the maximum bounds in the specified graphics context.
java.awt.FontMetrics.getMaxDescent(),determines the maximum descent of the font described by this fontmetrics object.
"java.awt.FontMetrics.getStringBounds(java.lang.String,java.awt.Graphics)",returns the bounds of the specified string in the specified graphics context.
"java.awt.FontMetrics.getStringBounds(java.lang.String,int,int,java.awt.Graphics)",returns the bounds of the specified string in the specified graphics context.
"java.awt.FontMetrics.getStringBounds(char[],int,int,java.awt.Graphics)",returns the bounds of the specified array of characters in the specified graphics context.
"java.awt.FontMetrics.getStringBounds(java.text.CharacterIterator,int,int,java.awt.Graphics)",returns the bounds of the characters indexed in the specified characteriterator in the specified graphics context.
java.awt.FontMetrics.getWidths(),gets the advance widths of the first 256 characters in the font.
java.awt.FontMetrics.hasUniformLineMetrics(),checks to see if the font has uniform line metrics.
java.awt.FontMetrics.stringWidth(java.lang.String),returns the total advance width for showing the specified string in this font.
java.awt.FontMetrics.toString(),returns a representation of this fontmetrics object's values as a string.
java.awt.Frame.addNotify(),makes this frame displayable by connecting it to a native screen resource.
java.awt.Frame.getAccessibleContext(),gets the accessiblecontext associated with this frame.
java.awt.Frame.getExtendedState(),gets the state of this frame.
java.awt.Frame.getFrames(),returns an array of all frames created by this application.
java.awt.Frame.getIconImage(),returns the image to be displayed as the icon for this frame.
java.awt.Frame.getMaximizedBounds(),gets maximized bounds for this frame.
java.awt.Frame.getMenuBar(),gets the menu bar for this frame.
java.awt.Frame.getState(),gets the state of this frame (obsolete).
java.awt.Frame.getTitle(),gets the title of the frame.
java.awt.Frame.isResizable(),indicates whether this frame is resizable by the user.
java.awt.Frame.isUndecorated(),indicates whether this frame is undecorated.
java.awt.Frame.paramString(),returns a string representing the state of this frame.
java.awt.Frame.remove(java.awt.MenuComponent),removes the specified menu bar from this frame.
java.awt.Frame.removeNotify(),makes this frame undisplayable by removing its connection to its native screen resource.
java.awt.Frame.setBackground(java.awt.Color),sets the background color of this window.
java.awt.Frame.setExtendedState(int),sets the state of this frame.
java.awt.Frame.setIconImage(java.awt.Image),sets the image to be displayed as the icon for this window.
java.awt.Frame.setMaximizedBounds(java.awt.Rectangle),sets the maximized bounds for this frame.
java.awt.Frame.setMenuBar(java.awt.MenuBar),sets the menu bar for this frame to the specified menu bar.
java.awt.Frame.setOpacity(float),sets the opacity of the window.
java.awt.Frame.setResizable(boolean),sets whether this frame is resizable by the user.
java.awt.Frame.setShape(java.awt.Shape),sets the shape of the window.
java.awt.Frame.setState(int),sets the state of this frame (obsolete).
java.awt.Frame.setTitle(java.lang.String),sets the title for this frame to the specified string.
java.awt.Frame.setUndecorated(boolean),disables or enables decorations for this frame.
"java.awt.GradientPaint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)",creates and returns a paintcontext used to generate a linear color gradient pattern.
java.awt.GradientPaint.getColor1(),returns the color c1 anchored by the point p1.
java.awt.GradientPaint.getColor2(),returns the color c2 anchored by the point p2.
java.awt.GradientPaint.getPoint1(),returns a copy of the point p1 that anchors the first color.
java.awt.GradientPaint.getPoint2(),returns a copy of the point p2 which anchors the second color.
java.awt.GradientPaint.getTransparency(),returns the transparency mode for this gradientpaint.
java.awt.GradientPaint.isCyclic(),returns true if the gradient cycles repeatedly between the two colors c1 and c2.
"java.awt.Graphics.clearRect(int,int,int,int)",clears the specified rectangle by filling it with the background color of the current drawing surface.
"java.awt.Graphics.clipRect(int,int,int,int)",intersects the current clip with the specified rectangle.
"java.awt.Graphics.copyArea(int,int,int,int,int,int)",copies an area of the component by a distance specified by dx and dy.
java.awt.Graphics.create(),creates a new graphics object that is a copy of this graphics object.
"java.awt.Graphics.create(int,int,int,int)","creates a new graphics object based on this graphics object, but with a new translation and clip area."
java.awt.Graphics.dispose(),disposes of this graphics context and releases any system resources that it is using.
"java.awt.Graphics.draw3DRect(int,int,int,int,boolean)",draws a 3-d highlighted outline of the specified rectangle.
"java.awt.Graphics.drawArc(int,int,int,int,int,int)",draws the outline of a circular or elliptical arc covering the specified rectangle.
"java.awt.Graphics.drawBytes(byte[],int,int,int,int)","draws the text given by the specified byte array, using this graphics context's current font and color."
"java.awt.Graphics.drawChars(char[],int,int,int,int)","draws the text given by the specified character array, using this graphics context's current font and color."
"java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",draws as much of the specified image as is currently available.
"java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",draws as much of the specified image as has already been scaled to fit inside the specified rectangle.
"java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",draws as much of the specified image as is currently available.
"java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",draws as much of the specified image as has already been scaled to fit inside the specified rectangle.
"java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)","draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface."
"java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface."
"java.awt.Graphics.drawLine(int,int,int,int)","draws a line, using the current color, between the points (x1, y1) and (x2, y2) in this graphics context's coordinate system."
"java.awt.Graphics.drawOval(int,int,int,int)",draws the outline of an oval.
"java.awt.Graphics.drawPolygon(int[],int[],int)",draws a closed polygon defined by arrays of x and y coordinates.
java.awt.Graphics.drawPolygon(java.awt.Polygon),draws the outline of a polygon defined by the specified polygon object.
"java.awt.Graphics.drawPolyline(int[],int[],int)",draws a sequence of connected lines defined by arrays of x and y coordinates.
"java.awt.Graphics.drawRect(int,int,int,int)",draws the outline of the specified rectangle.
"java.awt.Graphics.drawRoundRect(int,int,int,int,int,int)",draws an outlined round-cornered rectangle using this graphics context's current color.
"java.awt.Graphics.drawString(java.lang.String,int,int)","draws the text given by the specified string, using this graphics context's current font and color."
"java.awt.Graphics.drawString(java.text.AttributedCharacterIterator,int,int)",renders the text of the specified iterator applying its attributes in accordance with the specification of the textattribute class.
"java.awt.Graphics.fill3DRect(int,int,int,int,boolean)",paints a 3-d highlighted rectangle filled with the current color.
"java.awt.Graphics.fillArc(int,int,int,int,int,int)",fills a circular or elliptical arc covering the specified rectangle.
"java.awt.Graphics.fillOval(int,int,int,int)",fills an oval bounded by the specified rectangle with the current color.
"java.awt.Graphics.fillPolygon(int[],int[],int)",fills a closed polygon defined by arrays of x and y coordinates.
java.awt.Graphics.fillPolygon(java.awt.Polygon),fills the polygon defined by the specified polygon object with the graphics context's current color.
"java.awt.Graphics.fillRect(int,int,int,int)",fills the specified rectangle.
"java.awt.Graphics.fillRoundRect(int,int,int,int,int,int)",fills the specified rounded corner rectangle with the current color.
java.awt.Graphics.finalize(),disposes of this graphics context once it is no longer referenced.
java.awt.Graphics.getClip(),gets the current clipping area.
java.awt.Graphics.getClipBounds(),returns the bounding rectangle of the current clipping area.
java.awt.Graphics.getClipBounds(java.awt.Rectangle),returns the bounding rectangle of the current clipping area.
java.awt.Graphics.getColor(),gets this graphics context's current color.
java.awt.Graphics.getFont(),gets the current font.
java.awt.Graphics.getFontMetrics(),gets the font metrics of the current font.
java.awt.Graphics.getFontMetrics(java.awt.Font),gets the font metrics for the specified font.
"java.awt.Graphics.hitClip(int,int,int,int)",returns true if the specified rectangular area might intersect the current clipping area.
"java.awt.Graphics.setClip(int,int,int,int)",sets the current clip to the rectangle specified by the given coordinates.
java.awt.Graphics.setClip(java.awt.Shape),sets the current clipping area to an arbitrary clip shape.
java.awt.Graphics.setColor(java.awt.Color),sets this graphics context's current color to the specified color.
java.awt.Graphics.setFont(java.awt.Font),sets this graphics context's font to the specified font.
java.awt.Graphics.setPaintMode(),sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color.
java.awt.Graphics.setXORMode(java.awt.Color),sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color.
java.awt.Graphics.toString(),returns a string object representing this graphics object's value.
"java.awt.Graphics.translate(int,int)","translates the origin of the graphics context to the point (x, y) in the current coordinate system."
"java.awt.Graphics2D.addRenderingHints(,?>)",sets the values of an arbitrary number of preferences for the rendering algorithms.
java.awt.Graphics2D.clip(java.awt.Shape),intersects the current clip with the interior of the specified shape and sets the clip to the resulting intersection.
java.awt.Graphics2D.draw(java.awt.Shape),strokes the outline of a shape using the settings of the current graphics2d context.
"java.awt.Graphics2D.draw3DRect(int,int,int,int,boolean)",draws a 3-d highlighted outline of the specified rectangle.
"java.awt.Graphics2D.drawGlyphVector(java.awt.font.GlyphVector,float,float)",renders the text of the specified glyphvector using the graphics2d context's rendering attributes.
"java.awt.Graphics2D.drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","renders an image, applying a transform from image space into user space before drawing."
"java.awt.Graphics2D.drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)",renders a bufferedimage that is filtered with a bufferedimageop.
"java.awt.Graphics2D.drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)","renders a renderableimage, applying a transform from image space into user space before drawing."
"java.awt.Graphics2D.drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)","renders a renderedimage, applying a transform from image space into user space before drawing."
"java.awt.Graphics2D.drawString(java.lang.String,int,int)","renders the text of the specified string, using the current text attribute state in the graphics2d context."
"java.awt.Graphics2D.drawString(java.lang.String,float,float)","renders the text specified by the specified string, using the current text attribute state in the graphics2d context."
"java.awt.Graphics2D.drawString(java.text.AttributedCharacterIterator,int,int)",renders the text of the specified iterator applying its attributes in accordance with the specification of the textattribute class.
"java.awt.Graphics2D.drawString(java.text.AttributedCharacterIterator,float,float)",renders the text of the specified iterator applying its attributes in accordance with the specification of the textattribute class.
java.awt.Graphics2D.fill(java.awt.Shape),fills the interior of a shape using the settings of the graphics2d context.
"java.awt.Graphics2D.fill3DRect(int,int,int,int,boolean)",paints a 3-d highlighted rectangle filled with the current color.
java.awt.Graphics2D.getBackground(),returns the background color used for clearing a region.
java.awt.Graphics2D.getComposite(),returns the current composite in the graphics2d context.
java.awt.Graphics2D.getDeviceConfiguration(),returns the device configuration associated with this graphics2d.
java.awt.Graphics2D.getFontRenderContext(),get the rendering context of the font within this graphics2d context.
java.awt.Graphics2D.getPaint(),returns the current paint of the graphics2d context.
java.awt.Graphics2D.getRenderingHint(java.awt.RenderingHints.Key),returns the value of a single preference for the rendering algorithms.
java.awt.Graphics2D.getRenderingHints(),gets the preferences for the rendering algorithms.
java.awt.Graphics2D.getStroke(),returns the current stroke in the graphics2d context.
java.awt.Graphics2D.getTransform(),returns a copy of the current transform in the graphics2d context.
"java.awt.Graphics2D.hit(java.awt.Rectangle,java.awt.Shape,boolean)","checks whether or not the specified shape intersects the specified rectangle, which is in device space."
java.awt.Graphics2D.rotate(double),concatenates the current graphics2d transform with a rotation transform.
"java.awt.Graphics2D.rotate(double,double,double)",concatenates the current graphics2d transform with a translated rotation transform.
"java.awt.Graphics2D.scale(double,double)",concatenates the current graphics2d transform with a scaling transformation subsequent rendering is resized according to the specified scaling factors relative to the previous scaling.
java.awt.Graphics2D.setBackground(java.awt.Color),sets the background color for the graphics2d context.
java.awt.Graphics2D.setComposite(java.awt.Composite),sets the composite for the graphics2d context.
java.awt.Graphics2D.setPaint(java.awt.Paint),sets the paint attribute for the graphics2d context.
"java.awt.Graphics2D.setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)",sets the value of a single preference for the rendering algorithms.
"java.awt.Graphics2D.setRenderingHints(,?>)",replaces the values of all preferences for the rendering algorithms with the specified hints.
java.awt.Graphics2D.setStroke(java.awt.Stroke),sets the stroke for the graphics2d context.
java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform),overwrites the transform in the graphics2d context.
"java.awt.Graphics2D.shear(double,double)",concatenates the current graphics2d transform with a shearing transform.
java.awt.Graphics2D.transform(java.awt.geom.AffineTransform),composes an affinetransform object with the transform in this graphics2d according to the rule last-specified-first-applied.
"java.awt.Graphics2D.translate(int,int)","translates the origin of the graphics2d context to the point (x, y) in the current coordinate system."
"java.awt.Graphics2D.translate(double,double)",concatenates the current graphics2d transform with a translation transform.
java.awt.GraphicsConfigTemplate.getBestConfiguration(java.awt.GraphicsConfiguration[]),"returns the ""best"" configuration possible that passes the criteria defined in the graphicsconfigtemplate."
java.awt.GraphicsConfigTemplate.isGraphicsConfigSupported(java.awt.GraphicsConfiguration),returns a boolean indicating whether or not the specified graphicsconfiguration can be used to create a drawing surface that supports the indicated features.
"java.awt.GraphicsConfiguration.createCompatibleImage(int,int)",returns a bufferedimage with a data layout and color model compatible with this graphicsconfiguration.
"java.awt.GraphicsConfiguration.createCompatibleImage(int,int,int)",returns a bufferedimage that supports the specified transparency and has a data layout and color model compatible with this graphicsconfiguration.
"java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int,int)",returns a volatileimage with a data layout and color model compatible with this graphicsconfiguration.
"java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int,int,int)",returns a volatileimage with a data layout and color model compatible with this graphicsconfiguration.
"java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int,int,java.awt.ImageCapabilities)","returns a volatileimage with a data layout and color model compatible with this graphicsconfiguration, using the specified image capabilities."
"java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int,int,java.awt.ImageCapabilities,int)","returns a volatileimage with a data layout and color model compatible with this graphicsconfiguration, using the specified image capabilities and transparency value."
java.awt.GraphicsConfiguration.getBounds(),returns the bounds of the graphicsconfiguration in the device coordinates.
java.awt.GraphicsConfiguration.getBufferCapabilities(),returns the buffering capabilities of this graphicsconfiguration.
java.awt.GraphicsConfiguration.getColorModel(),returns the colormodel associated with this graphicsconfiguration.
java.awt.GraphicsConfiguration.getColorModel(int),returns the colormodel associated with this graphicsconfiguration that supports the specified transparency.
java.awt.GraphicsConfiguration.getDefaultTransform(),returns the default affinetransform for this graphicsconfiguration.
java.awt.GraphicsConfiguration.getDevice(),returns the graphicsdevice associated with this graphicsconfiguration.
java.awt.GraphicsConfiguration.getImageCapabilities(),returns the image capabilities of this graphicsconfiguration.
java.awt.GraphicsConfiguration.getNormalizingTransform(),returns a affinetransform that can be concatenated with the default affinetransform of a graphicsconfiguration so that 72 units in user space equals 1 inch in device space.
java.awt.GraphicsConfiguration.isTranslucencyCapable(),returns whether this graphicsconfiguration supports the perpixel_translucent kind of translucency.
java.awt.GraphicsDevice.getAvailableAcceleratedMemory(),this method returns the number of bytes available in accelerated memory on this device.
java.awt.GraphicsDevice.getBestConfiguration(java.awt.GraphicsConfigTemplate),"returns the ""best"" configuration possible that passes the criteria defined in the graphicsconfigtemplate."
java.awt.GraphicsDevice.getConfigurations(),returns all of the graphicsconfiguration objects associated with this graphicsdevice.
java.awt.GraphicsDevice.getDefaultConfiguration(),returns the default graphicsconfiguration associated with this graphicsdevice.
java.awt.GraphicsDevice.getDisplayMode(),returns the current display mode of this graphicsdevice.
java.awt.GraphicsDevice.getDisplayModes(),returns all display modes available for this graphicsdevice.
java.awt.GraphicsDevice.getFullScreenWindow(),returns the window object representing the full-screen window if the device is in full-screen mode.
java.awt.GraphicsDevice.getIDstring(),returns the identification string associated with this graphicsdevice.
java.awt.GraphicsDevice.getType(),returns the type of this graphicsdevice.
java.awt.GraphicsDevice.isDisplayChangeSupported(),returns true if this graphicsdevice supports low-level display changes.
java.awt.GraphicsDevice.isFullScreenSupported(),returns true if this graphicsdevice supports full-screen exclusive mode.
java.awt.GraphicsDevice.isWindowTranslucencySupported(java.awt.GraphicsDevice.WindowTranslucency),returns whether the given level of translucency is supported by this graphics device.
java.awt.GraphicsDevice.setDisplayMode(java.awt.DisplayMode),sets the display mode of this graphics device.
java.awt.GraphicsDevice.setFullScreenWindow(java.awt.Window),"enter full-screen mode, or return to windowed mode."
java.awt.GraphicsEnvironment.createGraphics(java.awt.image.BufferedImage),returns a graphics2d object for rendering into the specified bufferedimage.
java.awt.GraphicsEnvironment.getAllFonts(),returns an array containing a one-point size instance of all fonts available in this graphicsenvironment.
java.awt.GraphicsEnvironment.getAvailableFontFamilyNames(),"returns an array containing the names of all font families in this graphicsenvironment localized for the default locale, as returned by locale."
java.awt.GraphicsEnvironment.getAvailableFontFamilyNames(java.util.Locale),returns an array containing the names of all font families in this graphicsenvironment localized for the specified locale.
java.awt.GraphicsEnvironment.getCenterPoint(),returns the point where windows should be centered.
java.awt.GraphicsEnvironment.getDefaultScreenDevice(),returns the default screen graphicsdevice.
java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment(),returns the local graphicsenvironment.
java.awt.GraphicsEnvironment.getMaximumWindowBounds(),returns the maximum bounds for centered windows.
java.awt.GraphicsEnvironment.getScreenDevices(),returns an array of all of the screen graphicsdevice objects.
java.awt.GraphicsEnvironment.isHeadless(),"tests whether or not a display, keyboard, and mouse can be supported in this environment."
java.awt.GraphicsEnvironment.isHeadlessInstance(),"returns whether or not a display, keyboard, and mouse can be supported in this graphics environment."
java.awt.GraphicsEnvironment.preferLocaleFonts(),indicates a preference for locale-specific fonts in the mapping of logical fonts to physical fonts.
java.awt.GraphicsEnvironment.preferProportionalFonts(),indicates a preference for proportional over non-proportional (e.
java.awt.GraphicsEnvironment.registerFont(java.awt.Font),registers a created fontin this graphicsenvironment.
java.awt.GridBagConstraints.clone(),creates a copy of this grid bag constraint.
"java.awt.GridBagLayout.addLayoutComponent(java.lang.String,java.awt.Component)","has no effect, since this layout manager does not use a per-component string."
"java.awt.GridBagLayout.addLayoutComponent(java.awt.Component,java.lang.Object)","adds the specified component to the layout, using the specified constraints object."
"java.awt.GridBagLayout.adjustForGravity(java.awt.GridBagConstraints,java.awt.Rectangle)","adjusts the x, y, width, and height fields to the correct values depending on the constraint geometry and pads."
"java.awt.GridBagLayout.AdjustForGravity(java.awt.GridBagConstraints,java.awt.Rectangle)",this method is obsolete and supplied for backwards compatibility only; new code should call adjustforgravity instead.
java.awt.GridBagLayout.arrangeGrid(java.awt.Container),lays out the grid.
java.awt.GridBagLayout.ArrangeGrid(java.awt.Container),this method is obsolete and supplied for backwards compatibility only; new code should call arrangegrid instead.
java.awt.GridBagLayout.getConstraints(java.awt.Component),gets the constraints for the specified component.
java.awt.GridBagLayout.getLayoutAlignmentX(java.awt.Container),returns the alignment along the x axis.
java.awt.GridBagLayout.getLayoutAlignmentY(java.awt.Container),returns the alignment along the y axis.
java.awt.GridBagLayout.getLayoutDimensions(),determines column widths and row heights for the layout grid.
"java.awt.GridBagLayout.getLayoutInfo(java.awt.Container,int)",fills in an instance of gridbaglayoutinfo for the current set of managed children.
"java.awt.GridBagLayout.GetLayoutInfo(java.awt.Container,int)",this method is obsolete and supplied for backwards compatibility only; new code should call getlayoutinfo instead.
java.awt.GridBagLayout.getLayoutOrigin(),"determines the origin of the layout area, in the graphics coordinate space of the target container."
java.awt.GridBagLayout.getLayoutWeights(),determines the weights of the layout grid's columns and rows.
"java.awt.GridBagLayout.getMinSize(java.awt.Container,java.awt.GridBagLayoutInfo)",figures out the minimum size of the master based on the information from getlayoutinfo.
"java.awt.GridBagLayout.GetMinSize(java.awt.Container,java.awt.GridBagLayoutInfo)",this method is obsolete and supplied for backwards compatibility only; new code should call getminsize instead.
java.awt.GridBagLayout.invalidateLayout(java.awt.Container),"invalidates the layout, indicating that if the layout manager has cached information it should be discarded."
java.awt.GridBagLayout.layoutContainer(java.awt.Container),lays out the specified container using this grid bag layout.
"java.awt.GridBagLayout.location(int,int)","determines which cell in the layout grid contains the point specified by (x, y)."
java.awt.GridBagLayout.lookupConstraints(java.awt.Component),retrieves the constraints for the specified component.
java.awt.GridBagLayout.maximumLayoutSize(java.awt.Container),returns the maximum dimensions for this layout given the components in the specified target container.
java.awt.GridBagLayout.minimumLayoutSize(java.awt.Container),determines the minimum size of the parent container using this grid bag layout.
java.awt.GridBagLayout.preferredLayoutSize(java.awt.Container),determines the preferred size of the parent container using this grid bag layout.
java.awt.GridBagLayout.removeLayoutComponent(java.awt.Component),removes the specified component from this layout.
"java.awt.GridBagLayout.setConstraints(java.awt.Component,java.awt.GridBagConstraints)",sets the constraints for the specified component in this layout.
java.awt.GridBagLayout.toString(),returns a string representation of this grid bag layout's values.
"java.awt.GridLayout.addLayoutComponent(java.lang.String,java.awt.Component)",adds the specified component with the specified name to the layout.
java.awt.GridLayout.getColumns(),gets the number of columns in this layout.
java.awt.GridLayout.getHgap(),gets the horizontal gap between components.
java.awt.GridLayout.getRows(),gets the number of rows in this layout.
java.awt.GridLayout.getVgap(),gets the vertical gap between components.
java.awt.GridLayout.layoutContainer(java.awt.Container),lays out the specified container using this layout.
java.awt.GridLayout.minimumLayoutSize(java.awt.Container),determines the minimum size of the container argument using this grid layout.
java.awt.GridLayout.preferredLayoutSize(java.awt.Container),determines the preferred size of the container argument using this grid layout.
java.awt.GridLayout.removeLayoutComponent(java.awt.Component),removes the specified component from the layout.
java.awt.GridLayout.setColumns(int),sets the number of columns in this layout to the specified value.
java.awt.GridLayout.setHgap(int),sets the horizontal gap between components to the specified value.
java.awt.GridLayout.setRows(int),sets the number of rows in this layout to the specified value.
java.awt.GridLayout.setVgap(int),sets the vertical gap between components to the specified value.
java.awt.GridLayout.toString(),returns the string representation of this grid layout's values.
java.awt.Image.flush(),flushes all reconstructable resources being used by this image object.
java.awt.Image.getAccelerationPriority(),returns the current value of the acceleration priority hint.
java.awt.Image.getCapabilities(java.awt.GraphicsConfiguration),returns an imagecapabilities object which can be inquired as to the capabilities of this image on the specified graphicsconfiguration.
java.awt.Image.getGraphics(),creates a graphics context for drawing to an off-screen image.
java.awt.Image.getHeight(java.awt.image.ImageObserver),determines the height of the image.
"java.awt.Image.getProperty(java.lang.String,java.awt.image.ImageObserver)",gets a property of this image by name.
"java.awt.Image.getScaledInstance(int,int,int)",creates a scaled version of this image.
java.awt.Image.getSource(),gets the object that produces the pixels for the image.
java.awt.Image.getWidth(java.awt.image.ImageObserver),determines the width of the image.
java.awt.Image.setAccelerationPriority(float),sets a hint for this image about how important acceleration is.
java.awt.ImageCapabilities.isAccelerated(),returns true if the object whose capabilities are encapsulated in this imagecapabilities can be or is accelerated.
java.awt.ImageCapabilities.isTrueVolatile(),returns true if the volatileimage described by this imagecapabilities can lose its surfaces.
java.awt.Insets.clone(),create a copy of this object.
java.awt.Insets.equals(java.lang.Object),checks whether two insets objects are equal.
java.awt.Insets.hashCode(),returns the hash code for this insets.
"java.awt.Insets.set(int,int,int,int)","set top, left, bottom, and right to the specified values."
java.awt.Insets.toString(),returns a string representation of this insets object.
java.awt.JobAttributes.clone(),creates and returns a copy of this jobattributes.
java.awt.JobAttributes.equals(java.lang.Object),determines whether two jobattributes are equal to each other.
java.awt.JobAttributes.getCopies(),returns the number of copies the application should render for jobs using these attributes.
java.awt.JobAttributes.getDefaultSelection(),"specifies whether, for jobs using these attributes, the application should print all pages, the range specified by the return value of getpageranges, or the current selection."
java.awt.JobAttributes.getDestination(),specifies whether output will be to a printer or a file for jobs using these attributes.
java.awt.JobAttributes.getDialog(),"returns whether, for jobs using these attributes, the user should see a print dialog in which to modify the print settings, and which type of print dialog should be displayed."
java.awt.JobAttributes.getFileName(),specifies the file name for the output file for jobs using these attributes.
java.awt.JobAttributes.getFromPage(),"returns, for jobs using these attributes, the first page to be printed, if a range of pages is to be printed."
java.awt.JobAttributes.getMaxPage(),specifies the maximum value the user can specify as the last page to be printed for jobs using these attributes.
java.awt.JobAttributes.getMinPage(),specifies the minimum value the user can specify as the first page to be printed for jobs using these attributes.
java.awt.JobAttributes.getMultipleDocumentHandling(),"specifies the handling of multiple copies, including collation, for jobs using these attributes."
java.awt.JobAttributes.getPageRanges(),"specifies, for jobs using these attributes, the ranges of pages to be printed, if a range of pages is to be printed."
java.awt.JobAttributes.getPrinter(),returns the destination printer for jobs using these attributes.
java.awt.JobAttributes.getSides(),returns how consecutive pages should be imposed upon the sides of the print medium for jobs using these attributes.
java.awt.JobAttributes.getToPage(),"returns, for jobs using these attributes, the last page (inclusive) to be printed, if a range of pages is to be printed."
java.awt.JobAttributes.hashCode(),returns a hash code value for this jobattributes.
java.awt.JobAttributes.set(java.awt.JobAttributes),sets all of the attributes of this jobattributes to the same values as the attributes of obj.
java.awt.JobAttributes.setCopies(int),specifies the number of copies the application should render for jobs using these attributes.
java.awt.JobAttributes.setCopiesToDefault(),sets the number of copies the application should render for jobs using these attributes to the default.
java.awt.JobAttributes.setDefaultSelection(java.awt.JobAttributes.DefaultSelectionType),"specifies whether, for jobs using these attributes, the application should print all pages, the range specified by the return value of getpageranges, or the current selection."
java.awt.JobAttributes.setDestination(java.awt.JobAttributes.DestinationType),specifies whether output will be to a printer or a file for jobs using these attributes.
java.awt.JobAttributes.setDialog(java.awt.JobAttributes.DialogType),"specifies whether, for jobs using these attributes, the user should see a print dialog in which to modify the print settings, and which type of print dialog should be displayed."
java.awt.JobAttributes.setFileName(java.lang.String),specifies the file name for the output file for jobs using these attributes.
java.awt.JobAttributes.setFromPage(int),"specifies, for jobs using these attributes, the first page to be printed, if a range of pages is to be printed."
java.awt.JobAttributes.setMaxPage(int),specifies the maximum value the user can specify as the last page to be printed for jobs using these attributes.
java.awt.JobAttributes.setMinPage(int),specifies the minimum value the user can specify as the first page to be printed for jobs using these attributes.
java.awt.JobAttributes.setMultipleDocumentHandling(java.awt.JobAttributes.MultipleDocumentHandlingType),"specifies the handling of multiple copies, including collation, for jobs using these attributes."
java.awt.JobAttributes.setMultipleDocumentHandlingToDefault(),"sets the handling of multiple copies, including collation, for jobs using these attributes to the default."
java.awt.JobAttributes.setPageRanges(int[][]),"specifies, for jobs using these attributes, the ranges of pages to be printed, if a range of pages is to be printed."
java.awt.JobAttributes.setPrinter(java.lang.String),specifies the destination printer for jobs using these attributes.
java.awt.JobAttributes.setSides(java.awt.JobAttributes.SidesType),specifies how consecutive pages should be imposed upon the sides of the print medium for jobs using these attributes.
java.awt.JobAttributes.setSidesToDefault(),sets how consecutive pages should be imposed upon the sides of the print medium for jobs using these attributes to the default.
java.awt.JobAttributes.setToPage(int),"specifies, for jobs using these attributes, the last page (inclusive) to be printed, if a range of pages is to be printed."
java.awt.JobAttributes.toString(),returns a string representation of this jobattributes.
java.awt.KeyboardFocusManager.addKeyEventDispatcher(java.awt.KeyEventDispatcher),adds a keyeventdispatcher to this keyboardfocusmanager's dispatcher chain.
java.awt.KeyboardFocusManager.addKeyEventPostProcessor(java.awt.KeyEventPostProcessor),adds a keyeventpostprocessor to this keyboardfocusmanager's post- processor chain.
java.awt.KeyboardFocusManager.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
"java.awt.KeyboardFocusManager.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",adds a propertychangelistener to the listener list for a specific property.
java.awt.KeyboardFocusManager.addVetoableChangeListener(java.beans.VetoableChangeListener),adds a vetoablechangelistener to the listener list.
"java.awt.KeyboardFocusManager.addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)",adds a vetoablechangelistener to the listener list for a specific property.
java.awt.KeyboardFocusManager.clearFocusOwner(),"clears the focus owner at both the java and native levels if the focus owner exists and resides in the same context as the calling thread, otherwise the method returns silently."
java.awt.KeyboardFocusManager.clearGlobalFocusOwner(),clears the global focus owner at both the java and native levels.
"java.awt.KeyboardFocusManager.dequeueKeyEvents(long,java.awt.Component)",called by the awt to notify the keyboardfocusmanager that it should cancel delayed dispatching of keyevents.
java.awt.KeyboardFocusManager.discardKeyEvents(java.awt.Component),called by the awt to notify the keyboardfocusmanager that it should cancel delayed dispatching of keyevents.
java.awt.KeyboardFocusManager.dispatchEvent(java.awt.AWTEvent),this method is called by the awt event dispatcher requesting that the current keyboardfocusmanager dispatch the specified event on its behalf.
java.awt.KeyboardFocusManager.dispatchKeyEvent(java.awt.event.KeyEvent),"typically this method will be called by dispatchevent if no other keyeventdispatcher in the dispatcher chain dispatched the keyevent, or if no other keyeventdispatchers are registered."
java.awt.KeyboardFocusManager.downFocusCycle(java.awt.Container),moves the focus down one focus traversal cycle.
java.awt.KeyboardFocusManager.downFocusCycle(),"moves the focus down one focus traversal cycle from the current focus owner, if and only if the current focus owner is a container that is a focus cycle root."
"java.awt.KeyboardFocusManager.enqueueKeyEvents(long,java.awt.Component)",called by the awt to notify the keyboardfocusmanager that it should delay dispatching of keyevents until the specified component becomes the focus owner.
"java.awt.KeyboardFocusManager.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",fires a propertychangeevent in response to a change in a bound property.
"java.awt.KeyboardFocusManager.fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)",fires a propertychangeevent in response to a change in a vetoable property.
java.awt.KeyboardFocusManager.focusNextComponent(java.awt.Component),"focuses the component after acomponent, typically based on a focustraversalpolicy."
java.awt.KeyboardFocusManager.focusNextComponent(),focuses the component after the current focus owner.
java.awt.KeyboardFocusManager.focusPreviousComponent(java.awt.Component),"focuses the component before acomponent, typically based on a focustraversalpolicy."
java.awt.KeyboardFocusManager.focusPreviousComponent(),focuses the component before the current focus owner.
java.awt.KeyboardFocusManager.getActiveWindow(),"returns the active window, if the active window is in the same context as the calling thread."
java.awt.KeyboardFocusManager.getCurrentFocusCycleRoot(),"returns the current focus cycle root, if the current focus cycle root is in the same context as the calling thread."
java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager(),returns the current keyboardfocusmanager instance for the calling thread's context.
java.awt.KeyboardFocusManager.getDefaultFocusTraversalKeys(int),returns a set of default focus traversal keys for a given traversal operation.
java.awt.KeyboardFocusManager.getDefaultFocusTraversalPolicy(),returns the default focustraversalpolicy.
java.awt.KeyboardFocusManager.getFocusedWindow(),"returns the focused window, if the focused window is in the same context as the calling thread."
java.awt.KeyboardFocusManager.getFocusOwner(),"returns the focus owner, if the focus owner is in the same context as the calling thread."
java.awt.KeyboardFocusManager.getGlobalActiveWindow(),"returns the active window, even if the calling thread is in a different context than the active window."
java.awt.KeyboardFocusManager.getGlobalCurrentFocusCycleRoot(),"returns the current focus cycle root, even if the calling thread is in a different context than the current focus cycle root."
java.awt.KeyboardFocusManager.getGlobalFocusedWindow(),"returns the focused window, even if the calling thread is in a different context than the focused window."
java.awt.KeyboardFocusManager.getGlobalFocusOwner(),"returns the focus owner, even if the calling thread is in a different context than the focus owner."
java.awt.KeyboardFocusManager.getGlobalPermanentFocusOwner(),"returns the permanent focus owner, even if the calling thread is in a different context than the permanent focus owner."
java.awt.KeyboardFocusManager.getKeyEventDispatchers(),returns this keyboardfocusmanager's keyeventdispatcher chain as a list.
java.awt.KeyboardFocusManager.getKeyEventPostProcessors(),returns this keyboardfocusmanager's keyeventpostprocessor chain as a list.
java.awt.KeyboardFocusManager.getPermanentFocusOwner(),"returns the permanent focus owner, if the permanent focus owner is in the same context as the calling thread."
java.awt.KeyboardFocusManager.getPropertyChangeListeners(),returns an array of all the property change listeners registered on this keyboard focus manager.
java.awt.KeyboardFocusManager.getPropertyChangeListeners(java.lang.String),returns an array of all the propertychangelisteners associated with the named property.
java.awt.KeyboardFocusManager.getVetoableChangeListeners(),returns an array of all the vetoable change listeners registered on this keyboard focus manager.
java.awt.KeyboardFocusManager.getVetoableChangeListeners(java.lang.String),returns an array of all the vetoablechangelisteners associated with the named property.
java.awt.KeyboardFocusManager.postProcessKeyEvent(java.awt.event.KeyEvent),this method will be called by dispatchkeyevent.
"java.awt.KeyboardFocusManager.processKeyEvent(java.awt.Component,java.awt.event.KeyEvent)",this method initiates a focus traversal operation if and only if the keyevent represents a focus traversal key for the specified focusedcomponent.
"java.awt.KeyboardFocusManager.redispatchEvent(java.awt.Component,java.awt.AWTEvent)","redispatches an awtevent in such a way that the awt event dispatcher will not recursively request that the keyboardfocusmanager, or any installed keyeventdispatchers, dispatch the event again."
java.awt.KeyboardFocusManager.removeKeyEventDispatcher(java.awt.KeyEventDispatcher),removes a keyeventdispatcher which was previously added to this keyboardfocusmanager's dispatcher chain.
java.awt.KeyboardFocusManager.removeKeyEventPostProcessor(java.awt.KeyEventPostProcessor),removes a previously added keyeventpostprocessor from this keyboardfocusmanager's post-processor chain.
java.awt.KeyboardFocusManager.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychangelistener from the listener list.
"java.awt.KeyboardFocusManager.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",removes a propertychangelistener from the listener list for a specific property.
java.awt.KeyboardFocusManager.removeVetoableChangeListener(java.beans.VetoableChangeListener),removes a vetoablechangelistener from the listener list.
"java.awt.KeyboardFocusManager.removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)",removes a vetoablechangelistener from the listener list for a specific property.
java.awt.KeyboardFocusManager.setCurrentKeyboardFocusManager(java.awt.KeyboardFocusManager),sets the current keyboardfocusmanager instance for the calling thread's context.
"java.awt.KeyboardFocusManager.setDefaultFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)",sets the default focus traversal keys for a given traversal operation.
java.awt.KeyboardFocusManager.setDefaultFocusTraversalPolicy(java.awt.FocusTraversalPolicy),sets the default focustraversalpolicy.
java.awt.KeyboardFocusManager.setGlobalActiveWindow(java.awt.Window),sets the active window.
java.awt.KeyboardFocusManager.setGlobalCurrentFocusCycleRoot(java.awt.Container),sets the current focus cycle root.
java.awt.KeyboardFocusManager.setGlobalFocusedWindow(java.awt.Window),sets the focused window.
java.awt.KeyboardFocusManager.setGlobalFocusOwner(java.awt.Component),sets the focus owner.
java.awt.KeyboardFocusManager.setGlobalPermanentFocusOwner(java.awt.Component),sets the permanent focus owner.
java.awt.KeyboardFocusManager.upFocusCycle(java.awt.Component),moves the focus up one focus traversal cycle.
java.awt.KeyboardFocusManager.upFocusCycle(),moves the focus up one focus traversal cycle from the current focus owner.
java.awt.Label.addNotify(),creates the peer for this label.
java.awt.Label.getAccessibleContext(),gets the accessiblecontext associated with this label.
java.awt.Label.getAlignment(),gets the current alignment of this label.
java.awt.Label.getText(),gets the text of this label.
java.awt.Label.paramString(),returns a string representing the state of this label.
java.awt.Label.setAlignment(int),sets the alignment for this label to the specified alignment.
java.awt.Label.setText(java.lang.String),sets the text for this label to the specified text.
"java.awt.LinearGradientPaint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)",creates and returns a paintcontext used to generate a linear color gradient pattern.
java.awt.LinearGradientPaint.getEndPoint(),returns a copy of the end point of the gradient axis.
java.awt.LinearGradientPaint.getStartPoint(),returns a copy of the start point of the gradient axis.
java.awt.List.add(java.lang.String),adds the specified item to the end of scrolling list.
"java.awt.List.add(java.lang.String,int)",adds the specified item to the the scrolling list at the position indicated by the index.
java.awt.List.addActionListener(java.awt.event.ActionListener),adds the specified action listener to receive action events from this list.
java.awt.List.addItemListener(java.awt.event.ItemListener),adds the specified item listener to receive item events from this list.
java.awt.List.addNotify(),creates the peer for the list.
java.awt.List.deselect(int),deselects the item at the specified index.
java.awt.List.getAccessibleContext(),gets the accessiblecontext associated with this list.
java.awt.List.getActionListeners(),returns an array of all the action listeners registered on this list.
java.awt.List.getItem(int),gets the item associated with the specified index.
java.awt.List.getItemCount(),gets the number of items in the list.
java.awt.List.getItemListeners(),returns an array of all the item listeners registered on this list.
java.awt.List.getItems(),gets the items in the list.
java.awt.List.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this list.
java.awt.List.getMinimumSize(int),gets the minimum dimensions for a list with the specified number of rows.
java.awt.List.getMinimumSize(),determines the minimum size of this scrolling list.
java.awt.List.getPreferredSize(int),gets the preferred dimensions for a list with the specified number of rows.
java.awt.List.getPreferredSize(),gets the preferred size of this scrolling list.
java.awt.List.getRows(),gets the number of visible lines in this list.
java.awt.List.getSelectedIndex(),"gets the index of the selected item on the list,."
java.awt.List.getSelectedIndexes(),gets the selected indexes on the list.
java.awt.List.getSelectedItem(),gets the selected item on this scrolling list.
java.awt.List.getSelectedItems(),gets the selected items on this scrolling list.
java.awt.List.getSelectedObjects(),gets the selected items on this scrolling list in an array of objects.
java.awt.List.getVisibleIndex(),gets the index of the item that was last made visible by the method makevisible.
java.awt.List.isIndexSelected(int),determines if the specified item in this scrolling list is selected.
java.awt.List.isMultipleMode(),determines whether this list allows multiple selections.
java.awt.List.makeVisible(int),makes the item at the specified index visible.
java.awt.List.paramString(),returns the parameter string representing the state of this scrolling list.
java.awt.List.processActionEvent(java.awt.event.ActionEvent),processes action events occurring on this component by dispatching them to any registered actionlistener objects.
java.awt.List.processEvent(java.awt.AWTEvent),processes events on this scrolling list.
java.awt.List.processItemEvent(java.awt.event.ItemEvent),processes item events occurring on this list by dispatching them to any registered itemlistener objects.
java.awt.List.remove(java.lang.String),removes the first occurrence of an item from the list.
java.awt.List.remove(int),removes the item at the specified position from this scrolling list.
java.awt.List.removeActionListener(java.awt.event.ActionListener),removes the specified action listener so that it no longer receives action events from this list.
java.awt.List.removeAll(),removes all items from this list.
java.awt.List.removeItemListener(java.awt.event.ItemListener),removes the specified item listener so that it no longer receives item events from this list.
java.awt.List.removeNotify(),removes the peer for this list.
"java.awt.List.replaceItem(java.lang.String,int)",replaces the item at the specified index in the scrolling list with the new string.
java.awt.List.select(int),selects the item at the specified index in the scrolling list.
java.awt.List.setMultipleMode(boolean),sets the flag that determines whether this list allows multiple selections.
"java.awt.MediaTracker.addImage(java.awt.Image,int)",adds an image to the list of images being tracked by this media tracker.
"java.awt.MediaTracker.addImage(java.awt.Image,int,int,int)",adds a scaled image to the list of images being tracked by this media tracker.
java.awt.MediaTracker.checkAll(),checks to see if all images being tracked by this media tracker have finished loading.
java.awt.MediaTracker.checkAll(boolean),checks to see if all images being tracked by this media tracker have finished loading.
java.awt.MediaTracker.checkID(int),checks to see if all images tracked by this media tracker that are tagged with the specified identifier have finished loading.
"java.awt.MediaTracker.checkID(int,boolean)",checks to see if all images tracked by this media tracker that are tagged with the specified identifier have finished loading.
java.awt.MediaTracker.getErrorsAny(),returns a list of all media that have encountered an error.
java.awt.MediaTracker.getErrorsID(int),returns a list of media with the specified id that have encountered an error.
java.awt.MediaTracker.isErrorAny(),checks the error status of all of the images.
java.awt.MediaTracker.isErrorID(int),checks the error status of all of the images tracked by this media tracker with the specified identifier.
java.awt.MediaTracker.removeImage(java.awt.Image),removes the specified image from this media tracker.
"java.awt.MediaTracker.removeImage(java.awt.Image,int)",removes the specified image from the specified tracking id of this media tracker.
"java.awt.MediaTracker.removeImage(java.awt.Image,int,int,int)","removes the specified image with the specified width, height, and id from this media tracker."
java.awt.MediaTracker.statusAll(boolean),calculates and returns the bitwise inclusive or of the status of all media that are tracked by this media tracker.
"java.awt.MediaTracker.statusID(int,boolean)",calculates and returns the bitwise inclusive or of the status of all media with the specified identifier that are tracked by this media tracker.
java.awt.MediaTracker.waitForAll(),starts loading all images tracked by this media tracker.
java.awt.MediaTracker.waitForAll(long),starts loading all images tracked by this media tracker.
java.awt.MediaTracker.waitForID(int),starts loading all images tracked by this media tracker with the specified identifier.
"java.awt.MediaTracker.waitForID(int,long)",starts loading all images tracked by this media tracker with the specified identifier.
java.awt.Menu.add(java.awt.MenuItem),adds the specified menu item to this menu.
java.awt.Menu.add(java.lang.String),adds an item with the specified label to this menu.
java.awt.Menu.addNotify(),creates the menu's peer.
java.awt.Menu.addSeparator(),"adds a separator line, or a hypen, to the menu at the current position."
java.awt.Menu.getAccessibleContext(),gets the accessiblecontext associated with this menu.
java.awt.Menu.getItem(int),gets the item located at the specified index of this menu.
java.awt.Menu.getItemCount(),get the number of items in this menu.
"java.awt.Menu.insert(java.awt.MenuItem,int)",inserts a menu item into this menu at the specified position.
"java.awt.Menu.insert(java.lang.String,int)",inserts a menu item with the specified label into this menu at the specified position.
java.awt.Menu.insertSeparator(int),inserts a separator at the specified position.
java.awt.Menu.isTearOff(),indicates whether this menu is a tear-off menu.
java.awt.Menu.paramString(),returns a string representing the state of this menu.
java.awt.Menu.remove(int),removes the menu item at the specified index from this menu.
java.awt.Menu.remove(java.awt.MenuComponent),removes the specified menu item from this menu.
java.awt.Menu.removeAll(),removes all items from this menu.
java.awt.Menu.removeNotify(),removes the menu's peer.
java.awt.MenuBar.add(java.awt.Menu),adds the specified menu to the menu bar.
java.awt.MenuBar.addNotify(),creates the menu bar's peer.
java.awt.MenuBar.deleteShortcut(java.awt.MenuShortcut),deletes the specified menu shortcut.
java.awt.MenuBar.getAccessibleContext(),gets the accessiblecontext associated with this menubar.
java.awt.MenuBar.getHelpMenu(),gets the help menu on the menu bar.
java.awt.MenuBar.getMenu(int),gets the specified menu.
java.awt.MenuBar.getMenuCount(),gets the number of menus on the menu bar.
java.awt.MenuBar.getShortcutMenuItem(java.awt.MenuShortcut),"gets the instance of menuitem associated with the specified menushortcut object, or null if none of the menu items being managed by this menu bar is associated with the specified menu shortcut."
java.awt.MenuBar.remove(int),removes the menu located at the specified index from this menu bar.
java.awt.MenuBar.remove(java.awt.MenuComponent),removes the specified menu component from this menu bar.
java.awt.MenuBar.removeNotify(),removes the menu bar's peer.
java.awt.MenuBar.setHelpMenu(java.awt.Menu),sets the specified menu to be this menu bar's help menu.
java.awt.MenuBar.shortcuts(),gets an enumeration of all menu shortcuts this menu bar is managing.
java.awt.MenuComponent.dispatchEvent(java.awt.AWTEvent),delivers an event to this component or one of its sub components.
java.awt.MenuComponent.getAccessibleContext(),gets the accessiblecontext associated with this menucomponent.
java.awt.MenuComponent.getFont(),gets the font used for this menu component.
java.awt.MenuComponent.getName(),gets the name of the menu component.
java.awt.MenuComponent.getParent(),returns the parent container for this menu component.
java.awt.MenuComponent.getTreeLock(),gets this component's locking object (the object that owns the thread synchronization monitor) for awt component-tree and layout operations.
java.awt.MenuComponent.paramString(),returns a string representing the state of this menucomponent.
java.awt.MenuComponent.processEvent(java.awt.AWTEvent),processes events occurring on this menu component.
java.awt.MenuComponent.removeNotify(),removes the menu component's peer.
java.awt.MenuComponent.setFont(java.awt.Font),sets the font to be used for this menu component to the specified font.
java.awt.MenuComponent.setName(java.lang.String),sets the name of the component to the specified string.
java.awt.MenuComponent.toString(),returns a representation of this menu component as a string.
java.awt.MenuItem.addActionListener(java.awt.event.ActionListener),adds the specified action listener to receive action events from this menu item.
java.awt.MenuItem.addNotify(),creates the menu item's peer.
java.awt.MenuItem.deleteShortcut(),delete any menushortcut object associated with this menu item.
java.awt.MenuItem.disableEvents(long),disables event delivery to this menu item for events defined by the specified event mask parameter.
java.awt.MenuItem.enableEvents(long),"enables event delivery to this menu item for events to be defined by the specified event mask parameter
since event types are automatically enabled when a listener for that type is added to the menu item, this method only needs to be invoked by subclasses of menuitem which desire to have the specified event types delivered to processevent regardless of whether a listener is registered."
java.awt.MenuItem.getAccessibleContext(),gets the accessiblecontext associated with this menuitem.
java.awt.MenuItem.getActionCommand(),gets the command name of the action event that is fired by this menu item.
java.awt.MenuItem.getActionListeners(),returns an array of all the action listeners registered on this menu item.
java.awt.MenuItem.getLabel(),gets the label for this menu item.
java.awt.MenuItem.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this menuitem.
java.awt.MenuItem.getShortcut(),"get the menushortcut object associated with this menu item,."
java.awt.MenuItem.isEnabled(),checks whether this menu item is enabled.
java.awt.MenuItem.paramString(),returns a string representing the state of this menuitem.
java.awt.MenuItem.processActionEvent(java.awt.event.ActionEvent),"processes action events occurring on this menu item, by dispatching them to any registered actionlistener objects."
java.awt.MenuItem.processEvent(java.awt.AWTEvent),processes events on this menu item.
java.awt.MenuItem.removeActionListener(java.awt.event.ActionListener),removes the specified action listener so it no longer receives action events from this menu item.
java.awt.MenuItem.setActionCommand(java.lang.String),sets the command name of the action event that is fired by this menu item.
java.awt.MenuItem.setEnabled(boolean),sets whether or not this menu item can be chosen.
java.awt.MenuItem.setLabel(java.lang.String),sets the label for this menu item to the specified label.
java.awt.MenuItem.setShortcut(java.awt.MenuShortcut),set the menushortcut object associated with this menu item.
java.awt.MenuShortcut.equals(java.awt.MenuShortcut),returns whether this menushortcut is the same as another: equality is defined to mean that both menushortcuts use the same key and both either use or don't use the shift key.
java.awt.MenuShortcut.equals(java.lang.Object),returns whether this menushortcut is the same as another: equality is defined to mean that both menushortcuts use the same key and both either use or don't use the shift key.
java.awt.MenuShortcut.getKey(),returns the raw keycode of this menushortcut.
java.awt.MenuShortcut.hashCode(),returns the hashcode for this menushortcut.
java.awt.MenuShortcut.paramString(),returns the parameter string representing the state of this menushortcut.
java.awt.MenuShortcut.toString(),returns an internationalized description of the menushortcut.
java.awt.MenuShortcut.usesShiftModifier(),returns whether this menushortcut must be invoked using the shift key.
java.awt.MouseInfo.getNumberOfButtons(),returns the number of buttons on the mouse.
java.awt.MouseInfo.getPointerInfo(),returns a pointerinfo instance that represents the current location of the mouse pointer.
java.awt.MultipleGradientPaint.getColors(),returns a copy of the array of colors used by this gradient.
java.awt.MultipleGradientPaint.getColorSpace(),returns the enumerated type which specifies color space for interpolation.
java.awt.MultipleGradientPaint.getCycleMethod(),returns the enumerated type which specifies cycling behavior.
java.awt.MultipleGradientPaint.getFractions(),returns a copy of the array of floats used by this gradient to calculate color distribution.
java.awt.MultipleGradientPaint.getTransform(),returns a copy of the transform applied to the gradient.
java.awt.MultipleGradientPaint.getTransparency(),returns the transparency mode for this paint object.
java.awt.PageAttributes.clone(),creates and returns a copy of this pageattributes.
java.awt.PageAttributes.equals(java.lang.Object),determines whether two pageattributes are equal to each other.
java.awt.PageAttributes.getColor(),returns whether pages using these attributes will be rendered in color or monochrome.
java.awt.PageAttributes.getMedia(),returns the paper size for pages using these attributes.
java.awt.PageAttributes.getOrientationRequested(),returns the print orientation for pages using these attributes.
java.awt.PageAttributes.getOrigin(),"returns whether drawing at (0, 0) to pages using these attributes draws at the upper-left corner of the physical page, or at the upper-left corner of the printable area."
java.awt.PageAttributes.getPrinterResolution(),returns the print resolution for pages using these attributes.
java.awt.PageAttributes.getPrintQuality(),returns the print quality for pages using these attributes.
java.awt.PageAttributes.hashCode(),returns a hash code value for this pageattributes.
java.awt.PageAttributes.set(java.awt.PageAttributes),sets all of the attributes of this pageattributes to the same values as the attributes of obj.
java.awt.PageAttributes.setColor(java.awt.PageAttributes.ColorType),specifies whether pages using these attributes will be rendered in color or monochrome.
java.awt.PageAttributes.setMedia(java.awt.PageAttributes.MediaType),specifies the desired paper size for pages using these attributes.
java.awt.PageAttributes.setMediaToDefault(),sets the paper size for pages using these attributes to the default size for the default locale.
java.awt.PageAttributes.setOrientationRequested(java.awt.PageAttributes.OrientationRequestedType),specifies the print orientation for pages using these attributes.
java.awt.PageAttributes.setOrientationRequested(int),specifies the print orientation for pages using these attributes.
java.awt.PageAttributes.setOrientationRequestedToDefault(),sets the print orientation for pages using these attributes to the default.
java.awt.PageAttributes.setOrigin(java.awt.PageAttributes.OriginType),"specifies whether drawing at (0, 0) to pages using these attributes draws at the upper-left corner of the physical page, or at the upper-left corner of the printable area."
java.awt.PageAttributes.setPrinterResolution(int[]),specifies the desired print resolution for pages using these attributes.
java.awt.PageAttributes.setPrinterResolution(int),specifies the desired cross feed and feed print resolutions in dots per inch for pages using these attributes.
java.awt.PageAttributes.setPrinterResolutionToDefault(),sets the printer resolution for pages using these attributes to the default.
java.awt.PageAttributes.setPrintQuality(java.awt.PageAttributes.PrintQualityType),specifies the print quality for pages using these attributes.
java.awt.PageAttributes.setPrintQuality(int),specifies the print quality for pages using these attributes.
java.awt.PageAttributes.setPrintQualityToDefault(),sets the print quality for pages using these attributes to the default.
java.awt.PageAttributes.toString(),returns a string representation of this pageattributes.
java.awt.Panel.addNotify(),creates the panel's peer.
java.awt.Panel.getAccessibleContext(),gets the accessiblecontext associated with this panel.
java.awt.Point.equals(java.lang.Object),determines whether or not two points are equal.
java.awt.Point.getLocation(),returns the location of this point.
java.awt.Point.getX(),returns the x coordinate of this point2d in double precision.
java.awt.Point.getY(),returns the y coordinate of this point2d in double precision.
"java.awt.Point.move(int,int)","moves this point to the specified location in the (x,y) coordinate plane."
java.awt.Point.setLocation(java.awt.Point),sets the location of the point to the specified location.
"java.awt.Point.setLocation(int,int)",changes the point to have the specified location.
"java.awt.Point.setLocation(double,double)",sets the location of this point to the specified double coordinates.
java.awt.Point.toString(),"returns a string representation of this point and its location in the (x,y) coordinate space."
"java.awt.Point.translate(int,int)","translates this point, at location (x,y), by dx along the x axis and dy along the y axis so that it now represents the point (x+dx,y+dy)."
java.awt.PointerInfo.getDevice(),returns the graphicsdevice where the mouse pointer was at the moment this pointerinfo was created.
java.awt.PointerInfo.getLocation(),returns the point that represents the coordinates of the pointer on the screen.
"java.awt.Polygon.addPoint(int,int)",appends the specified coordinates to this polygon.
java.awt.Polygon.contains(java.awt.Point),determines whether the specified point is inside this polygon.
"java.awt.Polygon.contains(int,int)",determines whether the specified coordinates are inside this polygon.
"java.awt.Polygon.contains(double,double)","tests if the specified coordinates are inside the boundary of the shape, as described by the
definition of insideness."
java.awt.Polygon.contains(java.awt.geom.Point2D),"tests if a specified point2d is inside the boundary of the shape, as described by the
definition of insideness."
"java.awt.Polygon.contains(double,double,double,double)",tests if the interior of the shape entirely contains the specified rectangular area.
java.awt.Polygon.contains(java.awt.geom.Rectangle2D),tests if the interior of the shape entirely contains the specified rectangle2d.
java.awt.Polygon.getBounds(),gets the bounding box of this polygon.
java.awt.Polygon.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.Polygon.getPathIterator(java.awt.geom.AffineTransform),returns an iterator object that iterates along the boundary of this polygon and provides access to the geometry of the outline of this polygon.
"java.awt.Polygon.getPathIterator(java.awt.geom.AffineTransform,double)",returns an iterator object that iterates along the boundary of the shape and provides access to the geometry of the outline of the shape.
"java.awt.Polygon.intersects(double,double,double,double)",tests if the interior of the shape intersects the interior of a specified rectangular area.
java.awt.Polygon.intersects(java.awt.geom.Rectangle2D),tests if the interior of the shape intersects the interior of a specified rectangle2d.
java.awt.Polygon.invalidate(),invalidates or flushes any internally-cached data that depends on the vertex coordinates of this polygon.
java.awt.Polygon.reset(),resets this polygon object to an empty polygon.
"java.awt.Polygon.translate(int,int)",translates the vertices of the polygon by deltax along the x axis and by deltay along the y axis.
java.awt.PopupMenu.addNotify(),creates the popup menu's peer.
java.awt.PopupMenu.getAccessibleContext(),gets the accessiblecontext associated with this popupmenu.
java.awt.PopupMenu.getParent(),returns the parent container for this menu component.
"java.awt.PopupMenu.show(java.awt.Component,int,int)","shows the popup menu at the x, y position relative to an origin component."
java.awt.PrintJob.end(),ends the print job and does any necessary cleanup.
java.awt.PrintJob.finalize(),ends this print job once it is no longer referenced.
java.awt.PrintJob.getGraphics(),gets a graphics object that will draw to the next page.
java.awt.PrintJob.getPageDimension(),returns the dimensions of the page in pixels.
java.awt.PrintJob.getPageResolution(),returns the resolution of the page in pixels per inch.
java.awt.PrintJob.lastPageFirst(),returns true if the last page will be printed first.
"java.awt.RadialGradientPaint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)",creates and returns a paintcontext used to generate a circular radial color gradient pattern.
java.awt.RadialGradientPaint.getCenterPoint(),returns a copy of the center point of the radial gradient.
java.awt.RadialGradientPaint.getFocusPoint(),returns a copy of the focus point of the radial gradient.
java.awt.RadialGradientPaint.getRadius(),returns the radius of the circle defining the radial gradient.
"java.awt.Rectangle.add(int,int)","adds a point, specified by the integer arguments newx,newy to the bounds of this rectangle."
java.awt.Rectangle.add(java.awt.Point),adds the specified point to the bounds of this rectangle.
java.awt.Rectangle.add(java.awt.Rectangle),adds a rectangle to this rectangle.
java.awt.Rectangle.contains(java.awt.Point),checks whether or not this rectangle contains the specified point.
"java.awt.Rectangle.contains(int,int)","checks whether or not this rectangle contains the point at the specified location (x,y)."
java.awt.Rectangle.contains(java.awt.Rectangle),checks whether or not this rectangle entirely contains the specified rectangle.
"java.awt.Rectangle.contains(int,int,int,int)","checks whether this rectangle entirely contains the rectangle at the specified location (x,y) with the specified dimensions (w,h)."
java.awt.Rectangle.createIntersection(java.awt.geom.Rectangle2D),returns a new rectangle2d object representing the intersection of this rectangle2d with the specified rectangle2d.
java.awt.Rectangle.createUnion(java.awt.geom.Rectangle2D),returns a new rectangle2d object representing the union of this rectangle2d with the specified rectangle2d.
java.awt.Rectangle.equals(java.lang.Object),checks whether two rectangles are equal.
java.awt.Rectangle.getBounds(),gets the bounding rectangle of this rectangle.
java.awt.Rectangle.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.Rectangle.getHeight(),returns the height of the bounding rectangle in double precision.
java.awt.Rectangle.getLocation(),returns the location of this rectangle.
java.awt.Rectangle.getSize(),"gets the size of this rectangle, represented by the returned dimension."
java.awt.Rectangle.getWidth(),returns the width of the bounding rectangle in double precision.
java.awt.Rectangle.getX(),returns the x coordinate of the bounding rectangle in double precision.
java.awt.Rectangle.getY(),returns the y coordinate of the bounding rectangle in double precision.
"java.awt.Rectangle.grow(int,int)",resizes the rectangle both horizontally and vertically.
java.awt.Rectangle.intersection(java.awt.Rectangle),computes the intersection of this rectangle with the specified rectangle.
java.awt.Rectangle.intersects(java.awt.Rectangle),determines whether or not this rectangle and the specified rectangle intersect.
java.awt.Rectangle.isEmpty(),determines whether the rectangularshape is empty.
"java.awt.Rectangle.outcode(double,double)",determines where the specified coordinates lie with respect to this rectangle2d.
java.awt.Rectangle.setBounds(java.awt.Rectangle),sets the bounding rectangle of this rectangle to match the specified rectangle.
"java.awt.Rectangle.setBounds(int,int,int,int)","sets the bounding rectangle of this rectangle to the specified x, y, width, and height."
java.awt.Rectangle.setLocation(java.awt.Point),moves this rectangle to the specified location.
"java.awt.Rectangle.setLocation(int,int)",moves this rectangle to the specified location.
"java.awt.Rectangle.setRect(double,double,double,double)","sets the bounds of this rectangle to the integer bounds which encompass the specified x, y, width, and height."
java.awt.Rectangle.setSize(java.awt.Dimension),sets the size of this rectangle to match the specified dimension.
"java.awt.Rectangle.setSize(int,int)",sets the size of this rectangle to the specified width and height.
java.awt.Rectangle.toString(),returns a string representing this rectangle and its values.
"java.awt.Rectangle.translate(int,int)","translates this rectangle the indicated distance, to the right along the x coordinate axis, and downward along the y coordinate axis."
java.awt.Rectangle.union(java.awt.Rectangle),computes the union of this rectangle with the specified rectangle.
java.awt.RenderingHints.add(java.awt.RenderingHints),adds all of the keys and corresponding values from the specified renderinghints object to this renderinghints object.
java.awt.RenderingHints.clear(),clears this renderinghints object of all key/value pairs.
java.awt.RenderingHints.clone(),creates a clone of this renderinghints object that has the same contents as this renderinghints object.
java.awt.RenderingHints.containsKey(java.lang.Object),returns true if this renderinghints contains a mapping for the specified key.
java.awt.RenderingHints.containsValue(java.lang.Object),returns true if this renderinghints maps one or more keys to the specified value.
java.awt.RenderingHints.entrySet(),returns a set view of the mappings contained in this renderinghints.
java.awt.RenderingHints.equals(java.lang.Object),compares the specified object with this renderinghints for equality.
java.awt.RenderingHints.get(java.lang.Object),returns the value to which the specified key is mapped.
java.awt.RenderingHints.hashCode(),returns the hash code value for this renderinghints.
java.awt.RenderingHints.isEmpty(),returns true if this renderinghints contains no key-value mappings.
java.awt.RenderingHints.keySet(),returns a set view of the keys contained in this renderinghints.
"java.awt.RenderingHints.put(java.lang.Object,java.lang.Object)",maps the specified key to the specified value in this renderinghints object.
"java.awt.RenderingHints.putAll(,?>)",copies all of the mappings from the specified map to this renderinghints.
java.awt.RenderingHints.remove(java.lang.Object),removes the key and its corresponding value from this renderinghints object.
java.awt.RenderingHints.size(),returns the number of key-value mappings in this renderinghints.
java.awt.RenderingHints.toString(),returns a rather long string representation of the hashmap which contains the mappings of keys to values for this renderinghints object.
java.awt.RenderingHints.values(),returns a collection view of the values contained in this renderinhints.
java.awt.RenderingHints.Key.equals(java.lang.Object),the equals method for all key objects will return the same result as the equality operator '=='.
java.awt.RenderingHints.Key.hashCode(),the hash code for all key objects will be the same as the system identity code of the object as defined by the system.
java.awt.RenderingHints.Key.intKey(),returns the private integer key that the subclass instantiated this key with.
java.awt.RenderingHints.Key.isCompatibleValue(java.lang.Object),returns true if the specified object is a valid value for this key.
java.awt.Robot.createScreenCapture(java.awt.Rectangle),creates an image containing pixels read from the screen.
java.awt.Robot.delay(int),sleeps for the specified time.
java.awt.Robot.getAutoDelay(),returns the number of milliseconds this robot sleeps after generating an event.
"java.awt.Robot.getPixelColor(int,int)",returns the color of a pixel at the given screen coordinates.
java.awt.Robot.isAutoWaitForIdle(),returns whether this robot automatically invokes waitforidle after generating an event.
java.awt.Robot.keyPress(int),presses a given key.
java.awt.Robot.keyRelease(int),releases a given key.
"java.awt.Robot.mouseMove(int,int)",moves mouse pointer to given screen coordinates.
java.awt.Robot.mousePress(int),presses one or more mouse buttons.
java.awt.Robot.mouseRelease(int),releases one or more mouse buttons.
java.awt.Robot.mouseWheel(int),rotates the scroll wheel on wheel-equipped mice.
java.awt.Robot.setAutoDelay(int),sets the number of milliseconds this robot sleeps after generating an event.
java.awt.Robot.setAutoWaitForIdle(boolean),sets whether this robot automatically invokes waitforidle after generating an event.
java.awt.Robot.toString(),returns a string representation of this robot.
java.awt.Robot.waitForIdle(),waits until all events currently on the event queue have been processed.
java.awt.Scrollbar.addAdjustmentListener(java.awt.event.AdjustmentListener),adds the specified adjustment listener to receive instances of adjustmentevent from this scroll bar.
java.awt.Scrollbar.addNotify(),creates the scrollbar's peer.
java.awt.Scrollbar.getAccessibleContext(),gets the accessiblecontext associated with this scrollbar.
java.awt.Scrollbar.getAdjustmentListeners(),returns an array of all the adjustment listeners registered on this scrollbar.
java.awt.Scrollbar.getBlockIncrement(),gets the block increment of this scroll bar.
java.awt.Scrollbar.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this scrollbar.
java.awt.Scrollbar.getMaximum(),gets the maximum value of this scroll bar.
java.awt.Scrollbar.getMinimum(),gets the minimum value of this scroll bar.
java.awt.Scrollbar.getOrientation(),returns the orientation of this scroll bar.
java.awt.Scrollbar.getUnitIncrement(),gets the unit increment for this scrollbar.
java.awt.Scrollbar.getValue(),gets the current value of this scroll bar.
java.awt.Scrollbar.getValueIsAdjusting(),returns true if the value is in the process of changing as a result of actions being taken by the user.
java.awt.Scrollbar.getVisibleAmount(),gets the visible amount of this scroll bar.
java.awt.Scrollbar.paramString(),returns a string representing the state of this scrollbar.
java.awt.Scrollbar.processAdjustmentEvent(java.awt.event.AdjustmentEvent),processes adjustment events occurring on this scrollbar by dispatching them to any registered adjustmentlistener objects.
java.awt.Scrollbar.processEvent(java.awt.AWTEvent),processes events on this scroll bar.
java.awt.Scrollbar.removeAdjustmentListener(java.awt.event.AdjustmentListener),removes the specified adjustment listener so that it no longer receives instances of adjustmentevent from this scroll bar.
java.awt.Scrollbar.setBlockIncrement(int),sets the block increment for this scroll bar.
java.awt.Scrollbar.setMaximum(int),sets the maximum value of this scroll bar.
java.awt.Scrollbar.setMinimum(int),sets the minimum value of this scroll bar.
java.awt.Scrollbar.setOrientation(int),sets the orientation for this scroll bar.
java.awt.Scrollbar.setUnitIncrement(int),sets the unit increment for this scroll bar.
java.awt.Scrollbar.setValue(int),sets the value of this scroll bar to the specified value.
java.awt.Scrollbar.setValueIsAdjusting(boolean),sets the valueisadjusting property.
"java.awt.Scrollbar.setValues(int,int,int,int)","sets the values of four properties for this scroll bar: value, visibleamount, minimum, and maximum."
java.awt.Scrollbar.setVisibleAmount(int),sets the visible amount of this scroll bar.
"java.awt.ScrollPane.addImpl(java.awt.Component,java.lang.Object,int)",adds the specified component to this scroll pane container.
java.awt.ScrollPane.addNotify(),creates the scroll pane's peer.
java.awt.ScrollPane.doLayout(),lays out this container by resizing its child to its preferred size.
java.awt.ScrollPane.eventTypeEnabled(int),"if wheel scrolling is enabled, we return true for mousewheelevents."
java.awt.ScrollPane.getAccessibleContext(),gets the accessiblecontext associated with this scrollpane.
java.awt.ScrollPane.getHAdjustable(),returns the scrollpaneadjustable object which represents the state of the horizontal scrollbar.
java.awt.ScrollPane.getHScrollbarHeight(),"returns the height that would be occupied by a horizontal scrollbar, which is independent of whether it is currently displayed by the scroll pane or not."
java.awt.ScrollPane.getScrollbarDisplayPolicy(),returns the display policy for the scrollbars.
java.awt.ScrollPane.getScrollPosition(),"returns the current x,y position within the child which is displayed at the 0,0 location of the scrolled panel's view port."
java.awt.ScrollPane.getVAdjustable(),returns the scrollpaneadjustable object which represents the state of the vertical scrollbar.
java.awt.ScrollPane.getViewportSize(),returns the current size of the scroll pane's view port.
java.awt.ScrollPane.getVScrollbarWidth(),"returns the width that would be occupied by a vertical scrollbar, which is independent of whether it is currently displayed by the scroll pane or not."
java.awt.ScrollPane.isWheelScrollingEnabled(),indicates whether or not scrolling will take place in response to the mouse wheel.
java.awt.ScrollPane.paramString(),returns a string representing the state of this scrollpane.
java.awt.ScrollPane.printComponents(java.awt.Graphics),prints the component in this scroll pane.
java.awt.ScrollPane.processMouseWheelEvent(java.awt.event.MouseWheelEvent),process mouse wheel events that are delivered to this scrollpane by scrolling an appropriate amount.
java.awt.ScrollPane.setLayout(java.awt.LayoutManager),sets the layout manager for this container.
"java.awt.ScrollPane.setScrollPosition(int,int)",scrolls to the specified position within the child component.
java.awt.ScrollPane.setScrollPosition(java.awt.Point),scrolls to the specified position within the child component.
java.awt.ScrollPane.setWheelScrollingEnabled(boolean),enables/disables scrolling in response to movement of the mouse wheel.
java.awt.ScrollPaneAdjustable.addAdjustmentListener(java.awt.event.AdjustmentListener),adds the specified adjustment listener to receive adjustment events from this scrollpaneadjustable.
java.awt.ScrollPaneAdjustable.getAdjustmentListeners(),returns an array of all the adjustment listeners registered on this scrollpaneadjustable.
java.awt.ScrollPaneAdjustable.getOrientation(),returns the orientation of this scrollbar.
java.awt.ScrollPaneAdjustable.getValueIsAdjusting(),returns true if the value is in the process of changing as a result of actions being taken by the user.
java.awt.ScrollPaneAdjustable.paramString(),returns a string representing the state of this scrollbar.
java.awt.ScrollPaneAdjustable.removeAdjustmentListener(java.awt.event.AdjustmentListener),removes the specified adjustment listener so that it no longer receives adjustment events from this scrollpaneadjustable.
java.awt.ScrollPaneAdjustable.setMaximum(int),this method should not be called by user code.
java.awt.ScrollPaneAdjustable.setMinimum(int),this method should not be called by user code.
java.awt.ScrollPaneAdjustable.setValue(int),sets the value of this scrollbar to the specified value.
java.awt.ScrollPaneAdjustable.setValueIsAdjusting(boolean),sets the valueisadjusting property.
java.awt.ScrollPaneAdjustable.setVisibleAmount(int),this method should not be called by user code.
java.awt.ScrollPaneAdjustable.toString(),returns a string representation of this scrollbar and its values.
java.awt.SplashScreen.close(),"hides the splash screen, closes the window, and releases all associated resources."
java.awt.SplashScreen.createGraphics(),"creates a graphics context (as a graphics2d object) for the splash screen overlay image, which allows you to draw over the splash screen."
java.awt.SplashScreen.getBounds(),returns the bounds of the splash screen window as a rectangle.
java.awt.SplashScreen.getImageURL(),returns the current splash screen image.
java.awt.SplashScreen.getSize(),returns the size of the splash screen window as a dimension.
java.awt.SplashScreen.getSplashScreen(),returns the splashscreen object used for java startup splash screen control on systems that support display.
java.awt.SplashScreen.isVisible(),determines whether the splash screen is visible.
java.awt.SplashScreen.setImageURL(java.net.URL),changes the splash screen image.
java.awt.SplashScreen.update(),updates the splash window with current contents of the overlay image.
java.awt.SystemColor.toString(),returns a string representation of this color's values.
java.awt.SystemTray.add(java.awt.TrayIcon),adds a trayicon to the systemtray.
"java.awt.SystemTray.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",adds a propertychangelistener to the list of listeners for the specific property.
java.awt.SystemTray.getPropertyChangeListeners(java.lang.String),returns an array of all the listeners that have been associated with the named property.
java.awt.SystemTray.getSystemTray(),gets the systemtray instance that represents the desktop's tray area.
java.awt.SystemTray.getTrayIcons(),returns an array of all icons added to the tray by this application.
java.awt.SystemTray.getTrayIconSize(),"returns the size, in pixels, of the space that a tray icon will occupy in the system tray."
java.awt.SystemTray.isSupported(),returns whether the system tray is supported on the current platform.
java.awt.SystemTray.remove(java.awt.TrayIcon),removes the specified trayicon from the systemtray.
"java.awt.SystemTray.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",removes a propertychangelistener from the listener list for a specific property.
java.awt.TextArea.addNotify(),creates the textarea's peer.
java.awt.TextArea.append(java.lang.String),appends the given text to the text area's current text.
java.awt.TextArea.getAccessibleContext(),returns the accessiblecontext associated with this textarea.
java.awt.TextArea.getColumns(),returns the number of columns in this text area.
"java.awt.TextArea.getMinimumSize(int,int)",determines the minimum size of a text area with the specified number of rows and columns.
java.awt.TextArea.getMinimumSize(),determines the minimum size of this text area.
"java.awt.TextArea.getPreferredSize(int,int)",determines the preferred size of a text area with the specified number of rows and columns.
java.awt.TextArea.getPreferredSize(),determines the preferred size of this text area.
java.awt.TextArea.getRows(),returns the number of rows in the text area.
java.awt.TextArea.getScrollbarVisibility(),returns an enumerated value that indicates which scroll bars the text area uses.
"java.awt.TextArea.insert(java.lang.String,int)",inserts the specified text at the specified position in this text area.
java.awt.TextArea.paramString(),returns a string representing the state of this textarea.
"java.awt.TextArea.replaceRange(java.lang.String,int,int)",replaces text between the indicated start and end positions with the specified replacement text.
java.awt.TextArea.setColumns(int),sets the number of columns for this text area.
java.awt.TextArea.setRows(int),sets the number of rows for this text area.
java.awt.TextComponent.addNotify(),makes this component displayable by connecting it to a native screen resource.
java.awt.TextComponent.addTextListener(java.awt.event.TextListener),adds the specified text event listener to receive text events from this text component.
java.awt.TextComponent.enableInputMethods(boolean),enables or disables input method support for this text component.
java.awt.TextComponent.getAccessibleContext(),gets the accessiblecontext associated with this textcomponent.
java.awt.TextComponent.getBackground(),gets the background color of this text component.
java.awt.TextComponent.getCaretPosition(),returns the position of the text insertion caret.
java.awt.TextComponent.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this textcomponent.
java.awt.TextComponent.getSelectedText(),returns the selected text from the text that is presented by this text component.
java.awt.TextComponent.getSelectionEnd(),gets the end position of the selected text in this text component.
java.awt.TextComponent.getSelectionStart(),gets the start position of the selected text in this text component.
java.awt.TextComponent.getText(),returns the text that is presented by this text component.
java.awt.TextComponent.getTextListeners(),returns an array of all the text listeners registered on this text component.
java.awt.TextComponent.isEditable(),indicates whether or not this text component is editable.
java.awt.TextComponent.paramString(),returns a string representing the state of this textcomponent.
java.awt.TextComponent.processEvent(java.awt.AWTEvent),processes events on this text component.
java.awt.TextComponent.processTextEvent(java.awt.event.TextEvent),processes text events occurring on this text component by dispatching them to any registered textlistener objects.
java.awt.TextComponent.removeNotify(),removes the textcomponent's peer.
java.awt.TextComponent.removeTextListener(java.awt.event.TextListener),"removes the specified text event listener so that it no longer receives text events from this text component if l is null, no exception is thrown and no action is performed."
"java.awt.TextComponent.select(int,int)",selects the text between the specified start and end positions.
java.awt.TextComponent.selectAll(),selects all the text in this text component.
java.awt.TextComponent.setBackground(java.awt.Color),sets the background color of this text component.
java.awt.TextComponent.setCaretPosition(int),sets the position of the text insertion caret.
java.awt.TextComponent.setEditable(boolean),sets the flag that determines whether or not this text component is editable.
java.awt.TextComponent.setSelectionEnd(int),sets the selection end for this text component to the specified position.
java.awt.TextComponent.setSelectionStart(int),sets the selection start for this text component to the specified position.
java.awt.TextComponent.setText(java.lang.String),sets the text that is presented by this text component to be the specified text.
java.awt.TextField.addActionListener(java.awt.event.ActionListener),adds the specified action listener to receive action events from this text field.
java.awt.TextField.addNotify(),creates the textfield's peer.
java.awt.TextField.echoCharIsSet(),indicates whether or not this text field has a character set for echoing.
java.awt.TextField.getAccessibleContext(),gets the accessiblecontext associated with this textfield.
java.awt.TextField.getActionListeners(),returns an array of all the action listeners registered on this textfield.
java.awt.TextField.getColumns(),gets the number of columns in this text field.
java.awt.TextField.getEchoChar(),gets the character that is to be used for echoing.
java.awt.TextField.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this textfield.
java.awt.TextField.getMinimumSize(int),gets the minimum dimensions for a text field with the specified number of columns.
java.awt.TextField.getMinimumSize(),gets the minimum dimensions for this text field.
java.awt.TextField.getPreferredSize(int),gets the preferred size of this text field with the specified number of columns.
java.awt.TextField.getPreferredSize(),gets the preferred size of this text field.
java.awt.TextField.paramString(),returns a string representing the state of this textfield.
java.awt.TextField.processActionEvent(java.awt.event.ActionEvent),processes action events occurring on this text field by dispatching them to any registered actionlistener objects.
java.awt.TextField.processEvent(java.awt.AWTEvent),processes events on this text field.
java.awt.TextField.removeActionListener(java.awt.event.ActionListener),removes the specified action listener so that it no longer receives action events from this text field.
java.awt.TextField.setColumns(int),sets the number of columns in this text field.
java.awt.TextField.setEchoChar(char),sets the echo character for this text field.
java.awt.TextField.setText(java.lang.String),sets the text that is presented by this text component to be the specified text.
"java.awt.TexturePaint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)",creates and returns a paintcontext used to generate a tiled image pattern.
java.awt.TexturePaint.getAnchorRect(),returns a copy of the anchor rectangle which positions and sizes the textured image.
java.awt.TexturePaint.getImage(),returns the bufferedimage texture used to fill the shapes.
java.awt.TexturePaint.getTransparency(),returns the transparency mode for this texturepaint.
"java.awt.Toolkit.addAWTEventListener(java.awt.event.AWTEventListener,long)",adds an awteventlistener to receive all awtevents dispatched system-wide that conform to the given eventmask.
"java.awt.Toolkit.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",adds the specified property change listener for the named desktop property.
java.awt.Toolkit.areExtraMouseButtonsEnabled(),reports whether events from extra mouse buttons are allowed to be processed and posted into eventqueue.
java.awt.Toolkit.beep(),emits an audio beep depending on native system settings and hardware capabilities.
"java.awt.Toolkit.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",indicates the construction status of a specified image that is being prepared for display.
java.awt.Toolkit.createButton(java.awt.Button),creates this toolkit's implementation of button using the specified peer interface.
java.awt.Toolkit.createCanvas(java.awt.Canvas),creates this toolkit's implementation of canvas using the specified peer interface.
java.awt.Toolkit.createCheckbox(java.awt.Checkbox),creates this toolkit's implementation of checkbox using the specified peer interface.
java.awt.Toolkit.createCheckboxMenuItem(java.awt.CheckboxMenuItem),creates this toolkit's implementation of checkboxmenuitem using the specified peer interface.
java.awt.Toolkit.createChoice(java.awt.Choice),creates this toolkit's implementation of choice using the specified peer interface.
java.awt.Toolkit.createComponent(java.awt.Component),creates a peer for a component or container.
"java.awt.Toolkit.createCustomCursor(java.awt.Image,java.awt.Point,java.lang.String)",creates a new custom cursor object.
java.awt.Toolkit.createDesktopPeer(java.awt.Desktop),creates this toolkit's implementation of the desktop using the specified peer interface.
java.awt.Toolkit.createDialog(java.awt.Dialog),creates this toolkit's implementation of dialog using the specified peer interface.
"java.awt.Toolkit.createDragGestureRecognizer(java.lang.Class<T>,java.awt.dnd.DragSource,java.awt.Component,int,java.awt.dnd.DragGestureListener)","creates a concrete, platform dependent, subclass of the abstract draggesturerecognizer class requested, and associates it with the dragsource, component and draggesturelistener specified."
java.awt.Toolkit.createDragSourceContextPeer(java.awt.dnd.DragGestureEvent),creates the peer for a dragsourcecontext.
java.awt.Toolkit.createFileDialog(java.awt.FileDialog),creates this toolkit's implementation of filedialog using the specified peer interface.
java.awt.Toolkit.createFrame(java.awt.Frame),creates this toolkit's implementation of frame using the specified peer interface.
java.awt.Toolkit.createImage(java.lang.String),returns an image which gets pixel data from the specified file.
java.awt.Toolkit.createImage(java.net.URL),returns an image which gets pixel data from the specified url.
java.awt.Toolkit.createImage(java.awt.image.ImageProducer),creates an image with the specified image producer.
java.awt.Toolkit.createImage(byte[]),creates an image which decodes the image stored in the specified byte array.
"java.awt.Toolkit.createImage(byte[],int,int)","creates an image which decodes the image stored in the specified byte array, and at the specified offset and length."
java.awt.Toolkit.createLabel(java.awt.Label),creates this toolkit's implementation of label using the specified peer interface.
java.awt.Toolkit.createList(java.awt.List),creates this toolkit's implementation of list using the specified peer interface.
java.awt.Toolkit.createMenu(java.awt.Menu),creates this toolkit's implementation of menu using the specified peer interface.
java.awt.Toolkit.createMenuBar(java.awt.MenuBar),creates this toolkit's implementation of menubar using the specified peer interface.
java.awt.Toolkit.createMenuItem(java.awt.MenuItem),creates this toolkit's implementation of menuitem using the specified peer interface.
java.awt.Toolkit.createPanel(java.awt.Panel),creates this toolkit's implementation of panel using the specified peer interface.
java.awt.Toolkit.createPopupMenu(java.awt.PopupMenu),creates this toolkit's implementation of popupmenu using the specified peer interface.
java.awt.Toolkit.createScrollbar(java.awt.Scrollbar),creates this toolkit's implementation of scrollbar using the specified peer interface.
java.awt.Toolkit.createScrollPane(java.awt.ScrollPane),creates this toolkit's implementation of scrollpane using the specified peer interface.
java.awt.Toolkit.createTextArea(java.awt.TextArea),creates this toolkit's implementation of textarea using the specified peer interface.
java.awt.Toolkit.createTextField(java.awt.TextField),creates this toolkit's implementation of textfield using the specified peer interface.
java.awt.Toolkit.createWindow(java.awt.Window),creates this toolkit's implementation of window using the specified peer interface.
java.awt.Toolkit.getAWTEventListeners(),returns an array of all the awteventlisteners registered on this toolkit.
java.awt.Toolkit.getAWTEventListeners(long),returns an array of all the awteventlisteners registered on this toolkit which listen to all of the event types specified in the eventmask argument.
"java.awt.Toolkit.getBestCursorSize(int,int)",returns the supported cursor dimension which is closest to the desired sizes.
java.awt.Toolkit.getColorModel(),determines the color model of this toolkit's screen.
java.awt.Toolkit.getDefaultToolkit(),gets the default toolkit.
java.awt.Toolkit.getDesktopProperty(java.lang.String),obtains a value for the specified desktop property.
java.awt.Toolkit.getImage(java.lang.String),"returns an image which gets pixel data from the specified file, whose format can be either gif, jpeg or png."
java.awt.Toolkit.getImage(java.net.URL),returns an image which gets pixel data from the specified url.
java.awt.Toolkit.getLockingKeyState(int),"returns whether the given locking key on the keyboard is currently in its ""on"" state."
java.awt.Toolkit.getMaximumCursorColors(),returns the maximum number of colors the toolkit supports in a custom cursor palette.
java.awt.Toolkit.getMenuShortcutKeyMask(),determines which modifier key is the appropriate accelerator key for menu shortcuts.
java.awt.Toolkit.getMouseInfoPeer(),obtains this toolkit's implementation of helper class for mouseinfo operations.
java.awt.Toolkit.getNativeContainer(java.awt.Component),give native peers the ability to query the native container given a native component (eg the direct parent may be lightweight).
"java.awt.Toolkit.getPrintJob(java.awt.Frame,java.lang.String,java.util.Properties)",gets a printjob object which is the result of initiating a print operation on the toolkit's platform.
"java.awt.Toolkit.getPrintJob(java.awt.Frame,java.lang.String,java.awt.JobAttributes,java.awt.PageAttributes)",gets a printjob object which is the result of initiating a print operation on the toolkit's platform.
"java.awt.Toolkit.getProperty(java.lang.String,java.lang.String)",gets a property with the specified key and default.
java.awt.Toolkit.getPropertyChangeListeners(),returns an array of all the property change listeners registered on this toolkit.
java.awt.Toolkit.getPropertyChangeListeners(java.lang.String),returns an array of all property change listeners associated with the specified name of a desktop property.
java.awt.Toolkit.getScreenInsets(java.awt.GraphicsConfiguration),gets the insets of the screen.
java.awt.Toolkit.getScreenResolution(),returns the screen resolution in dots-per-inch.
java.awt.Toolkit.getScreenSize(),gets the size of the screen.
java.awt.Toolkit.getSystemClipboard(),gets the singleton instance of the system clipboard which interfaces with clipboard facilities provided by the native platform.
java.awt.Toolkit.getSystemEventQueue(),get the application's or applet's eventqueue instance.
java.awt.Toolkit.getSystemEventQueueImpl(),"gets the application's or applet's eventqueue instance, without checking access."
java.awt.Toolkit.getSystemSelection(),gets the singleton instance of the system selection as a clipboard object.
java.awt.Toolkit.initializeDesktopProperties(),initializedesktopproperties.
java.awt.Toolkit.isAlwaysOnTopSupported(),returns whether the always-on-top mode is supported by this toolkit.
java.awt.Toolkit.isDynamicLayoutActive(),"returns whether dynamic layout of containers on resize is currently active (both set in program ( isdynamiclayoutset() ) , and supported by the underlying operating system and/or window manager)."
java.awt.Toolkit.isDynamicLayoutSet(),"returns whether the layout of containers is validated dynamically during resizing, or statically, after resizing is complete."
java.awt.Toolkit.isFrameStateSupported(int),returns whether toolkit supports this state for frames.
java.awt.Toolkit.isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType),returns whether the given modal exclusion type is supported by this toolkit.
java.awt.Toolkit.isModalityTypeSupported(java.awt.Dialog.ModalityType),returns whether the given modality type is supported by this toolkit.
java.awt.Toolkit.lazilyLoadDesktopProperty(java.lang.String),an opportunity to lazily evaluate desktop property values.
java.awt.Toolkit.loadSystemColors(int[]),fills in the integer array that is supplied as an argument with the current system color values.
java.awt.Toolkit.mapInputMethodHighlight(java.awt.im.InputMethodHighlight),"returns a map of visual attributes for the abstract level description of the given input method highlight, or null if no mapping is found."
"java.awt.Toolkit.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",prepares an image for rendering.
java.awt.Toolkit.removeAWTEventListener(java.awt.event.AWTEventListener),removes an awteventlistener from receiving dispatched awtevents.
"java.awt.Toolkit.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",removes the specified property change listener for the named desktop property.
"java.awt.Toolkit.setDesktopProperty(java.lang.String,java.lang.Object)",sets the named desktop property to the specified value and fires a property change event to notify any listeners that the value has changed.
java.awt.Toolkit.setDynamicLayout(boolean),"controls whether the layout of containers is validated dynamically during resizing, or statically, after resizing is complete."
"java.awt.Toolkit.setLockingKeyState(int,boolean)",sets the state of the given locking key on the keyboard.
java.awt.Toolkit.sync(),synchronizes this toolkit's graphics state.
java.awt.TrayIcon.addActionListener(java.awt.event.ActionListener),adds the specified action listener to receive actionevents from this trayicon.
java.awt.TrayIcon.addMouseListener(java.awt.event.MouseListener),adds the specified mouse listener to receive mouse events from this trayicon.
java.awt.TrayIcon.addMouseMotionListener(java.awt.event.MouseMotionListener),adds the specified mouse listener to receive mouse-motion events from this trayicon.
"java.awt.TrayIcon.displayMessage(java.lang.String,java.lang.String,java.awt.TrayIcon.MessageType)",displays a popup message near the tray icon.
java.awt.TrayIcon.getActionCommand(),returns the command name of the action event fired by this tray icon.
java.awt.TrayIcon.getActionListeners(),returns an array of all the action listeners registered on this trayicon.
java.awt.TrayIcon.getImage(),returns the current image used for this trayicon.
java.awt.TrayIcon.getMouseListeners(),returns an array of all the mouse listeners registered on this trayicon.
java.awt.TrayIcon.getMouseMotionListeners(),returns an array of all the mouse-motion listeners registered on this trayicon.
java.awt.TrayIcon.getPopupMenu(),returns the popup menu associated with this trayicon.
java.awt.TrayIcon.getSize(),"returns the size, in pixels, of the space that the tray icon occupies in the system tray."
java.awt.TrayIcon.getToolTip(),returns the tooltip string associated with this trayicon.
java.awt.TrayIcon.isImageAutoSize(),returns the value of the auto-size property.
java.awt.TrayIcon.removeActionListener(java.awt.event.ActionListener),removes the specified action listener.
java.awt.TrayIcon.removeMouseListener(java.awt.event.MouseListener),removes the specified mouse listener.
java.awt.TrayIcon.removeMouseMotionListener(java.awt.event.MouseMotionListener),removes the specified mouse-motion listener.
java.awt.TrayIcon.setActionCommand(java.lang.String),sets the command name for the action event fired by this tray icon.
java.awt.TrayIcon.setImage(java.awt.Image),sets the image for this trayicon.
java.awt.TrayIcon.setImageAutoSize(boolean),sets the auto-size property.
java.awt.TrayIcon.setPopupMenu(java.awt.PopupMenu),sets the popup menu for this trayicon.
java.awt.TrayIcon.setToolTip(java.lang.String),sets the tooltip string for this trayicon.
java.awt.Window.addNotify(),makes this window displayable by creating the connection to its native screen resource.
java.awt.Window.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
"java.awt.Window.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",adds a propertychangelistener to the listener list for a specific property.
java.awt.Window.addWindowFocusListener(java.awt.event.WindowFocusListener),adds the specified window focus listener to receive window events from this window.
java.awt.Window.addWindowListener(java.awt.event.WindowListener),adds the specified window listener to receive window events from this window.
java.awt.Window.addWindowStateListener(java.awt.event.WindowStateListener),adds the specified window state listener to receive window events from this window.
java.awt.Window.createBufferStrategy(int),creates a new strategy for multi-buffering on this component.
"java.awt.Window.createBufferStrategy(int,java.awt.BufferCapabilities)",creates a new strategy for multi-buffering on this component with the required buffer capabilities.
java.awt.Window.dispose(),"releases all of the native screen resources used by this window, its subcomponents, and all of its owned children."
java.awt.Window.getAccessibleContext(),gets the accessiblecontext associated with this window.
java.awt.Window.getBackground(),gets the background color of this window.
java.awt.Window.getBufferStrategy(),returns the bufferstrategy used by this component.
java.awt.Window.getFocusableWindowState(),returns whether this window can become the focused window if it meets the other requirements outlined in isfocusablewindow.
java.awt.Window.getFocusCycleRootAncestor(),always returns null because windows have no ancestors; they represent the top of the component hierarchy.
java.awt.Window.getFocusOwner(),returns the child component of this window that has focus if this window is focused; returns null otherwise.
java.awt.Window.getFocusTraversalKeys(int),gets a focus traversal key for this window.
java.awt.Window.getIconImages(),returns the sequence of images to be displayed as the icon for this window.
java.awt.Window.getInputContext(),gets the input context for this window.
java.awt.Window.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this window.
java.awt.Window.getLocale(),"gets the locale object that is associated with this window, if the locale has been set."
java.awt.Window.getModalExclusionType(),returns the modal exclusion type of this window.
java.awt.Window.getMostRecentFocusOwner(),returns the child component of this window that will receive the focus when this window is focused.
java.awt.Window.getOpacity(),returns the opacity of the window.
java.awt.Window.getOwnedWindows(),return an array containing all the windows this window currently owns.
java.awt.Window.getOwner(),returns the owner of this window.
java.awt.Window.getOwnerlessWindows(),returns an array of all windows created by this application that have no owner.
java.awt.Window.getShape(),returns the shape of the window.
java.awt.Window.getToolkit(),returns the toolkit of this frame.
java.awt.Window.getType(),returns the type of the window.
java.awt.Window.getWarningString(),gets the warning string that is displayed with this window.
java.awt.Window.getWindowFocusListeners(),returns an array of all the window focus listeners registered on this window.
java.awt.Window.getWindowListeners(),returns an array of all the window listeners registered on this window.
java.awt.Window.getWindows(),"returns an array of all windows, both owned and ownerless, created by this application."
java.awt.Window.getWindowStateListeners(),returns an array of all the window state listeners registered on this window.
java.awt.Window.isActive(),returns whether this window is active.
java.awt.Window.isAlwaysOnTop(),returns whether this window is an always-on-top window.
java.awt.Window.isAlwaysOnTopSupported(),returns whether the always-on-top mode is supported for this window.
java.awt.Window.isAutoRequestFocus(),"returns whether this window should receive focus on subsequently being shown (with a call to setvisible(true)), or being moved to the front (with a call to tofront())."
java.awt.Window.isFocusableWindow(),"returns whether this window can become the focused window, that is, whether this window or any of its subcomponents can become the focus owner."
java.awt.Window.isFocusCycleRoot(),always returns true because all windows must be roots of a focus traversal cycle.
java.awt.Window.isFocused(),returns whether this window is focused.
java.awt.Window.isLocationByPlatform(),returns true if this window will appear at the default location for the native windowing system the next time this window is made visible.
java.awt.Window.isOpaque(),indicates if the window is currently opaque.
java.awt.Window.isShowing(),checks if this window is showing on screen.
java.awt.Window.isValidateRoot(),indicates if this container is a validate root.
java.awt.Window.pack(),causes this window to be sized to fit the preferred size and layouts of its subcomponents.
java.awt.Window.paint(java.awt.Graphics),paints the container.
java.awt.Window.processEvent(java.awt.AWTEvent),processes events on this window.
java.awt.Window.processWindowEvent(java.awt.event.WindowEvent),processes window events occurring on this window by dispatching them to any registered windowlistener objects.
java.awt.Window.processWindowFocusEvent(java.awt.event.WindowEvent),processes window focus event occurring on this window by dispatching them to any registered windowfocuslistener objects.
java.awt.Window.processWindowStateEvent(java.awt.event.WindowEvent),processes window state event occurring on this window by dispatching them to any registered windowstatelistener objects.
java.awt.Window.removeNotify(),makes this container undisplayable by removing its connection to its native screen resource.
java.awt.Window.removeWindowFocusListener(java.awt.event.WindowFocusListener),removes the specified window focus listener so that it no longer receives window events from this window.
java.awt.Window.removeWindowListener(java.awt.event.WindowListener),removes the specified window listener so that it no longer receives window events from this window.
java.awt.Window.removeWindowStateListener(java.awt.event.WindowStateListener),removes the specified window state listener so that it no longer receives window events from this window.
java.awt.Window.setAlwaysOnTop(boolean),sets whether this window should always be above other windows.
java.awt.Window.setAutoRequestFocus(boolean),"sets whether this window should receive focus on subsequently being shown (with a call to setvisible(true)), or being moved to the front (with a call to tofront())."
java.awt.Window.setBackground(java.awt.Color),sets the background color of this window.
"java.awt.Window.setBounds(int,int,int,int)",moves and resizes this component.
java.awt.Window.setBounds(java.awt.Rectangle),moves and resizes this component to conform to the new bounding rectangle r.
java.awt.Window.setCursor(java.awt.Cursor),set the cursor image to a specified cursor.
java.awt.Window.setFocusableWindowState(boolean),sets whether this window can become the focused window if it meets the other requirements outlined in isfocusablewindow.
java.awt.Window.setFocusCycleRoot(boolean),does nothing because windows must always be roots of a focus traversal cycle.
java.awt.Window.setIconImage(java.awt.Image),sets the image to be displayed as the icon for this window.
java.awt.Window.setIconImages(java.util.List<? extends java.awt.Image>),sets the sequence of images to be displayed as the icon for this window.
"java.awt.Window.setLocation(int,int)",moves this component to a new location.
java.awt.Window.setLocation(java.awt.Point),moves this component to a new location.
java.awt.Window.setLocationByPlatform(boolean),sets whether this window should appear at the default location for the native windowing system or at the current location (returned by getlocation) the next time the window is made visible.
java.awt.Window.setLocationRelativeTo(java.awt.Component),sets the location of the window relative to the specified component according to the following scenarios.
java.awt.Window.setMinimumSize(java.awt.Dimension),sets the minimum size of this window to a constant value.
java.awt.Window.setModalExclusionType(java.awt.Dialog.ModalExclusionType),specifies the modal exclusion type for this window.
java.awt.Window.setOpacity(float),sets the opacity of the window.
java.awt.Window.setShape(java.awt.Shape),sets the shape of the window.
java.awt.Window.setSize(java.awt.Dimension),resizes this component so that it has width d.
"java.awt.Window.setSize(int,int)",resizes this component so that it has width width and height height.
java.awt.Window.setType(java.awt.Window.Type),sets the type of the window.
java.awt.Window.setVisible(boolean),shows or hides this window depending on the value of parameter b.
java.awt.Window.toBack(),"if this window is visible, sends this window to the back and may cause it to lose focus or activation if it is the focused or active window."
java.awt.Window.toFront(),"if this window is visible, brings this window to the front and may make it the focused window."
java.awt.Component.BaselineResizeBehavior.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.awt.Component.BaselineResizeBehavior.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.awt.Desktop.Action.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.awt.Desktop.Action.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.awt.Dialog.ModalExclusionType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.awt.Dialog.ModalExclusionType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.awt.Dialog.ModalityType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.awt.Dialog.ModalityType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.awt.GraphicsDevice.WindowTranslucency.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.awt.GraphicsDevice.WindowTranslucency.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.awt.MultipleGradientPaint.ColorSpaceType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.awt.MultipleGradientPaint.ColorSpaceType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.awt.MultipleGradientPaint.CycleMethod.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.awt.MultipleGradientPaint.CycleMethod.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.awt.TrayIcon.MessageType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.awt.TrayIcon.MessageType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.awt.Window.Type.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.awt.Window.Type.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.awt.color.ColorSpace.fromCIEXYZ(float[]),transforms a color value assumed to be in the cs_ciexyz conversion color space into this colorspace.
java.awt.color.ColorSpace.fromRGB(float[]),transforms a color value assumed to be in the default cs_srgb color space into this colorspace.
java.awt.color.ColorSpace.getInstance(int),returns a colorspace representing one of the specific predefined color spaces.
java.awt.color.ColorSpace.getMaxValue(int),returns the maximum normalized color component value for the specified component.
java.awt.color.ColorSpace.getMinValue(int),returns the minimum normalized color component value for the specified component.
java.awt.color.ColorSpace.getName(int),returns the name of the component given the component index.
java.awt.color.ColorSpace.getNumComponents(),returns the number of components of this colorspace.
java.awt.color.ColorSpace.getType(),"returns the color space type of this colorspace (for example type_rgb, type_xyz, ."
java.awt.color.ColorSpace.isCS_sRGB(),returns true if the colorspace is cs_srgb.
java.awt.color.ColorSpace.toCIEXYZ(float[]),transforms a color value assumed to be in this colorspace into the cs_ciexyz conversion color space.
java.awt.color.ColorSpace.toRGB(float[]),transforms a color value assumed to be in this colorspace into a value in the default cs_srgb color space.
java.awt.color.ICC_ColorSpace.fromCIEXYZ(float[]),transforms a color value assumed to be in the cs_ciexyz conversion color space into this colorspace.
java.awt.color.ICC_ColorSpace.fromRGB(float[]),transforms a color value assumed to be in the default cs_srgb color space into this colorspace.
java.awt.color.ICC_ColorSpace.getMaxValue(int),returns the maximum normalized color component value for the specified component.
java.awt.color.ICC_ColorSpace.getMinValue(int),returns the minimum normalized color component value for the specified component.
java.awt.color.ICC_ColorSpace.getProfile(),returns the icc_profile for this icc_colorspace.
java.awt.color.ICC_ColorSpace.toCIEXYZ(float[]),transforms a color value assumed to be in this colorspace into the cs_ciexyz conversion color space.
java.awt.color.ICC_ColorSpace.toRGB(float[]),transforms a color value assumed to be in this colorspace into a value in the default cs_srgb color space.
java.awt.color.ICC_Profile.finalize(),frees the resources associated with an icc_profile object.
java.awt.color.ICC_Profile.getColorSpaceType(),returns the color space type.
java.awt.color.ICC_Profile.getData(),returns a byte array corresponding to the data of this icc_profile.
java.awt.color.ICC_Profile.getData(int),returns a particular tagged data element from the profile as a byte array.
java.awt.color.ICC_Profile.getInstance(byte[]),constructs an icc_profile object corresponding to the data in a byte array.
java.awt.color.ICC_Profile.getInstance(int),constructs an icc_profile corresponding to one of the specific color spaces defined by the colorspace class (for example cs_srgb).
java.awt.color.ICC_Profile.getInstance(java.lang.String),constructs an icc_profile corresponding to the data in a file.
java.awt.color.ICC_Profile.getInstance(java.io.InputStream),constructs an icc_profile corresponding to the data in an inputstream.
java.awt.color.ICC_Profile.getMajorVersion(),returns profile major version.
java.awt.color.ICC_Profile.getMinorVersion(),returns profile minor version.
java.awt.color.ICC_Profile.getNumComponents(),"returns the number of color components in the ""input"" color space of this profile."
java.awt.color.ICC_Profile.getPCSType(),returns the color space type of the profile connection space (pcs).
java.awt.color.ICC_Profile.getProfileClass(),returns the profile class.
java.awt.color.ICC_Profile.readResolve(),resolves instances being deserialized into instances registered with cmm.
"java.awt.color.ICC_Profile.setData(int,byte[])",sets a particular tagged data element in the profile from a byte array.
java.awt.color.ICC_Profile.write(java.lang.String),write this icc_profile to a file.
java.awt.color.ICC_Profile.write(java.io.OutputStream),write this icc_profile to an outputstream.
java.awt.color.ICC_ProfileGray.getGamma(),returns a gamma value representing the tone reproduction curve (trc).
java.awt.color.ICC_ProfileGray.getMediaWhitePoint(),"returns a float array of length 3 containing the x, y, and z components of the mediawhitepointtag in the icc profile."
java.awt.color.ICC_ProfileGray.getTRC(),returns the trc as an array of shorts.
java.awt.color.ICC_ProfileRGB.getGamma(int),returns a gamma value representing the tone reproduction curve (trc) for a particular component.
java.awt.color.ICC_ProfileRGB.getMatrix(),"returns a 3x3 float matrix constructed from the x, y, and z components of the profile's redcoloranttag, greencoloranttag, and bluecoloranttag."
java.awt.color.ICC_ProfileRGB.getMediaWhitePoint(),returns an array that contains the components of the profile's mediawhitepointtag.
java.awt.color.ICC_ProfileRGB.getTRC(int),returns the trc for a particular component as an array.
"java.awt.datatransfer.ClipboardOwner.lostOwnership(java.awt.datatransfer.Clipboard,java.awt.datatransfer.Transferable)",notifies this object that it is no longer the clipboard owner.
java.awt.datatransfer.FlavorListener.flavorsChanged(java.awt.datatransfer.FlavorEvent),invoked when the target clipboard of the listener has changed its available dataflavors.
java.awt.datatransfer.FlavorMap.getFlavorsForNatives(java.lang.String[]),returns a map of the specified string natives to their corresponding dataflavor.
java.awt.datatransfer.FlavorMap.getNativesForFlavors(java.awt.datatransfer.DataFlavor[]),returns a map of the specified dataflavors to their corresponding string native.
java.awt.datatransfer.FlavorTable.getFlavorsForNative(java.lang.String),returns a list of dataflavors to which the specified string corresponds.
java.awt.datatransfer.FlavorTable.getNativesForFlavor(java.awt.datatransfer.DataFlavor),returns a list of string natives to which the specified dataflavor corresponds.
java.awt.datatransfer.Transferable.getTransferData(java.awt.datatransfer.DataFlavor),returns an object which represents the data to be transferred.
java.awt.datatransfer.Transferable.getTransferDataFlavors(),returns an array of dataflavor objects indicating the flavors the data can be provided in.
java.awt.datatransfer.Transferable.isDataFlavorSupported(java.awt.datatransfer.DataFlavor),returns whether or not the specified data flavor is supported for this object.
java.awt.datatransfer.Clipboard.addFlavorListener(java.awt.datatransfer.FlavorListener),registers the specified flavorlistener to receive flavorevents from this clipboard.
java.awt.datatransfer.Clipboard.getAvailableDataFlavors(),returns an array of dataflavors in which the current contents of this clipboard can be provided.
java.awt.datatransfer.Clipboard.getContents(java.lang.Object),returns a transferable object representing the current contents of the clipboard.
java.awt.datatransfer.Clipboard.getData(java.awt.datatransfer.DataFlavor),returns an object representing the current contents of this clipboard in the specified dataflavor.
java.awt.datatransfer.Clipboard.getFlavorListeners(),returns an array of all the flavorlisteners currently registered on this clipboard.
java.awt.datatransfer.Clipboard.getName(),returns the name of this clipboard object.
java.awt.datatransfer.Clipboard.isDataFlavorAvailable(java.awt.datatransfer.DataFlavor),returns whether or not the current contents of this clipboard can be provided in the specified dataflavor.
java.awt.datatransfer.Clipboard.removeFlavorListener(java.awt.datatransfer.FlavorListener),removes the specified flavorlistener so that it no longer receives flavorevents from this clipboard.
"java.awt.datatransfer.Clipboard.setContents(java.awt.datatransfer.Transferable,java.awt.datatransfer.ClipboardOwner)",sets the current contents of the clipboard to the specified transferable object and registers the specified clipboard owner as the owner of the new contents.
java.awt.datatransfer.DataFlavor.clone(),returns a clone of this dataflavor.
java.awt.datatransfer.DataFlavor.equals(java.lang.Object),"indicates whether some other object is ""equal to"" this one."
java.awt.datatransfer.DataFlavor.equals(java.awt.datatransfer.DataFlavor),this method has the same behavior as equals(object).
java.awt.datatransfer.DataFlavor.getHumanPresentableName(),returns the human presentable name for the data format that this dataflavor represents.
java.awt.datatransfer.DataFlavor.getMimeType(),returns the mime type string for this dataflavor.
java.awt.datatransfer.DataFlavor.getParameter(java.lang.String),"returns the human presentable name for this dataflavor if paramname equals ""humanpresentablename""."
java.awt.datatransfer.DataFlavor.getPrimaryType(),returns the primary mime type for this dataflavor.
java.awt.datatransfer.DataFlavor.getReaderForText(java.awt.datatransfer.Transferable),"gets a reader for a text flavor, decoded, if necessary, for the expected charset (encoding)."
java.awt.datatransfer.DataFlavor.getRepresentationClass(),returns the class which objects supporting this dataflavor will return when this dataflavor is requested.
java.awt.datatransfer.DataFlavor.getSubType(),returns the sub mime type of this dataflavor.
java.awt.datatransfer.DataFlavor.getTextPlainUnicodeFlavor(),"returns a dataflavor representing plain text with unicode encoding, where:
representationclass = java."
java.awt.datatransfer.DataFlavor.hashCode(),returns hash code for this dataflavor.
java.awt.datatransfer.DataFlavor.isFlavorJavaFileListType(),returns true if the dataflavor specified represents a list of file objects.
java.awt.datatransfer.DataFlavor.isFlavorRemoteObjectType(),returns true if the dataflavor specified represents a remote object.
java.awt.datatransfer.DataFlavor.isFlavorSerializedObjectType(),returns true if the dataflavor specified represents a serialized object.
java.awt.datatransfer.DataFlavor.isFlavorTextType(),returns whether this dataflavor is a valid text flavor for this implementation of the java platform.
java.awt.datatransfer.DataFlavor.isMimeTypeEqual(java.lang.String),returns whether the string representation of the mime type passed in is equivalent to the mime type of this dataflavor.
java.awt.datatransfer.DataFlavor.isMimeTypeEqual(java.awt.datatransfer.DataFlavor),compares the mimetype of two dataflavor objects.
java.awt.datatransfer.DataFlavor.isMimeTypeSerializedObject(),does the dataflavor represent a serialized object?.
java.awt.datatransfer.DataFlavor.isRepresentationClassByteBuffer(),returns whether the representation class for this dataflavor is java.
java.awt.datatransfer.DataFlavor.isRepresentationClassCharBuffer(),returns whether the representation class for this dataflavor is java.
java.awt.datatransfer.DataFlavor.isRepresentationClassInputStream(),does the dataflavor represent a java.
java.awt.datatransfer.DataFlavor.isRepresentationClassReader(),returns whether the representation class for this dataflavor is java.
java.awt.datatransfer.DataFlavor.isRepresentationClassRemote(),returns true if the representation class is remote.
java.awt.datatransfer.DataFlavor.isRepresentationClassSerializable(),returns true if the representation class can be serialized.
java.awt.datatransfer.DataFlavor.match(java.awt.datatransfer.DataFlavor),identical to equals(dataflavor).
java.awt.datatransfer.DataFlavor.readExternal(java.io.ObjectInput),restores this dataflavor from a serialized state.
java.awt.datatransfer.DataFlavor.selectBestTextFlavor(java.awt.datatransfer.DataFlavor[]),selects the best text dataflavor from an array of dataflavors.
java.awt.datatransfer.DataFlavor.setHumanPresentableName(java.lang.String),sets the human presentable name for the data format that this dataflavor represents.
java.awt.datatransfer.DataFlavor.toString(),string representation of this dataflavor and its parameters.
"java.awt.datatransfer.DataFlavor.tryToLoadClass(java.lang.String,java.lang.ClassLoader)","tries to load a class from: the bootstrap loader, the system loader, the context loader (if one is present) and finally the loader specified."
java.awt.datatransfer.DataFlavor.writeExternal(java.io.ObjectOutput),serializes this dataflavor.
java.awt.datatransfer.StringSelection.getTransferData(java.awt.datatransfer.DataFlavor),returns the transferable's data in the requested dataflavor if possible.
java.awt.datatransfer.StringSelection.getTransferDataFlavors(),returns an array of flavors in which this transferable can provide the data.
java.awt.datatransfer.StringSelection.isDataFlavorSupported(java.awt.datatransfer.DataFlavor),returns whether the requested flavor is supported by this transferable.
"java.awt.datatransfer.SystemFlavorMap.addFlavorForUnencodedNative(java.lang.String,java.awt.datatransfer.DataFlavor)",adds a mapping from a single string native to a single dataflavor.
"java.awt.datatransfer.SystemFlavorMap.addUnencodedNativeForFlavor(java.awt.datatransfer.DataFlavor,java.lang.String)",adds a mapping from the specified dataflavor (and all dataflavors equal to the specified dataflavor) to the specified string native.
java.awt.datatransfer.SystemFlavorMap.decodeDataFlavor(java.lang.String),decodes a string native for use as a dataflavor.
java.awt.datatransfer.SystemFlavorMap.decodeJavaMIMEType(java.lang.String),decodes a string native for use as a java mime type.
java.awt.datatransfer.SystemFlavorMap.encodeDataFlavor(java.awt.datatransfer.DataFlavor),encodes a dataflavor for use as a string native.
java.awt.datatransfer.SystemFlavorMap.encodeJavaMIMEType(java.lang.String),encodes a mime type for use as a string native.
java.awt.datatransfer.SystemFlavorMap.getDefaultFlavorMap(),returns the default flavormap for this thread's classloader.
java.awt.datatransfer.SystemFlavorMap.getFlavorsForNative(java.lang.String),returns a list of dataflavors to which the specified string native can be translated by the data transfer subsystem.
java.awt.datatransfer.SystemFlavorMap.getFlavorsForNatives(java.lang.String[]),returns a map of the specified string natives to their most preferred dataflavor.
java.awt.datatransfer.SystemFlavorMap.getNativesForFlavor(java.awt.datatransfer.DataFlavor),returns a list of string natives to which the specified dataflavor can be translated by the data transfer subsystem.
java.awt.datatransfer.SystemFlavorMap.getNativesForFlavors(java.awt.datatransfer.DataFlavor[]),returns a map of the specified dataflavors to their most preferred string native.
java.awt.datatransfer.SystemFlavorMap.isJavaMIMEType(java.lang.String),returns whether the specified string is an encoded java mime type.
"java.awt.datatransfer.SystemFlavorMap.setFlavorsForNative(java.lang.String,java.awt.datatransfer.DataFlavor[])","discards the current mappings for the specified string native, and creates new mappings to the specified dataflavors."
"java.awt.datatransfer.SystemFlavorMap.setNativesForFlavor(java.awt.datatransfer.DataFlavor,java.lang.String[])","discards the current mappings for the specified dataflavor and all dataflavors equal to the specified dataflavor, and creates new mappings to the specified string natives."
java.awt.dnd.Autoscroll.autoscroll(java.awt.Point),notify the component to autoscroll.
java.awt.dnd.Autoscroll.getAutoscrollInsets(),this method returns the insets describing the autoscrolling region or border relative to the geometry of the implementing component.
java.awt.dnd.DragGestureListener.dragGestureRecognized(java.awt.dnd.DragGestureEvent),this method is invoked by the draggesturerecognizer when the draggesturerecognizer detects a platform-dependent drag initiating gesture.
java.awt.dnd.DragSourceListener.dragDropEnd(java.awt.dnd.DragSourceDropEvent),this method is invoked to signify that the drag and drop operation is complete.
java.awt.dnd.DragSourceListener.dragEnter(java.awt.dnd.DragSourceDragEvent),called as the cursor's hotspot enters a platform-dependent drop site.
java.awt.dnd.DragSourceListener.dragExit(java.awt.dnd.DragSourceEvent),called as the cursor's hotspot exits a platform-dependent drop site.
java.awt.dnd.DragSourceListener.dragOver(java.awt.dnd.DragSourceDragEvent),called as the cursor's hotspot moves over a platform-dependent drop site.
java.awt.dnd.DragSourceListener.dropActionChanged(java.awt.dnd.DragSourceDragEvent),called when the user has modified the drop gesture.
java.awt.dnd.DragSourceMotionListener.dragMouseMoved(java.awt.dnd.DragSourceDragEvent),called whenever the mouse is moved during a drag operation.
java.awt.dnd.DropTargetListener.dragEnter(java.awt.dnd.DropTargetDragEvent),"called while a drag operation is ongoing, when the mouse pointer enters the operable part of the drop site for the droptarget registered with this listener."
java.awt.dnd.DropTargetListener.dragExit(java.awt.dnd.DropTargetEvent),"called while a drag operation is ongoing, when the mouse pointer has exited the operable part of the drop site for the droptarget registered with this listener."
java.awt.dnd.DropTargetListener.dragOver(java.awt.dnd.DropTargetDragEvent),"called when a drag operation is ongoing, while the mouse pointer is still over the operable part of the drop site for the droptarget registered with this listener."
java.awt.dnd.DropTargetListener.drop(java.awt.dnd.DropTargetDropEvent),called when the drag operation has terminated with a drop on the operable part of the drop site for the droptarget registered with this listener.
java.awt.dnd.DropTargetListener.dropActionChanged(java.awt.dnd.DropTargetDragEvent),called if the user has modified the current drop gesture.
java.awt.dnd.DragGestureEvent.getComponent(),returns the component associated with this draggestureevent.
java.awt.dnd.DragGestureEvent.getDragAction(),returns an int representing the action selected by the user.
java.awt.dnd.DragGestureEvent.getDragOrigin(),returns a point in the coordinates of the component over which the drag originated.
java.awt.dnd.DragGestureEvent.getDragSource(),returns the dragsource.
java.awt.dnd.DragGestureEvent.getSourceAsDragGestureRecognizer(),returns the source as a draggesturerecognizer.
java.awt.dnd.DragGestureEvent.getTriggerEvent(),returns the initial event that triggered the gesture.
java.awt.dnd.DragGestureEvent.iterator(),returns an iterator for the events comprising the gesture.
"java.awt.dnd.DragGestureEvent.startDrag(java.awt.Cursor,java.awt.datatransfer.Transferable)",starts the drag operation given the cursor for this drag operation and the transferable representing the source data for this drag operation.
"java.awt.dnd.DragGestureEvent.startDrag(java.awt.Cursor,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)","starts the drag given the initial cursor to display, the transferable object, and the dragsourcelistener to use."
"java.awt.dnd.DragGestureEvent.startDrag(java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)","start the drag given the initial cursor to display, a drag image, the offset of the image, the transferable object, and the dragsourcelistener to use."
java.awt.dnd.DragGestureEvent.toArray(),returns an object array of the events comprising the drag gesture.
java.awt.dnd.DragGestureEvent.toArray(java.lang.Object[]),returns an array of the events comprising the drag gesture.
java.awt.dnd.DragGestureRecognizer.addDragGestureListener(java.awt.dnd.DragGestureListener),register a new draggesturelistener.
java.awt.dnd.DragGestureRecognizer.appendEvent(java.awt.event.InputEvent),listeners registered on the component by this recognizer shall record all events that are recognized as part of the series of events that go to comprise a drag and drop initiating gesture via this api.
"java.awt.dnd.DragGestureRecognizer.fireDragGestureRecognized(int,java.awt.Point)",notify the draggesturelistener that a drag and drop initiating gesture has occurred.
java.awt.dnd.DragGestureRecognizer.getComponent(),"this method returns the component that is to be ""observed"" by the draggesturerecognizer for drag initiating gestures."
java.awt.dnd.DragGestureRecognizer.getDragSource(),this method returns the dragsource this draggesturerecognizer will use in order to process the drag and drop operation.
java.awt.dnd.DragGestureRecognizer.getSourceActions(),this method returns an int representing the type of action(s) this drag and drop operation will support.
java.awt.dnd.DragGestureRecognizer.getTriggerEvent(),this method returns the first event in the series of events that initiated the drag and drop operation.
java.awt.dnd.DragGestureRecognizer.registerListeners(),"register this draggesturerecognizer's listeners with the component
subclasses must override this method."
java.awt.dnd.DragGestureRecognizer.removeDragGestureListener(java.awt.dnd.DragGestureListener),unregister the current draggesturelistener.
java.awt.dnd.DragGestureRecognizer.resetRecognizer(),"reset the recognizer, if its currently recognizing a gesture, ignore it."
java.awt.dnd.DragGestureRecognizer.setComponent(java.awt.Component),"set the component that the draggesturerecognizer is associated with
registerlisteners() and unregisterlisteners() are called as a side effect as appropriate."
java.awt.dnd.DragGestureRecognizer.setSourceActions(int),this method sets the permitted source drag action(s) for this drag and drop operation.
java.awt.dnd.DragGestureRecognizer.unregisterListeners(),"unregister this draggesturerecognizer's listeners with the component
subclasses must override this method."
java.awt.dnd.DragSource.addDragSourceListener(java.awt.dnd.DragSourceListener),adds the specified dragsourcelistener to this dragsource to receive drag source events during drag operations intiated with this dragsource.
java.awt.dnd.DragSource.addDragSourceMotionListener(java.awt.dnd.DragSourceMotionListener),adds the specified dragsourcemotionlistener to this dragsource to receive drag motion events during drag operations intiated with this dragsource.
"java.awt.dnd.DragSource.createDefaultDragGestureRecognizer(java.awt.Component,int,java.awt.dnd.DragGestureListener)","creates a new draggesturerecognizer that implements the default abstract subclass of draggesturerecognizer for this dragsource, and sets the specified component and draggesturelistener on the newly created object."
"java.awt.dnd.DragSource.createDragGestureRecognizer(java.lang.Class<T>,java.awt.Component,int,java.awt.dnd.DragGestureListener)","creates a new draggesturerecognizer that implements the specified abstract subclass of draggesturerecognizer, and sets the specified component and draggesturelistener on the newly created object."
"java.awt.dnd.DragSource.createDragSourceContext(java.awt.dnd.peer.DragSourceContextPeer,java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)",creates the dragsourcecontext to handle the current drag operation.
java.awt.dnd.DragSource.getDefaultDragSource(),gets the dragsource object associated with the underlying platform.
java.awt.dnd.DragSource.getDragSourceListeners(),gets all the dragsourcelisteners registered with this dragsource.
java.awt.dnd.DragSource.getDragSourceMotionListeners(),gets all of the dragsourcemotionlisteners registered with this dragsource.
java.awt.dnd.DragSource.getDragThreshold(),returns the drag gesture motion threshold.
java.awt.dnd.DragSource.getFlavorMap(),this method returns the flavormap for this dragsource.
java.awt.dnd.DragSource.getListeners(java.lang.Class<T>),gets all the objects currently registered as foolisteners upon this dragsource.
java.awt.dnd.DragSource.isDragImageSupported(),reports whether or not drag image support is available on the underlying platform.
java.awt.dnd.DragSource.removeDragSourceListener(java.awt.dnd.DragSourceListener),removes the specified dragsourcelistener from this dragsource.
java.awt.dnd.DragSource.removeDragSourceMotionListener(java.awt.dnd.DragSourceMotionListener),removes the specified dragsourcemotionlistener from this dragsource.
"java.awt.dnd.DragSource.startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener,java.awt.datatransfer.FlavorMap)","start a drag, given the draggestureevent that initiated the drag, the initial cursor to use, the image to drag, the offset of the image origin from the hotspot of the cursor at the instant of the trigger, the transferable subject data of the drag, the dragsourcelistener, and the flavormap."
"java.awt.dnd.DragSource.startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener,java.awt.datatransfer.FlavorMap)","start a drag, given the draggestureevent that initiated the drag, the initial cursor to use, the transferable subject data of the drag, the dragsourcelistener, and the flavormap."
"java.awt.dnd.DragSource.startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)","start a drag, given the draggestureevent that initiated the drag, the initial cursor to use, the image to drag, the offset of the image origin from the hotspot of the cursor at the instant of the trigger, the subject data of the drag, and the dragsourcelistener."
"java.awt.dnd.DragSource.startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)","start a drag, given the draggestureevent that initiated the drag, the initial cursor to use, the transferable subject data of the drag, and the dragsourcelistener."
java.awt.dnd.DragSourceAdapter.dragDropEnd(java.awt.dnd.DragSourceDropEvent),this method is invoked to signify that the drag and drop operation is complete.
java.awt.dnd.DragSourceAdapter.dragEnter(java.awt.dnd.DragSourceDragEvent),called as the cursor's hotspot enters a platform-dependent drop site.
java.awt.dnd.DragSourceAdapter.dragExit(java.awt.dnd.DragSourceEvent),called as the cursor's hotspot exits a platform-dependent drop site.
java.awt.dnd.DragSourceAdapter.dragMouseMoved(java.awt.dnd.DragSourceDragEvent),called whenever the mouse is moved during a drag operation.
java.awt.dnd.DragSourceAdapter.dragOver(java.awt.dnd.DragSourceDragEvent),called as the cursor's hotspot moves over a platform-dependent drop site.
java.awt.dnd.DragSourceAdapter.dropActionChanged(java.awt.dnd.DragSourceDragEvent),called when the user has modified the drop gesture.
java.awt.dnd.DragSourceContext.addDragSourceListener(java.awt.dnd.DragSourceListener),add a dragsourcelistener to this dragsourcecontext if one has not already been added.
java.awt.dnd.DragSourceContext.dragDropEnd(java.awt.dnd.DragSourceDropEvent),"calls dragdropend on the dragsourcelisteners registered with this dragsourcecontext and with the associated dragsource, and passes them the specified dragsourcedropevent."
java.awt.dnd.DragSourceContext.dragEnter(java.awt.dnd.DragSourceDragEvent),"calls dragenter on the dragsourcelisteners registered with this dragsourcecontext and with the associated dragsource, and passes them the specified dragsourcedragevent."
java.awt.dnd.DragSourceContext.dragExit(java.awt.dnd.DragSourceEvent),"calls dragexit on the dragsourcelisteners registered with this dragsourcecontext and with the associated dragsource, and passes them the specified dragsourceevent."
java.awt.dnd.DragSourceContext.dragMouseMoved(java.awt.dnd.DragSourceDragEvent),"calls dragmousemoved on the dragsourcemotionlisteners registered with the dragsource associated with this dragsourcecontext, and them passes the specified dragsourcedragevent."
java.awt.dnd.DragSourceContext.dragOver(java.awt.dnd.DragSourceDragEvent),"calls dragover on the dragsourcelisteners registered with this dragsourcecontext and with the associated dragsource, and passes them the specified dragsourcedragevent."
java.awt.dnd.DragSourceContext.dropActionChanged(java.awt.dnd.DragSourceDragEvent),"calls dropactionchanged on the dragsourcelisteners registered with this dragsourcecontext and with the associated dragsource, and passes them the specified dragsourcedragevent."
java.awt.dnd.DragSourceContext.getComponent(),returns the component associated with this dragsourcecontext.
java.awt.dnd.DragSourceContext.getCursor(),returns the current drag cursor.
java.awt.dnd.DragSourceContext.getDragSource(),returns the dragsource that instantiated this dragsourcecontext.
java.awt.dnd.DragSourceContext.getSourceActions(),returns a bitwise mask of dndconstants that represent the set of drop actions supported by the drag source for the drag operation associated with this dragsourcecontext.
java.awt.dnd.DragSourceContext.getTransferable(),returns the transferable associated with this dragsourcecontext.
java.awt.dnd.DragSourceContext.getTrigger(),returns the draggestureevent that initially triggered the drag.
java.awt.dnd.DragSourceContext.removeDragSourceListener(java.awt.dnd.DragSourceListener),removes the specified dragsourcelistener from this dragsourcecontext.
java.awt.dnd.DragSourceContext.setCursor(java.awt.Cursor),sets the cursor for this drag operation to the specified cursor.
java.awt.dnd.DragSourceContext.transferablesFlavorsChanged(),notifies the peer that the transferable's dataflavors have changed.
"java.awt.dnd.DragSourceContext.updateCurrentCursor(int,int,int)","if the default drag cursor behavior is active, this method sets the default drag cursor for the specified actions supported by the drag source, the drop target action, and status, otherwise this method does nothing."
java.awt.dnd.DragSourceDragEvent.getDropAction(),this method returns the logical intersection of the target drop action and the set of drop actions supported by the drag source.
java.awt.dnd.DragSourceDragEvent.getGestureModifiers(),this method returns an int representing the current state of the input device modifiers associated with the user's gesture.
java.awt.dnd.DragSourceDragEvent.getGestureModifiersEx(),this method returns an int representing the current state of the input device extended modifiers associated with the user's gesture.
java.awt.dnd.DragSourceDragEvent.getTargetActions(),this method returns the target drop action.
java.awt.dnd.DragSourceDragEvent.getUserAction(),this method returns the user drop action.
java.awt.dnd.DragSourceDropEvent.getDropAction(),this method returns an int representing the action performed by the target on the subject of the drop.
java.awt.dnd.DragSourceDropEvent.getDropSuccess(),this method returns a boolean indicating if the drop was successful.
java.awt.dnd.DragSourceEvent.getDragSourceContext(),this method returns the dragsourcecontext that originated the event.
java.awt.dnd.DragSourceEvent.getLocation(),"this method returns a point indicating the cursor location in screen coordinates at the moment this event occurred, or null if the cursor location is not specified for this event."
java.awt.dnd.DragSourceEvent.getX(),"this method returns the horizontal coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event."
java.awt.dnd.DragSourceEvent.getY(),"this method returns the vertical coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event."
java.awt.dnd.DropTarget.addDropTargetListener(java.awt.dnd.DropTargetListener),adds a new droptargetlistener (unicast source).
java.awt.dnd.DropTarget.addNotify(java.awt.peer.ComponentPeer),"notify the droptarget that it has been associated with a component
this method is usually called from java."
java.awt.dnd.DropTarget.clearAutoscroll(),clear autoscrolling.
"java.awt.dnd.DropTarget.createDropTargetAutoScroller(java.awt.Component,java.awt.Point)",create an embedded autoscroller.
java.awt.dnd.DropTarget.createDropTargetContext(),creates the droptargetcontext associated with this droptarget.
java.awt.dnd.DropTarget.dragEnter(java.awt.dnd.DropTargetDragEvent),calls dragenter on the registered droptargetlistener and passes it the specified droptargetdragevent.
java.awt.dnd.DropTarget.dragExit(java.awt.dnd.DropTargetEvent),calls dragexit on the registered droptargetlistener and passes it the specified droptargetevent.
java.awt.dnd.DropTarget.dragOver(java.awt.dnd.DropTargetDragEvent),calls dragover on the registered droptargetlistener and passes it the specified droptargetdragevent.
java.awt.dnd.DropTarget.drop(java.awt.dnd.DropTargetDropEvent),calls drop on the registered droptargetlistener and passes it the specified droptargetdropevent if this droptarget is active.
java.awt.dnd.DropTarget.dropActionChanged(java.awt.dnd.DropTargetDragEvent),calls dropactionchanged on the registered droptargetlistener and passes it the specified droptargetdragevent.
java.awt.dnd.DropTarget.getComponent(),gets the component associated with this droptarget.
java.awt.dnd.DropTarget.getDefaultActions(),gets an int representing the current action(s) supported by this droptarget.
java.awt.dnd.DropTarget.getDropTargetContext(),gets the droptargetcontext associated with this droptarget.
java.awt.dnd.DropTarget.getFlavorMap(),gets the flavormap associated with this droptarget.
java.awt.dnd.DropTarget.initializeAutoscrolling(java.awt.Point),initialize autoscrolling.
java.awt.dnd.DropTarget.isActive(),reports whether or not this droptarget is currently active (ready to accept drops).
java.awt.dnd.DropTarget.removeDropTargetListener(java.awt.dnd.DropTargetListener),removes the current droptargetlistener (unicast source).
java.awt.dnd.DropTarget.removeNotify(java.awt.peer.ComponentPeer),"notify the droptarget that it has been disassociated from a component
this method is usually called from java."
java.awt.dnd.DropTarget.setActive(boolean),"sets the droptarget active if true, inactive if false."
java.awt.dnd.DropTarget.setComponent(java.awt.Component),"note: this interface is required to permit the safe association of a droptarget with a component in one of two ways, either: component."
java.awt.dnd.DropTarget.setDefaultActions(int),sets the default acceptable actions for this droptarget.
java.awt.dnd.DropTarget.setFlavorMap(java.awt.datatransfer.FlavorMap),sets the flavormap associated with this droptarget.
java.awt.dnd.DropTarget.updateAutoscroll(java.awt.Point),update autoscrolling with current cursor location.
java.awt.dnd.DropTarget.DropTargetAutoScroller.actionPerformed(java.awt.event.ActionEvent),cause autoscroll to occur.
java.awt.dnd.DropTarget.DropTargetAutoScroller.stop(),cause autoscrolling to stop.
java.awt.dnd.DropTarget.DropTargetAutoScroller.updateLocation(java.awt.Point),cause autoscroll to occur.
java.awt.dnd.DropTargetAdapter.dragEnter(java.awt.dnd.DropTargetDragEvent),"called while a drag operation is ongoing, when the mouse pointer enters the operable part of the drop site for the droptarget registered with this listener."
java.awt.dnd.DropTargetAdapter.dragExit(java.awt.dnd.DropTargetEvent),"called while a drag operation is ongoing, when the mouse pointer has exited the operable part of the drop site for the droptarget registered with this listener."
java.awt.dnd.DropTargetAdapter.dragOver(java.awt.dnd.DropTargetDragEvent),"called when a drag operation is ongoing, while the mouse pointer is still over the operable part of the drop site for the droptarget registered with this listener."
java.awt.dnd.DropTargetAdapter.dropActionChanged(java.awt.dnd.DropTargetDragEvent),called if the user has modified the current drop gesture.
java.awt.dnd.DropTargetContext.acceptDrag(int),accept the drag.
java.awt.dnd.DropTargetContext.acceptDrop(int),called to signal that the drop is acceptable using the specified operation.
java.awt.dnd.DropTargetContext.addNotify(java.awt.dnd.peer.DropTargetContextPeer),called when associated with the droptargetcontextpeer.
"java.awt.dnd.DropTargetContext.createTransferableProxy(java.awt.datatransfer.Transferable,boolean)",creates a transferableproxy to proxy for the specified transferable.
java.awt.dnd.DropTargetContext.dropComplete(boolean),this method signals that the drop is completed and if it was successful or not.
java.awt.dnd.DropTargetContext.getComponent(),this method returns the component associated with this droptargetcontext.
java.awt.dnd.DropTargetContext.getCurrentDataFlavors(),get the available dataflavors of the transferable operand of this operation.
java.awt.dnd.DropTargetContext.getCurrentDataFlavorsAsList(),this method returns a the currently available dataflavors of the transferable operand as a java.
java.awt.dnd.DropTargetContext.getDropTarget(),this method returns the droptarget associated with this droptargetcontext.
java.awt.dnd.DropTargetContext.getTargetActions(),this method returns an int representing the current actions this droptarget will accept.
java.awt.dnd.DropTargetContext.getTransferable(),get the transferable (proxy) operand of this operation.
java.awt.dnd.DropTargetContext.isDataFlavorSupported(java.awt.datatransfer.DataFlavor),this method returns a boolean indicating if the given dataflavor is supported by this droptargetcontext.
java.awt.dnd.DropTargetContext.rejectDrag(),reject the drag.
java.awt.dnd.DropTargetContext.rejectDrop(),called to signal that the drop is unacceptable.
java.awt.dnd.DropTargetContext.removeNotify(),called when disassociated with the droptargetcontextpeer.
java.awt.dnd.DropTargetContext.setTargetActions(int),this method sets the current actions acceptable to this droptarget.
java.awt.dnd.DropTargetDragEvent.acceptDrag(int),accepts the drag.
java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavors(),this method returns the current dataflavors from the droptargetcontext.
java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavorsAsList(),this method returns the current dataflavors as a java.
java.awt.dnd.DropTargetDragEvent.getDropAction(),this method returns the user drop action.
java.awt.dnd.DropTargetDragEvent.getLocation(),this method returns a point indicating the cursor's current location within the component's coordinates.
java.awt.dnd.DropTargetDragEvent.getSourceActions(),this method returns the source drop actions.
java.awt.dnd.DropTargetDragEvent.getTransferable(),this method returns the transferable object that represents the data associated with the current drag operation.
java.awt.dnd.DropTargetDragEvent.isDataFlavorSupported(java.awt.datatransfer.DataFlavor),this method returns a boolean indicating if the specified dataflavor is supported.
java.awt.dnd.DropTargetDragEvent.rejectDrag(),rejects the drag as a result of examining either the dropaction or the available dataflavor types.
java.awt.dnd.DropTargetDropEvent.acceptDrop(int),"accept the drop, using the specified action."
java.awt.dnd.DropTargetDropEvent.dropComplete(boolean),this method notifies the dragsource that the drop transfer(s) are completed.
java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavors(),this method returns the current dataflavors.
java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavorsAsList(),this method returns the currently available dataflavors as a java.
java.awt.dnd.DropTargetDropEvent.getDropAction(),this method returns the user drop action.
java.awt.dnd.DropTargetDropEvent.getLocation(),this method returns a point indicating the cursor's current location in the component's coordinates.
java.awt.dnd.DropTargetDropEvent.getSourceActions(),this method returns the source drop actions.
java.awt.dnd.DropTargetDropEvent.getTransferable(),this method returns the transferable object associated with the drop.
java.awt.dnd.DropTargetDropEvent.isDataFlavorSupported(java.awt.datatransfer.DataFlavor),this method returns a boolean indicating if the specified dataflavor is available from the source.
java.awt.dnd.DropTargetDropEvent.isLocalTransfer(),this method returns an int indicating if the source is in the same jvm as the target.
java.awt.dnd.DropTargetDropEvent.rejectDrop(),reject the drop.
java.awt.dnd.DropTargetEvent.getDropTargetContext(),this method returns the droptargetcontext associated with this droptargetevent.
java.awt.dnd.MouseDragGestureRecognizer.mouseClicked(java.awt.event.MouseEvent),invoked when the mouse has been clicked on a component.
java.awt.dnd.MouseDragGestureRecognizer.mouseDragged(java.awt.event.MouseEvent),invoked when a mouse button is pressed on a component.
java.awt.dnd.MouseDragGestureRecognizer.mouseEntered(java.awt.event.MouseEvent),invoked when the mouse enters a component.
java.awt.dnd.MouseDragGestureRecognizer.mouseExited(java.awt.event.MouseEvent),invoked when the mouse exits a component.
java.awt.dnd.MouseDragGestureRecognizer.mouseMoved(java.awt.event.MouseEvent),invoked when the mouse button has been moved on a component (with no buttons no down).
java.awt.dnd.MouseDragGestureRecognizer.mousePressed(java.awt.event.MouseEvent),invoked when a mouse button has been pressed on a component.
java.awt.dnd.MouseDragGestureRecognizer.mouseReleased(java.awt.event.MouseEvent),invoked when a mouse button has been released on a component.
java.awt.dnd.MouseDragGestureRecognizer.registerListeners(),register this draggesturerecognizer's listeners with the component.
java.awt.dnd.MouseDragGestureRecognizer.unregisterListeners(),"unregister this draggesturerecognizer's listeners with the component
subclasses must override this method."
java.awt.event.ActionListener.actionPerformed(java.awt.event.ActionEvent),invoked when an action occurs.
java.awt.event.AdjustmentListener.adjustmentValueChanged(java.awt.event.AdjustmentEvent),invoked when the value of the adjustable has changed.
java.awt.event.AWTEventListener.eventDispatched(java.awt.AWTEvent),invoked when an event is dispatched in the awt.
java.awt.event.ComponentListener.componentHidden(java.awt.event.ComponentEvent),invoked when the component has been made invisible.
java.awt.event.ComponentListener.componentMoved(java.awt.event.ComponentEvent),invoked when the component's position changes.
java.awt.event.ComponentListener.componentResized(java.awt.event.ComponentEvent),invoked when the component's size changes.
java.awt.event.ComponentListener.componentShown(java.awt.event.ComponentEvent),invoked when the component has been made visible.
java.awt.event.ContainerListener.componentAdded(java.awt.event.ContainerEvent),invoked when a component has been added to the container.
java.awt.event.ContainerListener.componentRemoved(java.awt.event.ContainerEvent),invoked when a component has been removed from the container.
java.awt.event.FocusListener.focusGained(java.awt.event.FocusEvent),invoked when a component gains the keyboard focus.
java.awt.event.FocusListener.focusLost(java.awt.event.FocusEvent),invoked when a component loses the keyboard focus.
java.awt.event.HierarchyBoundsListener.ancestorMoved(java.awt.event.HierarchyEvent),called when an ancestor of the source is moved.
java.awt.event.HierarchyBoundsListener.ancestorResized(java.awt.event.HierarchyEvent),called when an ancestor of the source is resized.
java.awt.event.HierarchyListener.hierarchyChanged(java.awt.event.HierarchyEvent),called when the hierarchy has been changed.
java.awt.event.InputMethodListener.caretPositionChanged(java.awt.event.InputMethodEvent),invoked when the caret within composed text has changed.
java.awt.event.InputMethodListener.inputMethodTextChanged(java.awt.event.InputMethodEvent),invoked when the text entered through an input method has changed.
java.awt.event.ItemListener.itemStateChanged(java.awt.event.ItemEvent),invoked when an item has been selected or deselected by the user.
java.awt.event.KeyListener.keyPressed(java.awt.event.KeyEvent),invoked when a key has been pressed.
java.awt.event.KeyListener.keyReleased(java.awt.event.KeyEvent),invoked when a key has been released.
java.awt.event.KeyListener.keyTyped(java.awt.event.KeyEvent),invoked when a key has been typed.
java.awt.event.MouseListener.mouseClicked(java.awt.event.MouseEvent),invoked when the mouse button has been clicked (pressed and released) on a component.
java.awt.event.MouseListener.mouseEntered(java.awt.event.MouseEvent),invoked when the mouse enters a component.
java.awt.event.MouseListener.mouseExited(java.awt.event.MouseEvent),invoked when the mouse exits a component.
java.awt.event.MouseListener.mousePressed(java.awt.event.MouseEvent),invoked when a mouse button has been pressed on a component.
java.awt.event.MouseListener.mouseReleased(java.awt.event.MouseEvent),invoked when a mouse button has been released on a component.
java.awt.event.MouseMotionListener.mouseDragged(java.awt.event.MouseEvent),invoked when a mouse button is pressed on a component and then dragged.
java.awt.event.MouseMotionListener.mouseMoved(java.awt.event.MouseEvent),invoked when the mouse cursor has been moved onto a component but no buttons have been pushed.
java.awt.event.MouseWheelListener.mouseWheelMoved(java.awt.event.MouseWheelEvent),invoked when the mouse wheel is rotated.
java.awt.event.TextListener.textValueChanged(java.awt.event.TextEvent),invoked when the value of the text has changed.
java.awt.event.WindowFocusListener.windowGainedFocus(java.awt.event.WindowEvent),"invoked when the window is set to be the focused window, which means that the window, or one of its subcomponents, will receive keyboard events."
java.awt.event.WindowFocusListener.windowLostFocus(java.awt.event.WindowEvent),"invoked when the window is no longer the focused window, which means that keyboard events will no longer be delivered to the window or any of its subcomponents."
java.awt.event.WindowListener.windowActivated(java.awt.event.WindowEvent),invoked when the window is set to be the active window.
java.awt.event.WindowListener.windowClosed(java.awt.event.WindowEvent),invoked when a window has been closed as the result of calling dispose on the window.
java.awt.event.WindowListener.windowClosing(java.awt.event.WindowEvent),invoked when the user attempts to close the window from the window's system menu.
java.awt.event.WindowListener.windowDeactivated(java.awt.event.WindowEvent),invoked when a window is no longer the active window.
java.awt.event.WindowListener.windowDeiconified(java.awt.event.WindowEvent),invoked when a window is changed from a minimized to a normal state.
java.awt.event.WindowListener.windowIconified(java.awt.event.WindowEvent),invoked when a window is changed from a normal to a minimized state.
java.awt.event.WindowListener.windowOpened(java.awt.event.WindowEvent),invoked the first time a window is made visible.
java.awt.event.WindowStateListener.windowStateChanged(java.awt.event.WindowEvent),invoked when window state is changed.
java.awt.event.ActionEvent.getActionCommand(),returns the command string associated with this action.
java.awt.event.ActionEvent.getModifiers(),returns the modifier keys held down during this action event.
java.awt.event.ActionEvent.getWhen(),returns the timestamp of when this event occurred.
java.awt.event.ActionEvent.paramString(),returns a parameter string identifying this action event.
java.awt.event.AdjustmentEvent.getAdjustable(),returns the adjustable object where this event originated.
java.awt.event.AdjustmentEvent.getAdjustmentType(),returns the type of adjustment which caused the value changed event.
java.awt.event.AdjustmentEvent.getValue(),returns the current value in the adjustment event.
java.awt.event.AdjustmentEvent.getValueIsAdjusting(),returns true if this is one of multiple adjustment events.
java.awt.event.AWTEventListenerProxy.eventDispatched(java.awt.AWTEvent),forwards the awt event to the listener delegate.
java.awt.event.AWTEventListenerProxy.getEventMask(),returns the event mask associated with the listener.
java.awt.event.ComponentAdapter.componentHidden(java.awt.event.ComponentEvent),invoked when the component has been made invisible.
java.awt.event.ComponentAdapter.componentMoved(java.awt.event.ComponentEvent),invoked when the component's position changes.
java.awt.event.ComponentAdapter.componentResized(java.awt.event.ComponentEvent),invoked when the component's size changes.
java.awt.event.ComponentAdapter.componentShown(java.awt.event.ComponentEvent),invoked when the component has been made visible.
java.awt.event.ComponentEvent.getComponent(),returns the originator of the event.
java.awt.event.ComponentEvent.paramString(),returns a parameter string identifying this event.
java.awt.event.ContainerAdapter.componentAdded(java.awt.event.ContainerEvent),invoked when a component has been added to the container.
java.awt.event.ContainerAdapter.componentRemoved(java.awt.event.ContainerEvent),invoked when a component has been removed from the container.
java.awt.event.ContainerEvent.getChild(),returns the component that was affected by the event.
java.awt.event.ContainerEvent.getContainer(),returns the originator of the event.
java.awt.event.ContainerEvent.paramString(),returns a parameter string identifying this event.
java.awt.event.FocusAdapter.focusGained(java.awt.event.FocusEvent),invoked when a component gains the keyboard focus.
java.awt.event.FocusAdapter.focusLost(java.awt.event.FocusEvent),invoked when a component loses the keyboard focus.
java.awt.event.FocusEvent.getOppositeComponent(),returns the other component involved in this focus change.
java.awt.event.FocusEvent.isTemporary(),identifies the focus change event as temporary or permanent.
java.awt.event.FocusEvent.paramString(),returns a parameter string identifying this event.
java.awt.event.HierarchyBoundsAdapter.ancestorMoved(java.awt.event.HierarchyEvent),called when an ancestor of the source is moved.
java.awt.event.HierarchyBoundsAdapter.ancestorResized(java.awt.event.HierarchyEvent),called when an ancestor of the source is resized.
java.awt.event.HierarchyEvent.getChanged(),returns the component at the top of the hierarchy which was changed.
java.awt.event.HierarchyEvent.getChangedParent(),returns the parent of the component returned by getchanged().
java.awt.event.HierarchyEvent.getChangeFlags(),returns a bitmask which indicates the type(s) of hierarchy_changed events represented in this event object.
java.awt.event.HierarchyEvent.getComponent(),returns the originator of the event.
java.awt.event.HierarchyEvent.paramString(),returns a parameter string identifying this event.
java.awt.event.InputEvent.consume(),consumes this event so that it will not be processed in the default manner by the source which originated it.
java.awt.event.InputEvent.getMaskForButton(int),a method to obtain a mask for any existing mouse button.
java.awt.event.InputEvent.getModifiers(),returns the modifier mask for this event.
java.awt.event.InputEvent.getModifiersEx(),returns the extended modifier mask for this event.
java.awt.event.InputEvent.getModifiersExText(int),"returns a string describing the extended modifier keys and mouse buttons, such as ""shift"", ""button1"", or ""ctrl+shift""."
java.awt.event.InputEvent.getWhen(),"returns the difference in milliseconds between the timestamp of when this event occurred and midnight, january 1, 1970 utc."
java.awt.event.InputEvent.isAltDown(),returns whether or not the alt modifier is down on this event.
java.awt.event.InputEvent.isAltGraphDown(),returns whether or not the altgraph modifier is down on this event.
java.awt.event.InputEvent.isConsumed(),returns whether or not this event has been consumed.
java.awt.event.InputEvent.isControlDown(),returns whether or not the control modifier is down on this event.
java.awt.event.InputEvent.isMetaDown(),returns whether or not the meta modifier is down on this event.
java.awt.event.InputEvent.isShiftDown(),returns whether or not the shift modifier is down on this event.
java.awt.event.InputMethodEvent.consume(),consumes this event so that it will not be processed in the default manner by the source which originated it.
java.awt.event.InputMethodEvent.getCaret(),gets the caret.
java.awt.event.InputMethodEvent.getCommittedCharacterCount(),gets the number of committed characters in the text.
java.awt.event.InputMethodEvent.getText(),gets the combined committed and composed text.
java.awt.event.InputMethodEvent.getVisiblePosition(),gets the position that's most important to be visible.
java.awt.event.InputMethodEvent.getWhen(),returns the time stamp of when this event occurred.
java.awt.event.InputMethodEvent.isConsumed(),returns whether or not this event has been consumed.
java.awt.event.InputMethodEvent.paramString(),returns a parameter string identifying this event.
java.awt.event.InvocationEvent.dispatch(),executes the runnable's run() method and notifies the notifier (if any) when run() has returned or thrown an exception.
java.awt.event.InvocationEvent.getException(),returns any exception caught while executing the runnable's run() method.
java.awt.event.InvocationEvent.getThrowable(),returns any throwable caught while executing the runnable's run() method.
java.awt.event.InvocationEvent.getWhen(),returns the timestamp of when this event occurred.
java.awt.event.InvocationEvent.isDispatched(),"returns true if the event is dispatched or any exception is thrown while dispatching, false otherwise."
java.awt.event.InvocationEvent.paramString(),returns a parameter string identifying this event.
java.awt.event.ItemEvent.getItem(),returns the item affected by the event.
java.awt.event.ItemEvent.getItemSelectable(),returns the originator of the event.
java.awt.event.ItemEvent.getStateChange(),returns the type of state change (selected or deselected).
java.awt.event.ItemEvent.paramString(),returns a parameter string identifying this item event.
java.awt.event.KeyAdapter.keyPressed(java.awt.event.KeyEvent),invoked when a key has been pressed.
java.awt.event.KeyAdapter.keyReleased(java.awt.event.KeyEvent),invoked when a key has been released.
java.awt.event.KeyAdapter.keyTyped(java.awt.event.KeyEvent),invoked when a key has been typed.
java.awt.event.KeyEvent.getExtendedKeyCode(),returns an extended key code for the event.
java.awt.event.KeyEvent.getExtendedKeyCodeForChar(int),returns an extended key code for a unicode character.
java.awt.event.KeyEvent.getKeyChar(),returns the character associated with the key in this event.
java.awt.event.KeyEvent.getKeyCode(),returns the integer keycode associated with the key in this event.
java.awt.event.KeyEvent.getKeyLocation(),returns the location of the key that originated this key event.
java.awt.event.KeyEvent.getKeyModifiersText(int),"returns a string describing the modifier key(s), such as ""shift"", or ""ctrl+shift""."
java.awt.event.KeyEvent.getKeyText(int),"returns a string describing the keycode, such as ""home"", ""f1"" or ""a""."
java.awt.event.KeyEvent.isActionKey(),"returns whether the key in this event is an ""action"" key."
java.awt.event.KeyEvent.paramString(),returns a parameter string identifying this event.
java.awt.event.KeyEvent.setKeyChar(char),set the keychar value to indicate a logical character.
java.awt.event.KeyEvent.setKeyCode(int),set the keycode value to indicate a physical key.
java.awt.event.MouseAdapter.mouseClicked(java.awt.event.MouseEvent),invoked when the mouse button has been clicked (pressed and released) on a component.
java.awt.event.MouseAdapter.mouseDragged(java.awt.event.MouseEvent),invoked when a mouse button is pressed on a component and then dragged.
java.awt.event.MouseAdapter.mouseEntered(java.awt.event.MouseEvent),invoked when the mouse enters a component.
java.awt.event.MouseAdapter.mouseExited(java.awt.event.MouseEvent),invoked when the mouse exits a component.
java.awt.event.MouseAdapter.mouseMoved(java.awt.event.MouseEvent),invoked when the mouse cursor has been moved onto a component but no buttons have been pushed.
java.awt.event.MouseAdapter.mousePressed(java.awt.event.MouseEvent),invoked when a mouse button has been pressed on a component.
java.awt.event.MouseAdapter.mouseReleased(java.awt.event.MouseEvent),invoked when a mouse button has been released on a component.
java.awt.event.MouseAdapter.mouseWheelMoved(java.awt.event.MouseWheelEvent),invoked when the mouse wheel is rotated.
java.awt.event.MouseEvent.getButton(),"returns which, if any, of the mouse buttons has changed state."
java.awt.event.MouseEvent.getClickCount(),returns the number of mouse clicks associated with this event.
java.awt.event.MouseEvent.getLocationOnScreen(),"returns the absolute x, y position of the event."
java.awt.event.MouseEvent.getModifiersEx(),returns the extended modifier mask for this event.
java.awt.event.MouseEvent.getMouseModifiersText(int),"returns a string instance describing the modifier keys and mouse buttons that were down during the event, such as ""shift"", or ""ctrl+shift""."
java.awt.event.MouseEvent.getPoint(),"returns the x,y position of the event relative to the source component."
java.awt.event.MouseEvent.getX(),returns the horizontal x position of the event relative to the source component.
java.awt.event.MouseEvent.getXOnScreen(),returns the absolute horizontal x position of the event.
java.awt.event.MouseEvent.getY(),returns the vertical y position of the event relative to the source component.
java.awt.event.MouseEvent.getYOnScreen(),returns the absolute vertical y position of the event.
java.awt.event.MouseEvent.isPopupTrigger(),returns whether or not this mouse event is the popup menu trigger event for the platform.
java.awt.event.MouseEvent.paramString(),returns a parameter string identifying this event.
"java.awt.event.MouseEvent.translatePoint(int,int)",translates the event's coordinates to a new position by adding specified x (horizontal) and y (vertical) offsets.
java.awt.event.MouseMotionAdapter.mouseDragged(java.awt.event.MouseEvent),invoked when a mouse button is pressed on a component and then dragged.
java.awt.event.MouseMotionAdapter.mouseMoved(java.awt.event.MouseEvent),invoked when the mouse button has been moved on a component (with no buttons no down).
java.awt.event.MouseWheelEvent.getPreciseWheelRotation(),"returns the number of ""clicks"" the mouse wheel was rotated, as a double."
java.awt.event.MouseWheelEvent.getScrollAmount(),returns the number of units that should be scrolled per click of mouse wheel rotation.
java.awt.event.MouseWheelEvent.getScrollType(),returns the type of scrolling that should take place in response to this event.
java.awt.event.MouseWheelEvent.getUnitsToScroll(),this is a convenience method to aid in the implementation of the common-case mousewheellistener - to scroll a scrollpane or jscrollpane by an amount which conforms to the platform settings.
java.awt.event.MouseWheelEvent.getWheelRotation(),"returns the number of ""clicks"" the mouse wheel was rotated, as an integer."
java.awt.event.MouseWheelEvent.paramString(),returns a parameter string identifying this event.
java.awt.event.PaintEvent.getUpdateRect(),returns the rectangle representing the area which needs to be repainted in response to this event.
java.awt.event.PaintEvent.setUpdateRect(java.awt.Rectangle),sets the rectangle representing the area which needs to be repainted in response to this event.
java.awt.event.TextEvent.paramString(),returns a parameter string identifying this text event.
java.awt.event.WindowAdapter.windowActivated(java.awt.event.WindowEvent),invoked when a window is activated.
java.awt.event.WindowAdapter.windowClosed(java.awt.event.WindowEvent),invoked when a window has been closed.
java.awt.event.WindowAdapter.windowClosing(java.awt.event.WindowEvent),invoked when a window is in the process of being closed.
java.awt.event.WindowAdapter.windowDeactivated(java.awt.event.WindowEvent),invoked when a window is de-activated.
java.awt.event.WindowAdapter.windowDeiconified(java.awt.event.WindowEvent),invoked when a window is de-iconified.
java.awt.event.WindowAdapter.windowGainedFocus(java.awt.event.WindowEvent),"invoked when the window is set to be the focused window, which means that the window, or one of its subcomponents, will receive keyboard events."
java.awt.event.WindowAdapter.windowIconified(java.awt.event.WindowEvent),invoked when a window is iconified.
java.awt.event.WindowAdapter.windowLostFocus(java.awt.event.WindowEvent),"invoked when the window is no longer the focused window, which means that keyboard events will no longer be delivered to the window or any of its subcomponents."
java.awt.event.WindowAdapter.windowOpened(java.awt.event.WindowEvent),invoked when a window has been opened.
java.awt.event.WindowAdapter.windowStateChanged(java.awt.event.WindowEvent),invoked when a window state is changed.
java.awt.event.WindowEvent.getNewState(),for window_state_changed events returns the new state of the window.
java.awt.event.WindowEvent.getOldState(),for window_state_changed events returns the previous state of the window.
java.awt.event.WindowEvent.getOppositeWindow(),returns the other window involved in this focus or activation change.
java.awt.event.WindowEvent.getWindow(),returns the originator of the event.
java.awt.event.WindowEvent.paramString(),returns a parameter string identifying this event.
java.awt.font.MultipleMaster.deriveMMFont(float[]),creates a new instance of a multiple master font based on the design axis values contained in the specified array.
"java.awt.font.MultipleMaster.deriveMMFont(float[],float,float,float,float)",creates a new instance of a multiple master font based on detailed metric information.
java.awt.font.MultipleMaster.getDesignAxisDefaults(),returns an array of default design values for each axis.
java.awt.font.MultipleMaster.getDesignAxisNames(),returns the name for each design axis.
java.awt.font.MultipleMaster.getDesignAxisRanges(),returns an array of design limits interleaved in the form [from→to] for each axis.
java.awt.font.MultipleMaster.getNumDesignAxes(),returns the number of multiple master design controls.
java.awt.font.OpenType.getFontTable(int),returns the table as an array of bytes for a specified tag.
java.awt.font.OpenType.getFontTable(java.lang.String),returns the table as an array of bytes for a specified tag.
"java.awt.font.OpenType.getFontTable(int,int,int)",returns a subset of the table as an array of bytes for a specified tag.
"java.awt.font.OpenType.getFontTable(java.lang.String,int,int)",returns a subset of the table as an array of bytes for a specified tag.
java.awt.font.OpenType.getFontTableSize(int),returns the size of the table for a specified tag.
java.awt.font.OpenType.getFontTableSize(java.lang.String),returns the size of the table for a specified tag.
java.awt.font.OpenType.getVersion(),returns the version of the opentype font.
java.awt.font.FontRenderContext.equals(java.lang.Object),"return true if obj is an instance of fontrendercontext and has the same transform, antialiasing, and fractional metrics values as this."
java.awt.font.FontRenderContext.equals(java.awt.font.FontRenderContext),"return true if rhs has the same transform, antialiasing, and fractional metrics values as this."
java.awt.font.FontRenderContext.getAntiAliasingHint(),return the text anti-aliasing rendering mode hint used in this fontrendercontext.
java.awt.font.FontRenderContext.getFractionalMetricsHint(),return the text fractional metrics rendering mode hint used in this fontrendercontext.
java.awt.font.FontRenderContext.getTransform(),gets the transform that is used to scale typographical points to pixels in this fontrendercontext.
java.awt.font.FontRenderContext.getTransformType(),returns the integer type of the affine transform for this fontrendercontext as specified by affinetransform.
java.awt.font.FontRenderContext.hashCode(),return a hashcode for this fontrendercontext.
java.awt.font.FontRenderContext.isAntiAliased(),returns a boolean which indicates whether or not some form of antialiasing is specified by this fontrendercontext.
java.awt.font.FontRenderContext.isTransformed(),indicates whether or not this fontrendercontext object measures text in a transformed render context.
java.awt.font.FontRenderContext.usesFractionalMetrics(),returns a boolean which whether text fractional metrics mode is used in this fontrendercontext.
java.awt.font.GlyphMetrics.getAdvance(),returns the advance of the glyph along the baseline (either horizontal or vertical).
java.awt.font.GlyphMetrics.getAdvanceX(),returns the x-component of the advance of the glyph.
java.awt.font.GlyphMetrics.getAdvanceY(),returns the y-component of the advance of the glyph.
java.awt.font.GlyphMetrics.getBounds2D(),returns the bounds of the glyph.
java.awt.font.GlyphMetrics.getLSB(),returns the left (top) side bearing of the glyph.
java.awt.font.GlyphMetrics.getRSB(),returns the right (bottom) side bearing of the glyph.
java.awt.font.GlyphMetrics.getType(),returns the raw glyph type code.
java.awt.font.GlyphMetrics.isCombining(),returns true if this is a combining glyph.
java.awt.font.GlyphMetrics.isComponent(),returns true if this is a component glyph.
java.awt.font.GlyphMetrics.isLigature(),returns true if this is a ligature glyph.
java.awt.font.GlyphMetrics.isStandard(),returns true if this is a standard glyph.
java.awt.font.GlyphMetrics.isWhitespace(),returns true if this is a whitespace glyph.
java.awt.font.GlyphVector.equals(java.awt.font.GlyphVector),tests if the specified glyphvector exactly equals this glyphvector.
java.awt.font.GlyphVector.getFont(),returns the font associated with this glyphvector.
java.awt.font.GlyphVector.getFontRenderContext(),returns the fontrendercontext associated with this glyphvector.
java.awt.font.GlyphVector.getGlyphCharIndex(int),returns the character index of the specified glyph.
"java.awt.font.GlyphVector.getGlyphCharIndices(int,int,int[])",returns the character indices of the specified glyphs.
java.awt.font.GlyphVector.getGlyphCode(int),returns the glyphcode of the specified glyph.
"java.awt.font.GlyphVector.getGlyphCodes(int,int,int[])",returns an array of glyphcodes for the specified glyphs.
java.awt.font.GlyphVector.getGlyphJustificationInfo(int),returns the justification information for the glyph at the specified index into this glyphvector.
java.awt.font.GlyphVector.getGlyphLogicalBounds(int),returns the logical bounds of the specified glyph within this glyphvector.
java.awt.font.GlyphVector.getGlyphMetrics(int),returns the metrics of the glyph at the specified index into this glyphvector.
java.awt.font.GlyphVector.getGlyphOutline(int),returns a shape whose interior corresponds to the visual representation of the specified glyph within this glyphvector.
"java.awt.font.GlyphVector.getGlyphOutline(int,float,float)","returns a shape whose interior corresponds to the visual representation of the specified glyph within this glyphvector, offset to x, y."
"java.awt.font.GlyphVector.getGlyphPixelBounds(int,java.awt.font.FontRenderContext,float,float)",returns the pixel bounds of the glyph at index when this glyphvector is rendered in a graphics with the given fontrendercontext at the given location.
java.awt.font.GlyphVector.getGlyphPosition(int),returns the position of the specified glyph relative to the origin of this glyphvector.
"java.awt.font.GlyphVector.getGlyphPositions(int,int,float[])",returns an array of glyph positions for the specified glyphs.
java.awt.font.GlyphVector.getGlyphTransform(int),returns the transform of the specified glyph within this glyphvector.
java.awt.font.GlyphVector.getGlyphVisualBounds(int),returns the visual bounds of the specified glyph within the glyphvector.
java.awt.font.GlyphVector.getLayoutFlags(),returns flags describing the global state of the glyphvector.
java.awt.font.GlyphVector.getLogicalBounds(),returns the logical bounds of this glyphvector.
java.awt.font.GlyphVector.getNumGlyphs(),returns the number of glyphs in this glyphvector.
java.awt.font.GlyphVector.getOutline(),returns a shape whose interior corresponds to the visual representation of this glyphvector.
"java.awt.font.GlyphVector.getOutline(float,float)","returns a shape whose interior corresponds to the visual representation of this glyphvector when rendered at x, y."
"java.awt.font.GlyphVector.getPixelBounds(java.awt.font.FontRenderContext,float,float)",returns the pixel bounds of this glyphvector when rendered in a graphics with the given fontrendercontext at the given location.
java.awt.font.GlyphVector.getVisualBounds(),returns the visual bounds of this glyphvector the visual bounds is the bounding box of the outline of this glyphvector.
java.awt.font.GlyphVector.performDefaultLayout(),assigns default positions to each glyph in this glyphvector.
"java.awt.font.GlyphVector.setGlyphPosition(int,java.awt.geom.Point2D)",sets the position of the specified glyph within this glyphvector.
"java.awt.font.GlyphVector.setGlyphTransform(int,java.awt.geom.AffineTransform)",sets the transform of the specified glyph within this glyphvector.
"java.awt.font.GraphicAttribute.draw(java.awt.Graphics2D,float,float)",renders this graphicattribute at the specified location.
java.awt.font.GraphicAttribute.getAdvance(),returns the advance of this graphicattribute.
java.awt.font.GraphicAttribute.getAlignment(),returns the alignment of this graphicattribute.
java.awt.font.GraphicAttribute.getAscent(),returns the ascent of this graphicattribute.
java.awt.font.GraphicAttribute.getBounds(),returns a rectangle2d that encloses all of the bits drawn by this graphicattribute relative to the rendering position.
java.awt.font.GraphicAttribute.getDescent(),returns the descent of this graphicattribute.
java.awt.font.GraphicAttribute.getJustificationInfo(),returns the justification information for this graphicattribute.
java.awt.font.GraphicAttribute.getOutline(java.awt.geom.AffineTransform),return a shape that represents the region that this graphicattribute renders.
"java.awt.font.ImageGraphicAttribute.draw(java.awt.Graphics2D,float,float)",renders this graphicattribute at the specified location.
java.awt.font.ImageGraphicAttribute.equals(java.lang.Object),compares this imagegraphicattribute to the specified object.
java.awt.font.ImageGraphicAttribute.equals(java.awt.font.ImageGraphicAttribute),compares this imagegraphicattribute to the specified imagegraphicattribute.
java.awt.font.ImageGraphicAttribute.getAdvance(),returns the advance of this imagegraphicattribute.
java.awt.font.ImageGraphicAttribute.getAscent(),returns the ascent of this imagegraphicattribute.
java.awt.font.ImageGraphicAttribute.getBounds(),"returns a rectangle2d that encloses all of the bits rendered by this imagegraphicattribute, relative to the rendering position."
java.awt.font.ImageGraphicAttribute.getDescent(),returns the descent of this imagegraphicattribute.
java.awt.font.ImageGraphicAttribute.hashCode(),returns a hashcode for this imagegraphicattribute.
"java.awt.font.LayoutPath.pathToPoint(java.awt.geom.Point2D,boolean,java.awt.geom.Point2D)",convert a location relative to the path to a point in user coordinates.
"java.awt.font.LayoutPath.pointToPath(java.awt.geom.Point2D,java.awt.geom.Point2D)",convert a point in user space to a location relative to the path.
"java.awt.font.LineBreakMeasurer.deleteChar(java.text.AttributedCharacterIterator,int)","updates this linebreakmeasurer after a single character is deleted from the text, and sets the current position to the beginning of the paragraph."
java.awt.font.LineBreakMeasurer.getPosition(),returns the current position of this linebreakmeasurer.
"java.awt.font.LineBreakMeasurer.insertChar(java.text.AttributedCharacterIterator,int)","updates this linebreakmeasurer after a single character is inserted into the text, and sets the current position to the beginning of the paragraph."
java.awt.font.LineBreakMeasurer.nextLayout(float),"returns the next layout, and updates the current position."
"java.awt.font.LineBreakMeasurer.nextLayout(float,int,boolean)","returns the next layout, and updates the current position."
java.awt.font.LineBreakMeasurer.nextOffset(float),returns the position at the end of the next layout.
"java.awt.font.LineBreakMeasurer.nextOffset(float,int,boolean)",returns the position at the end of the next layout.
java.awt.font.LineBreakMeasurer.setPosition(int),sets the current position of this linebreakmeasurer.
java.awt.font.LineMetrics.getAscent(),returns the ascent of the text.
java.awt.font.LineMetrics.getBaselineIndex(),returns the baseline index of the text.
java.awt.font.LineMetrics.getBaselineOffsets(),"returns the baseline offsets of the text, relative to the baseline of the text."
java.awt.font.LineMetrics.getDescent(),returns the descent of the text.
java.awt.font.LineMetrics.getHeight(),returns the height of the text.
java.awt.font.LineMetrics.getLeading(),returns the leading of the text.
java.awt.font.LineMetrics.getNumChars(),returns the number of characters (char values) in the text whose metrics are encapsulated by this linemetrics object.
java.awt.font.LineMetrics.getStrikethroughOffset(),returns the position of the strike-through line relative to the baseline.
java.awt.font.LineMetrics.getStrikethroughThickness(),returns the thickness of the strike-through line.
java.awt.font.LineMetrics.getUnderlineOffset(),returns the position of the underline relative to the baseline.
java.awt.font.LineMetrics.getUnderlineThickness(),returns the thickness of the underline.
java.awt.font.NumericShaper.equals(java.lang.Object),"returns true if the specified object is an instance of numericshaper and shapes identically to this one, regardless of the range representations, the bit mask or the enum."
java.awt.font.NumericShaper.getContextualShaper(int),returns a contextual shaper for the provided unicode range(s).
java.awt.font.NumericShaper.getContextualShaper(java.util.Set<java.awt.font.NumericShaper.Range>),returns a contextual shaper for the provided unicode range(s).
"java.awt.font.NumericShaper.getContextualShaper(int,int)",returns a contextual shaper for the provided unicode range(s).
"java.awt.font.NumericShaper.getContextualShaper(java.util.Set<java.awt.font.NumericShaper.Range>,java.awt.font.NumericShaper.Range)",returns a contextual shaper for the provided unicode range(s).
java.awt.font.NumericShaper.getRanges(),returns an int that ors together the values for all the ranges that will be shaped.
java.awt.font.NumericShaper.getRangeSet(),returns a set representing all the unicode ranges in this numericshaper that will be shaped.
java.awt.font.NumericShaper.getShaper(int),returns a shaper for the provided unicode range.
java.awt.font.NumericShaper.getShaper(java.awt.font.NumericShaper.Range),returns a shaper for the provided unicode range.
java.awt.font.NumericShaper.hashCode(),returns a hash code for this shaper.
java.awt.font.NumericShaper.isContextual(),returns a boolean indicating whether or not this shaper shapes contextually.
"java.awt.font.NumericShaper.shape(char[],int,int)",converts the digits in the text that occur between start and start + count.
"java.awt.font.NumericShaper.shape(char[],int,int,int)","converts the digits in the text that occur between start and start + count, using the provided context."
"java.awt.font.NumericShaper.shape(char[],int,int,java.awt.font.NumericShaper.Range)","converts the digits in the text that occur between start and start + count, using the provided context."
java.awt.font.NumericShaper.toString(),returns a string that describes this shaper.
"java.awt.font.ShapeGraphicAttribute.draw(java.awt.Graphics2D,float,float)",renders this graphicattribute at the specified location.
java.awt.font.ShapeGraphicAttribute.equals(java.lang.Object),compares this shapegraphicattribute to the specified object.
java.awt.font.ShapeGraphicAttribute.equals(java.awt.font.ShapeGraphicAttribute),compares this shapegraphicattribute to the specified shapegraphicattribute.
java.awt.font.ShapeGraphicAttribute.getAdvance(),returns the advance of this shapegraphicattribute.
java.awt.font.ShapeGraphicAttribute.getAscent(),returns the ascent of this shapegraphicattribute.
java.awt.font.ShapeGraphicAttribute.getBounds(),returns a rectangle2d that encloses all of the bits drawn by this shapegraphicattribute relative to the rendering position.
java.awt.font.ShapeGraphicAttribute.getDescent(),returns the descent of this shapegraphicattribute.
java.awt.font.ShapeGraphicAttribute.getOutline(java.awt.geom.AffineTransform),return a shape that represents the region that this shapegraphicattribute renders.
java.awt.font.ShapeGraphicAttribute.hashCode(),returns a hashcode for this shapegraphicattribute.
java.awt.font.TextAttribute.readResolve(),resolves instances being deserialized to the predefined constants.
java.awt.font.TextHitInfo.afterOffset(int),"creates a texthitinfo at the specified offset, associated with the character after the offset."
java.awt.font.TextHitInfo.beforeOffset(int),"creates a texthitinfo at the specified offset, associated with the character before the offset."
java.awt.font.TextHitInfo.equals(java.lang.Object),returns true if the specified object is a texthitinfo and equals this texthitinfo.
java.awt.font.TextHitInfo.equals(java.awt.font.TextHitInfo),returns true if the specified texthitinfo has the same charindex and isleadingedge as this texthitinfo.
java.awt.font.TextHitInfo.getCharIndex(),returns the index of the character hit.
java.awt.font.TextHitInfo.getInsertionIndex(),returns the insertion index.
java.awt.font.TextHitInfo.getOffsetHit(int),creates a texthitinfo whose character index is offset by delta from the charindex of this texthitinfo.
java.awt.font.TextHitInfo.getOtherHit(),creates a texthitinfo on the other side of the insertion point.
java.awt.font.TextHitInfo.hashCode(),returns the hash code.
java.awt.font.TextHitInfo.isLeadingEdge(),returns true if the leading edge of the character was hit.
java.awt.font.TextHitInfo.leading(int),creates a texthitinfo on the leading edge of the character at the specified charindex.
java.awt.font.TextHitInfo.toString(),returns a string representing the hit for debugging use only.
java.awt.font.TextHitInfo.trailing(int),creates a hit on the trailing edge of the character at the specified charindex.
java.awt.font.TextLayout.clone(),creates a copy of this textlayout.
"java.awt.font.TextLayout.draw(java.awt.Graphics2D,float,float)",renders this textlayout at the specified location in the specified graphics2d context.
java.awt.font.TextLayout.equals(java.lang.Object),returns true if the specified object is a textlayout object and if the specified object equals this textlayout.
java.awt.font.TextLayout.equals(java.awt.font.TextLayout),returns true if the two layouts are equal.
java.awt.font.TextLayout.getAdvance(),returns the advance of this textlayout.
java.awt.font.TextLayout.getAscent(),returns the ascent of this textlayout.
java.awt.font.TextLayout.getBaseline(),returns the baseline for this textlayout.
java.awt.font.TextLayout.getBaselineOffsets(),returns the offsets array for the baselines used for this textlayout.
"java.awt.font.TextLayout.getBlackBoxBounds(int,int)",returns the black box bounds of the characters in the specified range.
java.awt.font.TextLayout.getBounds(),returns the bounds of this textlayout.
"java.awt.font.TextLayout.getCaretInfo(java.awt.font.TextHitInfo,java.awt.geom.Rectangle2D)",returns information about the caret corresponding to hit.
java.awt.font.TextLayout.getCaretInfo(java.awt.font.TextHitInfo),returns information about the caret corresponding to hit.
"java.awt.font.TextLayout.getCaretShape(java.awt.font.TextHitInfo,java.awt.geom.Rectangle2D)",returns a shape representing the caret at the specified hit inside the specified bounds.
java.awt.font.TextLayout.getCaretShape(java.awt.font.TextHitInfo),returns a shape representing the caret at the specified hit inside the natural bounds of this textlayout.
"java.awt.font.TextLayout.getCaretShapes(int,java.awt.geom.Rectangle2D,java.awt.font.TextLayout.CaretPolicy)",returns two paths corresponding to the strong and weak caret.
"java.awt.font.TextLayout.getCaretShapes(int,java.awt.geom.Rectangle2D)",returns two paths corresponding to the strong and weak caret.
java.awt.font.TextLayout.getCaretShapes(int),returns two paths corresponding to the strong and weak caret.
java.awt.font.TextLayout.getCharacterCount(),returns the number of characters represented by this textlayout.
java.awt.font.TextLayout.getCharacterLevel(int),returns the level of the character at index.
java.awt.font.TextLayout.getDescent(),returns the descent of this textlayout.
java.awt.font.TextLayout.getJustifiedLayout(float),creates a copy of this textlayout justified to the specified width.
java.awt.font.TextLayout.getLayoutPath(),"return the layoutpath, or null if the layout path is the default path (x maps to advance, y maps to offset)."
java.awt.font.TextLayout.getLeading(),returns the leading of the textlayout.
"java.awt.font.TextLayout.getLogicalHighlightShape(int,int,java.awt.geom.Rectangle2D)","returns a shape enclosing the logical selection in the specified range, extended to the specified bounds."
"java.awt.font.TextLayout.getLogicalHighlightShape(int,int)","returns a shape enclosing the logical selection in the specified range, extended to the natural bounds of this textlayout."
"java.awt.font.TextLayout.getLogicalRangesForVisualSelection(java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)",returns the logical ranges of text corresponding to a visual selection.
java.awt.font.TextLayout.getNextLeftHit(java.awt.font.TextHitInfo),"returns the hit for the next caret to the left (top); if no such hit, returns null."
"java.awt.font.TextLayout.getNextLeftHit(int,java.awt.font.TextLayout.CaretPolicy)","returns the hit for the next caret to the left (top); if no such hit, returns null."
java.awt.font.TextLayout.getNextLeftHit(int),"returns the hit for the next caret to the left (top); if no such hit, returns null."
java.awt.font.TextLayout.getNextRightHit(java.awt.font.TextHitInfo),"returns the hit for the next caret to the right (bottom); if there is no such hit, returns null."
"java.awt.font.TextLayout.getNextRightHit(int,java.awt.font.TextLayout.CaretPolicy)","returns the hit for the next caret to the right (bottom); if no such hit, returns null."
java.awt.font.TextLayout.getNextRightHit(int),"returns the hit for the next caret to the right (bottom); if no such hit, returns null."
java.awt.font.TextLayout.getOutline(java.awt.geom.AffineTransform),returns a shape representing the outline of this textlayout.
"java.awt.font.TextLayout.getPixelBounds(java.awt.font.FontRenderContext,float,float)",returns the pixel bounds of this textlayout when rendered in a graphics with the given fontrendercontext at the given location.
java.awt.font.TextLayout.getVisibleAdvance(),"returns the advance of this textlayout, minus trailing whitespace."
"java.awt.font.TextLayout.getVisualHighlightShape(java.awt.font.TextHitInfo,java.awt.font.TextHitInfo,java.awt.geom.Rectangle2D)","returns a path enclosing the visual selection in the specified range, extended to bounds."
"java.awt.font.TextLayout.getVisualHighlightShape(java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)","returns a shape enclosing the visual selection in the specified range, extended to the bounds."
java.awt.font.TextLayout.getVisualOtherHit(java.awt.font.TextHitInfo),returns the hit on the opposite side of the specified hit's caret.
java.awt.font.TextLayout.handleJustify(float),justify this layout.
java.awt.font.TextLayout.hashCode(),returns the hash code of this textlayout.
"java.awt.font.TextLayout.hitTestChar(float,float,java.awt.geom.Rectangle2D)",returns a texthitinfo corresponding to the specified point.
"java.awt.font.TextLayout.hitTestChar(float,float)",returns a texthitinfo corresponding to the specified point.
"java.awt.font.TextLayout.hitToPoint(java.awt.font.TextHitInfo,java.awt.geom.Point2D)",convert a hit to a point in standard coordinates.
java.awt.font.TextLayout.isLeftToRight(),returns true if this textlayout has a left-to-right base direction or false if it has a right-to-left base direction.
java.awt.font.TextLayout.isVertical(),returns true if this textlayout is vertical.
java.awt.font.TextLayout.toString(),returns debugging information for this textlayout.
"java.awt.font.TextLayout.CaretPolicy.getStrongCaret(java.awt.font.TextHitInfo,java.awt.font.TextHitInfo,java.awt.font.TextLayout)",chooses one of the specified texthitinfo instances as a strong caret in the specified textlayout.
"java.awt.font.TextMeasurer.deleteChar(java.text.AttributedCharacterIterator,int)",updates the textmeasurer after a single character has been deleted from the paragraph currently represented by this textmeasurer.
"java.awt.font.TextMeasurer.getAdvanceBetween(int,int)",returns the graphical width of a line beginning at start and including characters up to limit.
"java.awt.font.TextMeasurer.getLayout(int,int)",returns a textlayout on the given character range.
"java.awt.font.TextMeasurer.getLineBreakIndex(int,float)",returns the index of the first character which will not fit on on a line beginning at start and possible measuring up to maxadvance in graphical width.
"java.awt.font.TextMeasurer.insertChar(java.text.AttributedCharacterIterator,int)",updates the textmeasurer after a single character has been inserted into the paragraph currently represented by this textmeasurer.
java.awt.font.TransformAttribute.equals(java.lang.Object),returns true if rhs is a transformattribute whose transform is equal to this transformattribute's transform.
java.awt.font.TransformAttribute.getTransform(),returns a copy of the wrapped transform.
java.awt.font.TransformAttribute.isIdentity(),returns true if the wrapped transform is an identity transform.
java.awt.font.NumericShaper.Range.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.awt.font.NumericShaper.Range.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.awt.geom.PathIterator.currentSegment(float[]),returns the coordinates and type of the current path segment in the iteration.
java.awt.geom.PathIterator.currentSegment(double[]),returns the coordinates and type of the current path segment in the iteration.
java.awt.geom.PathIterator.getWindingRule(),returns the winding rule for determining the interior of the path.
java.awt.geom.PathIterator.isDone(),tests if the iteration is complete.
java.awt.geom.PathIterator.next(),moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.
java.awt.geom.AffineTransform.clone(),returns a copy of this affinetransform object.
java.awt.geom.AffineTransform.concatenate(java.awt.geom.AffineTransform),concatenates an affinetransform tx to this affinetransform cx in the most commonly useful way to provide a new user space that is mapped to the former user space by tx.
java.awt.geom.AffineTransform.createInverse(),returns an affinetransform object representing the inverse transformation.
java.awt.geom.AffineTransform.createTransformedShape(java.awt.Shape),returns a new shape object defined by the geometry of the specified shape after it has been transformed by this transform.
"java.awt.geom.AffineTransform.deltaTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)",transforms the relative distance vector specified by ptsrc and stores the result in ptdst.
"java.awt.geom.AffineTransform.deltaTransform(double[],int,double[],int,int)",transforms an array of relative distance vectors by this transform.
java.awt.geom.AffineTransform.equals(java.lang.Object),returns true if this affinetransform represents the same affine coordinate transform as the specified argument.
java.awt.geom.AffineTransform.getDeterminant(),returns the determinant of the matrix representation of the transform.
java.awt.geom.AffineTransform.getMatrix(double[]),retrieves the 6 specifiable values in the 3x3 affine transformation matrix and places them into an array of double precisions values.
java.awt.geom.AffineTransform.getQuadrantRotateInstance(int),returns a transform that rotates coordinates by the specified number of quadrants.
"java.awt.geom.AffineTransform.getQuadrantRotateInstance(int,double,double)",returns a transform that rotates coordinates by the specified number of quadrants around the specified anchor point.
java.awt.geom.AffineTransform.getRotateInstance(double),returns a transform representing a rotation transformation.
"java.awt.geom.AffineTransform.getRotateInstance(double,double,double)",returns a transform that rotates coordinates around an anchor point.
"java.awt.geom.AffineTransform.getRotateInstance(double,double)",returns a transform that rotates coordinates according to a rotation vector.
"java.awt.geom.AffineTransform.getRotateInstance(double,double,double,double)",returns a transform that rotates coordinates around an anchor point according to a rotation vector.
"java.awt.geom.AffineTransform.getScaleInstance(double,double)",returns a transform representing a scaling transformation.
java.awt.geom.AffineTransform.getScaleX(),returns the x coordinate scaling element (m00) of the 3x3 affine transformation matrix.
java.awt.geom.AffineTransform.getScaleY(),returns the y coordinate scaling element (m11) of the 3x3 affine transformation matrix.
"java.awt.geom.AffineTransform.getShearInstance(double,double)",returns a transform representing a shearing transformation.
java.awt.geom.AffineTransform.getShearX(),returns the x coordinate shearing element (m01) of the 3x3 affine transformation matrix.
java.awt.geom.AffineTransform.getShearY(),returns the y coordinate shearing element (m10) of the 3x3 affine transformation matrix.
"java.awt.geom.AffineTransform.getTranslateInstance(double,double)",returns a transform representing a translation transformation.
java.awt.geom.AffineTransform.getTranslateX(),returns the x coordinate of the translation element (m02) of the 3x3 affine transformation matrix.
java.awt.geom.AffineTransform.getTranslateY(),returns the y coordinate of the translation element (m12) of the 3x3 affine transformation matrix.
java.awt.geom.AffineTransform.getType(),retrieves the flag bits describing the conversion properties of this transform.
java.awt.geom.AffineTransform.hashCode(),returns the hashcode for this transform.
"java.awt.geom.AffineTransform.inverseTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)",inverse transforms the specified ptsrc and stores the result in ptdst.
"java.awt.geom.AffineTransform.inverseTransform(double[],int,double[],int,int)",inverse transforms an array of double precision coordinates by this transform.
java.awt.geom.AffineTransform.invert(),sets this transform to the inverse of itself.
java.awt.geom.AffineTransform.isIdentity(),returns true if this affinetransform is an identity transform.
java.awt.geom.AffineTransform.preConcatenate(java.awt.geom.AffineTransform),concatenates an affinetransform tx to this affinetransform cx in a less commonly used way such that tx modifies the coordinate transformation relative to the absolute pixel space rather than relative to the existing user space.
java.awt.geom.AffineTransform.quadrantRotate(int),concatenates this transform with a transform that rotates coordinates by the specified number of quadrants.
"java.awt.geom.AffineTransform.quadrantRotate(int,double,double)",concatenates this transform with a transform that rotates coordinates by the specified number of quadrants around the specified anchor point.
java.awt.geom.AffineTransform.rotate(double),concatenates this transform with a rotation transformation.
"java.awt.geom.AffineTransform.rotate(double,double,double)",concatenates this transform with a transform that rotates coordinates around an anchor point.
"java.awt.geom.AffineTransform.rotate(double,double)",concatenates this transform with a transform that rotates coordinates according to a rotation vector.
"java.awt.geom.AffineTransform.rotate(double,double,double,double)",concatenates this transform with a transform that rotates coordinates around an anchor point according to a rotation vector.
"java.awt.geom.AffineTransform.scale(double,double)",concatenates this transform with a scaling transformation.
java.awt.geom.AffineTransform.setToIdentity(),resets this transform to the identity transform.
java.awt.geom.AffineTransform.setToQuadrantRotation(int),sets this transform to a rotation transformation that rotates coordinates by the specified number of quadrants.
"java.awt.geom.AffineTransform.setToQuadrantRotation(int,double,double)",sets this transform to a translated rotation transformation that rotates coordinates by the specified number of quadrants around the specified anchor point.
java.awt.geom.AffineTransform.setToRotation(double),sets this transform to a rotation transformation.
"java.awt.geom.AffineTransform.setToRotation(double,double,double)",sets this transform to a translated rotation transformation.
"java.awt.geom.AffineTransform.setToRotation(double,double)",sets this transform to a rotation transformation that rotates coordinates according to a rotation vector.
"java.awt.geom.AffineTransform.setToRotation(double,double,double,double)",sets this transform to a rotation transformation that rotates coordinates around an anchor point according to a rotation vector.
"java.awt.geom.AffineTransform.setToScale(double,double)",sets this transform to a scaling transformation.
"java.awt.geom.AffineTransform.setToShear(double,double)",sets this transform to a shearing transformation.
"java.awt.geom.AffineTransform.setToTranslation(double,double)",sets this transform to a translation transformation.
java.awt.geom.AffineTransform.setTransform(java.awt.geom.AffineTransform),sets this transform to a copy of the transform in the specified affinetransform object.
"java.awt.geom.AffineTransform.setTransform(double,double,double,double,double,double)",sets this transform to the matrix specified by the 6 double precision values.
"java.awt.geom.AffineTransform.shear(double,double)",concatenates this transform with a shearing transformation.
java.awt.geom.AffineTransform.toString(),returns a string that represents the value of this object.
"java.awt.geom.AffineTransform.transform(java.awt.geom.Point2D,java.awt.geom.Point2D)",transforms the specified ptsrc and stores the result in ptdst.
"java.awt.geom.AffineTransform.transform(java.awt.geom.Point2D[],int,java.awt.geom.Point2D[],int,int)",transforms an array of point objects by this transform.
"java.awt.geom.AffineTransform.transform(float[],int,float[],int,int)",transforms an array of floating point coordinates by this transform.
"java.awt.geom.AffineTransform.transform(double[],int,double[],int,int)",transforms an array of double precision coordinates by this transform.
"java.awt.geom.AffineTransform.transform(float[],int,double[],int,int)",transforms an array of floating point coordinates by this transform and stores the results into an array of doubles.
"java.awt.geom.AffineTransform.transform(double[],int,float[],int,int)",transforms an array of double precision coordinates by this transform and stores the results into an array of floats.
"java.awt.geom.AffineTransform.translate(double,double)",concatenates this transform with a translation transformation.
"java.awt.geom.Arc2D.contains(double,double)",determines whether or not the specified point is inside the boundary of the arc.
"java.awt.geom.Arc2D.contains(double,double,double,double)",determines whether or not the interior of the arc entirely contains the specified rectangle.
java.awt.geom.Arc2D.contains(java.awt.geom.Rectangle2D),determines whether or not the interior of the arc entirely contains the specified rectangle.
java.awt.geom.Arc2D.containsAngle(double),determines whether or not the specified angle is within the angular extents of the arc.
java.awt.geom.Arc2D.equals(java.lang.Object),determines whether or not the specified object is equal to this arc2d.
java.awt.geom.Arc2D.getAngleExtent(),returns the angular extent of the arc.
java.awt.geom.Arc2D.getAngleStart(),returns the starting angle of the arc.
java.awt.geom.Arc2D.getArcType(),"returns the arc closure type of the arc: open, chord, or pie."
java.awt.geom.Arc2D.getBounds2D(),returns the high-precision framing rectangle of the arc.
java.awt.geom.Arc2D.getEndPoint(),returns the ending point of the arc.
java.awt.geom.Arc2D.getPathIterator(java.awt.geom.AffineTransform),returns an iteration object that defines the boundary of the arc.
java.awt.geom.Arc2D.getStartPoint(),returns the starting point of the arc.
java.awt.geom.Arc2D.hashCode(),returns the hashcode for this arc2d.
"java.awt.geom.Arc2D.intersects(double,double,double,double)",determines whether or not the interior of the arc intersects the interior of the specified rectangle.
"java.awt.geom.Arc2D.makeBounds(double,double,double,double)",constructs a rectangle2d of the appropriate precision to hold the parameters calculated to be the framing rectangle of this arc.
java.awt.geom.Arc2D.setAngleExtent(double),sets the angular extent of this arc to the specified double value.
"java.awt.geom.Arc2D.setAngles(double,double,double,double)",sets the starting angle and angular extent of this arc using two sets of coordinates.
"java.awt.geom.Arc2D.setAngles(java.awt.geom.Point2D,java.awt.geom.Point2D)",sets the starting angle and angular extent of this arc using two points.
java.awt.geom.Arc2D.setAngleStart(double),sets the starting angle of this arc to the specified double value.
java.awt.geom.Arc2D.setAngleStart(java.awt.geom.Point2D),sets the starting angle of this arc to the angle that the specified point defines relative to the center of this arc.
"java.awt.geom.Arc2D.setArc(double,double,double,double,double,double,int)","sets the location, size, angular extents, and closure type of this arc to the specified double values."
"java.awt.geom.Arc2D.setArc(java.awt.geom.Point2D,java.awt.geom.Dimension2D,double,double,int)","sets the location, size, angular extents, and closure type of this arc to the specified values."
"java.awt.geom.Arc2D.setArc(java.awt.geom.Rectangle2D,double,double,int)","sets the location, size, angular extents, and closure type of this arc to the specified values."
java.awt.geom.Arc2D.setArc(java.awt.geom.Arc2D),sets this arc to be the same as the specified arc.
"java.awt.geom.Arc2D.setArcByCenter(double,double,double,double,double,int)","sets the position, bounds, angular extents, and closure type of this arc to the specified values."
"java.awt.geom.Arc2D.setArcByTangent(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D,double)","sets the position, bounds, and angular extents of this arc to the specified value."
java.awt.geom.Arc2D.setArcType(int),"sets the closure type of this arc to the specified value: open, chord, or pie."
"java.awt.geom.Arc2D.setFrame(double,double,double,double)",sets the location and size of the framing rectangle of this shape to the specified rectangular values.
java.awt.geom.Arc2D.Double.getAngleExtent(),returns the angular extent of the arc.
java.awt.geom.Arc2D.Double.getAngleStart(),returns the starting angle of the arc.
java.awt.geom.Arc2D.Double.getHeight(),returns the height of the framing rectangle in double precision.
java.awt.geom.Arc2D.Double.getWidth(),returns the width of the framing rectangle in double precision.
java.awt.geom.Arc2D.Double.getX(),returns the x coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.Arc2D.Double.getY(),returns the y coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.Arc2D.Double.isEmpty(),determines whether the rectangularshape is empty.
"java.awt.geom.Arc2D.Double.makeBounds(double,double,double,double)",constructs a rectangle2d of the appropriate precision to hold the parameters calculated to be the framing rectangle of this arc.
java.awt.geom.Arc2D.Double.setAngleExtent(double),sets the angular extent of this arc to the specified double value.
java.awt.geom.Arc2D.Double.setAngleStart(double),sets the starting angle of this arc to the specified double value.
"java.awt.geom.Arc2D.Double.setArc(double,double,double,double,double,double,int)","sets the location, size, angular extents, and closure type of this arc to the specified double values."
java.awt.geom.Arc2D.Float.getAngleExtent(),returns the angular extent of the arc.
java.awt.geom.Arc2D.Float.getAngleStart(),returns the starting angle of the arc.
java.awt.geom.Arc2D.Float.getHeight(),returns the height of the framing rectangle in double precision.
java.awt.geom.Arc2D.Float.getWidth(),returns the width of the framing rectangle in double precision.
java.awt.geom.Arc2D.Float.getX(),returns the x coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.Arc2D.Float.getY(),returns the y coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.Arc2D.Float.isEmpty(),determines whether the rectangularshape is empty.
"java.awt.geom.Arc2D.Float.makeBounds(double,double,double,double)",constructs a rectangle2d of the appropriate precision to hold the parameters calculated to be the framing rectangle of this arc.
java.awt.geom.Arc2D.Float.setAngleExtent(double),sets the angular extent of this arc to the specified double value.
java.awt.geom.Arc2D.Float.setAngleStart(double),sets the starting angle of this arc to the specified double value.
"java.awt.geom.Arc2D.Float.setArc(double,double,double,double,double,double,int)","sets the location, size, angular extents, and closure type of this arc to the specified double values."
java.awt.geom.Area.add(java.awt.geom.Area),adds the shape of the specified area to the shape of this area.
java.awt.geom.Area.clone(),returns an exact copy of this area object.
"java.awt.geom.Area.contains(double,double)","tests if the specified coordinates are inside the boundary of the shape, as described by the
definition of insideness."
java.awt.geom.Area.contains(java.awt.geom.Point2D),"tests if a specified point2d is inside the boundary of the shape, as described by the
definition of insideness."
"java.awt.geom.Area.contains(double,double,double,double)",tests if the interior of the shape entirely contains the specified rectangular area.
java.awt.geom.Area.contains(java.awt.geom.Rectangle2D),tests if the interior of the shape entirely contains the specified rectangle2d.
java.awt.geom.Area.createTransformedArea(java.awt.geom.AffineTransform),creates a new area object that contains the same geometry as this area transformed by the specified affinetransform.
java.awt.geom.Area.equals(java.awt.geom.Area),tests whether the geometries of the two area objects are equal.
java.awt.geom.Area.exclusiveOr(java.awt.geom.Area),"sets the shape of this area to be the combined area of its current shape and the shape of the specified area, minus their intersection."
java.awt.geom.Area.getBounds(),returns a bounding rectangle that completely encloses this area.
java.awt.geom.Area.getBounds2D(),returns a high precision bounding rectangle2d that completely encloses this area.
java.awt.geom.Area.getPathIterator(java.awt.geom.AffineTransform),creates a pathiterator for the outline of this area object.
"java.awt.geom.Area.getPathIterator(java.awt.geom.AffineTransform,double)",creates a pathiterator for the flattened outline of this area object.
java.awt.geom.Area.intersect(java.awt.geom.Area),sets the shape of this area to the intersection of its current shape and the shape of the specified area.
"java.awt.geom.Area.intersects(double,double,double,double)",tests if the interior of the shape intersects the interior of a specified rectangular area.
java.awt.geom.Area.intersects(java.awt.geom.Rectangle2D),tests if the interior of the shape intersects the interior of a specified rectangle2d.
java.awt.geom.Area.isEmpty(),tests whether this area object encloses any area.
java.awt.geom.Area.isPolygonal(),tests whether this area consists entirely of straight edged polygonal geometry.
java.awt.geom.Area.isRectangular(),tests whether this area is rectangular in shape.
java.awt.geom.Area.isSingular(),tests whether this area is comprised of a single closed subpath.
java.awt.geom.Area.reset(),removes all of the geometry from this area and restores it to an empty area.
java.awt.geom.Area.subtract(java.awt.geom.Area),subtracts the shape of the specified area from the shape of this area.
java.awt.geom.Area.transform(java.awt.geom.AffineTransform),transforms the geometry of this area using the specified affinetransform.
java.awt.geom.CubicCurve2D.clone(),creates a new object of the same class as this object.
"java.awt.geom.CubicCurve2D.contains(double,double)","tests if the specified coordinates are inside the boundary of the shape, as described by the
definition of insideness."
java.awt.geom.CubicCurve2D.contains(java.awt.geom.Point2D),"tests if a specified point2d is inside the boundary of the shape, as described by the
definition of insideness."
"java.awt.geom.CubicCurve2D.contains(double,double,double,double)",tests if the interior of the shape entirely contains the specified rectangular area.
java.awt.geom.CubicCurve2D.contains(java.awt.geom.Rectangle2D),tests if the interior of the shape entirely contains the specified rectangle2d.
java.awt.geom.CubicCurve2D.getBounds(),returns an integer rectangle that completely encloses the shape.
java.awt.geom.CubicCurve2D.getCtrlP1(),returns the first control point.
java.awt.geom.CubicCurve2D.getCtrlP2(),returns the second control point.
java.awt.geom.CubicCurve2D.getCtrlX1(),returns the x coordinate of the first control point in double precision.
java.awt.geom.CubicCurve2D.getCtrlX2(),returns the x coordinate of the second control point in double precision.
java.awt.geom.CubicCurve2D.getCtrlY1(),returns the y coordinate of the first control point in double precision.
java.awt.geom.CubicCurve2D.getCtrlY2(),returns the y coordinate of the second control point in double precision.
"java.awt.geom.CubicCurve2D.getFlatness(double,double,double,double,double,double,double,double)",returns the flatness of the cubic curve specified by the indicated control points.
"java.awt.geom.CubicCurve2D.getFlatness(double[],int)",returns the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index.
java.awt.geom.CubicCurve2D.getFlatness(),returns the flatness of this curve.
"java.awt.geom.CubicCurve2D.getFlatnessSq(double,double,double,double,double,double,double,double)",returns the square of the flatness of the cubic curve specified by the indicated control points.
"java.awt.geom.CubicCurve2D.getFlatnessSq(double[],int)",returns the square of the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index.
java.awt.geom.CubicCurve2D.getFlatnessSq(),returns the square of the flatness of this curve.
java.awt.geom.CubicCurve2D.getP1(),returns the start point.
java.awt.geom.CubicCurve2D.getP2(),returns the end point.
java.awt.geom.CubicCurve2D.getPathIterator(java.awt.geom.AffineTransform),returns an iteration object that defines the boundary of the shape.
"java.awt.geom.CubicCurve2D.getPathIterator(java.awt.geom.AffineTransform,double)",return an iteration object that defines the boundary of the flattened shape.
java.awt.geom.CubicCurve2D.getX1(),returns the x coordinate of the start point in double precision.
java.awt.geom.CubicCurve2D.getX2(),returns the x coordinate of the end point in double precision.
java.awt.geom.CubicCurve2D.getY1(),returns the y coordinate of the start point in double precision.
java.awt.geom.CubicCurve2D.getY2(),returns the y coordinate of the end point in double precision.
"java.awt.geom.CubicCurve2D.intersects(double,double,double,double)",tests if the interior of the shape intersects the interior of a specified rectangular area.
java.awt.geom.CubicCurve2D.intersects(java.awt.geom.Rectangle2D),tests if the interior of the shape intersects the interior of a specified rectangle2d.
"java.awt.geom.CubicCurve2D.setCurve(double,double,double,double,double,double,double,double)",sets the location of the end points and control points of this curve to the specified double coordinates.
"java.awt.geom.CubicCurve2D.setCurve(double[],int)",sets the location of the end points and control points of this curve to the double coordinates at the specified offset in the specified array.
"java.awt.geom.CubicCurve2D.setCurve(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)",sets the location of the end points and control points of this curve to the specified point2d coordinates.
"java.awt.geom.CubicCurve2D.setCurve(java.awt.geom.Point2D[],int)",sets the location of the end points and control points of this curve to the coordinates of the point2d objects at the specified offset in the specified array.
java.awt.geom.CubicCurve2D.setCurve(java.awt.geom.CubicCurve2D),sets the location of the end points and control points of this curve to the same as those in the specified cubiccurve2d.
java.awt.geom.CubicCurve2D.solveCubic(double[]),"solves the cubic whose coefficients are in the eqn array and places the non-complex roots back into the same array, returning the number of roots."
"java.awt.geom.CubicCurve2D.solveCubic(double[],double[])","solve the cubic whose coefficients are in the eqn array and place the non-complex roots into the res array, returning the number of roots."
"java.awt.geom.CubicCurve2D.subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)",subdivides this cubic curve and stores the resulting two subdivided curves into the left and right curve parameters.
"java.awt.geom.CubicCurve2D.subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)",subdivides the cubic curve specified by the src parameter and stores the resulting two subdivided curves into the left and right curve parameters.
"java.awt.geom.CubicCurve2D.subdivide(double[],int,double[],int,double[],int)",subdivides the cubic curve specified by the coordinates stored in the src array at indices srcoff through (srcoff + 7) and stores the resulting two subdivided curves into the two result arrays at the corresponding indices.
java.awt.geom.CubicCurve2D.Double.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.CubicCurve2D.Double.getCtrlP1(),returns the first control point.
java.awt.geom.CubicCurve2D.Double.getCtrlP2(),returns the second control point.
java.awt.geom.CubicCurve2D.Double.getCtrlX1(),returns the x coordinate of the first control point in double precision.
java.awt.geom.CubicCurve2D.Double.getCtrlX2(),returns the x coordinate of the second control point in double precision.
java.awt.geom.CubicCurve2D.Double.getCtrlY1(),returns the y coordinate of the first control point in double precision.
java.awt.geom.CubicCurve2D.Double.getCtrlY2(),returns the y coordinate of the second control point in double precision.
java.awt.geom.CubicCurve2D.Double.getP1(),returns the start point.
java.awt.geom.CubicCurve2D.Double.getP2(),returns the end point.
java.awt.geom.CubicCurve2D.Double.getX1(),returns the x coordinate of the start point in double precision.
java.awt.geom.CubicCurve2D.Double.getX2(),returns the x coordinate of the end point in double precision.
java.awt.geom.CubicCurve2D.Double.getY1(),returns the y coordinate of the start point in double precision.
java.awt.geom.CubicCurve2D.Double.getY2(),returns the y coordinate of the end point in double precision.
"java.awt.geom.CubicCurve2D.Double.setCurve(double,double,double,double,double,double,double,double)",sets the location of the end points and control points of this curve to the specified double coordinates.
java.awt.geom.CubicCurve2D.Float.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.CubicCurve2D.Float.getCtrlP1(),returns the first control point.
java.awt.geom.CubicCurve2D.Float.getCtrlP2(),returns the second control point.
java.awt.geom.CubicCurve2D.Float.getCtrlX1(),returns the x coordinate of the first control point in double precision.
java.awt.geom.CubicCurve2D.Float.getCtrlX2(),returns the x coordinate of the second control point in double precision.
java.awt.geom.CubicCurve2D.Float.getCtrlY1(),returns the y coordinate of the first control point in double precision.
java.awt.geom.CubicCurve2D.Float.getCtrlY2(),returns the y coordinate of the second control point in double precision.
java.awt.geom.CubicCurve2D.Float.getP1(),returns the start point.
java.awt.geom.CubicCurve2D.Float.getP2(),returns the end point.
java.awt.geom.CubicCurve2D.Float.getX1(),returns the x coordinate of the start point in double precision.
java.awt.geom.CubicCurve2D.Float.getX2(),returns the x coordinate of the end point in double precision.
java.awt.geom.CubicCurve2D.Float.getY1(),returns the y coordinate of the start point in double precision.
java.awt.geom.CubicCurve2D.Float.getY2(),returns the y coordinate of the end point in double precision.
"java.awt.geom.CubicCurve2D.Float.setCurve(double,double,double,double,double,double,double,double)",sets the location of the end points and control points of this curve to the specified double coordinates.
"java.awt.geom.CubicCurve2D.Float.setCurve(float,float,float,float,float,float,float,float)",sets the location of the end points and control points of this curve to the specified float coordinates.
java.awt.geom.Dimension2D.clone(),creates a new object of the same class as this object.
java.awt.geom.Dimension2D.getHeight(),returns the height of this dimension in double precision.
java.awt.geom.Dimension2D.getWidth(),returns the width of this dimension in double precision.
"java.awt.geom.Dimension2D.setSize(double,double)",sets the size of this dimension object to the specified width and height.
java.awt.geom.Dimension2D.setSize(java.awt.geom.Dimension2D),sets the size of this dimension2d object to match the specified size.
"java.awt.geom.Ellipse2D.contains(double,double)","tests if the specified coordinates are inside the boundary of the shape, as described by the
definition of insideness."
"java.awt.geom.Ellipse2D.contains(double,double,double,double)",tests if the interior of the shape entirely contains the specified rectangular area.
java.awt.geom.Ellipse2D.equals(java.lang.Object),determines whether or not the specified object is equal to this ellipse2d.
java.awt.geom.Ellipse2D.getPathIterator(java.awt.geom.AffineTransform),returns an iteration object that defines the boundary of this ellipse2d.
java.awt.geom.Ellipse2D.hashCode(),returns the hashcode for this ellipse2d.
"java.awt.geom.Ellipse2D.intersects(double,double,double,double)",tests if the interior of the shape intersects the interior of a specified rectangular area.
java.awt.geom.Ellipse2D.Double.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.Ellipse2D.Double.getHeight(),returns the height of the framing rectangle in double precision.
java.awt.geom.Ellipse2D.Double.getWidth(),returns the width of the framing rectangle in double precision.
java.awt.geom.Ellipse2D.Double.getX(),returns the x coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.Ellipse2D.Double.getY(),returns the y coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.Ellipse2D.Double.isEmpty(),determines whether the rectangularshape is empty.
"java.awt.geom.Ellipse2D.Double.setFrame(double,double,double,double)",sets the location and size of the framing rectangle of this shape to the specified rectangular values.
java.awt.geom.Ellipse2D.Float.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.Ellipse2D.Float.getHeight(),returns the height of the framing rectangle in double precision.
java.awt.geom.Ellipse2D.Float.getWidth(),returns the width of the framing rectangle in double precision.
java.awt.geom.Ellipse2D.Float.getX(),returns the x coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.Ellipse2D.Float.getY(),returns the y coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.Ellipse2D.Float.isEmpty(),determines whether the rectangularshape is empty.
"java.awt.geom.Ellipse2D.Float.setFrame(float,float,float,float)",sets the location and size of the framing rectangle of this shape to the specified rectangular values.
"java.awt.geom.Ellipse2D.Float.setFrame(double,double,double,double)",sets the location and size of the framing rectangle of this shape to the specified rectangular values.
java.awt.geom.FlatteningPathIterator.currentSegment(float[]),returns the coordinates and type of the current path segment in the iteration.
java.awt.geom.FlatteningPathIterator.currentSegment(double[]),returns the coordinates and type of the current path segment in the iteration.
java.awt.geom.FlatteningPathIterator.getFlatness(),returns the flatness of this iterator.
java.awt.geom.FlatteningPathIterator.getRecursionLimit(),returns the recursion limit of this iterator.
java.awt.geom.FlatteningPathIterator.getWindingRule(),returns the winding rule for determining the interior of the path.
java.awt.geom.FlatteningPathIterator.isDone(),tests if the iteration is complete.
java.awt.geom.FlatteningPathIterator.next(),moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.
java.awt.geom.Line2D.clone(),creates a new object of the same class as this object.
"java.awt.geom.Line2D.contains(double,double)",tests if a specified coordinate is inside the boundary of this line2d.
java.awt.geom.Line2D.contains(java.awt.geom.Point2D),tests if a given point2d is inside the boundary of this line2d.
"java.awt.geom.Line2D.contains(double,double,double,double)",tests if the interior of this line2d entirely contains the specified set of rectangular coordinates.
java.awt.geom.Line2D.contains(java.awt.geom.Rectangle2D),tests if the interior of this line2d entirely contains the specified rectangle2d.
java.awt.geom.Line2D.getBounds(),returns an integer rectangle that completely encloses the shape.
java.awt.geom.Line2D.getP1(),returns the start point2d of this line2d.
java.awt.geom.Line2D.getP2(),returns the end point2d of this line2d.
java.awt.geom.Line2D.getPathIterator(java.awt.geom.AffineTransform),returns an iteration object that defines the boundary of this line2d.
"java.awt.geom.Line2D.getPathIterator(java.awt.geom.AffineTransform,double)",returns an iteration object that defines the boundary of this flattened line2d.
java.awt.geom.Line2D.getX1(),returns the x coordinate of the start point in double precision.
java.awt.geom.Line2D.getX2(),returns the x coordinate of the end point in double precision.
java.awt.geom.Line2D.getY1(),returns the y coordinate of the start point in double precision.
java.awt.geom.Line2D.getY2(),returns the y coordinate of the end point in double precision.
"java.awt.geom.Line2D.intersects(double,double,double,double)",tests if the interior of the shape intersects the interior of a specified rectangular area.
java.awt.geom.Line2D.intersects(java.awt.geom.Rectangle2D),tests if the interior of the shape intersects the interior of a specified rectangle2d.
"java.awt.geom.Line2D.intersectsLine(double,double,double,double)","tests if the line segment from (x1,y1) to (x2,y2) intersects this line segment."
java.awt.geom.Line2D.intersectsLine(java.awt.geom.Line2D),tests if the specified line segment intersects this line segment.
"java.awt.geom.Line2D.linesIntersect(double,double,double,double,double,double,double,double)","tests if the line segment from (x1,y1) to (x2,y2) intersects the line segment from (x3,y3) to (x4,y4)."
"java.awt.geom.Line2D.ptLineDist(double,double,double,double,double,double)",returns the distance from a point to a line.
"java.awt.geom.Line2D.ptLineDist(double,double)",returns the distance from a point to this line.
java.awt.geom.Line2D.ptLineDist(java.awt.geom.Point2D),returns the distance from a point2d to this line.
"java.awt.geom.Line2D.ptLineDistSq(double,double,double,double,double,double)",returns the square of the distance from a point to a line.
"java.awt.geom.Line2D.ptLineDistSq(double,double)",returns the square of the distance from a point to this line.
java.awt.geom.Line2D.ptLineDistSq(java.awt.geom.Point2D),returns the square of the distance from a specified point2d to this line.
"java.awt.geom.Line2D.ptSegDist(double,double,double,double,double,double)",returns the distance from a point to a line segment.
"java.awt.geom.Line2D.ptSegDist(double,double)",returns the distance from a point to this line segment.
java.awt.geom.Line2D.ptSegDist(java.awt.geom.Point2D),returns the distance from a point2d to this line segment.
"java.awt.geom.Line2D.ptSegDistSq(double,double,double,double,double,double)",returns the square of the distance from a point to a line segment.
"java.awt.geom.Line2D.ptSegDistSq(double,double)",returns the square of the distance from a point to this line segment.
java.awt.geom.Line2D.ptSegDistSq(java.awt.geom.Point2D),returns the square of the distance from a point2d to this line segment.
"java.awt.geom.Line2D.relativeCCW(double,double,double,double,double,double)","returns an indicator of where the specified point (px,py) lies with respect to the line segment from (x1,y1) to (x2,y2)."
"java.awt.geom.Line2D.relativeCCW(double,double)","returns an indicator of where the specified point (px,py) lies with respect to this line segment."
java.awt.geom.Line2D.relativeCCW(java.awt.geom.Point2D),returns an indicator of where the specified point2d lies with respect to this line segment.
"java.awt.geom.Line2D.setLine(double,double,double,double)",sets the location of the end points of this line2d to the specified double coordinates.
"java.awt.geom.Line2D.setLine(java.awt.geom.Point2D,java.awt.geom.Point2D)",sets the location of the end points of this line2d to the specified point2d coordinates.
java.awt.geom.Line2D.setLine(java.awt.geom.Line2D),sets the location of the end points of this line2d to the same as those end points of the specified line2d.
java.awt.geom.Line2D.Double.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.Line2D.Double.getP1(),returns the start point2d of this line2d.
java.awt.geom.Line2D.Double.getP2(),returns the end point2d of this line2d.
java.awt.geom.Line2D.Double.getX1(),returns the x coordinate of the start point in double precision.
java.awt.geom.Line2D.Double.getX2(),returns the x coordinate of the end point in double precision.
java.awt.geom.Line2D.Double.getY1(),returns the y coordinate of the start point in double precision.
java.awt.geom.Line2D.Double.getY2(),returns the y coordinate of the end point in double precision.
"java.awt.geom.Line2D.Double.setLine(double,double,double,double)",sets the location of the end points of this line2d to the specified double coordinates.
java.awt.geom.Line2D.Float.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.Line2D.Float.getP1(),returns the start point2d of this line2d.
java.awt.geom.Line2D.Float.getP2(),returns the end point2d of this line2d.
java.awt.geom.Line2D.Float.getX1(),returns the x coordinate of the start point in double precision.
java.awt.geom.Line2D.Float.getX2(),returns the x coordinate of the end point in double precision.
java.awt.geom.Line2D.Float.getY1(),returns the y coordinate of the start point in double precision.
java.awt.geom.Line2D.Float.getY2(),returns the y coordinate of the end point in double precision.
"java.awt.geom.Line2D.Float.setLine(double,double,double,double)",sets the location of the end points of this line2d to the specified double coordinates.
"java.awt.geom.Line2D.Float.setLine(float,float,float,float)",sets the location of the end points of this line2d to the specified float coordinates.
"java.awt.geom.Path2D.append(java.awt.Shape,boolean)","appends the geometry of the specified shape object to the path, possibly connecting the new geometry to the existing path segments with a line segment."
"java.awt.geom.Path2D.append(java.awt.geom.PathIterator,boolean)","appends the geometry of the specified pathiterator object to the path, possibly connecting the new geometry to the existing path segments with a line segment."
java.awt.geom.Path2D.clone(),creates a new object of the same class as this object.
java.awt.geom.Path2D.closePath(),closes the current subpath by drawing a straight line back to the coordinates of the last moveto.
"java.awt.geom.Path2D.contains(java.awt.geom.PathIterator,double,double)",tests if the specified coordinates are inside the closed boundary of the specified pathiterator.
"java.awt.geom.Path2D.contains(java.awt.geom.PathIterator,java.awt.geom.Point2D)",tests if the specified point2d is inside the closed boundary of the specified pathiterator.
"java.awt.geom.Path2D.contains(double,double)","tests if the specified coordinates are inside the boundary of the shape, as described by the
definition of insideness."
java.awt.geom.Path2D.contains(java.awt.geom.Point2D),"tests if a specified point2d is inside the boundary of the shape, as described by the
definition of insideness."
"java.awt.geom.Path2D.contains(java.awt.geom.PathIterator,double,double,double,double)",tests if the specified rectangular area is entirely inside the closed boundary of the specified pathiterator.
"java.awt.geom.Path2D.contains(java.awt.geom.PathIterator,java.awt.geom.Rectangle2D)",tests if the specified rectangle2d is entirely inside the closed boundary of the specified pathiterator.
"java.awt.geom.Path2D.contains(double,double,double,double)",tests if the interior of the shape entirely contains the specified rectangular area.
java.awt.geom.Path2D.contains(java.awt.geom.Rectangle2D),tests if the interior of the shape entirely contains the specified rectangle2d.
java.awt.geom.Path2D.createTransformedShape(java.awt.geom.AffineTransform),returns a new shape representing a transformed version of this path2d.
"java.awt.geom.Path2D.curveTo(double,double,double,double,double,double)","adds a curved segment, defined by three new points, to the path by drawing a bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as bézier control points."
java.awt.geom.Path2D.getBounds(),returns an integer rectangle that completely encloses the shape.
java.awt.geom.Path2D.getCurrentPoint(),returns the coordinates most recently added to the end of the path as a point2d object.
"java.awt.geom.Path2D.getPathIterator(java.awt.geom.AffineTransform,double)",returns an iterator object that iterates along the shape boundary and provides access to a flattened view of the shape outline geometry.
java.awt.geom.Path2D.getWindingRule(),returns the fill style winding rule.
"java.awt.geom.Path2D.intersects(java.awt.geom.PathIterator,double,double,double,double)",tests if the interior of the specified pathiterator intersects the interior of a specified set of rectangular coordinates.
"java.awt.geom.Path2D.intersects(java.awt.geom.PathIterator,java.awt.geom.Rectangle2D)",tests if the interior of the specified pathiterator intersects the interior of a specified rectangle2d.
"java.awt.geom.Path2D.intersects(double,double,double,double)",tests if the interior of the shape intersects the interior of a specified rectangular area.
java.awt.geom.Path2D.intersects(java.awt.geom.Rectangle2D),tests if the interior of the shape intersects the interior of a specified rectangle2d.
"java.awt.geom.Path2D.lineTo(double,double)",adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision.
"java.awt.geom.Path2D.moveTo(double,double)",adds a point to the path by moving to the specified coordinates specified in double precision.
"java.awt.geom.Path2D.quadTo(double,double,double,double)","adds a curved segment, defined by two new points, to the path by drawing a quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point."
java.awt.geom.Path2D.reset(),resets the path to empty.
java.awt.geom.Path2D.setWindingRule(int),sets the winding rule for this path to the specified value.
java.awt.geom.Path2D.transform(java.awt.geom.AffineTransform),transforms the geometry of this path using the specified affinetransform.
"java.awt.geom.Path2D.Double.append(java.awt.geom.PathIterator,boolean)","appends the geometry of the specified pathiterator object to the path, possibly connecting the new geometry to the existing path segments with a line segment."
java.awt.geom.Path2D.Double.clone(),creates a new object of the same class as this object.
"java.awt.geom.Path2D.Double.curveTo(double,double,double,double,double,double)","adds a curved segment, defined by three new points, to the path by drawing a bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as bézier control points."
java.awt.geom.Path2D.Double.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.Path2D.Double.getPathIterator(java.awt.geom.AffineTransform),returns an iterator object that iterates along the shape boundary and provides access to the geometry of the shape outline.
"java.awt.geom.Path2D.Double.lineTo(double,double)",adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision.
"java.awt.geom.Path2D.Double.moveTo(double,double)",adds a point to the path by moving to the specified coordinates specified in double precision.
"java.awt.geom.Path2D.Double.quadTo(double,double,double,double)","adds a curved segment, defined by two new points, to the path by drawing a quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point."
java.awt.geom.Path2D.Double.transform(java.awt.geom.AffineTransform),transforms the geometry of this path using the specified affinetransform.
"java.awt.geom.Path2D.Float.append(java.awt.geom.PathIterator,boolean)","appends the geometry of the specified pathiterator object to the path, possibly connecting the new geometry to the existing path segments with a line segment."
java.awt.geom.Path2D.Float.clone(),creates a new object of the same class as this object.
"java.awt.geom.Path2D.Float.curveTo(double,double,double,double,double,double)","adds a curved segment, defined by three new points, to the path by drawing a bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as bézier control points."
"java.awt.geom.Path2D.Float.curveTo(float,float,float,float,float,float)","adds a curved segment, defined by three new points, to the path by drawing a bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as bézier control points."
java.awt.geom.Path2D.Float.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.Path2D.Float.getPathIterator(java.awt.geom.AffineTransform),returns an iterator object that iterates along the shape boundary and provides access to the geometry of the shape outline.
"java.awt.geom.Path2D.Float.lineTo(double,double)",adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision.
"java.awt.geom.Path2D.Float.lineTo(float,float)",adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in float precision.
"java.awt.geom.Path2D.Float.moveTo(double,double)",adds a point to the path by moving to the specified coordinates specified in double precision.
"java.awt.geom.Path2D.Float.moveTo(float,float)",adds a point to the path by moving to the specified coordinates specified in float precision.
"java.awt.geom.Path2D.Float.quadTo(double,double,double,double)","adds a curved segment, defined by two new points, to the path by drawing a quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point."
"java.awt.geom.Path2D.Float.quadTo(float,float,float,float)","adds a curved segment, defined by two new points, to the path by drawing a quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point."
java.awt.geom.Path2D.Float.transform(java.awt.geom.AffineTransform),transforms the geometry of this path using the specified affinetransform.
java.awt.geom.Point2D.clone(),creates a new object of the same class and with the same contents as this object.
"java.awt.geom.Point2D.distance(double,double,double,double)",returns the distance between two points.
"java.awt.geom.Point2D.distance(double,double)",returns the distance from this point2d to a specified point.
java.awt.geom.Point2D.distance(java.awt.geom.Point2D),returns the distance from this point2d to a specified point2d.
"java.awt.geom.Point2D.distanceSq(double,double,double,double)",returns the square of the distance between two points.
"java.awt.geom.Point2D.distanceSq(double,double)",returns the square of the distance from this point2d to a specified point.
java.awt.geom.Point2D.distanceSq(java.awt.geom.Point2D),returns the square of the distance from this point2d to a specified point2d.
java.awt.geom.Point2D.equals(java.lang.Object),determines whether or not two points are equal.
java.awt.geom.Point2D.getX(),returns the x coordinate of this point2d in double precision.
java.awt.geom.Point2D.getY(),returns the y coordinate of this point2d in double precision.
java.awt.geom.Point2D.hashCode(),returns the hashcode for this point2d.
"java.awt.geom.Point2D.setLocation(double,double)",sets the location of this point2d to the specified double coordinates.
java.awt.geom.Point2D.setLocation(java.awt.geom.Point2D),sets the location of this point2d to the same coordinates as the specified point2d object.
java.awt.geom.Point2D.Double.getX(),returns the x coordinate of this point2d in double precision.
java.awt.geom.Point2D.Double.getY(),returns the y coordinate of this point2d in double precision.
"java.awt.geom.Point2D.Double.setLocation(double,double)",sets the location of this point2d to the specified double coordinates.
java.awt.geom.Point2D.Double.toString(),returns a string that represents the value of this point2d.
java.awt.geom.Point2D.Float.getX(),returns the x coordinate of this point2d in double precision.
java.awt.geom.Point2D.Float.getY(),returns the y coordinate of this point2d in double precision.
"java.awt.geom.Point2D.Float.setLocation(double,double)",sets the location of this point2d to the specified double coordinates.
"java.awt.geom.Point2D.Float.setLocation(float,float)",sets the location of this point2d to the specified float coordinates.
java.awt.geom.Point2D.Float.toString(),returns a string that represents the value of this point2d.
java.awt.geom.QuadCurve2D.clone(),creates a new object of the same class and with the same contents as this object.
"java.awt.geom.QuadCurve2D.contains(double,double)","tests if the specified coordinates are inside the boundary of the shape, as described by the
definition of insideness."
java.awt.geom.QuadCurve2D.contains(java.awt.geom.Point2D),"tests if a specified point2d is inside the boundary of the shape, as described by the
definition of insideness."
"java.awt.geom.QuadCurve2D.contains(double,double,double,double)",tests if the interior of the shape entirely contains the specified rectangular area.
java.awt.geom.QuadCurve2D.contains(java.awt.geom.Rectangle2D),tests if the interior of the shape entirely contains the specified rectangle2d.
java.awt.geom.QuadCurve2D.getBounds(),returns an integer rectangle that completely encloses the shape.
java.awt.geom.QuadCurve2D.getCtrlPt(),returns the control point.
java.awt.geom.QuadCurve2D.getCtrlX(),returns the x coordinate of the control point in double precision.
java.awt.geom.QuadCurve2D.getCtrlY(),returns the y coordinate of the control point in double precision.
"java.awt.geom.QuadCurve2D.getFlatness(double,double,double,double,double,double)","returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the indicated control points."
"java.awt.geom.QuadCurve2D.getFlatness(double[],int)","returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the control points stored in the indicated array at the indicated index."
java.awt.geom.QuadCurve2D.getFlatness(),"returns the flatness, or maximum distance of a control point from the line connecting the end points, of this quadcurve2d."
"java.awt.geom.QuadCurve2D.getFlatnessSq(double,double,double,double,double,double)","returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the indicated control points."
"java.awt.geom.QuadCurve2D.getFlatnessSq(double[],int)","returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the control points stored in the indicated array at the indicated index."
java.awt.geom.QuadCurve2D.getFlatnessSq(),"returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of this quadcurve2d."
java.awt.geom.QuadCurve2D.getP1(),returns the start point.
java.awt.geom.QuadCurve2D.getP2(),returns the end point.
java.awt.geom.QuadCurve2D.getPathIterator(java.awt.geom.AffineTransform),returns an iteration object that defines the boundary of the shape of this quadcurve2d.
"java.awt.geom.QuadCurve2D.getPathIterator(java.awt.geom.AffineTransform,double)",returns an iteration object that defines the boundary of the flattened shape of this quadcurve2d.
java.awt.geom.QuadCurve2D.getX1(),returns the x coordinate of the start point in double in precision.
java.awt.geom.QuadCurve2D.getX2(),returns the x coordinate of the end point in double precision.
java.awt.geom.QuadCurve2D.getY1(),returns the y coordinate of the start point in double precision.
java.awt.geom.QuadCurve2D.getY2(),returns the y coordinate of the end point in double precision.
"java.awt.geom.QuadCurve2D.intersects(double,double,double,double)",tests if the interior of the shape intersects the interior of a specified rectangular area.
java.awt.geom.QuadCurve2D.intersects(java.awt.geom.Rectangle2D),tests if the interior of the shape intersects the interior of a specified rectangle2d.
"java.awt.geom.QuadCurve2D.setCurve(double,double,double,double,double,double)",sets the location of the end points and control point of this curve to the specified double coordinates.
"java.awt.geom.QuadCurve2D.setCurve(double[],int)",sets the location of the end points and control points of this quadcurve2d to the double coordinates at the specified offset in the specified array.
"java.awt.geom.QuadCurve2D.setCurve(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)",sets the location of the end points and control point of this quadcurve2d to the specified point2d coordinates.
"java.awt.geom.QuadCurve2D.setCurve(java.awt.geom.Point2D[],int)",sets the location of the end points and control points of this quadcurve2d to the coordinates of the point2d objects at the specified offset in the specified array.
java.awt.geom.QuadCurve2D.setCurve(java.awt.geom.QuadCurve2D),sets the location of the end points and control point of this quadcurve2d to the same as those in the specified quadcurve2d.
java.awt.geom.QuadCurve2D.solveQuadratic(double[]),"solves the quadratic whose coefficients are in the eqn array and places the non-complex roots back into the same array, returning the number of roots."
"java.awt.geom.QuadCurve2D.solveQuadratic(double[],double[])","solves the quadratic whose coefficients are in the eqn array and places the non-complex roots into the res array, returning the number of roots."
"java.awt.geom.QuadCurve2D.subdivide(java.awt.geom.QuadCurve2D,java.awt.geom.QuadCurve2D)",subdivides this quadcurve2d and stores the resulting two subdivided curves into the left and right curve parameters.
"java.awt.geom.QuadCurve2D.subdivide(java.awt.geom.QuadCurve2D,java.awt.geom.QuadCurve2D,java.awt.geom.QuadCurve2D)",subdivides the quadratic curve specified by the src parameter and stores the resulting two subdivided curves into the left and right curve parameters.
"java.awt.geom.QuadCurve2D.subdivide(double[],int,double[],int,double[],int)",subdivides the quadratic curve specified by the coordinates stored in the src array at indices srcoff through srcoff + 5 and stores the resulting two subdivided curves into the two result arrays at the corresponding indices.
java.awt.geom.QuadCurve2D.Double.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.QuadCurve2D.Double.getCtrlPt(),returns the control point.
java.awt.geom.QuadCurve2D.Double.getCtrlX(),returns the x coordinate of the control point in double precision.
java.awt.geom.QuadCurve2D.Double.getCtrlY(),returns the y coordinate of the control point in double precision.
java.awt.geom.QuadCurve2D.Double.getP1(),returns the start point.
java.awt.geom.QuadCurve2D.Double.getP2(),returns the end point.
java.awt.geom.QuadCurve2D.Double.getX1(),returns the x coordinate of the start point in double in precision.
java.awt.geom.QuadCurve2D.Double.getX2(),returns the x coordinate of the end point in double precision.
java.awt.geom.QuadCurve2D.Double.getY1(),returns the y coordinate of the start point in double precision.
java.awt.geom.QuadCurve2D.Double.getY2(),returns the y coordinate of the end point in double precision.
"java.awt.geom.QuadCurve2D.Double.setCurve(double,double,double,double,double,double)",sets the location of the end points and control point of this curve to the specified double coordinates.
java.awt.geom.QuadCurve2D.Float.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.QuadCurve2D.Float.getCtrlPt(),returns the control point.
java.awt.geom.QuadCurve2D.Float.getCtrlX(),returns the x coordinate of the control point in double precision.
java.awt.geom.QuadCurve2D.Float.getCtrlY(),returns the y coordinate of the control point in double precision.
java.awt.geom.QuadCurve2D.Float.getP1(),returns the start point.
java.awt.geom.QuadCurve2D.Float.getP2(),returns the end point.
java.awt.geom.QuadCurve2D.Float.getX1(),returns the x coordinate of the start point in double in precision.
java.awt.geom.QuadCurve2D.Float.getX2(),returns the x coordinate of the end point in double precision.
java.awt.geom.QuadCurve2D.Float.getY1(),returns the y coordinate of the start point in double precision.
java.awt.geom.QuadCurve2D.Float.getY2(),returns the y coordinate of the end point in double precision.
"java.awt.geom.QuadCurve2D.Float.setCurve(double,double,double,double,double,double)",sets the location of the end points and control point of this curve to the specified double coordinates.
"java.awt.geom.QuadCurve2D.Float.setCurve(float,float,float,float,float,float)",sets the location of the end points and control point of this curve to the specified float coordinates.
"java.awt.geom.Rectangle2D.add(double,double)","adds a point, specified by the double precision arguments newx and newy, to this rectangle2d."
java.awt.geom.Rectangle2D.add(java.awt.geom.Point2D),adds the point2d object pt to this rectangle2d.
java.awt.geom.Rectangle2D.add(java.awt.geom.Rectangle2D),adds a rectangle2d object to this rectangle2d.
"java.awt.geom.Rectangle2D.contains(double,double)","tests if the specified coordinates are inside the boundary of the shape, as described by the
definition of insideness."
"java.awt.geom.Rectangle2D.contains(double,double,double,double)",tests if the interior of the shape entirely contains the specified rectangular area.
java.awt.geom.Rectangle2D.createIntersection(java.awt.geom.Rectangle2D),returns a new rectangle2d object representing the intersection of this rectangle2d with the specified rectangle2d.
java.awt.geom.Rectangle2D.createUnion(java.awt.geom.Rectangle2D),returns a new rectangle2d object representing the union of this rectangle2d with the specified rectangle2d.
java.awt.geom.Rectangle2D.equals(java.lang.Object),determines whether or not the specified object is equal to this rectangle2d.
java.awt.geom.Rectangle2D.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.Rectangle2D.getPathIterator(java.awt.geom.AffineTransform),returns an iteration object that defines the boundary of this rectangle2d.
"java.awt.geom.Rectangle2D.getPathIterator(java.awt.geom.AffineTransform,double)",returns an iteration object that defines the boundary of the flattened rectangle2d.
java.awt.geom.Rectangle2D.hashCode(),returns the hashcode for this rectangle2d.
"java.awt.geom.Rectangle2D.intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)",intersects the pair of specified source rectangle2d objects and puts the result into the specified destination rectangle2d object.
"java.awt.geom.Rectangle2D.intersects(double,double,double,double)",tests if the interior of the shape intersects the interior of a specified rectangular area.
"java.awt.geom.Rectangle2D.intersectsLine(double,double,double,double)",tests if the specified line segment intersects the interior of this rectangle2d.
java.awt.geom.Rectangle2D.intersectsLine(java.awt.geom.Line2D),tests if the specified line segment intersects the interior of this rectangle2d.
"java.awt.geom.Rectangle2D.outcode(double,double)",determines where the specified coordinates lie with respect to this rectangle2d.
java.awt.geom.Rectangle2D.outcode(java.awt.geom.Point2D),determines where the specified point2d lies with respect to this rectangle2d.
"java.awt.geom.Rectangle2D.setFrame(double,double,double,double)",sets the location and size of the outer bounds of this rectangle2d to the specified rectangular values.
"java.awt.geom.Rectangle2D.setRect(double,double,double,double)",sets the location and size of this rectangle2d to the specified double values.
java.awt.geom.Rectangle2D.setRect(java.awt.geom.Rectangle2D),sets this rectangle2d to be the same as the specified rectangle2d.
"java.awt.geom.Rectangle2D.union(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)",unions the pair of source rectangle2d objects and puts the result into the specified destination rectangle2d object.
java.awt.geom.Rectangle2D.Double.createIntersection(java.awt.geom.Rectangle2D),returns a new rectangle2d object representing the intersection of this rectangle2d with the specified rectangle2d.
java.awt.geom.Rectangle2D.Double.createUnion(java.awt.geom.Rectangle2D),returns a new rectangle2d object representing the union of this rectangle2d with the specified rectangle2d.
java.awt.geom.Rectangle2D.Double.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.Rectangle2D.Double.getHeight(),returns the height of the framing rectangle in double precision.
java.awt.geom.Rectangle2D.Double.getWidth(),returns the width of the framing rectangle in double precision.
java.awt.geom.Rectangle2D.Double.getX(),returns the x coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.Rectangle2D.Double.getY(),returns the y coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.Rectangle2D.Double.isEmpty(),determines whether the rectangularshape is empty.
"java.awt.geom.Rectangle2D.Double.outcode(double,double)",determines where the specified coordinates lie with respect to this rectangle2d.
"java.awt.geom.Rectangle2D.Double.setRect(double,double,double,double)",sets the location and size of this rectangle2d to the specified double values.
java.awt.geom.Rectangle2D.Double.setRect(java.awt.geom.Rectangle2D),sets this rectangle2d to be the same as the specified rectangle2d.
java.awt.geom.Rectangle2D.Double.toString(),returns the string representation of this rectangle2d.
java.awt.geom.Rectangle2D.Float.createIntersection(java.awt.geom.Rectangle2D),returns a new rectangle2d object representing the intersection of this rectangle2d with the specified rectangle2d.
java.awt.geom.Rectangle2D.Float.createUnion(java.awt.geom.Rectangle2D),returns a new rectangle2d object representing the union of this rectangle2d with the specified rectangle2d.
java.awt.geom.Rectangle2D.Float.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.Rectangle2D.Float.getHeight(),returns the height of the framing rectangle in double precision.
java.awt.geom.Rectangle2D.Float.getWidth(),returns the width of the framing rectangle in double precision.
java.awt.geom.Rectangle2D.Float.getX(),returns the x coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.Rectangle2D.Float.getY(),returns the y coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.Rectangle2D.Float.isEmpty(),determines whether the rectangularshape is empty.
"java.awt.geom.Rectangle2D.Float.outcode(double,double)",determines where the specified coordinates lie with respect to this rectangle2d.
"java.awt.geom.Rectangle2D.Float.setRect(float,float,float,float)",sets the location and size of this rectangle2d to the specified float values.
"java.awt.geom.Rectangle2D.Float.setRect(double,double,double,double)",sets the location and size of this rectangle2d to the specified double values.
java.awt.geom.Rectangle2D.Float.setRect(java.awt.geom.Rectangle2D),sets this rectangle2d to be the same as the specified rectangle2d.
java.awt.geom.Rectangle2D.Float.toString(),returns the string representation of this rectangle2d.
java.awt.geom.RectangularShape.clone(),creates a new object of the same class and with the same contents as this object.
java.awt.geom.RectangularShape.contains(java.awt.geom.Point2D),"tests if a specified point2d is inside the boundary of the shape, as described by the
definition of insideness."
java.awt.geom.RectangularShape.contains(java.awt.geom.Rectangle2D),tests if the interior of the shape entirely contains the specified rectangle2d.
java.awt.geom.RectangularShape.getBounds(),returns an integer rectangle that completely encloses the shape.
java.awt.geom.RectangularShape.getCenterX(),returns the x coordinate of the center of the framing rectangle of the shape in double precision.
java.awt.geom.RectangularShape.getCenterY(),returns the y coordinate of the center of the framing rectangle of the shape in double precision.
java.awt.geom.RectangularShape.getFrame(),returns the framing rectangle2d that defines the overall shape of this object.
java.awt.geom.RectangularShape.getHeight(),returns the height of the framing rectangle in double precision.
java.awt.geom.RectangularShape.getMaxX(),returns the largest x coordinate of the framing rectangle of the shape in double precision.
java.awt.geom.RectangularShape.getMaxY(),returns the largest y coordinate of the framing rectangle of the shape in double precision.
java.awt.geom.RectangularShape.getMinX(),returns the smallest x coordinate of the framing rectangle of the shape in double precision.
java.awt.geom.RectangularShape.getMinY(),returns the smallest y coordinate of the framing rectangle of the shape in double precision.
"java.awt.geom.RectangularShape.getPathIterator(java.awt.geom.AffineTransform,double)",returns an iterator object that iterates along the shape object's boundary and provides access to a flattened view of the outline of the shape object's geometry.
java.awt.geom.RectangularShape.getWidth(),returns the width of the framing rectangle in double precision.
java.awt.geom.RectangularShape.getX(),returns the x coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.RectangularShape.getY(),returns the y coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.RectangularShape.intersects(java.awt.geom.Rectangle2D),tests if the interior of the shape intersects the interior of a specified rectangle2d.
java.awt.geom.RectangularShape.isEmpty(),determines whether the rectangularshape is empty.
"java.awt.geom.RectangularShape.setFrame(double,double,double,double)",sets the location and size of the framing rectangle of this shape to the specified rectangular values.
"java.awt.geom.RectangularShape.setFrame(java.awt.geom.Point2D,java.awt.geom.Dimension2D)","sets the location and size of the framing rectangle of this shape to the specified point2d and dimension2d, respectively."
java.awt.geom.RectangularShape.setFrame(java.awt.geom.Rectangle2D),sets the framing rectangle of this shape to be the specified rectangle2d.
"java.awt.geom.RectangularShape.setFrameFromCenter(double,double,double,double)",sets the framing rectangle of this shape based on the specified center point coordinates and corner point coordinates.
"java.awt.geom.RectangularShape.setFrameFromCenter(java.awt.geom.Point2D,java.awt.geom.Point2D)",sets the framing rectangle of this shape based on a specified center point2d and corner point2d.
"java.awt.geom.RectangularShape.setFrameFromDiagonal(double,double,double,double)",sets the diagonal of the framing rectangle of this shape based on the two specified coordinates.
"java.awt.geom.RectangularShape.setFrameFromDiagonal(java.awt.geom.Point2D,java.awt.geom.Point2D)",sets the diagonal of the framing rectangle of this shape based on two specified point2d objects.
"java.awt.geom.RoundRectangle2D.contains(double,double)","tests if the specified coordinates are inside the boundary of the shape, as described by the
definition of insideness."
"java.awt.geom.RoundRectangle2D.contains(double,double,double,double)",tests if the interior of the shape entirely contains the specified rectangular area.
java.awt.geom.RoundRectangle2D.equals(java.lang.Object),determines whether or not the specified object is equal to this roundrectangle2d.
java.awt.geom.RoundRectangle2D.getArcHeight(),gets the height of the arc that rounds off the corners.
java.awt.geom.RoundRectangle2D.getArcWidth(),gets the width of the arc that rounds off the corners.
java.awt.geom.RoundRectangle2D.getPathIterator(java.awt.geom.AffineTransform),returns an iteration object that defines the boundary of this roundrectangle2d.
java.awt.geom.RoundRectangle2D.hashCode(),returns the hashcode for this roundrectangle2d.
"java.awt.geom.RoundRectangle2D.intersects(double,double,double,double)",tests if the interior of the shape intersects the interior of a specified rectangular area.
"java.awt.geom.RoundRectangle2D.setFrame(double,double,double,double)",sets the location and size of the framing rectangle of this shape to the specified rectangular values.
"java.awt.geom.RoundRectangle2D.setRoundRect(double,double,double,double,double,double)","sets the location, size, and corner radii of this roundrectangle2d to the specified double values."
java.awt.geom.RoundRectangle2D.setRoundRect(java.awt.geom.RoundRectangle2D),sets this roundrectangle2d to be the same as the specified roundrectangle2d.
java.awt.geom.RoundRectangle2D.Double.getArcHeight(),gets the height of the arc that rounds off the corners.
java.awt.geom.RoundRectangle2D.Double.getArcWidth(),gets the width of the arc that rounds off the corners.
java.awt.geom.RoundRectangle2D.Double.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.RoundRectangle2D.Double.getHeight(),returns the height of the framing rectangle in double precision.
java.awt.geom.RoundRectangle2D.Double.getWidth(),returns the width of the framing rectangle in double precision.
java.awt.geom.RoundRectangle2D.Double.getX(),returns the x coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.RoundRectangle2D.Double.getY(),returns the y coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.RoundRectangle2D.Double.isEmpty(),determines whether the rectangularshape is empty.
"java.awt.geom.RoundRectangle2D.Double.setRoundRect(double,double,double,double,double,double)","sets the location, size, and corner radii of this roundrectangle2d to the specified double values."
java.awt.geom.RoundRectangle2D.Double.setRoundRect(java.awt.geom.RoundRectangle2D),sets this roundrectangle2d to be the same as the specified roundrectangle2d.
java.awt.geom.RoundRectangle2D.Float.getArcHeight(),gets the height of the arc that rounds off the corners.
java.awt.geom.RoundRectangle2D.Float.getArcWidth(),gets the width of the arc that rounds off the corners.
java.awt.geom.RoundRectangle2D.Float.getBounds2D(),returns a high precision and more accurate bounding box of the shape than the getbounds method.
java.awt.geom.RoundRectangle2D.Float.getHeight(),returns the height of the framing rectangle in double precision.
java.awt.geom.RoundRectangle2D.Float.getWidth(),returns the width of the framing rectangle in double precision.
java.awt.geom.RoundRectangle2D.Float.getX(),returns the x coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.RoundRectangle2D.Float.getY(),returns the y coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.RoundRectangle2D.Float.isEmpty(),determines whether the rectangularshape is empty.
"java.awt.geom.RoundRectangle2D.Float.setRoundRect(float,float,float,float,float,float)","sets the location, size, and corner radii of this roundrectangle2d to the specified float values."
"java.awt.geom.RoundRectangle2D.Float.setRoundRect(double,double,double,double,double,double)","sets the location, size, and corner radii of this roundrectangle2d to the specified double values."
java.awt.geom.RoundRectangle2D.Float.setRoundRect(java.awt.geom.RoundRectangle2D),sets this roundrectangle2d to be the same as the specified roundrectangle2d.
java.awt.im.InputMethodRequests.cancelLatestCommittedText(java.text.AttributedCharacterIterator.Attribute[]),gets the latest committed text from the text editing component and removes it from the component's text body.
"java.awt.im.InputMethodRequests.getCommittedText(int,int,java.text.AttributedCharacterIterator.Attribute[])",gets an iterator providing access to the entire text and attributes contained in the text editing component except for uncommitted text.
java.awt.im.InputMethodRequests.getCommittedTextLength(),gets the length of the entire text contained in the text editing component except for uncommitted (composed) text.
java.awt.im.InputMethodRequests.getInsertPositionOffset(),gets the offset of the insert position in the committed text contained in the text editing component.
"java.awt.im.InputMethodRequests.getLocationOffset(int,int)",gets the offset within the composed text for the specified absolute x and y coordinates on the screen.
java.awt.im.InputMethodRequests.getSelectedText(java.text.AttributedCharacterIterator.Attribute[]),gets the currently selected text from the text editing component.
java.awt.im.InputMethodRequests.getTextLocation(java.awt.font.TextHitInfo),"gets the location of a specified offset in the current composed text, or of the selection in committed text."
java.awt.im.InputContext.dispatchEvent(java.awt.AWTEvent),dispatches an event to the active input method.
java.awt.im.InputContext.dispose(),releases the resources used by this input context.
java.awt.im.InputContext.endComposition(),ends any input composition that may currently be going on in this context.
java.awt.im.InputContext.getInputMethodControlObject(),"returns a control object from the current input method, or null."
java.awt.im.InputContext.getInstance(),returns a new inputcontext instance.
java.awt.im.InputContext.getLocale(),returns the current locale of the current input method or keyboard layout.
java.awt.im.InputContext.isCompositionEnabled(),determines whether the current input method is enabled for composition.
java.awt.im.InputContext.reconvert(),asks the current input method to reconvert text from the current client component.
java.awt.im.InputContext.removeNotify(java.awt.Component),"notifies the input context that a client component has been removed from its containment hierarchy, or that input method support has been disabled for the component."
java.awt.im.InputContext.selectInputMethod(java.util.Locale),"attempts to select an input method or keyboard layout that supports the given locale, and returns a value indicating whether such an input method or keyboard layout has been successfully selected."
java.awt.im.InputContext.setCharacterSubsets(java.lang.Character.Subset[]),sets the subsets of the unicode character set that input methods of this input context should be allowed to input.
java.awt.im.InputContext.setCompositionEnabled(boolean),"enables or disables the current input method for composition, depending on the value of the parameter enable."
java.awt.im.InputMethodHighlight.getState(),returns the conversion state of the text range.
java.awt.im.InputMethodHighlight.getStyle(),"returns the rendering style attributes for the text range, or null."
java.awt.im.InputMethodHighlight.getVariation(),returns the variation of the text range.
java.awt.im.InputMethodHighlight.isSelected(),returns whether the text range is selected.
java.awt.im.spi.InputMethod.activate(),activates the input method for immediate input processing.
java.awt.im.spi.InputMethod.deactivate(boolean),deactivates the input method.
java.awt.im.spi.InputMethod.dispatchEvent(java.awt.AWTEvent),dispatches the event to the input method.
java.awt.im.spi.InputMethod.dispose(),releases the resources used by this input method.
java.awt.im.spi.InputMethod.endComposition(),ends any input composition that may currently be going on in this context.
java.awt.im.spi.InputMethod.getControlObject(),"returns a control object from this input method, or null."
java.awt.im.spi.InputMethod.getLocale(),returns the current input locale.
java.awt.im.spi.InputMethod.hideWindows(),closes or hides all windows opened by this input method instance or its class.
java.awt.im.spi.InputMethod.isCompositionEnabled(),determines whether this input method is enabled.
java.awt.im.spi.InputMethod.notifyClientWindowChange(java.awt.Rectangle),notifies this input method of changes in the client window location or state.
java.awt.im.spi.InputMethod.reconvert(),starts the reconversion operation.
java.awt.im.spi.InputMethod.removeNotify(),"notifies the input method that a client component has been removed from its containment hierarchy, or that input method support has been disabled for the component."
java.awt.im.spi.InputMethod.setCharacterSubsets(java.lang.Character.Subset[]),sets the subsets of the unicode character set that this input method is allowed to input.
java.awt.im.spi.InputMethod.setCompositionEnabled(boolean),"enables or disables this input method for composition, depending on the value of the parameter enable."
java.awt.im.spi.InputMethod.setInputMethodContext(java.awt.im.spi.InputMethodContext),"sets the input method context, which is used to dispatch input method events to the client component and to request information from the client component."
java.awt.im.spi.InputMethod.setLocale(java.util.Locale),attempts to set the input locale.
"java.awt.im.spi.InputMethodContext.createInputMethodJFrame(java.lang.String,boolean)",creates a top-level swing jframe for use by the input method.
"java.awt.im.spi.InputMethodContext.createInputMethodWindow(java.lang.String,boolean)",creates a top-level window for use by the input method.
"java.awt.im.spi.InputMethodContext.dispatchInputMethodEvent(int,java.text.AttributedCharacterIterator,int,java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)",creates an input method event from the arguments given and dispatches it to the client component.
"java.awt.im.spi.InputMethodContext.enableClientWindowNotification(java.awt.im.spi.InputMethod,boolean)",enables or disables notification of the current client window's location and state for the specified input method.
java.awt.im.spi.InputMethodDescriptor.createInputMethod(),creates a new instance of the corresponding input method.
java.awt.im.spi.InputMethodDescriptor.getAvailableLocales(),returns the locales supported by the corresponding input method.
"java.awt.im.spi.InputMethodDescriptor.getInputMethodDisplayName(java.util.Locale,java.util.Locale)",returns the user-visible name of the corresponding input method for the given input locale in the language in which the name will be displayed.
java.awt.im.spi.InputMethodDescriptor.getInputMethodIcon(java.util.Locale),returns an icon for the corresponding input method.
java.awt.im.spi.InputMethodDescriptor.hasDynamicLocaleList(),returns whether the list of available locales can change at runtime.
"java.awt.image.BufferedImageOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)",creates a zeroed destination image with the correct size and number of bands.
"java.awt.image.BufferedImageOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)",performs a single-input/single-output operation on a bufferedimage.
java.awt.image.BufferedImageOp.getBounds2D(java.awt.image.BufferedImage),returns the bounding box of the filtered destination image.
"java.awt.image.BufferedImageOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)",returns the location of the corresponding destination point given a point in the source image.
java.awt.image.BufferedImageOp.getRenderingHints(),returns the rendering hints for this operation.
java.awt.image.ImageConsumer.imageComplete(int),"the imagecomplete method is called when the imageproducer is finished delivering all of the pixels that the source image contains, or when a single frame of a multi-frame animation has been completed, or when an error in loading or producing the image has occurred."
java.awt.image.ImageConsumer.setColorModel(java.awt.image.ColorModel),sets the colormodel object used for the majority of the pixels reported using the setpixels method calls.
"java.awt.image.ImageConsumer.setDimensions(int,int)",the dimensions of the source image are reported using the setdimensions method call.
java.awt.image.ImageConsumer.setHints(int),sets the hints that the imageconsumer uses to process the pixels delivered by the imageproducer.
"java.awt.image.ImageConsumer.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)",delivers the pixels of the image with one or more calls to this method.
"java.awt.image.ImageConsumer.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)",the pixels of the image are delivered using one or more calls to the setpixels method.
"java.awt.image.ImageConsumer.setProperties(,?>)",sets the extensible list of properties associated with this image.
"java.awt.image.ImageObserver.imageUpdate(java.awt.Image,int,int,int,int,int)",this method is called when information about an image which was previously requested using an asynchronous interface becomes available.
java.awt.image.ImageProducer.addConsumer(java.awt.image.ImageConsumer),registers an imageconsumer with the imageproducer for access to the image data during a later reconstruction of the image.
java.awt.image.ImageProducer.isConsumer(java.awt.image.ImageConsumer),determines if a specified imageconsumer object is currently registered with this imageproducer as one of its consumers.
java.awt.image.ImageProducer.removeConsumer(java.awt.image.ImageConsumer),removes the specified imageconsumer object from the list of consumers currently registered to receive image data.
java.awt.image.ImageProducer.requestTopDownLeftRightResend(java.awt.image.ImageConsumer),"requests, on behalf of the imageconsumer, that the imageproducer attempt to resend the image data one more time in topdownleftright order so that higher quality conversion algorithms which depend on receiving pixels in order can be used to produce a better output version of the image."
java.awt.image.ImageProducer.startProduction(java.awt.image.ImageConsumer),registers the specified imageconsumer object as a consumer and starts an immediate reconstruction of the image data which will then be delivered to this consumer and any other consumer which might have already been registered with the producer.
java.awt.image.RasterOp.createCompatibleDestRaster(java.awt.image.Raster),creates a zeroed destination raster with the correct size and number of bands.
"java.awt.image.RasterOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)",performs a single-input/single-output operation from a source raster to a destination raster.
java.awt.image.RasterOp.getBounds2D(java.awt.image.Raster),returns the bounding box of the filtered destination raster.
"java.awt.image.RasterOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)",returns the location of the destination point given a point in the source raster.
java.awt.image.RasterOp.getRenderingHints(),returns the rendering hints for this rasterop.
java.awt.image.RenderedImage.copyData(java.awt.image.WritableRaster),computes an arbitrary rectangular region of the renderedimage and copies it into a caller-supplied writableraster.
java.awt.image.RenderedImage.getColorModel(),returns the colormodel associated with this image.
java.awt.image.RenderedImage.getData(),returns the image as one large tile (for tile based images this will require fetching the whole image and copying the image data over).
java.awt.image.RenderedImage.getData(java.awt.Rectangle),computes and returns an arbitrary region of the renderedimage.
java.awt.image.RenderedImage.getHeight(),returns the height of the renderedimage.
java.awt.image.RenderedImage.getMinTileX(),returns the minimum tile index in the x direction.
java.awt.image.RenderedImage.getMinTileY(),returns the minimum tile index in the y direction.
java.awt.image.RenderedImage.getMinX(),returns the minimum x coordinate (inclusive) of the renderedimage.
java.awt.image.RenderedImage.getMinY(),returns the minimum y coordinate (inclusive) of the renderedimage.
java.awt.image.RenderedImage.getNumXTiles(),returns the number of tiles in the x direction.
java.awt.image.RenderedImage.getNumYTiles(),returns the number of tiles in the y direction.
java.awt.image.RenderedImage.getProperty(java.lang.String),gets a property from the property set of this image.
java.awt.image.RenderedImage.getPropertyNames(),"returns an array of names recognized by getproperty(string) or null, if no property names are recognized."
java.awt.image.RenderedImage.getSampleModel(),returns the samplemodel associated with this image.
java.awt.image.RenderedImage.getSources(),returns a vector of renderedimages that are the immediate sources of image data for this renderedimage.
"java.awt.image.RenderedImage.getTile(int,int)","returns tile (tilex, tiley)."
java.awt.image.RenderedImage.getTileGridXOffset(),"returns the x offset of the tile grid relative to the origin, i."
java.awt.image.RenderedImage.getTileGridYOffset(),"returns the y offset of the tile grid relative to the origin, i."
java.awt.image.RenderedImage.getTileHeight(),returns the tile height in pixels.
java.awt.image.RenderedImage.getTileWidth(),returns the tile width in pixels.
java.awt.image.RenderedImage.getWidth(),returns the width of the renderedimage.
"java.awt.image.TileObserver.tileUpdate(java.awt.image.WritableRenderedImage,int,int,boolean)","a tile is about to be updated (it is either about to be grabbed for writing, or it is being released from writing)."
java.awt.image.WritableRenderedImage.addTileObserver(java.awt.image.TileObserver),adds an observer.
"java.awt.image.WritableRenderedImage.getWritableTile(int,int)",checks out a tile for writing.
java.awt.image.WritableRenderedImage.getWritableTileIndices(),returns an array of point objects indicating which tiles are checked out for writing.
java.awt.image.WritableRenderedImage.hasTileWriters(),returns whether any tile is checked out for writing.
"java.awt.image.WritableRenderedImage.isTileWritable(int,int)",returns whether a tile is currently checked out for writing.
"java.awt.image.WritableRenderedImage.releaseWritableTile(int,int)",relinquishes the right to write to a tile.
java.awt.image.WritableRenderedImage.removeTileObserver(java.awt.image.TileObserver),removes an observer.
java.awt.image.WritableRenderedImage.setData(java.awt.image.Raster),"sets a rect of the image to the contents of the raster r, which is assumed to be in the same coordinate space as the writablerenderedimage."
"java.awt.image.AffineTransformOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)",creates a zeroed destination image with the correct size and number of bands.
java.awt.image.AffineTransformOp.createCompatibleDestRaster(java.awt.image.Raster),creates a zeroed destination raster with the correct size and number of bands.
"java.awt.image.AffineTransformOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)",transforms the source bufferedimage and stores the results in the destination bufferedimage.
"java.awt.image.AffineTransformOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)",transforms the source raster and stores the results in the destination raster.
java.awt.image.AffineTransformOp.getBounds2D(java.awt.image.BufferedImage),returns the bounding box of the transformed destination.
java.awt.image.AffineTransformOp.getBounds2D(java.awt.image.Raster),returns the bounding box of the transformed destination.
java.awt.image.AffineTransformOp.getInterpolationType(),returns the interpolation type used by this op.
"java.awt.image.AffineTransformOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)",returns the location of the corresponding destination point given a point in the source.
java.awt.image.AffineTransformOp.getRenderingHints(),returns the rendering hints used by this transform operation.
java.awt.image.AffineTransformOp.getTransform(),returns the affine transform used by this transform operation.
java.awt.image.AreaAveragingScaleFilter.setHints(int),detect if the data is being delivered with the necessary hints to allow the averaging algorithm to do its work.
"java.awt.image.AreaAveragingScaleFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)",combine the components for the delivered byte pixels into the accumulation arrays and send on any averaged data for rows of pixels that are complete.
"java.awt.image.AreaAveragingScaleFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)",combine the components for the delivered int pixels into the accumulation arrays and send on any averaged data for rows of pixels that are complete.
java.awt.image.BandCombineOp.createCompatibleDestRaster(java.awt.image.Raster),creates a zeroed destination raster with the correct size and number of bands.
"java.awt.image.BandCombineOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)",transforms the raster using the matrix specified in the constructor.
java.awt.image.BandCombineOp.getBounds2D(java.awt.image.Raster),returns the bounding box of the transformed destination.
java.awt.image.BandCombineOp.getMatrix(),returns a copy of the linear combination matrix.
"java.awt.image.BandCombineOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)",returns the location of the corresponding destination point given a point in the source raster.
java.awt.image.BandCombineOp.getRenderingHints(),returns the rendering hints for this operation.
"java.awt.image.BandedSampleModel.createCompatibleSampleModel(int,int)",creates a new bandedsamplemodel with the specified width and height.
java.awt.image.BandedSampleModel.createDataBuffer(),"creates a databuffer that corresponds to this bandedsamplemodel, the databuffer's data type, number of banks, and size will be consistent with this bandedsamplemodel."
java.awt.image.BandedSampleModel.createSubsetSampleModel(int[]),creates a new bandedsamplemodel with a subset of the bands of this bandedsamplemodel.
"java.awt.image.BandedSampleModel.getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)",returns data for a single pixel in a primitive array of type transfertype.
"java.awt.image.BandedSampleModel.getPixel(int,int,int[],java.awt.image.DataBuffer)",returns all samples for the specified pixel in an int array.
"java.awt.image.BandedSampleModel.getPixels(int,int,int,int,int[],java.awt.image.DataBuffer)","returns all samples for the specified rectangle of pixels in an int array, one sample per data array element."
"java.awt.image.BandedSampleModel.getSample(int,int,int,java.awt.image.DataBuffer)","returns as int the sample in a specified band for the pixel located at (x,y)."
"java.awt.image.BandedSampleModel.getSampleDouble(int,int,int,java.awt.image.DataBuffer)","returns the sample in a specified band for a pixel located at (x,y) as a double."
"java.awt.image.BandedSampleModel.getSampleFloat(int,int,int,java.awt.image.DataBuffer)","returns the sample in a specified band for the pixel located at (x,y) as a float."
"java.awt.image.BandedSampleModel.getSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)","returns the samples in a specified band for the specified rectangle of pixels in an int array, one sample per data array element."
"java.awt.image.BandedSampleModel.setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)",sets the data for a single pixel in the specified databuffer from a primitive array of type transfertype.
"java.awt.image.BandedSampleModel.setPixel(int,int,int[],java.awt.image.DataBuffer)",sets a pixel in the databuffer using an int array of samples for input.
"java.awt.image.BandedSampleModel.setPixels(int,int,int,int,int[],java.awt.image.DataBuffer)",sets all samples for a rectangle of pixels from an int array containing one sample per array element.
"java.awt.image.BandedSampleModel.setSample(int,int,int,int,java.awt.image.DataBuffer)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using an int for input."
"java.awt.image.BandedSampleModel.setSample(int,int,int,float,java.awt.image.DataBuffer)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using a float for input."
"java.awt.image.BandedSampleModel.setSample(int,int,int,double,java.awt.image.DataBuffer)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using a double for input."
"java.awt.image.BandedSampleModel.setSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)",sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element.
java.awt.image.BufferedImage.addTileObserver(java.awt.image.TileObserver),adds a tile observer.
java.awt.image.BufferedImage.coerceData(boolean),forces the data to match the state specified in the isalphapremultiplied variable.
java.awt.image.BufferedImage.copyData(java.awt.image.WritableRaster),computes an arbitrary rectangular region of the bufferedimage and copies it into a specified writableraster.
java.awt.image.BufferedImage.createGraphics(),"creates a graphics2d, which can be used to draw into this bufferedimage."
java.awt.image.BufferedImage.getAlphaRaster(),"returns a writableraster representing the alpha channel for bufferedimage objects with colormodel objects that support a separate spatial alpha channel, such as componentcolormodel and directcolormodel."
java.awt.image.BufferedImage.getColorModel(),returns the colormodel.
java.awt.image.BufferedImage.getData(),returns the image as one large tile.
java.awt.image.BufferedImage.getData(java.awt.Rectangle),computes and returns an arbitrary region of the bufferedimage.
java.awt.image.BufferedImage.getGraphics(),"this method returns a graphics2d, but is here for backwards compatibility."
java.awt.image.BufferedImage.getHeight(),returns the height of the bufferedimage.
java.awt.image.BufferedImage.getHeight(java.awt.image.ImageObserver),returns the height of the bufferedimage.
java.awt.image.BufferedImage.getMinTileX(),returns the minimum tile index in the x direction.
java.awt.image.BufferedImage.getMinTileY(),returns the minimum tile index in the y direction.
java.awt.image.BufferedImage.getMinX(),returns the minimum x coordinate of this bufferedimage.
java.awt.image.BufferedImage.getMinY(),returns the minimum y coordinate of this bufferedimage.
java.awt.image.BufferedImage.getNumXTiles(),returns the number of tiles in the x direction.
java.awt.image.BufferedImage.getNumYTiles(),returns the number of tiles in the y direction.
"java.awt.image.BufferedImage.getProperty(java.lang.String,java.awt.image.ImageObserver)",returns a property of the image by name.
java.awt.image.BufferedImage.getProperty(java.lang.String),returns a property of the image by name.
java.awt.image.BufferedImage.getPropertyNames(),"returns an array of names recognized by getproperty(string) or null, if no property names are recognized."
java.awt.image.BufferedImage.getRaster(),returns the writableraster.
"java.awt.image.BufferedImage.getRGB(int,int)",returns an integer pixel in the default rgb color model (type_int_argb) and default srgb colorspace.
"java.awt.image.BufferedImage.getRGB(int,int,int,int,int[],int,int)","returns an array of integer pixels in the default rgb color model (type_int_argb) and default srgb color space, from a portion of the image data."
java.awt.image.BufferedImage.getSampleModel(),returns the samplemodel associated with this bufferedimage.
java.awt.image.BufferedImage.getSource(),returns the object that produces the pixels for the image.
java.awt.image.BufferedImage.getSources(),"returns a vector of renderedimage objects that are the immediate sources, not the sources of these immediate sources, of image data for this bufferedimage."
"java.awt.image.BufferedImage.getSubimage(int,int,int,int)",returns a subimage defined by a specified rectangular region.
"java.awt.image.BufferedImage.getTile(int,int)","returns tile (tilex, tiley)."
java.awt.image.BufferedImage.getTileGridXOffset(),"returns the x offset of the tile grid relative to the origin, for example, the x coordinate of the location of tile (0, 0)."
java.awt.image.BufferedImage.getTileGridYOffset(),"returns the y offset of the tile grid relative to the origin, for example, the y coordinate of the location of tile (0, 0)."
java.awt.image.BufferedImage.getTileHeight(),returns the tile height in pixels.
java.awt.image.BufferedImage.getTileWidth(),returns the tile width in pixels.
java.awt.image.BufferedImage.getTransparency(),returns the transparency.
java.awt.image.BufferedImage.getType(),returns the image type.
java.awt.image.BufferedImage.getWidth(),returns the width of the bufferedimage.
java.awt.image.BufferedImage.getWidth(java.awt.image.ImageObserver),returns the width of the bufferedimage.
"java.awt.image.BufferedImage.getWritableTile(int,int)",checks out a tile for writing.
java.awt.image.BufferedImage.getWritableTileIndices(),returns an array of point objects indicating which tiles are checked out for writing.
java.awt.image.BufferedImage.hasTileWriters(),returns whether or not any tile is checked out for writing.
java.awt.image.BufferedImage.isAlphaPremultiplied(),returns whether or not the alpha has been premultiplied.
"java.awt.image.BufferedImage.isTileWritable(int,int)",returns whether or not a tile is currently checked out for writing.
"java.awt.image.BufferedImage.releaseWritableTile(int,int)",relinquishes permission to write to a tile.
java.awt.image.BufferedImage.removeTileObserver(java.awt.image.TileObserver),removes a tile observer.
java.awt.image.BufferedImage.setData(java.awt.image.Raster),"sets a rectangular region of the image to the contents of the specified raster r, which is assumed to be in the same coordinate space as the bufferedimage."
"java.awt.image.BufferedImage.setRGB(int,int,int)",sets a pixel in this bufferedimage to the specified rgb value.
"java.awt.image.BufferedImage.setRGB(int,int,int,int,int[],int,int)","sets an array of integer pixels in the default rgb color model (type_int_argb) and default srgb color space, into a portion of the image data."
java.awt.image.BufferedImage.toString(),returns a string representation of this bufferedimage object and its values.
java.awt.image.BufferedImageFilter.getBufferedImageOp(),returns the bufferedimageop.
java.awt.image.BufferedImageFilter.imageComplete(int),filters the information provided in the imagecomplete method of the imageconsumer interface.
java.awt.image.BufferedImageFilter.setColorModel(java.awt.image.ColorModel),filters the information provided in the setcolormodel method of the imageconsumer interface.
"java.awt.image.BufferedImageFilter.setDimensions(int,int)",filters the information provided in the setdimensions method of the imageconsumer interface.
"java.awt.image.BufferedImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)",filters the information provided in the setpixels method of the imageconsumer interface which takes an array of bytes.
"java.awt.image.BufferedImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)",filters the information provided in the setpixels method of the imageconsumer interface which takes an array of integers.
java.awt.image.BufferStrategy.contentsLost(),returns whether the drawing buffer was lost since the last call to getdrawgraphics.
java.awt.image.BufferStrategy.contentsRestored(),returns whether the drawing buffer was recently restored from a lost state and reinitialized to the default background color (white).
java.awt.image.BufferStrategy.dispose(),releases system resources currently consumed by this bufferstrategy and removes it from the associated component.
java.awt.image.BufferStrategy.getCapabilities(),returns the buffercapabilities for this bufferstrategy.
java.awt.image.BufferStrategy.getDrawGraphics(),creates a graphics context for the drawing buffer.
java.awt.image.BufferStrategy.show(),makes the next available buffer visible by either copying the memory (blitting) or changing the display pointer (flipping).
java.awt.image.ByteLookupTable.getTable(),returns the lookup table data by reference.
"java.awt.image.ByteLookupTable.lookupPixel(int[],int[])","returns an array of samples of a pixel, translated with the lookup table."
"java.awt.image.ByteLookupTable.lookupPixel(byte[],byte[])","returns an array of samples of a pixel, translated with the lookup table."
"java.awt.image.ColorConvertOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)","creates a zeroed destination image with the correct size and number of bands, given this source."
java.awt.image.ColorConvertOp.createCompatibleDestRaster(java.awt.image.Raster),"creates a zeroed destination raster with the correct size and number of bands, given this source."
"java.awt.image.ColorConvertOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)",colorconverts the source bufferedimage.
"java.awt.image.ColorConvertOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)",colorconverts the image data in the source raster.
java.awt.image.ColorConvertOp.getBounds2D(java.awt.image.BufferedImage),"returns the bounding box of the destination, given this source."
java.awt.image.ColorConvertOp.getBounds2D(java.awt.image.Raster),"returns the bounding box of the destination, given this source."
java.awt.image.ColorConvertOp.getICC_Profiles(),returns the array of icc_profiles used to construct this colorconvertop.
"java.awt.image.ColorConvertOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)",returns the location of the destination point given a point in the source.
java.awt.image.ColorConvertOp.getRenderingHints(),returns the rendering hints used by this op.
"java.awt.image.ColorModel.coerceData(java.awt.image.WritableRaster,boolean)","forces the raster data to match the state specified in the isalphapremultiplied variable, assuming the data is currently correctly described by this colormodel."
"java.awt.image.ColorModel.createCompatibleSampleModel(int,int)",creates a samplemodel with the specified width and height that has a data layout compatible with this colormodel.
"java.awt.image.ColorModel.createCompatibleWritableRaster(int,int)",creates a writableraster with the specified width and height that has a data layout (samplemodel) compatible with this colormodel.
java.awt.image.ColorModel.equals(java.lang.Object),tests if the specified object is an instance of colormodel and if it equals this colormodel.
java.awt.image.ColorModel.finalize(),disposes of system resources associated with this colormodel once this colormodel is no longer referenced.
java.awt.image.ColorModel.getAlpha(int),"returns the alpha component for the specified pixel, scaled from 0 to 255."
java.awt.image.ColorModel.getAlpha(java.lang.Object),"returns the alpha component for the specified pixel, scaled from 0 to 255."
java.awt.image.ColorModel.getAlphaRaster(java.awt.image.WritableRaster),"returns a raster representing the alpha channel of an image, extracted from the input raster, provided that pixel values of this colormodel represent color and alpha information as separate spatial bands (e."
java.awt.image.ColorModel.getBlue(int),"returns the blue color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.ColorModel.getBlue(java.lang.Object),"returns the blue color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.ColorModel.getColorSpace(),returns the colorspace associated with this colormodel.
"java.awt.image.ColorModel.getComponents(int,int[],int)",returns an array of unnormalized color/alpha components given a pixel in this colormodel.
"java.awt.image.ColorModel.getComponents(java.lang.Object,int[],int)",returns an array of unnormalized color/alpha components given a pixel in this colormodel.
java.awt.image.ColorModel.getComponentSize(int),returns the number of bits for the specified color/alpha component.
java.awt.image.ColorModel.getComponentSize(),returns an array of the number of bits per color/alpha component.
"java.awt.image.ColorModel.getDataElement(int[],int)","returns a pixel value represented as an int in this colormodel, given an array of unnormalized color/alpha components."
"java.awt.image.ColorModel.getDataElement(float[],int)","returns a pixel value represented as an int in this colormodel, given an array of normalized color/alpha components."
"java.awt.image.ColorModel.getDataElements(int,java.lang.Object)","returns a data element array representation of a pixel in this colormodel, given an integer pixel representation in the default rgb color model."
"java.awt.image.ColorModel.getDataElements(int[],int,java.lang.Object)","returns a data element array representation of a pixel in this colormodel, given an array of unnormalized color/alpha components."
"java.awt.image.ColorModel.getDataElements(float[],int,java.lang.Object)","returns a data element array representation of a pixel in this colormodel, given an array of normalized color/alpha components."
java.awt.image.ColorModel.getGreen(int),"returns the green color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.ColorModel.getGreen(java.lang.Object),"returns the green color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
"java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)","returns an array of all of the color/alpha components in normalized form, given an unnormalized component array."
"java.awt.image.ColorModel.getNormalizedComponents(java.lang.Object,float[],int)","returns an array of all of the color/alpha components in normalized form, given a pixel in this colormodel."
java.awt.image.ColorModel.getNumColorComponents(),returns the number of color components in this colormodel.
java.awt.image.ColorModel.getNumComponents(),"returns the number of components, including alpha, in this colormodel."
java.awt.image.ColorModel.getPixelSize(),returns the number of bits per pixel described by this colormodel.
java.awt.image.ColorModel.getRed(int),"returns the red color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.ColorModel.getRed(java.lang.Object),"returns the red color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.ColorModel.getRGB(int),returns the color/alpha components of the pixel in the default rgb color model format.
java.awt.image.ColorModel.getRGB(java.lang.Object),returns the color/alpha components for the specified pixel in the default rgb color model format.
java.awt.image.ColorModel.getRGBdefault(),returns a directcolormodel that describes the default format for integer rgb values used in many of the methods in the awt image interfaces for the convenience of the programmer.
java.awt.image.ColorModel.getTransferType(),returns the transfer type of this colormodel.
java.awt.image.ColorModel.getTransparency(),returns the transparency.
"java.awt.image.ColorModel.getUnnormalizedComponents(float[],int,int[],int)","returns an array of all of the color/alpha components in unnormalized form, given a normalized component array."
java.awt.image.ColorModel.hasAlpha(),returns whether or not alpha is supported in this colormodel.
java.awt.image.ColorModel.hashCode(),returns the hash code for this colormodel.
java.awt.image.ColorModel.isAlphaPremultiplied(),returns whether or not the alpha has been premultiplied in the pixel values to be translated by this colormodel.
java.awt.image.ColorModel.isCompatibleRaster(java.awt.image.Raster),returns true if raster is compatible with this colormodel and false if it is not.
java.awt.image.ColorModel.isCompatibleSampleModel(java.awt.image.SampleModel),checks if the samplemodel is compatible with this colormodel.
java.awt.image.ColorModel.toString(),returns the string representation of the contents of this colormodelobject.
"java.awt.image.ComponentColorModel.coerceData(java.awt.image.WritableRaster,boolean)","forces the raster data to match the state specified in the isalphapremultiplied variable, assuming the data is currently correctly described by this colormodel."
"java.awt.image.ComponentColorModel.createCompatibleSampleModel(int,int)","creates a samplemodel with the specified width and height, that has a data layout compatible with this colormodel."
"java.awt.image.ComponentColorModel.createCompatibleWritableRaster(int,int)","creates a writableraster with the specified width and height, that has a data layout (samplemodel) compatible with this colormodel."
java.awt.image.ComponentColorModel.equals(java.lang.Object),compares this color model with another for equality.
java.awt.image.ComponentColorModel.getAlpha(int),"returns the alpha component for the specified pixel, scaled from 0 to 255."
java.awt.image.ComponentColorModel.getAlpha(java.lang.Object),"returns the alpha component for the specified pixel, scaled from 0 to 255."
java.awt.image.ComponentColorModel.getAlphaRaster(java.awt.image.WritableRaster),"returns a raster representing the alpha channel of an image, extracted from the input raster."
java.awt.image.ComponentColorModel.getBlue(int),"returns the blue color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.ComponentColorModel.getBlue(java.lang.Object),"returns the blue color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
"java.awt.image.ComponentColorModel.getComponents(int,int[],int)",returns an array of unnormalized color/alpha components given a pixel in this colormodel.
"java.awt.image.ComponentColorModel.getComponents(java.lang.Object,int[],int)",returns an array of unnormalized color/alpha components given a pixel in this colormodel.
"java.awt.image.ComponentColorModel.getDataElement(int[],int)","returns a pixel value represented as an int in this colormodel, given an array of unnormalized color/alpha components."
"java.awt.image.ComponentColorModel.getDataElement(float[],int)","returns a pixel value represented as an int in this colormodel, given an array of normalized color/alpha components."
"java.awt.image.ComponentColorModel.getDataElements(int,java.lang.Object)","returns a data element array representation of a pixel in this colormodel, given an integer pixel representation in the default rgb color model."
"java.awt.image.ComponentColorModel.getDataElements(int[],int,java.lang.Object)","returns a data element array representation of a pixel in this colormodel, given an array of unnormalized color/alpha components."
"java.awt.image.ComponentColorModel.getDataElements(float[],int,java.lang.Object)","returns a data element array representation of a pixel in this colormodel, given an array of normalized color/alpha components."
java.awt.image.ComponentColorModel.getGreen(int),"returns the green color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.ComponentColorModel.getGreen(java.lang.Object),"returns the green color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
"java.awt.image.ComponentColorModel.getNormalizedComponents(int[],int,float[],int)","returns an array of all of the color/alpha components in normalized form, given an unnormalized component array."
"java.awt.image.ComponentColorModel.getNormalizedComponents(java.lang.Object,float[],int)","returns an array of all of the color/alpha components in normalized form, given a pixel in this colormodel."
java.awt.image.ComponentColorModel.getRed(int),"returns the red color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.ComponentColorModel.getRed(java.lang.Object),"returns the red color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.ComponentColorModel.getRGB(int),returns the color/alpha components of the pixel in the default rgb color model format.
java.awt.image.ComponentColorModel.getRGB(java.lang.Object),returns the color/alpha components for the specified pixel in the default rgb color model format.
"java.awt.image.ComponentColorModel.getUnnormalizedComponents(float[],int,int[],int)","returns an array of all of the color/alpha components in unnormalized form, given a normalized component array."
java.awt.image.ComponentColorModel.isCompatibleRaster(java.awt.image.Raster),returns true if raster is compatible with this colormodel; false if it is not.
java.awt.image.ComponentColorModel.isCompatibleSampleModel(java.awt.image.SampleModel),checks whether or not the specified samplemodel is compatible with this colormodel.
"java.awt.image.ComponentSampleModel.createCompatibleSampleModel(int,int)",creates a new componentsamplemodel with the specified width and height.
java.awt.image.ComponentSampleModel.createDataBuffer(),creates a databuffer that corresponds to this componentsamplemodel.
java.awt.image.ComponentSampleModel.createSubsetSampleModel(int[]),creates a new componentsamplemodel with a subset of the bands of this componentsamplemodel.
java.awt.image.ComponentSampleModel.getBandOffsets(),returns the band offset for all bands.
java.awt.image.ComponentSampleModel.getBankIndices(),returns the bank indices for all bands.
"java.awt.image.ComponentSampleModel.getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)",returns data for a single pixel in a primitive array of type transfertype.
java.awt.image.ComponentSampleModel.getNumDataElements(),"returns the number of data elements needed to transfer a pixel with the getdataelements(int, int, object, databuffer) and setdataelements(int, int, object, databuffer) methods."
"java.awt.image.ComponentSampleModel.getOffset(int,int)","gets the offset for the first band of pixel (x,y)."
"java.awt.image.ComponentSampleModel.getOffset(int,int,int)","gets the offset for band b of pixel (x,y)."
"java.awt.image.ComponentSampleModel.getPixel(int,int,int[],java.awt.image.DataBuffer)","returns all samples for the specified pixel in an int array, one sample per array element."
"java.awt.image.ComponentSampleModel.getPixels(int,int,int,int,int[],java.awt.image.DataBuffer)","returns all samples for the specified rectangle of pixels in an int array, one sample per array element."
java.awt.image.ComponentSampleModel.getPixelStride(),returns the pixel stride of this componentsamplemodel.
"java.awt.image.ComponentSampleModel.getSample(int,int,int,java.awt.image.DataBuffer)","returns as int the sample in a specified band for the pixel located at (x,y)."
"java.awt.image.ComponentSampleModel.getSampleDouble(int,int,int,java.awt.image.DataBuffer)","returns the sample in a specified band for a pixel located at (x,y) as a double."
"java.awt.image.ComponentSampleModel.getSampleFloat(int,int,int,java.awt.image.DataBuffer)","returns the sample in a specified band for the pixel located at (x,y) as a float."
"java.awt.image.ComponentSampleModel.getSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)","returns the samples in a specified band for the specified rectangle of pixels in an int array, one sample per data array element."
java.awt.image.ComponentSampleModel.getSampleSize(),returns the number of bits per sample for all bands.
java.awt.image.ComponentSampleModel.getSampleSize(int),returns the number of bits per sample for the specified band.
java.awt.image.ComponentSampleModel.getScanlineStride(),returns the scanline stride of this componentsamplemodel.
"java.awt.image.ComponentSampleModel.setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)",sets the data for a single pixel in the specified databuffer from a primitive array of type transfertype.
"java.awt.image.ComponentSampleModel.setPixel(int,int,int[],java.awt.image.DataBuffer)",sets a pixel in the databuffer using an int array of samples for input.
"java.awt.image.ComponentSampleModel.setPixels(int,int,int,int,int[],java.awt.image.DataBuffer)",sets all samples for a rectangle of pixels from an int array containing one sample per array element.
"java.awt.image.ComponentSampleModel.setSample(int,int,int,int,java.awt.image.DataBuffer)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using an int for input."
"java.awt.image.ComponentSampleModel.setSample(int,int,int,float,java.awt.image.DataBuffer)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using a float for input."
"java.awt.image.ComponentSampleModel.setSample(int,int,int,double,java.awt.image.DataBuffer)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using a double for input."
"java.awt.image.ComponentSampleModel.setSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)",sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element.
"java.awt.image.ConvolveOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)",creates a zeroed destination image with the correct size and number of bands.
java.awt.image.ConvolveOp.createCompatibleDestRaster(java.awt.image.Raster),"creates a zeroed destination raster with the correct size and number of bands, given this source."
"java.awt.image.ConvolveOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)",performs a convolution on bufferedimages.
"java.awt.image.ConvolveOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)",performs a convolution on rasters.
java.awt.image.ConvolveOp.getBounds2D(java.awt.image.BufferedImage),returns the bounding box of the filtered destination image.
java.awt.image.ConvolveOp.getBounds2D(java.awt.image.Raster),returns the bounding box of the filtered destination raster.
java.awt.image.ConvolveOp.getEdgeCondition(),returns the edge condition.
java.awt.image.ConvolveOp.getKernel(),returns the kernel.
"java.awt.image.ConvolveOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)",returns the location of the destination point given a point in the source.
java.awt.image.ConvolveOp.getRenderingHints(),returns the rendering hints for this op.
"java.awt.image.CropImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)",determine whether the delivered byte pixels intersect the region to be extracted and passes through only that subset of pixels that appear in the output region.
"java.awt.image.CropImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)",determine if the delivered int pixels intersect the region to be extracted and pass through only that subset of pixels that appear in the output region.
"java.awt.image.CropImageFilter.setProperties(,?>)",passes along the properties from the source object after adding a property indicating the cropped region.
java.awt.image.DataBuffer.getDataType(),returns the data type of this databuffer.
java.awt.image.DataBuffer.getDataTypeSize(int),"returns the size (in bits) of the data type, given a datatype tag."
java.awt.image.DataBuffer.getElem(int),returns the requested data array element from the first (default) bank as an integer.
"java.awt.image.DataBuffer.getElem(int,int)",returns the requested data array element from the specified bank as an integer.
java.awt.image.DataBuffer.getElemDouble(int),returns the requested data array element from the first (default) bank as a double.
"java.awt.image.DataBuffer.getElemDouble(int,int)",returns the requested data array element from the specified bank as a double.
java.awt.image.DataBuffer.getElemFloat(int),returns the requested data array element from the first (default) bank as a float.
"java.awt.image.DataBuffer.getElemFloat(int,int)",returns the requested data array element from the specified bank as a float.
java.awt.image.DataBuffer.getNumBanks(),returns the number of banks in this databuffer.
java.awt.image.DataBuffer.getOffset(),returns the offset of the default bank in array elements.
java.awt.image.DataBuffer.getOffsets(),returns the offsets (in array elements) of all the banks.
java.awt.image.DataBuffer.getSize(),returns the size (in array elements) of all banks.
"java.awt.image.DataBuffer.setElem(int,int)",sets the requested data array element in the first (default) bank from the given integer.
"java.awt.image.DataBuffer.setElem(int,int,int)",sets the requested data array element in the specified bank from the given integer.
"java.awt.image.DataBuffer.setElemDouble(int,double)",sets the requested data array element in the first (default) bank from the given double.
"java.awt.image.DataBuffer.setElemDouble(int,int,double)",sets the requested data array element in the specified bank from the given double.
"java.awt.image.DataBuffer.setElemFloat(int,float)",sets the requested data array element in the first (default) bank from the given float.
"java.awt.image.DataBuffer.setElemFloat(int,int,float)",sets the requested data array element in the specified bank from the given float.
java.awt.image.DataBufferByte.getBankData(),returns the data arrays for all banks.
java.awt.image.DataBufferByte.getData(),returns the default (first) byte data array.
java.awt.image.DataBufferByte.getData(int),returns the data array for the specified bank.
java.awt.image.DataBufferByte.getElem(int),returns the requested data array element from the first (default) bank.
"java.awt.image.DataBufferByte.getElem(int,int)",returns the requested data array element from the specified bank.
"java.awt.image.DataBufferByte.setElem(int,int)",sets the requested data array element in the first (default) bank to the specified value.
"java.awt.image.DataBufferByte.setElem(int,int,int)",sets the requested data array element in the specified bank from the given integer.
java.awt.image.DataBufferDouble.getBankData(),returns the data array for all banks.
java.awt.image.DataBufferDouble.getData(),returns the default (first) double data array.
java.awt.image.DataBufferDouble.getData(int),returns the data array for the specified bank.
java.awt.image.DataBufferDouble.getElem(int),returns the requested data array element from the first (default) bank as an int.
"java.awt.image.DataBufferDouble.getElem(int,int)",returns the requested data array element from the specified bank as an int.
java.awt.image.DataBufferDouble.getElemDouble(int),returns the requested data array element from the first (default) bank as a double.
"java.awt.image.DataBufferDouble.getElemDouble(int,int)",returns the requested data array element from the specified bank as a double.
java.awt.image.DataBufferDouble.getElemFloat(int),returns the requested data array element from the first (default) bank as a float.
"java.awt.image.DataBufferDouble.getElemFloat(int,int)",returns the requested data array element from the specified bank as a float.
"java.awt.image.DataBufferDouble.setElem(int,int)",sets the requested data array element in the first (default) bank to the given int.
"java.awt.image.DataBufferDouble.setElem(int,int,int)",sets the requested data array element in the specified bank to the given int.
"java.awt.image.DataBufferDouble.setElemDouble(int,double)",sets the requested data array element in the first (default) bank to the given double.
"java.awt.image.DataBufferDouble.setElemDouble(int,int,double)",sets the requested data array element in the specified bank to the given double.
"java.awt.image.DataBufferDouble.setElemFloat(int,float)",sets the requested data array element in the first (default) bank to the given float.
"java.awt.image.DataBufferDouble.setElemFloat(int,int,float)",sets the requested data array element in the specified bank to the given float.
java.awt.image.DataBufferFloat.getBankData(),returns the data array for all banks.
java.awt.image.DataBufferFloat.getData(),returns the default (first) float data array.
java.awt.image.DataBufferFloat.getData(int),returns the data array for the specified bank.
java.awt.image.DataBufferFloat.getElem(int),returns the requested data array element from the first (default) bank as an int.
"java.awt.image.DataBufferFloat.getElem(int,int)",returns the requested data array element from the specified bank as an int.
java.awt.image.DataBufferFloat.getElemDouble(int),returns the requested data array element from the first (default) bank as a double.
"java.awt.image.DataBufferFloat.getElemDouble(int,int)",returns the requested data array element from the specified bank as a double.
java.awt.image.DataBufferFloat.getElemFloat(int),returns the requested data array element from the first (default) bank as a float.
"java.awt.image.DataBufferFloat.getElemFloat(int,int)",returns the requested data array element from the specified bank as a float.
"java.awt.image.DataBufferFloat.setElem(int,int)",sets the requested data array element in the first (default) bank to the given int.
"java.awt.image.DataBufferFloat.setElem(int,int,int)",sets the requested data array element in the specified bank to the given int.
"java.awt.image.DataBufferFloat.setElemDouble(int,double)",sets the requested data array element in the first (default) bank to the given double.
"java.awt.image.DataBufferFloat.setElemDouble(int,int,double)",sets the requested data array element in the specified bank to the given double.
"java.awt.image.DataBufferFloat.setElemFloat(int,float)",sets the requested data array element in the first (default) bank to the given float.
"java.awt.image.DataBufferFloat.setElemFloat(int,int,float)",sets the requested data array element in the specified bank to the given float.
java.awt.image.DataBufferInt.getBankData(),returns the data arrays for all banks.
java.awt.image.DataBufferInt.getData(),returns the default (first) int data array in databuffer.
java.awt.image.DataBufferInt.getData(int),returns the data array for the specified bank.
java.awt.image.DataBufferInt.getElem(int),returns the requested data array element from the first (default) bank.
"java.awt.image.DataBufferInt.getElem(int,int)",returns the requested data array element from the specified bank.
"java.awt.image.DataBufferInt.setElem(int,int)",sets the requested data array element in the first (default) bank to the specified value.
"java.awt.image.DataBufferInt.setElem(int,int,int)",sets the requested data array element in the specified bank to the integer value i.
java.awt.image.DataBufferShort.getBankData(),returns the data arrays for all banks.
java.awt.image.DataBufferShort.getData(),returns the default (first) byte data array.
java.awt.image.DataBufferShort.getData(int),returns the data array for the specified bank.
java.awt.image.DataBufferShort.getElem(int),returns the requested data array element from the first (default) bank.
"java.awt.image.DataBufferShort.getElem(int,int)",returns the requested data array element from the specified bank.
"java.awt.image.DataBufferShort.setElem(int,int)",sets the requested data array element in the first (default) bank to the specified value.
"java.awt.image.DataBufferShort.setElem(int,int,int)",sets the requested data array element in the specified bank from the given integer.
java.awt.image.DataBufferUShort.getBankData(),returns the data arrays for all banks.
java.awt.image.DataBufferUShort.getData(),returns the default (first) unsigned-short data array.
java.awt.image.DataBufferUShort.getData(int),returns the data array for the specified bank.
java.awt.image.DataBufferUShort.getElem(int),returns the requested data array element from the first (default) bank.
"java.awt.image.DataBufferUShort.getElem(int,int)",returns the requested data array element from the specified bank.
"java.awt.image.DataBufferUShort.setElem(int,int)",sets the requested data array element in the first (default) bank to the specified value.
"java.awt.image.DataBufferUShort.setElem(int,int,int)",sets the requested data array element in the specified bank from the given integer.
"java.awt.image.DirectColorModel.coerceData(java.awt.image.WritableRaster,boolean)","forces the raster data to match the state specified in the isalphapremultiplied variable, assuming the data is currently correctly described by this colormodel."
"java.awt.image.DirectColorModel.createCompatibleWritableRaster(int,int)",creates a writableraster with the specified width and height that has a data layout (samplemodel) compatible with this colormodel.
java.awt.image.DirectColorModel.getAlpha(int),"returns the alpha component for the specified pixel, scaled from 0 to 255."
java.awt.image.DirectColorModel.getAlpha(java.lang.Object),"returns the alpha component for the specified pixel, scaled from 0 to 255."
java.awt.image.DirectColorModel.getAlphaMask(),returns the mask indicating which bits in an int pixel representation contain the alpha component.
java.awt.image.DirectColorModel.getBlue(int),"returns the blue color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.DirectColorModel.getBlue(java.lang.Object),"returns the blue color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.DirectColorModel.getBlueMask(),returns the mask indicating which bits in an int pixel representation contain the blue color component.
"java.awt.image.DirectColorModel.getComponents(int,int[],int)",returns an array of unnormalized color/alpha components given a pixel in this colormodel.
"java.awt.image.DirectColorModel.getComponents(java.lang.Object,int[],int)",returns an array of unnormalized color/alpha components given a pixel in this colormodel.
"java.awt.image.DirectColorModel.getDataElement(int[],int)","returns a pixel value represented as an int in this colormodel, given an array of unnormalized color/alpha components."
"java.awt.image.DirectColorModel.getDataElements(int,java.lang.Object)","returns a data element array representation of a pixel in this colormodel, given an integer pixel representation in the default rgb color model."
"java.awt.image.DirectColorModel.getDataElements(int[],int,java.lang.Object)","returns a data element array representation of a pixel in this colormodel, given an array of unnormalized color/alpha components."
java.awt.image.DirectColorModel.getGreen(int),"returns the green color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.DirectColorModel.getGreen(java.lang.Object),"returns the green color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.DirectColorModel.getGreenMask(),returns the mask indicating which bits in an int pixel representation contain the green color component.
java.awt.image.DirectColorModel.getRed(int),"returns the red color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.DirectColorModel.getRed(java.lang.Object),"returns the red color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.DirectColorModel.getRedMask(),returns the mask indicating which bits in an int pixel representation contain the red color component.
java.awt.image.DirectColorModel.getRGB(int),returns the color/alpha components of the pixel in the default rgb color model format.
java.awt.image.DirectColorModel.getRGB(java.lang.Object),returns the color/alpha components for the specified pixel in the default rgb color model format.
java.awt.image.DirectColorModel.isCompatibleRaster(java.awt.image.Raster),returns true if raster is compatible with this colormodel and false if it is not.
java.awt.image.DirectColorModel.toString(),returns a string that represents this directcolormodel.
java.awt.image.FilteredImageSource.addConsumer(java.awt.image.ImageConsumer),adds the specified imageconsumer to the list of consumers interested in data for the filtered image.
java.awt.image.FilteredImageSource.isConsumer(java.awt.image.ImageConsumer),determines whether an imageconsumer is on the list of consumers currently interested in data for this image.
java.awt.image.FilteredImageSource.removeConsumer(java.awt.image.ImageConsumer),removes an imageconsumer from the list of consumers interested in data for this image.
java.awt.image.FilteredImageSource.requestTopDownLeftRightResend(java.awt.image.ImageConsumer),"requests that a given imageconsumer have the image data delivered one more time in top-down, left-right order."
java.awt.image.FilteredImageSource.startProduction(java.awt.image.ImageConsumer),starts production of the filtered image.
java.awt.image.ImageFilter.clone(),clones this object.
java.awt.image.ImageFilter.getFilterInstance(java.awt.image.ImageConsumer),returns a unique instance of an imagefilter object which will actually perform the filtering for the specified imageconsumer.
java.awt.image.ImageFilter.imageComplete(int),filters the information provided in the imagecomplete method of the imageconsumer interface.
java.awt.image.ImageFilter.resendTopDownLeftRight(java.awt.image.ImageProducer),responds to a request for a topdownleftright (tdlr) ordered resend of the pixel data from an imageconsumer.
java.awt.image.ImageFilter.setColorModel(java.awt.image.ColorModel),filter the information provided in the setcolormodel method of the imageconsumer interface.
"java.awt.image.ImageFilter.setDimensions(int,int)",filters the information provided in the setdimensions method of the imageconsumer interface.
java.awt.image.ImageFilter.setHints(int),filters the information provided in the sethints method of the imageconsumer interface.
"java.awt.image.ImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)",filters the information provided in the setpixels method of the imageconsumer interface which takes an array of bytes.
"java.awt.image.ImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)",filters the information provided in the setpixels method of the imageconsumer interface which takes an array of integers.
"java.awt.image.ImageFilter.setProperties(,?>)",passes the properties from the source object along after adding a property indicating the stream of filters it has been run through.
"java.awt.image.IndexColorModel.convertToIntDiscrete(java.awt.image.Raster,boolean)",returns a new bufferedimage of type_int_argb or type_int_rgb that has a raster with pixel data computed by expanding the indices in the source raster using the color/alpha component arrays of this colormodel.
"java.awt.image.IndexColorModel.createCompatibleSampleModel(int,int)",creates a samplemodel with the specified width and height that has a data layout compatible with this colormodel.
"java.awt.image.IndexColorModel.createCompatibleWritableRaster(int,int)",creates a writableraster with the specified width and height that has a data layout (samplemodel) compatible with this colormodel.
java.awt.image.IndexColorModel.finalize(),disposes of system resources associated with this colormodel once this colormodel is no longer referenced.
java.awt.image.IndexColorModel.getAlpha(int),"returns the alpha component for the specified pixel, scaled from 0 to 255."
java.awt.image.IndexColorModel.getAlphas(byte[]),copies the array of alpha transparency components into the specified array.
java.awt.image.IndexColorModel.getBlue(int),"returns the blue color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.IndexColorModel.getBlues(byte[]),copies the array of blue color components into the specified array.
"java.awt.image.IndexColorModel.getComponents(int,int[],int)",returns an array of unnormalized color/alpha components for a specified pixel in this colormodel.
"java.awt.image.IndexColorModel.getComponents(java.lang.Object,int[],int)",returns an array of unnormalized color/alpha components for a specified pixel in this colormodel.
java.awt.image.IndexColorModel.getComponentSize(),returns an array of the number of bits for each color/alpha component.
"java.awt.image.IndexColorModel.getDataElement(int[],int)",returns a pixel value represented as an int in this colormodel given an array of unnormalized color/alpha components.
"java.awt.image.IndexColorModel.getDataElements(int,java.lang.Object)","returns a data element array representation of a pixel in this colormodel, given an integer pixel representation in the default rgb color model."
"java.awt.image.IndexColorModel.getDataElements(int[],int,java.lang.Object)",returns a data element array representation of a pixel in this colormodel given an array of unnormalized color/alpha components.
java.awt.image.IndexColorModel.getGreen(int),"returns the green color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.IndexColorModel.getGreens(byte[]),copies the array of green color components into the specified array.
java.awt.image.IndexColorModel.getMapSize(),returns the size of the color/alpha component arrays in this indexcolormodel.
java.awt.image.IndexColorModel.getRed(int),"returns the red color component for the specified pixel, scaled from 0 to 255 in the default rgb colorspace, srgb."
java.awt.image.IndexColorModel.getReds(byte[]),copies the array of red color components into the specified array.
java.awt.image.IndexColorModel.getRGB(int),returns the color/alpha components of the pixel in the default rgb color model format.
java.awt.image.IndexColorModel.getRGBs(int[]),converts data for each index from the color and alpha component arrays to an int in the default rgb colormodel format and copies the resulting 32-bit argb values into the specified array.
java.awt.image.IndexColorModel.getTransparency(),returns the transparency.
java.awt.image.IndexColorModel.getTransparentPixel(),returns the index of a transparent pixel in this indexcolormodel or -1 if there is no pixel with an alpha value of 0.
java.awt.image.IndexColorModel.getValidPixels(),returns a biginteger that indicates the valid/invalid pixels in the colormap.
java.awt.image.IndexColorModel.isCompatibleRaster(java.awt.image.Raster),returns true if raster is compatible with this colormodel or false if it is not compatible with this colormodel.
java.awt.image.IndexColorModel.isCompatibleSampleModel(java.awt.image.SampleModel),checks if the specified samplemodel is compatible with this colormodel.
java.awt.image.IndexColorModel.isValid(int),returns whether or not the pixel is valid.
java.awt.image.IndexColorModel.isValid(),returns whether or not all of the pixels are valid.
java.awt.image.IndexColorModel.toString(),returns the string representation of the contents of this colormodelobject.
java.awt.image.Kernel.clone(),clones this object.
java.awt.image.Kernel.getHeight(),returns the height of this kernel.
java.awt.image.Kernel.getKernelData(float[]),returns the kernel data in row major order.
java.awt.image.Kernel.getWidth(),returns the width of this kernel.
java.awt.image.Kernel.getXOrigin(),returns the x origin of this kernel.
java.awt.image.Kernel.getYOrigin(),returns the y origin of this kernel.
"java.awt.image.LookupOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)",creates a zeroed destination image with the correct size and number of bands.
java.awt.image.LookupOp.createCompatibleDestRaster(java.awt.image.Raster),"creates a zeroed-destination raster with the correct size and number of bands, given this source."
"java.awt.image.LookupOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)",performs a lookup operation on a bufferedimage.
"java.awt.image.LookupOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)",performs a lookup operation on a raster.
java.awt.image.LookupOp.getBounds2D(java.awt.image.BufferedImage),returns the bounding box of the filtered destination image.
java.awt.image.LookupOp.getBounds2D(java.awt.image.Raster),returns the bounding box of the filtered destination raster.
"java.awt.image.LookupOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)",returns the location of the destination point given a point in the source.
java.awt.image.LookupOp.getRenderingHints(),returns the rendering hints for this op.
java.awt.image.LookupOp.getTable(),returns the lookuptable.
java.awt.image.LookupTable.getNumComponents(),returns the number of components in the lookup table.
java.awt.image.LookupTable.getOffset(),returns the offset.
"java.awt.image.LookupTable.lookupPixel(int[],int[])",returns an int array of components for one pixel.
java.awt.image.MemoryImageSource.addConsumer(java.awt.image.ImageConsumer),adds an imageconsumer to the list of consumers interested in data for this image.
java.awt.image.MemoryImageSource.isConsumer(java.awt.image.ImageConsumer),determines if an imageconsumer is on the list of consumers currently interested in data for this image.
java.awt.image.MemoryImageSource.newPixels(),sends a whole new buffer of pixels to any imageconsumers that are currently interested in the data for this image and notify them that an animation frame is complete.
"java.awt.image.MemoryImageSource.newPixels(int,int,int,int)",sends a rectangular region of the buffer of pixels to any imageconsumers that are currently interested in the data for this image and notify them that an animation frame is complete.
"java.awt.image.MemoryImageSource.newPixels(int,int,int,int,boolean)",sends a rectangular region of the buffer of pixels to any imageconsumers that are currently interested in the data for this image.
"java.awt.image.MemoryImageSource.newPixels(byte[],java.awt.image.ColorModel,int,int)",changes to a new byte array to hold the pixels for this image.
"java.awt.image.MemoryImageSource.newPixels(int[],java.awt.image.ColorModel,int,int)",changes to a new int array to hold the pixels for this image.
java.awt.image.MemoryImageSource.removeConsumer(java.awt.image.ImageConsumer),removes an imageconsumer from the list of consumers interested in data for this image.
java.awt.image.MemoryImageSource.requestTopDownLeftRightResend(java.awt.image.ImageConsumer),"requests that a given imageconsumer have the image data delivered one more time in top-down, left-right order."
java.awt.image.MemoryImageSource.setAnimated(boolean),changes this memory image into a multi-frame animation or a single-frame static image depending on the animated parameter.
java.awt.image.MemoryImageSource.setFullBufferUpdates(boolean),specifies whether this animated memory image should always be updated by sending the complete buffer of pixels whenever there is a change.
java.awt.image.MemoryImageSource.startProduction(java.awt.image.ImageConsumer),adds an imageconsumer to the list of consumers interested in data for this image and immediately starts delivery of the image data through the imageconsumer interface.
"java.awt.image.MultiPixelPackedSampleModel.createCompatibleSampleModel(int,int)",creates a new multipixelpackedsamplemodel with the specified width and height.
java.awt.image.MultiPixelPackedSampleModel.createDataBuffer(),creates a databuffer that corresponds to this multipixelpackedsamplemodel.
java.awt.image.MultiPixelPackedSampleModel.createSubsetSampleModel(int[]),creates a new multipixelpackedsamplemodel with a subset of the bands of this multipixelpackedsamplemodel.
java.awt.image.MultiPixelPackedSampleModel.getBitOffset(int),"returns the offset, in bits, into the data element in which it is stored for the xth pixel of a scanline."
java.awt.image.MultiPixelPackedSampleModel.getDataBitOffset(),returns the data bit offset in bits.
"java.awt.image.MultiPixelPackedSampleModel.getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)",returns data for a single pixel in a primitive array of type transfertype.
java.awt.image.MultiPixelPackedSampleModel.getNumDataElements(),"returns the number of data elements needed to transfer one pixel via the getdataelements(int, int, java."
"java.awt.image.MultiPixelPackedSampleModel.getOffset(int,int)","returns the offset of pixel (x, y) in data array elements."
"java.awt.image.MultiPixelPackedSampleModel.getPixel(int,int,int[],java.awt.image.DataBuffer)",returns the specified single band pixel in the first element of an int array.
java.awt.image.MultiPixelPackedSampleModel.getPixelBitStride(),returns the pixel bit stride in bits.
"java.awt.image.MultiPixelPackedSampleModel.getSample(int,int,int,java.awt.image.DataBuffer)","returns as int the sample in a specified band for the pixel located at (x, y)."
java.awt.image.MultiPixelPackedSampleModel.getSampleSize(),returns the number of bits per sample for all bands.
java.awt.image.MultiPixelPackedSampleModel.getSampleSize(int),returns the number of bits per sample for the specified band.
java.awt.image.MultiPixelPackedSampleModel.getScanlineStride(),returns the scanline stride.
java.awt.image.MultiPixelPackedSampleModel.getTransferType(),returns the transfertype used to transfer pixels by way of the getdataelements and setdataelements methods.
"java.awt.image.MultiPixelPackedSampleModel.setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)",sets the data for a single pixel in the specified databuffer from a primitive array of type transfertype.
"java.awt.image.MultiPixelPackedSampleModel.setPixel(int,int,int[],java.awt.image.DataBuffer)",sets a pixel in the databuffer using an int array for input.
"java.awt.image.MultiPixelPackedSampleModel.setSample(int,int,int,int,java.awt.image.DataBuffer)","sets a sample in the specified band for the pixel located at (x, y) in the databuffer using an int for input."
"java.awt.image.PackedColorModel.createCompatibleSampleModel(int,int)",creates a samplemodel with the specified width and height that has a data layout compatible with this colormodel.
java.awt.image.PackedColorModel.equals(java.lang.Object),tests if the specified object is an instance of packedcolormodel and equals this packedcolormodel.
java.awt.image.PackedColorModel.getAlphaRaster(java.awt.image.WritableRaster),"returns a writableraster representing the alpha channel of an image, extracted from the input writableraster."
java.awt.image.PackedColorModel.getMask(int),returns the mask indicating which bits in a pixel contain the specified color/alpha sample.
java.awt.image.PackedColorModel.getMasks(),returns a mask array indicating which bits in a pixel contain the color and alpha samples.
java.awt.image.PackedColorModel.isCompatibleSampleModel(java.awt.image.SampleModel),checks if the specified samplemodel is compatible with this colormodel.
java.awt.image.PixelGrabber.abortGrabbing(),request the pixelgrabber to abort the image fetch.
java.awt.image.PixelGrabber.getColorModel(),get the colormodel for the pixels stored in the array.
java.awt.image.PixelGrabber.getHeight(),get the height of the pixel buffer (after adjusting for image height).
java.awt.image.PixelGrabber.getPixels(),get the pixel buffer.
java.awt.image.PixelGrabber.getStatus(),return the status of the pixels.
java.awt.image.PixelGrabber.getWidth(),get the width of the pixel buffer (after adjusting for image width).
java.awt.image.PixelGrabber.grabPixels(),request the image or imageproducer to start delivering pixels and wait for all of the pixels in the rectangle of interest to be delivered.
java.awt.image.PixelGrabber.grabPixels(long),request the image or imageproducer to start delivering pixels and wait for all of the pixels in the rectangle of interest to be delivered or until the specified timeout has elapsed.
java.awt.image.PixelGrabber.imageComplete(int),the imagecomplete method is part of the imageconsumer api which this class must implement to retrieve the pixels.
java.awt.image.PixelGrabber.setColorModel(java.awt.image.ColorModel),the setcolormodel method is part of the imageconsumer api which this class must implement to retrieve the pixels.
"java.awt.image.PixelGrabber.setDimensions(int,int)",the setdimensions method is part of the imageconsumer api which this class must implement to retrieve the pixels.
java.awt.image.PixelGrabber.setHints(int),the sethints method is part of the imageconsumer api which this class must implement to retrieve the pixels.
"java.awt.image.PixelGrabber.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)",the setpixels method is part of the imageconsumer api which this class must implement to retrieve the pixels.
"java.awt.image.PixelGrabber.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)",the setpixels method is part of the imageconsumer api which this class must implement to retrieve the pixels.
"java.awt.image.PixelGrabber.setProperties(,?>)",the setproperties method is part of the imageconsumer api which this class must implement to retrieve the pixels.
java.awt.image.PixelGrabber.startGrabbing(),request the pixelgrabber to start fetching the pixels.
java.awt.image.PixelGrabber.status(),returns the status of the pixels.
"java.awt.image.PixelInterleavedSampleModel.createCompatibleSampleModel(int,int)",creates a new pixelinterleavedsamplemodel with the specified width and height.
java.awt.image.PixelInterleavedSampleModel.createSubsetSampleModel(int[]),creates a new pixelinterleavedsamplemodel with a subset of the bands of this pixelinterleavedsamplemodel.
"java.awt.image.Raster.createBandedRaster(int,int,int,int,java.awt.Point)","creates a raster based on a bandedsamplemodel with the specified data type, width, height, and number of bands."
"java.awt.image.Raster.createBandedRaster(int,int,int,int,int[],int[],java.awt.Point)","creates a raster based on a bandedsamplemodel with the specified data type, width, height, scanline stride, bank indices and band offsets."
"java.awt.image.Raster.createBandedRaster(java.awt.image.DataBuffer,int,int,int,int[],int[],java.awt.Point)","creates a raster based on a bandedsamplemodel with the specified databuffer, width, height, scanline stride, bank indices, and band offsets."
"java.awt.image.Raster.createChild(int,int,int,int,int,int,int[])",returns a new raster which shares all or part of this raster's databuffer.
java.awt.image.Raster.createCompatibleWritableRaster(),create a compatible writableraster the same size as this raster with the same samplemodel and a new initialized databuffer.
"java.awt.image.Raster.createCompatibleWritableRaster(int,int)","create a compatible writableraster with the specified size, a new samplemodel, and a new initialized databuffer."
java.awt.image.Raster.createCompatibleWritableRaster(java.awt.Rectangle),"create a compatible writableraster with location (minx, miny) and size (width, height) specified by rect, a new samplemodel, and a new initialized databuffer."
"java.awt.image.Raster.createCompatibleWritableRaster(int,int,int,int)","create a compatible writableraster with the specified location (minx, miny) and size (width, height), a new samplemodel, and a new initialized databuffer."
"java.awt.image.Raster.createInterleavedRaster(int,int,int,int,java.awt.Point)","creates a raster based on a pixelinterleavedsamplemodel with the specified data type, width, height, and number of bands."
"java.awt.image.Raster.createInterleavedRaster(int,int,int,int,int,int[],java.awt.Point)","creates a raster based on a pixelinterleavedsamplemodel with the specified data type, width, height, scanline stride, pixel stride, and band offsets."
"java.awt.image.Raster.createInterleavedRaster(java.awt.image.DataBuffer,int,int,int,int,int[],java.awt.Point)","creates a raster based on a pixelinterleavedsamplemodel with the specified databuffer, width, height, scanline stride, pixel stride, and band offsets."
"java.awt.image.Raster.createPackedRaster(int,int,int,int[],java.awt.Point)","creates a raster based on a singlepixelpackedsamplemodel with the specified data type, width, height, and band masks."
"java.awt.image.Raster.createPackedRaster(int,int,int,int,int,java.awt.Point)","creates a raster based on a packed samplemodel with the specified data type, width, height, number of bands, and bits per band."
"java.awt.image.Raster.createPackedRaster(java.awt.image.DataBuffer,int,int,int,int[],java.awt.Point)","creates a raster based on a singlepixelpackedsamplemodel with the specified databuffer, width, height, scanline stride, and band masks."
"java.awt.image.Raster.createPackedRaster(java.awt.image.DataBuffer,int,int,int,java.awt.Point)","creates a raster based on a multipixelpackedsamplemodel with the specified databuffer, width, height, and bits per pixel."
"java.awt.image.Raster.createRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)",creates a raster with the specified samplemodel and databuffer.
"java.awt.image.Raster.createTranslatedChild(int,int)","create a raster with the same size, samplemodel and databuffer as this one, but with a different location."
"java.awt.image.Raster.createWritableRaster(java.awt.image.SampleModel,java.awt.Point)",creates a writableraster with the specified samplemodel.
"java.awt.image.Raster.createWritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)",creates a writableraster with the specified samplemodel and databuffer.
java.awt.image.Raster.getBounds(),returns the bounding rectangle of this raster.
java.awt.image.Raster.getDataBuffer(),returns the databuffer associated with this raster.
"java.awt.image.Raster.getDataElements(int,int,java.lang.Object)",returns data for a single pixel in a primitive array of type transfertype.
"java.awt.image.Raster.getDataElements(int,int,int,int,java.lang.Object)",returns the pixel data for the specified rectangle of pixels in a primitive array of type transfertype.
java.awt.image.Raster.getHeight(),returns the height in pixels of the raster.
java.awt.image.Raster.getMinX(),returns the minimum valid x coordinate of the raster.
java.awt.image.Raster.getMinY(),returns the minimum valid y coordinate of the raster.
java.awt.image.Raster.getNumBands(),returns the number of bands (samples per pixel) in this raster.
java.awt.image.Raster.getNumDataElements(),returns the number of data elements needed to transfer one pixel via the getdataelements and setdataelements methods.
java.awt.image.Raster.getParent(),returns the parent raster (if any) of this raster or null.
"java.awt.image.Raster.getPixel(int,int,int[])",returns the samples in an array of int for the specified pixel.
"java.awt.image.Raster.getPixel(int,int,float[])",returns the samples in an array of float for the specified pixel.
"java.awt.image.Raster.getPixel(int,int,double[])",returns the samples in an array of double for the specified pixel.
"java.awt.image.Raster.getPixels(int,int,int,int,int[])","returns an int array containing all samples for a rectangle of pixels, one sample per array element."
"java.awt.image.Raster.getPixels(int,int,int,int,float[])","returns a float array containing all samples for a rectangle of pixels, one sample per array element."
"java.awt.image.Raster.getPixels(int,int,int,int,double[])","returns a double array containing all samples for a rectangle of pixels, one sample per array element."
"java.awt.image.Raster.getSample(int,int,int)","returns the sample in a specified band for the pixel located at (x,y) as an int."
"java.awt.image.Raster.getSampleDouble(int,int,int)","returns the sample in a specified band for a pixel located at (x,y) as a double."
"java.awt.image.Raster.getSampleFloat(int,int,int)","returns the sample in a specified band for the pixel located at (x,y) as a float."
java.awt.image.Raster.getSampleModel(),returns the samplemodel that describes the layout of the image data.
java.awt.image.Raster.getSampleModelTranslateX(),returns the x translation from the coordinate system of the samplemodel to that of the raster.
java.awt.image.Raster.getSampleModelTranslateY(),returns the y translation from the coordinate system of the samplemodel to that of the raster.
"java.awt.image.Raster.getSamples(int,int,int,int,int,int[])","returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element."
"java.awt.image.Raster.getSamples(int,int,int,int,int,float[])","returns the samples for a specified band for the specified rectangle of pixels in a float array, one sample per array element."
"java.awt.image.Raster.getSamples(int,int,int,int,int,double[])","returns the samples for a specified band for a specified rectangle of pixels in a double array, one sample per array element."
java.awt.image.Raster.getTransferType(),returns the transfertype used to transfer pixels via the getdataelements and setdataelements methods.
java.awt.image.Raster.getWidth(),returns the width in pixels of the raster.
"java.awt.image.ReplicateScaleFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)","choose which rows and columns of the delivered byte pixels are needed for the destination scaled image and pass through just those rows and columns that are needed, replicated as necessary."
"java.awt.image.ReplicateScaleFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)","choose which rows and columns of the delivered int pixels are needed for the destination scaled image and pass through just those rows and columns that are needed, replicated as necessary."
"java.awt.image.ReplicateScaleFilter.setProperties(,?>)",passes along the properties from the source object after adding a property indicating the scale applied.
"java.awt.image.RescaleOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)",creates a zeroed destination image with the correct size and number of bands.
java.awt.image.RescaleOp.createCompatibleDestRaster(java.awt.image.Raster),"creates a zeroed-destination raster with the correct size and number of bands, given this source."
"java.awt.image.RescaleOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)",rescales the source bufferedimage.
"java.awt.image.RescaleOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)",rescales the pixel data in the source raster.
java.awt.image.RescaleOp.getBounds2D(java.awt.image.BufferedImage),returns the bounding box of the rescaled destination image.
java.awt.image.RescaleOp.getBounds2D(java.awt.image.Raster),returns the bounding box of the rescaled destination raster.
java.awt.image.RescaleOp.getNumFactors(),returns the number of scaling factors and offsets used in this rescaleop.
java.awt.image.RescaleOp.getOffsets(float[]),returns the offsets in the given array.
"java.awt.image.RescaleOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)",returns the location of the destination point given a point in the source.
java.awt.image.RescaleOp.getRenderingHints(),returns the rendering hints for this op.
java.awt.image.RescaleOp.getScaleFactors(float[]),returns the scale factors in the given array.
java.awt.image.RGBImageFilter.filterIndexColorModel(java.awt.image.IndexColorModel),filters an indexcolormodel object by running each entry in its color tables through the filterrgb function that rgbimagefilter subclasses must provide.
"java.awt.image.RGBImageFilter.filterRGB(int,int,int)",subclasses must specify a method to convert a single input pixel in the default rgb colormodel to a single output pixel.
"java.awt.image.RGBImageFilter.filterRGBPixels(int,int,int,int,int[],int,int)",filters a buffer of pixels in the default rgb colormodel by passing them one by one through the filterrgb method.
java.awt.image.RGBImageFilter.setColorModel(java.awt.image.ColorModel),"if the colormodel is an indexcolormodel and the subclass has set the canfilterindexcolormodel flag to true, we substitute a filtered version of the color model here and wherever that original colormodel object appears in the setpixels methods."
"java.awt.image.RGBImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)","if the colormodel object is the same one that has already been converted, then simply passes the pixels through with the converted colormodel."
"java.awt.image.RGBImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)","if the colormodel object is the same one that has already been converted, then simply passes the pixels through with the converted colormodel, otherwise converts the buffer of integer pixels to the default rgb colormodel and passes the converted buffer to the filterrgbpixels method to be converted one by one."
"java.awt.image.RGBImageFilter.substituteColorModel(java.awt.image.ColorModel,java.awt.image.ColorModel)",registers two colormodel objects for substitution.
"java.awt.image.SampleModel.createCompatibleSampleModel(int,int)","creates a samplemodel which describes data in this samplemodel's format, but with a different width and height."
java.awt.image.SampleModel.createDataBuffer(),creates a databuffer that corresponds to this samplemodel.
java.awt.image.SampleModel.createSubsetSampleModel(int[]),creates a new samplemodel with a subset of the bands of this samplemodel.
"java.awt.image.SampleModel.getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)",returns data for a single pixel in a primitive array of type transfertype.
"java.awt.image.SampleModel.getDataElements(int,int,int,int,java.lang.Object,java.awt.image.DataBuffer)",returns the pixel data for the specified rectangle of pixels in a primitive array of type transfertype.
java.awt.image.SampleModel.getDataType(),returns the data type of the databuffer storing the pixel data.
java.awt.image.SampleModel.getHeight(),returns the height in pixels.
java.awt.image.SampleModel.getNumBands(),returns the total number of bands of image data.
java.awt.image.SampleModel.getNumDataElements(),returns the number of data elements needed to transfer a pixel via the getdataelements and setdataelements methods.
"java.awt.image.SampleModel.getPixel(int,int,int[],java.awt.image.DataBuffer)","returns the samples for a specified pixel in an int array, one sample per array element."
"java.awt.image.SampleModel.getPixel(int,int,float[],java.awt.image.DataBuffer)",returns the samples for the specified pixel in an array of float.
"java.awt.image.SampleModel.getPixel(int,int,double[],java.awt.image.DataBuffer)",returns the samples for the specified pixel in an array of double.
"java.awt.image.SampleModel.getPixels(int,int,int,int,int[],java.awt.image.DataBuffer)","returns all samples for a rectangle of pixels in an int array, one sample per array element."
"java.awt.image.SampleModel.getPixels(int,int,int,int,float[],java.awt.image.DataBuffer)","returns all samples for a rectangle of pixels in a float array, one sample per array element."
"java.awt.image.SampleModel.getPixels(int,int,int,int,double[],java.awt.image.DataBuffer)","returns all samples for a rectangle of pixels in a double array, one sample per array element."
"java.awt.image.SampleModel.getSample(int,int,int,java.awt.image.DataBuffer)","returns the sample in a specified band for the pixel located at (x,y) as an int."
"java.awt.image.SampleModel.getSampleDouble(int,int,int,java.awt.image.DataBuffer)","returns the sample in a specified band for a pixel located at (x,y) as a double."
"java.awt.image.SampleModel.getSampleFloat(int,int,int,java.awt.image.DataBuffer)","returns the sample in a specified band for the pixel located at (x,y) as a float."
"java.awt.image.SampleModel.getSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)","returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element."
"java.awt.image.SampleModel.getSamples(int,int,int,int,int,float[],java.awt.image.DataBuffer)","returns the samples for a specified band for the specified rectangle of pixels in a float array, one sample per array element."
"java.awt.image.SampleModel.getSamples(int,int,int,int,int,double[],java.awt.image.DataBuffer)","returns the samples for a specified band for a specified rectangle of pixels in a double array, one sample per array element."
java.awt.image.SampleModel.getSampleSize(),returns the size in bits of samples for all bands.
java.awt.image.SampleModel.getSampleSize(int),returns the size in bits of samples for the specified band.
java.awt.image.SampleModel.getTransferType(),returns the transfertype used to transfer pixels via the getdataelements and setdataelements methods.
java.awt.image.SampleModel.getWidth(),returns the width in pixels.
"java.awt.image.SampleModel.setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)",sets the data for a single pixel in the specified databuffer from a primitive array of type transfertype.
"java.awt.image.SampleModel.setDataElements(int,int,int,int,java.lang.Object,java.awt.image.DataBuffer)",sets the data for a rectangle of pixels in the specified databuffer from a primitive array of type transfertype.
"java.awt.image.SampleModel.setPixel(int,int,int[],java.awt.image.DataBuffer)",sets a pixel in the databuffer using an int array of samples for input.
"java.awt.image.SampleModel.setPixel(int,int,float[],java.awt.image.DataBuffer)",sets a pixel in the databuffer using a float array of samples for input.
"java.awt.image.SampleModel.setPixel(int,int,double[],java.awt.image.DataBuffer)",sets a pixel in the databuffer using a double array of samples for input.
"java.awt.image.SampleModel.setPixels(int,int,int,int,int[],java.awt.image.DataBuffer)",sets all samples for a rectangle of pixels from an int array containing one sample per array element.
"java.awt.image.SampleModel.setPixels(int,int,int,int,float[],java.awt.image.DataBuffer)",sets all samples for a rectangle of pixels from a float array containing one sample per array element.
"java.awt.image.SampleModel.setPixels(int,int,int,int,double[],java.awt.image.DataBuffer)",sets all samples for a rectangle of pixels from a double array containing one sample per array element.
"java.awt.image.SampleModel.setSample(int,int,int,int,java.awt.image.DataBuffer)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using an int for input."
"java.awt.image.SampleModel.setSample(int,int,int,float,java.awt.image.DataBuffer)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using a float for input."
"java.awt.image.SampleModel.setSample(int,int,int,double,java.awt.image.DataBuffer)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using a double for input."
"java.awt.image.SampleModel.setSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)",sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element.
"java.awt.image.SampleModel.setSamples(int,int,int,int,int,float[],java.awt.image.DataBuffer)",sets the samples in the specified band for the specified rectangle of pixels from a float array containing one sample per array element.
"java.awt.image.SampleModel.setSamples(int,int,int,int,int,double[],java.awt.image.DataBuffer)",sets the samples in the specified band for the specified rectangle of pixels from a double array containing one sample per array element.
java.awt.image.ShortLookupTable.getTable(),returns the lookup table data by reference.
"java.awt.image.ShortLookupTable.lookupPixel(int[],int[])","returns an array of samples of a pixel, translated with the lookup table."
"java.awt.image.ShortLookupTable.lookupPixel(short[],short[])","returns an array of samples of a pixel, translated with the lookup table."
"java.awt.image.SinglePixelPackedSampleModel.createCompatibleSampleModel(int,int)",creates a new singlepixelpackedsamplemodel with the specified width and height.
java.awt.image.SinglePixelPackedSampleModel.createDataBuffer(),creates a databuffer that corresponds to this singlepixelpackedsamplemodel.
java.awt.image.SinglePixelPackedSampleModel.createSubsetSampleModel(int[]),this creates a new singlepixelpackedsamplemodel with a subset of the bands of this singlepixelpackedsamplemodel.
java.awt.image.SinglePixelPackedSampleModel.getBitMasks(),returns the bit masks for all bands.
java.awt.image.SinglePixelPackedSampleModel.getBitOffsets(),returns the bit offsets into the data array element representing a pixel for all bands.
"java.awt.image.SinglePixelPackedSampleModel.getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)",returns data for a single pixel in a primitive array of type transfertype.
java.awt.image.SinglePixelPackedSampleModel.getNumDataElements(),returns the number of data elements needed to transfer one pixel via the getdataelements and setdataelements methods.
"java.awt.image.SinglePixelPackedSampleModel.getOffset(int,int)","returns the offset (in data array elements) of pixel (x,y)."
"java.awt.image.SinglePixelPackedSampleModel.getPixel(int,int,int[],java.awt.image.DataBuffer)",returns all samples in for the specified pixel in an int array.
"java.awt.image.SinglePixelPackedSampleModel.getPixels(int,int,int,int,int[],java.awt.image.DataBuffer)","returns all samples for the specified rectangle of pixels in an int array, one sample per array element."
"java.awt.image.SinglePixelPackedSampleModel.getSample(int,int,int,java.awt.image.DataBuffer)","returns as int the sample in a specified band for the pixel located at (x,y)."
"java.awt.image.SinglePixelPackedSampleModel.getSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)","returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element."
java.awt.image.SinglePixelPackedSampleModel.getSampleSize(),returns the number of bits per sample for all bands.
java.awt.image.SinglePixelPackedSampleModel.getSampleSize(int),returns the number of bits per sample for the specified band.
java.awt.image.SinglePixelPackedSampleModel.getScanlineStride(),returns the scanline stride of this singlepixelpackedsamplemodel.
"java.awt.image.SinglePixelPackedSampleModel.setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)",sets the data for a single pixel in the specified databuffer from a primitive array of type transfertype.
"java.awt.image.SinglePixelPackedSampleModel.setPixel(int,int,int[],java.awt.image.DataBuffer)",sets a pixel in the databuffer using an int array of samples for input.
"java.awt.image.SinglePixelPackedSampleModel.setPixels(int,int,int,int,int[],java.awt.image.DataBuffer)",sets all samples for a rectangle of pixels from an int array containing one sample per array element.
"java.awt.image.SinglePixelPackedSampleModel.setSample(int,int,int,int,java.awt.image.DataBuffer)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using an int for input."
"java.awt.image.SinglePixelPackedSampleModel.setSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)",sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element.
java.awt.image.VolatileImage.contentsLost(),returns true if rendering data was lost since last validate call.
java.awt.image.VolatileImage.createGraphics(),"creates a graphics2d, which can be used to draw into this volatileimage."
java.awt.image.VolatileImage.getCapabilities(),returns an imagecapabilities object which can be inquired as to the specific capabilities of this volatileimage.
java.awt.image.VolatileImage.getGraphics(),"this method returns a graphics2d, but is here for backwards compatibility."
java.awt.image.VolatileImage.getHeight(),returns the height of the volatileimage.
java.awt.image.VolatileImage.getSnapshot(),returns a static snapshot image of this object.
java.awt.image.VolatileImage.getSource(),this returns an imageproducer for this volatileimage.
java.awt.image.VolatileImage.getTransparency(),returns the transparency.
java.awt.image.VolatileImage.getWidth(),returns the width of the volatileimage.
java.awt.image.VolatileImage.validate(java.awt.GraphicsConfiguration),attempts to restore the drawing surface of the image if the surface had been lost since the last validate call.
"java.awt.image.WritableRaster.createWritableChild(int,int,int,int,int,int,int[])",returns a new writableraster which shares all or part of this writableraster's databuffer.
"java.awt.image.WritableRaster.createWritableTranslatedChild(int,int)","create a writableraster with the same size, samplemodel and databuffer as this one, but with a different location."
java.awt.image.WritableRaster.getWritableParent(),"returns the parent writableraster (if any) of this writableraster, or else null."
"java.awt.image.WritableRaster.setDataElements(int,int,java.lang.Object)",sets the data for a single pixel from a primitive array of type transfertype.
"java.awt.image.WritableRaster.setDataElements(int,int,java.awt.image.Raster)",sets the data for a rectangle of pixels from an input raster.
"java.awt.image.WritableRaster.setDataElements(int,int,int,int,java.lang.Object)",sets the data for a rectangle of pixels from a primitive array of type transfertype.
"java.awt.image.WritableRaster.setPixel(int,int,int[])",sets a pixel in the databuffer using an int array of samples for input.
"java.awt.image.WritableRaster.setPixel(int,int,float[])",sets a pixel in the databuffer using a float array of samples for input.
"java.awt.image.WritableRaster.setPixel(int,int,double[])",sets a pixel in the databuffer using a double array of samples for input.
"java.awt.image.WritableRaster.setPixels(int,int,int,int,int[])",sets all samples for a rectangle of pixels from an int array containing one sample per array element.
"java.awt.image.WritableRaster.setPixels(int,int,int,int,float[])",sets all samples for a rectangle of pixels from a float array containing one sample per array element.
"java.awt.image.WritableRaster.setPixels(int,int,int,int,double[])",sets all samples for a rectangle of pixels from a double array containing one sample per array element.
java.awt.image.WritableRaster.setRect(java.awt.image.Raster),copies pixels from raster srcraster to this writableraster.
"java.awt.image.WritableRaster.setRect(int,int,java.awt.image.Raster)",copies pixels from raster srcraster to this writableraster.
"java.awt.image.WritableRaster.setSample(int,int,int,int)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using an int for input."
"java.awt.image.WritableRaster.setSample(int,int,int,float)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using a float for input."
"java.awt.image.WritableRaster.setSample(int,int,int,double)","sets a sample in the specified band for the pixel located at (x,y) in the databuffer using a double for input."
"java.awt.image.WritableRaster.setSamples(int,int,int,int,int,int[])",sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element.
"java.awt.image.WritableRaster.setSamples(int,int,int,int,int,float[])",sets the samples in the specified band for the specified rectangle of pixels from a float array containing one sample per array element.
"java.awt.image.WritableRaster.setSamples(int,int,int,int,int,double[])",sets the samples in the specified band for the specified rectangle of pixels from a double array containing one sample per array element.
"java.awt.image.renderable.ContextualRenderedImageFactory.create(java.awt.image.renderable.RenderContext,java.awt.image.renderable.ParameterBlock)","creates a rendering, given a rendercontext and a parameterblock containing the operation's sources and parameters."
java.awt.image.renderable.ContextualRenderedImageFactory.getBounds2D(java.awt.image.renderable.ParameterBlock),"returns the bounding box for the output of the operation, performed on a given set of sources, in rendering-independent space."
"java.awt.image.renderable.ContextualRenderedImageFactory.getProperty(java.awt.image.renderable.ParameterBlock,java.lang.String)",gets the appropriate instance of the property specified by the name parameter.
java.awt.image.renderable.ContextualRenderedImageFactory.getPropertyNames(),returns a list of names recognized by getproperty.
java.awt.image.renderable.ContextualRenderedImageFactory.isDynamic(),"returns true if successive renderings (that is, calls to create(rendercontext, parameterblock)) with the same arguments may produce different results."
"java.awt.image.renderable.ContextualRenderedImageFactory.mapRenderContext(int,java.awt.image.renderable.RenderContext,java.awt.image.renderable.ParameterBlock,java.awt.image.renderable.RenderableImage)",maps the operation's output rendercontext into a rendercontext for each of the operation's sources.
java.awt.image.renderable.RenderableImage.createDefaultRendering(),returnd a renderedimage instance of this image with a default width and height in pixels.
java.awt.image.renderable.RenderableImage.createRendering(java.awt.image.renderable.RenderContext),creates a renderedimage that represented a rendering of this image using a given rendercontext.
"java.awt.image.renderable.RenderableImage.createScaledRendering(int,int,java.awt.RenderingHints)","creates a renderedimage instance of this image with width w, and height h in pixels."
java.awt.image.renderable.RenderableImage.getHeight(),gets the height in user coordinate space.
java.awt.image.renderable.RenderableImage.getMinX(),gets the minimum x coordinate of the rendering-independent image data.
java.awt.image.renderable.RenderableImage.getMinY(),gets the minimum y coordinate of the rendering-independent image data.
java.awt.image.renderable.RenderableImage.getProperty(java.lang.String),gets a property from the property set of this image.
java.awt.image.renderable.RenderableImage.getPropertyNames(),returns a list of names recognized by getproperty.
java.awt.image.renderable.RenderableImage.getSources(),returns a vector of renderableimages that are the sources of image data for this renderableimage.
java.awt.image.renderable.RenderableImage.getWidth(),gets the width in user coordinate space.
java.awt.image.renderable.RenderableImage.isDynamic(),"returns true if successive renderings (that is, calls to createrendering() or createscaledrendering()) with the same arguments may produce different results."
"java.awt.image.renderable.RenderedImageFactory.create(java.awt.image.renderable.ParameterBlock,java.awt.RenderingHints)",creates a renderedimage representing the results of an imaging operation (or chain of operations) for a given parameterblock and renderinghints.
java.awt.image.renderable.ParameterBlock.add(java.lang.Object),adds an object to the list of parameters.
java.awt.image.renderable.ParameterBlock.add(byte),adds a byte to the list of parameters.
java.awt.image.renderable.ParameterBlock.add(char),adds a character to the list of parameters.
java.awt.image.renderable.ParameterBlock.add(short),adds a short to the list of parameters.
java.awt.image.renderable.ParameterBlock.add(int),adds a integer to the list of parameters.
java.awt.image.renderable.ParameterBlock.add(long),adds a long to the list of parameters.
java.awt.image.renderable.ParameterBlock.add(float),adds a float to the list of parameters.
java.awt.image.renderable.ParameterBlock.add(double),adds a double to the list of parameters.
java.awt.image.renderable.ParameterBlock.addSource(java.lang.Object),adds an image to end of the list of sources.
java.awt.image.renderable.ParameterBlock.clone(),creates a copy of a parameterblock.
java.awt.image.renderable.ParameterBlock.getByteParameter(int),a convenience method to return a parameter as a byte.
java.awt.image.renderable.ParameterBlock.getCharParameter(int),a convenience method to return a parameter as a char.
java.awt.image.renderable.ParameterBlock.getDoubleParameter(int),a convenience method to return a parameter as a double.
java.awt.image.renderable.ParameterBlock.getFloatParameter(int),a convenience method to return a parameter as a float.
java.awt.image.renderable.ParameterBlock.getIntParameter(int),a convenience method to return a parameter as an int.
java.awt.image.renderable.ParameterBlock.getLongParameter(int),a convenience method to return a parameter as a long.
java.awt.image.renderable.ParameterBlock.getNumParameters(),returns the number of parameters (not including source images).
java.awt.image.renderable.ParameterBlock.getNumSources(),returns the number of source images.
java.awt.image.renderable.ParameterBlock.getObjectParameter(int),gets a parameter as an object.
java.awt.image.renderable.ParameterBlock.getParamClasses(),returns an array of class objects describing the types of the parameters.
java.awt.image.renderable.ParameterBlock.getParameters(),returns the entire vector of parameters.
java.awt.image.renderable.ParameterBlock.getRenderableSource(int),returns a source as a renderableimage.
java.awt.image.renderable.ParameterBlock.getRenderedSource(int),returns a source as a renderedimage.
java.awt.image.renderable.ParameterBlock.getShortParameter(int),a convenience method to return a parameter as a short.
java.awt.image.renderable.ParameterBlock.getSource(int),returns a source as a general object.
java.awt.image.renderable.ParameterBlock.getSources(),returns the entire vector of sources.
java.awt.image.renderable.ParameterBlock.removeParameters(),clears the list of parameters.
java.awt.image.renderable.ParameterBlock.removeSources(),clears the list of source images.
"java.awt.image.renderable.ParameterBlock.set(java.lang.Object,int)",replaces an object in the list of parameters.
"java.awt.image.renderable.ParameterBlock.set(byte,int)",replaces an object in the list of parameters with a byte.
"java.awt.image.renderable.ParameterBlock.set(char,int)",replaces an object in the list of parameters with a character.
"java.awt.image.renderable.ParameterBlock.set(short,int)",replaces an object in the list of parameters with a short.
"java.awt.image.renderable.ParameterBlock.set(int,int)",replaces an object in the list of parameters with an integer.
"java.awt.image.renderable.ParameterBlock.set(long,int)",replaces an object in the list of parameters with a long.
"java.awt.image.renderable.ParameterBlock.set(float,int)",replaces an object in the list of parameters with a float.
"java.awt.image.renderable.ParameterBlock.set(double,int)",replaces an object in the list of parameters with a double.
java.awt.image.renderable.ParameterBlock.setParameters(java.util.Vector<java.lang.Object>),sets the entire vector of parameters to a given vector.
"java.awt.image.renderable.ParameterBlock.setSource(java.lang.Object,int)",replaces an entry in the list of source with a new source.
java.awt.image.renderable.ParameterBlock.setSources(java.util.Vector<java.lang.Object>),sets the entire vector of sources to a given vector.
java.awt.image.renderable.ParameterBlock.shallowClone(),creates a shallow copy of a parameterblock.
java.awt.image.renderable.RenderableImageOp.createDefaultRendering(),gets a renderedimage instance of this image with a default width and height in pixels.
java.awt.image.renderable.RenderableImageOp.createRendering(java.awt.image.renderable.RenderContext),creates a renderedimage which represents this renderableimageop (including its renderable sources) rendered according to the given rendercontext.
"java.awt.image.renderable.RenderableImageOp.createScaledRendering(int,int,java.awt.RenderingHints)","creates a renderedimage instance of this image with width w, and height h in pixels."
java.awt.image.renderable.RenderableImageOp.getHeight(),gets the height in user coordinate space.
java.awt.image.renderable.RenderableImageOp.getMinX(),gets the minimum x coordinate of the rendering-independent image data.
java.awt.image.renderable.RenderableImageOp.getMinY(),gets the minimum y coordinate of the rendering-independent image data.
java.awt.image.renderable.RenderableImageOp.getParameterBlock(),returns a reference to the current parameter block.
java.awt.image.renderable.RenderableImageOp.getProperty(java.lang.String),gets a property from the property set of this image.
java.awt.image.renderable.RenderableImageOp.getPropertyNames(),return a list of names recognized by getproperty.
java.awt.image.renderable.RenderableImageOp.getSources(),returns a vector of renderableimages that are the sources of image data for this renderableimage.
java.awt.image.renderable.RenderableImageOp.getWidth(),gets the width in user coordinate space.
java.awt.image.renderable.RenderableImageOp.isDynamic(),"returns true if successive renderings (that is, calls to createrendering() or createscaledrendering()) with the same arguments may produce different results."
java.awt.image.renderable.RenderableImageOp.setParameterBlock(java.awt.image.renderable.ParameterBlock),"change the current parameterblock of the operation, allowing editing of image rendering chains."
java.awt.image.renderable.RenderableImageProducer.addConsumer(java.awt.image.ImageConsumer),adds an imageconsumer to the list of consumers interested in data for this image.
java.awt.image.renderable.RenderableImageProducer.isConsumer(java.awt.image.ImageConsumer),determine if an imageconsumer is on the list of consumers currently interested in data for this image.
java.awt.image.renderable.RenderableImageProducer.removeConsumer(java.awt.image.ImageConsumer),remove an imageconsumer from the list of consumers interested in data for this image.
java.awt.image.renderable.RenderableImageProducer.requestTopDownLeftRightResend(java.awt.image.ImageConsumer),"requests that a given imageconsumer have the image data delivered one more time in top-down, left-right order."
java.awt.image.renderable.RenderableImageProducer.run(),the runnable method for this class.
java.awt.image.renderable.RenderableImageProducer.setRenderContext(java.awt.image.renderable.RenderContext),sets a new rendercontext to use for the next startproduction() call.
java.awt.image.renderable.RenderableImageProducer.startProduction(java.awt.image.ImageConsumer),"adds an imageconsumer to the list of consumers interested in data for this image, and immediately starts delivery of the image data through the imageconsumer interface."
java.awt.image.renderable.RenderContext.clone(),makes a copy of a rendercontext.
java.awt.image.renderable.RenderContext.concatenateTransform(java.awt.geom.AffineTransform),modifies the current user-to-device transform by appending another transform.
java.awt.image.renderable.RenderContext.getAreaOfInterest(),gets the ares of interest currently contained in the rendercontext.
java.awt.image.renderable.RenderContext.getRenderingHints(),gets the rendering hints of this rendercontext.
java.awt.image.renderable.RenderContext.getTransform(),gets the current user-to-device affinetransform.
java.awt.image.renderable.RenderContext.preConcatenateTransform(java.awt.geom.AffineTransform),modifies the current user-to-device transform by prepending another transform.
java.awt.image.renderable.RenderContext.setAreaOfInterest(java.awt.Shape),sets the current area of interest.
java.awt.image.renderable.RenderContext.setRenderingHints(java.awt.RenderingHints),sets the rendering hints of this rendercontext.
java.awt.image.renderable.RenderContext.setTransform(java.awt.geom.AffineTransform),sets the current user-to-device affinetransform contained in the rendercontext to a given transform.
java.awt.print.Pageable.getNumberOfPages(),returns the number of pages in the set.
java.awt.print.Pageable.getPageFormat(int),returns the pageformat of the page specified by pageindex.
java.awt.print.Pageable.getPrintable(int),returns the printable instance responsible for rendering the page specified by pageindex.
"java.awt.print.Printable.print(java.awt.Graphics,java.awt.print.PageFormat,int)",prints the page at the specified index into the specified graphics context in the specified format.
java.awt.print.PrinterGraphics.getPrinterJob(),returns the printerjob that is controlling the current rendering request.
"java.awt.print.Book.append(java.awt.print.Printable,java.awt.print.PageFormat)",appends a single page to the end of this book.
"java.awt.print.Book.append(java.awt.print.Printable,java.awt.print.PageFormat,int)",appends numpages pages to the end of this book.
java.awt.print.Book.getNumberOfPages(),returns the number of pages in this book.
java.awt.print.Book.getPageFormat(int),returns the pageformat of the page specified by pageindex.
java.awt.print.Book.getPrintable(int),returns the printable instance responsible for rendering the page specified by pageindex.
"java.awt.print.Book.setPage(int,java.awt.print.Printable,java.awt.print.PageFormat)",sets the pageformat and the painter for a specified page number.
java.awt.print.PageFormat.clone(),makes a copy of this pageformat with the same contents as this pageformat.
java.awt.print.PageFormat.getHeight(),"returns the height, in 1/72nds of an inch, of the page."
java.awt.print.PageFormat.getImageableHeight(),"return the height, in 1/72nds of an inch, of the imageable area of the page."
java.awt.print.PageFormat.getImageableWidth(),"returns the width, in 1/72nds of an inch, of the imageable area of the page."
java.awt.print.PageFormat.getImageableX(),returns the x coordinate of the upper left point of the imageable area of the paper object associated with this pageformat.
java.awt.print.PageFormat.getImageableY(),returns the y coordinate of the upper left point of the imageable area of the paper object associated with this pageformat.
java.awt.print.PageFormat.getMatrix(),returns a transformation matrix that translates user space rendering to the requested orientation of the page.
java.awt.print.PageFormat.getOrientation(),returns the orientation of this pageformat.
java.awt.print.PageFormat.getPaper(),returns a copy of the paper object associated with this pageformat.
java.awt.print.PageFormat.getWidth(),"returns the width, in 1/72nds of an inch, of the page."
java.awt.print.PageFormat.setOrientation(int),sets the page orientation.
java.awt.print.PageFormat.setPaper(java.awt.print.Paper),sets the paper object for this pageformat.
java.awt.print.Paper.clone(),creates a copy of this paper with the same contents as this paper.
java.awt.print.Paper.getHeight(),returns the height of the page in 1/72nds of an inch.
java.awt.print.Paper.getImageableHeight(),returns the height of this paper object's imageable area.
java.awt.print.Paper.getImageableWidth(),returns the width of this paper object's imageable area.
java.awt.print.Paper.getImageableX(),returns the x coordinate of the upper-left corner of this paper object's imageable area.
java.awt.print.Paper.getImageableY(),returns the y coordinate of the upper-left corner of this paper object's imageable area.
java.awt.print.Paper.getWidth(),returns the width of the page in 1/72nds of an inch.
"java.awt.print.Paper.setImageableArea(double,double,double,double)",sets the imageable area of this paper.
"java.awt.print.Paper.setSize(double,double)","sets the width and height of this paper object, which represents the properties of the page onto which printing occurs."
java.awt.print.PrinterJob.cancel(),cancels a print job that is in progress.
java.awt.print.PrinterJob.defaultPage(java.awt.print.PageFormat),clones the pageformat argument and alters the clone to describe a default page size and orientation.
java.awt.print.PrinterJob.defaultPage(),creates a new pageformat instance and sets it to a default size and orientation.
java.awt.print.PrinterJob.getCopies(),gets the number of copies to be printed.
java.awt.print.PrinterJob.getJobName(),gets the name of the document to be printed.
java.awt.print.PrinterJob.getPageFormat(javax.print.attribute.PrintRequestAttributeSet),"calculates a pageformat with values consistent with those supported by the current printservice for this job (ie the value returned by getprintservice()) and media, printable area and orientation contained in attributes."
java.awt.print.PrinterJob.getPrinterJob(),creates and returns a printerjob which is initially associated with the default printer.
java.awt.print.PrinterJob.getPrintService(),returns the service (printer) for this printer job.
java.awt.print.PrinterJob.getUserName(),gets the name of the printing user.
java.awt.print.PrinterJob.isCancelled(),"returns true if a print job is in progress, but is going to be cancelled at the next opportunity; otherwise returns false."
java.awt.print.PrinterJob.lookupPrintServices(),a convenience method which looks up 2d print services.
java.awt.print.PrinterJob.lookupStreamPrintServices(java.lang.String),a convenience method which locates factories for stream print services which can image 2d graphics.
java.awt.print.PrinterJob.pageDialog(java.awt.print.PageFormat),displays a dialog that allows modification of a pageformat instance.
java.awt.print.PrinterJob.pageDialog(javax.print.attribute.PrintRequestAttributeSet),a convenience method which displays a cross-platform page setup dialog.
java.awt.print.PrinterJob.print(),prints a set of pages.
java.awt.print.PrinterJob.print(javax.print.attribute.PrintRequestAttributeSet),prints a set of pages using the settings in the attribute set.
java.awt.print.PrinterJob.printDialog(),presents a dialog to the user for changing the properties of the print job.
java.awt.print.PrinterJob.printDialog(javax.print.attribute.PrintRequestAttributeSet),a convenience method which displays a cross-platform print dialog for all services which are capable of printing 2d graphics using the pageable interface.
java.awt.print.PrinterJob.setCopies(int),sets the number of copies to be printed.
java.awt.print.PrinterJob.setJobName(java.lang.String),sets the name of the document to be printed.
java.awt.print.PrinterJob.setPageable(java.awt.print.Pageable),"queries document for the number of pages and the pageformat and printable for each page held in the pageable instance, document."
java.awt.print.PrinterJob.setPrintable(java.awt.print.Printable),calls painter to render the pages.
"java.awt.print.PrinterJob.setPrintable(java.awt.print.Printable,java.awt.print.PageFormat)",calls painter to render the pages in the specified format.
java.awt.print.PrinterJob.setPrintService(javax.print.PrintService),associate this printerjob with a new printservice.
java.awt.print.PrinterJob.validatePage(java.awt.print.PageFormat),returns the clone of page with its settings adjusted to be compatible with the current printer of this printerjob.
java.awt.print.PrinterIOException.getCause(),returns the the cause of this exception (the ioexception that terminated the print job).
java.awt.print.PrinterIOException.getIOException(),returns the ioexception that terminated the print job.
java.beans.AppletInitializer.activate(java.applet.Applet),"activate, and/or mark applet active."
"java.beans.AppletInitializer.initialize(java.applet.Applet,java.beans.beancontext.BeanContext)",if passed to the appropriate variant of java.
java.beans.BeanInfo.getAdditionalBeanInfo(),this method enables the current beaninfo object to return an arbitrary collection of other beaninfo objects that provide additional information about the current bean.
java.beans.BeanInfo.getBeanDescriptor(),"returns the bean descriptor that provides overall information about the bean, such as its display name or its customizer."
java.beans.BeanInfo.getDefaultEventIndex(),a bean may have a default event typically applied when this bean is used.
java.beans.BeanInfo.getDefaultPropertyIndex(),a bean may have a default property commonly updated when this bean is customized.
java.beans.BeanInfo.getEventSetDescriptors(),returns the event descriptors of the bean that define the types of events fired by this bean.
java.beans.BeanInfo.getIcon(int),returns an image that can be used to represent the bean in toolboxes or toolbars.
java.beans.BeanInfo.getMethodDescriptors(),returns the method descriptors of the bean that define the externally visible methods supported by this bean.
java.beans.BeanInfo.getPropertyDescriptors(),returns descriptors for all properties of the bean.
java.beans.Customizer.addPropertyChangeListener(java.beans.PropertyChangeListener),register a listener for the propertychange event.
java.beans.Customizer.removePropertyChangeListener(java.beans.PropertyChangeListener),remove a listener for the propertychange event.
java.beans.Customizer.setObject(java.lang.Object),set the object to be customized.
java.beans.DesignMode.isDesignTime(),"a value of true denotes that javabeans should behave in design time mode, a value of false denotes runtime behavior."
java.beans.DesignMode.setDesignTime(boolean),"sets the ""value"" of the ""designtime"" property."
java.beans.ExceptionListener.exceptionThrown(java.lang.Exception),this method is called when a recoverable exception has been caught.
java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
java.beans.PropertyEditor.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a listener for the value change.
java.beans.PropertyEditor.getAsText(),gets the property value as text.
java.beans.PropertyEditor.getCustomEditor(),a propertyeditor may choose to make available a full custom component that edits its property value.
java.beans.PropertyEditor.getJavaInitializationString(),returns a fragment of java code that can be used to set a property to match the editors current state.
java.beans.PropertyEditor.getTags(),"if the property value must be one of a set of known tagged values, then this method should return an array of the tags."
java.beans.PropertyEditor.getValue(),gets the property value.
java.beans.PropertyEditor.isPaintable(),determines whether this property editor is paintable.
"java.beans.PropertyEditor.paintValue(java.awt.Graphics,java.awt.Rectangle)",paint a representation of the value into a given area of screen real estate.
java.beans.PropertyEditor.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a listener for the value change.
java.beans.PropertyEditor.setAsText(java.lang.String),set the property value by parsing a given string.
java.beans.PropertyEditor.setValue(java.lang.Object),set (or change) the object that is to be edited.
java.beans.PropertyEditor.supportsCustomEditor(),determines whether this property editor supports a custom editor.
java.beans.VetoableChangeListener.vetoableChange(java.beans.PropertyChangeEvent),this method gets called when a constrained property is changed.
java.beans.Visibility.avoidingGui(),determines whether this bean is avoiding using a gui.
java.beans.Visibility.dontUseGui(),this method instructs the bean that it should not use the gui.
java.beans.Visibility.needsGui(),determines whether this bean needs a gui.
java.beans.Visibility.okToUseGui(),this method instructs the bean that it is ok to use the gui.
java.beans.BeanDescriptor.getBeanClass(),gets the bean's class object.
java.beans.BeanDescriptor.getCustomizerClass(),gets the class object for the bean's customizer.
"java.beans.Beans.getInstanceOf(java.lang.Object,java.lang.Class<?>)","from a given bean, obtain an object representing a specified type view of that source object."
"java.beans.Beans.instantiate(java.lang.ClassLoader,java.lang.String)",instantiate a javabean.
"java.beans.Beans.instantiate(java.lang.ClassLoader,java.lang.String,java.beans.beancontext.BeanContext)",instantiate a javabean.
"java.beans.Beans.instantiate(java.lang.ClassLoader,java.lang.String,java.beans.beancontext.BeanContext,java.beans.AppletInitializer)",instantiate a bean.
java.beans.Beans.isDesignTime(),test if we are in design-mode.
java.beans.Beans.isGuiAvailable(),determines whether beans can assume a gui is available.
"java.beans.Beans.isInstanceOf(java.lang.Object,java.lang.Class<?>)",check if a bean can be viewed as a given target type.
java.beans.Beans.setDesignTime(boolean),used to indicate whether of not we are running in an application builder environment.
java.beans.Beans.setGuiAvailable(boolean),used to indicate whether of not we are running in an environment where gui interaction is available.
"java.beans.DefaultPersistenceDelegate.initialize(java.lang.Class<?>,java.lang.Object,java.lang.Object,java.beans.Encoder)","this default implementation of the initialize method assumes all state held in objects of this type is exposed via the matching pairs of ""setter"" and ""getter"" methods in the order they are returned by the introspector."
"java.beans.DefaultPersistenceDelegate.instantiate(java.lang.Object,java.beans.Encoder)","this default implementation of the instantiate method returns an expression containing the predefined method name ""new"" which denotes a call to a constructor with the arguments as specified in the defaultpersistencedelegate's constructor."
"java.beans.DefaultPersistenceDelegate.mutatesTo(java.lang.Object,java.lang.Object)","if the number of arguments in the specified constructor is non-zero and the class of oldinstance explicitly declares an ""equals"" method this method returns the value of oldinstance."
java.beans.Encoder.get(java.lang.Object),returns a tentative value for oldinstance in the environment created by this stream.
java.beans.Encoder.getExceptionListener(),gets the exception handler for this stream.
java.beans.Encoder.getPersistenceDelegate(java.lang.Class<?>),returns the persistence delegate for the given type.
java.beans.Encoder.remove(java.lang.Object),"removes the entry for this instance, returning the old entry."
java.beans.Encoder.setExceptionListener(java.beans.ExceptionListener),sets the exception handler for this stream to exceptionlistener.
"java.beans.Encoder.setPersistenceDelegate(java.lang.Class<?>,java.beans.PersistenceDelegate)",associates the specified persistence delegate with the given type.
java.beans.Encoder.writeExpression(java.beans.Expression),the implementation first checks to see if an expression with this value has already been written.
java.beans.Encoder.writeObject(java.lang.Object),write the specified object to the output stream.
java.beans.Encoder.writeStatement(java.beans.Statement),writes statement oldstm to the stream.
"java.beans.EventHandler.create(java.lang.Class<T>,java.lang.Object,java.lang.String)",creates an implementation of listenerinterface in which all of the methods in the listener interface apply the handler's action to the target.
"java.beans.EventHandler.create(java.lang.Class<T>,java.lang.Object,java.lang.String,java.lang.String)","/** creates an implementation of listenerinterface in which all of the methods pass the value of the event expression, eventpropertyname, to the final method in the statement, action, which is applied to the target."
"java.beans.EventHandler.create(java.lang.Class<T>,java.lang.Object,java.lang.String,java.lang.String,java.lang.String)","creates an implementation of listenerinterface in which the method named listenermethodname passes the value of the event expression, eventpropertyname, to the final method in the statement, action, which is applied to the target."
java.beans.EventHandler.getAction(),"returns the name of the target's writable property that this event handler will set, or the name of the method that this event handler will invoke on the target."
java.beans.EventHandler.getEventPropertyName(),returns the property of the event that should be used in the action applied to the target.
java.beans.EventHandler.getListenerMethodName(),returns the name of the method that will trigger the action.
java.beans.EventHandler.getTarget(),returns the object to which this event handler will send a message.
"java.beans.EventHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",extract the appropriate property value from the event and pass it to the action associated with this eventhandler.
java.beans.EventSetDescriptor.getAddListenerMethod(),gets the method used to add event listeners.
java.beans.EventSetDescriptor.getGetListenerMethod(),gets the method used to access the registered event listeners.
java.beans.EventSetDescriptor.getListenerMethodDescriptors(),gets the methoddescriptors of the target listener interface.
java.beans.EventSetDescriptor.getListenerMethods(),gets the methods of the target listener interface.
java.beans.EventSetDescriptor.getListenerType(),gets the class object for the target interface.
java.beans.EventSetDescriptor.getRemoveListenerMethod(),gets the method used to remove event listeners.
java.beans.EventSetDescriptor.isInDefaultEventSet(),"reports if an event set is in the ""default"" set."
java.beans.EventSetDescriptor.isUnicast(),normally event sources are multicast.
java.beans.EventSetDescriptor.setInDefaultEventSet(boolean),"marks an event set as being in the ""default"" set (or not)."
java.beans.EventSetDescriptor.setUnicast(boolean),mark an event set as unicast (or not).
java.beans.Expression.execute(),"the execute method finds a method whose name is the same as the methodname property, and invokes the method on the target."
java.beans.Expression.getValue(),"if the value property of this instance is not already set, this method dynamically finds the method with the specified methodname on this target with these arguments and calls it."
java.beans.Expression.setValue(java.lang.Object),sets the value of this expression to value.
java.beans.Expression.toString(),prints the value of this expression using a java-style syntax.
java.beans.FeatureDescriptor.attributeNames(),gets an enumeration of the locale-independent names of this feature.
java.beans.FeatureDescriptor.getDisplayName(),gets the localized display name of this feature.
java.beans.FeatureDescriptor.getName(),gets the programmatic name of this feature.
java.beans.FeatureDescriptor.getShortDescription(),gets the short description of this feature.
java.beans.FeatureDescriptor.getValue(java.lang.String),retrieve a named attribute with this feature.
java.beans.FeatureDescriptor.isExpert(),"the ""expert"" flag is used to distinguish between those features that are intended for expert users from those that are intended for normal users."
java.beans.FeatureDescriptor.isHidden(),"the ""hidden"" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans."
java.beans.FeatureDescriptor.isPreferred(),"the ""preferred"" flag is used to identify features that are particularly important for presenting to humans."
java.beans.FeatureDescriptor.setDisplayName(java.lang.String),sets the localized display name of this feature.
java.beans.FeatureDescriptor.setExpert(boolean),"the ""expert"" flag is used to distinguish between features that are intended for expert users from those that are intended for normal users."
java.beans.FeatureDescriptor.setHidden(boolean),"the ""hidden"" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans."
java.beans.FeatureDescriptor.setName(java.lang.String),sets the programmatic name of this feature.
java.beans.FeatureDescriptor.setPreferred(boolean),"the ""preferred"" flag is used to identify features that are particularly important for presenting to humans."
java.beans.FeatureDescriptor.setShortDescription(java.lang.String),you can associate a short descriptive string with a feature.
"java.beans.FeatureDescriptor.setValue(java.lang.String,java.lang.Object)",associate a named attribute with this feature.
java.beans.FeatureDescriptor.toString(),returns a string representation of the object.
java.beans.IndexedPropertyChangeEvent.getIndex(),gets the index of the property that was changed.
java.beans.IndexedPropertyDescriptor.equals(java.lang.Object),compares this propertydescriptor against the specified object.
java.beans.IndexedPropertyDescriptor.getIndexedPropertyType(),returns the java type info for the indexed property.
java.beans.IndexedPropertyDescriptor.getIndexedReadMethod(),gets the method that should be used to read an indexed property value.
java.beans.IndexedPropertyDescriptor.getIndexedWriteMethod(),gets the method that should be used to write an indexed property value.
java.beans.IndexedPropertyDescriptor.hashCode(),returns a hash code value for the object.
java.beans.IndexedPropertyDescriptor.setIndexedReadMethod(java.lang.reflect.Method),sets the method that should be used to read an indexed property value.
java.beans.IndexedPropertyDescriptor.setIndexedWriteMethod(java.lang.reflect.Method),sets the method that should be used to write an indexed property value.
java.beans.Introspector.decapitalize(java.lang.String),utility method to take a string and convert it to normal java variable name capitalization.
java.beans.Introspector.flushCaches(),flush all of the introspector's internal caches.
java.beans.Introspector.flushFromCaches(java.lang.Class<?>),flush the introspector's internal cached information for a given class.
java.beans.Introspector.getBeanInfo(java.lang.Class<?>),"introspect on a java bean and learn about all its properties, exposed methods, and events."
"java.beans.Introspector.getBeanInfo(java.lang.Class<?>,int)","introspect on a java bean and learn about all its properties, exposed methods, and events, subject to some control flags."
"java.beans.Introspector.getBeanInfo(java.lang.Class<?>,java.lang.Class<?>)","introspect on a java bean and learn all about its properties, exposed methods, below a given ""stop"" point."
"java.beans.Introspector.getBeanInfo(java.lang.Class<?>,java.lang.Class<?>,int)","introspect on a java bean and learn about all its properties, exposed methods and events, below a given stopclass point subject to some control flags."
java.beans.Introspector.getBeanInfoSearchPath(),gets the list of package names that will be used for finding beaninfo classes.
java.beans.Introspector.setBeanInfoSearchPath(java.lang.String[]),change the list of package names that will be used for finding beaninfo classes.
java.beans.MethodDescriptor.getMethod(),gets the method that this methoddescriptor encapsulates.
java.beans.MethodDescriptor.getParameterDescriptors(),gets the parameterdescriptor for each of this methoddescriptor's method's parameters.
"java.beans.PersistenceDelegate.initialize(java.lang.Class<?>,java.lang.Object,java.lang.Object,java.beans.Encoder)",produce a series of statements with side effects on newinstance so that the new instance becomes equivalent to oldinstance.
"java.beans.PersistenceDelegate.instantiate(java.lang.Object,java.beans.Encoder)",returns an expression whose value is oldinstance.
"java.beans.PersistenceDelegate.mutatesTo(java.lang.Object,java.lang.Object)",returns true if an equivalent copy of oldinstance may be created by applying a series of statements to newinstance.
"java.beans.PersistenceDelegate.writeObject(java.lang.Object,java.beans.Encoder)",the writeobject is a single entry point to the persistence and is used by a encoder in the traditional mode of delegation.
java.beans.PropertyChangeEvent.getNewValue(),"gets the new value for the property, expressed as an object."
java.beans.PropertyChangeEvent.getOldValue(),"gets the old value for the property, expressed as an object."
java.beans.PropertyChangeEvent.getPropagationId(),"the ""propagationid"" field is reserved for future use."
java.beans.PropertyChangeEvent.getPropertyName(),gets the programmatic name of the property that was changed.
java.beans.PropertyChangeEvent.setPropagationId(java.lang.Object),sets the propagationid object for the event.
java.beans.PropertyChangeEvent.toString(),returns a string representation of the object.
java.beans.PropertyChangeListenerProxy.getPropertyName(),returns the name of the named property associated with the listener.
java.beans.PropertyChangeListenerProxy.propertyChange(java.beans.PropertyChangeEvent),forwards the property change event to the listener delegate.
java.beans.PropertyChangeSupport.addPropertyChangeListener(java.beans.PropertyChangeListener),add a propertychangelistener to the listener list.
"java.beans.PropertyChangeSupport.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",add a propertychangelistener for a specific property.
"java.beans.PropertyChangeSupport.fireIndexedPropertyChange(java.lang.String,int,java.lang.Object,java.lang.Object)",reports a bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name.
"java.beans.PropertyChangeSupport.fireIndexedPropertyChange(java.lang.String,int,int,int)",reports an integer bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name.
"java.beans.PropertyChangeSupport.fireIndexedPropertyChange(java.lang.String,int,boolean,boolean)",reports a boolean bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name.
"java.beans.PropertyChangeSupport.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",reports a bound property update to listeners that have been registered to track updates of all properties or a property with the specified name.
"java.beans.PropertyChangeSupport.firePropertyChange(java.lang.String,int,int)",reports an integer bound property update to listeners that have been registered to track updates of all properties or a property with the specified name.
"java.beans.PropertyChangeSupport.firePropertyChange(java.lang.String,boolean,boolean)",reports a boolean bound property update to listeners that have been registered to track updates of all properties or a property with the specified name.
java.beans.PropertyChangeSupport.firePropertyChange(java.beans.PropertyChangeEvent),fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name.
java.beans.PropertyChangeSupport.getPropertyChangeListeners(),returns an array of all the listeners that were added to the propertychangesupport object with addpropertychangelistener().
java.beans.PropertyChangeSupport.getPropertyChangeListeners(java.lang.String),returns an array of all the listeners which have been associated with the named property.
java.beans.PropertyChangeSupport.hasListeners(java.lang.String),"check if there are any listeners for a specific property, including those registered on all properties."
java.beans.PropertyChangeSupport.removePropertyChangeListener(java.beans.PropertyChangeListener),remove a propertychangelistener from the listener list.
"java.beans.PropertyChangeSupport.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",remove a propertychangelistener for a specific property.
java.beans.PropertyDescriptor.createPropertyEditor(java.lang.Object),constructs an instance of a property editor using the current property editor class.
java.beans.PropertyDescriptor.equals(java.lang.Object),compares this propertydescriptor against the specified object.
java.beans.PropertyDescriptor.getPropertyEditorClass(),gets any explicit propertyeditor class that has been registered for this property.
java.beans.PropertyDescriptor.getPropertyType(),returns the java type info for the property.
java.beans.PropertyDescriptor.getReadMethod(),gets the method that should be used to read the property value.
java.beans.PropertyDescriptor.getWriteMethod(),gets the method that should be used to write the property value.
java.beans.PropertyDescriptor.hashCode(),returns a hash code value for the object.
java.beans.PropertyDescriptor.isBound(),"updates to ""bound"" properties will cause a ""propertychange"" event to get fired when the property is changed."
java.beans.PropertyDescriptor.isConstrained(),"attempted updates to ""constrained"" properties will cause a ""vetoablechange"" event to get fired when the property is changed."
java.beans.PropertyDescriptor.setBound(boolean),"updates to ""bound"" properties will cause a ""propertychange"" event to get fired when the property is changed."
java.beans.PropertyDescriptor.setConstrained(boolean),"attempted updates to ""constrained"" properties will cause a ""vetoablechange"" event to get fired when the property is changed."
java.beans.PropertyDescriptor.setPropertyEditorClass(java.lang.Class<?>),normally propertyeditors will be found using the propertyeditormanager.
java.beans.PropertyDescriptor.setReadMethod(java.lang.reflect.Method),sets the method that should be used to read the property value.
java.beans.PropertyDescriptor.setWriteMethod(java.lang.reflect.Method),sets the method that should be used to write the property value.
java.beans.PropertyEditorManager.findEditor(java.lang.Class<?>),locate a value editor for a given target type.
java.beans.PropertyEditorManager.getEditorSearchPath(),gets the package names that will be searched for property editors.
"java.beans.PropertyEditorManager.registerEditor(java.lang.Class<?>,java.lang.Class<?>)",registers an editor class to edit values of the given target class.
java.beans.PropertyEditorManager.setEditorSearchPath(java.lang.String[]),change the list of package names that will be used for finding property editors.
java.beans.PropertyEditorSupport.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a listener for the value change.
java.beans.PropertyEditorSupport.firePropertyChange(),report that we have been modified to any interested listeners.
java.beans.PropertyEditorSupport.getAsText(),gets the property value as a string suitable for presentation to a human to edit.
java.beans.PropertyEditorSupport.getCustomEditor(),a propertyeditor may chose to make available a full custom component that edits its property value.
java.beans.PropertyEditorSupport.getJavaInitializationString(),this method is intended for use when generating java code to set the value of the property.
java.beans.PropertyEditorSupport.getSource(),returns the bean that is used as the source of events.
java.beans.PropertyEditorSupport.getTags(),"if the property value must be one of a set of known tagged values, then this method should return an array of the tag values."
java.beans.PropertyEditorSupport.getValue(),gets the value of the property.
java.beans.PropertyEditorSupport.isPaintable(),determines whether the class will honor the paintvalue method.
"java.beans.PropertyEditorSupport.paintValue(java.awt.Graphics,java.awt.Rectangle)",paint a representation of the value into a given area of screen real estate.
java.beans.PropertyEditorSupport.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a listener for the value change.
java.beans.PropertyEditorSupport.setAsText(java.lang.String),sets the property value by parsing a given string.
java.beans.PropertyEditorSupport.setSource(java.lang.Object),sets the source bean.
java.beans.PropertyEditorSupport.setValue(java.lang.Object),set (or change) the object that is to be edited.
java.beans.PropertyEditorSupport.supportsCustomEditor(),determines whether the propertyeditor can provide a custom editor.
java.beans.SimpleBeanInfo.getAdditionalBeanInfo(),claim there are no other relevant beaninfo objects.
java.beans.SimpleBeanInfo.getBeanDescriptor(),deny knowledge about the class and customizer of the bean.
java.beans.SimpleBeanInfo.getDefaultEventIndex(),deny knowledge of a default event.
java.beans.SimpleBeanInfo.getDefaultPropertyIndex(),deny knowledge of a default property.
java.beans.SimpleBeanInfo.getEventSetDescriptors(),deny knowledge of event sets.
java.beans.SimpleBeanInfo.getIcon(int),claim there are no icons available.
java.beans.SimpleBeanInfo.getMethodDescriptors(),deny knowledge of methods.
java.beans.SimpleBeanInfo.getPropertyDescriptors(),deny knowledge of properties.
java.beans.SimpleBeanInfo.loadImage(java.lang.String),this is a utility method to help in loading icon images.
java.beans.Statement.execute(),"the execute method finds a method whose name is the same as the methodname property, and invokes the method on the target."
java.beans.Statement.getArguments(),returns the arguments for the method to invoke.
java.beans.Statement.getMethodName(),returns the name of the method to invoke.
java.beans.Statement.getTarget(),returns the target object of this statement.
java.beans.Statement.toString(),prints the value of this statement using a java-style syntax.
java.beans.VetoableChangeListenerProxy.getPropertyName(),returns the name of the named property associated with the listener.
java.beans.VetoableChangeListenerProxy.vetoableChange(java.beans.PropertyChangeEvent),forwards the property change event to the listener delegate.
java.beans.VetoableChangeSupport.addVetoableChangeListener(java.beans.VetoableChangeListener),add a vetoablechangelistener to the listener list.
"java.beans.VetoableChangeSupport.addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)",add a vetoablechangelistener for a specific property.
"java.beans.VetoableChangeSupport.fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)",reports a constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name.
"java.beans.VetoableChangeSupport.fireVetoableChange(java.lang.String,int,int)",reports an integer constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name.
"java.beans.VetoableChangeSupport.fireVetoableChange(java.lang.String,boolean,boolean)",reports a boolean constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name.
java.beans.VetoableChangeSupport.fireVetoableChange(java.beans.PropertyChangeEvent),fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name.
java.beans.VetoableChangeSupport.getVetoableChangeListeners(),returns an array of all the listeners that were added to the vetoablechangesupport object with addvetoablechangelistener().
java.beans.VetoableChangeSupport.getVetoableChangeListeners(java.lang.String),returns an array of all the listeners which have been associated with the named property.
java.beans.VetoableChangeSupport.hasListeners(java.lang.String),"check if there are any listeners for a specific property, including those registered on all properties."
java.beans.VetoableChangeSupport.removeVetoableChangeListener(java.beans.VetoableChangeListener),remove a vetoablechangelistener from the listener list.
"java.beans.VetoableChangeSupport.removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)",remove a vetoablechangelistener for a specific property.
java.beans.XMLDecoder.close(),this method closes the input stream associated with this stream.
"java.beans.XMLDecoder.createHandler(java.lang.Object,java.beans.ExceptionListener,java.lang.ClassLoader)",creates a new handler for sax parser that can be used to parse embedded xml archives created by the xmlencoder class.
java.beans.XMLDecoder.getExceptionListener(),gets the exception handler for this stream.
java.beans.XMLDecoder.getOwner(),gets the owner of this decoder.
java.beans.XMLDecoder.readObject(),reads the next object from the underlying input stream.
java.beans.XMLDecoder.setExceptionListener(java.beans.ExceptionListener),sets the exception handler for this stream to exceptionlistener.
java.beans.XMLDecoder.setOwner(java.lang.Object),sets the owner of this decoder to owner.
java.beans.XMLEncoder.close(),"this method calls flush, writes the closing postamble and then closes the output stream associated with this stream."
java.beans.XMLEncoder.flush(),this method writes out the preamble associated with the xml encoding if it has not been written already and then writes out all of the values that been written to the stream since the last time flush was called.
java.beans.XMLEncoder.getOwner(),gets the owner of this encoder.
java.beans.XMLEncoder.setOwner(java.lang.Object),sets the owner of this encoder to owner.
java.beans.XMLEncoder.writeExpression(java.beans.Expression),records the expression so that the encoder will produce the actual output when the stream is flushed.
java.beans.XMLEncoder.writeObject(java.lang.Object),write an xml representation of the specified object to the output.
java.beans.XMLEncoder.writeStatement(java.beans.Statement),records the statement so that the encoder will produce the actual output when the stream is flushed.
java.beans.PropertyVetoException.getPropertyChangeEvent(),gets the vetoed propertychangeevent.
java.beans.beancontext.BeanContext.addBeanContextMembershipListener(java.beans.beancontext.BeanContextMembershipListener),adds the specified beancontextmembershiplistener to receive beancontextmembershipevents from this beancontext whenever it adds or removes a child component(s).
"java.beans.beancontext.BeanContext.getResource(java.lang.String,java.beans.beancontext.BeanContextChild)",analagous to java.
"java.beans.beancontext.BeanContext.getResourceAsStream(java.lang.String,java.beans.beancontext.BeanContextChild)",analagous to java.
java.beans.beancontext.BeanContext.instantiateChild(java.lang.String),instantiate the javabean named as a child of this beancontext.
java.beans.beancontext.BeanContext.removeBeanContextMembershipListener(java.beans.beancontext.BeanContextMembershipListener),removes the specified beancontextmembershiplistener so that it no longer receives beancontextmembershipevents when the child component(s) are added or removed.
"java.beans.beancontext.BeanContextChild.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",adds a propertychangelistener to this beancontextchild in order to receive a propertychangeevent whenever the specified property has changed.
"java.beans.beancontext.BeanContextChild.addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)",adds a vetoablechangelistener to this beancontextchild to receive events whenever the specified property changes.
java.beans.beancontext.BeanContextChild.getBeanContext(),gets the beancontext associated with this beancontextchild.
"java.beans.beancontext.BeanContextChild.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",removes a propertychangelistener from this beancontextchild so that it no longer receives propertychangeevents when the specified property is changed.
"java.beans.beancontext.BeanContextChild.removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)",removes a vetoablechangelistener from this beancontextchild so that it no longer receives events when the specified property changes.
java.beans.beancontext.BeanContextChild.setBeanContext(java.beans.beancontext.BeanContext),"objects that implement this interface, shall fire a java."
java.beans.beancontext.BeanContextChildComponentProxy.getComponent(),gets the java.
java.beans.beancontext.BeanContextContainerProxy.getContainer(),gets the java.
java.beans.beancontext.BeanContextMembershipListener.childrenAdded(java.beans.beancontext.BeanContextMembershipEvent),called when a child or list of children is added to a beancontext that this listener is registered with.
java.beans.beancontext.BeanContextMembershipListener.childrenRemoved(java.beans.beancontext.BeanContextMembershipEvent),called when a child or list of children is removed from a beancontext that this listener is registered with.
java.beans.beancontext.BeanContextProxy.getBeanContextProxy(),gets the beancontextchild (or subinterface) associated with this object.
"java.beans.beancontext.BeanContextServiceProvider.getCurrentServiceSelectors(java.beans.beancontext.BeanContextServices,java.lang.Class)","invoked by beancontextservices, this method gets the current service selectors for the specified service."
"java.beans.beancontext.BeanContextServiceProvider.getService(java.beans.beancontext.BeanContextServices,java.lang.Object,java.lang.Class,java.lang.Object)","invoked by beancontextservices, this method requests an instance of a service from this beancontextserviceprovider."
"java.beans.beancontext.BeanContextServiceProvider.releaseService(java.beans.beancontext.BeanContextServices,java.lang.Object,java.lang.Object)","invoked by beancontextservices, this method releases a nested beancontextchild's (or any arbitrary object associated with a beancontextchild) reference to the specified service."
java.beans.beancontext.BeanContextServiceProviderBeanInfo.getServicesBeanInfo(),"gets a beaninfo array, one for each service class or interface statically available from this serviceprovider."
java.beans.beancontext.BeanContextServiceRevokedListener.serviceRevoked(java.beans.beancontext.BeanContextServiceRevokedEvent),the service named has been revoked.
java.beans.beancontext.BeanContextServices.addBeanContextServicesListener(java.beans.beancontext.BeanContextServicesListener),adds a beancontextserviceslistener to this beancontext.
"java.beans.beancontext.BeanContextServices.addService(java.lang.Class,java.beans.beancontext.BeanContextServiceProvider)",adds a service to this beancontext.
java.beans.beancontext.BeanContextServices.getCurrentServiceClasses(),gets the currently available services for this context.
java.beans.beancontext.BeanContextServices.getCurrentServiceSelectors(java.lang.Class),"gets the list of service dependent service parameters (service selectors) for the specified service, by calling getcurrentserviceselectors() on the underlying beancontextserviceprovider."
"java.beans.beancontext.BeanContextServices.getService(java.beans.beancontext.BeanContextChild,java.lang.Object,java.lang.Class,java.lang.Object,java.beans.beancontext.BeanContextServiceRevokedListener)","a beancontextchild, or any arbitrary object associated with a beancontextchild, may obtain a reference to a currently registered service from its nesting beancontextservices via invocation of this method."
java.beans.beancontext.BeanContextServices.hasService(java.lang.Class),reports whether or not a given service is currently available from this context.
"java.beans.beancontext.BeanContextServices.releaseService(java.beans.beancontext.BeanContextChild,java.lang.Object,java.lang.Object)",releases a beancontextchild's (or any arbitrary object associated with a beancontextchild) reference to the specified service by calling releaseservice() on the underlying beancontextserviceprovider.
java.beans.beancontext.BeanContextServices.removeBeanContextServicesListener(java.beans.beancontext.BeanContextServicesListener),removes a beancontextserviceslistener from this beancontext.
"java.beans.beancontext.BeanContextServices.revokeService(java.lang.Class,java.beans.beancontext.BeanContextServiceProvider,boolean)",beancontextserviceproviders wishing to remove a currently registered service from this context may do so via invocation of this method.
java.beans.beancontext.BeanContextServicesListener.serviceAvailable(java.beans.beancontext.BeanContextServiceAvailableEvent),the service named has been registered.
"java.beans.beancontext.BeanContextChildSupport.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",add a propertychangelistener for a specific property.
"java.beans.beancontext.BeanContextChildSupport.addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)",add a vetoablechangelistener for a specific property.
"java.beans.beancontext.BeanContextChildSupport.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",report a bound property update to any registered listeners.
"java.beans.beancontext.BeanContextChildSupport.fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)",report a vetoable property update to any registered listeners.
java.beans.beancontext.BeanContextChildSupport.getBeanContext(),gets the nesting beancontext for this beancontextchildsupport.
java.beans.beancontext.BeanContextChildSupport.getBeanContextChildPeer(),gets the beancontextchild associated with this beancontextchildsupport.
java.beans.beancontext.BeanContextChildSupport.initializeBeanContextResources(),this method may be overridden by subclasses to provide their own initialization behaviors.
java.beans.beancontext.BeanContextChildSupport.isDelegated(),reports whether or not this class is a delegate of another.
java.beans.beancontext.BeanContextChildSupport.releaseBeanContextResources(),this method may be overridden by subclasses to provide their own release behaviors.
"java.beans.beancontext.BeanContextChildSupport.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",remove a propertychangelistener for a specific property.
"java.beans.beancontext.BeanContextChildSupport.removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)",removes a vetoablechangelistener.
java.beans.beancontext.BeanContextChildSupport.serviceAvailable(java.beans.beancontext.BeanContextServiceAvailableEvent),a new service is available from the nesting beancontext.
java.beans.beancontext.BeanContextChildSupport.serviceRevoked(java.beans.beancontext.BeanContextServiceRevokedEvent),a service provided by the nesting beancontext has been revoked.
java.beans.beancontext.BeanContextChildSupport.setBeanContext(java.beans.beancontext.BeanContext),sets the beancontext for this beancontextchildsupport.
java.beans.beancontext.BeanContextChildSupport.validatePendingSetBeanContext(java.beans.beancontext.BeanContext),called from setbeancontext to validate (or otherwise) the pending change in the nesting beancontext property value.
java.beans.beancontext.BeanContextEvent.getBeanContext(),gets the beancontext associated with this event.
java.beans.beancontext.BeanContextEvent.getPropagatedFrom(),gets the beancontext from which this event was propagated.
java.beans.beancontext.BeanContextEvent.isPropagated(),reports whether or not this event is propagated from some other beancontext.
java.beans.beancontext.BeanContextEvent.setPropagatedFrom(java.beans.beancontext.BeanContext),sets the beancontext from which this event was propagated.
java.beans.beancontext.BeanContextMembershipEvent.contains(java.lang.Object),is the child specified affected by the event?.
java.beans.beancontext.BeanContextMembershipEvent.iterator(),gets the array of children affected by this event.
java.beans.beancontext.BeanContextMembershipEvent.size(),gets the number of children affected by the notification.
java.beans.beancontext.BeanContextMembershipEvent.toArray(),gets the array of children affected by this event.
java.beans.beancontext.BeanContextServiceAvailableEvent.getCurrentServiceSelectors(),gets the list of service dependent selectors.
java.beans.beancontext.BeanContextServiceAvailableEvent.getServiceClass(),gets the service class that is the subject of this notification.
java.beans.beancontext.BeanContextServiceAvailableEvent.getSourceAsBeanContextServices(),gets the source as a reference of type beancontextservices.
java.beans.beancontext.BeanContextServiceRevokedEvent.getServiceClass(),gets the service class that is the subject of this notification.
java.beans.beancontext.BeanContextServiceRevokedEvent.getSourceAsBeanContextServices(),gets the source as a reference of type beancontextservices.
java.beans.beancontext.BeanContextServiceRevokedEvent.isCurrentServiceInvalidNow(),"reports if the current service is being forcibly revoked, in which case the references are now invalidated and unusable."
java.beans.beancontext.BeanContextServiceRevokedEvent.isServiceClass(java.lang.Class),checks this event to determine whether or not the service being revoked is of a particular class.
java.beans.beancontext.BeanContextServicesSupport.addBeanContextServicesListener(java.beans.beancontext.BeanContextServicesListener),add a beancontextserviceslistener.
"java.beans.beancontext.BeanContextServicesSupport.addService(java.lang.Class,java.beans.beancontext.BeanContextServiceProvider)",add a service.
"java.beans.beancontext.BeanContextServicesSupport.addService(java.lang.Class,java.beans.beancontext.BeanContextServiceProvider,boolean)",add a service.
java.beans.beancontext.BeanContextServicesSupport.bcsPreDeserializationHook(java.io.ObjectInputStream),called from beancontextsupport readobject before it deserializes the children .
java.beans.beancontext.BeanContextServicesSupport.bcsPreSerializationHook(java.io.ObjectOutputStream),called from beancontextsupport writeobject before it serializes the children .
"java.beans.beancontext.BeanContextServicesSupport.childJustRemovedHook(java.lang.Object,java.beans.beancontext.BeanContextSupport.BCSChild)",called from superclass child removal operations after a child has been successfully removed.
"java.beans.beancontext.BeanContextServicesSupport.createBCSChild(java.lang.Object,java.lang.Object)",subclasses can override this method to insert their own subclass of child without having to override add() or the other collection methods that add children to the set.
"java.beans.beancontext.BeanContextServicesSupport.createBCSSServiceProvider(java.lang.Class,java.beans.beancontext.BeanContextServiceProvider)",subclasses can override this method to create new subclasses of bcssserviceprovider without having to override addservice() in order to instantiate.
java.beans.beancontext.BeanContextServicesSupport.fireServiceAdded(java.lang.Class),fires a beancontextserviceevent notifying of a new service.
java.beans.beancontext.BeanContextServicesSupport.fireServiceAdded(java.beans.beancontext.BeanContextServiceAvailableEvent),fires a beancontextserviceavailableevent indicating that a new service has become available.
java.beans.beancontext.BeanContextServicesSupport.fireServiceRevoked(java.beans.beancontext.BeanContextServiceRevokedEvent),fires a beancontextserviceevent notifying of a service being revoked.
"java.beans.beancontext.BeanContextServicesSupport.fireServiceRevoked(java.lang.Class,boolean)",fires a beancontextservicerevokedevent indicating that a particular service is no longer available.
java.beans.beancontext.BeanContextServicesSupport.getBeanContextServicesPeer(),gets the beancontextservices associated with this beancontextservicessupport.
java.beans.beancontext.BeanContextServicesSupport.getChildBeanContextServicesListener(java.lang.Object),gets the beancontextserviceslistener (if any) of the specified child.
"java.beans.beancontext.BeanContextServicesSupport.getService(java.beans.beancontext.BeanContextChild,java.lang.Object,java.lang.Class,java.lang.Object,java.beans.beancontext.BeanContextServiceRevokedListener)",obtain a service which may be delegated.
java.beans.beancontext.BeanContextServicesSupport.hasService(java.lang.Class),"has a service, which may be delegated."
java.beans.beancontext.BeanContextServicesSupport.initialize(),called by beancontextsupport superclass during construction and deserialization to initialize subclass transient state.
java.beans.beancontext.BeanContextServicesSupport.initializeBeanContextResources(),called from setbeancontext to notify a beancontextchild to allocate resources obtained from the nesting beancontext.
java.beans.beancontext.BeanContextServicesSupport.releaseBeanContextResources(),called from setbeancontext to notify a beancontextchild to release resources obtained from the nesting beancontext.
"java.beans.beancontext.BeanContextServicesSupport.releaseService(java.beans.beancontext.BeanContextChild,java.lang.Object,java.lang.Object)",release a service.
java.beans.beancontext.BeanContextServicesSupport.removeBeanContextServicesListener(java.beans.beancontext.BeanContextServicesListener),remove a beancontextserviceslistener.
"java.beans.beancontext.BeanContextServicesSupport.revokeService(java.lang.Class,java.beans.beancontext.BeanContextServiceProvider,boolean)",remove a service.
java.beans.beancontext.BeanContextServicesSupport.serviceAvailable(java.beans.beancontext.BeanContextServiceAvailableEvent),"beancontextserviceslistener callback, propagates event to all currently registered listeners and beancontextservices children, if this beancontextservice does not already implement this service itself."
java.beans.beancontext.BeanContextServicesSupport.serviceRevoked(java.beans.beancontext.BeanContextServiceRevokedEvent),"beancontextserviceslistener callback, propagates event to all currently registered listeners and beancontextservices children, if this beancontextservice does not already implement this service itself."
java.beans.beancontext.BeanContextServicesSupport.BCSSServiceProvider.getServiceProvider(),returns the service provider.
java.beans.beancontext.BeanContextSupport.add(java.lang.Object),adds/nests a child within this beancontext.
java.beans.beancontext.BeanContextSupport.addAll(java.util.Collection),"add collection to set of children (unsupported) implementations must synchronized on the hierarchy lock and ""children"" protected field."
java.beans.beancontext.BeanContextSupport.addBeanContextMembershipListener(java.beans.beancontext.BeanContextMembershipListener),adds a beancontextmembershiplistener.
java.beans.beancontext.BeanContextSupport.avoidingGui(),used to determine if the beancontext child is avoiding using its gui.
java.beans.beancontext.BeanContextSupport.bcsChildren(),returns an iterator of all children of this beancontext.
java.beans.beancontext.BeanContextSupport.bcsPreDeserializationHook(java.io.ObjectInputStream),called by readobject after defaultreadobject() but prior to deserialization of any children.
java.beans.beancontext.BeanContextSupport.bcsPreSerializationHook(java.io.ObjectOutputStream),called by writeobject after defaultwriteobject() but prior to serialization of currently serializable children.
"java.beans.beancontext.BeanContextSupport.childDeserializedHook(java.lang.Object,java.beans.beancontext.BeanContextSupport.BCSChild)",called by readobject with the newly deserialized child and bcschild.
"java.beans.beancontext.BeanContextSupport.childJustAddedHook(java.lang.Object,java.beans.beancontext.BeanContextSupport.BCSChild)",subclasses may override this method to simply extend add() semantics after the child has been added and before the event notification has occurred.
"java.beans.beancontext.BeanContextSupport.childJustRemovedHook(java.lang.Object,java.beans.beancontext.BeanContextSupport.BCSChild)",subclasses may override this method to simply extend remove() semantics after the child has been removed and before the event notification has occurred.
"java.beans.beancontext.BeanContextSupport.classEquals(java.lang.Class,java.lang.Class)","tests to see if two class objects, or their names are equal."
java.beans.beancontext.BeanContextSupport.clear(),"clear the children (unsupported) implementations must synchronized on the hierarchy lock and ""children"" protected field."
java.beans.beancontext.BeanContextSupport.contains(java.lang.Object),determines whether or not the specified object is currently a child of this beancontext.
java.beans.beancontext.BeanContextSupport.containsAll(java.util.Collection),tests to see if all objects in the specified collection are children of this beancontext.
java.beans.beancontext.BeanContextSupport.containsKey(java.lang.Object),determines whether or not the specified object is currently a child of this beancontext.
java.beans.beancontext.BeanContextSupport.copyChildren(),gets a copy of the this beancontext's children.
"java.beans.beancontext.BeanContextSupport.createBCSChild(java.lang.Object,java.lang.Object)",subclasses can override this method to insert their own subclass of child without having to override add() or the other collection methods that add children to the set.
"java.beans.beancontext.BeanContextSupport.deserialize(java.io.ObjectInputStream,java.util.Collection)",used by readobject to deserialize a collection.
java.beans.beancontext.BeanContextSupport.dontUseGui(),notify this instance that it may no longer render a gui.
java.beans.beancontext.BeanContextSupport.fireChildrenAdded(java.beans.beancontext.BeanContextMembershipEvent),fire a beancontextshipevent on the beancontextmembershiplistener interface.
java.beans.beancontext.BeanContextSupport.fireChildrenRemoved(java.beans.beancontext.BeanContextMembershipEvent),fire a beancontextshipevent on the beancontextmembershiplistener interface.
java.beans.beancontext.BeanContextSupport.getBeanContextPeer(),gets the instance of beancontext that this object is providing the implementation for.
java.beans.beancontext.BeanContextSupport.getChildBeanContextChild(java.lang.Object),gets the beancontextchild (if any) of the specified child.
java.beans.beancontext.BeanContextSupport.getChildBeanContextMembershipListener(java.lang.Object),gets the beancontextmembershiplistener (if any) of the specified child.
java.beans.beancontext.BeanContextSupport.getChildPropertyChangeListener(java.lang.Object),gets the propertychangelistener (if any) of the specified child.
java.beans.beancontext.BeanContextSupport.getChildSerializable(java.lang.Object),gets the serializable (if any) associated with the specified child.
java.beans.beancontext.BeanContextSupport.getChildVetoableChangeListener(java.lang.Object),gets the vetoablechangelistener (if any) of the specified child.
java.beans.beancontext.BeanContextSupport.getChildVisibility(java.lang.Object),gets the component (if any) associated with the specified child.
java.beans.beancontext.BeanContextSupport.getLocale(),gets the locale for this beancontext.
java.beans.beancontext.BeanContextSupport.initialize(),protected method called from constructor and readobject to initialize transient state of beancontextsupport instance.
java.beans.beancontext.BeanContextSupport.instantiateChild(java.lang.String),"the instantiatechild method is a convenience hook in beancontext to simplify the task of instantiating a bean, nested, into a beancontext."
java.beans.beancontext.BeanContextSupport.isDesignTime(),reports whether or not this object is in currently in design time mode.
java.beans.beancontext.BeanContextSupport.isEmpty(),reports whether or not this beancontext is empty.
java.beans.beancontext.BeanContextSupport.isSerializing(),is this beancontext in the process of being serialized?.
java.beans.beancontext.BeanContextSupport.iterator(),gets all javabean or beancontext instances currently nested in this beancontext.
java.beans.beancontext.BeanContextSupport.needsGui(),"this method is typically called from the environment in order to determine if the implementor ""needs"" a gui."
java.beans.beancontext.BeanContextSupport.okToUseGui(),notify this instance that it may now render a gui.
java.beans.beancontext.BeanContextSupport.propertyChange(java.beans.PropertyChangeEvent),subclasses may envelope to monitor child property changes.
java.beans.beancontext.BeanContextSupport.readChildren(java.io.ObjectInputStream),when an instance of this class is used as a delegate for the implementation of the beancontext protocols (and its subprotocols) there exists a 'chicken and egg' problem during deserialization.
java.beans.beancontext.BeanContextSupport.remove(java.lang.Object),removes a child from this beancontext.
"java.beans.beancontext.BeanContextSupport.remove(java.lang.Object,boolean)",internal remove used when removal caused by unexpected setbeancontext or by remove() invocation.
java.beans.beancontext.BeanContextSupport.removeAll(java.util.Collection),"remove all specified children (unsupported) implementations must synchronized on the hierarchy lock and ""children"" protected field."
java.beans.beancontext.BeanContextSupport.removeBeanContextMembershipListener(java.beans.beancontext.BeanContextMembershipListener),removes a beancontextmembershiplistener.
java.beans.beancontext.BeanContextSupport.retainAll(java.util.Collection),"retain only specified children (unsupported) implementations must synchronized on the hierarchy lock and ""children"" protected field."
"java.beans.beancontext.BeanContextSupport.serialize(java.io.ObjectOutputStream,java.util.Collection)",used by writeobject to serialize a collection.
java.beans.beancontext.BeanContextSupport.setDesignTime(boolean),sets the new design time value for this beancontext.
java.beans.beancontext.BeanContextSupport.setLocale(java.util.Locale),sets the locale of this beancontext.
java.beans.beancontext.BeanContextSupport.size(),gets the number of children currently nested in this beancontext.
java.beans.beancontext.BeanContextSupport.toArray(),gets all javabean or beancontext instances currently nested in this beancontext.
java.beans.beancontext.BeanContextSupport.toArray(java.lang.Object[]),gets an array containing all children of this beancontext that match the types contained in arry.
java.beans.beancontext.BeanContextSupport.validatePendingAdd(java.lang.Object),"subclasses of this class may override, or envelope, this method to add validation behavior for the beancontext to examine child objects immediately prior to their being added to the beancontext."
java.beans.beancontext.BeanContextSupport.validatePendingRemove(java.lang.Object),"subclasses of this class may override, or envelope, this method to add validation behavior for the beancontext to examine child objects immediately prior to their being removed from the beancontext."
java.beans.beancontext.BeanContextSupport.vetoableChange(java.beans.PropertyChangeEvent),subclasses may envelope to monitor veto child property changes.
java.beans.beancontext.BeanContextSupport.writeChildren(java.io.ObjectOutputStream),used to serialize all children of this beancontext.
java.io.Closeable.close(),closes this stream and releases any system resources associated with it.
java.io.DataInput.readBoolean(),"reads one input byte and returns true if that byte is nonzero, false if that byte is zero."
java.io.DataInput.readByte(),reads and returns one input byte.
java.io.DataInput.readChar(),reads two input bytes and returns a char value.
java.io.DataInput.readDouble(),reads eight input bytes and returns a double value.
java.io.DataInput.readFloat(),reads four input bytes and returns a float value.
java.io.DataInput.readFully(byte[]),reads some bytes from an input stream and stores them into the buffer array b.
"java.io.DataInput.readFully(byte[],int,int)",reads len bytes from an input stream.
java.io.DataInput.readInt(),reads four input bytes and returns an int value.
java.io.DataInput.readLine(),reads the next line of text from the input stream.
java.io.DataInput.readLong(),reads eight input bytes and returns a long value.
java.io.DataInput.readShort(),reads two input bytes and returns a short value.
java.io.DataInput.readUnsignedByte(),"reads one input byte, zero-extends it to type int, and returns the result, which is therefore in the range 0 through 255."
java.io.DataInput.readUnsignedShort(),reads two input bytes and returns an int value in the range 0 through 65535.
java.io.DataInput.readUTF(),reads in a string that has been encoded using a modified utf-8 format.
java.io.DataInput.skipBytes(int),"makes an attempt to skip over n bytes of data from the input stream, discarding the skipped bytes."
java.io.DataOutput.write(int),writes to the output stream the eight low-order bits of the argument b.
java.io.DataOutput.write(byte[]),writes to the output stream all the bytes in array b.
"java.io.DataOutput.write(byte[],int,int)","writes len bytes from array b, in order, to the output stream."
java.io.DataOutput.writeBoolean(boolean),writes a boolean value to this output stream.
java.io.DataOutput.writeByte(int),writes to the output stream the eight low- order bits of the argument v.
java.io.DataOutput.writeBytes(java.lang.String),writes a string to the output stream.
java.io.DataOutput.writeChar(int),"writes a char value, which is comprised of two bytes, to the output stream."
java.io.DataOutput.writeChars(java.lang.String),"writes every character in the string s, to the output stream, in order, two bytes per character."
java.io.DataOutput.writeDouble(double),"writes a double value, which is comprised of eight bytes, to the output stream."
java.io.DataOutput.writeFloat(float),"writes a float value, which is comprised of four bytes, to the output stream."
java.io.DataOutput.writeInt(int),"writes an int value, which is comprised of four bytes, to the output stream."
java.io.DataOutput.writeLong(long),"writes a long value, which is comprised of eight bytes, to the output stream."
java.io.DataOutput.writeShort(int),writes two bytes to the output stream to represent the value of the argument.
java.io.DataOutput.writeUTF(java.lang.String),"writes two bytes of length information to the output stream, followed by the modified utf-8 representation of every character in the string s."
java.io.Externalizable.readExternal(java.io.ObjectInput),"the object implements the readexternal method to restore its contents by calling the methods of datainput for primitive types and readobject for objects, strings and arrays."
java.io.Externalizable.writeExternal(java.io.ObjectOutput),"the object implements the writeexternal method to save its contents by calling the methods of dataoutput for its primitive values or calling the writeobject method of objectoutput for objects, strings, and arrays."
java.io.FileFilter.accept(java.io.File),tests whether or not the specified abstract pathname should be included in a pathname list.
"java.io.FilenameFilter.accept(java.io.File,java.lang.String)",tests if a specified file should be included in a file list.
java.io.Flushable.flush(),flushes this stream by writing any buffered output to the underlying stream.
java.io.ObjectInput.available(),returns the number of bytes that can be read without blocking.
java.io.ObjectInput.close(),closes the input stream.
java.io.ObjectInput.read(),reads a byte of data.
java.io.ObjectInput.read(byte[]),reads into an array of bytes.
"java.io.ObjectInput.read(byte[],int,int)",reads into an array of bytes.
java.io.ObjectInput.readObject(),read and return an object.
java.io.ObjectInput.skip(long),skips n bytes of input.
java.io.ObjectInputValidation.validateObject(),validates the object.
java.io.ObjectOutput.close(),closes the stream.
java.io.ObjectOutput.flush(),flushes the stream.
java.io.ObjectOutput.write(int),writes a byte.
java.io.ObjectOutput.write(byte[]),writes an array of bytes.
"java.io.ObjectOutput.write(byte[],int,int)",writes a sub array of bytes.
java.io.ObjectOutput.writeObject(java.lang.Object),write an object to the underlying storage or stream.
java.io.BufferedInputStream.available(),returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.
java.io.BufferedInputStream.close(),closes this input stream and releases any system resources associated with the stream.
java.io.BufferedInputStream.markSupported(),tests if this input stream supports the mark and reset methods.
"java.io.BufferedInputStream.read(byte[],int,int)","reads bytes from this byte-input stream into the specified byte array, starting at the given offset."
java.io.BufferedOutputStream.flush(),flushes this buffered output stream.
java.io.BufferedOutputStream.write(int),writes the specified byte to this buffered output stream.
"java.io.BufferedOutputStream.write(byte[],int,int)",writes len bytes from the specified byte array starting at offset off to this buffered output stream.
java.io.BufferedReader.lines(),"returns a stream, the elements of which are lines read from this bufferedreader."
java.io.BufferedReader.mark(int),marks the present position in the stream.
java.io.BufferedReader.markSupported(),"tells whether this stream supports the mark() operation, which it does."
java.io.BufferedReader.read(),reads a single character.
"java.io.BufferedReader.read(char[],int,int)",reads characters into a portion of an array.
java.io.BufferedReader.readLine(),reads a line of text.
java.io.BufferedReader.ready(),tells whether this stream is ready to be read.
java.io.BufferedReader.reset(),resets the stream to the most recent mark.
java.io.BufferedReader.skip(long),skips characters.
java.io.BufferedWriter.flush(),flushes the stream.
java.io.BufferedWriter.newLine(),writes a line separator.
java.io.BufferedWriter.write(int),writes a single character.
"java.io.BufferedWriter.write(char[],int,int)",writes a portion of an array of characters.
"java.io.BufferedWriter.write(java.lang.String,int,int)",writes a portion of a string.
java.io.ByteArrayInputStream.available(),returns the number of remaining bytes that can be read (or skipped over) from this input stream.
java.io.ByteArrayInputStream.close(),closing a bytearrayinputstream has no effect.
java.io.ByteArrayInputStream.mark(int),set the current marked position in the stream.
java.io.ByteArrayInputStream.markSupported(),tests if this inputstream supports mark/reset.
java.io.ByteArrayInputStream.read(),reads the next byte of data from this input stream.
"java.io.ByteArrayInputStream.read(byte[],int,int)",reads up to len bytes of data into an array of bytes from this input stream.
java.io.ByteArrayInputStream.reset(),resets the buffer to the marked position.
java.io.ByteArrayInputStream.skip(long),skips n bytes of input from this input stream.
java.io.ByteArrayOutputStream.close(),closing a bytearrayoutputstream has no effect.
java.io.ByteArrayOutputStream.reset(),"resets the count field of this byte array output stream to zero, so that all currently accumulated output in the output stream is discarded."
java.io.ByteArrayOutputStream.size(),returns the current size of the buffer.
java.io.ByteArrayOutputStream.toByteArray(),creates a newly allocated byte array.
java.io.ByteArrayOutputStream.toString(),converts the buffer's contents into a string decoding bytes using the platform's default character set.
java.io.ByteArrayOutputStream.toString(java.lang.String),converts the buffer's contents into a string by decoding the bytes using the named charset.
java.io.ByteArrayOutputStream.write(int),writes the specified byte to this byte array output stream.
"java.io.ByteArrayOutputStream.write(byte[],int,int)",writes len bytes from the specified byte array starting at offset off to this byte array output stream.
java.io.ByteArrayOutputStream.writeTo(java.io.OutputStream),"writes the complete contents of this byte array output stream to the specified output stream argument, as if by calling the output stream's write method using out."
java.io.CharArrayReader.close(),closes the stream and releases any system resources associated with it.
java.io.CharArrayReader.mark(int),marks the present position in the stream.
java.io.CharArrayReader.markSupported(),"tells whether this stream supports the mark() operation, which it does."
java.io.CharArrayReader.read(),reads a single character.
"java.io.CharArrayReader.read(char[],int,int)",reads characters into a portion of an array.
java.io.CharArrayReader.ready(),tells whether this stream is ready to be read.
java.io.CharArrayReader.reset(),"resets the stream to the most recent mark, or to the beginning if it has never been marked."
java.io.CharArrayReader.skip(long),skips characters.
java.io.CharArrayWriter.append(java.lang.CharSequence),appends the specified character sequence to this writer.
"java.io.CharArrayWriter.append(java.lang.CharSequence,int,int)",appends a subsequence of the specified character sequence to this writer.
java.io.CharArrayWriter.append(char),appends the specified character to this writer.
java.io.CharArrayWriter.close(),close the stream.
java.io.CharArrayWriter.flush(),flush the stream.
java.io.CharArrayWriter.reset(),resets the buffer so that you can use it again without throwing away the already allocated buffer.
java.io.CharArrayWriter.size(),returns the current size of the buffer.
java.io.CharArrayWriter.toCharArray(),returns a copy of the input data.
java.io.CharArrayWriter.toString(),converts input data to a string.
java.io.CharArrayWriter.write(int),writes a character to the buffer.
"java.io.CharArrayWriter.write(char[],int,int)",writes characters to the buffer.
"java.io.CharArrayWriter.write(java.lang.String,int,int)",write a portion of a string to the buffer.
java.io.CharArrayWriter.writeTo(java.io.Writer),writes the contents of the buffer to another character stream.
java.io.Console.flush(),flushes the console and forces any buffered output to be written immediately .
"java.io.Console.format(java.lang.String,java.lang.Object...)",writes a formatted string to this console's output stream using the specified format string and arguments.
"java.io.Console.printf(java.lang.String,java.lang.Object...)",a convenience method to write a formatted string to this console's output stream using the specified format string and arguments.
java.io.Console.reader(),retrieves the unique reader object associated with this console.
"java.io.Console.readLine(java.lang.String,java.lang.Object...)","provides a formatted prompt, then reads a single line of text from the console."
java.io.Console.readLine(),reads a single line of text from the console.
"java.io.Console.readPassword(java.lang.String,java.lang.Object...)","provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled."
java.io.Console.readPassword(),reads a password or passphrase from the console with echoing disabled.
java.io.Console.writer(),retrieves the unique printwriter object associated with this console.
java.io.DataInputStream.read(byte[]),reads some number of bytes from the contained input stream and stores them into the buffer array b.
"java.io.DataInputStream.read(byte[],int,int)",reads up to len bytes of data from the contained input stream into an array of bytes.
java.io.DataInputStream.readUTF(java.io.DataInput),reads from the stream in a representation of a unicode character string encoded in modified utf-8 format; this string of characters is then returned as a string.
java.io.DataOutputStream.flush(),flushes this data output stream.
java.io.DataOutputStream.size(),"returns the current value of the counter written, the number of bytes written to this data output stream so far."
java.io.DataOutputStream.write(int),writes the specified byte (the low eight bits of the argument b) to the underlying output stream.
"java.io.DataOutputStream.write(byte[],int,int)",writes len bytes from the specified byte array starting at offset off to the underlying output stream.
java.io.DataOutputStream.writeBoolean(boolean),writes a boolean to the underlying output stream as a 1-byte value.
java.io.DataOutputStream.writeByte(int),writes out a byte to the underlying output stream as a 1-byte value.
java.io.DataOutputStream.writeBytes(java.lang.String),writes out the string to the underlying output stream as a sequence of bytes.
java.io.DataOutputStream.writeChar(int),"writes a char to the underlying output stream as a 2-byte value, high byte first."
java.io.DataOutputStream.writeChars(java.lang.String),writes a string to the underlying output stream as a sequence of characters.
java.io.DataOutputStream.writeDouble(double),"converts the double argument to a long using the doubletolongbits method in class double, and then writes that long value to the underlying output stream as an 8-byte quantity, high byte first."
java.io.DataOutputStream.writeFloat(float),"converts the float argument to an int using the floattointbits method in class float, and then writes that int value to the underlying output stream as a 4-byte quantity, high byte first."
java.io.DataOutputStream.writeInt(int),"writes an int to the underlying output stream as four bytes, high byte first."
java.io.DataOutputStream.writeLong(long),"writes a long to the underlying output stream as eight bytes, high byte first."
java.io.DataOutputStream.writeShort(int),"writes a short to the underlying output stream as two bytes, high byte first."
java.io.DataOutputStream.writeUTF(java.lang.String),writes a string to the underlying output stream using modified utf-8 encoding in a machine-independent manner.
java.io.File.canExecute(),tests whether the application can execute the file denoted by this abstract pathname.
java.io.File.canRead(),tests whether the application can read the file denoted by this abstract pathname.
java.io.File.canWrite(),tests whether the application can modify the file denoted by this abstract pathname.
java.io.File.compareTo(java.io.File),compares two abstract pathnames lexicographically.
java.io.File.createNewFile(),"atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist."
"java.io.File.createTempFile(java.lang.String,java.lang.String,java.io.File)","creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name."
"java.io.File.createTempFile(java.lang.String,java.lang.String)","creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name."
java.io.File.delete(),deletes the file or directory denoted by this abstract pathname.
java.io.File.deleteOnExit(),requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates.
java.io.File.equals(java.lang.Object),tests this abstract pathname for equality with the given object.
java.io.File.exists(),tests whether the file or directory denoted by this abstract pathname exists.
java.io.File.getAbsoluteFile(),returns the absolute form of this abstract pathname.
java.io.File.getAbsolutePath(),returns the absolute pathname string of this abstract pathname.
java.io.File.getCanonicalFile(),returns the canonical form of this abstract pathname.
java.io.File.getCanonicalPath(),returns the canonical pathname string of this abstract pathname.
java.io.File.getFreeSpace(),returns the number of unallocated bytes in the partition named by this abstract path name.
java.io.File.getName(),returns the name of the file or directory denoted by this abstract pathname.
java.io.File.getParent(),"returns the pathname string of this abstract pathname's parent, or null if this pathname does not name a parent directory."
java.io.File.getParentFile(),"returns the abstract pathname of this abstract pathname's parent, or null if this pathname does not name a parent directory."
java.io.File.getPath(),converts this abstract pathname into a pathname string.
java.io.File.getTotalSpace(),returns the size of the partition named by this abstract pathname.
java.io.File.getUsableSpace(),returns the number of bytes available to this virtual machine on the partition named by this abstract pathname.
java.io.File.hashCode(),computes a hash code for this abstract pathname.
java.io.File.isAbsolute(),tests whether this abstract pathname is absolute.
java.io.File.isDirectory(),tests whether the file denoted by this abstract pathname is a directory.
java.io.File.isFile(),tests whether the file denoted by this abstract pathname is a normal file.
java.io.File.isHidden(),tests whether the file named by this abstract pathname is a hidden file.
java.io.File.lastModified(),returns the time that the file denoted by this abstract pathname was last modified.
java.io.File.length(),returns the length of the file denoted by this abstract pathname.
java.io.File.list(),returns an array of strings naming the files and directories in the directory denoted by this abstract pathname.
java.io.File.list(java.io.FilenameFilter),returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.
java.io.File.listFiles(),returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname.
java.io.File.listFiles(java.io.FilenameFilter),returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.
java.io.File.listFiles(java.io.FileFilter),returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.
java.io.File.listRoots(),list the available filesystem roots.
java.io.File.mkdir(),creates the directory named by this abstract pathname.
java.io.File.mkdirs(),"creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories."
java.io.File.renameTo(java.io.File),renames the file denoted by this abstract pathname.
"java.io.File.setExecutable(boolean,boolean)",sets the owner's or everybody's execute permission for this abstract pathname.
java.io.File.setExecutable(boolean),a convenience method to set the owner's execute permission for this abstract pathname.
java.io.File.setLastModified(long),sets the last-modified time of the file or directory named by this abstract pathname.
"java.io.File.setReadable(boolean,boolean)",sets the owner's or everybody's read permission for this abstract pathname.
java.io.File.setReadable(boolean),a convenience method to set the owner's read permission for this abstract pathname.
java.io.File.setReadOnly(),marks the file or directory named by this abstract pathname so that only read operations are allowed.
"java.io.File.setWritable(boolean,boolean)",sets the owner's or everybody's write permission for this abstract pathname.
java.io.File.setWritable(boolean),a convenience method to set the owner's write permission for this abstract pathname.
java.io.File.toPath(),returns a java.
java.io.File.toString(),returns the pathname string of this abstract pathname.
java.io.File.toURI(),constructs a file: uri that represents this abstract pathname.
java.io.FileDescriptor.sync(),force all system buffers to synchronize with the underlying device.
java.io.FileDescriptor.valid(),tests if this file descriptor object is valid.
java.io.FileInputStream.available(),returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.
java.io.FileInputStream.close(),closes this file input stream and releases any system resources associated with the stream.
java.io.FileInputStream.finalize(),ensures that the close method of this file input stream is called when there are no more references to it.
java.io.FileInputStream.getChannel(),returns the unique filechannel object associated with this file input stream.
java.io.FileInputStream.getFD(),returns the filedescriptor object that represents the connection to the actual file in the file system being used by this fileinputstream.
java.io.FileInputStream.read(),reads a byte of data from this input stream.
java.io.FileInputStream.read(byte[]),reads up to b.
"java.io.FileInputStream.read(byte[],int,int)",reads up to len bytes of data from this input stream into an array of bytes.
java.io.FileInputStream.skip(long),skips over and discards n bytes of data from the input stream.
java.io.FileOutputStream.close(),closes this file output stream and releases any system resources associated with this stream.
java.io.FileOutputStream.finalize(),"cleans up the connection to the file, and ensures that the close method of this file output stream is called when there are no more references to this stream."
java.io.FileOutputStream.getChannel(),returns the unique filechannel object associated with this file output stream.
java.io.FileOutputStream.getFD(),returns the file descriptor associated with this stream.
java.io.FileOutputStream.write(int),writes the specified byte to this file output stream.
java.io.FileOutputStream.write(byte[]),writes b.
"java.io.FileOutputStream.write(byte[],int,int)",writes len bytes from the specified byte array starting at offset off to this file output stream.
java.io.FilePermission.equals(java.lang.Object),checks two filepermission objects for equality.
java.io.FilePermission.getActions(),"returns the ""canonical string representation"" of the actions."
java.io.FilePermission.hashCode(),returns the hash code value for this object.
java.io.FilePermission.implies(java.security.Permission),"checks if this filepermission object ""implies"" the specified permission."
java.io.FilePermission.newPermissionCollection(),returns a new permissioncollection object for storing filepermission objects.
java.io.FilterInputStream.available(),returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next caller of a method for this input stream.
java.io.FilterInputStream.close(),closes this input stream and releases any system resources associated with the stream.
java.io.FilterInputStream.mark(int),marks the current position in this input stream.
java.io.FilterInputStream.markSupported(),tests if this input stream supports the mark and reset methods.
java.io.FilterInputStream.read(),reads the next byte of data from this input stream.
java.io.FilterInputStream.read(byte[]),reads up to byte.
"java.io.FilterInputStream.read(byte[],int,int)",reads up to len bytes of data from this input stream into an array of bytes.
java.io.FilterInputStream.reset(),repositions this stream to the position at the time the mark method was last called on this input stream.
java.io.FilterInputStream.skip(long),skips over and discards n bytes of data from the input stream.
java.io.FilterOutputStream.close(),closes this output stream and releases any system resources associated with the stream.
java.io.FilterOutputStream.flush(),flushes this output stream and forces any buffered output bytes to be written out to the stream.
java.io.FilterOutputStream.write(int),writes the specified byte to this output stream.
java.io.FilterOutputStream.write(byte[]),writes b.
"java.io.FilterOutputStream.write(byte[],int,int)",writes len bytes from the specified byte array starting at offset off to this output stream.
java.io.FilterReader.mark(int),marks the present position in the stream.
java.io.FilterReader.markSupported(),tells whether this stream supports the mark() operation.
java.io.FilterReader.read(),reads a single character.
"java.io.FilterReader.read(char[],int,int)",reads characters into a portion of an array.
java.io.FilterReader.ready(),tells whether this stream is ready to be read.
java.io.FilterReader.reset(),resets the stream.
java.io.FilterReader.skip(long),skips characters.
java.io.FilterWriter.flush(),flushes the stream.
java.io.FilterWriter.write(int),writes a single character.
"java.io.FilterWriter.write(char[],int,int)",writes a portion of an array of characters.
"java.io.FilterWriter.write(java.lang.String,int,int)",writes a portion of a string.
java.io.InputStream.available(),returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.
java.io.InputStream.close(),closes this input stream and releases any system resources associated with the stream.
java.io.InputStream.mark(int),marks the current position in this input stream.
java.io.InputStream.markSupported(),tests if this input stream supports the mark and reset methods.
java.io.InputStream.read(),reads the next byte of data from the input stream.
java.io.InputStream.read(byte[]),reads some number of bytes from the input stream and stores them into the buffer array b.
"java.io.InputStream.read(byte[],int,int)",reads up to len bytes of data from the input stream into an array of bytes.
java.io.InputStream.reset(),repositions this stream to the position at the time the mark method was last called on this input stream.
java.io.InputStream.skip(long),skips over and discards n bytes of data from this input stream.
java.io.InputStreamReader.getEncoding(),returns the name of the character encoding being used by this stream.
java.io.InputStreamReader.read(),reads a single character.
"java.io.InputStreamReader.read(char[],int,int)",reads characters into a portion of an array.
java.io.InputStreamReader.ready(),tells whether this stream is ready to be read.
java.io.LineNumberReader.getLineNumber(),get the current line number.
java.io.LineNumberReader.mark(int),mark the present position in the stream.
java.io.LineNumberReader.read(),read a single character.
"java.io.LineNumberReader.read(char[],int,int)",read characters into a portion of an array.
java.io.LineNumberReader.readLine(),read a line of text.
java.io.LineNumberReader.reset(),reset the stream to the most recent mark.
java.io.LineNumberReader.setLineNumber(int),set the current line number.
java.io.LineNumberReader.skip(long),skip characters.
java.io.ObjectInputStream.available(),returns the number of bytes that can be read without blocking.
java.io.ObjectInputStream.close(),closes the input stream.
java.io.ObjectInputStream.defaultReadObject(),read the non-static and non-transient fields of the current class from this stream.
java.io.ObjectInputStream.enableResolveObject(boolean),enable the stream to allow objects read from the stream to be replaced.
java.io.ObjectInputStream.read(),reads a byte of data.
"java.io.ObjectInputStream.read(byte[],int,int)",reads into an array of bytes.
java.io.ObjectInputStream.readBoolean(),reads in a boolean.
java.io.ObjectInputStream.readByte(),reads an 8 bit byte.
java.io.ObjectInputStream.readChar(),reads a 16 bit char.
java.io.ObjectInputStream.readClassDescriptor(),read a class descriptor from the serialization stream.
java.io.ObjectInputStream.readDouble(),reads a 64 bit double.
java.io.ObjectInputStream.readFields(),reads the persistent fields from the stream and makes them available by name.
java.io.ObjectInputStream.readFloat(),reads a 32 bit float.
java.io.ObjectInputStream.readFully(byte[]),"reads bytes, blocking until all bytes are read."
"java.io.ObjectInputStream.readFully(byte[],int,int)","reads bytes, blocking until all bytes are read."
java.io.ObjectInputStream.readInt(),reads a 32 bit int.
java.io.ObjectInputStream.readLong(),reads a 64 bit long.
java.io.ObjectInputStream.readObject(),read an object from the objectinputstream.
java.io.ObjectInputStream.readObjectOverride(),this method is called by trusted subclasses of objectoutputstream that constructed objectoutputstream using the protected no-arg constructor.
java.io.ObjectInputStream.readShort(),reads a 16 bit short.
java.io.ObjectInputStream.readStreamHeader(),the readstreamheader method is provided to allow subclasses to read and verify their own stream headers.
java.io.ObjectInputStream.readUnshared(),"reads an ""unshared"" object from the objectinputstream."
java.io.ObjectInputStream.readUnsignedByte(),reads an unsigned 8 bit byte.
java.io.ObjectInputStream.readUnsignedShort(),reads an unsigned 16 bit short.
java.io.ObjectInputStream.readUTF(),reads a string in modified utf-8 format.
"java.io.ObjectInputStream.registerValidation(java.io.ObjectInputValidation,int)",register an object to be validated before the graph is returned.
java.io.ObjectInputStream.resolveClass(java.io.ObjectStreamClass),load the local class equivalent of the specified stream class description.
java.io.ObjectInputStream.resolveObject(java.lang.Object),this method will allow trusted subclasses of objectinputstream to substitute one object for another during deserialization.
java.io.ObjectInputStream.resolveProxyClass(java.lang.String[]),"returns a proxy class that implements the interfaces named in a proxy class descriptor; subclasses may implement this method to read custom data from the stream along with the descriptors for dynamic proxy classes, allowing them to use an alternate loading mechanism for the interfaces and the proxy class."
java.io.ObjectInputStream.skipBytes(int),skips bytes.
java.io.ObjectInputStream.GetField.defaulted(java.lang.String),return true if the named field is defaulted and has no value in this stream.
"java.io.ObjectInputStream.GetField.get(java.lang.String,boolean)",get the value of the named boolean field from the persistent field.
"java.io.ObjectInputStream.GetField.get(java.lang.String,byte)",get the value of the named byte field from the persistent field.
"java.io.ObjectInputStream.GetField.get(java.lang.String,char)",get the value of the named char field from the persistent field.
"java.io.ObjectInputStream.GetField.get(java.lang.String,short)",get the value of the named short field from the persistent field.
"java.io.ObjectInputStream.GetField.get(java.lang.String,int)",get the value of the named int field from the persistent field.
"java.io.ObjectInputStream.GetField.get(java.lang.String,long)",get the value of the named long field from the persistent field.
"java.io.ObjectInputStream.GetField.get(java.lang.String,float)",get the value of the named float field from the persistent field.
"java.io.ObjectInputStream.GetField.get(java.lang.String,double)",get the value of the named double field from the persistent field.
"java.io.ObjectInputStream.GetField.get(java.lang.String,java.lang.Object)",get the value of the named object field from the persistent field.
java.io.ObjectInputStream.GetField.getObjectStreamClass(),get the objectstreamclass that describes the fields in the stream.
java.io.ObjectOutputStream.annotateClass(java.lang.Class<?>),subclasses may implement this method to allow class data to be stored in the stream.
java.io.ObjectOutputStream.annotateProxyClass(java.lang.Class<?>),subclasses may implement this method to store custom data in the stream along with descriptors for dynamic proxy classes.
java.io.ObjectOutputStream.close(),closes the stream.
java.io.ObjectOutputStream.defaultWriteObject(),write the non-static and non-transient fields of the current class to this stream.
java.io.ObjectOutputStream.drain(),drain any buffered data in objectoutputstream.
java.io.ObjectOutputStream.enableReplaceObject(boolean),enable the stream to do replacement of objects in the stream.
java.io.ObjectOutputStream.flush(),flushes the stream.
java.io.ObjectOutputStream.putFields(),retrieve the object used to buffer persistent fields to be written to the stream.
java.io.ObjectOutputStream.replaceObject(java.lang.Object),this method will allow trusted subclasses of objectoutputstream to substitute one object for another during serialization.
java.io.ObjectOutputStream.reset(),reset will disregard the state of any objects already written to the stream.
java.io.ObjectOutputStream.useProtocolVersion(int),specify stream protocol version to use when writing the stream.
java.io.ObjectOutputStream.write(int),writes a byte.
java.io.ObjectOutputStream.write(byte[]),writes an array of bytes.
"java.io.ObjectOutputStream.write(byte[],int,int)",writes a sub array of bytes.
java.io.ObjectOutputStream.writeBoolean(boolean),writes a boolean.
java.io.ObjectOutputStream.writeByte(int),writes an 8 bit byte.
java.io.ObjectOutputStream.writeBytes(java.lang.String),writes a string as a sequence of bytes.
java.io.ObjectOutputStream.writeChar(int),writes a 16 bit char.
java.io.ObjectOutputStream.writeChars(java.lang.String),writes a string as a sequence of chars.
java.io.ObjectOutputStream.writeClassDescriptor(java.io.ObjectStreamClass),write the specified class descriptor to the objectoutputstream.
java.io.ObjectOutputStream.writeDouble(double),writes a 64 bit double.
java.io.ObjectOutputStream.writeFields(),write the buffered fields to the stream.
java.io.ObjectOutputStream.writeFloat(float),writes a 32 bit float.
java.io.ObjectOutputStream.writeInt(int),writes a 32 bit int.
java.io.ObjectOutputStream.writeLong(long),writes a 64 bit long.
java.io.ObjectOutputStream.writeObject(java.lang.Object),write the specified object to the objectoutputstream.
java.io.ObjectOutputStream.writeObjectOverride(java.lang.Object),method used by subclasses to override the default writeobject method.
java.io.ObjectOutputStream.writeShort(int),writes a 16 bit short.
java.io.ObjectOutputStream.writeStreamHeader(),the writestreamheader method is provided so subclasses can append or prepend their own header to the stream.
java.io.ObjectOutputStream.writeUnshared(java.lang.Object),"writes an ""unshared"" object to the objectoutputstream."
java.io.ObjectOutputStream.writeUTF(java.lang.String),primitive data write of this string in modified utf-8 format.
"java.io.ObjectOutputStream.PutField.put(java.lang.String,boolean)",put the value of the named boolean field into the persistent field.
"java.io.ObjectOutputStream.PutField.put(java.lang.String,byte)",put the value of the named byte field into the persistent field.
"java.io.ObjectOutputStream.PutField.put(java.lang.String,char)",put the value of the named char field into the persistent field.
"java.io.ObjectOutputStream.PutField.put(java.lang.String,short)",put the value of the named short field into the persistent field.
"java.io.ObjectOutputStream.PutField.put(java.lang.String,int)",put the value of the named int field into the persistent field.
"java.io.ObjectOutputStream.PutField.put(java.lang.String,long)",put the value of the named long field into the persistent field.
"java.io.ObjectOutputStream.PutField.put(java.lang.String,float)",put the value of the named float field into the persistent field.
"java.io.ObjectOutputStream.PutField.put(java.lang.String,double)",put the value of the named double field into the persistent field.
"java.io.ObjectOutputStream.PutField.put(java.lang.String,java.lang.Object)",put the value of the named object field into the persistent field.
java.io.ObjectStreamClass.forClass(),return the class in the local vm that this version is mapped to.
java.io.ObjectStreamClass.getField(java.lang.String),get the field of this class by name.
java.io.ObjectStreamClass.getFields(),return an array of the fields of this serializable class.
java.io.ObjectStreamClass.getName(),returns the name of the class described by this descriptor.
java.io.ObjectStreamClass.getSerialVersionUID(),return the serialversionuid for this class.
java.io.ObjectStreamClass.lookup(java.lang.Class<?>),find the descriptor for a class that can be serialized.
java.io.ObjectStreamClass.lookupAny(java.lang.Class<?>),"returns the descriptor for any class, regardless of whether it implements serializable."
java.io.ObjectStreamClass.toString(),return a string describing this objectstreamclass.
java.io.ObjectStreamField.compareTo(java.lang.Object),compare this field with another objectstreamfield.
java.io.ObjectStreamField.getName(),get the name of this field.
java.io.ObjectStreamField.getOffset(),offset of field within instance data.
java.io.ObjectStreamField.getType(),get the type of the field.
java.io.ObjectStreamField.getTypeCode(),returns character encoding of field type.
java.io.ObjectStreamField.getTypeString(),return the jvm type signature.
java.io.ObjectStreamField.isPrimitive(),return true if this field has a primitive type.
java.io.ObjectStreamField.isUnshared(),returns boolean value indicating whether or not the serializable field represented by this objectstreamfield instance is unshared.
java.io.ObjectStreamField.setOffset(int),offset within instance data.
java.io.ObjectStreamField.toString(),return a string that describes this field.
java.io.OutputStream.close(),closes this output stream and releases any system resources associated with this stream.
java.io.OutputStream.flush(),flushes this output stream and forces any buffered output bytes to be written out.
java.io.OutputStream.write(int),writes the specified byte to this output stream.
java.io.OutputStream.write(byte[]),writes b.
"java.io.OutputStream.write(byte[],int,int)",writes len bytes from the specified byte array starting at offset off to this output stream.
java.io.OutputStreamWriter.flush(),flushes the stream.
java.io.OutputStreamWriter.getEncoding(),returns the name of the character encoding being used by this stream.
java.io.OutputStreamWriter.write(int),writes a single character.
"java.io.OutputStreamWriter.write(char[],int,int)",writes a portion of an array of characters.
"java.io.OutputStreamWriter.write(java.lang.String,int,int)",writes a portion of a string.
java.io.PipedInputStream.available(),returns the number of bytes that can be read from this input stream without blocking.
java.io.PipedInputStream.close(),closes this piped input stream and releases any system resources associated with the stream.
java.io.PipedInputStream.connect(java.io.PipedOutputStream),causes this piped input stream to be connected to the piped output stream src.
java.io.PipedInputStream.read(),reads the next byte of data from this piped input stream.
"java.io.PipedInputStream.read(byte[],int,int)",reads up to len bytes of data from this piped input stream into an array of bytes.
java.io.PipedInputStream.receive(int),receives a byte of data.
java.io.PipedOutputStream.close(),closes this piped output stream and releases any system resources associated with this stream.
java.io.PipedOutputStream.connect(java.io.PipedInputStream),connects this piped output stream to a receiver.
java.io.PipedOutputStream.flush(),flushes this output stream and forces any buffered output bytes to be written out.
java.io.PipedOutputStream.write(int),writes the specified byte to the piped output stream.
"java.io.PipedOutputStream.write(byte[],int,int)",writes len bytes from the specified byte array starting at offset off to this piped output stream.
java.io.PipedReader.close(),closes this piped stream and releases any system resources associated with the stream.
java.io.PipedReader.connect(java.io.PipedWriter),causes this piped reader to be connected to the piped writer src.
java.io.PipedReader.read(),reads the next character of data from this piped stream.
"java.io.PipedReader.read(char[],int,int)",reads up to len characters of data from this piped stream into an array of characters.
java.io.PipedReader.ready(),tell whether this stream is ready to be read.
java.io.PipedWriter.close(),closes this piped output stream and releases any system resources associated with this stream.
java.io.PipedWriter.connect(java.io.PipedReader),connects this piped writer to a receiver.
java.io.PipedWriter.flush(),flushes this output stream and forces any buffered output characters to be written out.
java.io.PipedWriter.write(int),writes the specified char to the piped output stream.
"java.io.PipedWriter.write(char[],int,int)",writes len characters from the specified character array starting at offset off to this piped output stream.
java.io.PrintStream.append(java.lang.CharSequence),appends the specified character sequence to this output stream.
"java.io.PrintStream.append(java.lang.CharSequence,int,int)",appends a subsequence of the specified character sequence to this output stream.
java.io.PrintStream.append(char),appends the specified character to this output stream.
java.io.PrintStream.checkError(),flushes the stream and checks its error state.
java.io.PrintStream.clearError(),clears the internal error state of this stream.
java.io.PrintStream.close(),closes the stream.
java.io.PrintStream.flush(),flushes the stream.
"java.io.PrintStream.format(java.lang.String,java.lang.Object...)",writes a formatted string to this output stream using the specified format string and arguments.
"java.io.PrintStream.format(java.util.Locale,java.lang.String,java.lang.Object...)",writes a formatted string to this output stream using the specified format string and arguments.
java.io.PrintStream.print(boolean),prints a boolean value.
java.io.PrintStream.print(char),prints a character.
java.io.PrintStream.print(int),prints an integer.
java.io.PrintStream.print(long),prints a long integer.
java.io.PrintStream.print(float),prints a floating-point number.
java.io.PrintStream.print(double),prints a double-precision floating-point number.
java.io.PrintStream.print(char[]),prints an array of characters.
java.io.PrintStream.print(java.lang.String),prints a string.
java.io.PrintStream.print(java.lang.Object),prints an object.
"java.io.PrintStream.printf(java.lang.String,java.lang.Object...)",a convenience method to write a formatted string to this output stream using the specified format string and arguments.
"java.io.PrintStream.printf(java.util.Locale,java.lang.String,java.lang.Object...)",a convenience method to write a formatted string to this output stream using the specified format string and arguments.
java.io.PrintStream.println(),terminates the current line by writing the line separator string.
java.io.PrintStream.println(boolean),prints a boolean and then terminate the line.
java.io.PrintStream.println(char),prints a character and then terminate the line.
java.io.PrintStream.println(int),prints an integer and then terminate the line.
java.io.PrintStream.println(long),prints a long and then terminate the line.
java.io.PrintStream.println(float),prints a float and then terminate the line.
java.io.PrintStream.println(double),prints a double and then terminate the line.
java.io.PrintStream.println(char[]),prints an array of characters and then terminate the line.
java.io.PrintStream.println(java.lang.String),prints a string and then terminate the line.
java.io.PrintStream.println(java.lang.Object),prints an object and then terminate the line.
java.io.PrintStream.setError(),sets the error state of the stream to true.
java.io.PrintStream.write(int),writes the specified byte to this stream.
"java.io.PrintStream.write(byte[],int,int)",writes len bytes from the specified byte array starting at offset off to this stream.
java.io.PrintWriter.append(java.lang.CharSequence),appends the specified character sequence to this writer.
"java.io.PrintWriter.append(java.lang.CharSequence,int,int)",appends a subsequence of the specified character sequence to this writer.
java.io.PrintWriter.append(char),appends the specified character to this writer.
java.io.PrintWriter.checkError(),flushes the stream if it's not closed and checks its error state.
java.io.PrintWriter.clearError(),clears the error state of this stream.
java.io.PrintWriter.close(),closes the stream and releases any system resources associated with it.
java.io.PrintWriter.flush(),flushes the stream.
"java.io.PrintWriter.format(java.lang.String,java.lang.Object...)",writes a formatted string to this writer using the specified format string and arguments.
"java.io.PrintWriter.format(java.util.Locale,java.lang.String,java.lang.Object...)",writes a formatted string to this writer using the specified format string and arguments.
java.io.PrintWriter.print(boolean),prints a boolean value.
java.io.PrintWriter.print(char),prints a character.
java.io.PrintWriter.print(int),prints an integer.
java.io.PrintWriter.print(long),prints a long integer.
java.io.PrintWriter.print(float),prints a floating-point number.
java.io.PrintWriter.print(double),prints a double-precision floating-point number.
java.io.PrintWriter.print(char[]),prints an array of characters.
java.io.PrintWriter.print(java.lang.String),prints a string.
java.io.PrintWriter.print(java.lang.Object),prints an object.
"java.io.PrintWriter.printf(java.lang.String,java.lang.Object...)",a convenience method to write a formatted string to this writer using the specified format string and arguments.
"java.io.PrintWriter.printf(java.util.Locale,java.lang.String,java.lang.Object...)",a convenience method to write a formatted string to this writer using the specified format string and arguments.
java.io.PrintWriter.println(),terminates the current line by writing the line separator string.
java.io.PrintWriter.println(boolean),prints a boolean value and then terminates the line.
java.io.PrintWriter.println(char),prints a character and then terminates the line.
java.io.PrintWriter.println(int),prints an integer and then terminates the line.
java.io.PrintWriter.println(long),prints a long integer and then terminates the line.
java.io.PrintWriter.println(float),prints a floating-point number and then terminates the line.
java.io.PrintWriter.println(double),prints a double-precision floating-point number and then terminates the line.
java.io.PrintWriter.println(char[]),prints an array of characters and then terminates the line.
java.io.PrintWriter.println(java.lang.String),prints a string and then terminates the line.
java.io.PrintWriter.println(java.lang.Object),prints an object and then terminates the line.
java.io.PrintWriter.setError(),indicates that an error has occurred.
java.io.PrintWriter.write(int),writes a single character.
"java.io.PrintWriter.write(char[],int,int)",writes a portion of an array of characters.
java.io.PrintWriter.write(char[]),writes an array of characters.
"java.io.PrintWriter.write(java.lang.String,int,int)",writes a portion of a string.
java.io.PrintWriter.write(java.lang.String),writes a string.
java.io.PushbackInputStream.available(),returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.
java.io.PushbackInputStream.close(),closes this input stream and releases any system resources associated with the stream.
java.io.PushbackInputStream.mark(int),marks the current position in this input stream.
java.io.PushbackInputStream.markSupported(),"tests if this input stream supports the mark and reset methods, which it does not."
java.io.PushbackInputStream.read(),reads the next byte of data from this input stream.
"java.io.PushbackInputStream.read(byte[],int,int)",reads up to len bytes of data from this input stream into an array of bytes.
java.io.PushbackInputStream.reset(),repositions this stream to the position at the time the mark method was last called on this input stream.
java.io.PushbackInputStream.skip(long),skips over and discards n bytes of data from this input stream.
java.io.PushbackInputStream.unread(int),pushes back a byte by copying it to the front of the pushback buffer.
"java.io.PushbackInputStream.unread(byte[],int,int)",pushes back a portion of an array of bytes by copying it to the front of the pushback buffer.
java.io.PushbackInputStream.unread(byte[]),pushes back an array of bytes by copying it to the front of the pushback buffer.
java.io.PushbackReader.close(),closes the stream and releases any system resources associated with it.
java.io.PushbackReader.mark(int),marks the present position in the stream.
java.io.PushbackReader.markSupported(),"tells whether this stream supports the mark() operation, which it does not."
java.io.PushbackReader.read(),reads a single character.
"java.io.PushbackReader.read(char[],int,int)",reads characters into a portion of an array.
java.io.PushbackReader.ready(),tells whether this stream is ready to be read.
java.io.PushbackReader.reset(),resets the stream.
java.io.PushbackReader.skip(long),skips characters.
java.io.PushbackReader.unread(int),pushes back a single character by copying it to the front of the pushback buffer.
"java.io.PushbackReader.unread(char[],int,int)",pushes back a portion of an array of characters by copying it to the front of the pushback buffer.
java.io.PushbackReader.unread(char[]),pushes back an array of characters by copying it to the front of the pushback buffer.
java.io.RandomAccessFile.close(),closes this random access file stream and releases any system resources associated with the stream.
java.io.RandomAccessFile.getChannel(),returns the unique filechannel object associated with this file.
java.io.RandomAccessFile.getFD(),returns the opaque file descriptor object associated with this stream.
java.io.RandomAccessFile.getFilePointer(),returns the current offset in this file.
java.io.RandomAccessFile.length(),returns the length of this file.
java.io.RandomAccessFile.read(),reads a byte of data from this file.
"java.io.RandomAccessFile.read(byte[],int,int)",reads up to len bytes of data from this file into an array of bytes.
java.io.RandomAccessFile.read(byte[]),reads up to b.
java.io.RandomAccessFile.readBoolean(),reads a boolean from this file.
java.io.RandomAccessFile.readByte(),reads a signed eight-bit value from this file.
java.io.RandomAccessFile.readChar(),reads a character from this file.
java.io.RandomAccessFile.readDouble(),reads a double from this file.
java.io.RandomAccessFile.readFloat(),reads a float from this file.
java.io.RandomAccessFile.readFully(byte[]),reads b.
"java.io.RandomAccessFile.readFully(byte[],int,int)","reads exactly len bytes from this file into the byte array, starting at the current file pointer."
java.io.RandomAccessFile.readInt(),reads a signed 32-bit integer from this file.
java.io.RandomAccessFile.readLine(),reads the next line of text from this file.
java.io.RandomAccessFile.readLong(),reads a signed 64-bit integer from this file.
java.io.RandomAccessFile.readShort(),reads a signed 16-bit number from this file.
java.io.RandomAccessFile.readUnsignedByte(),reads an unsigned eight-bit number from this file.
java.io.RandomAccessFile.readUnsignedShort(),reads an unsigned 16-bit number from this file.
java.io.RandomAccessFile.readUTF(),reads in a string from this file.
java.io.RandomAccessFile.seek(long),"sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs."
java.io.RandomAccessFile.setLength(long),sets the length of this file.
java.io.RandomAccessFile.skipBytes(int),attempts to skip over n bytes of input discarding the skipped bytes.
java.io.RandomAccessFile.write(int),writes the specified byte to this file.
java.io.RandomAccessFile.write(byte[]),writes b.
"java.io.RandomAccessFile.write(byte[],int,int)",writes len bytes from the specified byte array starting at offset off to this file.
java.io.RandomAccessFile.writeBoolean(boolean),writes a boolean to the file as a one-byte value.
java.io.RandomAccessFile.writeByte(int),writes a byte to the file as a one-byte value.
java.io.RandomAccessFile.writeBytes(java.lang.String),writes the string to the file as a sequence of bytes.
java.io.RandomAccessFile.writeChar(int),"writes a char to the file as a two-byte value, high byte first."
java.io.RandomAccessFile.writeChars(java.lang.String),writes a string to the file as a sequence of characters.
java.io.RandomAccessFile.writeDouble(double),"converts the double argument to a long using the doubletolongbits method in class double, and then writes that long value to the file as an eight-byte quantity, high byte first."
java.io.RandomAccessFile.writeFloat(float),"converts the float argument to an int using the floattointbits method in class float, and then writes that int value to the file as a four-byte quantity, high byte first."
java.io.RandomAccessFile.writeInt(int),"writes an int to the file as four bytes, high byte first."
java.io.RandomAccessFile.writeLong(long),"writes a long to the file as eight bytes, high byte first."
java.io.RandomAccessFile.writeShort(int),"writes a short to the file as two bytes, high byte first."
java.io.RandomAccessFile.writeUTF(java.lang.String),writes a string to the file using modified utf-8 encoding in a machine-independent manner.
java.io.Reader.close(),closes the stream and releases any system resources associated with it.
java.io.Reader.mark(int),marks the present position in the stream.
java.io.Reader.markSupported(),tells whether this stream supports the mark() operation.
java.io.Reader.read(java.nio.CharBuffer),attempts to read characters into the specified character buffer.
java.io.Reader.read(),reads a single character.
java.io.Reader.read(char[]),reads characters into an array.
"java.io.Reader.read(char[],int,int)",reads characters into a portion of an array.
java.io.Reader.ready(),tells whether this stream is ready to be read.
java.io.Reader.reset(),resets the stream.
java.io.Reader.skip(long),skips characters.
java.io.SequenceInputStream.available(),returns an estimate of the number of bytes that can be read (or skipped over) from the current underlying input stream without blocking by the next invocation of a method for the current underlying input stream.
java.io.SequenceInputStream.close(),closes this input stream and releases any system resources associated with the stream.
java.io.SequenceInputStream.read(),reads the next byte of data from this input stream.
"java.io.SequenceInputStream.read(byte[],int,int)",reads up to len bytes of data from this input stream into an array of bytes.
java.io.StreamTokenizer.commentChar(int),specified that the character argument starts a single-line comment.
java.io.StreamTokenizer.eolIsSignificant(boolean),determines whether or not ends of line are treated as tokens.
java.io.StreamTokenizer.lineno(),return the current line number.
java.io.StreamTokenizer.lowerCaseMode(boolean),determines whether or not word token are automatically lowercased.
java.io.StreamTokenizer.nextToken(),parses the next token from the input stream of this tokenizer.
java.io.StreamTokenizer.ordinaryChar(int),"specifies that the character argument is ""ordinary"" in this tokenizer."
"java.io.StreamTokenizer.ordinaryChars(int,int)","specifies that all characters c in the range low <= c <= high are ""ordinary"" in this tokenizer."
java.io.StreamTokenizer.parseNumbers(),specifies that numbers should be parsed by this tokenizer.
java.io.StreamTokenizer.pushBack(),"causes the next call to the nexttoken method of this tokenizer to return the current value in the ttype field, and not to modify the value in the nval or sval field."
java.io.StreamTokenizer.quoteChar(int),specifies that matching pairs of this character delimit string constants in this tokenizer.
java.io.StreamTokenizer.resetSyntax(),"resets this tokenizer's syntax table so that all characters are ""ordinary."
java.io.StreamTokenizer.slashSlashComments(boolean),determines whether or not the tokenizer recognizes c++-style comments.
java.io.StreamTokenizer.slashStarComments(boolean),determines whether or not the tokenizer recognizes c-style comments.
java.io.StreamTokenizer.toString(),returns the string representation of the current stream token and the line number it occurs on.
"java.io.StreamTokenizer.whitespaceChars(int,int)",specifies that all characters c in the range low <= c <= high are white space characters.
"java.io.StreamTokenizer.wordChars(int,int)",specifies that all characters c in the range low <= c <= high are word constituents.
java.io.StringReader.close(),closes the stream and releases any system resources associated with it.
java.io.StringReader.mark(int),marks the present position in the stream.
java.io.StringReader.markSupported(),"tells whether this stream supports the mark() operation, which it does."
java.io.StringReader.read(),reads a single character.
"java.io.StringReader.read(char[],int,int)",reads characters into a portion of an array.
java.io.StringReader.ready(),tells whether this stream is ready to be read.
java.io.StringReader.reset(),"resets the stream to the most recent mark, or to the beginning of the string if it has never been marked."
java.io.StringReader.skip(long),skips the specified number of characters in the stream.
java.io.StringWriter.append(java.lang.CharSequence),appends the specified character sequence to this writer.
"java.io.StringWriter.append(java.lang.CharSequence,int,int)",appends a subsequence of the specified character sequence to this writer.
java.io.StringWriter.append(char),appends the specified character to this writer.
java.io.StringWriter.close(),closing a stringwriter has no effect.
java.io.StringWriter.flush(),flush the stream.
java.io.StringWriter.getBuffer(),return the string buffer itself.
java.io.StringWriter.toString(),return the buffer's current value as a string.
java.io.StringWriter.write(int),write a single character.
"java.io.StringWriter.write(char[],int,int)",write a portion of an array of characters.
java.io.StringWriter.write(java.lang.String),write a string.
"java.io.StringWriter.write(java.lang.String,int,int)",write a portion of a string.
java.io.Writer.append(java.lang.CharSequence),appends the specified character sequence to this writer.
"java.io.Writer.append(java.lang.CharSequence,int,int)",appends a subsequence of the specified character sequence to this writer.
java.io.Writer.append(char),appends the specified character to this writer.
java.io.Writer.close(),"closes the stream, flushing it first."
java.io.Writer.flush(),flushes the stream.
java.io.Writer.write(int),writes a single character.
java.io.Writer.write(char[]),writes an array of characters.
"java.io.Writer.write(char[],int,int)",writes a portion of an array of characters.
java.io.Writer.write(java.lang.String),writes a string.
"java.io.Writer.write(java.lang.String,int,int)",writes a portion of a string.
java.io.InvalidClassException.getMessage(),"produce the message and include the classname, if present."
java.io.UncheckedIOException.getCause(),returns the cause of this exception.
java.io.WriteAbortedException.getCause(),returns the exception that terminated the operation (the cause).
java.io.WriteAbortedException.getMessage(),"produce the message and include the message from the nested exception, if there is one."
java.lang.Appendable.append(java.lang.CharSequence),appends the specified character sequence to this appendable.
"java.lang.Appendable.append(java.lang.CharSequence,int,int)",appends a subsequence of the specified character sequence to this appendable.
java.lang.Appendable.append(char),appends the specified character to this appendable.
java.lang.AutoCloseable.close(),"closes this resource, relinquishing any underlying resources."
java.lang.CharSequence.charAt(int),returns the char value at the specified index.
java.lang.CharSequence.chars(),returns a stream of int zero-extending the char values from this sequence.
java.lang.CharSequence.codePoints(),returns a stream of code point values from this sequence.
java.lang.CharSequence.length(),returns the length of this character sequence.
"java.lang.CharSequence.subSequence(int,int)",returns a charsequence that is a subsequence of this sequence.
java.lang.CharSequence.toString(),returns a string containing the characters in this sequence in the same order as this sequence.
java.lang.Comparable.compareTo(java.lang.Comparable),compares this object with the specified object for order.
java.lang.Iterable.forEach(java.util.function.Consumer<? super java.lang.Iterable>),performs the given action for each element of the iterable until all elements have been processed or the action throws an exception.
java.lang.Iterable.iterator(),returns an iterator over elements of type t.
java.lang.Iterable.spliterator(),creates a spliterator over the elements described by this iterable.
java.lang.Readable.read(java.nio.CharBuffer),attempts to read characters into the specified character buffer.
java.lang.Runnable.run(),"when an object implementing interface runnable is used to create a thread, starting the thread causes the object's run method to be called in that separately executing thread."
"java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread,java.lang.Throwable)",method invoked when the given thread terminates due to the given uncaught exception.
java.lang.Boolean.booleanValue(),returns the value of this boolean object as a boolean primitive.
"java.lang.Boolean.compare(boolean,boolean)",compares two boolean values.
java.lang.Boolean.compareTo(java.lang.Boolean),compares this boolean instance with another.
java.lang.Boolean.equals(java.lang.Object),returns true if and only if the argument is not null and is a boolean object that represents the same boolean value as this object.
java.lang.Boolean.getBoolean(java.lang.String),"returns true if and only if the system property named by the argument exists and is equal to the string ""true""."
java.lang.Boolean.hashCode(),returns a hash code for this boolean object.
java.lang.Boolean.hashCode(boolean),returns a hash code for a boolean value; compatible with boolean.
"java.lang.Boolean.logicalAnd(boolean,boolean)",returns the result of applying the logical and operator to the specified boolean operands.
"java.lang.Boolean.logicalOr(boolean,boolean)",returns the result of applying the logical or operator to the specified boolean operands.
"java.lang.Boolean.logicalXor(boolean,boolean)",returns the result of applying the logical xor operator to the specified boolean operands.
java.lang.Boolean.parseBoolean(java.lang.String),parses the string argument as a boolean.
java.lang.Boolean.toString(boolean),returns a string object representing the specified boolean.
java.lang.Boolean.toString(),returns a string object representing this boolean's value.
java.lang.Boolean.valueOf(boolean),returns a boolean instance representing the specified boolean value.
java.lang.Boolean.valueOf(java.lang.String),returns a boolean with a value represented by the specified string.
java.lang.Byte.byteValue(),returns the value of this byte as a byte.
"java.lang.Byte.compare(byte,byte)",compares two byte values numerically.
java.lang.Byte.compareTo(java.lang.Byte),compares two byte objects numerically.
java.lang.Byte.decode(java.lang.String),decodes a string into a byte.
java.lang.Byte.doubleValue(),returns the value of this byte as a double after a widening primitive conversion.
java.lang.Byte.equals(java.lang.Object),compares this object to the specified object.
java.lang.Byte.floatValue(),returns the value of this byte as a float after a widening primitive conversion.
java.lang.Byte.hashCode(),returns a hash code for this byte; equal to the result of invoking intvalue().
java.lang.Byte.hashCode(byte),returns a hash code for a byte value; compatible with byte.
java.lang.Byte.intValue(),returns the value of this byte as an int after a widening primitive conversion.
java.lang.Byte.longValue(),returns the value of this byte as a long after a widening primitive conversion.
"java.lang.Byte.parseByte(java.lang.String,int)",parses the string argument as a signed byte in the radix specified by the second argument.
java.lang.Byte.parseByte(java.lang.String),parses the string argument as a signed decimal byte.
java.lang.Byte.shortValue(),returns the value of this byte as a short after a widening primitive conversion.
java.lang.Byte.toString(byte),returns a new string object representing the specified byte.
java.lang.Byte.toString(),returns a string object representing this byte's value.
java.lang.Byte.toUnsignedInt(byte),converts the argument to an int by an unsigned conversion.
java.lang.Byte.toUnsignedLong(byte),converts the argument to a long by an unsigned conversion.
java.lang.Byte.valueOf(byte),returns a byte instance representing the specified byte value.
"java.lang.Byte.valueOf(java.lang.String,int)",returns a byte object holding the value extracted from the specified string when parsed with the radix given by the second argument.
java.lang.Byte.valueOf(java.lang.String),returns a byte object holding the value given by the specified string.
java.lang.Character.charCount(int),determines the number of char values needed to represent the specified character (unicode code point).
java.lang.Character.charValue(),returns the value of this character object.
"java.lang.Character.codePointAt(java.lang.CharSequence,int)",returns the code point at the given index of the charsequence.
"java.lang.Character.codePointAt(char[],int)",returns the code point at the given index of the char array.
"java.lang.Character.codePointAt(char[],int,int)","returns the code point at the given index of the char array, where only array elements with index less than limit can be used."
"java.lang.Character.codePointBefore(java.lang.CharSequence,int)",returns the code point preceding the given index of the charsequence.
"java.lang.Character.codePointBefore(char[],int)",returns the code point preceding the given index of the char array.
"java.lang.Character.codePointBefore(char[],int,int)","returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used."
"java.lang.Character.codePointCount(java.lang.CharSequence,int,int)",returns the number of unicode code points in the text range of the specified char sequence.
"java.lang.Character.codePointCount(char[],int,int)",returns the number of unicode code points in a subarray of the char array argument.
"java.lang.Character.compare(char,char)",compares two char values numerically.
java.lang.Character.compareTo(java.lang.Character),compares two character objects numerically.
"java.lang.Character.digit(char,int)",returns the numeric value of the character ch in the specified radix.
"java.lang.Character.digit(int,int)",returns the numeric value of the specified character (unicode code point) in the specified radix.
java.lang.Character.equals(java.lang.Object),compares this object against the specified object.
"java.lang.Character.forDigit(int,int)",determines the character representation for a specific digit in the specified radix.
java.lang.Character.getDirectionality(char),returns the unicode directionality property for the given character.
java.lang.Character.getDirectionality(int),returns the unicode directionality property for the given character (unicode code point).
java.lang.Character.getName(int),"returns the unicode name of the specified character codepoint, or null if the code point is unassigned."
java.lang.Character.getNumericValue(char),returns the int value that the specified unicode character represents.
java.lang.Character.getNumericValue(int),returns the int value that the specified character (unicode code point) represents.
java.lang.Character.getType(char),returns a value indicating a character's general category.
java.lang.Character.getType(int),returns a value indicating a character's general category.
java.lang.Character.hashCode(),returns a hash code for this character; equal to the result of invoking charvalue().
java.lang.Character.hashCode(char),returns a hash code for a char value; compatible with character.
java.lang.Character.highSurrogate(int),"returns the leading surrogate (a
high surrogate code unit) of the
surrogate pair representing the specified supplementary character (unicode code point) in the utf-16 encoding."
java.lang.Character.isAlphabetic(int),determines if the specified character (unicode code point) is an alphabet.
java.lang.Character.isBmpCodePoint(int),determines whether the specified character (unicode code point) is in the basic multilingual plane (bmp).
java.lang.Character.isDefined(char),determines if a character is defined in unicode.
java.lang.Character.isDefined(int),determines if a character (unicode code point) is defined in unicode.
java.lang.Character.isDigit(char),determines if the specified character is a digit.
java.lang.Character.isDigit(int),determines if the specified character (unicode code point) is a digit.
java.lang.Character.isHighSurrogate(char),"determines if the given char value is a
unicode high-surrogate code unit (also known as leading-surrogate code unit)."
java.lang.Character.isIdentifierIgnorable(char),determines if the specified character should be regarded as an ignorable character in a java identifier or a unicode identifier.
java.lang.Character.isIdentifierIgnorable(int),determines if the specified character (unicode code point) should be regarded as an ignorable character in a java identifier or a unicode identifier.
java.lang.Character.isIdeographic(int),"determines if the specified character (unicode code point) is a cjkv (chinese, japanese, korean and vietnamese) ideograph, as defined by the unicode standard."
java.lang.Character.isISOControl(char),determines if the specified character is an iso control character.
java.lang.Character.isISOControl(int),determines if the referenced character (unicode code point) is an iso control character.
java.lang.Character.isJavaIdentifierPart(char),determines if the specified character may be part of a java identifier as other than the first character.
java.lang.Character.isJavaIdentifierPart(int),determines if the character (unicode code point) may be part of a java identifier as other than the first character.
java.lang.Character.isJavaIdentifierStart(char),determines if the specified character is permissible as the first character in a java identifier.
java.lang.Character.isJavaIdentifierStart(int),determines if the character (unicode code point) is permissible as the first character in a java identifier.
java.lang.Character.isLetter(char),determines if the specified character is a letter.
java.lang.Character.isLetter(int),determines if the specified character (unicode code point) is a letter.
java.lang.Character.isLetterOrDigit(char),determines if the specified character is a letter or digit.
java.lang.Character.isLetterOrDigit(int),determines if the specified character (unicode code point) is a letter or digit.
java.lang.Character.isLowerCase(char),determines if the specified character is a lowercase character.
java.lang.Character.isLowerCase(int),determines if the specified character (unicode code point) is a lowercase character.
java.lang.Character.isLowSurrogate(char),"determines if the given char value is a
unicode low-surrogate code unit (also known as trailing-surrogate code unit)."
java.lang.Character.isMirrored(char),determines whether the character is mirrored according to the unicode specification.
java.lang.Character.isMirrored(int),determines whether the specified character (unicode code point) is mirrored according to the unicode specification.
java.lang.Character.isSpaceChar(char),determines if the specified character is a unicode space character.
java.lang.Character.isSpaceChar(int),determines if the specified character (unicode code point) is a unicode space character.
java.lang.Character.isSupplementaryCodePoint(int),determines whether the specified character (unicode code point) is in the supplementary character range.
java.lang.Character.isSurrogate(char),determines if the given char value is a unicode surrogate code unit.
"java.lang.Character.isSurrogatePair(char,char)","determines whether the specified pair of char values is a valid
unicode surrogate pair."
java.lang.Character.isTitleCase(char),determines if the specified character is a titlecase character.
java.lang.Character.isTitleCase(int),determines if the specified character (unicode code point) is a titlecase character.
java.lang.Character.isUnicodeIdentifierPart(char),determines if the specified character may be part of a unicode identifier as other than the first character.
java.lang.Character.isUnicodeIdentifierPart(int),determines if the specified character (unicode code point) may be part of a unicode identifier as other than the first character.
java.lang.Character.isUnicodeIdentifierStart(char),determines if the specified character is permissible as the first character in a unicode identifier.
java.lang.Character.isUnicodeIdentifierStart(int),determines if the specified character (unicode code point) is permissible as the first character in a unicode identifier.
java.lang.Character.isUpperCase(char),determines if the specified character is an uppercase character.
java.lang.Character.isUpperCase(int),determines if the specified character (unicode code point) is an uppercase character.
java.lang.Character.isValidCodePoint(int),"determines whether the specified code point is a valid
unicode code point value."
java.lang.Character.isWhitespace(char),determines if the specified character is white space according to java.
java.lang.Character.isWhitespace(int),determines if the specified character (unicode code point) is white space according to java.
java.lang.Character.lowSurrogate(int),"returns the trailing surrogate (a
low surrogate code unit) of the
surrogate pair representing the specified supplementary character (unicode code point) in the utf-16 encoding."
"java.lang.Character.offsetByCodePoints(java.lang.CharSequence,int,int)",returns the index within the given char sequence that is offset from the given index by codepointoffset code points.
"java.lang.Character.offsetByCodePoints(char[],int,int,int,int)",returns the index within the given char subarray that is offset from the given index by codepointoffset code points.
java.lang.Character.reverseBytes(char),returns the value obtained by reversing the order of the bytes in the specified char value.
"java.lang.Character.toChars(int,char[],int)",converts the specified character (unicode code point) to its utf-16 representation.
java.lang.Character.toChars(int),converts the specified character (unicode code point) to its utf-16 representation stored in a char array.
"java.lang.Character.toCodePoint(char,char)",converts the specified surrogate pair to its supplementary code point value.
java.lang.Character.toLowerCase(char),converts the character argument to lowercase using case mapping information from the unicodedata file.
java.lang.Character.toLowerCase(int),converts the character (unicode code point) argument to lowercase using case mapping information from the unicodedata file.
java.lang.Character.toString(),returns a string object representing this character's value.
java.lang.Character.toString(char),returns a string object representing the specified char.
java.lang.Character.toTitleCase(char),converts the character argument to titlecase using case mapping information from the unicodedata file.
java.lang.Character.toTitleCase(int),converts the character (unicode code point) argument to titlecase using case mapping information from the unicodedata file.
java.lang.Character.toUpperCase(char),converts the character argument to uppercase using case mapping information from the unicodedata file.
java.lang.Character.toUpperCase(int),converts the character (unicode code point) argument to uppercase using case mapping information from the unicodedata file.
java.lang.Character.valueOf(char),returns a character instance representing the specified char value.
java.lang.Character.Subset.equals(java.lang.Object),compares two subset objects for equality.
java.lang.Character.Subset.hashCode(),returns the standard hash code as defined by the object.
java.lang.Character.Subset.toString(),returns the name of this subset.
java.lang.Character.UnicodeBlock.forName(java.lang.String),returns the unicodeblock with the given name.
java.lang.Character.UnicodeBlock.of(char),"returns the object representing the unicode block containing the given character, or null if the character is not a member of a defined block."
java.lang.Character.UnicodeBlock.of(int),"returns the object representing the unicode block containing the given character (unicode code point), or null if the character is not a member of a defined block."
java.lang.Class.asSubclass(java.lang.Class<U>),casts this class object to represent a subclass of the class represented by the specified class object.
java.lang.Class.cast(java.lang.Object),casts an object to the class or interface represented by this class object.
java.lang.Class.desiredAssertionStatus(),returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked.
java.lang.Class.forName(java.lang.String),returns the class object associated with the class or interface with the given string name.
"java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)","returns the class object associated with the class or interface with the given string name, using the given class loader."
java.lang.Class.getAnnotatedInterfaces(),returns an array of annotatedtype objects that represent the use of types to specify superinterfaces of the entity represented by this class object.
java.lang.Class.getAnnotatedSuperclass(),returns an annotatedtype object that represents the use of a type to specify the superclass of the entity represented by this class object.
java.lang.Class.getCanonicalName(),returns the canonical name of the underlying class as defined by the java language specification.
java.lang.Class.getClasses(),returns an array containing class objects representing all the public classes and interfaces that are members of the class represented by this class object.
java.lang.Class.getClassLoader(),returns the class loader for the class.
java.lang.Class.getComponentType(),returns the class representing the component type of an array.
java.lang.Class.getConstructor(java.lang.Class<?>...),returns a constructor object that reflects the specified public constructor of the class represented by this class object.
java.lang.Class.getConstructors(),returns an array containing constructor objects reflecting all the public constructors of the class represented by this class object.
java.lang.Class.getDeclaredClasses(),returns an array of class objects reflecting all the classes and interfaces declared as members of the class represented by this class object.
java.lang.Class.getDeclaredConstructor(java.lang.Class<?>...),returns a constructor object that reflects the specified constructor of the class or interface represented by this class object.
java.lang.Class.getDeclaredConstructors(),returns an array of constructor objects reflecting all the constructors declared by the class represented by this class object.
java.lang.Class.getDeclaredField(java.lang.String),returns a field object that reflects the specified declared field of the class or interface represented by this class object.
java.lang.Class.getDeclaredFields(),returns an array of field objects reflecting all the fields declared by the class or interface represented by this class object.
"java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>...)",returns a method object that reflects the specified declared method of the class or interface represented by this class object.
java.lang.Class.getDeclaredMethods(),"returns an array containing method objects reflecting all the declared methods of the class or interface represented by this class object, including public, protected, default (package) access, and private methods, but excluding inherited methods."
java.lang.Class.getDeclaringClass(),"if the class or interface represented by this class object is a member of another class, returns the class object representing the class in which it was declared."
java.lang.Class.getEnclosingClass(),returns the immediately enclosing class of the underlying class.
java.lang.Class.getEnclosingConstructor(),"if this class object represents a local or anonymous class within a constructor, returns a constructor object representing the immediately enclosing constructor of the underlying class."
java.lang.Class.getEnclosingMethod(),"if this class object represents a local or anonymous class within a method, returns a method object representing the immediately enclosing method of the underlying class."
java.lang.Class.getEnumConstants(),returns the elements of this enum class or null if this class object does not represent an enum type.
java.lang.Class.getField(java.lang.String),returns a field object that reflects the specified public member field of the class or interface represented by this class object.
java.lang.Class.getFields(),returns an array containing field objects reflecting all the accessible public fields of the class or interface represented by this class object.
java.lang.Class.getGenericInterfaces(),returns the types representing the interfaces directly implemented by the class or interface represented by this object.
java.lang.Class.getGenericSuperclass(),"returns the type representing the direct superclass of the entity (class, interface, primitive type or void) represented by this class."
java.lang.Class.getInterfaces(),determines the interfaces implemented by the class or interface represented by this object.
"java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>...)",returns a method object that reflects the specified public member method of the class or interface represented by this class object.
java.lang.Class.getMethods(),"returns an array containing method objects reflecting all the public methods of the class or interface represented by this class object, including those declared by the class or interface and those inherited from superclasses and superinterfaces."
java.lang.Class.getModifiers(),"returns the java language modifiers for this class or interface, encoded in an integer."
java.lang.Class.getName(),"returns the name of the entity (class, interface, array class, primitive type, or void) represented by this class object, as a string."
java.lang.Class.getPackage(),gets the package for this class.
java.lang.Class.getProtectionDomain(),returns the protectiondomain of this class.
java.lang.Class.getResource(java.lang.String),finds a resource with a given name.
java.lang.Class.getResourceAsStream(java.lang.String),finds a resource with a given name.
java.lang.Class.getSigners(),gets the signers of this class.
java.lang.Class.getSimpleName(),returns the simple name of the underlying class as given in the source code.
java.lang.Class.getSuperclass(),"returns the class representing the superclass of the entity (class, interface, primitive type or void) represented by this class."
java.lang.Class.getTypeName(),return an informative string for the name of this type.
java.lang.Class.getTypeParameters(),"returns an array of typevariable objects that represent the type variables declared by the generic declaration represented by this genericdeclaration object, in declaration order."
java.lang.Class.isAnnotation(),returns true if this class object represents an annotation type.
java.lang.Class.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>),"returns true if an annotation for the specified type is present on this element, else false."
java.lang.Class.isAnonymousClass(),returns true if and only if the underlying class is an anonymous class.
java.lang.Class.isArray(),determines if this class object represents an array class.
java.lang.Class.isAssignableFrom(java.lang.Class<?>),"determines if the class or interface represented by this class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified class parameter."
java.lang.Class.isEnum(),returns true if and only if this class was declared as an enum in the source code.
java.lang.Class.isInstance(java.lang.Object),determines if the specified object is assignment-compatible with the object represented by this class.
java.lang.Class.isInterface(),determines if the specified class object represents an interface type.
java.lang.Class.isLocalClass(),returns true if and only if the underlying class is a local class.
java.lang.Class.isMemberClass(),returns true if and only if the underlying class is a member class.
java.lang.Class.isPrimitive(),determines if the specified class object represents a primitive type.
java.lang.Class.isSynthetic(),returns true if this class is a synthetic class; returns false otherwise.
java.lang.Class.newInstance(),creates a new instance of the class represented by this class object.
java.lang.Class.toGenericString(),"returns a string describing this class, including information about modifiers and type parameters."
java.lang.Class.toString(),converts the object to a string.
java.lang.ClassLoader.clearAssertionStatus(),sets the default assertion status for this class loader to false and discards any package defaults or class assertion status settings associated with the class loader.
"java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)",converts an array of bytes into an instance of class class.
"java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)","converts an array of bytes into an instance of class class, with an optional protectiondomain."
"java.lang.ClassLoader.defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)","converts a bytebuffer into an instance of class class, with an optional protectiondomain."
"java.lang.ClassLoader.definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)",defines a package by name in this classloader.
java.lang.ClassLoader.findClass(java.lang.String),finds the class with the specified binary name.
java.lang.ClassLoader.findLibrary(java.lang.String),returns the absolute path name of a native library.
java.lang.ClassLoader.findLoadedClass(java.lang.String),returns the class with the given binary name if this loader has been recorded by the java virtual machine as an initiating loader of a class with that binary name.
java.lang.ClassLoader.findResource(java.lang.String),finds the resource with the given name.
java.lang.ClassLoader.findResources(java.lang.String),returns an enumeration of url objects representing all the resources with the given name.
java.lang.ClassLoader.findSystemClass(java.lang.String),"finds a class with the specified binary name, loading it if necessary."
java.lang.ClassLoader.getClassLoadingLock(java.lang.String),returns the lock object for class loading operations.
java.lang.ClassLoader.getPackage(java.lang.String),returns a package that has been defined by this class loader or any of its ancestors.
java.lang.ClassLoader.getPackages(),returns all of the packages defined by this class loader and its ancestors.
java.lang.ClassLoader.getParent(),returns the parent class loader for delegation.
java.lang.ClassLoader.getResource(java.lang.String),finds the resource with the given name.
java.lang.ClassLoader.getResourceAsStream(java.lang.String),returns an input stream for reading the specified resource.
java.lang.ClassLoader.getResources(java.lang.String),finds all the resources with the given name.
java.lang.ClassLoader.getSystemClassLoader(),returns the system class loader for delegation.
java.lang.ClassLoader.getSystemResource(java.lang.String),find a resource of the specified name from the search path used to load classes.
java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String),"open for reading, a resource of the specified name from the search path used to load classes."
java.lang.ClassLoader.getSystemResources(java.lang.String),finds all resources of the specified name from the search path used to load classes.
java.lang.ClassLoader.loadClass(java.lang.String),loads the class with the specified binary name.
"java.lang.ClassLoader.loadClass(java.lang.String,boolean)",loads the class with the specified binary name.
java.lang.ClassLoader.registerAsParallelCapable(),registers the caller as parallel capable.
java.lang.ClassLoader.resolveClass(java.lang.Class<?>),links the specified class.
"java.lang.ClassLoader.setClassAssertionStatus(java.lang.String,boolean)",sets the desired assertion status for the named top-level class in this class loader and any nested classes contained therein.
java.lang.ClassLoader.setDefaultAssertionStatus(boolean),sets the default assertion status for this class loader.
"java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String,boolean)",sets the package default assertion status for the named package.
"java.lang.ClassLoader.setSigners(java.lang.Class<?>,java.lang.Object[])",sets the signers of a class.
java.lang.ClassValue.computeValue(java.lang.Class<?>),computes the given class's derived value for this classvalue.
java.lang.ClassValue.get(java.lang.Class<?>),returns the value for the given class.
java.lang.ClassValue.remove(java.lang.Class<?>),removes the associated value for the given class.
java.lang.Compiler.command(java.lang.Object),examines the argument type and its fields and perform some documented operation.
java.lang.Compiler.compileClass(java.lang.Class<?>),compiles the specified class.
java.lang.Compiler.compileClasses(java.lang.String),compiles all classes whose name matches the specified string.
java.lang.Compiler.disable(),cause the compiler to cease operation.
java.lang.Compiler.enable(),cause the compiler to resume operation.
java.lang.Double.byteValue(),returns the value of this double as a byte after a narrowing primitive conversion.
"java.lang.Double.compare(double,double)",compares the two specified double values.
java.lang.Double.compareTo(java.lang.Double),compares two double objects numerically.
java.lang.Double.doubleToLongBits(double),"returns a representation of the specified floating-point value according to the ieee 754 floating-point ""double format"" bit layout."
java.lang.Double.doubleToRawLongBits(double),"returns a representation of the specified floating-point value according to the ieee 754 floating-point ""double format"" bit layout, preserving not-a-number (nan) values."
java.lang.Double.doubleValue(),returns the double value of this double object.
java.lang.Double.equals(java.lang.Object),compares this object against the specified object.
java.lang.Double.floatValue(),returns the value of this double as a float after a narrowing primitive conversion.
java.lang.Double.hashCode(),returns a hash code for this double object.
java.lang.Double.hashCode(double),returns a hash code for a double value; compatible with double.
java.lang.Double.intValue(),returns the value of this double as an int after a narrowing primitive conversion.
java.lang.Double.isFinite(double),returns true if the argument is a finite floating-point value; returns false otherwise (for nan and infinity arguments).
java.lang.Double.isInfinite(double),"returns true if the specified number is infinitely large in magnitude, false otherwise."
java.lang.Double.isInfinite(),"returns true if this double value is infinitely large in magnitude, false otherwise."
java.lang.Double.isNaN(double),"returns true if the specified number is a not-a-number (nan) value, false otherwise."
java.lang.Double.isNaN(),"returns true if this double value is a not-a-number (nan), false otherwise."
java.lang.Double.longBitsToDouble(long),returns the double value corresponding to a given bit representation.
java.lang.Double.longValue(),returns the value of this double as a long after a narrowing primitive conversion.
"java.lang.Double.max(double,double)",returns the greater of two double values as if by calling math.
"java.lang.Double.min(double,double)",returns the smaller of two double values as if by calling math.
java.lang.Double.parseDouble(java.lang.String),"returns a new double initialized to the value represented by the specified string, as performed by the valueof method of class double."
java.lang.Double.shortValue(),returns the value of this double as a short after a narrowing primitive conversion.
"java.lang.Double.sum(double,double)",adds two double values together as per the + operator.
java.lang.Double.toHexString(double),returns a hexadecimal string representation of the double argument.
java.lang.Double.toString(double),returns a string representation of the double argument.
java.lang.Double.toString(),returns a string representation of this double object.
java.lang.Double.valueOf(java.lang.String),returns a double object holding the double value represented by the argument string s.
java.lang.Double.valueOf(double),returns a double instance representing the specified double value.
java.lang.Enum.clone(),throws clonenotsupportedexception.
java.lang.Enum.compareTo(java.lang.Enum),compares this enum with the specified object for order.
java.lang.Enum.equals(java.lang.Object),returns true if the specified object is equal to this enum constant.
java.lang.Enum.finalize(),enum classes cannot have finalize methods.
java.lang.Enum.getDeclaringClass(),returns the class object corresponding to this enum constant's enum type.
java.lang.Enum.hashCode(),returns a hash code for this enum constant.
java.lang.Enum.name(),"returns the name of this enum constant, exactly as declared in its enum declaration."
java.lang.Enum.ordinal(),"returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero)."
java.lang.Enum.toString(),"returns the name of this enum constant, as contained in the declaration."
"java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)",returns the enum constant of the specified enum type with the specified name.
java.lang.Float.byteValue(),returns the value of this float as a byte after a narrowing primitive conversion.
"java.lang.Float.compare(float,float)",compares the two specified float values.
java.lang.Float.compareTo(java.lang.Float),compares two float objects numerically.
java.lang.Float.doubleValue(),returns the value of this float as a double after a widening primitive conversion.
java.lang.Float.equals(java.lang.Object),compares this object against the specified object.
java.lang.Float.floatToIntBits(float),"returns a representation of the specified floating-point value according to the ieee 754 floating-point ""single format"" bit layout."
java.lang.Float.floatToRawIntBits(float),"returns a representation of the specified floating-point value according to the ieee 754 floating-point ""single format"" bit layout, preserving not-a-number (nan) values."
java.lang.Float.floatValue(),returns the float value of this float object.
java.lang.Float.hashCode(),returns a hash code for this float object.
java.lang.Float.hashCode(float),returns a hash code for a float value; compatible with float.
java.lang.Float.intBitsToFloat(int),returns the float value corresponding to a given bit representation.
java.lang.Float.intValue(),returns the value of this float as an int after a narrowing primitive conversion.
java.lang.Float.isFinite(float),returns true if the argument is a finite floating-point value; returns false otherwise (for nan and infinity arguments).
java.lang.Float.isInfinite(float),"returns true if the specified number is infinitely large in magnitude, false otherwise."
java.lang.Float.isInfinite(),"returns true if this float value is infinitely large in magnitude, false otherwise."
java.lang.Float.isNaN(float),"returns true if the specified number is a not-a-number (nan) value, false otherwise."
java.lang.Float.isNaN(),"returns true if this float value is a not-a-number (nan), false otherwise."
java.lang.Float.longValue(),returns value of this float as a long after a narrowing primitive conversion.
"java.lang.Float.max(float,float)",returns the greater of two float values as if by calling math.
"java.lang.Float.min(float,float)",returns the smaller of two float values as if by calling math.
java.lang.Float.parseFloat(java.lang.String),"returns a new float initialized to the value represented by the specified string, as performed by the valueof method of class float."
java.lang.Float.shortValue(),returns the value of this float as a short after a narrowing primitive conversion.
"java.lang.Float.sum(float,float)",adds two float values together as per the + operator.
java.lang.Float.toHexString(float),returns a hexadecimal string representation of the float argument.
java.lang.Float.toString(float),returns a string representation of the float argument.
java.lang.Float.toString(),returns a string representation of this float object.
java.lang.Float.valueOf(java.lang.String),returns a float object holding the float value represented by the argument string s.
java.lang.Float.valueOf(float),returns a float instance representing the specified float value.
java.lang.InheritableThreadLocal.childValue(java.lang.InheritableThreadLocal),computes the child's initial value for this inheritable thread-local variable as a function of the parent's value at the time the child thread is created.
java.lang.Integer.bitCount(int),returns the number of one-bits in the two's complement binary representation of the specified int value.
java.lang.Integer.byteValue(),returns the value of this integer as a byte after a narrowing primitive conversion.
"java.lang.Integer.compare(int,int)",compares two int values numerically.
java.lang.Integer.compareTo(java.lang.Integer),compares two integer objects numerically.
"java.lang.Integer.compareUnsigned(int,int)",compares two int values numerically treating the values as unsigned.
java.lang.Integer.decode(java.lang.String),decodes a string into an integer.
"java.lang.Integer.divideUnsigned(int,int)",returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.
java.lang.Integer.doubleValue(),returns the value of this integer as a double after a widening primitive conversion.
java.lang.Integer.equals(java.lang.Object),compares this object to the specified object.
java.lang.Integer.floatValue(),returns the value of this integer as a float after a widening primitive conversion.
java.lang.Integer.getInteger(java.lang.String),determines the integer value of the system property with the specified name.
"java.lang.Integer.getInteger(java.lang.String,int)",determines the integer value of the system property with the specified name.
"java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)",returns the integer value of the system property with the specified name.
java.lang.Integer.hashCode(),returns a hash code for this integer.
java.lang.Integer.hashCode(int),returns a hash code for a int value; compatible with integer.
java.lang.Integer.highestOneBit(int),"returns an int value with at most a single one-bit, in the position of the highest-order (""leftmost"") one-bit in the specified int value."
java.lang.Integer.intValue(),returns the value of this integer as an int.
java.lang.Integer.longValue(),returns the value of this integer as a long after a widening primitive conversion.
java.lang.Integer.lowestOneBit(int),"returns an int value with at most a single one-bit, in the position of the lowest-order (""rightmost"") one-bit in the specified int value."
"java.lang.Integer.max(int,int)",returns the greater of two int values as if by calling math.
"java.lang.Integer.min(int,int)",returns the smaller of two int values as if by calling math.
java.lang.Integer.numberOfLeadingZeros(int),"returns the number of zero bits preceding the highest-order (""leftmost"") one-bit in the two's complement binary representation of the specified int value."
java.lang.Integer.numberOfTrailingZeros(int),"returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified int value."
"java.lang.Integer.parseInt(java.lang.String,int)",parses the string argument as a signed integer in the radix specified by the second argument.
java.lang.Integer.parseInt(java.lang.String),parses the string argument as a signed decimal integer.
"java.lang.Integer.parseUnsignedInt(java.lang.String,int)",parses the string argument as an unsigned integer in the radix specified by the second argument.
java.lang.Integer.parseUnsignedInt(java.lang.String),parses the string argument as an unsigned decimal integer.
"java.lang.Integer.remainderUnsigned(int,int)",returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.
java.lang.Integer.reverse(int),returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified int value.
java.lang.Integer.reverseBytes(int),returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified int value.
"java.lang.Integer.rotateLeft(int,int)",returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits.
"java.lang.Integer.rotateRight(int,int)",returns the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits.
java.lang.Integer.shortValue(),returns the value of this integer as a short after a narrowing primitive conversion.
java.lang.Integer.signum(int),returns the signum function of the specified int value.
"java.lang.Integer.sum(int,int)",adds two integers together as per the + operator.
java.lang.Integer.toBinaryString(int),returns a string representation of the integer argument as an unsigned integer in base 2.
java.lang.Integer.toHexString(int),returns a string representation of the integer argument as an unsigned integer in base 16.
java.lang.Integer.toOctalString(int),returns a string representation of the integer argument as an unsigned integer in base 8.
"java.lang.Integer.toString(int,int)",returns a string representation of the first argument in the radix specified by the second argument.
java.lang.Integer.toString(int),returns a string object representing the specified integer.
java.lang.Integer.toString(),returns a string object representing this integer's value.
java.lang.Integer.toUnsignedLong(int),converts the argument to a long by an unsigned conversion.
"java.lang.Integer.toUnsignedString(int,int)",returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument.
java.lang.Integer.toUnsignedString(int),returns a string representation of the argument as an unsigned decimal value.
"java.lang.Integer.valueOf(java.lang.String,int)",returns an integer object holding the value extracted from the specified string when parsed with the radix given by the second argument.
java.lang.Integer.valueOf(java.lang.String),returns an integer object holding the value of the specified string.
java.lang.Integer.valueOf(int),returns an integer instance representing the specified int value.
java.lang.Long.bitCount(long),returns the number of one-bits in the two's complement binary representation of the specified long value.
java.lang.Long.byteValue(),returns the value of this long as a byte after a narrowing primitive conversion.
"java.lang.Long.compare(long,long)",compares two long values numerically.
java.lang.Long.compareTo(java.lang.Long),compares two long objects numerically.
"java.lang.Long.compareUnsigned(long,long)",compares two long values numerically treating the values as unsigned.
java.lang.Long.decode(java.lang.String),decodes a string into a long.
"java.lang.Long.divideUnsigned(long,long)",returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.
java.lang.Long.doubleValue(),returns the value of this long as a double after a widening primitive conversion.
java.lang.Long.equals(java.lang.Object),compares this object to the specified object.
java.lang.Long.floatValue(),returns the value of this long as a float after a widening primitive conversion.
java.lang.Long.getLong(java.lang.String),determines the long value of the system property with the specified name.
"java.lang.Long.getLong(java.lang.String,long)",determines the long value of the system property with the specified name.
"java.lang.Long.getLong(java.lang.String,java.lang.Long)",returns the long value of the system property with the specified name.
java.lang.Long.hashCode(),returns a hash code for this long.
java.lang.Long.hashCode(long),returns a hash code for a long value; compatible with long.
java.lang.Long.highestOneBit(long),"returns a long value with at most a single one-bit, in the position of the highest-order (""leftmost"") one-bit in the specified long value."
java.lang.Long.intValue(),returns the value of this long as an int after a narrowing primitive conversion.
java.lang.Long.longValue(),returns the value of this long as a long value.
java.lang.Long.lowestOneBit(long),"returns a long value with at most a single one-bit, in the position of the lowest-order (""rightmost"") one-bit in the specified long value."
"java.lang.Long.max(long,long)",returns the greater of two long values as if by calling math.
"java.lang.Long.min(long,long)",returns the smaller of two long values as if by calling math.
java.lang.Long.numberOfLeadingZeros(long),"returns the number of zero bits preceding the highest-order (""leftmost"") one-bit in the two's complement binary representation of the specified long value."
java.lang.Long.numberOfTrailingZeros(long),"returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified long value."
"java.lang.Long.parseLong(java.lang.String,int)",parses the string argument as a signed long in the radix specified by the second argument.
java.lang.Long.parseLong(java.lang.String),parses the string argument as a signed decimal long.
"java.lang.Long.parseUnsignedLong(java.lang.String,int)",parses the string argument as an unsigned long in the radix specified by the second argument.
java.lang.Long.parseUnsignedLong(java.lang.String),parses the string argument as an unsigned decimal long.
"java.lang.Long.remainderUnsigned(long,long)",returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.
java.lang.Long.reverse(long),returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified long value.
java.lang.Long.reverseBytes(long),returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified long value.
"java.lang.Long.rotateLeft(long,int)",returns the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits.
"java.lang.Long.rotateRight(long,int)",returns the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits.
java.lang.Long.shortValue(),returns the value of this long as a short after a narrowing primitive conversion.
java.lang.Long.signum(long),returns the signum function of the specified long value.
"java.lang.Long.sum(long,long)",adds two long values together as per the + operator.
java.lang.Long.toBinaryString(long),returns a string representation of the long argument as an unsigned integer in base 2.
java.lang.Long.toHexString(long),returns a string representation of the long argument as an unsigned integer in base 16.
java.lang.Long.toOctalString(long),returns a string representation of the long argument as an unsigned integer in base 8.
"java.lang.Long.toString(long,int)",returns a string representation of the first argument in the radix specified by the second argument.
java.lang.Long.toString(long),returns a string object representing the specified long.
java.lang.Long.toString(),returns a string object representing this long's value.
"java.lang.Long.toUnsignedString(long,int)",returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument.
java.lang.Long.toUnsignedString(long),returns a string representation of the argument as an unsigned decimal value.
"java.lang.Long.valueOf(java.lang.String,int)",returns a long object holding the value extracted from the specified string when parsed with the radix given by the second argument.
java.lang.Long.valueOf(java.lang.String),returns a long object holding the value of the specified string.
java.lang.Long.valueOf(long),returns a long instance representing the specified long value.
java.lang.Math.abs(int),returns the absolute value of an int value.
java.lang.Math.abs(long),returns the absolute value of a long value.
java.lang.Math.abs(float),returns the absolute value of a float value.
java.lang.Math.abs(double),returns the absolute value of a double value.
java.lang.Math.acos(double),returns the arc cosine of a value; the returned angle is in the range 0.
"java.lang.Math.addExact(int,int)","returns the sum of its arguments, throwing an exception if the result overflows an int."
"java.lang.Math.addExact(long,long)","returns the sum of its arguments, throwing an exception if the result overflows a long."
java.lang.Math.asin(double),returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2.
java.lang.Math.atan(double),returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2.
"java.lang.Math.atan2(double,double)","returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta)."
java.lang.Math.cbrt(double),returns the cube root of a double value.
java.lang.Math.ceil(double),returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer.
"java.lang.Math.copySign(double,double)",returns the first floating-point argument with the sign of the second floating-point argument.
"java.lang.Math.copySign(float,float)",returns the first floating-point argument with the sign of the second floating-point argument.
java.lang.Math.cos(double),returns the trigonometric cosine of an angle.
java.lang.Math.cosh(double),returns the hyperbolic cosine of a double value.
java.lang.Math.decrementExact(int),"returns the argument decremented by one, throwing an exception if the result overflows an int."
java.lang.Math.decrementExact(long),"returns the argument decremented by one, throwing an exception if the result overflows a long."
java.lang.Math.exp(double),returns euler's number e raised to the power of a double value.
java.lang.Math.expm1(double),returns ex -1.
java.lang.Math.floor(double),returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer.
"java.lang.Math.floorDiv(int,int)",returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient.
"java.lang.Math.floorDiv(long,long)",returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient.
"java.lang.Math.floorMod(int,int)",returns the floor modulus of the int arguments.
"java.lang.Math.floorMod(long,long)",returns the floor modulus of the long arguments.
java.lang.Math.getExponent(float),returns the unbiased exponent used in the representation of a float.
java.lang.Math.getExponent(double),returns the unbiased exponent used in the representation of a double.
"java.lang.Math.hypot(double,double)",returns sqrt(x2 +y2) without intermediate overflow or underflow.
"java.lang.Math.IEEEremainder(double,double)",computes the remainder operation on two arguments as prescribed by the ieee 754 standard.
java.lang.Math.incrementExact(int),"returns the argument incremented by one, throwing an exception if the result overflows an int."
java.lang.Math.incrementExact(long),"returns the argument incremented by one, throwing an exception if the result overflows a long."
java.lang.Math.log(double),returns the natural logarithm (base e) of a double value.
java.lang.Math.log10(double),returns the base 10 logarithm of a double value.
java.lang.Math.log1p(double),returns the natural logarithm of the sum of the argument and 1.
"java.lang.Math.max(int,int)",returns the greater of two int values.
"java.lang.Math.max(long,long)",returns the greater of two long values.
"java.lang.Math.max(float,float)",returns the greater of two float values.
"java.lang.Math.max(double,double)",returns the greater of two double values.
"java.lang.Math.min(int,int)",returns the smaller of two int values.
"java.lang.Math.min(long,long)",returns the smaller of two long values.
"java.lang.Math.min(float,float)",returns the smaller of two float values.
"java.lang.Math.min(double,double)",returns the smaller of two double values.
"java.lang.Math.multiplyExact(int,int)","returns the product of the arguments, throwing an exception if the result overflows an int."
"java.lang.Math.multiplyExact(long,long)","returns the product of the arguments, throwing an exception if the result overflows a long."
java.lang.Math.negateExact(int),"returns the negation of the argument, throwing an exception if the result overflows an int."
java.lang.Math.negateExact(long),"returns the negation of the argument, throwing an exception if the result overflows a long."
"java.lang.Math.nextAfter(double,double)",returns the floating-point number adjacent to the first argument in the direction of the second argument.
"java.lang.Math.nextAfter(float,double)",returns the floating-point number adjacent to the first argument in the direction of the second argument.
java.lang.Math.nextDown(double),returns the floating-point value adjacent to d in the direction of negative infinity.
java.lang.Math.nextDown(float),returns the floating-point value adjacent to f in the direction of negative infinity.
java.lang.Math.nextUp(double),returns the floating-point value adjacent to d in the direction of positive infinity.
java.lang.Math.nextUp(float),returns the floating-point value adjacent to f in the direction of positive infinity.
"java.lang.Math.pow(double,double)",returns the value of the first argument raised to the power of the second argument.
java.lang.Math.random(),"returns a double value with a positive sign, greater than or equal to 0."
java.lang.Math.rint(double),returns the double value that is closest in value to the argument and is equal to a mathematical integer.
java.lang.Math.round(float),"returns the closest int to the argument, with ties rounding to positive infinity."
java.lang.Math.round(double),"returns the closest long to the argument, with ties rounding to positive infinity."
"java.lang.Math.scalb(double,int)",returns d × 2scalefactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set.
"java.lang.Math.scalb(float,int)",returns f × 2scalefactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set.
java.lang.Math.signum(double),"returns the signum function of the argument; zero if the argument is zero, 1."
java.lang.Math.signum(float),"returns the signum function of the argument; zero if the argument is zero, 1."
java.lang.Math.sin(double),returns the trigonometric sine of an angle.
java.lang.Math.sinh(double),returns the hyperbolic sine of a double value.
java.lang.Math.sqrt(double),returns the correctly rounded positive square root of a double value.
"java.lang.Math.subtractExact(int,int)","returns the difference of the arguments, throwing an exception if the result overflows an int."
"java.lang.Math.subtractExact(long,long)","returns the difference of the arguments, throwing an exception if the result overflows a long."
java.lang.Math.tan(double),returns the trigonometric tangent of an angle.
java.lang.Math.tanh(double),returns the hyperbolic tangent of a double value.
java.lang.Math.toDegrees(double),converts an angle measured in radians to an approximately equivalent angle measured in degrees.
java.lang.Math.toIntExact(long),returns the value of the long argument; throwing an exception if the value overflows an int.
java.lang.Math.toRadians(double),converts an angle measured in degrees to an approximately equivalent angle measured in radians.
java.lang.Math.ulp(double),returns the size of an ulp of the argument.
java.lang.Math.ulp(float),returns the size of an ulp of the argument.
java.lang.Number.byteValue(),"returns the value of the specified number as a byte, which may involve rounding or truncation."
java.lang.Number.doubleValue(),"returns the value of the specified number as a double, which may involve rounding."
java.lang.Number.floatValue(),"returns the value of the specified number as a float, which may involve rounding."
java.lang.Number.intValue(),"returns the value of the specified number as an int, which may involve rounding or truncation."
java.lang.Number.longValue(),"returns the value of the specified number as a long, which may involve rounding or truncation."
java.lang.Number.shortValue(),"returns the value of the specified number as a short, which may involve rounding or truncation."
java.lang.Object.clone(),creates and returns a copy of this object.
java.lang.Object.equals(java.lang.Object),"indicates whether some other object is ""equal to"" this one."
java.lang.Object.finalize(),called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
java.lang.Object.getClass(),returns the runtime class of this object.
java.lang.Object.hashCode(),returns a hash code value for the object.
java.lang.Object.notify(),wakes up a single thread that is waiting on this object's monitor.
java.lang.Object.notifyAll(),wakes up all threads that are waiting on this object's monitor.
java.lang.Object.toString(),returns a string representation of the object.
java.lang.Object.wait(long),"causes the current thread to wait until either another thread invokes the notify() method or the notifyall() method for this object, or a specified amount of time has elapsed."
"java.lang.Object.wait(long,int)","causes the current thread to wait until another thread invokes the notify() method or the notifyall() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
java.lang.Object.wait(),causes the current thread to wait until another thread invokes the notify() method or the notifyall() method for this object.
java.lang.Package.getImplementationTitle(),return the title of this package.
java.lang.Package.getImplementationVendor(),"returns the name of the organization, vendor or company that provided this implementation."
java.lang.Package.getImplementationVersion(),return the version of this implementation.
java.lang.Package.getName(),return the name of this package.
java.lang.Package.getPackage(java.lang.String),find a package by name in the callers classloader instance.
java.lang.Package.getPackages(),get all the packages currently known for the caller's classloader instance.
java.lang.Package.getSpecificationTitle(),return the title of the specification that this package implements.
java.lang.Package.getSpecificationVendor(),"return the name of the organization, vendor, or company that owns and maintains the specification of the classes that implement this package."
java.lang.Package.getSpecificationVersion(),returns the version number of the specification that this package implements.
java.lang.Package.hashCode(),return the hash code computed from the package name.
java.lang.Package.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>),"returns true if an annotation for the specified type is present on this element, else false."
java.lang.Package.isCompatibleWith(java.lang.String),compare this package's specification version with a desired version.
java.lang.Package.isSealed(),returns true if this package is sealed.
java.lang.Package.isSealed(java.net.URL),returns true if this package is sealed with respect to the specified code source url.
java.lang.Package.toString(),returns the string representation of this package.
java.lang.Process.destroy(),kills the subprocess.
java.lang.Process.destroyForcibly(),kills the subprocess.
java.lang.Process.exitValue(),returns the exit value for the subprocess.
java.lang.Process.getErrorStream(),returns the input stream connected to the error output of the subprocess.
java.lang.Process.getInputStream(),returns the input stream connected to the normal output of the subprocess.
java.lang.Process.getOutputStream(),returns the output stream connected to the normal input of the subprocess.
java.lang.Process.isAlive(),tests whether the subprocess represented by this process is alive.
java.lang.Process.waitFor(),"causes the current thread to wait, if necessary, until the process represented by this process object has terminated."
"java.lang.Process.waitFor(long,java.util.concurrent.TimeUnit)","causes the current thread to wait, if necessary, until the subprocess represented by this process object has terminated, or the specified waiting time elapses."
java.lang.ProcessBuilder.command(java.util.List<java.lang.String>),sets this process builder's operating system program and arguments.
java.lang.ProcessBuilder.command(java.lang.String...),sets this process builder's operating system program and arguments.
java.lang.ProcessBuilder.command(),returns this process builder's operating system program and arguments.
java.lang.ProcessBuilder.directory(),returns this process builder's working directory.
java.lang.ProcessBuilder.directory(java.io.File),sets this process builder's working directory.
java.lang.ProcessBuilder.environment(),returns a string map view of this process builder's environment.
java.lang.ProcessBuilder.inheritIO(),sets the source and destination for subprocess standard i/o to be the same as those of the current java process.
java.lang.ProcessBuilder.redirectError(java.lang.ProcessBuilder.Redirect),sets this process builder's standard error destination.
java.lang.ProcessBuilder.redirectError(java.io.File),sets this process builder's standard error destination to a file.
java.lang.ProcessBuilder.redirectError(),returns this process builder's standard error destination.
java.lang.ProcessBuilder.redirectErrorStream(),tells whether this process builder merges standard error and standard output.
java.lang.ProcessBuilder.redirectErrorStream(boolean),sets this process builder's redirecterrorstream property.
java.lang.ProcessBuilder.redirectInput(java.lang.ProcessBuilder.Redirect),sets this process builder's standard input source.
java.lang.ProcessBuilder.redirectInput(java.io.File),sets this process builder's standard input source to a file.
java.lang.ProcessBuilder.redirectInput(),returns this process builder's standard input source.
java.lang.ProcessBuilder.redirectOutput(java.lang.ProcessBuilder.Redirect),sets this process builder's standard output destination.
java.lang.ProcessBuilder.redirectOutput(java.io.File),sets this process builder's standard output destination to a file.
java.lang.ProcessBuilder.redirectOutput(),returns this process builder's standard output destination.
java.lang.ProcessBuilder.start(),starts a new process using the attributes of this process builder.
java.lang.ProcessBuilder.Redirect.appendTo(java.io.File),returns a redirect to append to the specified file.
java.lang.ProcessBuilder.Redirect.equals(java.lang.Object),compares the specified object with this redirect for equality.
java.lang.ProcessBuilder.Redirect.file(),"returns the file source or destination associated with this redirect, or null if there is no such file."
java.lang.ProcessBuilder.Redirect.from(java.io.File),returns a redirect to read from the specified file.
java.lang.ProcessBuilder.Redirect.hashCode(),returns a hash code value for this redirect.
java.lang.ProcessBuilder.Redirect.to(java.io.File),returns a redirect to write to the specified file.
java.lang.ProcessBuilder.Redirect.type(),returns the type of this redirect.
java.lang.Runtime.addShutdownHook(java.lang.Thread),registers a new virtual-machine shutdown hook.
java.lang.Runtime.availableProcessors(),returns the number of processors available to the java virtual machine.
java.lang.Runtime.exec(java.lang.String),executes the specified string command in a separate process.
"java.lang.Runtime.exec(java.lang.String,java.lang.String[])",executes the specified string command in a separate process with the specified environment.
"java.lang.Runtime.exec(java.lang.String,java.lang.String[],java.io.File)",executes the specified string command in a separate process with the specified environment and working directory.
java.lang.Runtime.exec(java.lang.String[]),executes the specified command and arguments in a separate process.
"java.lang.Runtime.exec(java.lang.String[],java.lang.String[])",executes the specified command and arguments in a separate process with the specified environment.
"java.lang.Runtime.exec(java.lang.String[],java.lang.String[],java.io.File)",executes the specified command and arguments in a separate process with the specified environment and working directory.
java.lang.Runtime.exit(int),terminates the currently running java virtual machine by initiating its shutdown sequence.
java.lang.Runtime.freeMemory(),returns the amount of free memory in the java virtual machine.
java.lang.Runtime.gc(),runs the garbage collector.
java.lang.Runtime.getRuntime(),returns the runtime object associated with the current java application.
java.lang.Runtime.halt(int),forcibly terminates the currently running java virtual machine.
java.lang.Runtime.load(java.lang.String),loads the native library specified by the filename argument.
java.lang.Runtime.loadLibrary(java.lang.String),loads the native library specified by the libname argument.
java.lang.Runtime.maxMemory(),returns the maximum amount of memory that the java virtual machine will attempt to use.
java.lang.Runtime.removeShutdownHook(java.lang.Thread),de-registers a previously-registered virtual-machine shutdown hook.
java.lang.Runtime.runFinalization(),runs the finalization methods of any objects pending finalization.
java.lang.Runtime.totalMemory(),returns the total amount of memory in the java virtual machine.
java.lang.Runtime.traceInstructions(boolean),enables/disables tracing of instructions.
java.lang.Runtime.traceMethodCalls(boolean),enables/disables tracing of method calls.
"java.lang.SecurityManager.checkAccept(java.lang.String,int)",throws a securityexception if the calling thread is not permitted to accept a socket connection from the specified host and port number.
java.lang.SecurityManager.checkAccess(java.lang.Thread),throws a securityexception if the calling thread is not allowed to modify the thread argument.
java.lang.SecurityManager.checkAccess(java.lang.ThreadGroup),throws a securityexception if the calling thread is not allowed to modify the thread group argument.
"java.lang.SecurityManager.checkConnect(java.lang.String,int)",throws a securityexception if the calling thread is not allowed to open a socket connection to the specified host and port number.
"java.lang.SecurityManager.checkConnect(java.lang.String,int,java.lang.Object)",throws a securityexception if the specified security context is not allowed to open a socket connection to the specified host and port number.
java.lang.SecurityManager.checkCreateClassLoader(),throws a securityexception if the calling thread is not allowed to create a new class loader.
java.lang.SecurityManager.checkDelete(java.lang.String),throws a securityexception if the calling thread is not allowed to delete the specified file.
java.lang.SecurityManager.checkExec(java.lang.String),throws a securityexception if the calling thread is not allowed to create a subprocess.
java.lang.SecurityManager.checkExit(int),throws a securityexception if the calling thread is not allowed to cause the java virtual machine to halt with the specified status code.
java.lang.SecurityManager.checkLink(java.lang.String),throws a securityexception if the calling thread is not allowed to dynamic link the library code specified by the string argument file.
java.lang.SecurityManager.checkListen(int),throws a securityexception if the calling thread is not allowed to wait for a connection request on the specified local port number.
java.lang.SecurityManager.checkMulticast(java.net.InetAddress),throws a securityexception if the calling thread is not allowed to use (join/leave/send/receive) ip multicast.
java.lang.SecurityManager.checkPackageAccess(java.lang.String),throws a securityexception if the calling thread is not allowed to access the package specified by the argument.
java.lang.SecurityManager.checkPackageDefinition(java.lang.String),throws a securityexception if the calling thread is not allowed to define classes in the package specified by the argument.
java.lang.SecurityManager.checkPermission(java.security.Permission),"throws a securityexception if the requested access, specified by the given permission, is not permitted based on the security policy currently in effect."
"java.lang.SecurityManager.checkPermission(java.security.Permission,java.lang.Object)",throws a securityexception if the specified security context is denied access to the resource specified by the given permission.
java.lang.SecurityManager.checkPrintJobAccess(),throws a securityexception if the calling thread is not allowed to initiate a print job request.
java.lang.SecurityManager.checkPropertiesAccess(),throws a securityexception if the calling thread is not allowed to access or modify the system properties.
java.lang.SecurityManager.checkPropertyAccess(java.lang.String),throws a securityexception if the calling thread is not allowed to access the system property with the specified key name.
java.lang.SecurityManager.checkRead(java.io.FileDescriptor),throws a securityexception if the calling thread is not allowed to read from the specified file descriptor.
java.lang.SecurityManager.checkRead(java.lang.String),throws a securityexception if the calling thread is not allowed to read the file specified by the string argument.
"java.lang.SecurityManager.checkRead(java.lang.String,java.lang.Object)",throws a securityexception if the specified security context is not allowed to read the file specified by the string argument.
java.lang.SecurityManager.checkSecurityAccess(java.lang.String),determines whether the permission with the specified permission target name should be granted or denied.
java.lang.SecurityManager.checkSetFactory(),"throws a securityexception if the calling thread is not allowed to set the socket factory used by serversocket or socket, or the stream handler factory used by url."
java.lang.SecurityManager.checkWrite(java.io.FileDescriptor),throws a securityexception if the calling thread is not allowed to write to the specified file descriptor.
java.lang.SecurityManager.checkWrite(java.lang.String),throws a securityexception if the calling thread is not allowed to write to the file specified by the string argument.
java.lang.SecurityManager.getClassContext(),returns the current execution stack as an array of classes.
java.lang.SecurityManager.getSecurityContext(),creates an object that encapsulates the current execution environment.
java.lang.SecurityManager.getThreadGroup(),returns the thread group into which to instantiate any new thread being created at the time this is being called.
java.lang.Short.byteValue(),returns the value of this short as a byte after a narrowing primitive conversion.
"java.lang.Short.compare(short,short)",compares two short values numerically.
java.lang.Short.compareTo(java.lang.Short),compares two short objects numerically.
java.lang.Short.decode(java.lang.String),decodes a string into a short.
java.lang.Short.doubleValue(),returns the value of this short as a double after a widening primitive conversion.
java.lang.Short.equals(java.lang.Object),compares this object to the specified object.
java.lang.Short.floatValue(),returns the value of this short as a float after a widening primitive conversion.
java.lang.Short.hashCode(),returns a hash code for this short; equal to the result of invoking intvalue().
java.lang.Short.hashCode(short),returns a hash code for a short value; compatible with short.
java.lang.Short.intValue(),returns the value of this short as an int after a widening primitive conversion.
java.lang.Short.longValue(),returns the value of this short as a long after a widening primitive conversion.
"java.lang.Short.parseShort(java.lang.String,int)",parses the string argument as a signed short in the radix specified by the second argument.
java.lang.Short.parseShort(java.lang.String),parses the string argument as a signed decimal short.
java.lang.Short.reverseBytes(short),returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified short value.
java.lang.Short.shortValue(),returns the value of this short as a short.
java.lang.Short.toString(short),returns a new string object representing the specified short.
java.lang.Short.toString(),returns a string object representing this short's value.
java.lang.Short.toUnsignedInt(short),converts the argument to an int by an unsigned conversion.
java.lang.Short.toUnsignedLong(short),converts the argument to a long by an unsigned conversion.
"java.lang.Short.valueOf(java.lang.String,int)",returns a short object holding the value extracted from the specified string when parsed with the radix given by the second argument.
java.lang.Short.valueOf(java.lang.String),returns a short object holding the value given by the specified string.
java.lang.Short.valueOf(short),returns a short instance representing the specified short value.
java.lang.StackTraceElement.equals(java.lang.Object),returns true if the specified object is another stacktraceelement instance representing the same execution point as this instance.
java.lang.StackTraceElement.getClassName(),returns the fully qualified name of the class containing the execution point represented by this stack trace element.
java.lang.StackTraceElement.getFileName(),returns the name of the source file containing the execution point represented by this stack trace element.
java.lang.StackTraceElement.getLineNumber(),returns the line number of the source line containing the execution point represented by this stack trace element.
java.lang.StackTraceElement.getMethodName(),returns the name of the method containing the execution point represented by this stack trace element.
java.lang.StackTraceElement.hashCode(),returns a hash code value for this stack trace element.
java.lang.StackTraceElement.isNativeMethod(),returns true if the method containing the execution point represented by this stack trace element is a native method.
java.lang.StackTraceElement.toString(),returns a string representation of this stack trace element.
java.lang.StrictMath.abs(int),returns the absolute value of an int value.
java.lang.StrictMath.abs(long),returns the absolute value of a long value.
java.lang.StrictMath.abs(float),returns the absolute value of a float value.
java.lang.StrictMath.abs(double),returns the absolute value of a double value.
java.lang.StrictMath.acos(double),returns the arc cosine of a value; the returned angle is in the range 0.
"java.lang.StrictMath.addExact(int,int)","returns the sum of its arguments, throwing an exception if the result overflows an int."
"java.lang.StrictMath.addExact(long,long)","returns the sum of its arguments, throwing an exception if the result overflows a long."
java.lang.StrictMath.asin(double),returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2.
java.lang.StrictMath.atan(double),returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2.
"java.lang.StrictMath.atan2(double,double)","returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta)."
java.lang.StrictMath.cbrt(double),returns the cube root of a double value.
java.lang.StrictMath.ceil(double),returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer.
"java.lang.StrictMath.copySign(double,double)",returns the first floating-point argument with the sign of the second floating-point argument.
"java.lang.StrictMath.copySign(float,float)",returns the first floating-point argument with the sign of the second floating-point argument.
java.lang.StrictMath.cos(double),returns the trigonometric cosine of an angle.
java.lang.StrictMath.cosh(double),returns the hyperbolic cosine of a double value.
java.lang.StrictMath.exp(double),returns euler's number e raised to the power of a double value.
java.lang.StrictMath.expm1(double),returns ex -1.
java.lang.StrictMath.floor(double),returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer.
"java.lang.StrictMath.floorDiv(int,int)",returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient.
"java.lang.StrictMath.floorDiv(long,long)",returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient.
"java.lang.StrictMath.floorMod(int,int)",returns the floor modulus of the int arguments.
"java.lang.StrictMath.floorMod(long,long)",returns the floor modulus of the long arguments.
java.lang.StrictMath.getExponent(float),returns the unbiased exponent used in the representation of a float.
java.lang.StrictMath.getExponent(double),returns the unbiased exponent used in the representation of a double.
"java.lang.StrictMath.hypot(double,double)",returns sqrt(x2 +y2) without intermediate overflow or underflow.
"java.lang.StrictMath.IEEEremainder(double,double)",computes the remainder operation on two arguments as prescribed by the ieee 754 standard.
java.lang.StrictMath.log(double),returns the natural logarithm (base e) of a double value.
java.lang.StrictMath.log10(double),returns the base 10 logarithm of a double value.
java.lang.StrictMath.log1p(double),returns the natural logarithm of the sum of the argument and 1.
"java.lang.StrictMath.max(int,int)",returns the greater of two int values.
"java.lang.StrictMath.max(long,long)",returns the greater of two long values.
"java.lang.StrictMath.max(float,float)",returns the greater of two float values.
"java.lang.StrictMath.max(double,double)",returns the greater of two double values.
"java.lang.StrictMath.min(int,int)",returns the smaller of two int values.
"java.lang.StrictMath.min(long,long)",returns the smaller of two long values.
"java.lang.StrictMath.min(float,float)",returns the smaller of two float values.
"java.lang.StrictMath.min(double,double)",returns the smaller of two double values.
"java.lang.StrictMath.multiplyExact(int,int)","returns the product of the arguments, throwing an exception if the result overflows an int."
"java.lang.StrictMath.multiplyExact(long,long)","returns the product of the arguments, throwing an exception if the result overflows a long."
"java.lang.StrictMath.nextAfter(double,double)",returns the floating-point number adjacent to the first argument in the direction of the second argument.
"java.lang.StrictMath.nextAfter(float,double)",returns the floating-point number adjacent to the first argument in the direction of the second argument.
java.lang.StrictMath.nextDown(double),returns the floating-point value adjacent to d in the direction of negative infinity.
java.lang.StrictMath.nextDown(float),returns the floating-point value adjacent to f in the direction of negative infinity.
java.lang.StrictMath.nextUp(double),returns the floating-point value adjacent to d in the direction of positive infinity.
java.lang.StrictMath.nextUp(float),returns the floating-point value adjacent to f in the direction of positive infinity.
"java.lang.StrictMath.pow(double,double)",returns the value of the first argument raised to the power of the second argument.
java.lang.StrictMath.random(),"returns a double value with a positive sign, greater than or equal to 0."
java.lang.StrictMath.rint(double),returns the double value that is closest in value to the argument and is equal to a mathematical integer.
java.lang.StrictMath.round(float),"returns the closest int to the argument, with ties rounding to positive infinity."
java.lang.StrictMath.round(double),"returns the closest long to the argument, with ties rounding to positive infinity."
"java.lang.StrictMath.scalb(double,int)",returns d × 2scalefactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set.
"java.lang.StrictMath.scalb(float,int)",returns f × 2scalefactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set.
java.lang.StrictMath.signum(double),"returns the signum function of the argument; zero if the argument is zero, 1."
java.lang.StrictMath.signum(float),"returns the signum function of the argument; zero if the argument is zero, 1."
java.lang.StrictMath.sin(double),returns the trigonometric sine of an angle.
java.lang.StrictMath.sinh(double),returns the hyperbolic sine of a double value.
java.lang.StrictMath.sqrt(double),returns the correctly rounded positive square root of a double value.
"java.lang.StrictMath.subtractExact(int,int)","returns the difference of the arguments, throwing an exception if the result overflows an int."
"java.lang.StrictMath.subtractExact(long,long)","returns the difference of the arguments, throwing an exception if the result overflows a long."
java.lang.StrictMath.tan(double),returns the trigonometric tangent of an angle.
java.lang.StrictMath.tanh(double),returns the hyperbolic tangent of a double value.
java.lang.StrictMath.toDegrees(double),converts an angle measured in radians to an approximately equivalent angle measured in degrees.
java.lang.StrictMath.toIntExact(long),returns the value of the long argument; throwing an exception if the value overflows an int.
java.lang.StrictMath.toRadians(double),converts an angle measured in degrees to an approximately equivalent angle measured in radians.
java.lang.StrictMath.ulp(double),returns the size of an ulp of the argument.
java.lang.StrictMath.ulp(float),returns the size of an ulp of the argument.
java.lang.String.charAt(int),returns the char value at the specified index.
java.lang.String.codePointAt(int),returns the character (unicode code point) at the specified index.
java.lang.String.codePointBefore(int),returns the character (unicode code point) before the specified index.
"java.lang.String.codePointCount(int,int)",returns the number of unicode code points in the specified text range of this string.
java.lang.String.compareTo(java.lang.String),compares two strings lexicographically.
java.lang.String.compareToIgnoreCase(java.lang.String),"compares two strings lexicographically, ignoring case differences."
java.lang.String.concat(java.lang.String),concatenates the specified string to the end of this string.
java.lang.String.contains(java.lang.CharSequence),returns true if and only if this string contains the specified sequence of char values.
java.lang.String.contentEquals(java.lang.StringBuffer),compares this string to the specified stringbuffer.
java.lang.String.contentEquals(java.lang.CharSequence),compares this string to the specified charsequence.
java.lang.String.endsWith(java.lang.String),tests if this string ends with the specified suffix.
java.lang.String.equals(java.lang.Object),compares this string to the specified object.
java.lang.String.equalsIgnoreCase(java.lang.String),"compares this string to another string, ignoring case considerations."
"java.lang.String.format(java.lang.String,java.lang.Object...)",returns a formatted string using the specified format string and arguments.
"java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)","returns a formatted string using the specified locale, format string, and arguments."
java.lang.String.getBytes(java.lang.String),"encodes this string into a sequence of bytes using the named charset, storing the result into a new byte array."
java.lang.String.getBytes(java.nio.charset.Charset),"encodes this string into a sequence of bytes using the given charset, storing the result into a new byte array."
java.lang.String.getBytes(),"encodes this string into a sequence of bytes using the platform's default charset, storing the result into a new byte array."
"java.lang.String.getChars(int,int,char[],int)",copies characters from this string into the destination character array.
java.lang.String.hashCode(),returns a hash code for this string.
java.lang.String.indexOf(int),returns the index within this string of the first occurrence of the specified character.
"java.lang.String.indexOf(int,int)","returns the index within this string of the first occurrence of the specified character, starting the search at the specified index."
java.lang.String.indexOf(java.lang.String),returns the index within this string of the first occurrence of the specified substring.
"java.lang.String.indexOf(java.lang.String,int)","returns the index within this string of the first occurrence of the specified substring, starting at the specified index."
java.lang.String.intern(),returns a canonical representation for the string object.
java.lang.String.isEmpty(),"returns true if, and only if, length() is 0."
"java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)",returns a new string composed of copies of the charsequence elements joined together with a copy of the specified delimiter.
"java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)",returns a new string composed of copies of the charsequence elements joined together with a copy of the specified delimiter.
java.lang.String.lastIndexOf(int),returns the index within this string of the last occurrence of the specified character.
"java.lang.String.lastIndexOf(int,int)","returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index."
java.lang.String.lastIndexOf(java.lang.String),returns the index within this string of the last occurrence of the specified substring.
"java.lang.String.lastIndexOf(java.lang.String,int)","returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index."
java.lang.String.length(),returns the length of this string.
java.lang.String.matches(java.lang.String),tells whether or not this string matches the given regular expression.
"java.lang.String.offsetByCodePoints(int,int)",returns the index within this string that is offset from the given index by codepointoffset code points.
"java.lang.String.regionMatches(int,java.lang.String,int,int)",tests if two string regions are equal.
"java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)",tests if two string regions are equal.
"java.lang.String.replace(char,char)",returns a string resulting from replacing all occurrences of oldchar in this string with newchar.
"java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence.
"java.lang.String.replaceAll(java.lang.String,java.lang.String)",replaces each substring of this string that matches the given regular expression with the given replacement.
"java.lang.String.replaceFirst(java.lang.String,java.lang.String)",replaces the first substring of this string that matches the given regular expression with the given replacement.
"java.lang.String.split(java.lang.String,int)",splits this string around matches of the given regular expression.
java.lang.String.split(java.lang.String),splits this string around matches of the given regular expression.
"java.lang.String.startsWith(java.lang.String,int)",tests if the substring of this string beginning at the specified index starts with the specified prefix.
java.lang.String.startsWith(java.lang.String),tests if this string starts with the specified prefix.
"java.lang.String.subSequence(int,int)",returns a character sequence that is a subsequence of this sequence.
java.lang.String.substring(int),returns a string that is a substring of this string.
"java.lang.String.substring(int,int)",returns a string that is a substring of this string.
java.lang.String.toCharArray(),converts this string to a new character array.
java.lang.String.toLowerCase(java.util.Locale),converts all of the characters in this string to lower case using the rules of the given locale.
java.lang.String.toLowerCase(),converts all of the characters in this string to lower case using the rules of the default locale.
java.lang.String.toString(),this object (which is already a string!) is itself returned.
java.lang.String.toUpperCase(java.util.Locale),converts all of the characters in this string to upper case using the rules of the given locale.
java.lang.String.toUpperCase(),converts all of the characters in this string to upper case using the rules of the default locale.
java.lang.String.trim(),"returns a string whose value is this string, with any leading and trailing whitespace removed."
java.lang.String.valueOf(java.lang.Object),returns the string representation of the object argument.
java.lang.String.valueOf(char[]),returns the string representation of the char array argument.
"java.lang.String.valueOf(char[],int,int)",returns the string representation of a specific subarray of the char array argument.
java.lang.String.valueOf(boolean),returns the string representation of the boolean argument.
java.lang.String.valueOf(char),returns the string representation of the char argument.
java.lang.String.valueOf(int),returns the string representation of the int argument.
java.lang.String.valueOf(long),returns the string representation of the long argument.
java.lang.String.valueOf(float),returns the string representation of the float argument.
java.lang.String.valueOf(double),returns the string representation of the double argument.
java.lang.StringBuffer.append(java.lang.Object),appends the string representation of the object argument.
java.lang.StringBuffer.append(java.lang.String),appends the specified string to this character sequence.
java.lang.StringBuffer.append(java.lang.StringBuffer),appends the specified stringbuffer to this sequence.
java.lang.StringBuffer.append(java.lang.CharSequence),appends the specified charsequence to this sequence.
"java.lang.StringBuffer.append(java.lang.CharSequence,int,int)",appends a subsequence of the specified charsequence to this sequence.
java.lang.StringBuffer.append(char[]),appends the string representation of the char array argument to this sequence.
"java.lang.StringBuffer.append(char[],int,int)",appends the string representation of a subarray of the char array argument to this sequence.
java.lang.StringBuffer.append(boolean),appends the string representation of the boolean argument to the sequence.
java.lang.StringBuffer.append(char),appends the string representation of the char argument to this sequence.
java.lang.StringBuffer.append(int),appends the string representation of the int argument to this sequence.
java.lang.StringBuffer.append(long),appends the string representation of the long argument to this sequence.
java.lang.StringBuffer.append(float),appends the string representation of the float argument to this sequence.
java.lang.StringBuffer.append(double),appends the string representation of the double argument to this sequence.
java.lang.StringBuffer.appendCodePoint(int),appends the string representation of the codepoint argument to this sequence.
java.lang.StringBuffer.capacity(),returns the current capacity.
java.lang.StringBuffer.charAt(int),returns the char value in this sequence at the specified index.
java.lang.StringBuffer.codePointAt(int),returns the character (unicode code point) at the specified index.
java.lang.StringBuffer.codePointBefore(int),returns the character (unicode code point) before the specified index.
"java.lang.StringBuffer.codePointCount(int,int)",returns the number of unicode code points in the specified text range of this sequence.
"java.lang.StringBuffer.delete(int,int)",removes the characters in a substring of this sequence.
java.lang.StringBuffer.deleteCharAt(int),removes the char at the specified position in this sequence.
java.lang.StringBuffer.ensureCapacity(int),ensures that the capacity is at least equal to the specified minimum.
"java.lang.StringBuffer.getChars(int,int,char[],int)",characters are copied from this sequence into the destination character array dst.
java.lang.StringBuffer.indexOf(java.lang.String),returns the index within this string of the first occurrence of the specified substring.
"java.lang.StringBuffer.indexOf(java.lang.String,int)","returns the index within this string of the first occurrence of the specified substring, starting at the specified index."
"java.lang.StringBuffer.insert(int,char[],int,int)",inserts the string representation of a subarray of the str array argument into this sequence.
"java.lang.StringBuffer.insert(int,java.lang.Object)",inserts the string representation of the object argument into this character sequence.
"java.lang.StringBuffer.insert(int,java.lang.String)",inserts the string into this character sequence.
"java.lang.StringBuffer.insert(int,char[])",inserts the string representation of the char array argument into this sequence.
"java.lang.StringBuffer.insert(int,java.lang.CharSequence)",inserts the specified charsequence into this sequence.
"java.lang.StringBuffer.insert(int,java.lang.CharSequence,int,int)",inserts a subsequence of the specified charsequence into this sequence.
"java.lang.StringBuffer.insert(int,boolean)",inserts the string representation of the boolean argument into this sequence.
"java.lang.StringBuffer.insert(int,char)",inserts the string representation of the char argument into this sequence.
"java.lang.StringBuffer.insert(int,int)",inserts the string representation of the second int argument into this sequence.
"java.lang.StringBuffer.insert(int,long)",inserts the string representation of the long argument into this sequence.
"java.lang.StringBuffer.insert(int,float)",inserts the string representation of the float argument into this sequence.
"java.lang.StringBuffer.insert(int,double)",inserts the string representation of the double argument into this sequence.
java.lang.StringBuffer.lastIndexOf(java.lang.String),returns the index within this string of the rightmost occurrence of the specified substring.
"java.lang.StringBuffer.lastIndexOf(java.lang.String,int)",returns the index within this string of the last occurrence of the specified substring.
java.lang.StringBuffer.length(),returns the length (character count).
"java.lang.StringBuffer.offsetByCodePoints(int,int)",returns the index within this sequence that is offset from the given index by codepointoffset code points.
"java.lang.StringBuffer.replace(int,int,java.lang.String)",replaces the characters in a substring of this sequence with characters in the specified string.
java.lang.StringBuffer.reverse(),causes this character sequence to be replaced by the reverse of the sequence.
"java.lang.StringBuffer.setCharAt(int,char)",the character at the specified index is set to ch.
java.lang.StringBuffer.setLength(int),sets the length of the character sequence.
"java.lang.StringBuffer.subSequence(int,int)",returns a new character sequence that is a subsequence of this sequence.
java.lang.StringBuffer.substring(int),returns a new string that contains a subsequence of characters currently contained in this character sequence.
"java.lang.StringBuffer.substring(int,int)",returns a new string that contains a subsequence of characters currently contained in this sequence.
java.lang.StringBuffer.toString(),returns a string representing the data in this sequence.
java.lang.StringBuffer.trimToSize(),attempts to reduce storage used for the character sequence.
java.lang.StringBuilder.append(java.lang.Object),appends the string representation of the object argument.
java.lang.StringBuilder.append(java.lang.String),appends the specified string to this character sequence.
java.lang.StringBuilder.append(java.lang.StringBuffer),appends the specified stringbuffer to this sequence.
"java.lang.StringBuilder.append(java.lang.CharSequence,int,int)",appends a subsequence of the specified charsequence to this sequence.
java.lang.StringBuilder.append(char[]),appends the string representation of the char array argument to this sequence.
"java.lang.StringBuilder.append(char[],int,int)",appends the string representation of a subarray of the char array argument to this sequence.
java.lang.StringBuilder.append(boolean),appends the string representation of the boolean argument to the sequence.
java.lang.StringBuilder.append(char),appends the string representation of the char argument to this sequence.
java.lang.StringBuilder.append(int),appends the string representation of the int argument to this sequence.
java.lang.StringBuilder.append(long),appends the string representation of the long argument to this sequence.
java.lang.StringBuilder.append(float),appends the string representation of the float argument to this sequence.
java.lang.StringBuilder.append(double),appends the string representation of the double argument to this sequence.
java.lang.StringBuilder.appendCodePoint(int),appends the string representation of the codepoint argument to this sequence.
java.lang.StringBuilder.capacity(),returns the current capacity.
java.lang.StringBuilder.charAt(int),returns the char value in this sequence at the specified index.
java.lang.StringBuilder.codePointAt(int),returns the character (unicode code point) at the specified index.
java.lang.StringBuilder.codePointBefore(int),returns the character (unicode code point) before the specified index.
"java.lang.StringBuilder.codePointCount(int,int)",returns the number of unicode code points in the specified text range of this sequence.
"java.lang.StringBuilder.delete(int,int)",removes the characters in a substring of this sequence.
java.lang.StringBuilder.deleteCharAt(int),removes the char at the specified position in this sequence.
java.lang.StringBuilder.ensureCapacity(int),ensures that the capacity is at least equal to the specified minimum.
"java.lang.StringBuilder.getChars(int,int,char[],int)",characters are copied from this sequence into the destination character array dst.
java.lang.StringBuilder.indexOf(java.lang.String),returns the index within this string of the first occurrence of the specified substring.
"java.lang.StringBuilder.indexOf(java.lang.String,int)","returns the index within this string of the first occurrence of the specified substring, starting at the specified index."
"java.lang.StringBuilder.insert(int,char[],int,int)",inserts the string representation of a subarray of the str array argument into this sequence.
"java.lang.StringBuilder.insert(int,java.lang.Object)",inserts the string representation of the object argument into this character sequence.
"java.lang.StringBuilder.insert(int,java.lang.String)",inserts the string into this character sequence.
"java.lang.StringBuilder.insert(int,char[])",inserts the string representation of the char array argument into this sequence.
"java.lang.StringBuilder.insert(int,java.lang.CharSequence)",inserts the specified charsequence into this sequence.
"java.lang.StringBuilder.insert(int,java.lang.CharSequence,int,int)",inserts a subsequence of the specified charsequence into this sequence.
"java.lang.StringBuilder.insert(int,boolean)",inserts the string representation of the boolean argument into this sequence.
"java.lang.StringBuilder.insert(int,char)",inserts the string representation of the char argument into this sequence.
"java.lang.StringBuilder.insert(int,int)",inserts the string representation of the second int argument into this sequence.
"java.lang.StringBuilder.insert(int,long)",inserts the string representation of the long argument into this sequence.
"java.lang.StringBuilder.insert(int,float)",inserts the string representation of the float argument into this sequence.
"java.lang.StringBuilder.insert(int,double)",inserts the string representation of the double argument into this sequence.
java.lang.StringBuilder.lastIndexOf(java.lang.String),returns the index within this string of the rightmost occurrence of the specified substring.
"java.lang.StringBuilder.lastIndexOf(java.lang.String,int)",returns the index within this string of the last occurrence of the specified substring.
java.lang.StringBuilder.length(),returns the length (character count).
"java.lang.StringBuilder.offsetByCodePoints(int,int)",returns the index within this sequence that is offset from the given index by codepointoffset code points.
"java.lang.StringBuilder.replace(int,int,java.lang.String)",replaces the characters in a substring of this sequence with characters in the specified string.
java.lang.StringBuilder.reverse(),causes this character sequence to be replaced by the reverse of the sequence.
"java.lang.StringBuilder.setCharAt(int,char)",the character at the specified index is set to ch.
java.lang.StringBuilder.setLength(int),sets the length of the character sequence.
"java.lang.StringBuilder.subSequence(int,int)",returns a new character sequence that is a subsequence of this sequence.
java.lang.StringBuilder.substring(int),returns a new string that contains a subsequence of characters currently contained in this character sequence.
"java.lang.StringBuilder.substring(int,int)",returns a new string that contains a subsequence of characters currently contained in this sequence.
java.lang.StringBuilder.toString(),returns a string representing the data in this sequence.
java.lang.StringBuilder.trimToSize(),attempts to reduce storage used for the character sequence.
"java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)","copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array."
java.lang.System.clearProperty(java.lang.String),removes the system property indicated by the specified key.
java.lang.System.console(),"returns the unique console object associated with the current java virtual machine, if any."
java.lang.System.currentTimeMillis(),returns the current time in milliseconds.
java.lang.System.exit(int),terminates the currently running java virtual machine.
java.lang.System.gc(),runs the garbage collector.
java.lang.System.getenv(java.lang.String),gets the value of the specified environment variable.
java.lang.System.getenv(),returns an unmodifiable string map view of the current system environment.
java.lang.System.getProperties(),determines the current system properties.
java.lang.System.getProperty(java.lang.String),gets the system property indicated by the specified key.
"java.lang.System.getProperty(java.lang.String,java.lang.String)",gets the system property indicated by the specified key.
java.lang.System.getSecurityManager(),gets the system security interface.
java.lang.System.identityHashCode(java.lang.Object),"returns the same hash code for the given object as would be returned by the default method hashcode(), whether or not the given object's class overrides hashcode()."
java.lang.System.inheritedChannel(),returns the channel inherited from the entity that created this java virtual machine.
java.lang.System.lineSeparator(),returns the system-dependent line separator string.
java.lang.System.load(java.lang.String),loads the native library specified by the filename argument.
java.lang.System.loadLibrary(java.lang.String),loads the native library specified by the libname argument.
java.lang.System.mapLibraryName(java.lang.String),maps a library name into a platform-specific string representing a native library.
java.lang.System.nanoTime(),"returns the current value of the running java virtual machine's high-resolution time source, in nanoseconds."
java.lang.System.runFinalization(),runs the finalization methods of any objects pending finalization.
java.lang.System.setErr(java.io.PrintStream),"reassigns the ""standard"" error output stream."
java.lang.System.setIn(java.io.InputStream),"reassigns the ""standard"" input stream."
java.lang.System.setOut(java.io.PrintStream),"reassigns the ""standard"" output stream."
java.lang.System.setProperties(java.util.Properties),sets the system properties to the properties argument.
"java.lang.System.setProperty(java.lang.String,java.lang.String)",sets the system property indicated by the specified key.
java.lang.System.setSecurityManager(java.lang.SecurityManager),sets the system security.
java.lang.Thread.activeCount(),returns an estimate of the number of active threads in the current thread's thread group and its subgroups.
java.lang.Thread.checkAccess(),determines if the currently running thread has permission to modify this thread.
java.lang.Thread.clone(),throws clonenotsupportedexception as a thread can not be meaningfully cloned.
java.lang.Thread.currentThread(),returns a reference to the currently executing thread object.
java.lang.Thread.dumpStack(),prints a stack trace of the current thread to the standard error stream.
java.lang.Thread.enumerate(java.lang.Thread[]),copies into the specified array every active thread in the current thread's thread group and its subgroups.
java.lang.Thread.getAllStackTraces(),returns a map of stack traces for all live threads.
java.lang.Thread.getContextClassLoader(),returns the context classloader for this thread.
java.lang.Thread.getDefaultUncaughtExceptionHandler(),returns the default handler invoked when a thread abruptly terminates due to an uncaught exception.
java.lang.Thread.getId(),returns the identifier of this thread.
java.lang.Thread.getName(),returns this thread's name.
java.lang.Thread.getPriority(),returns this thread's priority.
java.lang.Thread.getStackTrace(),returns an array of stack trace elements representing the stack dump of this thread.
java.lang.Thread.getState(),returns the state of this thread.
java.lang.Thread.getThreadGroup(),returns the thread group to which this thread belongs.
java.lang.Thread.getUncaughtExceptionHandler(),returns the handler invoked when this thread abruptly terminates due to an uncaught exception.
java.lang.Thread.holdsLock(java.lang.Object),returns true if and only if the current thread holds the monitor lock on the specified object.
java.lang.Thread.interrupt(),interrupts this thread.
java.lang.Thread.interrupted(),tests whether the current thread has been interrupted.
java.lang.Thread.isAlive(),tests if this thread is alive.
java.lang.Thread.isDaemon(),tests if this thread is a daemon thread.
java.lang.Thread.isInterrupted(),tests whether this thread has been interrupted.
java.lang.Thread.join(long),waits at most millis milliseconds for this thread to die.
"java.lang.Thread.join(long,int)",waits at most millis milliseconds plus nanos nanoseconds for this thread to die.
java.lang.Thread.join(),waits for this thread to die.
java.lang.Thread.run(),"if this thread was constructed using a separate runnable run object, then that runnable object's run method is called; otherwise, this method does nothing and returns."
java.lang.Thread.setContextClassLoader(java.lang.ClassLoader),sets the context classloader for this thread.
java.lang.Thread.setDaemon(boolean),marks this thread as either a daemon thread or a user thread.
java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler),"set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread."
java.lang.Thread.setName(java.lang.String),changes the name of this thread to be equal to the argument name.
java.lang.Thread.setPriority(int),changes the priority of this thread.
java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler),set the handler invoked when this thread abruptly terminates due to an uncaught exception.
java.lang.Thread.sleep(long),"causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers."
"java.lang.Thread.sleep(long,int)","causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers."
java.lang.Thread.start(),causes this thread to begin execution; the java virtual machine calls the run method of this thread.
java.lang.Thread.toString(),"returns a string representation of this thread, including the thread's name, priority, and thread group."
java.lang.Thread.yield(),a hint to the scheduler that the current thread is willing to yield its current use of a processor.
java.lang.ThreadGroup.activeCount(),returns an estimate of the number of active threads in this thread group and its subgroups.
java.lang.ThreadGroup.activeGroupCount(),returns an estimate of the number of active groups in this thread group and its subgroups.
java.lang.ThreadGroup.checkAccess(),determines if the currently running thread has permission to modify this thread group.
java.lang.ThreadGroup.destroy(),destroys this thread group and all of its subgroups.
java.lang.ThreadGroup.enumerate(java.lang.Thread[]),copies into the specified array every active thread in this thread group and its subgroups.
"java.lang.ThreadGroup.enumerate(java.lang.Thread[],boolean)",copies into the specified array every active thread in this thread group.
java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[]),copies into the specified array references to every active subgroup in this thread group and its subgroups.
"java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[],boolean)",copies into the specified array references to every active subgroup in this thread group.
java.lang.ThreadGroup.getMaxPriority(),returns the maximum priority of this thread group.
java.lang.ThreadGroup.getName(),returns the name of this thread group.
java.lang.ThreadGroup.getParent(),returns the parent of this thread group.
java.lang.ThreadGroup.interrupt(),interrupts all threads in this thread group.
java.lang.ThreadGroup.isDaemon(),tests if this thread group is a daemon thread group.
java.lang.ThreadGroup.isDestroyed(),tests if this thread group has been destroyed.
java.lang.ThreadGroup.list(),prints information about this thread group to the standard output.
java.lang.ThreadGroup.parentOf(java.lang.ThreadGroup),tests if this thread group is either the thread group argument or one of its ancestor thread groups.
java.lang.ThreadGroup.setDaemon(boolean),changes the daemon status of this thread group.
java.lang.ThreadGroup.setMaxPriority(int),sets the maximum priority of the group.
java.lang.ThreadGroup.toString(),returns a string representation of this thread group.
"java.lang.ThreadGroup.uncaughtException(java.lang.Thread,java.lang.Throwable)","called by the java virtual machine when a thread in this thread group stops because of an uncaught exception, and the thread does not have a specific thread."
java.lang.ThreadLocal.get(),returns the value in the current thread's copy of this thread-local variable.
java.lang.ThreadLocal.initialValue(),"returns the current thread's ""initial value"" for this thread-local variable."
java.lang.ThreadLocal.remove(),removes the current thread's value for this thread-local variable.
java.lang.ThreadLocal.set(java.lang.ThreadLocal),sets the current thread's copy of this thread-local variable to the specified value.
java.lang.ThreadLocal.withInitial(java.util.function.Supplier<? extends S>),creates a thread local variable.
java.lang.Throwable.addSuppressed(java.lang.Throwable),appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
java.lang.Throwable.fillInStackTrace(),fills in the execution stack trace.
java.lang.Throwable.getCause(),returns the cause of this throwable or null if the cause is nonexistent or unknown.
java.lang.Throwable.getLocalizedMessage(),creates a localized description of this throwable.
java.lang.Throwable.getMessage(),returns the detail message string of this throwable.
java.lang.Throwable.getStackTrace(),provides programmatic access to the stack trace information printed by printstacktrace().
java.lang.Throwable.getSuppressed(),"returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
java.lang.Throwable.initCause(java.lang.Throwable),initializes the cause of this throwable to the specified value.
java.lang.Throwable.printStackTrace(),prints this throwable and its backtrace to the standard error stream.
java.lang.Throwable.printStackTrace(java.io.PrintStream),prints this throwable and its backtrace to the specified print stream.
java.lang.Throwable.printStackTrace(java.io.PrintWriter),prints this throwable and its backtrace to the specified print writer.
java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[]),sets the stack trace elements that will be returned by getstacktrace() and printed by printstacktrace() and related methods.
java.lang.Throwable.toString(),returns a short description of this throwable.
java.lang.Character.UnicodeScript.forName(java.lang.String),returns the unicodescript constant with the given unicode script name or the script name alias.
java.lang.Character.UnicodeScript.of(int),returns the enum constant representing the unicode script of which the given character (unicode code point) is assigned to.
java.lang.Character.UnicodeScript.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.lang.Character.UnicodeScript.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.lang.ProcessBuilder.Redirect.Type.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.lang.ProcessBuilder.Redirect.Type.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.lang.Thread.State.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.lang.Thread.State.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.lang.ClassNotFoundException.getCause(),returns the cause of this exception (the exception that was raised if an error occurred while attempting to load the class; otherwise null).
java.lang.ClassNotFoundException.getException(),returns the exception that was raised if an error occurred while attempting to load the class.
java.lang.EnumConstantNotPresentException.constantName(),returns the name of the missing enum constant.
java.lang.EnumConstantNotPresentException.enumType(),returns the type of the missing enum constant.
java.lang.TypeNotPresentException.typeName(),returns the fully qualified name of the unavailable type.
java.lang.ExceptionInInitializerError.getCause(),returns the cause of this error (the exception that occurred during a static initialization that caused this error to be created).
java.lang.ExceptionInInitializerError.getException(),returns the exception that occurred during a static initialization that caused this error to be created.
java.lang.annotation.Annotation.annotationType(),returns the annotation type of this annotation.
java.lang.annotation.Annotation.equals(java.lang.Object),returns true if the specified object represents an annotation that is logically equivalent to this one.
java.lang.annotation.Annotation.hashCode(),"returns the hash code of this annotation, as defined below:
the hash code of an annotation is the sum of the hash codes of its members (including those with default values), as defined below:
the hash code of an annotation member is (127 times the hash code of the member-name as computed by string."
java.lang.annotation.Annotation.toString(),returns a string representation of this annotation.
java.lang.annotation.ElementType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.lang.annotation.ElementType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.lang.annotation.RetentionPolicy.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.lang.annotation.RetentionPolicy.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.lang.annotation.AnnotationTypeMismatchException.element(),returns the method object for the incorrectly typed element.
java.lang.annotation.AnnotationTypeMismatchException.foundType(),returns the type of data found in the incorrectly typed element.
java.lang.annotation.IncompleteAnnotationException.annotationType(),returns the class object for the annotation type with the missing element.
java.lang.annotation.IncompleteAnnotationException.elementName(),returns the name of the missing element.
"java.lang.instrument.ClassFileTransformer.transform(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>,java.security.ProtectionDomain,byte[])",the implementation of this method may transform the supplied class file and return a new replacement class file.
"java.lang.instrument.Instrumentation.addTransformer(java.lang.instrument.ClassFileTransformer,boolean)",registers the supplied transformer.
java.lang.instrument.Instrumentation.addTransformer(java.lang.instrument.ClassFileTransformer),registers the supplied transformer.
java.lang.instrument.Instrumentation.appendToBootstrapClassLoaderSearch(java.util.jar.JarFile),specifies a jar file with instrumentation classes to be defined by the bootstrap class loader.
java.lang.instrument.Instrumentation.appendToSystemClassLoaderSearch(java.util.jar.JarFile),specifies a jar file with instrumentation classes to be defined by the system class loader.
java.lang.instrument.Instrumentation.getAllLoadedClasses(),returns an array of all classes currently loaded by the jvm.
java.lang.instrument.Instrumentation.getInitiatedClasses(java.lang.ClassLoader),returns an array of all classes for which loader is an initiating loader.
java.lang.instrument.Instrumentation.getObjectSize(java.lang.Object),returns an implementation-specific approximation of the amount of storage consumed by the specified object.
java.lang.instrument.Instrumentation.isModifiableClass(java.lang.Class<?>),determines whether a class is modifiable by retransformation or redefinition.
java.lang.instrument.Instrumentation.isNativeMethodPrefixSupported(),returns whether the current jvm configuration supports setting a native method prefix.
java.lang.instrument.Instrumentation.isRedefineClassesSupported(),returns whether or not the current jvm configuration supports redefinition of classes.
java.lang.instrument.Instrumentation.isRetransformClassesSupported(),returns whether or not the current jvm configuration supports retransformation of classes.
java.lang.instrument.Instrumentation.redefineClasses(java.lang.instrument.ClassDefinition...),redefine the supplied set of classes using the supplied class files.
java.lang.instrument.Instrumentation.removeTransformer(java.lang.instrument.ClassFileTransformer),unregisters the supplied transformer.
java.lang.instrument.Instrumentation.retransformClasses(java.lang.Class<?>...),retransform the supplied set of classes.
"java.lang.instrument.Instrumentation.setNativeMethodPrefix(java.lang.instrument.ClassFileTransformer,java.lang.String)",this method modifies the failure handling of native method resolution by allowing retry with a prefix applied to the name.
java.lang.instrument.ClassDefinition.getDefinitionClass(),returns the class.
java.lang.instrument.ClassDefinition.getDefinitionClassFile(),returns the array of bytes that contains the new class file.
java.lang.invoke.MethodHandleInfo.getDeclaringClass(),returns the class in which the cracked method handle's underlying member was defined.
java.lang.invoke.MethodHandleInfo.getMethodType(),"returns the nominal type of the cracked symbolic reference, expressed as a method type."
java.lang.invoke.MethodHandleInfo.getModifiers(),returns the access modifiers of the underlying member.
java.lang.invoke.MethodHandleInfo.getName(),returns the name of the cracked method handle's underlying member.
java.lang.invoke.MethodHandleInfo.getReferenceKind(),"returns the reference kind of the cracked method handle, which in turn determines whether the method handle's underlying member was a constructor, method, or field."
java.lang.invoke.MethodHandleInfo.isVarArgs(),determines if the underlying member was a variable arity method or constructor.
java.lang.invoke.MethodHandleInfo.referenceKindToString(int),"returns the descriptive name of the given reference kind, as defined in the table above."
"java.lang.invoke.MethodHandleInfo.reflectAs(java.lang.Class<T>,java.lang.invoke.MethodHandles.Lookup)","reflects the underlying member as a method, constructor, or field object."
"java.lang.invoke.MethodHandleInfo.toString(int,java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType)","returns a string representation for a methodhandleinfo, given the four parts of its symbolic reference."
java.lang.invoke.CallSite.dynamicInvoker(),produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site.
java.lang.invoke.CallSite.getTarget(),"returns the target method of the call site, according to the behavior defined by this call site's specific class."
java.lang.invoke.CallSite.setTarget(java.lang.invoke.MethodHandle),"updates the target method of this call site, according to the behavior defined by this call site's specific class."
java.lang.invoke.CallSite.type(),returns the type of this call site's target.
java.lang.invoke.ConstantCallSite.dynamicInvoker(),returns this call site's permanent target.
java.lang.invoke.ConstantCallSite.getTarget(),"returns the target method of the call site, which behaves like a final field of the constantcallsite."
java.lang.invoke.ConstantCallSite.setTarget(java.lang.invoke.MethodHandle),always throws an unsupportedoperationexception.
"java.lang.invoke.LambdaMetafactory.altMetafactory(java.lang.invoke.MethodHandles.Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.Object...)","facilitates the creation of simple ""function objects"" that implement one or more interfaces by delegation to a provided methodhandle, after appropriate type adaptation and partial evaluation of arguments."
"java.lang.invoke.LambdaMetafactory.metafactory(java.lang.invoke.MethodHandles.Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)","facilitates the creation of simple ""function objects"" that implement one or more interfaces by delegation to a provided methodhandle, after appropriate type adaptation and partial evaluation of arguments."
"java.lang.invoke.MethodHandle.asCollector(java.lang.Class<?>,int)","makes an array-collecting method handle, which accepts a given number of trailing positional arguments and collects them into an array argument."
java.lang.invoke.MethodHandle.asFixedArity(),makes a fixed arity method handle which is otherwise equivalent to the current method handle.
"java.lang.invoke.MethodHandle.asSpreader(java.lang.Class<?>,int)","makes an array-spreading method handle, which accepts a trailing array argument and spreads its elements as positional arguments."
java.lang.invoke.MethodHandle.asType(java.lang.invoke.MethodType),produces an adapter method handle which adapts the type of the current method handle to a new type.
java.lang.invoke.MethodHandle.asVarargsCollector(java.lang.Class<?>),makes a variable arity adapter which is able to accept any number of trailing positional arguments and collect them into an array argument.
java.lang.invoke.MethodHandle.bindTo(java.lang.Object),"binds a value x to the first argument of a method handle, without invoking it."
java.lang.invoke.MethodHandle.invoke(java.lang.Object...),"invokes the method handle, allowing any caller type descriptor, and optionally performing conversions on arguments and return values."
java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...),"invokes the method handle, allowing any caller type descriptor, but requiring an exact type match."
java.lang.invoke.MethodHandle.invokeWithArguments(java.lang.Object...),"performs a variable arity invocation, passing the arguments in the given list to the method handle, as if via an inexact invoke from a call site which mentions only the type object, and whose arity is the length of the argument list."
java.lang.invoke.MethodHandle.invokeWithArguments(java.util.List<?>),"performs a variable arity invocation, passing the arguments in the given array to the method handle, as if via an inexact invoke from a call site which mentions only the type object, and whose arity is the length of the argument array."
java.lang.invoke.MethodHandle.isVarargsCollector(),determines if this method handle supports variable arity calls.
java.lang.invoke.MethodHandle.toString(),"returns a string representation of the method handle, starting with the string ""methodhandle"" and ending with the string representation of the method handle's type."
java.lang.invoke.MethodHandle.type(),reports the type of this method handle.
"java.lang.invoke.MethodHandleProxies.asInterfaceInstance(java.lang.Class<T>,java.lang.invoke.MethodHandle)",produces an instance of the given single-method interface which redirects its calls to the given method handle.
java.lang.invoke.MethodHandleProxies.isWrapperInstance(java.lang.Object),determines if the given object was produced by a call to asinterfaceinstance.
java.lang.invoke.MethodHandleProxies.wrapperInstanceTarget(java.lang.Object),produces or recovers a target method handle which is behaviorally equivalent to the unique method of this wrapper instance.
java.lang.invoke.MethodHandleProxies.wrapperInstanceType(java.lang.Object),recovers the unique single-method interface type for which this wrapper instance was created.
java.lang.invoke.MethodHandles.arrayElementGetter(java.lang.Class<?>),produces a method handle giving read access to elements of an array.
java.lang.invoke.MethodHandles.arrayElementSetter(java.lang.Class<?>),produces a method handle giving write access to elements of an array.
"java.lang.invoke.MethodHandles.catchException(java.lang.invoke.MethodHandle,java.lang.Class<? extends java.lang.Throwable>,java.lang.invoke.MethodHandle)","makes a method handle which adapts a target method handle, by running it inside an exception handler."
"java.lang.invoke.MethodHandles.collectArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)",adapts a target method handle by pre-processing a sub-sequence of its arguments with a filter (another method handle).
"java.lang.invoke.MethodHandles.constant(java.lang.Class<?>,java.lang.Object)",produces a method handle of the requested return type which returns the given constant value every time it is invoked.
"java.lang.invoke.MethodHandles.dropArguments(java.lang.invoke.MethodHandle,int,java.util.List<java.lang.Class<?>>)",produces a method handle which will discard some dummy arguments before calling some other specified target method handle.
"java.lang.invoke.MethodHandles.dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class<?>...)",produces a method handle which will discard some dummy arguments before calling some other specified target method handle.
java.lang.invoke.MethodHandles.exactInvoker(java.lang.invoke.MethodType),"produces a special invoker method handle which can be used to invoke any method handle of the given type, as if by invokeexact."
"java.lang.invoke.MethodHandles.explicitCastArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)",produces a method handle which adapts the type of the given method handle to a new type by pairwise argument and return type conversion.
"java.lang.invoke.MethodHandles.filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle...)","adapts a target method handle by pre-processing one or more of its arguments, each with its own unary filter function, and then calling the target with each pre-processed argument replaced by the result of its corresponding filter function."
"java.lang.invoke.MethodHandles.filterReturnValue(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)",adapts a target method handle by post-processing its return value (if any) with a filter (another method handle).
"java.lang.invoke.MethodHandles.foldArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)","adapts a target method handle by pre-processing some of its arguments, and then calling the target with the result of the pre-processing, inserted into the original sequence of arguments."
"java.lang.invoke.MethodHandles.guardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)","makes a method handle which adapts a target method handle, by guarding it with a test, a boolean-valued method handle."
java.lang.invoke.MethodHandles.identity(java.lang.Class<?>),produces a method handle which returns its sole argument when invoked.
"java.lang.invoke.MethodHandles.insertArguments(java.lang.invoke.MethodHandle,int,java.lang.Object...)",provides a target method handle with one or more bound arguments in advance of the method handle's invocation.
java.lang.invoke.MethodHandles.invoker(java.lang.invoke.MethodType),"produces a special invoker method handle which can be used to invoke any method handle compatible with the given type, as if by invoke."
java.lang.invoke.MethodHandles.lookup(),returns a lookup object with full capabilities to emulate all supported bytecode behaviors of the caller.
"java.lang.invoke.MethodHandles.permuteArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,int...)","produces a method handle which adapts the calling sequence of the given method handle to a new type, by reordering the arguments."
java.lang.invoke.MethodHandles.publicLookup(),returns a lookup object which is trusted minimally.
"java.lang.invoke.MethodHandles.reflectAs(java.lang.Class<T>,java.lang.invoke.MethodHandle)","performs an unchecked ""crack"" of a direct method handle."
"java.lang.invoke.MethodHandles.spreadInvoker(java.lang.invoke.MethodType,int)","produces a method handle which will invoke any method handle of the given type, with a given number of trailing arguments replaced by a single trailing object[] array."
"java.lang.invoke.MethodHandles.throwException(java.lang.Class<?>,java.lang.Class<? extends java.lang.Throwable>)",produces a method handle which will throw exceptions of the given extype.
"java.lang.invoke.MethodHandles.Lookup.bind(java.lang.Object,java.lang.String,java.lang.invoke.MethodType)",produces an early-bound method handle for a non-static method.
"java.lang.invoke.MethodHandles.Lookup.findConstructor(java.lang.Class<?>,java.lang.invoke.MethodType)","produces a method handle which creates an object and initializes it, using the constructor of the specified type."
"java.lang.invoke.MethodHandles.Lookup.findGetter(java.lang.Class<?>,java.lang.String,java.lang.Class<?>)",produces a method handle giving read access to a non-static field.
"java.lang.invoke.MethodHandles.Lookup.findSetter(java.lang.Class<?>,java.lang.String,java.lang.Class<?>)",produces a method handle giving write access to a non-static field.
"java.lang.invoke.MethodHandles.Lookup.findSpecial(java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType,java.lang.Class<?>)",produces an early-bound method handle for a virtual method.
"java.lang.invoke.MethodHandles.Lookup.findStatic(java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType)",produces a method handle for a static method.
"java.lang.invoke.MethodHandles.Lookup.findStaticGetter(java.lang.Class<?>,java.lang.String,java.lang.Class<?>)",produces a method handle giving read access to a static field.
"java.lang.invoke.MethodHandles.Lookup.findStaticSetter(java.lang.Class<?>,java.lang.String,java.lang.Class<?>)",produces a method handle giving write access to a static field.
"java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType)",produces a method handle for a virtual method.
java.lang.invoke.MethodHandles.Lookup.in(java.lang.Class<?>),creates a lookup on the specified new lookup class.
java.lang.invoke.MethodHandles.Lookup.lookupClass(),tells which class is performing the lookup.
java.lang.invoke.MethodHandles.Lookup.lookupModes(),tells which access-protection classes of members this lookup object can produce.
java.lang.invoke.MethodHandles.Lookup.revealDirect(java.lang.invoke.MethodHandle),cracks a direct method handle created by this lookup object or a similar one.
java.lang.invoke.MethodHandles.Lookup.toString(),displays the name of the class from which lookups are to be made.
java.lang.invoke.MethodHandles.Lookup.unreflect(java.lang.reflect.Method),"makes a direct method handle to m, if the lookup class has permission."
java.lang.invoke.MethodHandles.Lookup.unreflectConstructor(java.lang.reflect.Constructor<?>),produces a method handle for a reflected constructor.
java.lang.invoke.MethodHandles.Lookup.unreflectGetter(java.lang.reflect.Field),produces a method handle giving read access to a reflected field.
java.lang.invoke.MethodHandles.Lookup.unreflectSetter(java.lang.reflect.Field),produces a method handle giving write access to a reflected field.
"java.lang.invoke.MethodHandles.Lookup.unreflectSpecial(java.lang.reflect.Method,java.lang.Class<?>)",produces a method handle for a reflected method.
java.lang.invoke.MethodType.appendParameterTypes(java.lang.Class<?>...),finds or creates a method type with additional parameter types.
java.lang.invoke.MethodType.appendParameterTypes(java.util.List<java.lang.Class<?>>),finds or creates a method type with additional parameter types.
"java.lang.invoke.MethodType.changeParameterType(int,java.lang.Class<?>)",finds or creates a method type with a single different parameter type.
java.lang.invoke.MethodType.changeReturnType(java.lang.Class<?>),finds or creates a method type with a different return type.
"java.lang.invoke.MethodType.dropParameterTypes(int,int)",finds or creates a method type with some parameter types omitted.
java.lang.invoke.MethodType.equals(java.lang.Object),compares the specified object with this type for equality.
java.lang.invoke.MethodType.erase(),erases all reference types to object.
"java.lang.invoke.MethodType.fromMethodDescriptorString(java.lang.String,java.lang.ClassLoader)","finds or creates an instance of a method type, given the spelling of its bytecode descriptor."
java.lang.invoke.MethodType.generic(),"converts all types, both reference and primitive, to object."
"java.lang.invoke.MethodType.genericMethodType(int,boolean)",finds or creates a method type whose components are object with an optional trailing object[] array.
java.lang.invoke.MethodType.genericMethodType(int),finds or creates a method type whose components are all object.
java.lang.invoke.MethodType.hashCode(),returns the hash code value for this method type.
java.lang.invoke.MethodType.hasPrimitives(),reports if this type contains a primitive argument or return value.
java.lang.invoke.MethodType.hasWrappers(),reports if this type contains a wrapper argument or return value.
"java.lang.invoke.MethodType.insertParameterTypes(int,java.lang.Class<?>...)",finds or creates a method type with additional parameter types.
"java.lang.invoke.MethodType.insertParameterTypes(int,java.util.List<java.lang.Class<?>>)",finds or creates a method type with additional parameter types.
"java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.lang.Class<?>[])",finds or creates an instance of the given method type.
"java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.util.List<java.lang.Class<?>>)",finds or creates a method type with the given components.
"java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.lang.Class<?>,java.lang.Class<?>...)",finds or creates a method type with the given components.
java.lang.invoke.MethodType.methodType(java.lang.Class<?>),finds or creates a method type with the given components.
"java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.lang.Class<?>)",finds or creates a method type with the given components.
"java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.lang.invoke.MethodType)",finds or creates a method type with the given components.
java.lang.invoke.MethodType.parameterArray(),presents the parameter types as an array (a convenience method).
java.lang.invoke.MethodType.parameterCount(),returns the number of parameter types in this method type.
java.lang.invoke.MethodType.parameterList(),presents the parameter types as a list (a convenience method).
java.lang.invoke.MethodType.parameterType(int),"returns the parameter type at the specified index, within this method type."
java.lang.invoke.MethodType.returnType(),returns the return type of this method type.
java.lang.invoke.MethodType.toMethodDescriptorString(),produces a bytecode descriptor representation of the method type.
java.lang.invoke.MethodType.toString(),"returns a string representation of the method type, of the form ""(pt0,pt1."
java.lang.invoke.MethodType.unwrap(),converts all wrapper types to their corresponding primitive types.
java.lang.invoke.MethodType.wrap(),converts all primitive types to their corresponding wrapper types.
java.lang.invoke.MutableCallSite.dynamicInvoker(),produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site.
java.lang.invoke.MutableCallSite.getTarget(),"returns the target method of the call site, which behaves like a normal field of the mutablecallsite."
java.lang.invoke.MutableCallSite.setTarget(java.lang.invoke.MethodHandle),"updates the target method of this call site, as a normal variable."
java.lang.invoke.MutableCallSite.syncAll(java.lang.invoke.MutableCallSite[]),"performs a synchronization operation on each call site in the given array, forcing all other threads to throw away any cached values previously loaded from the target of any of the call sites."
java.lang.invoke.SerializedLambda.getCapturedArg(int),get a dynamic argument to the lambda capture site.
java.lang.invoke.SerializedLambda.getCapturedArgCount(),get the count of dynamic arguments to the lambda capture site.
java.lang.invoke.SerializedLambda.getCapturingClass(),get the name of the class that captured this lambda.
java.lang.invoke.SerializedLambda.getFunctionalInterfaceClass(),get the name of the invoked type to which this lambda has been converted.
java.lang.invoke.SerializedLambda.getFunctionalInterfaceMethodName(),get the name of the primary method for the functional interface to which this lambda has been converted.
java.lang.invoke.SerializedLambda.getFunctionalInterfaceMethodSignature(),get the signature of the primary method for the functional interface to which this lambda has been converted.
java.lang.invoke.SerializedLambda.getImplClass(),get the name of the class containing the implementation method.
java.lang.invoke.SerializedLambda.getImplMethodKind(),get the method handle kind (see methodhandleinfo) of the implementation method.
java.lang.invoke.SerializedLambda.getImplMethodName(),get the name of the implementation method.
java.lang.invoke.SerializedLambda.getImplMethodSignature(),get the signature of the implementation method.
java.lang.invoke.SerializedLambda.getInstantiatedMethodType(),get the signature of the primary functional interface method after type variables are substituted with their instantiation from the capture site.
"java.lang.invoke.SwitchPoint.guardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)",returns a method handle which always delegates either to the target or the fallback.
java.lang.invoke.SwitchPoint.hasBeenInvalidated(),determines if this switch point has been invalidated yet.
java.lang.invoke.SwitchPoint.invalidateAll(java.lang.invoke.SwitchPoint[]),sets all of the given switch points into the invalid state.
java.lang.invoke.VolatileCallSite.dynamicInvoker(),produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site.
java.lang.invoke.VolatileCallSite.getTarget(),"returns the target method of the call site, which behaves like a volatile field of the volatilecallsite."
java.lang.invoke.VolatileCallSite.setTarget(java.lang.invoke.MethodHandle),"updates the target method of this call site, as a volatile variable."
java.lang.management.BufferPoolMXBean.getCount(),returns an estimate of the number of buffers in the pool.
java.lang.management.BufferPoolMXBean.getMemoryUsed(),returns an estimate of the memory that the java virtual machine is using for this buffer pool.
java.lang.management.BufferPoolMXBean.getName(),returns the name representing this buffer pool.
java.lang.management.BufferPoolMXBean.getTotalCapacity(),returns an estimate of the total capacity of the buffers in this pool.
java.lang.management.ClassLoadingMXBean.getLoadedClassCount(),returns the number of classes that are currently loaded in the java virtual machine.
java.lang.management.ClassLoadingMXBean.getTotalLoadedClassCount(),returns the total number of classes that have been loaded since the java virtual machine has started execution.
java.lang.management.ClassLoadingMXBean.getUnloadedClassCount(),returns the total number of classes unloaded since the java virtual machine has started execution.
java.lang.management.ClassLoadingMXBean.isVerbose(),tests if the verbose output for the class loading system is enabled.
java.lang.management.ClassLoadingMXBean.setVerbose(boolean),enables or disables the verbose output for the class loading system.
java.lang.management.CompilationMXBean.getName(),returns the name of the just-in-time (jit) compiler.
java.lang.management.CompilationMXBean.getTotalCompilationTime(),returns the approximate accumulated elapsed time (in milliseconds) spent in compilation.
java.lang.management.CompilationMXBean.isCompilationTimeMonitoringSupported(),tests if the java virtual machine supports the monitoring of compilation time.
java.lang.management.GarbageCollectorMXBean.getCollectionCount(),returns the total number of collections that have occurred.
java.lang.management.GarbageCollectorMXBean.getCollectionTime(),returns the approximate accumulated collection elapsed time in milliseconds.
java.lang.management.MemoryManagerMXBean.getMemoryPoolNames(),returns the name of memory pools that this memory manager manages.
java.lang.management.MemoryManagerMXBean.getName(),returns the name representing this memory manager.
java.lang.management.MemoryManagerMXBean.isValid(),tests if this memory manager is valid in the java virtual machine.
java.lang.management.MemoryMXBean.gc(),runs the garbage collector.
java.lang.management.MemoryMXBean.getHeapMemoryUsage(),returns the current memory usage of the heap that is used for object allocation.
java.lang.management.MemoryMXBean.getNonHeapMemoryUsage(),returns the current memory usage of non-heap memory that is used by the java virtual machine.
java.lang.management.MemoryMXBean.getObjectPendingFinalizationCount(),returns the approximate number of objects for which finalization is pending.
java.lang.management.MemoryMXBean.isVerbose(),tests if verbose output for the memory system is enabled.
java.lang.management.MemoryMXBean.setVerbose(boolean),enables or disables verbose output for the memory system.
java.lang.management.MemoryPoolMXBean.getCollectionUsage(),returns the memory usage after the java virtual machine most recently expended effort in recycling unused objects in this memory pool.
java.lang.management.MemoryPoolMXBean.getCollectionUsageThreshold(),returns the collection usage threshold value of this memory pool in bytes.
java.lang.management.MemoryPoolMXBean.getCollectionUsageThresholdCount(),returns the number of times that the java virtual machine has detected that the memory usage has reached or exceeded the collection usage threshold.
java.lang.management.MemoryPoolMXBean.getMemoryManagerNames(),returns the name of memory managers that manages this memory pool.
java.lang.management.MemoryPoolMXBean.getName(),returns the name representing this memory pool.
java.lang.management.MemoryPoolMXBean.getPeakUsage(),returns the peak memory usage of this memory pool since the java virtual machine was started or since the peak was reset.
java.lang.management.MemoryPoolMXBean.getType(),returns the type of this memory pool.
java.lang.management.MemoryPoolMXBean.getUsage(),returns an estimate of the memory usage of this memory pool.
java.lang.management.MemoryPoolMXBean.getUsageThreshold(),returns the usage threshold value of this memory pool in bytes.
java.lang.management.MemoryPoolMXBean.getUsageThresholdCount(),returns the number of times that the memory usage has crossed the usage threshold.
java.lang.management.MemoryPoolMXBean.isCollectionUsageThresholdExceeded(),tests if the memory usage of this memory pool after the most recent collection on which the java virtual machine has expended effort has reached or exceeded its collection usage threshold.
java.lang.management.MemoryPoolMXBean.isCollectionUsageThresholdSupported(),tests if this memory pool supports a collection usage threshold.
java.lang.management.MemoryPoolMXBean.isUsageThresholdExceeded(),tests if the memory usage of this memory pool reaches or exceeds its usage threshold value.
java.lang.management.MemoryPoolMXBean.isUsageThresholdSupported(),tests if this memory pool supports usage threshold.
java.lang.management.MemoryPoolMXBean.isValid(),tests if this memory pool is valid in the java virtual machine.
java.lang.management.MemoryPoolMXBean.resetPeakUsage(),resets the peak memory usage statistic of this memory pool to the current memory usage.
java.lang.management.MemoryPoolMXBean.setCollectionUsageThreshold(long),sets the collection usage threshold of this memory pool to the given threshold value.
java.lang.management.MemoryPoolMXBean.setUsageThreshold(long),sets the threshold of this memory pool to the given threshold value if this memory pool supports the usage threshold.
java.lang.management.OperatingSystemMXBean.getArch(),returns the operating system architecture.
java.lang.management.OperatingSystemMXBean.getAvailableProcessors(),returns the number of processors available to the java virtual machine.
java.lang.management.OperatingSystemMXBean.getName(),returns the operating system name.
java.lang.management.OperatingSystemMXBean.getSystemLoadAverage(),returns the system load average for the last minute.
java.lang.management.OperatingSystemMXBean.getVersion(),returns the operating system version.
java.lang.management.PlatformLoggingMXBean.getLoggerLevel(java.lang.String),gets the name of the log level associated with the specified logger.
java.lang.management.PlatformLoggingMXBean.getLoggerNames(),returns the list of the currently registered logger names.
java.lang.management.PlatformLoggingMXBean.getParentLoggerName(java.lang.String),returns the name of the parent for the specified logger.
"java.lang.management.PlatformLoggingMXBean.setLoggerLevel(java.lang.String,java.lang.String)",sets the specified logger to the specified new level.
java.lang.management.PlatformManagedObject.getObjectName(),returns an objectname instance representing the object name of this platform managed object.
java.lang.management.RuntimeMXBean.getBootClassPath(),returns the boot class path that is used by the bootstrap class loader to search for class files.
java.lang.management.RuntimeMXBean.getClassPath(),returns the java class path that is used by the system class loader to search for class files.
java.lang.management.RuntimeMXBean.getInputArguments(),returns the input arguments passed to the java virtual machine which does not include the arguments to the main method.
java.lang.management.RuntimeMXBean.getLibraryPath(),returns the java library path.
java.lang.management.RuntimeMXBean.getManagementSpecVersion(),returns the version of the specification for the management interface implemented by the running java virtual machine.
java.lang.management.RuntimeMXBean.getName(),returns the name representing the running java virtual machine.
java.lang.management.RuntimeMXBean.getSpecName(),returns the java virtual machine specification name.
java.lang.management.RuntimeMXBean.getSpecVendor(),returns the java virtual machine specification vendor.
java.lang.management.RuntimeMXBean.getSpecVersion(),returns the java virtual machine specification version.
java.lang.management.RuntimeMXBean.getStartTime(),returns the start time of the java virtual machine in milliseconds.
java.lang.management.RuntimeMXBean.getSystemProperties(),returns a map of names and values of all system properties.
java.lang.management.RuntimeMXBean.getUptime(),returns the uptime of the java virtual machine in milliseconds.
java.lang.management.RuntimeMXBean.getVmName(),returns the java virtual machine implementation name.
java.lang.management.RuntimeMXBean.getVmVendor(),returns the java virtual machine implementation vendor.
java.lang.management.RuntimeMXBean.getVmVersion(),returns the java virtual machine implementation version.
java.lang.management.RuntimeMXBean.isBootClassPathSupported(),tests if the java virtual machine supports the boot class path mechanism used by the bootstrap class loader to search for class files.
"java.lang.management.ThreadMXBean.dumpAllThreads(boolean,boolean)",returns the thread info for all live threads with stack trace and synchronization information.
java.lang.management.ThreadMXBean.findDeadlockedThreads(),finds cycles of threads that are in deadlock waiting to acquire object monitors or ownable synchronizers.
java.lang.management.ThreadMXBean.findMonitorDeadlockedThreads(),finds cycles of threads that are in deadlock waiting to acquire object monitors.
java.lang.management.ThreadMXBean.getAllThreadIds(),returns all live thread ids.
java.lang.management.ThreadMXBean.getCurrentThreadCpuTime(),returns the total cpu time for the current thread in nanoseconds.
java.lang.management.ThreadMXBean.getCurrentThreadUserTime(),returns the cpu time that the current thread has executed in user mode in nanoseconds.
java.lang.management.ThreadMXBean.getDaemonThreadCount(),returns the current number of live daemon threads.
java.lang.management.ThreadMXBean.getPeakThreadCount(),returns the peak live thread count since the java virtual machine started or peak was reset.
java.lang.management.ThreadMXBean.getThreadCount(),returns the current number of live threads including both daemon and non-daemon threads.
java.lang.management.ThreadMXBean.getThreadCpuTime(long),returns the total cpu time for a thread of the specified id in nanoseconds.
java.lang.management.ThreadMXBean.getThreadInfo(long),returns the thread info for a thread of the specified id with no stack trace.
java.lang.management.ThreadMXBean.getThreadInfo(long[]),returns the thread info for each thread whose id is in the input array ids with no stack trace.
"java.lang.management.ThreadMXBean.getThreadInfo(long,int)","returns a thread info for a thread of the specified id, with stack trace of a specified number of stack trace elements."
"java.lang.management.ThreadMXBean.getThreadInfo(long[],int)","returns the thread info for each thread whose id is in the input array ids, with stack trace of a specified number of stack trace elements."
"java.lang.management.ThreadMXBean.getThreadInfo(long[],boolean,boolean)","returns the thread info for each thread whose id is in the input array ids, with stack trace and synchronization information."
java.lang.management.ThreadMXBean.getThreadUserTime(long),returns the cpu time that a thread of the specified id has executed in user mode in nanoseconds.
java.lang.management.ThreadMXBean.getTotalStartedThreadCount(),returns the total number of threads created and also started since the java virtual machine started.
java.lang.management.ThreadMXBean.isCurrentThreadCpuTimeSupported(),tests if the java virtual machine supports cpu time measurement for the current thread.
java.lang.management.ThreadMXBean.isObjectMonitorUsageSupported(),tests if the java virtual machine supports monitoring of object monitor usage.
java.lang.management.ThreadMXBean.isSynchronizerUsageSupported(),"tests if the java virtual machine supports monitoring of
ownable synchronizer usage."
java.lang.management.ThreadMXBean.isThreadContentionMonitoringEnabled(),tests if thread contention monitoring is enabled.
java.lang.management.ThreadMXBean.isThreadContentionMonitoringSupported(),tests if the java virtual machine supports thread contention monitoring.
java.lang.management.ThreadMXBean.isThreadCpuTimeEnabled(),tests if thread cpu time measurement is enabled.
java.lang.management.ThreadMXBean.isThreadCpuTimeSupported(),tests if the java virtual machine implementation supports cpu time measurement for any thread.
java.lang.management.ThreadMXBean.resetPeakThreadCount(),resets the peak thread count to the current number of live threads.
java.lang.management.ThreadMXBean.setThreadContentionMonitoringEnabled(boolean),enables or disables thread contention monitoring.
java.lang.management.ThreadMXBean.setThreadCpuTimeEnabled(boolean),enables or disables thread cpu time measurement.
java.lang.management.LockInfo.from(javax.management.openmbean.CompositeData),returns a lockinfo object represented by the given compositedata.
java.lang.management.LockInfo.getClassName(),returns the fully qualified name of the class of the lock object.
java.lang.management.LockInfo.getIdentityHashCode(),returns the identity hash code of the lock object returned from the system.
java.lang.management.LockInfo.toString(),returns a string representation of a lock.
java.lang.management.ManagementFactory.getClassLoadingMXBean(),returns the managed bean for the class loading system of the java virtual machine.
java.lang.management.ManagementFactory.getCompilationMXBean(),returns the managed bean for the compilation system of the java virtual machine.
java.lang.management.ManagementFactory.getGarbageCollectorMXBeans(),returns a list of garbagecollectormxbean objects in the java virtual machine.
java.lang.management.ManagementFactory.getMemoryManagerMXBeans(),returns a list of memorymanagermxbean objects in the java virtual machine.
java.lang.management.ManagementFactory.getMemoryMXBean(),returns the managed bean for the memory system of the java virtual machine.
java.lang.management.ManagementFactory.getMemoryPoolMXBeans(),returns a list of memorypoolmxbean objects in the java virtual machine.
java.lang.management.ManagementFactory.getOperatingSystemMXBean(),returns the managed bean for the operating system on which the java virtual machine is running.
java.lang.management.ManagementFactory.getPlatformManagementInterfaces(),"returns the set of class objects, subinterface of platformmanagedobject, representing all management interfaces for monitoring and managing the java platform."
java.lang.management.ManagementFactory.getPlatformMBeanServer(),returns the platform mbeanserver.
java.lang.management.ManagementFactory.getPlatformMXBean(java.lang.Class<T>),returns the platform mxbean implementing the given mxbeaninterface which is specified to have one single instance in the java virtual machine.
"java.lang.management.ManagementFactory.getPlatformMXBean(javax.management.MBeanServerConnection,java.lang.Class<T>)",returns the platform mxbean proxy for mxbeaninterface which is specified to have one single instance in a java virtual machine and the proxy will forward the method calls through the given mbeanserverconnection.
java.lang.management.ManagementFactory.getPlatformMXBeans(java.lang.Class<T>),returns the list of platform mxbeans implementing the given mxbeaninterface in the java virtual machine.
"java.lang.management.ManagementFactory.getPlatformMXBeans(javax.management.MBeanServerConnection,java.lang.Class<T>)",returns the list of the platform mxbean proxies for forwarding the method calls of the mxbeaninterface through the given mbeanserverconnection.
java.lang.management.ManagementFactory.getRuntimeMXBean(),returns the managed bean for the runtime system of the java virtual machine.
java.lang.management.ManagementFactory.getThreadMXBean(),returns the managed bean for the thread system of the java virtual machine.
"java.lang.management.ManagementFactory.newPlatformMXBeanProxy(javax.management.MBeanServerConnection,java.lang.String,java.lang.Class<T>)",returns a proxy for a platform mxbean interface of a given mxbean name that forwards its method calls through the given mbeanserverconnection.
java.lang.management.MemoryNotificationInfo.from(javax.management.openmbean.CompositeData),returns a memorynotificationinfo object represented by the given compositedata.
java.lang.management.MemoryNotificationInfo.getCount(),returns the number of times that the memory usage has crossed a threshold when the notification was constructed.
java.lang.management.MemoryNotificationInfo.getPoolName(),returns the name of the memory pool that triggers this notification.
java.lang.management.MemoryNotificationInfo.getUsage(),returns the memory usage of the memory pool when this notification was constructed.
java.lang.management.MemoryUsage.from(javax.management.openmbean.CompositeData),returns a memoryusage object represented by the given compositedata.
java.lang.management.MemoryUsage.getCommitted(),returns the amount of memory in bytes that is committed for the java virtual machine to use.
java.lang.management.MemoryUsage.getInit(),returns the amount of memory in bytes that the java virtual machine initially requests from the operating system for memory management.
java.lang.management.MemoryUsage.getMax(),returns the maximum amount of memory in bytes that can be used for memory management.
java.lang.management.MemoryUsage.getUsed(),returns the amount of used memory in bytes.
java.lang.management.MemoryUsage.toString(),returns a descriptive representation of this memory usage.
java.lang.management.MonitorInfo.from(javax.management.openmbean.CompositeData),returns a monitorinfo object represented by the given compositedata.
java.lang.management.MonitorInfo.getLockedStackDepth(),returns the depth in the stack trace where the object monitor was locked.
java.lang.management.MonitorInfo.getLockedStackFrame(),returns the stack frame that locked the object monitor.
java.lang.management.ThreadInfo.from(javax.management.openmbean.CompositeData),returns a threadinfo object represented by the given compositedata.
java.lang.management.ThreadInfo.getBlockedCount(),returns the total number of times that the thread associated with this threadinfo blocked to enter or reenter a monitor.
java.lang.management.ThreadInfo.getBlockedTime(),returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this threadinfo has blocked to enter or reenter a monitor since thread contention monitoring is enabled.
java.lang.management.ThreadInfo.getLockedMonitors(),"returns an array of monitorinfo objects, each of which represents an object monitor currently locked by the thread associated with this threadinfo."
java.lang.management.ThreadInfo.getLockedSynchronizers(),"returns an array of lockinfo objects, each of which represents an ownable synchronizer currently locked by the thread associated with this threadinfo."
java.lang.management.ThreadInfo.getLockInfo(),returns the lockinfo of an object for which the thread associated with this threadinfo is blocked waiting.
java.lang.management.ThreadInfo.getLockName(),returns the string representation of an object for which the thread associated with this threadinfo is blocked waiting.
java.lang.management.ThreadInfo.getLockOwnerId(),returns the id of the thread which owns the object for which the thread associated with this threadinfo is blocked waiting.
java.lang.management.ThreadInfo.getLockOwnerName(),returns the name of the thread which owns the object for which the thread associated with this threadinfo is blocked waiting.
java.lang.management.ThreadInfo.getStackTrace(),returns the stack trace of the thread associated with this threadinfo.
java.lang.management.ThreadInfo.getThreadId(),returns the id of the thread associated with this threadinfo.
java.lang.management.ThreadInfo.getThreadName(),returns the name of the thread associated with this threadinfo.
java.lang.management.ThreadInfo.getThreadState(),returns the state of the thread associated with this threadinfo.
java.lang.management.ThreadInfo.getWaitedCount(),returns the total number of times that the thread associated with this threadinfo waited for notification.
java.lang.management.ThreadInfo.getWaitedTime(),returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this threadinfo has waited for notification since thread contention monitoring is enabled.
java.lang.management.ThreadInfo.isInNative(),tests if the thread associated with this threadinfo is executing native code via the java native interface (jni).
java.lang.management.ThreadInfo.isSuspended(),tests if the thread associated with this threadinfo is suspended.
java.lang.management.ThreadInfo.toString(),returns a string representation of this thread info.
java.lang.management.MemoryType.toString(),returns the string representation of this memorytype.
java.lang.management.MemoryType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.lang.management.MemoryType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.lang.ref.PhantomReference.get(),returns this reference object's referent.
java.lang.ref.Reference.clear(),clears this reference object.
java.lang.ref.Reference.enqueue(),"adds this reference object to the queue with which it is registered, if any."
java.lang.ref.Reference.get(),returns this reference object's referent.
java.lang.ref.Reference.isEnqueued(),"tells whether or not this reference object has been enqueued, either by the program or by the garbage collector."
java.lang.ref.ReferenceQueue.poll(),polls this queue to see if a reference object is available.
java.lang.ref.ReferenceQueue.remove(long),"removes the next reference object in this queue, blocking until either one becomes available or the given timeout period expires."
java.lang.ref.ReferenceQueue.remove(),"removes the next reference object in this queue, blocking until one becomes available."
java.lang.ref.SoftReference.get(),returns this reference object's referent.
java.lang.reflect.AnnotatedArrayType.getAnnotatedGenericComponentType(),returns the potentially annotated generic component type of this array type.
java.lang.reflect.AnnotatedElement.getAnnotation(java.lang.Class<T>),"returns this element's annotation for the specified type if such an annotation is present, else null."
java.lang.reflect.AnnotatedElement.getAnnotations(),returns annotations that are present on this element.
java.lang.reflect.AnnotatedElement.getAnnotationsByType(java.lang.Class<T>),returns annotations that are associated with this element.
java.lang.reflect.AnnotatedElement.getDeclaredAnnotation(java.lang.Class<T>),"returns this element's annotation for the specified type if such an annotation is directly present, else null."
java.lang.reflect.AnnotatedElement.getDeclaredAnnotations(),returns annotations that are directly present on this element.
java.lang.reflect.AnnotatedElement.getDeclaredAnnotationsByType(java.lang.Class<T>),returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present.
java.lang.reflect.AnnotatedElement.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>),"returns true if an annotation for the specified type is present on this element, else false."
java.lang.reflect.AnnotatedParameterizedType.getAnnotatedActualTypeArguments(),returns the potentially annotated actual type arguments of this parameterized type.
java.lang.reflect.AnnotatedType.getType(),returns the underlying type that this annotated type represents.
java.lang.reflect.AnnotatedTypeVariable.getAnnotatedBounds(),returns the potentially annotated bounds of this type variable.
java.lang.reflect.AnnotatedWildcardType.getAnnotatedLowerBounds(),returns the potentially annotated lower bounds of this wildcard type.
java.lang.reflect.AnnotatedWildcardType.getAnnotatedUpperBounds(),returns the potentially annotated upper bounds of this wildcard type.
java.lang.reflect.GenericArrayType.getGenericComponentType(),returns a type object representing the component type of this array.
java.lang.reflect.GenericDeclaration.getTypeParameters(),"returns an array of typevariable objects that represent the type variables declared by the generic declaration represented by this genericdeclaration object, in declaration order."
"java.lang.reflect.InvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",processes a method invocation on a proxy instance and returns the result.
java.lang.reflect.Member.getDeclaringClass(),returns the class object representing the class or interface that declares the member or constructor represented by this member.
java.lang.reflect.Member.getModifiers(),"returns the java language modifiers for the member or constructor represented by this member, as an integer."
java.lang.reflect.Member.getName(),returns the simple name of the underlying member or constructor represented by this member.
java.lang.reflect.Member.isSynthetic(),returns true if this member was introduced by the compiler; returns false otherwise.
java.lang.reflect.ParameterizedType.getActualTypeArguments(),returns an array of type objects representing the actual type arguments to this type.
java.lang.reflect.ParameterizedType.getOwnerType(),returns a type object representing the type that this type is a member of.
java.lang.reflect.ParameterizedType.getRawType(),returns the type object representing the class or interface that declared this type.
java.lang.reflect.Type.getTypeName(),"returns a string describing this type, including information about any type parameters."
java.lang.reflect.TypeVariable.getAnnotatedBounds(),returns an array of annotatedtype objects that represent the use of types to denote the upper bounds of the type parameter represented by this typevariable.
java.lang.reflect.TypeVariable.getBounds(),returns an array of type objects representing the upper bound(s) of this type variable.
java.lang.reflect.TypeVariable.getGenericDeclaration(),returns the genericdeclaration object representing the generic declaration declared this type variable.
java.lang.reflect.TypeVariable.getName(),"returns the name of this type variable, as it occurs in the source code."
java.lang.reflect.WildcardType.getLowerBounds(),returns an array of type objects representing the lower bound(s) of this type variable.
java.lang.reflect.WildcardType.getUpperBounds(),returns an array of type objects representing the upper bound(s) of this type variable.
java.lang.reflect.AccessibleObject.isAccessible(),get the value of the accessible flag for this object.
java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>),"returns true if an annotation for the specified type is present on this element, else false."
"java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean)",convenience method to set the accessible flag for an array of objects with a single security check (for efficiency).
java.lang.reflect.AccessibleObject.setAccessible(boolean),set the accessible flag for this object to the indicated boolean value.
"java.lang.reflect.Array.get(java.lang.Object,int)",returns the value of the indexed component in the specified array object.
"java.lang.reflect.Array.getBoolean(java.lang.Object,int)","returns the value of the indexed component in the specified array object, as a boolean."
"java.lang.reflect.Array.getByte(java.lang.Object,int)","returns the value of the indexed component in the specified array object, as a byte."
"java.lang.reflect.Array.getChar(java.lang.Object,int)","returns the value of the indexed component in the specified array object, as a char."
"java.lang.reflect.Array.getDouble(java.lang.Object,int)","returns the value of the indexed component in the specified array object, as a double."
"java.lang.reflect.Array.getFloat(java.lang.Object,int)","returns the value of the indexed component in the specified array object, as a float."
"java.lang.reflect.Array.getInt(java.lang.Object,int)","returns the value of the indexed component in the specified array object, as an int."
java.lang.reflect.Array.getLength(java.lang.Object),"returns the length of the specified array object, as an int."
"java.lang.reflect.Array.getLong(java.lang.Object,int)","returns the value of the indexed component in the specified array object, as a long."
"java.lang.reflect.Array.getShort(java.lang.Object,int)","returns the value of the indexed component in the specified array object, as a short."
"java.lang.reflect.Array.newInstance(java.lang.Class<?>,int)",creates a new array with the specified component type and length.
"java.lang.reflect.Array.newInstance(java.lang.Class<?>,int...)",creates a new array with the specified component type and dimensions.
"java.lang.reflect.Array.set(java.lang.Object,int,java.lang.Object)",sets the value of the indexed component of the specified array object to the specified new value.
"java.lang.reflect.Array.setBoolean(java.lang.Object,int,boolean)",sets the value of the indexed component of the specified array object to the specified boolean value.
"java.lang.reflect.Array.setByte(java.lang.Object,int,byte)",sets the value of the indexed component of the specified array object to the specified byte value.
"java.lang.reflect.Array.setChar(java.lang.Object,int,char)",sets the value of the indexed component of the specified array object to the specified char value.
"java.lang.reflect.Array.setDouble(java.lang.Object,int,double)",sets the value of the indexed component of the specified array object to the specified double value.
"java.lang.reflect.Array.setFloat(java.lang.Object,int,float)",sets the value of the indexed component of the specified array object to the specified float value.
"java.lang.reflect.Array.setInt(java.lang.Object,int,int)",sets the value of the indexed component of the specified array object to the specified int value.
"java.lang.reflect.Array.setLong(java.lang.Object,int,long)",sets the value of the indexed component of the specified array object to the specified long value.
"java.lang.reflect.Array.setShort(java.lang.Object,int,short)",sets the value of the indexed component of the specified array object to the specified short value.
java.lang.reflect.Constructor.equals(java.lang.Object),compares this constructor against the specified object.
java.lang.reflect.Constructor.getAnnotatedReceiverType(),returns an annotatedtype object that represents the use of a type to specify the receiver type of the method/constructor represented by this executable object.
java.lang.reflect.Constructor.getAnnotatedReturnType(),returns an annotatedtype object that represents the use of a type to specify the return type of the method/constructor represented by this executable.
java.lang.reflect.Constructor.getAnnotation(java.lang.Class<T>),"returns this element's annotation for the specified type if such an annotation is present, else null."
java.lang.reflect.Constructor.getDeclaredAnnotations(),returns annotations that are directly present on this element.
java.lang.reflect.Constructor.getDeclaringClass(),returns the class object representing the class or interface that declares the executable represented by this object.
java.lang.reflect.Constructor.getExceptionTypes(),returns an array of class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object.
java.lang.reflect.Constructor.getGenericExceptionTypes(),returns an array of type objects that represent the exceptions declared to be thrown by this executable object.
java.lang.reflect.Constructor.getGenericParameterTypes(),"returns an array of type objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
java.lang.reflect.Constructor.getModifiers(),returns the java language modifiers for the executable represented by this object.
java.lang.reflect.Constructor.getName(),"returns the name of this constructor, as a string."
java.lang.reflect.Constructor.getParameterAnnotations(),"returns an array of arrays of annotations that represent the annotations on the formal parameters, in declaration order, of the executable represented by this object."
java.lang.reflect.Constructor.getParameterCount(),returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.
java.lang.reflect.Constructor.getParameterTypes(),"returns an array of class objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
java.lang.reflect.Constructor.getTypeParameters(),"returns an array of typevariable objects that represent the type variables declared by the generic declaration represented by this genericdeclaration object, in declaration order."
java.lang.reflect.Constructor.hashCode(),returns a hashcode for this constructor.
java.lang.reflect.Constructor.isSynthetic(),returns true if this executable is a synthetic construct; returns false otherwise.
java.lang.reflect.Constructor.isVarArgs(),returns true if this executable was declared to take a variable number of arguments; returns false otherwise.
java.lang.reflect.Constructor.newInstance(java.lang.Object...),"uses the constructor represented by this constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters."
java.lang.reflect.Constructor.toGenericString(),"returns a string describing this constructor, including type parameters."
java.lang.reflect.Constructor.toString(),returns a string describing this constructor.
java.lang.reflect.Executable.getAnnotatedExceptionTypes(),returns an array of annotatedtype objects that represent the use of types to specify the declared exceptions of the method/constructor represented by this executable.
java.lang.reflect.Executable.getAnnotatedParameterTypes(),returns an array of annotatedtype objects that represent the use of types to specify formal parameter types of the method/constructor represented by this executable.
java.lang.reflect.Executable.getAnnotatedReceiverType(),returns an annotatedtype object that represents the use of a type to specify the receiver type of the method/constructor represented by this executable object.
java.lang.reflect.Executable.getAnnotatedReturnType(),returns an annotatedtype object that represents the use of a type to specify the return type of the method/constructor represented by this executable.
java.lang.reflect.Executable.getAnnotation(java.lang.Class<T>),"returns this element's annotation for the specified type if such an annotation is present, else null."
java.lang.reflect.Executable.getAnnotationsByType(java.lang.Class<T>),returns annotations that are associated with this element.
java.lang.reflect.Executable.getDeclaredAnnotations(),returns annotations that are directly present on this element.
java.lang.reflect.Executable.getDeclaringClass(),returns the class object representing the class or interface that declares the executable represented by this object.
java.lang.reflect.Executable.getExceptionTypes(),returns an array of class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object.
java.lang.reflect.Executable.getGenericExceptionTypes(),returns an array of type objects that represent the exceptions declared to be thrown by this executable object.
java.lang.reflect.Executable.getGenericParameterTypes(),"returns an array of type objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
java.lang.reflect.Executable.getModifiers(),returns the java language modifiers for the executable represented by this object.
java.lang.reflect.Executable.getName(),returns the name of the executable represented by this object.
java.lang.reflect.Executable.getParameterAnnotations(),"returns an array of arrays of annotations that represent the annotations on the formal parameters, in declaration order, of the executable represented by this object."
java.lang.reflect.Executable.getParameterCount(),returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.
java.lang.reflect.Executable.getParameters(),returns an array of parameter objects that represent all the parameters to the underlying executable represented by this object.
java.lang.reflect.Executable.getParameterTypes(),"returns an array of class objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
java.lang.reflect.Executable.getTypeParameters(),"returns an array of typevariable objects that represent the type variables declared by the generic declaration represented by this genericdeclaration object, in declaration order."
java.lang.reflect.Executable.isSynthetic(),returns true if this executable is a synthetic construct; returns false otherwise.
java.lang.reflect.Executable.isVarArgs(),returns true if this executable was declared to take a variable number of arguments; returns false otherwise.
java.lang.reflect.Executable.toGenericString(),"returns a string describing this executable, including any type parameters."
java.lang.reflect.Field.equals(java.lang.Object),compares this field against the specified object.
java.lang.reflect.Field.get(java.lang.Object),"returns the value of the field represented by this field, on the specified object."
java.lang.reflect.Field.getAnnotatedType(),returns an annotatedtype object that represents the use of a type to specify the declared type of the field represented by this field.
java.lang.reflect.Field.getAnnotationsByType(java.lang.Class<T>),returns annotations that are associated with this element.
java.lang.reflect.Field.getBoolean(java.lang.Object),gets the value of a static or instance boolean field.
java.lang.reflect.Field.getByte(java.lang.Object),gets the value of a static or instance byte field.
java.lang.reflect.Field.getChar(java.lang.Object),gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion.
java.lang.reflect.Field.getDeclaredAnnotations(),returns annotations that are directly present on this element.
java.lang.reflect.Field.getDeclaringClass(),returns the class object representing the class or interface that declares the field represented by this field object.
java.lang.reflect.Field.getDouble(java.lang.Object),gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion.
java.lang.reflect.Field.getFloat(java.lang.Object),gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion.
java.lang.reflect.Field.getGenericType(),returns a type object that represents the declared type for the field represented by this field object.
java.lang.reflect.Field.getInt(java.lang.Object),gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion.
java.lang.reflect.Field.getLong(java.lang.Object),gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion.
java.lang.reflect.Field.getModifiers(),"returns the java language modifiers for the field represented by this field object, as an integer."
java.lang.reflect.Field.getName(),returns the name of the field represented by this field object.
java.lang.reflect.Field.getShort(java.lang.Object),gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion.
java.lang.reflect.Field.getType(),returns a class object that identifies the declared type for the field represented by this field object.
java.lang.reflect.Field.hashCode(),returns a hashcode for this field.
java.lang.reflect.Field.isEnumConstant(),returns true if this field represents an element of an enumerated type; returns false otherwise.
java.lang.reflect.Field.isSynthetic(),returns true if this field is a synthetic field; returns false otherwise.
"java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)",sets the field represented by this field object on the specified object argument to the specified new value.
"java.lang.reflect.Field.setBoolean(java.lang.Object,boolean)",sets the value of a field as a boolean on the specified object.
"java.lang.reflect.Field.setByte(java.lang.Object,byte)",sets the value of a field as a byte on the specified object.
"java.lang.reflect.Field.setChar(java.lang.Object,char)",sets the value of a field as a char on the specified object.
"java.lang.reflect.Field.setDouble(java.lang.Object,double)",sets the value of a field as a double on the specified object.
"java.lang.reflect.Field.setFloat(java.lang.Object,float)",sets the value of a field as a float on the specified object.
"java.lang.reflect.Field.setInt(java.lang.Object,int)",sets the value of a field as an int on the specified object.
"java.lang.reflect.Field.setLong(java.lang.Object,long)",sets the value of a field as a long on the specified object.
"java.lang.reflect.Field.setShort(java.lang.Object,short)",sets the value of a field as a short on the specified object.
java.lang.reflect.Field.toGenericString(),"returns a string describing this field, including its generic type."
java.lang.reflect.Field.toString(),returns a string describing this field.
java.lang.reflect.Method.equals(java.lang.Object),compares this method against the specified object.
java.lang.reflect.Method.getAnnotatedReturnType(),returns an annotatedtype object that represents the use of a type to specify the return type of the method/constructor represented by this executable.
java.lang.reflect.Method.getAnnotation(java.lang.Class<T>),"returns this element's annotation for the specified type if such an annotation is present, else null."
java.lang.reflect.Method.getDeclaredAnnotations(),returns annotations that are directly present on this element.
java.lang.reflect.Method.getDeclaringClass(),returns the class object representing the class or interface that declares the executable represented by this object.
java.lang.reflect.Method.getDefaultValue(),returns the default value for the annotation member represented by this method instance.
java.lang.reflect.Method.getExceptionTypes(),returns an array of class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object.
java.lang.reflect.Method.getGenericExceptionTypes(),returns an array of type objects that represent the exceptions declared to be thrown by this executable object.
java.lang.reflect.Method.getGenericParameterTypes(),"returns an array of type objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
java.lang.reflect.Method.getGenericReturnType(),returns a type object that represents the formal return type of the method represented by this method object.
java.lang.reflect.Method.getModifiers(),returns the java language modifiers for the executable represented by this object.
java.lang.reflect.Method.getName(),"returns the name of the method represented by this method object, as a string."
java.lang.reflect.Method.getParameterAnnotations(),"returns an array of arrays of annotations that represent the annotations on the formal parameters, in declaration order, of the executable represented by this object."
java.lang.reflect.Method.getParameterCount(),returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.
java.lang.reflect.Method.getParameterTypes(),"returns an array of class objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
java.lang.reflect.Method.getReturnType(),returns a class object that represents the formal return type of the method represented by this method object.
java.lang.reflect.Method.getTypeParameters(),"returns an array of typevariable objects that represent the type variables declared by the generic declaration represented by this genericdeclaration object, in declaration order."
java.lang.reflect.Method.hashCode(),returns a hashcode for this method.
"java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)","invokes the underlying method represented by this method object, on the specified object with the specified parameters."
java.lang.reflect.Method.isBridge(),returns true if this method is a bridge method; returns false otherwise.
java.lang.reflect.Method.isDefault(),returns true if this method is a default method; returns false otherwise.
java.lang.reflect.Method.isSynthetic(),returns true if this executable is a synthetic construct; returns false otherwise.
java.lang.reflect.Method.isVarArgs(),returns true if this executable was declared to take a variable number of arguments; returns false otherwise.
java.lang.reflect.Method.toGenericString(),"returns a string describing this method, including type parameters."
java.lang.reflect.Method.toString(),returns a string describing this method.
java.lang.reflect.Modifier.classModifiers(),return an int value or-ing together the source language modifiers that can be applied to a class.
java.lang.reflect.Modifier.constructorModifiers(),return an int value or-ing together the source language modifiers that can be applied to a constructor.
java.lang.reflect.Modifier.fieldModifiers(),return an int value or-ing together the source language modifiers that can be applied to a field.
java.lang.reflect.Modifier.interfaceModifiers(),return an int value or-ing together the source language modifiers that can be applied to an interface.
java.lang.reflect.Modifier.isAbstract(int),"return true if the integer argument includes the abstract modifier, false otherwise."
java.lang.reflect.Modifier.isFinal(int),"return true if the integer argument includes the final modifier, false otherwise."
java.lang.reflect.Modifier.isInterface(int),"return true if the integer argument includes the interface modifier, false otherwise."
java.lang.reflect.Modifier.isNative(int),"return true if the integer argument includes the native modifier, false otherwise."
java.lang.reflect.Modifier.isPrivate(int),"return true if the integer argument includes the private modifier, false otherwise."
java.lang.reflect.Modifier.isProtected(int),"return true if the integer argument includes the protected modifier, false otherwise."
java.lang.reflect.Modifier.isPublic(int),"return true if the integer argument includes the public modifier, false otherwise."
java.lang.reflect.Modifier.isStatic(int),"return true if the integer argument includes the static modifier, false otherwise."
java.lang.reflect.Modifier.isStrict(int),"return true if the integer argument includes the strictfp modifier, false otherwise."
java.lang.reflect.Modifier.isSynchronized(int),"return true if the integer argument includes the synchronized modifier, false otherwise."
java.lang.reflect.Modifier.isTransient(int),"return true if the integer argument includes the transient modifier, false otherwise."
java.lang.reflect.Modifier.isVolatile(int),"return true if the integer argument includes the volatile modifier, false otherwise."
java.lang.reflect.Modifier.methodModifiers(),return an int value or-ing together the source language modifiers that can be applied to a method.
java.lang.reflect.Modifier.parameterModifiers(),return an int value or-ing together the source language modifiers that can be applied to a parameter.
java.lang.reflect.Modifier.toString(int),return a string describing the access modifier flags in the specified modifier.
java.lang.reflect.Parameter.equals(java.lang.Object),compares based on the executable and the index.
java.lang.reflect.Parameter.getAnnotatedType(),returns an annotatedtype object that represents the use of a type to specify the type of the formal parameter represented by this parameter.
java.lang.reflect.Parameter.getAnnotation(java.lang.Class<T>),"returns this element's annotation for the specified type if such an annotation is present, else null."
java.lang.reflect.Parameter.getAnnotations(),returns annotations that are present on this element.
java.lang.reflect.Parameter.getAnnotationsByType(java.lang.Class<T>),returns annotations that are associated with this element.
java.lang.reflect.Parameter.getDeclaredAnnotations(),returns annotations that are directly present on this element.
java.lang.reflect.Parameter.getDeclaringExecutable(),return the executable which declares this parameter.
java.lang.reflect.Parameter.getModifiers(),get the modifier flags for this the parameter represented by this parameter object.
java.lang.reflect.Parameter.getName(),returns the name of the parameter.
java.lang.reflect.Parameter.getParameterizedType(),returns a type object that identifies the parameterized type for the parameter represented by this parameter object.
java.lang.reflect.Parameter.getType(),returns a class object that identifies the declared type for the parameter represented by this parameter object.
java.lang.reflect.Parameter.hashCode(),returns a hash code based on the executable's hash code and the index.
java.lang.reflect.Parameter.isImplicit(),returns true if this parameter is implicitly declared in source code; returns false otherwise.
java.lang.reflect.Parameter.isNamePresent(),returns true if the parameter has a name according to the class file; returns false otherwise.
java.lang.reflect.Parameter.isSynthetic(),returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.
java.lang.reflect.Parameter.isVarArgs(),returns true if this parameter represents a variable argument list; returns false otherwise.
java.lang.reflect.Parameter.toString(),returns a string describing this parameter.
java.lang.reflect.Proxy.getInvocationHandler(java.lang.Object),returns the invocation handler for the specified proxy instance.
"java.lang.reflect.Proxy.getProxyClass(java.lang.ClassLoader,java.lang.Class<?>...)",returns the java.
java.lang.reflect.Proxy.isProxyClass(java.lang.Class<?>),returns true if and only if the specified class was dynamically generated to be a proxy class using the getproxyclass method or the newproxyinstance method.
"java.lang.reflect.Proxy.newProxyInstance(java.lang.ClassLoader,java.lang.Class<?>[],java.lang.reflect.InvocationHandler)",returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.
java.lang.reflect.InvocationTargetException.getCause(),"returns the cause of this exception (the thrown target exception, which may be null)."
java.lang.reflect.InvocationTargetException.getTargetException(),get the thrown target exception.
java.lang.reflect.UndeclaredThrowableException.getCause(),"returns the cause of this exception (the throwable instance wrapped in this undeclaredthrowableexception, which may be null)."
java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable(),"returns the throwable instance wrapped in this undeclaredthrowableexception, which may be null."
java.math.BigDecimal.abs(),"returns a bigdecimal whose value is the absolute value of this bigdecimal, and whose scale is this."
java.math.BigDecimal.abs(java.math.MathContext),"returns a bigdecimal whose value is the absolute value of this bigdecimal, with rounding according to the context settings."
java.math.BigDecimal.add(java.math.BigDecimal),"returns a bigdecimal whose value is (this + augend), and whose scale is max(this."
"java.math.BigDecimal.add(java.math.BigDecimal,java.math.MathContext)","returns a bigdecimal whose value is (this + augend), with rounding according to the context settings."
java.math.BigDecimal.byteValueExact(),"converts this bigdecimal to a byte, checking for lost information."
java.math.BigDecimal.compareTo(java.math.BigDecimal),compares this bigdecimal with the specified bigdecimal.
"java.math.BigDecimal.divide(java.math.BigDecimal,int,int)","returns a bigdecimal whose value is (this / divisor), and whose scale is as specified."
"java.math.BigDecimal.divide(java.math.BigDecimal,int,java.math.RoundingMode)","returns a bigdecimal whose value is (this / divisor), and whose scale is as specified."
"java.math.BigDecimal.divide(java.math.BigDecimal,int)","returns a bigdecimal whose value is (this / divisor), and whose scale is this."
"java.math.BigDecimal.divide(java.math.BigDecimal,java.math.RoundingMode)","returns a bigdecimal whose value is (this / divisor), and whose scale is this."
java.math.BigDecimal.divide(java.math.BigDecimal),"returns a bigdecimal whose value is (this / divisor), and whose preferred scale is (this."
"java.math.BigDecimal.divide(java.math.BigDecimal,java.math.MathContext)","returns a bigdecimal whose value is (this / divisor), with rounding according to the context settings."
java.math.BigDecimal.divideAndRemainder(java.math.BigDecimal),returns a two-element bigdecimal array containing the result of dividetointegralvalue followed by the result of remainder on the two operands.
"java.math.BigDecimal.divideAndRemainder(java.math.BigDecimal,java.math.MathContext)",returns a two-element bigdecimal array containing the result of dividetointegralvalue followed by the result of remainder on the two operands calculated with rounding according to the context settings.
java.math.BigDecimal.divideToIntegralValue(java.math.BigDecimal),returns a bigdecimal whose value is the integer part of the quotient (this / divisor) rounded down.
"java.math.BigDecimal.divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)",returns a bigdecimal whose value is the integer part of (this / divisor).
java.math.BigDecimal.doubleValue(),converts this bigdecimal to a double.
java.math.BigDecimal.equals(java.lang.Object),compares this bigdecimal with the specified object for equality.
java.math.BigDecimal.floatValue(),converts this bigdecimal to a float.
java.math.BigDecimal.hashCode(),returns the hash code for this bigdecimal.
java.math.BigDecimal.intValue(),converts this bigdecimal to an int.
java.math.BigDecimal.intValueExact(),"converts this bigdecimal to an int, checking for lost information."
java.math.BigDecimal.longValue(),converts this bigdecimal to a long.
java.math.BigDecimal.longValueExact(),"converts this bigdecimal to a long, checking for lost information."
java.math.BigDecimal.max(java.math.BigDecimal),returns the maximum of this bigdecimal and val.
java.math.BigDecimal.min(java.math.BigDecimal),returns the minimum of this bigdecimal and val.
java.math.BigDecimal.movePointLeft(int),returns a bigdecimal which is equivalent to this one with the decimal point moved n places to the left.
java.math.BigDecimal.movePointRight(int),returns a bigdecimal which is equivalent to this one with the decimal point moved n places to the right.
java.math.BigDecimal.multiply(java.math.BigDecimal),"returns a bigdecimal whose value is (this × multiplicand), and whose scale is (this."
"java.math.BigDecimal.multiply(java.math.BigDecimal,java.math.MathContext)","returns a bigdecimal whose value is (this × multiplicand), with rounding according to the context settings."
java.math.BigDecimal.negate(),"returns a bigdecimal whose value is (-this), and whose scale is this."
java.math.BigDecimal.negate(java.math.MathContext),"returns a bigdecimal whose value is (-this), with rounding according to the context settings."
java.math.BigDecimal.plus(),"returns a bigdecimal whose value is (+this), and whose scale is this."
java.math.BigDecimal.plus(java.math.MathContext),"returns a bigdecimal whose value is (+this), with rounding according to the context settings."
java.math.BigDecimal.pow(int),"returns a bigdecimal whose value is (thisn), the power is computed exactly, to unlimited precision."
"java.math.BigDecimal.pow(int,java.math.MathContext)",returns a bigdecimal whose value is (thisn).
java.math.BigDecimal.precision(),returns the precision of this bigdecimal.
java.math.BigDecimal.remainder(java.math.BigDecimal),returns a bigdecimal whose value is (this % divisor).
"java.math.BigDecimal.remainder(java.math.BigDecimal,java.math.MathContext)","returns a bigdecimal whose value is (this % divisor), with rounding according to the context settings."
java.math.BigDecimal.round(java.math.MathContext),returns a bigdecimal rounded according to the mathcontext settings.
java.math.BigDecimal.scale(),returns the scale of this bigdecimal.
java.math.BigDecimal.scaleByPowerOfTen(int),returns a bigdecimal whose numerical value is equal to (this * 10n).
"java.math.BigDecimal.setScale(int,java.math.RoundingMode)","returns a bigdecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this bigdecimal's unscaled value by the appropriate power of ten to maintain its overall value."
"java.math.BigDecimal.setScale(int,int)","returns a bigdecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this bigdecimal's unscaled value by the appropriate power of ten to maintain its overall value."
java.math.BigDecimal.setScale(int),"returns a bigdecimal whose scale is the specified value, and whose value is numerically equal to this bigdecimal's."
java.math.BigDecimal.shortValueExact(),"converts this bigdecimal to a short, checking for lost information."
java.math.BigDecimal.signum(),returns the signum function of this bigdecimal.
java.math.BigDecimal.stripTrailingZeros(),returns a bigdecimal which is numerically equal to this one but with any trailing zeros removed from the representation.
java.math.BigDecimal.subtract(java.math.BigDecimal),"returns a bigdecimal whose value is (this - subtrahend), and whose scale is max(this."
"java.math.BigDecimal.subtract(java.math.BigDecimal,java.math.MathContext)","returns a bigdecimal whose value is (this - subtrahend), with rounding according to the context settings."
java.math.BigDecimal.toBigInteger(),converts this bigdecimal to a biginteger.
java.math.BigDecimal.toBigIntegerExact(),"converts this bigdecimal to a biginteger, checking for lost information."
java.math.BigDecimal.toEngineeringString(),"returns a string representation of this bigdecimal, using engineering notation if an exponent is needed."
java.math.BigDecimal.toPlainString(),returns a string representation of this bigdecimal without an exponent field.
java.math.BigDecimal.toString(),"returns the string representation of this bigdecimal, using scientific notation if an exponent is needed."
java.math.BigDecimal.ulp(),"returns the size of an ulp, a unit in the last place, of this bigdecimal."
java.math.BigDecimal.unscaledValue(),returns a biginteger whose value is the unscaled value of this bigdecimal.
"java.math.BigDecimal.valueOf(long,int)",translates a long unscaled value and an int scale into a bigdecimal.
java.math.BigDecimal.valueOf(long),translates a long value into a bigdecimal with a scale of zero.
java.math.BigDecimal.valueOf(double),"translates a double into a bigdecimal, using the double's canonical string representation provided by the double."
java.math.BigInteger.abs(),returns a biginteger whose value is the absolute value of this biginteger.
java.math.BigInteger.add(java.math.BigInteger),returns a biginteger whose value is (this + val).
java.math.BigInteger.and(java.math.BigInteger),returns a biginteger whose value is (this & val).
java.math.BigInteger.andNot(java.math.BigInteger),returns a biginteger whose value is (this & ~val).
java.math.BigInteger.bitCount(),returns the number of bits in the two's complement representation of this biginteger that differ from its sign bit.
java.math.BigInteger.bitLength(),"returns the number of bits in the minimal two's-complement representation of this biginteger, excluding a sign bit."
java.math.BigInteger.byteValueExact(),"converts this biginteger to a byte, checking for lost information."
java.math.BigInteger.clearBit(int),returns a biginteger whose value is equivalent to this biginteger with the designated bit cleared.
java.math.BigInteger.compareTo(java.math.BigInteger),compares this biginteger with the specified biginteger.
java.math.BigInteger.divide(java.math.BigInteger),returns a biginteger whose value is (this / val).
java.math.BigInteger.divideAndRemainder(java.math.BigInteger),returns an array of two bigintegers containing (this / val) followed by (this % val).
java.math.BigInteger.doubleValue(),converts this biginteger to a double.
java.math.BigInteger.equals(java.lang.Object),compares this biginteger with the specified object for equality.
java.math.BigInteger.flipBit(int),returns a biginteger whose value is equivalent to this biginteger with the designated bit flipped.
java.math.BigInteger.floatValue(),converts this biginteger to a float.
java.math.BigInteger.gcd(java.math.BigInteger),returns a biginteger whose value is the greatest common divisor of abs(this) and abs(val).
java.math.BigInteger.getLowestSetBit(),returns the index of the rightmost (lowest-order) one bit in this biginteger (the number of zero bits to the right of the rightmost one bit).
java.math.BigInteger.hashCode(),returns the hash code for this biginteger.
java.math.BigInteger.intValue(),converts this biginteger to an int.
java.math.BigInteger.intValueExact(),"converts this biginteger to an int, checking for lost information."
java.math.BigInteger.isProbablePrime(int),"returns true if this biginteger is probably prime, false if it's definitely composite."
java.math.BigInteger.longValue(),converts this biginteger to a long.
java.math.BigInteger.longValueExact(),"converts this biginteger to a long, checking for lost information."
java.math.BigInteger.max(java.math.BigInteger),returns the maximum of this biginteger and val.
java.math.BigInteger.min(java.math.BigInteger),returns the minimum of this biginteger and val.
java.math.BigInteger.mod(java.math.BigInteger),returns a biginteger whose value is (this mod m).
java.math.BigInteger.modInverse(java.math.BigInteger),returns a biginteger whose value is (this-1 mod m).
"java.math.BigInteger.modPow(java.math.BigInteger,java.math.BigInteger)",returns a biginteger whose value is (thisexponent mod m).
java.math.BigInteger.multiply(java.math.BigInteger),returns a biginteger whose value is (this * val).
java.math.BigInteger.negate(),returns a biginteger whose value is (-this).
java.math.BigInteger.nextProbablePrime(),returns the first integer greater than this biginteger that is probably prime.
java.math.BigInteger.not(),returns a biginteger whose value is (~this).
java.math.BigInteger.or(java.math.BigInteger),returns a biginteger whose value is (this | val).
java.math.BigInteger.pow(int),returns a biginteger whose value is (thisexponent).
"java.math.BigInteger.probablePrime(int,java.util.Random)","returns a positive biginteger that is probably prime, with the specified bitlength."
java.math.BigInteger.remainder(java.math.BigInteger),returns a biginteger whose value is (this % val).
java.math.BigInteger.setBit(int),returns a biginteger whose value is equivalent to this biginteger with the designated bit set.
java.math.BigInteger.shiftLeft(int),returns a biginteger whose value is (this << n).
java.math.BigInteger.shiftRight(int),returns a biginteger whose value is (this >> n).
java.math.BigInteger.shortValueExact(),"converts this biginteger to a short, checking for lost information."
java.math.BigInteger.signum(),returns the signum function of this biginteger.
java.math.BigInteger.subtract(java.math.BigInteger),returns a biginteger whose value is (this - val).
java.math.BigInteger.testBit(int),returns true if and only if the designated bit is set.
java.math.BigInteger.toByteArray(),returns a byte array containing the two's-complement representation of this biginteger.
java.math.BigInteger.toString(int),returns the string representation of this biginteger in the given radix.
java.math.BigInteger.toString(),returns the decimal string representation of this biginteger.
java.math.BigInteger.valueOf(long),returns a biginteger whose value is equal to that of the specified long.
java.math.BigInteger.xor(java.math.BigInteger),returns a biginteger whose value is (this ^ val).
java.math.MathContext.equals(java.lang.Object),compares this mathcontext with the specified object for equality.
java.math.MathContext.getPrecision(),returns the precision setting.
java.math.MathContext.getRoundingMode(),returns the roundingmode setting.
java.math.MathContext.hashCode(),returns the hash code for this mathcontext.
java.math.MathContext.toString(),returns the string representation of this mathcontext.
java.math.RoundingMode.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.math.RoundingMode.valueOf(int),returns the roundingmode object corresponding to a legacy integer rounding mode constant in bigdecimal.
java.math.RoundingMode.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.net.ContentHandlerFactory.createContentHandler(java.lang.String),creates a new contenthandler to read an object from a urlstreamhandler.
"java.net.CookiePolicy.shouldAccept(java.net.URI,java.net.HttpCookie)",will be called to see whether or not this cookie should be accepted.
"java.net.CookieStore.add(java.net.URI,java.net.HttpCookie)",adds one http cookie to the store.
java.net.CookieStore.get(java.net.URI),"retrieve cookies associated with given uri, or whose domain matches the given uri."
java.net.CookieStore.getCookies(),get all not-expired cookies in cookie store.
java.net.CookieStore.getURIs(),get all uris which identify the cookies in this cookie store.
"java.net.CookieStore.remove(java.net.URI,java.net.HttpCookie)",remove a cookie from store.
java.net.CookieStore.removeAll(),remove all cookies in this cookie store.
java.net.DatagramSocketImplFactory.createDatagramSocketImpl(),creates a new datagramsocketimpl instance.
java.net.FileNameMap.getContentTypeFor(java.lang.String),gets the mime type for the specified file name.
java.net.ProtocolFamily.name(),returns the name of the protocol family.
java.net.SocketImplFactory.createSocketImpl(),creates a new socketimpl instance.
java.net.SocketOption.name(),returns the name of the socket option.
java.net.SocketOption.type(),returns the type of the socket option value.
java.net.SocketOptions.getOption(int),fetch the value of an option.
"java.net.SocketOptions.setOption(int,java.lang.Object)",enable/disable the option specified by optid.
java.net.URLStreamHandlerFactory.createURLStreamHandler(java.lang.String),creates a new urlstreamhandler instance with the specified protocol.
java.net.Authenticator.getPasswordAuthentication(),called when password authorization is needed.
java.net.Authenticator.getRequestingHost(),"gets the hostname of the site or proxy requesting authentication, or null if not available."
java.net.Authenticator.getRequestingPort(),gets the port number for the requested connection.
java.net.Authenticator.getRequestingPrompt(),gets the prompt string given by the requestor.
java.net.Authenticator.getRequestingProtocol(),give the protocol that's requesting the connection.
java.net.Authenticator.getRequestingScheme(),"gets the scheme of the requestor (the http scheme for an http firewall, for example)."
java.net.Authenticator.getRequestingSite(),"gets the inetaddress of the site requesting authorization, or null if not available."
java.net.Authenticator.getRequestingURL(),returns the url that resulted in this request for authentication.
java.net.Authenticator.getRequestorType(),returns whether the requestor is a proxy or a server.
"java.net.Authenticator.requestPasswordAuthentication(java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)",ask the authenticator that has been registered with the system for a password.
"java.net.Authenticator.requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)",ask the authenticator that has been registered with the system for a password.
"java.net.Authenticator.requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator.RequestorType)",ask the authenticator that has been registered with the system for a password.
java.net.Authenticator.setDefault(java.net.Authenticator),sets the authenticator that will be used by the networking code when a proxy or an http server asks for authentication.
java.net.CacheRequest.abort(),aborts the attempt to cache the response.
java.net.CacheRequest.getBody(),returns an outputstream to which the response body can be written.
java.net.CacheResponse.getBody(),returns the response body as an inputstream.
java.net.CacheResponse.getHeaders(),returns the response headers as a map.
java.net.ContentHandler.getContent(java.net.URLConnection),"given a url connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object from it."
"java.net.ContentHandler.getContent(java.net.URLConnection,java.lang.Class[])","given a url connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object that matches one of the types specified."
"java.net.CookieHandler.get(java.net.URI,,java.util.List<java.lang.String>>)",gets all the applicable cookies from a cookie cache for the specified uri in the request header.
java.net.CookieHandler.getDefault(),gets the system-wide cookie handler.
"java.net.CookieHandler.put(java.net.URI,,java.util.List<java.lang.String>>)","sets all the applicable cookies, examples are response header fields that are named set-cookie2, present in the response headers into a cookie cache."
java.net.CookieHandler.setDefault(java.net.CookieHandler),sets (or unsets) the system-wide cookie handler.
java.net.CookieManager.getCookieStore(),to retrieve current cookie store.
java.net.CookieManager.setCookiePolicy(java.net.CookiePolicy),to set the cookie policy of this cookie manager.
java.net.DatagramPacket.getAddress(),returns the ip address of the machine to which this datagram is being sent or from which the datagram was received.
java.net.DatagramPacket.getData(),returns the data buffer.
java.net.DatagramPacket.getLength(),returns the length of the data to be sent or the length of the data received.
java.net.DatagramPacket.getOffset(),returns the offset of the data to be sent or the offset of the data received.
java.net.DatagramPacket.getPort(),returns the port number on the remote host to which this datagram is being sent or from which the datagram was received.
java.net.DatagramPacket.getSocketAddress(),gets the socketaddress (usually ip address + port number) of the remote host that this packet is being sent to or is coming from.
java.net.DatagramPacket.setAddress(java.net.InetAddress),sets the ip address of the machine to which this datagram is being sent.
"java.net.DatagramPacket.setData(byte[],int,int)",set the data buffer for this packet.
java.net.DatagramPacket.setData(byte[]),set the data buffer for this packet.
java.net.DatagramPacket.setLength(int),set the length for this packet.
java.net.DatagramPacket.setPort(int),sets the port number on the remote host to which this datagram is being sent.
java.net.DatagramPacket.setSocketAddress(java.net.SocketAddress),sets the socketaddress (usually ip address + port number) of the remote host to which this datagram is being sent.
java.net.DatagramSocket.bind(java.net.SocketAddress),binds this datagramsocket to a specific address and port.
java.net.DatagramSocket.close(),closes this datagram socket.
"java.net.DatagramSocket.connect(java.net.InetAddress,int)",connects the socket to a remote address for this socket.
java.net.DatagramSocket.connect(java.net.SocketAddress),connects this socket to a remote socket address (ip address + port number).
java.net.DatagramSocket.disconnect(),disconnects the socket.
java.net.DatagramSocket.getBroadcast(),tests if so_broadcast is enabled.
java.net.DatagramSocket.getChannel(),"returns the unique datagramchannel object associated with this datagram socket, if any."
java.net.DatagramSocket.getInetAddress(),returns the address to which this socket is connected.
java.net.DatagramSocket.getLocalAddress(),gets the local address to which the socket is bound.
java.net.DatagramSocket.getLocalPort(),returns the port number on the local host to which this socket is bound.
java.net.DatagramSocket.getLocalSocketAddress(),returns the address of the endpoint this socket is bound to.
java.net.DatagramSocket.getPort(),returns the port number to which this socket is connected.
java.net.DatagramSocket.getReceiveBufferSize(),"get value of the so_rcvbuf option for this datagramsocket, that is the buffer size used by the platform for input on this datagramsocket."
java.net.DatagramSocket.getRemoteSocketAddress(),"returns the address of the endpoint this socket is connected to, or null if it is unconnected."
java.net.DatagramSocket.getReuseAddress(),tests if so_reuseaddr is enabled.
java.net.DatagramSocket.getSendBufferSize(),"get value of the so_sndbuf option for this datagramsocket, that is the buffer size used by the platform for output on this datagramsocket."
java.net.DatagramSocket.getSoTimeout(),retrieve setting for so_timeout.
java.net.DatagramSocket.getTrafficClass(),gets traffic class or type-of-service in the ip datagram header for packets sent from this datagramsocket.
java.net.DatagramSocket.isBound(),returns the binding state of the socket.
java.net.DatagramSocket.isClosed(),returns whether the socket is closed or not.
java.net.DatagramSocket.isConnected(),returns the connection state of the socket.
java.net.DatagramSocket.receive(java.net.DatagramPacket),receives a datagram packet from this socket.
java.net.DatagramSocket.send(java.net.DatagramPacket),sends a datagram packet from this socket.
java.net.DatagramSocket.setBroadcast(boolean),enable/disable so_broadcast.
java.net.DatagramSocket.setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory),sets the datagram socket implementation factory for the application.
java.net.DatagramSocket.setReceiveBufferSize(int),sets the so_rcvbuf option to the specified value for this datagramsocket.
java.net.DatagramSocket.setReuseAddress(boolean),enable/disable the so_reuseaddr socket option.
java.net.DatagramSocket.setSendBufferSize(int),sets the so_sndbuf option to the specified value for this datagramsocket.
java.net.DatagramSocket.setSoTimeout(int),"enable/disable so_timeout with the specified timeout, in milliseconds."
java.net.DatagramSocket.setTrafficClass(int),sets traffic class or type-of-service octet in the ip datagram header for datagrams sent from this datagramsocket.
"java.net.DatagramSocketImpl.bind(int,java.net.InetAddress)",binds a datagram socket to a local port and address.
java.net.DatagramSocketImpl.close(),close the socket.
"java.net.DatagramSocketImpl.connect(java.net.InetAddress,int)",connects a datagram socket to a remote destination.
java.net.DatagramSocketImpl.create(),creates a datagram socket.
java.net.DatagramSocketImpl.disconnect(),disconnects a datagram socket from its remote destination.
java.net.DatagramSocketImpl.getFileDescriptor(),gets the datagram socket file descriptor.
java.net.DatagramSocketImpl.getLocalPort(),gets the local port.
java.net.DatagramSocketImpl.getTimeToLive(),retrieve the ttl (time-to-live) option.
java.net.DatagramSocketImpl.join(java.net.InetAddress),join the multicast group.
"java.net.DatagramSocketImpl.joinGroup(java.net.SocketAddress,java.net.NetworkInterface)",join the multicast group.
java.net.DatagramSocketImpl.leave(java.net.InetAddress),leave the multicast group.
"java.net.DatagramSocketImpl.leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)",leave the multicast group.
java.net.DatagramSocketImpl.peek(java.net.InetAddress),peek at the packet to see who it is from.
java.net.DatagramSocketImpl.peekData(java.net.DatagramPacket),peek at the packet to see who it is from.
java.net.DatagramSocketImpl.receive(java.net.DatagramPacket),receive the datagram packet.
java.net.DatagramSocketImpl.send(java.net.DatagramPacket),sends a datagram packet.
java.net.DatagramSocketImpl.setTimeToLive(int),set the ttl (time-to-live) option.
java.net.HttpCookie.clone(),create and return a copy of this object.
"java.net.HttpCookie.domainMatches(java.lang.String,java.lang.String)",the utility method to check whether a host name is in a domain or not.
java.net.HttpCookie.equals(java.lang.Object),test the equality of two http cookies.
java.net.HttpCookie.getComment(),"returns the comment describing the purpose of this cookie, or null if the cookie has no comment."
java.net.HttpCookie.getCommentURL(),"returns the comment url describing the purpose of this cookie, or null if the cookie has no comment url."
java.net.HttpCookie.getDiscard(),returns the discard attribute of the cookie.
java.net.HttpCookie.getDomain(),returns the domain name set for this cookie.
java.net.HttpCookie.getMaxAge(),"returns the maximum age of the cookie, specified in seconds."
java.net.HttpCookie.getName(),returns the name of the cookie.
java.net.HttpCookie.getPath(),returns the path on the server to which the browser returns this cookie.
java.net.HttpCookie.getPortlist(),returns the port list attribute of the cookie.
java.net.HttpCookie.getSecure(),"returns true if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol."
java.net.HttpCookie.getValue(),returns the value of the cookie.
java.net.HttpCookie.getVersion(),returns the version of the protocol this cookie complies with.
java.net.HttpCookie.hasExpired(),reports whether this http cookie has expired or not.
java.net.HttpCookie.hashCode(),returns the hash code of this http cookie.
java.net.HttpCookie.isHttpOnly(),returns true if this cookie contains the httponly attribute.
java.net.HttpCookie.parse(java.lang.String),constructs cookies from set-cookie or set-cookie2 header string.
java.net.HttpCookie.setComment(java.lang.String),specifies a comment that describes a cookie's purpose.
java.net.HttpCookie.setCommentURL(java.lang.String),specifies a comment url that describes a cookie's purpose.
java.net.HttpCookie.setDiscard(boolean),specify whether user agent should discard the cookie unconditionally.
java.net.HttpCookie.setDomain(java.lang.String),specifies the domain within which this cookie should be presented.
java.net.HttpCookie.setHttpOnly(boolean),indicates whether the cookie should be considered http only.
java.net.HttpCookie.setMaxAge(long),sets the maximum age of the cookie in seconds.
java.net.HttpCookie.setPath(java.lang.String),specifies a path for the cookie to which the client should return the cookie.
java.net.HttpCookie.setPortlist(java.lang.String),"specify the portlist of the cookie, which restricts the port(s) to which a cookie may be sent back in a cookie header."
java.net.HttpCookie.setSecure(boolean),"indicates whether the cookie should only be sent using a secure protocol, such as https or ssl."
java.net.HttpCookie.setValue(java.lang.String),assigns a new value to a cookie after the cookie is created.
java.net.HttpCookie.setVersion(int),sets the version of the cookie protocol this cookie complies with.
java.net.HttpCookie.toString(),"constructs a cookie header string representation of this cookie, which is in the format defined by corresponding cookie specification, but without the leading ""cookie:"" token."
java.net.HttpURLConnection.disconnect(),indicates that other requests to the server are unlikely in the near future.
java.net.HttpURLConnection.getErrorStream(),returns the error stream if the connection failed but the server sent useful data nonetheless.
java.net.HttpURLConnection.getFollowRedirects(),returns a boolean indicating whether or not http redirects (3xx) should be automatically followed.
java.net.HttpURLConnection.getHeaderField(int),returns the value for the nth header field.
java.net.HttpURLConnection.getHeaderFieldKey(int),returns the key for the nth header field.
java.net.HttpURLConnection.getInstanceFollowRedirects(),returns the value of this httpurlconnection's instancefollowredirects field.
java.net.HttpURLConnection.getPermission(),returns a socketpermission object representing the permission necessary to connect to the destination host and port.
java.net.HttpURLConnection.getRequestMethod(),get the request method.
java.net.HttpURLConnection.getResponseCode(),gets the status code from an http response message.
java.net.HttpURLConnection.getResponseMessage(),"gets the http response message, if any, returned along with the response code from a server."
java.net.HttpURLConnection.setChunkedStreamingMode(int),"this method is used to enable streaming of a http request body without internal buffering, when the content length is not known in advance."
java.net.HttpURLConnection.setFixedLengthStreamingMode(int),"this method is used to enable streaming of a http request body without internal buffering, when the content length is known in advance."
java.net.HttpURLConnection.setFixedLengthStreamingMode(long),"this method is used to enable streaming of a http request body without internal buffering, when the content length is known in advance."
java.net.HttpURLConnection.setFollowRedirects(boolean),sets whether http redirects (requests with response code 3xx) should be automatically followed by this class.
java.net.HttpURLConnection.setInstanceFollowRedirects(boolean),sets whether http redirects (requests with response code 3xx) should be automatically followed by this httpurlconnection instance.
java.net.HttpURLConnection.setRequestMethod(java.lang.String),"set the method for the url request, one of:
get post head options put delete trace are legal, subject to protocol restrictions."
java.net.HttpURLConnection.usingProxy(),indicates if the connection is going through a proxy.
"java.net.IDN.toASCII(java.lang.String,int)","translates a string from unicode to ascii compatible encoding (ace), as defined by the toascii operation of rfc 3490."
java.net.IDN.toASCII(java.lang.String),"translates a string from unicode to ascii compatible encoding (ace), as defined by the toascii operation of rfc 3490."
"java.net.IDN.toUnicode(java.lang.String,int)","translates a string from ascii compatible encoding (ace) to unicode, as defined by the tounicode operation of rfc 3490."
java.net.IDN.toUnicode(java.lang.String),"translates a string from ascii compatible encoding (ace) to unicode, as defined by the tounicode operation of rfc 3490."
java.net.Inet4Address.equals(java.lang.Object),compares this object against the specified object.
java.net.Inet4Address.getAddress(),returns the raw ip address of this inetaddress object.
java.net.Inet4Address.getHostAddress(),returns the ip address string in textual presentation form.
java.net.Inet4Address.hashCode(),returns a hashcode for this ip address.
java.net.Inet4Address.isAnyLocalAddress(),utility routine to check if the inetaddress in a wildcard address.
java.net.Inet4Address.isLinkLocalAddress(),utility routine to check if the inetaddress is an link local address.
java.net.Inet4Address.isLoopbackAddress(),utility routine to check if the inetaddress is a loopback address.
java.net.Inet4Address.isMCGlobal(),utility routine to check if the multicast address has global scope.
java.net.Inet4Address.isMCLinkLocal(),utility routine to check if the multicast address has link scope.
java.net.Inet4Address.isMCNodeLocal(),utility routine to check if the multicast address has node scope.
java.net.Inet4Address.isMCOrgLocal(),utility routine to check if the multicast address has organization scope.
java.net.Inet4Address.isMCSiteLocal(),utility routine to check if the multicast address has site scope.
java.net.Inet4Address.isMulticastAddress(),utility routine to check if the inetaddress is an ip multicast address.
java.net.Inet4Address.isSiteLocalAddress(),utility routine to check if the inetaddress is a site local address.
java.net.Inet6Address.equals(java.lang.Object),compares this object against the specified object.
java.net.Inet6Address.getAddress(),returns the raw ip address of this inetaddress object.
"java.net.Inet6Address.getByAddress(java.lang.String,byte[],java.net.NetworkInterface)",create an inet6address in the exact manner of inetaddress.
"java.net.Inet6Address.getByAddress(java.lang.String,byte[],int)",create an inet6address in the exact manner of inetaddress.
java.net.Inet6Address.getHostAddress(),returns the ip address string in textual presentation.
java.net.Inet6Address.getScopedInterface(),"returns the scoped interface, if this instance was created with with a scoped interface."
java.net.Inet6Address.getScopeId(),"returns the numeric scopeid, if this instance is associated with an interface."
java.net.Inet6Address.hashCode(),returns a hashcode for this ip address.
java.net.Inet6Address.isAnyLocalAddress(),utility routine to check if the inetaddress in a wildcard address.
java.net.Inet6Address.isIPv4CompatibleAddress(),utility routine to check if the inetaddress is an ipv4 compatible ipv6 address.
java.net.Inet6Address.isLinkLocalAddress(),utility routine to check if the inetaddress is an link local address.
java.net.Inet6Address.isLoopbackAddress(),utility routine to check if the inetaddress is a loopback address.
java.net.Inet6Address.isMCGlobal(),utility routine to check if the multicast address has global scope.
java.net.Inet6Address.isMCLinkLocal(),utility routine to check if the multicast address has link scope.
java.net.Inet6Address.isMCNodeLocal(),utility routine to check if the multicast address has node scope.
java.net.Inet6Address.isMCOrgLocal(),utility routine to check if the multicast address has organization scope.
java.net.Inet6Address.isMCSiteLocal(),utility routine to check if the multicast address has site scope.
java.net.Inet6Address.isMulticastAddress(),utility routine to check if the inetaddress is an ip multicast address.
java.net.Inet6Address.isSiteLocalAddress(),utility routine to check if the inetaddress is a site local address.
java.net.InetAddress.equals(java.lang.Object),compares this object against the specified object.
java.net.InetAddress.getAddress(),returns the raw ip address of this inetaddress object.
java.net.InetAddress.getAllByName(java.lang.String),"given the name of a host, returns an array of its ip addresses, based on the configured name service on the system."
"java.net.InetAddress.getByAddress(java.lang.String,byte[])",creates an inetaddress based on the provided host name and ip address.
java.net.InetAddress.getByAddress(byte[]),returns an inetaddress object given the raw ip address .
java.net.InetAddress.getByName(java.lang.String),"determines the ip address of a host, given the host's name."
java.net.InetAddress.getCanonicalHostName(),gets the fully qualified domain name for this ip address.
java.net.InetAddress.getHostAddress(),returns the ip address string in textual presentation.
java.net.InetAddress.getHostName(),gets the host name for this ip address.
java.net.InetAddress.getLocalHost(),returns the address of the local host.
java.net.InetAddress.getLoopbackAddress(),returns the loopback address.
java.net.InetAddress.hashCode(),returns a hashcode for this ip address.
java.net.InetAddress.isAnyLocalAddress(),utility routine to check if the inetaddress in a wildcard address.
java.net.InetAddress.isLinkLocalAddress(),utility routine to check if the inetaddress is an link local address.
java.net.InetAddress.isLoopbackAddress(),utility routine to check if the inetaddress is a loopback address.
java.net.InetAddress.isMCGlobal(),utility routine to check if the multicast address has global scope.
java.net.InetAddress.isMCLinkLocal(),utility routine to check if the multicast address has link scope.
java.net.InetAddress.isMCNodeLocal(),utility routine to check if the multicast address has node scope.
java.net.InetAddress.isMCOrgLocal(),utility routine to check if the multicast address has organization scope.
java.net.InetAddress.isMCSiteLocal(),utility routine to check if the multicast address has site scope.
java.net.InetAddress.isMulticastAddress(),utility routine to check if the inetaddress is an ip multicast address.
java.net.InetAddress.isReachable(int),test whether that address is reachable.
"java.net.InetAddress.isReachable(java.net.NetworkInterface,int,int)",test whether that address is reachable.
java.net.InetAddress.isSiteLocalAddress(),utility routine to check if the inetaddress is a site local address.
java.net.InetAddress.toString(),converts this ip address to a string.
"java.net.InetSocketAddress.createUnresolved(java.lang.String,int)",creates an unresolved socket address from a hostname and a port number.
java.net.InetSocketAddress.equals(java.lang.Object),compares this object against the specified object.
java.net.InetSocketAddress.getAddress(),gets the inetaddress.
java.net.InetSocketAddress.getHostName(),gets the hostname.
java.net.InetSocketAddress.getHostString(),"returns the hostname, or the string form of the address if it doesn't have a hostname (it was created using a literal)."
java.net.InetSocketAddress.getPort(),gets the port number.
java.net.InetSocketAddress.hashCode(),returns a hashcode for this socket address.
java.net.InetSocketAddress.isUnresolved(),checks whether the address has been resolved or not.
java.net.InetSocketAddress.toString(),constructs a string representation of this inetsocketaddress.
java.net.InterfaceAddress.equals(java.lang.Object),compares this object against the specified object.
java.net.InterfaceAddress.getAddress(),returns an inetaddress for this address.
java.net.InterfaceAddress.getBroadcast(),returns an inetaddress for the broadcast address for this interfaceaddress.
java.net.InterfaceAddress.getNetworkPrefixLength(),returns the network prefix length for this address.
java.net.InterfaceAddress.hashCode(),returns a hashcode for this interface address.
java.net.InterfaceAddress.toString(),converts this interface address to a string.
java.net.JarURLConnection.getAttributes(),"return the attributes object for this connection if the url for it points to a jar file entry, null otherwise."
java.net.JarURLConnection.getCertificates(),"return the certificate object for this connection if the url for it points to a jar file entry, null otherwise."
java.net.JarURLConnection.getEntryName(),return the entry name for this connection.
java.net.JarURLConnection.getJarEntry(),"return the jar entry object for this connection, if any."
java.net.JarURLConnection.getJarFile(),return the jar file for this connection.
java.net.JarURLConnection.getJarFileURL(),returns the url for the jar file for this connection.
java.net.JarURLConnection.getMainAttributes(),returns the main attributes for the jar file for this connection.
java.net.JarURLConnection.getManifest(),"returns the manifest for this connection, or null if none."
java.net.MulticastSocket.getInterface(),retrieve the address of the network interface used for multicast packets.
java.net.MulticastSocket.getLoopbackMode(),get the setting for local loopback of multicast datagrams.
java.net.MulticastSocket.getNetworkInterface(),get the multicast network interface set.
java.net.MulticastSocket.getTimeToLive(),get the default time-to-live for multicast packets sent out on the socket.
java.net.MulticastSocket.joinGroup(java.net.InetAddress),joins a multicast group.
"java.net.MulticastSocket.joinGroup(java.net.SocketAddress,java.net.NetworkInterface)",joins the specified multicast group at the specified interface.
java.net.MulticastSocket.leaveGroup(java.net.InetAddress),leave a multicast group.
"java.net.MulticastSocket.leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)",leave a multicast group on a specified local interface.
java.net.MulticastSocket.setInterface(java.net.InetAddress),set the multicast network interface used by methods whose behavior would be affected by the value of the network interface.
java.net.MulticastSocket.setLoopbackMode(boolean),disable/enable local loopback of multicast datagrams the option is used by the platform's networking code as a hint for setting whether multicast data will be looped back to the local socket.
java.net.MulticastSocket.setNetworkInterface(java.net.NetworkInterface),specify the network interface for outgoing multicast datagrams sent on this socket.
java.net.MulticastSocket.setTimeToLive(int),set the default time-to-live for multicast packets sent out on this multicastsocket in order to control the scope of the multicasts.
java.net.NetworkInterface.equals(java.lang.Object),compares this object against the specified object.
java.net.NetworkInterface.getByIndex(int),get a network interface given its index.
java.net.NetworkInterface.getByInetAddress(java.net.InetAddress),convenience method to search for a network interface that has the specified internet protocol (ip) address bound to it.
java.net.NetworkInterface.getByName(java.lang.String),searches for the network interface with the specified name.
java.net.NetworkInterface.getDisplayName(),get the display name of this network interface.
java.net.NetworkInterface.getHardwareAddress(),returns the hardware address (usually mac) of the interface if it has one and if it can be accessed given the current privileges.
java.net.NetworkInterface.getIndex(),returns the index of this network interface.
java.net.NetworkInterface.getInetAddresses(),convenience method to return an enumeration with all or a subset of the inetaddresses bound to this network interface.
java.net.NetworkInterface.getInterfaceAddresses(),get a list of all or a subset of the interfaceaddresses of this network interface.
java.net.NetworkInterface.getMTU(),returns the maximum transmission unit (mtu) of this interface.
java.net.NetworkInterface.getName(),get the name of this network interface.
java.net.NetworkInterface.getNetworkInterfaces(),returns all the interfaces on this machine.
java.net.NetworkInterface.getParent(),"returns the parent networkinterface of this interface if this is a subinterface, or null if it is a physical (non virtual) interface or has no parent."
java.net.NetworkInterface.getSubInterfaces(),get an enumeration with all the subinterfaces (also known as virtual interfaces) attached to this network interface.
java.net.NetworkInterface.isLoopback(),returns whether a network interface is a loopback interface.
java.net.NetworkInterface.isPointToPoint(),returns whether a network interface is a point to point interface.
java.net.NetworkInterface.isUp(),returns whether a network interface is up and running.
java.net.NetworkInterface.isVirtual(),returns whether this interface is a virtual interface (also called subinterface).
java.net.NetworkInterface.supportsMulticast(),returns whether a network interface supports multicasting or not.
java.net.PasswordAuthentication.getPassword(),returns the user password.
java.net.PasswordAuthentication.getUserName(),returns the user name.
java.net.Proxy.address(),"returns the socket address of the proxy, or null if its a direct connection."
java.net.Proxy.equals(java.lang.Object),compares this object against the specified object.
java.net.Proxy.hashCode(),returns a hashcode for this proxy.
java.net.Proxy.toString(),constructs a string representation of this proxy.
java.net.Proxy.type(),returns the proxy type.
"java.net.ProxySelector.connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)",called to indicate that a connection could not be established to a proxy/socks server.
java.net.ProxySelector.getDefault(),gets the system-wide proxy selector.
java.net.ProxySelector.select(java.net.URI),selects all the applicable proxies based on the protocol to access the resource with and a destination address to access the resource at.
java.net.ProxySelector.setDefault(java.net.ProxySelector),sets (or unsets) the system-wide proxy selector.
"java.net.ResponseCache.get(java.net.URI,java.lang.String,,java.util.List<java.lang.String>>)","retrieve the cached response based on the requesting uri, request method and request headers."
java.net.ResponseCache.getDefault(),gets the system-wide response cache.
"java.net.ResponseCache.put(java.net.URI,java.net.URLConnection)","the protocol handler calls this method after a resource has been retrieved, and the responsecache must decide whether or not to store the resource in its cache."
java.net.ResponseCache.setDefault(java.net.ResponseCache),sets (or unsets) the system-wide cache.
java.net.SecureCacheResponse.getCipherSuite(),returns the cipher suite in use on the original connection that retrieved the network resource.
java.net.SecureCacheResponse.getLocalCertificateChain(),returns the certificate chain that were sent to the server during handshaking of the original connection that retrieved the network resource.
java.net.SecureCacheResponse.getLocalPrincipal(),returns the principal that was sent to the server during handshaking in the original connection that retrieved the network resource.
java.net.SecureCacheResponse.getPeerPrincipal(),returns the server's principal which was established as part of defining the session during the original connection that retrieved the network resource.
java.net.SecureCacheResponse.getServerCertificateChain(),"returns the server's certificate chain, which was established as part of defining the session in the original connection that retrieved the network resource, from cache."
java.net.ServerSocket.accept(),listens for a connection to be made to this socket and accepts it.
java.net.ServerSocket.bind(java.net.SocketAddress),binds the serversocket to a specific address (ip address and port number).
"java.net.ServerSocket.bind(java.net.SocketAddress,int)",binds the serversocket to a specific address (ip address and port number).
java.net.ServerSocket.close(),closes this socket.
java.net.ServerSocket.getChannel(),"returns the unique serversocketchannel object associated with this socket, if any."
java.net.ServerSocket.getInetAddress(),returns the local address of this server socket.
java.net.ServerSocket.getLocalPort(),returns the port number on which this socket is listening.
java.net.ServerSocket.getLocalSocketAddress(),returns the address of the endpoint this socket is bound to.
java.net.ServerSocket.getReceiveBufferSize(),"gets the value of the so_rcvbuf option for this serversocket, that is the proposed buffer size that will be used for sockets accepted from this serversocket."
java.net.ServerSocket.getReuseAddress(),tests if so_reuseaddr is enabled.
java.net.ServerSocket.getSoTimeout(),retrieve setting for so_timeout.
java.net.ServerSocket.implAccept(java.net.Socket),subclasses of serversocket use this method to override accept() to return their own subclass of socket.
java.net.ServerSocket.isBound(),returns the binding state of the serversocket.
java.net.ServerSocket.isClosed(),returns the closed state of the serversocket.
"java.net.ServerSocket.setPerformancePreferences(int,int,int)",sets performance preferences for this serversocket.
java.net.ServerSocket.setReceiveBufferSize(int),sets a default proposed value for the so_rcvbuf option for sockets accepted from this serversocket.
java.net.ServerSocket.setReuseAddress(boolean),enable/disable the so_reuseaddr socket option.
java.net.ServerSocket.setSocketFactory(java.net.SocketImplFactory),sets the server socket implementation factory for the application.
java.net.ServerSocket.setSoTimeout(int),"enable/disable so_timeout with the specified timeout, in milliseconds."
java.net.ServerSocket.toString(),returns the implementation address and implementation port of this socket as a string.
java.net.Socket.bind(java.net.SocketAddress),binds the socket to a local address.
java.net.Socket.close(),closes this socket.
java.net.Socket.connect(java.net.SocketAddress),connects this socket to the server.
"java.net.Socket.connect(java.net.SocketAddress,int)",connects this socket to the server with a specified timeout value.
java.net.Socket.getChannel(),"returns the unique socketchannel object associated with this socket, if any."
java.net.Socket.getInetAddress(),returns the address to which the socket is connected.
java.net.Socket.getInputStream(),returns an input stream for this socket.
java.net.Socket.getKeepAlive(),tests if so_keepalive is enabled.
java.net.Socket.getLocalAddress(),gets the local address to which the socket is bound.
java.net.Socket.getLocalPort(),returns the local port number to which this socket is bound.
java.net.Socket.getLocalSocketAddress(),returns the address of the endpoint this socket is bound to.
java.net.Socket.getOOBInline(),tests if so_oobinline is enabled.
java.net.Socket.getOutputStream(),returns an output stream for this socket.
java.net.Socket.getPort(),returns the remote port number to which this socket is connected.
java.net.Socket.getReceiveBufferSize(),"gets the value of the so_rcvbuf option for this socket, that is the buffer size used by the platform for input on this socket."
java.net.Socket.getRemoteSocketAddress(),"returns the address of the endpoint this socket is connected to, or null if it is unconnected."
java.net.Socket.getReuseAddress(),tests if so_reuseaddr is enabled.
java.net.Socket.getSendBufferSize(),"get value of the so_sndbuf option for this socket, that is the buffer size used by the platform for output on this socket."
java.net.Socket.getSoLinger(),returns setting for so_linger.
java.net.Socket.getSoTimeout(),returns setting for so_timeout.
java.net.Socket.getTcpNoDelay(),tests if tcp_nodelay is enabled.
java.net.Socket.getTrafficClass(),"gets traffic class or type-of-service in the ip header for packets sent from this socket
as the underlying network implementation may ignore the traffic class or type-of-service set using settrafficclass(int) this method may return a different value than was previously set using the settrafficclass(int) method on this socket."
java.net.Socket.isBound(),returns the binding state of the socket.
java.net.Socket.isClosed(),returns the closed state of the socket.
java.net.Socket.isConnected(),returns the connection state of the socket.
java.net.Socket.isInputShutdown(),returns whether the read-half of the socket connection is closed.
java.net.Socket.isOutputShutdown(),returns whether the write-half of the socket connection is closed.
java.net.Socket.sendUrgentData(int),send one byte of urgent data on the socket.
java.net.Socket.setKeepAlive(boolean),enable/disable so_keepalive.
java.net.Socket.setOOBInline(boolean),"enable/disable so_oobinline (receipt of tcp urgent data)
by default, this option is disabled and tcp urgent data received on a socket is silently discarded."
"java.net.Socket.setPerformancePreferences(int,int,int)",sets performance preferences for this socket.
java.net.Socket.setReceiveBufferSize(int),sets the so_rcvbuf option to the specified value for this socket.
java.net.Socket.setReuseAddress(boolean),enable/disable the so_reuseaddr socket option.
java.net.Socket.setSendBufferSize(int),sets the so_sndbuf option to the specified value for this socket.
java.net.Socket.setSocketImplFactory(java.net.SocketImplFactory),sets the client socket implementation factory for the application.
"java.net.Socket.setSoLinger(boolean,int)",enable/disable so_linger with the specified linger time in seconds.
java.net.Socket.setSoTimeout(int),"enable/disable so_timeout with the specified timeout, in milliseconds."
java.net.Socket.setTcpNoDelay(boolean),enable/disable tcp_nodelay (disable/enable nagle's algorithm).
java.net.Socket.setTrafficClass(int),sets traffic class or type-of-service octet in the ip header for packets sent from this socket.
java.net.Socket.shutdownInput(),"places the input stream for this socket at ""end of stream""."
java.net.Socket.shutdownOutput(),disables the output stream for this socket.
java.net.Socket.toString(),converts this socket to a string.
java.net.SocketImpl.accept(java.net.SocketImpl),accepts a connection.
java.net.SocketImpl.available(),returns the number of bytes that can be read from this socket without blocking.
"java.net.SocketImpl.bind(java.net.InetAddress,int)",binds this socket to the specified local ip address and port number.
java.net.SocketImpl.close(),closes this socket.
"java.net.SocketImpl.connect(java.lang.String,int)",connects this socket to the specified port on the named host.
"java.net.SocketImpl.connect(java.net.InetAddress,int)",connects this socket to the specified port number on the specified host.
"java.net.SocketImpl.connect(java.net.SocketAddress,int)",connects this socket to the specified port number on the specified host.
java.net.SocketImpl.create(boolean),creates either a stream or a datagram socket.
java.net.SocketImpl.getFileDescriptor(),returns the value of this socket's fd field.
java.net.SocketImpl.getInetAddress(),returns the value of this socket's address field.
java.net.SocketImpl.getInputStream(),returns an input stream for this socket.
java.net.SocketImpl.getLocalPort(),returns the value of this socket's localport field.
java.net.SocketImpl.getOutputStream(),returns an output stream for this socket.
java.net.SocketImpl.getPort(),returns the value of this socket's port field.
java.net.SocketImpl.listen(int),sets the maximum queue length for incoming connection indications (a request to connect) to the count argument.
java.net.SocketImpl.sendUrgentData(int),send one byte of urgent data on the socket.
"java.net.SocketImpl.setPerformancePreferences(int,int,int)",sets performance preferences for this socket.
java.net.SocketImpl.shutdownInput(),"places the input stream for this socket at ""end of stream""."
java.net.SocketImpl.shutdownOutput(),disables the output stream for this socket.
java.net.SocketImpl.supportsUrgentData(),returns whether or not this socketimpl supports sending urgent data.
java.net.SocketImpl.toString(),returns the address and port of this socket as a string.
java.net.SocketPermission.equals(java.lang.Object),checks two socketpermission objects for equality.
java.net.SocketPermission.getActions(),returns the canonical string representation of the actions.
java.net.SocketPermission.hashCode(),returns the hash code value for this object.
java.net.SocketPermission.implies(java.security.Permission),"checks if this socket permission object ""implies"" the specified permission."
java.net.SocketPermission.newPermissionCollection(),returns a new permissioncollection object for storing socketpermission objects.
java.net.URI.compareTo(java.net.URI),"compares this uri to another object, which must be a uri."
java.net.URI.create(java.lang.String),creates a uri by parsing the given string.
java.net.URI.equals(java.lang.Object),tests this uri for equality with another object.
java.net.URI.getAuthority(),returns the decoded authority component of this uri.
java.net.URI.getFragment(),returns the decoded fragment component of this uri.
java.net.URI.getHost(),returns the host component of this uri.
java.net.URI.getPath(),returns the decoded path component of this uri.
java.net.URI.getPort(),returns the port number of this uri.
java.net.URI.getQuery(),returns the decoded query component of this uri.
java.net.URI.getRawAuthority(),returns the raw authority component of this uri.
java.net.URI.getRawFragment(),returns the raw fragment component of this uri.
java.net.URI.getRawPath(),returns the raw path component of this uri.
java.net.URI.getRawQuery(),returns the raw query component of this uri.
java.net.URI.getRawSchemeSpecificPart(),returns the raw scheme-specific part of this uri.
java.net.URI.getRawUserInfo(),returns the raw user-information component of this uri.
java.net.URI.getScheme(),returns the scheme component of this uri.
java.net.URI.getSchemeSpecificPart(),returns the decoded scheme-specific part of this uri.
java.net.URI.getUserInfo(),returns the decoded user-information component of this uri.
java.net.URI.hashCode(),returns a hash-code value for this uri.
java.net.URI.isAbsolute(),tells whether or not this uri is absolute.
java.net.URI.isOpaque(),tells whether or not this uri is opaque.
java.net.URI.normalize(),normalizes this uri's path.
java.net.URI.parseServerAuthority(),"attempts to parse this uri's authority component, if defined, into user-information, host, and port components."
java.net.URI.relativize(java.net.URI),relativizes the given uri against this uri.
java.net.URI.resolve(java.net.URI),resolves the given uri against this uri.
java.net.URI.resolve(java.lang.String),constructs a new uri by parsing the given string and then resolving it against this uri.
java.net.URI.toASCIIString(),returns the content of this uri as a us-ascii string.
java.net.URI.toString(),returns the content of this uri as a string.
java.net.URI.toURL(),constructs a url from this uri.
java.net.URL.equals(java.lang.Object),compares this url for equality with another object.
java.net.URL.getAuthority(),gets the authority part of this url.
java.net.URL.getContent(),gets the contents of this url.
java.net.URL.getContent(java.lang.Class[]),gets the contents of this url.
java.net.URL.getDefaultPort(),gets the default port number of the protocol associated with this url.
java.net.URL.getFile(),gets the file name of this url.
java.net.URL.getHost(),"gets the host name of this url, if applicable."
java.net.URL.getPath(),gets the path part of this url.
java.net.URL.getPort(),gets the port number of this url.
java.net.URL.getProtocol(),gets the protocol name of this url.
java.net.URL.getQuery(),gets the query part of this url.
java.net.URL.getRef(),"gets the anchor (also known as the ""reference"") of this url."
java.net.URL.getUserInfo(),gets the userinfo part of this url.
java.net.URL.hashCode(),creates an integer suitable for hash table indexing.
java.net.URL.openConnection(),returns a urlconnection instance that represents a connection to the remote object referred to by the url.
java.net.URL.openStream(),opens a connection to this url and returns an inputstream for reading from that connection.
java.net.URL.sameFile(java.net.URL),"compares two urls, excluding the fragment component."
java.net.URL.setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory),sets an application's urlstreamhandlerfactory.
java.net.URL.toExternalForm(),constructs a string representation of this url.
java.net.URL.toString(),constructs a string representation of this url.
java.net.URL.toURI(),returns a uri equivalent to this url.
java.net.URLClassLoader.addURL(java.net.URL),appends the specified url to the list of urls to search for classes and resources.
java.net.URLClassLoader.close(),"closes this urlclassloader, so that it can no longer be used to load new classes or resources that are defined by this loader."
"java.net.URLClassLoader.definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)",defines a new package by name in this classloader.
java.net.URLClassLoader.findClass(java.lang.String),finds and loads the class with the specified name from the url search path.
java.net.URLClassLoader.findResource(java.lang.String),finds the resource with the specified name on the url search path.
java.net.URLClassLoader.findResources(java.lang.String),returns an enumeration of urls representing all of the resources on the url search path having the specified name.
java.net.URLClassLoader.getPermissions(java.security.CodeSource),returns the permissions for the given codesource object.
java.net.URLClassLoader.getResourceAsStream(java.lang.String),returns an input stream for reading the specified resource.
java.net.URLClassLoader.getURLs(),returns the search path of urls for loading classes and resources.
"java.net.URLClassLoader.newInstance(java.net.URL[],java.lang.ClassLoader)",creates a new instance of urlclassloader for the specified urls and parent class loader.
java.net.URLClassLoader.newInstance(java.net.URL[]),creates a new instance of urlclassloader for the specified urls and default parent class loader.
"java.net.URLConnection.addRequestProperty(java.lang.String,java.lang.String)",adds a general request property specified by a key-value pair.
java.net.URLConnection.connect(),"opens a communications link to the resource referenced by this url, if such a connection has not already been established."
java.net.URLConnection.getAllowUserInteraction(),returns the value of the allowuserinteraction field for this object.
java.net.URLConnection.getConnectTimeout(),returns setting for connect timeout.
java.net.URLConnection.getContent(),retrieves the contents of this url connection.
java.net.URLConnection.getContent(java.lang.Class[]),retrieves the contents of this url connection.
java.net.URLConnection.getContentEncoding(),returns the value of the content-encoding header field.
java.net.URLConnection.getContentLength(),returns the value of the content-length header field.
java.net.URLConnection.getContentLengthLong(),returns the value of the content-length header field as a long.
java.net.URLConnection.getContentType(),returns the value of the content-type header field.
java.net.URLConnection.getDate(),returns the value of the date header field.
java.net.URLConnection.getDefaultAllowUserInteraction(),returns the default value of the allowuserinteraction field.
java.net.URLConnection.getDefaultUseCaches(),returns the default value of a urlconnection's usecaches flag.
java.net.URLConnection.getDoInput(),returns the value of this urlconnection's doinput flag.
java.net.URLConnection.getDoOutput(),returns the value of this urlconnection's dooutput flag.
java.net.URLConnection.getExpiration(),returns the value of the expires header field.
java.net.URLConnection.getFileNameMap(),loads filename map (a mimetable) from a data file.
java.net.URLConnection.getHeaderField(java.lang.String),returns the value of the named header field.
java.net.URLConnection.getHeaderField(int),returns the value for the nth header field.
"java.net.URLConnection.getHeaderFieldDate(java.lang.String,long)",returns the value of the named field parsed as date.
"java.net.URLConnection.getHeaderFieldInt(java.lang.String,int)",returns the value of the named field parsed as a number.
java.net.URLConnection.getHeaderFieldKey(int),returns the key for the nth header field.
"java.net.URLConnection.getHeaderFieldLong(java.lang.String,long)",returns the value of the named field parsed as a number.
java.net.URLConnection.getHeaderFields(),returns an unmodifiable map of the header fields.
java.net.URLConnection.getIfModifiedSince(),returns the value of this object's ifmodifiedsince field.
java.net.URLConnection.getInputStream(),returns an input stream that reads from this open connection.
java.net.URLConnection.getLastModified(),returns the value of the last-modified header field.
java.net.URLConnection.getOutputStream(),returns an output stream that writes to this connection.
java.net.URLConnection.getPermission(),returns a permission object representing the permission necessary to make the connection represented by this object.
java.net.URLConnection.getReadTimeout(),returns setting for read timeout.
java.net.URLConnection.getRequestProperties(),returns an unmodifiable map of general request properties for this connection.
java.net.URLConnection.getRequestProperty(java.lang.String),returns the value of the named general request property for this connection.
java.net.URLConnection.getURL(),returns the value of this urlconnection's url field.
java.net.URLConnection.getUseCaches(),returns the value of this urlconnection's usecaches field.
java.net.URLConnection.guessContentTypeFromName(java.lang.String),"tries to determine the content type of an object, based on the specified ""file"" component of a url."
java.net.URLConnection.guessContentTypeFromStream(java.io.InputStream),tries to determine the type of an input stream based on the characters at the beginning of the input stream.
java.net.URLConnection.setAllowUserInteraction(boolean),set the value of the allowuserinteraction field of this urlconnection.
java.net.URLConnection.setConnectTimeout(int),"sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this urlconnection."
java.net.URLConnection.setContentHandlerFactory(java.net.ContentHandlerFactory),sets the contenthandlerfactory of an application.
java.net.URLConnection.setDefaultAllowUserInteraction(boolean),sets the default value of the allowuserinteraction field for all future urlconnection objects to the specified value.
java.net.URLConnection.setDefaultUseCaches(boolean),sets the default value of the usecaches field to the specified value.
java.net.URLConnection.setDoInput(boolean),sets the value of the doinput field for this urlconnection to the specified value.
java.net.URLConnection.setDoOutput(boolean),sets the value of the dooutput field for this urlconnection to the specified value.
java.net.URLConnection.setFileNameMap(java.net.FileNameMap),sets the filenamemap.
java.net.URLConnection.setIfModifiedSince(long),sets the value of the ifmodifiedsince field of this urlconnection to the specified value.
java.net.URLConnection.setReadTimeout(int),"sets the read timeout to a specified timeout, in milliseconds."
"java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",sets the general request property.
java.net.URLConnection.setUseCaches(boolean),sets the value of the usecaches field of this urlconnection to the specified value.
java.net.URLConnection.toString(),returns a string representation of this url connection.
"java.net.URLDecoder.decode(java.lang.String,java.lang.String)",decodes a application/x-www-form-urlencoded string using a specific encoding scheme.
"java.net.URLEncoder.encode(java.lang.String,java.lang.String)",translates a string into application/x-www-form-urlencoded format using a specific encoding scheme.
java.net.URLPermission.equals(java.lang.Object),"returns true if, this."
java.net.URLPermission.getActions(),"returns the normalized method list and request header list, in the form:
""method-names : header-names"" ."
java.net.URLPermission.hashCode(),returns a hashcode calculated from the hashcode of the actions string and the url string.
java.net.URLPermission.implies(java.security.Permission),checks if this urlpermission implies the given permission.
"java.net.URLStreamHandler.equals(java.net.URL,java.net.URL)",provides the default equals calculation.
java.net.URLStreamHandler.getDefaultPort(),returns the default port for a url parsed by this handler.
java.net.URLStreamHandler.getHostAddress(java.net.URL),get the ip address of our host.
java.net.URLStreamHandler.hashCode(java.net.URL),provides the default hash calculation.
"java.net.URLStreamHandler.hostsEqual(java.net.URL,java.net.URL)",compares the host components of two urls.
java.net.URLStreamHandler.openConnection(java.net.URL),opens a connection to the object referenced by the url argument.
"java.net.URLStreamHandler.parseURL(java.net.URL,java.lang.String,int,int)",parses the string representation of a url into a url object.
"java.net.URLStreamHandler.sameFile(java.net.URL,java.net.URL)","compare two urls to see whether they refer to the same file, i."
"java.net.URLStreamHandler.setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",sets the fields of the url argument to the indicated values.
java.net.URLStreamHandler.toExternalForm(java.net.URL),converts a url of a specific protocol to a string.
java.net.Authenticator.RequestorType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.net.Authenticator.RequestorType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.net.Proxy.Type.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.net.Proxy.Type.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.net.StandardProtocolFamily.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.net.StandardProtocolFamily.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.net.HttpRetryException.getLocation(),returns the value of the location header field if the error resulted from redirection.
java.net.HttpRetryException.getReason(),returns a string explaining why the http request could not be retried.
java.net.HttpRetryException.responseCode(),returns the http response code.
java.net.URISyntaxException.getIndex(),"returns an index into the input string of the position at which the parse error occurred, or -1 if this position is not known."
java.net.URISyntaxException.getInput(),returns the input string.
java.net.URISyntaxException.getMessage(),returns a string describing the parse error.
java.net.URISyntaxException.getReason(),returns a string explaining why the input string could not be parsed.
java.nio.Buffer.array(),returns the array that backs this buffer (optional operation).
java.nio.Buffer.arrayOffset(),returns the offset within this buffer's backing array of the first element of the buffer (optional operation).
java.nio.Buffer.capacity(),returns this buffer's capacity.
java.nio.Buffer.clear(),clears this buffer.
java.nio.Buffer.flip(),flips this buffer.
java.nio.Buffer.hasArray(),tells whether or not this buffer is backed by an accessible array.
java.nio.Buffer.hasRemaining(),tells whether there are any elements between the current position and the limit.
java.nio.Buffer.isDirect(),tells whether or not this buffer is direct.
java.nio.Buffer.isReadOnly(),tells whether or not this buffer is read-only.
java.nio.Buffer.limit(),returns this buffer's limit.
java.nio.Buffer.limit(int),sets this buffer's limit.
java.nio.Buffer.mark(),sets this buffer's mark at its position.
java.nio.Buffer.position(),returns this buffer's position.
java.nio.Buffer.position(int),sets this buffer's position.
java.nio.Buffer.remaining(),returns the number of elements between the current position and the limit.
java.nio.Buffer.reset(),resets this buffer's position to the previously-marked position.
java.nio.Buffer.rewind(),rewinds this buffer.
java.nio.ByteBuffer.allocate(int),allocates a new byte buffer.
java.nio.ByteBuffer.allocateDirect(int),allocates a new direct byte buffer.
java.nio.ByteBuffer.array(),returns the byte array that backs this buffer (optional operation).
java.nio.ByteBuffer.arrayOffset(),returns the offset within this buffer's backing array of the first element of the buffer (optional operation).
java.nio.ByteBuffer.asCharBuffer(),creates a view of this byte buffer as a char buffer.
java.nio.ByteBuffer.asDoubleBuffer(),creates a view of this byte buffer as a double buffer.
java.nio.ByteBuffer.asFloatBuffer(),creates a view of this byte buffer as a float buffer.
java.nio.ByteBuffer.asIntBuffer(),creates a view of this byte buffer as an int buffer.
java.nio.ByteBuffer.asLongBuffer(),creates a view of this byte buffer as a long buffer.
java.nio.ByteBuffer.asReadOnlyBuffer(),"creates a new, read-only byte buffer that shares this buffer's content."
java.nio.ByteBuffer.asShortBuffer(),creates a view of this byte buffer as a short buffer.
java.nio.ByteBuffer.compact(),compacts this buffer (optional operation).
java.nio.ByteBuffer.compareTo(java.nio.ByteBuffer),compares this buffer to another.
java.nio.ByteBuffer.duplicate(),creates a new byte buffer that shares this buffer's content.
java.nio.ByteBuffer.equals(java.lang.Object),tells whether or not this buffer is equal to another object.
java.nio.ByteBuffer.get(),relative get method.
java.nio.ByteBuffer.get(int),absolute get method.
"java.nio.ByteBuffer.get(byte[],int,int)",relative bulk get method.
java.nio.ByteBuffer.get(byte[]),relative bulk get method.
java.nio.ByteBuffer.getChar(),relative get method for reading a char value.
java.nio.ByteBuffer.getChar(int),absolute get method for reading a char value.
java.nio.ByteBuffer.getDouble(),relative get method for reading a double value.
java.nio.ByteBuffer.getDouble(int),absolute get method for reading a double value.
java.nio.ByteBuffer.getFloat(),relative get method for reading a float value.
java.nio.ByteBuffer.getFloat(int),absolute get method for reading a float value.
java.nio.ByteBuffer.getInt(),relative get method for reading an int value.
java.nio.ByteBuffer.getInt(int),absolute get method for reading an int value.
java.nio.ByteBuffer.getLong(),relative get method for reading a long value.
java.nio.ByteBuffer.getLong(int),absolute get method for reading a long value.
java.nio.ByteBuffer.getShort(),relative get method for reading a short value.
java.nio.ByteBuffer.getShort(int),absolute get method for reading a short value.
java.nio.ByteBuffer.hasArray(),tells whether or not this buffer is backed by an accessible byte array.
java.nio.ByteBuffer.hashCode(),returns the current hash code of this buffer.
java.nio.ByteBuffer.isDirect(),tells whether or not this byte buffer is direct.
java.nio.ByteBuffer.order(),retrieves this buffer's byte order.
java.nio.ByteBuffer.order(java.nio.ByteOrder),modifies this buffer's byte order.
java.nio.ByteBuffer.put(byte),relative put method (optional operation).
"java.nio.ByteBuffer.put(int,byte)",absolute put method (optional operation).
java.nio.ByteBuffer.put(java.nio.ByteBuffer),relative bulk put method (optional operation).
"java.nio.ByteBuffer.put(byte[],int,int)",relative bulk put method (optional operation).
java.nio.ByteBuffer.put(byte[]),relative bulk put method (optional operation).
java.nio.ByteBuffer.putChar(char),relative put method for writing a char value (optional operation).
"java.nio.ByteBuffer.putChar(int,char)",absolute put method for writing a char value (optional operation).
java.nio.ByteBuffer.putDouble(double),relative put method for writing a double value (optional operation).
"java.nio.ByteBuffer.putDouble(int,double)",absolute put method for writing a double value (optional operation).
java.nio.ByteBuffer.putFloat(float),relative put method for writing a float value (optional operation).
"java.nio.ByteBuffer.putFloat(int,float)",absolute put method for writing a float value (optional operation).
java.nio.ByteBuffer.putInt(int),relative put method for writing an int value (optional operation).
"java.nio.ByteBuffer.putInt(int,int)",absolute put method for writing an int value (optional operation).
java.nio.ByteBuffer.putLong(long),relative put method for writing a long value (optional operation).
"java.nio.ByteBuffer.putLong(int,long)",absolute put method for writing a long value (optional operation).
java.nio.ByteBuffer.putShort(short),relative put method for writing a short value (optional operation).
"java.nio.ByteBuffer.putShort(int,short)",absolute put method for writing a short value (optional operation).
java.nio.ByteBuffer.slice(),creates a new byte buffer whose content is a shared subsequence of this buffer's content.
java.nio.ByteBuffer.toString(),returns a string summarizing the state of this buffer.
"java.nio.ByteBuffer.wrap(byte[],int,int)",wraps a byte array into a buffer.
java.nio.ByteBuffer.wrap(byte[]),wraps a byte array into a buffer.
java.nio.ByteOrder.nativeOrder(),retrieves the native byte order of the underlying platform.
java.nio.ByteOrder.toString(),constructs a string describing this object.
java.nio.CharBuffer.allocate(int),allocates a new char buffer.
java.nio.CharBuffer.append(java.lang.CharSequence),appends the specified character sequence to this buffer (optional operation).
"java.nio.CharBuffer.append(java.lang.CharSequence,int,int)",appends a subsequence of the specified character sequence to this buffer (optional operation).
java.nio.CharBuffer.append(char),appends the specified char to this buffer (optional operation).
java.nio.CharBuffer.array(),returns the char array that backs this buffer (optional operation).
java.nio.CharBuffer.arrayOffset(),returns the offset within this buffer's backing array of the first element of the buffer (optional operation).
java.nio.CharBuffer.asReadOnlyBuffer(),"creates a new, read-only char buffer that shares this buffer's content."
java.nio.CharBuffer.charAt(int),reads the character at the given index relative to the current position.
java.nio.CharBuffer.compact(),compacts this buffer (optional operation).
java.nio.CharBuffer.compareTo(java.nio.CharBuffer),compares this buffer to another.
java.nio.CharBuffer.duplicate(),creates a new char buffer that shares this buffer's content.
java.nio.CharBuffer.equals(java.lang.Object),tells whether or not this buffer is equal to another object.
java.nio.CharBuffer.get(),relative get method.
java.nio.CharBuffer.get(int),absolute get method.
"java.nio.CharBuffer.get(char[],int,int)",relative bulk get method.
java.nio.CharBuffer.get(char[]),relative bulk get method.
java.nio.CharBuffer.hasArray(),tells whether or not this buffer is backed by an accessible char array.
java.nio.CharBuffer.hashCode(),returns the current hash code of this buffer.
java.nio.CharBuffer.isDirect(),tells whether or not this char buffer is direct.
java.nio.CharBuffer.length(),returns the length of this character buffer.
java.nio.CharBuffer.order(),retrieves this buffer's byte order.
java.nio.CharBuffer.put(char),relative put method (optional operation).
"java.nio.CharBuffer.put(int,char)",absolute put method (optional operation).
java.nio.CharBuffer.put(java.nio.CharBuffer),relative bulk put method (optional operation).
"java.nio.CharBuffer.put(char[],int,int)",relative bulk put method (optional operation).
java.nio.CharBuffer.put(char[]),relative bulk put method (optional operation).
"java.nio.CharBuffer.put(java.lang.String,int,int)",relative bulk put method (optional operation).
java.nio.CharBuffer.put(java.lang.String),relative bulk put method (optional operation).
java.nio.CharBuffer.read(java.nio.CharBuffer),attempts to read characters into the specified character buffer.
java.nio.CharBuffer.slice(),creates a new char buffer whose content is a shared subsequence of this buffer's content.
"java.nio.CharBuffer.subSequence(int,int)","creates a new character buffer that represents the specified subsequence of this buffer, relative to the current position."
java.nio.CharBuffer.toString(),returns a string containing the characters in this buffer.
"java.nio.CharBuffer.wrap(char[],int,int)",wraps a char array into a buffer.
java.nio.CharBuffer.wrap(char[]),wraps a char array into a buffer.
"java.nio.CharBuffer.wrap(java.lang.CharSequence,int,int)",wraps a character sequence into a buffer.
java.nio.CharBuffer.wrap(java.lang.CharSequence),wraps a character sequence into a buffer.
java.nio.DoubleBuffer.allocate(int),allocates a new double buffer.
java.nio.DoubleBuffer.array(),returns the double array that backs this buffer (optional operation).
java.nio.DoubleBuffer.arrayOffset(),returns the offset within this buffer's backing array of the first element of the buffer (optional operation).
java.nio.DoubleBuffer.asReadOnlyBuffer(),"creates a new, read-only double buffer that shares this buffer's content."
java.nio.DoubleBuffer.compact(),compacts this buffer (optional operation).
java.nio.DoubleBuffer.compareTo(java.nio.DoubleBuffer),compares this buffer to another.
java.nio.DoubleBuffer.duplicate(),creates a new double buffer that shares this buffer's content.
java.nio.DoubleBuffer.equals(java.lang.Object),tells whether or not this buffer is equal to another object.
java.nio.DoubleBuffer.get(),relative get method.
java.nio.DoubleBuffer.get(int),absolute get method.
"java.nio.DoubleBuffer.get(double[],int,int)",relative bulk get method.
java.nio.DoubleBuffer.get(double[]),relative bulk get method.
java.nio.DoubleBuffer.hasArray(),tells whether or not this buffer is backed by an accessible double array.
java.nio.DoubleBuffer.hashCode(),returns the current hash code of this buffer.
java.nio.DoubleBuffer.isDirect(),tells whether or not this double buffer is direct.
java.nio.DoubleBuffer.order(),retrieves this buffer's byte order.
java.nio.DoubleBuffer.put(double),relative put method (optional operation).
"java.nio.DoubleBuffer.put(int,double)",absolute put method (optional operation).
java.nio.DoubleBuffer.put(java.nio.DoubleBuffer),relative bulk put method (optional operation).
"java.nio.DoubleBuffer.put(double[],int,int)",relative bulk put method (optional operation).
java.nio.DoubleBuffer.put(double[]),relative bulk put method (optional operation).
java.nio.DoubleBuffer.slice(),creates a new double buffer whose content is a shared subsequence of this buffer's content.
java.nio.DoubleBuffer.toString(),returns a string summarizing the state of this buffer.
"java.nio.DoubleBuffer.wrap(double[],int,int)",wraps a double array into a buffer.
java.nio.DoubleBuffer.wrap(double[]),wraps a double array into a buffer.
java.nio.FloatBuffer.allocate(int),allocates a new float buffer.
java.nio.FloatBuffer.array(),returns the float array that backs this buffer (optional operation).
java.nio.FloatBuffer.arrayOffset(),returns the offset within this buffer's backing array of the first element of the buffer (optional operation).
java.nio.FloatBuffer.asReadOnlyBuffer(),"creates a new, read-only float buffer that shares this buffer's content."
java.nio.FloatBuffer.compact(),compacts this buffer (optional operation).
java.nio.FloatBuffer.compareTo(java.nio.FloatBuffer),compares this buffer to another.
java.nio.FloatBuffer.duplicate(),creates a new float buffer that shares this buffer's content.
java.nio.FloatBuffer.equals(java.lang.Object),tells whether or not this buffer is equal to another object.
java.nio.FloatBuffer.get(),relative get method.
java.nio.FloatBuffer.get(int),absolute get method.
"java.nio.FloatBuffer.get(float[],int,int)",relative bulk get method.
java.nio.FloatBuffer.get(float[]),relative bulk get method.
java.nio.FloatBuffer.hasArray(),tells whether or not this buffer is backed by an accessible float array.
java.nio.FloatBuffer.hashCode(),returns the current hash code of this buffer.
java.nio.FloatBuffer.isDirect(),tells whether or not this float buffer is direct.
java.nio.FloatBuffer.order(),retrieves this buffer's byte order.
java.nio.FloatBuffer.put(float),relative put method (optional operation).
"java.nio.FloatBuffer.put(int,float)",absolute put method (optional operation).
java.nio.FloatBuffer.put(java.nio.FloatBuffer),relative bulk put method (optional operation).
"java.nio.FloatBuffer.put(float[],int,int)",relative bulk put method (optional operation).
java.nio.FloatBuffer.put(float[]),relative bulk put method (optional operation).
java.nio.FloatBuffer.slice(),creates a new float buffer whose content is a shared subsequence of this buffer's content.
java.nio.FloatBuffer.toString(),returns a string summarizing the state of this buffer.
"java.nio.FloatBuffer.wrap(float[],int,int)",wraps a float array into a buffer.
java.nio.FloatBuffer.wrap(float[]),wraps a float array into a buffer.
java.nio.IntBuffer.allocate(int),allocates a new int buffer.
java.nio.IntBuffer.array(),returns the int array that backs this buffer (optional operation).
java.nio.IntBuffer.arrayOffset(),returns the offset within this buffer's backing array of the first element of the buffer (optional operation).
java.nio.IntBuffer.asReadOnlyBuffer(),"creates a new, read-only int buffer that shares this buffer's content."
java.nio.IntBuffer.compact(),compacts this buffer (optional operation).
java.nio.IntBuffer.compareTo(java.nio.IntBuffer),compares this buffer to another.
java.nio.IntBuffer.duplicate(),creates a new int buffer that shares this buffer's content.
java.nio.IntBuffer.equals(java.lang.Object),tells whether or not this buffer is equal to another object.
java.nio.IntBuffer.get(),relative get method.
java.nio.IntBuffer.get(int),absolute get method.
"java.nio.IntBuffer.get(int[],int,int)",relative bulk get method.
java.nio.IntBuffer.get(int[]),relative bulk get method.
java.nio.IntBuffer.hasArray(),tells whether or not this buffer is backed by an accessible int array.
java.nio.IntBuffer.hashCode(),returns the current hash code of this buffer.
java.nio.IntBuffer.isDirect(),tells whether or not this int buffer is direct.
java.nio.IntBuffer.order(),retrieves this buffer's byte order.
java.nio.IntBuffer.put(int),relative put method (optional operation).
"java.nio.IntBuffer.put(int,int)",absolute put method (optional operation).
java.nio.IntBuffer.put(java.nio.IntBuffer),relative bulk put method (optional operation).
"java.nio.IntBuffer.put(int[],int,int)",relative bulk put method (optional operation).
java.nio.IntBuffer.put(int[]),relative bulk put method (optional operation).
java.nio.IntBuffer.slice(),creates a new int buffer whose content is a shared subsequence of this buffer's content.
java.nio.IntBuffer.toString(),returns a string summarizing the state of this buffer.
"java.nio.IntBuffer.wrap(int[],int,int)",wraps an int array into a buffer.
java.nio.IntBuffer.wrap(int[]),wraps an int array into a buffer.
java.nio.LongBuffer.allocate(int),allocates a new long buffer.
java.nio.LongBuffer.array(),returns the long array that backs this buffer (optional operation).
java.nio.LongBuffer.arrayOffset(),returns the offset within this buffer's backing array of the first element of the buffer (optional operation).
java.nio.LongBuffer.asReadOnlyBuffer(),"creates a new, read-only long buffer that shares this buffer's content."
java.nio.LongBuffer.compact(),compacts this buffer (optional operation).
java.nio.LongBuffer.compareTo(java.nio.LongBuffer),compares this buffer to another.
java.nio.LongBuffer.duplicate(),creates a new long buffer that shares this buffer's content.
java.nio.LongBuffer.equals(java.lang.Object),tells whether or not this buffer is equal to another object.
java.nio.LongBuffer.get(),relative get method.
java.nio.LongBuffer.get(int),absolute get method.
"java.nio.LongBuffer.get(long[],int,int)",relative bulk get method.
java.nio.LongBuffer.get(long[]),relative bulk get method.
java.nio.LongBuffer.hasArray(),tells whether or not this buffer is backed by an accessible long array.
java.nio.LongBuffer.hashCode(),returns the current hash code of this buffer.
java.nio.LongBuffer.isDirect(),tells whether or not this long buffer is direct.
java.nio.LongBuffer.order(),retrieves this buffer's byte order.
java.nio.LongBuffer.put(long),relative put method (optional operation).
"java.nio.LongBuffer.put(int,long)",absolute put method (optional operation).
java.nio.LongBuffer.put(java.nio.LongBuffer),relative bulk put method (optional operation).
"java.nio.LongBuffer.put(long[],int,int)",relative bulk put method (optional operation).
java.nio.LongBuffer.put(long[]),relative bulk put method (optional operation).
java.nio.LongBuffer.slice(),creates a new long buffer whose content is a shared subsequence of this buffer's content.
java.nio.LongBuffer.toString(),returns a string summarizing the state of this buffer.
"java.nio.LongBuffer.wrap(long[],int,int)",wraps a long array into a buffer.
java.nio.LongBuffer.wrap(long[]),wraps a long array into a buffer.
java.nio.MappedByteBuffer.force(),forces any changes made to this buffer's content to be written to the storage device containing the mapped file.
java.nio.MappedByteBuffer.isLoaded(),tells whether or not this buffer's content is resident in physical memory.
java.nio.MappedByteBuffer.load(),loads this buffer's content into physical memory.
java.nio.ShortBuffer.allocate(int),allocates a new short buffer.
java.nio.ShortBuffer.array(),returns the short array that backs this buffer (optional operation).
java.nio.ShortBuffer.arrayOffset(),returns the offset within this buffer's backing array of the first element of the buffer (optional operation).
java.nio.ShortBuffer.asReadOnlyBuffer(),"creates a new, read-only short buffer that shares this buffer's content."
java.nio.ShortBuffer.compact(),compacts this buffer (optional operation).
java.nio.ShortBuffer.compareTo(java.nio.ShortBuffer),compares this buffer to another.
java.nio.ShortBuffer.duplicate(),creates a new short buffer that shares this buffer's content.
java.nio.ShortBuffer.equals(java.lang.Object),tells whether or not this buffer is equal to another object.
java.nio.ShortBuffer.get(),relative get method.
java.nio.ShortBuffer.get(int),absolute get method.
"java.nio.ShortBuffer.get(short[],int,int)",relative bulk get method.
java.nio.ShortBuffer.get(short[]),relative bulk get method.
java.nio.ShortBuffer.hasArray(),tells whether or not this buffer is backed by an accessible short array.
java.nio.ShortBuffer.hashCode(),returns the current hash code of this buffer.
java.nio.ShortBuffer.isDirect(),tells whether or not this short buffer is direct.
java.nio.ShortBuffer.order(),retrieves this buffer's byte order.
java.nio.ShortBuffer.put(short),relative put method (optional operation).
"java.nio.ShortBuffer.put(int,short)",absolute put method (optional operation).
java.nio.ShortBuffer.put(java.nio.ShortBuffer),relative bulk put method (optional operation).
"java.nio.ShortBuffer.put(short[],int,int)",relative bulk put method (optional operation).
java.nio.ShortBuffer.put(short[]),relative bulk put method (optional operation).
java.nio.ShortBuffer.slice(),creates a new short buffer whose content is a shared subsequence of this buffer's content.
java.nio.ShortBuffer.toString(),returns a string summarizing the state of this buffer.
"java.nio.ShortBuffer.wrap(short[],int,int)",wraps a short array into a buffer.
java.nio.ShortBuffer.wrap(short[]),wraps a short array into a buffer.
"java.nio.channels.AsynchronousByteChannel.read(java.nio.ByteBuffer,A,,? super A>)",reads a sequence of bytes from this channel into the given buffer.
java.nio.channels.AsynchronousByteChannel.read(java.nio.ByteBuffer),reads a sequence of bytes from this channel into the given buffer.
"java.nio.channels.AsynchronousByteChannel.write(java.nio.ByteBuffer,A,,? super A>)",writes a sequence of bytes to this channel from the given buffer.
java.nio.channels.AsynchronousByteChannel.write(java.nio.ByteBuffer),writes a sequence of bytes to this channel from the given buffer.
java.nio.channels.AsynchronousChannel.close(),closes this channel.
java.nio.channels.Channel.close(),closes this channel.
java.nio.channels.Channel.isOpen(),tells whether or not this channel is open.
"java.nio.channels.CompletionHandler.completed(java.nio.channels.CompletionHandler,java.nio.channels.CompletionHandler)",invoked when an operation has completed.
"java.nio.channels.CompletionHandler.failed(java.lang.Throwable,java.nio.channels.CompletionHandler)",invoked when an operation fails.
"java.nio.channels.GatheringByteChannel.write(java.nio.ByteBuffer[],int,int)",writes a sequence of bytes to this channel from a subsequence of the given buffers.
java.nio.channels.GatheringByteChannel.write(java.nio.ByteBuffer[]),writes a sequence of bytes to this channel from the given buffers.
java.nio.channels.InterruptibleChannel.close(),closes this channel.
java.nio.channels.MulticastChannel.close(),closes this channel.
"java.nio.channels.MulticastChannel.join(java.net.InetAddress,java.net.NetworkInterface)","joins a multicast group to begin receiving all datagrams sent to the group, returning a membership key."
"java.nio.channels.MulticastChannel.join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",joins a multicast group to begin receiving datagrams sent to the group from a given source address.
java.nio.channels.NetworkChannel.bind(java.net.SocketAddress),binds the channel's socket to a local address.
java.nio.channels.NetworkChannel.getLocalAddress(),returns the socket address that this channel's socket is bound to.
java.nio.channels.NetworkChannel.getOption(java.net.SocketOption<T>),returns the value of a socket option.
"java.nio.channels.NetworkChannel.setOption(java.net.SocketOption<T>,T)",sets the value of a socket option.
java.nio.channels.NetworkChannel.supportedOptions(),returns a set of the socket options supported by this channel.
java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer),reads a sequence of bytes from this channel into the given buffer.
"java.nio.channels.ScatteringByteChannel.read(java.nio.ByteBuffer[],int,int)",reads a sequence of bytes from this channel into a subsequence of the given buffers.
java.nio.channels.ScatteringByteChannel.read(java.nio.ByteBuffer[]),reads a sequence of bytes from this channel into the given buffers.
java.nio.channels.SeekableByteChannel.position(),returns this channel's position.
java.nio.channels.SeekableByteChannel.position(long),sets this channel's position.
java.nio.channels.SeekableByteChannel.read(java.nio.ByteBuffer),reads a sequence of bytes from this channel into the given buffer.
java.nio.channels.SeekableByteChannel.size(),returns the current size of entity to which this channel is connected.
java.nio.channels.SeekableByteChannel.truncate(long),"truncates the entity, to which this channel is connected, to the given size."
java.nio.channels.SeekableByteChannel.write(java.nio.ByteBuffer),writes a sequence of bytes to this channel from the given buffer.
java.nio.channels.WritableByteChannel.write(java.nio.ByteBuffer),writes a sequence of bytes to this channel from the given buffer.
"java.nio.channels.AsynchronousChannelGroup.awaitTermination(long,java.util.concurrent.TimeUnit)",awaits termination of the group.
java.nio.channels.AsynchronousChannelGroup.isShutdown(),tells whether or not this asynchronous channel group is shutdown.
java.nio.channels.AsynchronousChannelGroup.isTerminated(),tells whether or not this group has terminated.
java.nio.channels.AsynchronousChannelGroup.provider(),returns the provider that created this channel group.
java.nio.channels.AsynchronousChannelGroup.shutdown(),initiates an orderly shutdown of the group.
java.nio.channels.AsynchronousChannelGroup.shutdownNow(),shuts down the group and closes all open channels in the group.
"java.nio.channels.AsynchronousChannelGroup.withCachedThreadPool(java.util.concurrent.ExecutorService,int)",creates an asynchronous channel group with a given thread pool that creates new threads as needed.
"java.nio.channels.AsynchronousChannelGroup.withFixedThreadPool(int,java.util.concurrent.ThreadFactory)",creates an asynchronous channel group with a fixed thread pool.
java.nio.channels.AsynchronousChannelGroup.withThreadPool(java.util.concurrent.ExecutorService),creates an asynchronous channel group with a given thread pool.
java.nio.channels.AsynchronousFileChannel.force(boolean),forces any updates to this channel's file to be written to the storage device that contains it.
"java.nio.channels.AsynchronousFileChannel.lock(long,long,boolean,A,,? super A>)",acquires a lock on the given region of this channel's file.
"java.nio.channels.AsynchronousFileChannel.lock(A,,? super A>)",acquires an exclusive lock on this channel's file.
"java.nio.channels.AsynchronousFileChannel.lock(long,long,boolean)",acquires a lock on the given region of this channel's file.
java.nio.channels.AsynchronousFileChannel.lock(),acquires an exclusive lock on this channel's file.
"java.nio.channels.AsynchronousFileChannel.open(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute<?>...)","opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file."
"java.nio.channels.AsynchronousFileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...)","opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file."
"java.nio.channels.AsynchronousFileChannel.read(java.nio.ByteBuffer,long,A,,? super A>)","reads a sequence of bytes from this channel into the given buffer, starting at the given file position."
"java.nio.channels.AsynchronousFileChannel.read(java.nio.ByteBuffer,long)","reads a sequence of bytes from this channel into the given buffer, starting at the given file position."
java.nio.channels.AsynchronousFileChannel.size(),returns the current size of this channel's file.
java.nio.channels.AsynchronousFileChannel.truncate(long),truncates this channel's file to the given size.
"java.nio.channels.AsynchronousFileChannel.tryLock(long,long,boolean)",attempts to acquire a lock on the given region of this channel's file.
java.nio.channels.AsynchronousFileChannel.tryLock(),attempts to acquire an exclusive lock on this channel's file.
"java.nio.channels.AsynchronousFileChannel.write(java.nio.ByteBuffer,long,A,,? super A>)","writes a sequence of bytes to this channel from the given buffer, starting at the given file position."
"java.nio.channels.AsynchronousFileChannel.write(java.nio.ByteBuffer,long)","writes a sequence of bytes to this channel from the given buffer, starting at the given file position."
"java.nio.channels.AsynchronousServerSocketChannel.accept(A,,? super A>)",accepts a connection.
java.nio.channels.AsynchronousServerSocketChannel.accept(),accepts a connection.
java.nio.channels.AsynchronousServerSocketChannel.bind(java.net.SocketAddress),binds the channel's socket to a local address and configures the socket to listen for connections.
"java.nio.channels.AsynchronousServerSocketChannel.bind(java.net.SocketAddress,int)",binds the channel's socket to a local address and configures the socket to listen for connections.
java.nio.channels.AsynchronousServerSocketChannel.getLocalAddress(),returns the socket address that this channel's socket is bound to.
java.nio.channels.AsynchronousServerSocketChannel.open(java.nio.channels.AsynchronousChannelGroup),opens an asynchronous server-socket channel.
java.nio.channels.AsynchronousServerSocketChannel.open(),opens an asynchronous server-socket channel.
java.nio.channels.AsynchronousServerSocketChannel.provider(),returns the provider that created this channel.
"java.nio.channels.AsynchronousSocketChannel.connect(java.net.SocketAddress,A,,? super A>)",connects this channel.
java.nio.channels.AsynchronousSocketChannel.connect(java.net.SocketAddress),connects this channel.
java.nio.channels.AsynchronousSocketChannel.getLocalAddress(),returns the socket address that this channel's socket is bound to.
java.nio.channels.AsynchronousSocketChannel.getRemoteAddress(),returns the remote address to which this channel's socket is connected.
java.nio.channels.AsynchronousSocketChannel.open(java.nio.channels.AsynchronousChannelGroup),opens an asynchronous socket channel.
java.nio.channels.AsynchronousSocketChannel.open(),opens an asynchronous socket channel.
java.nio.channels.AsynchronousSocketChannel.provider(),returns the provider that created this channel.
"java.nio.channels.AsynchronousSocketChannel.read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,A,,? super A>)",reads a sequence of bytes from this channel into the given buffer.
"java.nio.channels.AsynchronousSocketChannel.read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,A,,? super A>)",reads a sequence of bytes from this channel into a subsequence of the given buffers.
java.nio.channels.AsynchronousSocketChannel.shutdownInput(),shutdown the connection for reading without closing the channel.
java.nio.channels.AsynchronousSocketChannel.shutdownOutput(),shutdown the connection for writing without closing the channel.
"java.nio.channels.AsynchronousSocketChannel.write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,A,,? super A>)",writes a sequence of bytes to this channel from the given buffer.
"java.nio.channels.AsynchronousSocketChannel.write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,A,,? super A>)",writes a sequence of bytes to this channel from a subsequence of the given buffers.
java.nio.channels.Channels.newChannel(java.io.InputStream),constructs a channel that reads bytes from the given stream.
java.nio.channels.Channels.newChannel(java.io.OutputStream),constructs a channel that writes bytes to the given stream.
java.nio.channels.Channels.newInputStream(java.nio.channels.ReadableByteChannel),constructs a stream that reads bytes from the given channel.
java.nio.channels.Channels.newInputStream(java.nio.channels.AsynchronousByteChannel),constructs a stream that reads bytes from the given channel.
java.nio.channels.Channels.newOutputStream(java.nio.channels.WritableByteChannel),constructs a stream that writes bytes to the given channel.
java.nio.channels.Channels.newOutputStream(java.nio.channels.AsynchronousByteChannel),constructs a stream that writes bytes to the given channel.
"java.nio.channels.Channels.newReader(java.nio.channels.ReadableByteChannel,java.nio.charset.CharsetDecoder,int)",constructs a reader that decodes bytes from the given channel using the given decoder.
"java.nio.channels.Channels.newReader(java.nio.channels.ReadableByteChannel,java.lang.String)",constructs a reader that decodes bytes from the given channel according to the named charset.
"java.nio.channels.Channels.newWriter(java.nio.channels.WritableByteChannel,java.nio.charset.CharsetEncoder,int)",constructs a writer that encodes characters using the given encoder and writes the resulting bytes to the given channel.
"java.nio.channels.Channels.newWriter(java.nio.channels.WritableByteChannel,java.lang.String)",constructs a writer that encodes characters according to the named charset and writes the resulting bytes to the given channel.
java.nio.channels.DatagramChannel.connect(java.net.SocketAddress),connects this channel's socket.
java.nio.channels.DatagramChannel.disconnect(),disconnects this channel's socket.
java.nio.channels.DatagramChannel.getLocalAddress(),returns the socket address that this channel's socket is bound to.
java.nio.channels.DatagramChannel.getRemoteAddress(),returns the remote address to which this channel's socket is connected.
java.nio.channels.DatagramChannel.isConnected(),tells whether or not this channel's socket is connected.
java.nio.channels.DatagramChannel.open(),opens a datagram channel.
java.nio.channels.DatagramChannel.open(java.net.ProtocolFamily),opens a datagram channel.
java.nio.channels.DatagramChannel.read(java.nio.ByteBuffer),reads a datagram from this channel.
"java.nio.channels.DatagramChannel.read(java.nio.ByteBuffer[],int,int)",reads a datagram from this channel.
java.nio.channels.DatagramChannel.read(java.nio.ByteBuffer[]),reads a datagram from this channel.
java.nio.channels.DatagramChannel.receive(java.nio.ByteBuffer),receives a datagram via this channel.
"java.nio.channels.DatagramChannel.send(java.nio.ByteBuffer,java.net.SocketAddress)",sends a datagram via this channel.
java.nio.channels.DatagramChannel.socket(),retrieves a datagram socket associated with this channel.
java.nio.channels.DatagramChannel.validOps(),returns an operation set identifying this channel's supported operations.
java.nio.channels.DatagramChannel.write(java.nio.ByteBuffer),writes a datagram to this channel.
"java.nio.channels.DatagramChannel.write(java.nio.ByteBuffer[],int,int)",writes a datagram to this channel.
java.nio.channels.DatagramChannel.write(java.nio.ByteBuffer[]),writes a datagram to this channel.
java.nio.channels.FileChannel.force(boolean),forces any updates to this channel's file to be written to the storage device that contains it.
"java.nio.channels.FileChannel.lock(long,long,boolean)",acquires a lock on the given region of this channel's file.
java.nio.channels.FileChannel.lock(),acquires an exclusive lock on this channel's file.
"java.nio.channels.FileChannel.map(java.nio.channels.FileChannel.MapMode,long,long)",maps a region of this channel's file directly into memory.
"java.nio.channels.FileChannel.open(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)","opens or creates a file, returning a file channel to access the file."
"java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...)","opens or creates a file, returning a file channel to access the file."
java.nio.channels.FileChannel.position(),returns this channel's file position.
java.nio.channels.FileChannel.position(long),sets this channel's file position.
java.nio.channels.FileChannel.read(java.nio.ByteBuffer),reads a sequence of bytes from this channel into the given buffer.
"java.nio.channels.FileChannel.read(java.nio.ByteBuffer[],int,int)",reads a sequence of bytes from this channel into a subsequence of the given buffers.
java.nio.channels.FileChannel.read(java.nio.ByteBuffer[]),reads a sequence of bytes from this channel into the given buffers.
"java.nio.channels.FileChannel.read(java.nio.ByteBuffer,long)","reads a sequence of bytes from this channel into the given buffer, starting at the given file position."
java.nio.channels.FileChannel.size(),returns the current size of this channel's file.
"java.nio.channels.FileChannel.transferFrom(java.nio.channels.ReadableByteChannel,long,long)",transfers bytes into this channel's file from the given readable byte channel.
"java.nio.channels.FileChannel.transferTo(long,long,java.nio.channels.WritableByteChannel)",transfers bytes from this channel's file to the given writable byte channel.
java.nio.channels.FileChannel.truncate(long),truncates this channel's file to the given size.
"java.nio.channels.FileChannel.tryLock(long,long,boolean)",attempts to acquire a lock on the given region of this channel's file.
java.nio.channels.FileChannel.tryLock(),attempts to acquire an exclusive lock on this channel's file.
java.nio.channels.FileChannel.write(java.nio.ByteBuffer),writes a sequence of bytes to this channel from the given buffer.
"java.nio.channels.FileChannel.write(java.nio.ByteBuffer[],int,int)",writes a sequence of bytes to this channel from a subsequence of the given buffers.
java.nio.channels.FileChannel.write(java.nio.ByteBuffer[]),writes a sequence of bytes to this channel from the given buffers.
"java.nio.channels.FileChannel.write(java.nio.ByteBuffer,long)","writes a sequence of bytes to this channel from the given buffer, starting at the given file position."
java.nio.channels.FileChannel.MapMode.toString(),returns a string describing this file-mapping mode.
java.nio.channels.FileLock.acquiredBy(),returns the channel upon whose file this lock was acquired.
java.nio.channels.FileLock.channel(),returns the file channel upon whose file this lock was acquired.
java.nio.channels.FileLock.close(),this method invokes the release() method.
java.nio.channels.FileLock.isShared(),tells whether this lock is shared.
java.nio.channels.FileLock.isValid(),tells whether or not this lock is valid.
"java.nio.channels.FileLock.overlaps(long,long)",tells whether or not this lock overlaps the given lock range.
java.nio.channels.FileLock.position(),returns the position within the file of the first byte of the locked region.
java.nio.channels.FileLock.release(),releases this lock.
java.nio.channels.FileLock.size(),returns the size of the locked region in bytes.
java.nio.channels.FileLock.toString(),"returns a string describing the range, type, and validity of this lock."
java.nio.channels.MembershipKey.block(java.net.InetAddress),block multicast datagrams from the given source address.
java.nio.channels.MembershipKey.channel(),returns the channel for which this membership key was created.
java.nio.channels.MembershipKey.drop(),drop membership.
java.nio.channels.MembershipKey.group(),returns the multicast group for which this membership key was created.
java.nio.channels.MembershipKey.isValid(),tells whether or not this membership is valid.
java.nio.channels.MembershipKey.networkInterface(),returns the network interface for which this membership key was created.
java.nio.channels.MembershipKey.sourceAddress(),"returns the source address if this membership key is source-specific, or null if this membership is not source-specific."
java.nio.channels.MembershipKey.unblock(java.net.InetAddress),unblock multicast datagrams from the given source address that was previously blocked using the block method.
java.nio.channels.Pipe.open(),opens a pipe.
java.nio.channels.Pipe.sink(),returns this pipe's sink channel.
java.nio.channels.Pipe.source(),returns this pipe's source channel.
java.nio.channels.Pipe.SinkChannel.validOps(),returns an operation set identifying this channel's supported operations.
java.nio.channels.Pipe.SourceChannel.validOps(),returns an operation set identifying this channel's supported operations.
java.nio.channels.SelectableChannel.blockingLock(),retrieves the object upon which the configureblocking and register methods synchronize.
java.nio.channels.SelectableChannel.configureBlocking(boolean),adjusts this channel's blocking mode.
java.nio.channels.SelectableChannel.isBlocking(),tells whether or not every i/o operation on this channel will block until it completes.
java.nio.channels.SelectableChannel.isRegistered(),tells whether or not this channel is currently registered with any selectors.
java.nio.channels.SelectableChannel.keyFor(java.nio.channels.Selector),retrieves the key representing the channel's registration with the given selector.
java.nio.channels.SelectableChannel.provider(),returns the provider that created this channel.
"java.nio.channels.SelectableChannel.register(java.nio.channels.Selector,int,java.lang.Object)","registers this channel with the given selector, returning a selection key."
"java.nio.channels.SelectableChannel.register(java.nio.channels.Selector,int)","registers this channel with the given selector, returning a selection key."
java.nio.channels.SelectableChannel.validOps(),returns an operation set identifying this channel's supported operations.
java.nio.channels.SelectionKey.attach(java.lang.Object),attaches the given object to this key.
java.nio.channels.SelectionKey.attachment(),retrieves the current attachment.
java.nio.channels.SelectionKey.cancel(),requests that the registration of this key's channel with its selector be cancelled.
java.nio.channels.SelectionKey.channel(),returns the channel for which this key was created.
java.nio.channels.SelectionKey.interestOps(),retrieves this key's interest set.
java.nio.channels.SelectionKey.interestOps(int),sets this key's interest set to the given value.
java.nio.channels.SelectionKey.isAcceptable(),tests whether this key's channel is ready to accept a new socket connection.
java.nio.channels.SelectionKey.isConnectable(),"tests whether this key's channel has either finished, or failed to finish, its socket-connection operation."
java.nio.channels.SelectionKey.isReadable(),tests whether this key's channel is ready for reading.
java.nio.channels.SelectionKey.isValid(),tells whether or not this key is valid.
java.nio.channels.SelectionKey.isWritable(),tests whether this key's channel is ready for writing.
java.nio.channels.SelectionKey.readyOps(),retrieves this key's ready-operation set.
java.nio.channels.SelectionKey.selector(),returns the selector for which this key was created.
java.nio.channels.Selector.close(),closes this selector.
java.nio.channels.Selector.isOpen(),tells whether or not this selector is open.
java.nio.channels.Selector.keys(),returns this selector's key set.
java.nio.channels.Selector.open(),opens a selector.
java.nio.channels.Selector.provider(),returns the provider that created this channel.
java.nio.channels.Selector.select(long),selects a set of keys whose corresponding channels are ready for i/o operations.
java.nio.channels.Selector.select(),selects a set of keys whose corresponding channels are ready for i/o operations.
java.nio.channels.Selector.selectedKeys(),returns this selector's selected-key set.
java.nio.channels.Selector.selectNow(),selects a set of keys whose corresponding channels are ready for i/o operations.
java.nio.channels.Selector.wakeup(),causes the first selection operation that has not yet returned to return immediately.
java.nio.channels.ServerSocketChannel.accept(),accepts a connection made to this channel's socket.
java.nio.channels.ServerSocketChannel.bind(java.net.SocketAddress),binds the channel's socket to a local address and configures the socket to listen for connections.
"java.nio.channels.ServerSocketChannel.bind(java.net.SocketAddress,int)",binds the channel's socket to a local address and configures the socket to listen for connections.
java.nio.channels.ServerSocketChannel.getLocalAddress(),returns the socket address that this channel's socket is bound to.
java.nio.channels.ServerSocketChannel.open(),opens a server-socket channel.
java.nio.channels.ServerSocketChannel.socket(),retrieves a server socket associated with this channel.
java.nio.channels.ServerSocketChannel.validOps(),returns an operation set identifying this channel's supported operations.
java.nio.channels.SocketChannel.connect(java.net.SocketAddress),connects this channel's socket.
java.nio.channels.SocketChannel.finishConnect(),finishes the process of connecting a socket channel.
java.nio.channels.SocketChannel.getLocalAddress(),returns the socket address that this channel's socket is bound to.
java.nio.channels.SocketChannel.getRemoteAddress(),returns the remote address to which this channel's socket is connected.
java.nio.channels.SocketChannel.isConnected(),tells whether or not this channel's network socket is connected.
java.nio.channels.SocketChannel.isConnectionPending(),tells whether or not a connection operation is in progress on this channel.
java.nio.channels.SocketChannel.open(),opens a socket channel.
java.nio.channels.SocketChannel.open(java.net.SocketAddress),opens a socket channel and connects it to a remote address.
java.nio.channels.SocketChannel.shutdownInput(),shutdown the connection for reading without closing the channel.
java.nio.channels.SocketChannel.shutdownOutput(),shutdown the connection for writing without closing the channel.
java.nio.channels.SocketChannel.socket(),retrieves a socket associated with this channel.
java.nio.channels.SocketChannel.validOps(),returns an operation set identifying this channel's supported operations.
java.nio.channels.spi.AbstractInterruptibleChannel.begin(),marks the beginning of an i/o operation that might block indefinitely.
java.nio.channels.spi.AbstractInterruptibleChannel.close(),closes this channel.
java.nio.channels.spi.AbstractInterruptibleChannel.end(boolean),marks the end of an i/o operation that might block indefinitely.
java.nio.channels.spi.AbstractInterruptibleChannel.implCloseChannel(),closes this channel.
java.nio.channels.spi.AbstractSelectableChannel.configureBlocking(boolean),adjusts this channel's blocking mode.
java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel(),closes this channel.
java.nio.channels.spi.AbstractSelectableChannel.implCloseSelectableChannel(),closes this selectable channel.
java.nio.channels.spi.AbstractSelectableChannel.implConfigureBlocking(boolean),adjusts this channel's blocking mode.
java.nio.channels.spi.AbstractSelectableChannel.provider(),returns the provider that created this channel.
"java.nio.channels.spi.AbstractSelectableChannel.register(java.nio.channels.Selector,int,java.lang.Object)","registers this channel with the given selector, returning a selection key."
java.nio.channels.spi.AbstractSelectionKey.cancel(),cancels this key.
java.nio.channels.spi.AbstractSelector.begin(),marks the beginning of an i/o operation that might block indefinitely.
java.nio.channels.spi.AbstractSelector.cancelledKeys(),retrieves this selector's cancelled-key set.
java.nio.channels.spi.AbstractSelector.close(),closes this selector.
java.nio.channels.spi.AbstractSelector.deregister(java.nio.channels.spi.AbstractSelectionKey),removes the given key from its channel's key set.
java.nio.channels.spi.AbstractSelector.end(),marks the end of an i/o operation that might block indefinitely.
java.nio.channels.spi.AbstractSelector.implCloseSelector(),closes this selector.
java.nio.channels.spi.AbstractSelector.provider(),returns the provider that created this channel.
"java.nio.channels.spi.AbstractSelector.register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object)",registers the given channel with this selector.
"java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousChannelGroup(int,java.util.concurrent.ThreadFactory)",constructs a new asynchronous channel group with a fixed thread pool.
"java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousChannelGroup(java.util.concurrent.ExecutorService,int)",constructs a new asynchronous channel group with the given thread pool.
java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup),opens an asynchronous server-socket channel.
java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup),opens an asynchronous socket channel.
java.nio.channels.spi.AsynchronousChannelProvider.provider(),returns the system-wide default asynchronous channel provider for this invocation of the java virtual machine.
java.nio.channels.spi.SelectorProvider.inheritedChannel(),returns the channel inherited from the entity that created this java virtual machine.
java.nio.channels.spi.SelectorProvider.openDatagramChannel(),opens a datagram channel.
java.nio.channels.spi.SelectorProvider.openDatagramChannel(java.net.ProtocolFamily),opens a datagram channel.
java.nio.channels.spi.SelectorProvider.openPipe(),opens a pipe.
java.nio.channels.spi.SelectorProvider.openSelector(),opens a selector.
java.nio.channels.spi.SelectorProvider.openServerSocketChannel(),opens a server-socket channel.
java.nio.channels.spi.SelectorProvider.openSocketChannel(),opens a socket channel.
java.nio.channels.spi.SelectorProvider.provider(),returns the system-wide default selector provider for this invocation of the java virtual machine.
java.nio.charset.Charset.aliases(),returns a set containing this charset's aliases.
java.nio.charset.Charset.availableCharsets(),constructs a sorted map from canonical charset names to charset objects.
java.nio.charset.Charset.canEncode(),tells whether or not this charset supports encoding.
java.nio.charset.Charset.compareTo(java.nio.charset.Charset),compares this charset to another.
java.nio.charset.Charset.contains(java.nio.charset.Charset),tells whether or not this charset contains the given charset.
java.nio.charset.Charset.decode(java.nio.ByteBuffer),convenience method that decodes bytes in this charset into unicode characters.
java.nio.charset.Charset.defaultCharset(),returns the default charset of this java virtual machine.
java.nio.charset.Charset.displayName(),returns this charset's human-readable name for the default locale.
java.nio.charset.Charset.displayName(java.util.Locale),returns this charset's human-readable name for the given locale.
java.nio.charset.Charset.encode(java.nio.CharBuffer),convenience method that encodes unicode characters into bytes in this charset.
java.nio.charset.Charset.encode(java.lang.String),convenience method that encodes a string into bytes in this charset.
java.nio.charset.Charset.equals(java.lang.Object),tells whether or not this object is equal to another.
java.nio.charset.Charset.forName(java.lang.String),returns a charset object for the named charset.
java.nio.charset.Charset.hashCode(),computes a hashcode for this charset.
java.nio.charset.Charset.isRegistered(),tells whether or not this charset is registered in the iana charset registry.
java.nio.charset.Charset.isSupported(java.lang.String),tells whether the named charset is supported.
java.nio.charset.Charset.name(),returns this charset's canonical name.
java.nio.charset.Charset.newDecoder(),constructs a new decoder for this charset.
java.nio.charset.Charset.newEncoder(),constructs a new encoder for this charset.
java.nio.charset.Charset.toString(),returns a string describing this charset.
java.nio.charset.CharsetDecoder.averageCharsPerByte(),returns the average number of characters that will be produced for each byte of input.
java.nio.charset.CharsetDecoder.charset(),returns the charset that created this decoder.
"java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)","decodes as many bytes as possible from the given input buffer, writing the results to the given output buffer."
java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer),convenience method that decodes the remaining content of a single input byte buffer into a newly-allocated character buffer.
"java.nio.charset.CharsetDecoder.decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)",decodes one or more bytes into one or more characters.
java.nio.charset.CharsetDecoder.detectedCharset(),retrieves the charset that was detected by this decoder (optional operation).
java.nio.charset.CharsetDecoder.flush(java.nio.CharBuffer),flushes this decoder.
java.nio.charset.CharsetDecoder.implFlush(java.nio.CharBuffer),flushes this decoder.
java.nio.charset.CharsetDecoder.implOnMalformedInput(java.nio.charset.CodingErrorAction),reports a change to this decoder's malformed-input action.
java.nio.charset.CharsetDecoder.implOnUnmappableCharacter(java.nio.charset.CodingErrorAction),reports a change to this decoder's unmappable-character action.
java.nio.charset.CharsetDecoder.implReplaceWith(java.lang.String),reports a change to this decoder's replacement value.
java.nio.charset.CharsetDecoder.implReset(),"resets this decoder, clearing any charset-specific internal state."
java.nio.charset.CharsetDecoder.isAutoDetecting(),tells whether or not this decoder implements an auto-detecting charset.
java.nio.charset.CharsetDecoder.isCharsetDetected(),tells whether or not this decoder has yet detected a charset (optional operation).
java.nio.charset.CharsetDecoder.malformedInputAction(),returns this decoder's current action for malformed-input errors.
java.nio.charset.CharsetDecoder.maxCharsPerByte(),returns the maximum number of characters that will be produced for each byte of input.
java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction),changes this decoder's action for malformed-input errors.
java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction),changes this decoder's action for unmappable-character errors.
java.nio.charset.CharsetDecoder.replacement(),returns this decoder's replacement value.
java.nio.charset.CharsetDecoder.replaceWith(java.lang.String),changes this decoder's replacement value.
java.nio.charset.CharsetDecoder.reset(),"resets this decoder, clearing any internal state."
java.nio.charset.CharsetDecoder.unmappableCharacterAction(),returns this decoder's current action for unmappable-character errors.
java.nio.charset.CharsetEncoder.averageBytesPerChar(),returns the average number of bytes that will be produced for each character of input.
java.nio.charset.CharsetEncoder.canEncode(char),tells whether or not this encoder can encode the given character.
java.nio.charset.CharsetEncoder.canEncode(java.lang.CharSequence),tells whether or not this encoder can encode the given character sequence.
java.nio.charset.CharsetEncoder.charset(),returns the charset that created this encoder.
"java.nio.charset.CharsetEncoder.encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)","encodes as many characters as possible from the given input buffer, writing the results to the given output buffer."
java.nio.charset.CharsetEncoder.encode(java.nio.CharBuffer),convenience method that encodes the remaining content of a single input character buffer into a newly-allocated byte buffer.
"java.nio.charset.CharsetEncoder.encodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)",encodes one or more characters into one or more bytes.
java.nio.charset.CharsetEncoder.flush(java.nio.ByteBuffer),flushes this encoder.
java.nio.charset.CharsetEncoder.implFlush(java.nio.ByteBuffer),flushes this encoder.
java.nio.charset.CharsetEncoder.implOnMalformedInput(java.nio.charset.CodingErrorAction),reports a change to this encoder's malformed-input action.
java.nio.charset.CharsetEncoder.implOnUnmappableCharacter(java.nio.charset.CodingErrorAction),reports a change to this encoder's unmappable-character action.
java.nio.charset.CharsetEncoder.implReplaceWith(byte[]),reports a change to this encoder's replacement value.
java.nio.charset.CharsetEncoder.implReset(),"resets this encoder, clearing any charset-specific internal state."
java.nio.charset.CharsetEncoder.isLegalReplacement(byte[]),tells whether or not the given byte array is a legal replacement value for this encoder.
java.nio.charset.CharsetEncoder.malformedInputAction(),returns this encoder's current action for malformed-input errors.
java.nio.charset.CharsetEncoder.maxBytesPerChar(),returns the maximum number of bytes that will be produced for each character of input.
java.nio.charset.CharsetEncoder.onMalformedInput(java.nio.charset.CodingErrorAction),changes this encoder's action for malformed-input errors.
java.nio.charset.CharsetEncoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction),changes this encoder's action for unmappable-character errors.
java.nio.charset.CharsetEncoder.replacement(),returns this encoder's replacement value.
java.nio.charset.CharsetEncoder.replaceWith(byte[]),changes this encoder's replacement value.
java.nio.charset.CharsetEncoder.reset(),"resets this encoder, clearing any internal state."
java.nio.charset.CharsetEncoder.unmappableCharacterAction(),returns this encoder's current action for unmappable-character errors.
java.nio.charset.CoderResult.isError(),tells whether or not this object describes an error condition.
java.nio.charset.CoderResult.isMalformed(),tells whether or not this object describes a malformed-input error.
java.nio.charset.CoderResult.isOverflow(),tells whether or not this object describes an overflow condition.
java.nio.charset.CoderResult.isUnderflow(),tells whether or not this object describes an underflow condition.
java.nio.charset.CoderResult.isUnmappable(),tells whether or not this object describes an unmappable-character error.
java.nio.charset.CoderResult.length(),returns the length of the erroneous input described by this object (optional operation).
java.nio.charset.CoderResult.malformedForLength(int),static factory method that returns the unique object describing a malformed-input error of the given length.
java.nio.charset.CoderResult.throwException(),throws an exception appropriate to the result described by this object.
java.nio.charset.CoderResult.toString(),returns a string describing this coder result.
java.nio.charset.CoderResult.unmappableForLength(int),static factory method that returns the unique result object describing an unmappable-character error of the given length.
java.nio.charset.CodingErrorAction.toString(),returns a string describing this action.
java.nio.charset.IllegalCharsetNameException.getCharsetName(),retrieves the illegal charset name.
java.nio.charset.MalformedInputException.getInputLength(),returns the length of the input.
java.nio.charset.MalformedInputException.getMessage(),returns the message.
java.nio.charset.UnmappableCharacterException.getInputLength(),returns the length of the input.
java.nio.charset.UnmappableCharacterException.getMessage(),returns the message.
java.nio.charset.UnsupportedCharsetException.getCharsetName(),retrieves the name of the unsupported charset.
java.nio.charset.spi.CharsetProvider.charsetForName(java.lang.String),retrieves a charset for the given charset name.
java.nio.charset.spi.CharsetProvider.charsets(),creates an iterator that iterates over the charsets supported by this provider.
java.nio.file.DirectoryStream.iterator(),returns the iterator associated with this directorystream.
java.nio.file.DirectoryStream.Filter.accept(java.nio.file.DirectoryStream.Filter),decides if the given directory entry should be accepted or filtered.
"java.nio.file.FileVisitor.postVisitDirectory(java.nio.file.FileVisitor,java.io.IOException)","invoked for a directory after entries in the directory, and all of their descendants, have been visited."
"java.nio.file.FileVisitor.preVisitDirectory(java.nio.file.FileVisitor,java.nio.file.attribute.BasicFileAttributes)",invoked for a directory before entries in the directory are visited.
"java.nio.file.FileVisitor.visitFile(java.nio.file.FileVisitor,java.nio.file.attribute.BasicFileAttributes)",invoked for a file in a directory.
"java.nio.file.FileVisitor.visitFileFailed(java.nio.file.FileVisitor,java.io.IOException)",invoked for a file that could not be visited.
java.nio.file.Path.compareTo(java.nio.file.Path),compares two abstract paths lexicographically.
java.nio.file.Path.endsWith(java.nio.file.Path),tests if this path ends with the given path.
java.nio.file.Path.endsWith(java.lang.String),"tests if this path ends with a path, constructed by converting the given path string, in exactly the manner specified by the endswith(path) method."
java.nio.file.Path.equals(java.lang.Object),tests this path for equality with the given object.
java.nio.file.Path.getFileName(),returns the name of the file or directory denoted by this path as a path object.
java.nio.file.Path.getFileSystem(),returns the file system that created this object.
java.nio.file.Path.getName(int),returns a name element of this path as a path object.
java.nio.file.Path.getNameCount(),returns the number of name elements in the path.
java.nio.file.Path.getParent(),"returns the parent path, or null if this path does not have a parent."
java.nio.file.Path.getRoot(),"returns the root component of this path as a path object, or null if this path does not have a root component."
java.nio.file.Path.hashCode(),computes a hash code for this path.
java.nio.file.Path.isAbsolute(),tells whether or not this path is absolute.
java.nio.file.Path.iterator(),returns an iterator over the name elements of this path.
java.nio.file.Path.normalize(),returns a path that is this path with redundant name elements eliminated.
"java.nio.file.Path.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>[],java.nio.file.WatchEvent.Modifier...)",registers the file located by this path with a watch service.
"java.nio.file.Path.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>...)",registers the file located by this path with a watch service.
java.nio.file.Path.relativize(java.nio.file.Path),constructs a relative path between this path and a given path.
java.nio.file.Path.resolve(java.nio.file.Path),resolve the given path against this path.
java.nio.file.Path.resolve(java.lang.String),converts a given path string to a path and resolves it against this path in exactly the manner specified by the resolve method.
java.nio.file.Path.resolveSibling(java.nio.file.Path),resolves the given path against this path's parent path.
java.nio.file.Path.resolveSibling(java.lang.String),converts a given path string to a path and resolves it against this path's parent path in exactly the manner specified by the resolvesibling method.
java.nio.file.Path.startsWith(java.nio.file.Path),tests if this path starts with the given path.
java.nio.file.Path.startsWith(java.lang.String),"tests if this path starts with a path, constructed by converting the given path string, in exactly the manner specified by the startswith(path) method."
"java.nio.file.Path.subpath(int,int)",returns a relative path that is a subsequence of the name elements of this path.
java.nio.file.Path.toAbsolutePath(),returns a path object representing the absolute path of this path.
java.nio.file.Path.toFile(),returns a file object representing this path.
java.nio.file.Path.toRealPath(java.nio.file.LinkOption...),returns the real path of an existing file.
java.nio.file.Path.toString(),returns the string representation of this path.
java.nio.file.Path.toUri(),returns a uri to represent this path.
java.nio.file.PathMatcher.matches(java.nio.file.Path),tells if given path matches this matcher's pattern.
java.nio.file.SecureDirectoryStream.deleteDirectory(java.nio.file.SecureDirectoryStream),deletes a directory.
java.nio.file.SecureDirectoryStream.deleteFile(java.nio.file.SecureDirectoryStream),deletes a file.
java.nio.file.SecureDirectoryStream.getFileAttributeView(java.lang.Class<V>),returns a new file attribute view to access the file attributes of this directory.
"java.nio.file.SecureDirectoryStream.getFileAttributeView(java.nio.file.SecureDirectoryStream,java.lang.Class<V>,java.nio.file.LinkOption...)",returns a new file attribute view to access the file attributes of a file in this directory.
"java.nio.file.SecureDirectoryStream.move(java.nio.file.SecureDirectoryStream,java.nio.file.SecureDirectoryStream<java.nio.file.SecureDirectoryStream>,java.nio.file.SecureDirectoryStream)",move a file from this directory to another directory.
"java.nio.file.SecureDirectoryStream.newByteChannel(java.nio.file.SecureDirectoryStream,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)","opens or creates a file in this directory, returning a seekable byte channel to access the file."
"java.nio.file.SecureDirectoryStream.newDirectoryStream(java.nio.file.SecureDirectoryStream,java.nio.file.LinkOption...)","opens the directory identified by the given path, returning a securedirectorystream to iterate over the entries in the directory."
"java.nio.file.Watchable.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>[],java.nio.file.WatchEvent.Modifier...)",registers an object with a watch service.
"java.nio.file.Watchable.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>...)",registers an object with a watch service.
java.nio.file.WatchEvent.context(),returns the context for the event.
java.nio.file.WatchEvent.count(),returns the event count.
java.nio.file.WatchEvent.kind(),returns the event kind.
java.nio.file.WatchEvent.Kind.name(),returns the name of the event kind.
java.nio.file.WatchEvent.Kind.type(),returns the type of the context value.
java.nio.file.WatchEvent.Modifier.name(),returns the name of the modifier.
java.nio.file.WatchKey.cancel(),cancels the registration with the watch service.
java.nio.file.WatchKey.isValid(),tells whether or not this watch key is valid.
java.nio.file.WatchKey.pollEvents(),"retrieves and removes all pending events for this watch key, returning a list of the events that were retrieved."
java.nio.file.WatchKey.reset(),resets this watch key.
java.nio.file.WatchKey.watchable(),returns the object for which this watch key was created.
java.nio.file.WatchService.close(),closes this watch service.
java.nio.file.WatchService.poll(),"retrieves and removes the next watch key, or null if none are present."
"java.nio.file.WatchService.poll(long,java.util.concurrent.TimeUnit)","retrieves and removes the next watch key, waiting if necessary up to the specified wait time if none are yet present."
java.nio.file.WatchService.take(),"retrieves and removes next watch key, waiting if none are yet present."
"java.nio.file.Files.copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)",copy a file to a target file.
"java.nio.file.Files.copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption...)",copies all bytes from an input stream to a file.
"java.nio.file.Files.copy(java.nio.file.Path,java.io.OutputStream)",copies all bytes from a file to an output stream.
"java.nio.file.Files.createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)",creates a directory by creating all nonexistent parent directories first.
"java.nio.file.Files.createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)",creates a new directory.
"java.nio.file.Files.createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)","creates a new and empty file, failing if the file already exists."
"java.nio.file.Files.createLink(java.nio.file.Path,java.nio.file.Path)",creates a new link (directory entry) for an existing file (optional operation).
"java.nio.file.Files.createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)",creates a symbolic link to a target (optional operation).
"java.nio.file.Files.createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute<?>...)","creates a new directory in the specified directory, using the given prefix to generate its name."
"java.nio.file.Files.createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute<?>...)","creates a new directory in the default temporary-file directory, using the given prefix to generate its name."
"java.nio.file.Files.createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute<?>...)","creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name."
"java.nio.file.Files.createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute<?>...)","creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name."
java.nio.file.Files.delete(java.nio.file.Path),deletes a file.
java.nio.file.Files.deleteIfExists(java.nio.file.Path),deletes a file if it exists.
"java.nio.file.Files.exists(java.nio.file.Path,java.nio.file.LinkOption...)",tests whether a file exists.
"java.nio.file.Files.find(java.nio.file.Path,int,,java.nio.file.attribute.BasicFileAttributes>,java.nio.file.FileVisitOption...)",return a stream that is lazily populated with path by searching for files in a file tree rooted at a given starting file.
"java.nio.file.Files.getAttribute(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)",reads the value of a file attribute.
"java.nio.file.Files.getFileAttributeView(java.nio.file.Path,java.lang.Class<V>,java.nio.file.LinkOption...)",returns a file attribute view of a given type.
java.nio.file.Files.getFileStore(java.nio.file.Path),returns the filestore representing the file store where a file is located.
"java.nio.file.Files.getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption...)",returns a file's last modified time.
"java.nio.file.Files.getOwner(java.nio.file.Path,java.nio.file.LinkOption...)",returns the owner of a file.
"java.nio.file.Files.getPosixFilePermissions(java.nio.file.Path,java.nio.file.LinkOption...)",returns a file's posix file permissions.
"java.nio.file.Files.isDirectory(java.nio.file.Path,java.nio.file.LinkOption...)",tests whether a file is a directory.
java.nio.file.Files.isExecutable(java.nio.file.Path),tests whether a file is executable.
java.nio.file.Files.isHidden(java.nio.file.Path),tells whether or not a file is considered hidden.
java.nio.file.Files.isReadable(java.nio.file.Path),tests whether a file is readable.
"java.nio.file.Files.isRegularFile(java.nio.file.Path,java.nio.file.LinkOption...)",tests whether a file is a regular file with opaque content.
"java.nio.file.Files.isSameFile(java.nio.file.Path,java.nio.file.Path)",tests if two paths locate the same file.
java.nio.file.Files.isSymbolicLink(java.nio.file.Path),tests whether a file is a symbolic link.
java.nio.file.Files.isWritable(java.nio.file.Path),tests whether a file is writable.
"java.nio.file.Files.lines(java.nio.file.Path,java.nio.charset.Charset)",read all lines from a file as a stream.
java.nio.file.Files.lines(java.nio.file.Path),read all lines from a file as a stream.
java.nio.file.Files.list(java.nio.file.Path),"return a lazily populated stream, the elements of which are the entries in the directory."
"java.nio.file.Files.move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)",move or rename a file to a target file.
"java.nio.file.Files.newBufferedReader(java.nio.file.Path,java.nio.charset.Charset)","opens a file for reading, returning a bufferedreader that may be used to read text from the file in an efficient manner."
java.nio.file.Files.newBufferedReader(java.nio.file.Path),"opens a file for reading, returning a bufferedreader to read text from the file in an efficient manner."
"java.nio.file.Files.newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption...)","opens or creates a file for writing, returning a bufferedwriter that may be used to write text to the file in an efficient manner."
"java.nio.file.Files.newBufferedWriter(java.nio.file.Path,java.nio.file.OpenOption...)","opens or creates a file for writing, returning a bufferedwriter to write text to the file in an efficient manner."
"java.nio.file.Files.newByteChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)","opens or creates a file, returning a seekable byte channel to access the file."
"java.nio.file.Files.newByteChannel(java.nio.file.Path,java.nio.file.OpenOption...)","opens or creates a file, returning a seekable byte channel to access the file."
java.nio.file.Files.newDirectoryStream(java.nio.file.Path),"opens a directory, returning a directorystream to iterate over all entries in the directory."
"java.nio.file.Files.newDirectoryStream(java.nio.file.Path,java.lang.String)","opens a directory, returning a directorystream to iterate over the entries in the directory."
"java.nio.file.Files.newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>)","opens a directory, returning a directorystream to iterate over the entries in the directory."
"java.nio.file.Files.newInputStream(java.nio.file.Path,java.nio.file.OpenOption...)","opens a file, returning an input stream to read from the file."
"java.nio.file.Files.newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)","opens or creates a file, returning an output stream that may be used to write bytes to the file."
"java.nio.file.Files.notExists(java.nio.file.Path,java.nio.file.LinkOption...)",tests whether the file located by this path does not exist.
java.nio.file.Files.probeContentType(java.nio.file.Path),probes the content type of a file.
java.nio.file.Files.readAllBytes(java.nio.file.Path),reads all the bytes from a file.
"java.nio.file.Files.readAllLines(java.nio.file.Path,java.nio.charset.Charset)",read all lines from a file.
java.nio.file.Files.readAllLines(java.nio.file.Path),read all lines from a file.
"java.nio.file.Files.readAttributes(java.nio.file.Path,java.lang.Class<A>,java.nio.file.LinkOption...)",reads a file's attributes as a bulk operation.
"java.nio.file.Files.readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)",reads a set of file attributes as a bulk operation.
java.nio.file.Files.readSymbolicLink(java.nio.file.Path),reads the target of a symbolic link (optional operation).
"java.nio.file.Files.setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption...)",sets the value of a file attribute.
"java.nio.file.Files.setLastModifiedTime(java.nio.file.Path,java.nio.file.attribute.FileTime)",updates a file's last modified time attribute.
"java.nio.file.Files.setOwner(java.nio.file.Path,java.nio.file.attribute.UserPrincipal)",updates the file owner.
"java.nio.file.Files.setPosixFilePermissions(java.nio.file.Path,java.util.Set<java.nio.file.attribute.PosixFilePermission>)",sets a file's posix permissions.
java.nio.file.Files.size(java.nio.file.Path),returns the size of a file (in bytes).
"java.nio.file.Files.walk(java.nio.file.Path,int,java.nio.file.FileVisitOption...)",return a stream that is lazily populated with path by walking the file tree rooted at a given starting file.
"java.nio.file.Files.walk(java.nio.file.Path,java.nio.file.FileVisitOption...)",return a stream that is lazily populated with path by walking the file tree rooted at a given starting file.
"java.nio.file.Files.walkFileTree(java.nio.file.Path,java.util.Set<java.nio.file.FileVisitOption>,int,java.nio.file.FileVisitor<? super java.nio.file.Path>)",walks a file tree.
"java.nio.file.Files.walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor<? super java.nio.file.Path>)",walks a file tree.
"java.nio.file.Files.write(java.nio.file.Path,byte[],java.nio.file.OpenOption...)",writes bytes to a file.
"java.nio.file.Files.write(java.nio.file.Path,java.lang.Iterable<? extends java.lang.CharSequence>,java.nio.charset.Charset,java.nio.file.OpenOption...)",write lines of text to a file.
"java.nio.file.Files.write(java.nio.file.Path,java.lang.Iterable<? extends java.lang.CharSequence>,java.nio.file.OpenOption...)",write lines of text to a file.
java.nio.file.FileStore.getAttribute(java.lang.String),reads the value of a file store attribute.
java.nio.file.FileStore.getFileStoreAttributeView(java.lang.Class<V>),returns a filestoreattributeview of the given type.
java.nio.file.FileStore.getTotalSpace(),"returns the size, in bytes, of the file store."
java.nio.file.FileStore.getUnallocatedSpace(),returns the number of unallocated bytes in the file store.
java.nio.file.FileStore.getUsableSpace(),returns the number of bytes available to this java virtual machine on the file store.
java.nio.file.FileStore.isReadOnly(),tells whether this file store is read-only.
java.nio.file.FileStore.name(),returns the name of this file store.
java.nio.file.FileStore.supportsFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>),tells whether or not this file store supports the file attributes identified by the given file attribute view.
java.nio.file.FileStore.supportsFileAttributeView(java.lang.String),tells whether or not this file store supports the file attributes identified by the given file attribute view.
java.nio.file.FileStore.type(),returns the type of this file store.
java.nio.file.FileSystem.close(),closes this file system.
java.nio.file.FileSystem.getFileStores(),returns an object to iterate over the underlying file stores.
"java.nio.file.FileSystem.getPath(java.lang.String,java.lang.String...)","converts a path string, or a sequence of strings that when joined form a path string, to a path."
java.nio.file.FileSystem.getPathMatcher(java.lang.String),returns a pathmatcher that performs match operations on the string representation of path objects by interpreting a given pattern.
java.nio.file.FileSystem.getRootDirectories(),returns an object to iterate over the paths of the root directories.
java.nio.file.FileSystem.getSeparator(),"returns the name separator, represented as a string."
java.nio.file.FileSystem.getUserPrincipalLookupService(),returns the userprincipallookupservice for this file system (optional operation).
java.nio.file.FileSystem.isOpen(),tells whether or not this file system is open.
java.nio.file.FileSystem.isReadOnly(),tells whether or not this file system allows only read-only access to its file stores.
java.nio.file.FileSystem.newWatchService(),constructs a new watchservice (optional operation).
java.nio.file.FileSystem.provider(),returns the provider that created this file system.
java.nio.file.FileSystem.supportedFileAttributeViews(),returns the set of the names of the file attribute views supported by this filesystem.
java.nio.file.FileSystems.getDefault(),returns the default filesystem.
java.nio.file.FileSystems.getFileSystem(java.net.URI),returns a reference to an existing filesystem.
"java.nio.file.FileSystems.newFileSystem(java.net.URI,,?>)",constructs a new file system that is identified by a uri this method iterates over the installed providers to locate the provider that is identified by the uri scheme of the given uri.
"java.nio.file.FileSystems.newFileSystem(java.net.URI,,?>,java.lang.ClassLoader)","constructs a new file system that is identified by a uri this method first attempts to locate an installed provider in exactly the same manner as the newfilesystem(uri,map) method."
"java.nio.file.FileSystems.newFileSystem(java.nio.file.Path,java.lang.ClassLoader)",constructs a new filesystem to access the contents of a file as a file system.
"java.nio.file.Paths.get(java.lang.String,java.lang.String...)","converts a path string, or a sequence of strings that when joined form a path string, to a path."
java.nio.file.Paths.get(java.net.URI),converts the given uri to a path object.
"java.nio.file.SimpleFileVisitor.postVisitDirectory(java.nio.file.SimpleFileVisitor,java.io.IOException)","invoked for a directory after entries in the directory, and all of their descendants, have been visited."
"java.nio.file.SimpleFileVisitor.preVisitDirectory(java.nio.file.SimpleFileVisitor,java.nio.file.attribute.BasicFileAttributes)",invoked for a directory before entries in the directory are visited.
"java.nio.file.SimpleFileVisitor.visitFile(java.nio.file.SimpleFileVisitor,java.nio.file.attribute.BasicFileAttributes)",invoked for a file in a directory.
"java.nio.file.SimpleFileVisitor.visitFileFailed(java.nio.file.SimpleFileVisitor,java.io.IOException)",invoked for a file that could not be visited.
java.nio.file.AccessMode.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.nio.file.AccessMode.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.nio.file.FileVisitOption.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.nio.file.FileVisitOption.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.nio.file.FileVisitResult.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.nio.file.FileVisitResult.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.nio.file.LinkOption.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.nio.file.LinkOption.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.nio.file.StandardCopyOption.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.nio.file.StandardCopyOption.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.nio.file.StandardOpenOption.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.nio.file.StandardOpenOption.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.nio.file.DirectoryIteratorException.getCause(),returns the cause of this exception.
java.nio.file.FileSystemException.getFile(),returns the file used to create this exception.
java.nio.file.FileSystemException.getMessage(),returns the detail message string.
java.nio.file.FileSystemException.getOtherFile(),returns the other file used to create this exception.
java.nio.file.FileSystemException.getReason(),returns the string explaining why the file system operation failed.
java.nio.file.InvalidPathException.getIndex(),"returns an index into the input string of the position at which the error occurred, or -1 if this position is not known."
java.nio.file.InvalidPathException.getInput(),returns the input string.
java.nio.file.InvalidPathException.getMessage(),returns a string describing the error.
java.nio.file.InvalidPathException.getReason(),returns a string explaining why the input string was rejected.
java.nio.file.attribute.AclFileAttributeView.getAcl(),reads the access control list.
java.nio.file.attribute.AclFileAttributeView.name(),returns the name of the attribute view.
java.nio.file.attribute.AclFileAttributeView.setAcl(java.util.List<java.nio.file.attribute.AclEntry>),updates (replace) the access control list.
java.nio.file.attribute.AttributeView.name(),returns the name of the attribute view.
java.nio.file.attribute.BasicFileAttributes.creationTime(),returns the creation time.
java.nio.file.attribute.BasicFileAttributes.fileKey(),"returns an object that uniquely identifies the given file, or null if a file key is not available."
java.nio.file.attribute.BasicFileAttributes.isDirectory(),tells whether the file is a directory.
java.nio.file.attribute.BasicFileAttributes.isOther(),"tells whether the file is something other than a regular file, directory, or symbolic link."
java.nio.file.attribute.BasicFileAttributes.isRegularFile(),tells whether the file is a regular file with opaque content.
java.nio.file.attribute.BasicFileAttributes.isSymbolicLink(),tells whether the file is a symbolic link.
java.nio.file.attribute.BasicFileAttributes.lastAccessTime(),returns the time of last access.
java.nio.file.attribute.BasicFileAttributes.lastModifiedTime(),returns the time of last modification.
java.nio.file.attribute.BasicFileAttributes.size(),returns the size of the file (in bytes).
java.nio.file.attribute.BasicFileAttributeView.name(),returns the name of the attribute view.
java.nio.file.attribute.BasicFileAttributeView.readAttributes(),reads the basic file attributes as a bulk operation.
"java.nio.file.attribute.BasicFileAttributeView.setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)","updates any or all of the file's last modified time, last access time, and create time attributes."
java.nio.file.attribute.DosFileAttributes.isArchive(),returns the value of the archive attribute.
java.nio.file.attribute.DosFileAttributes.isHidden(),returns the value of the hidden attribute.
java.nio.file.attribute.DosFileAttributes.isReadOnly(),returns the value of the read-only attribute.
java.nio.file.attribute.DosFileAttributes.isSystem(),returns the value of the system attribute.
java.nio.file.attribute.DosFileAttributeView.name(),returns the name of the attribute view.
java.nio.file.attribute.DosFileAttributeView.setArchive(boolean),updates the value of the archive attribute.
java.nio.file.attribute.DosFileAttributeView.setHidden(boolean),updates the value of the hidden attribute.
java.nio.file.attribute.DosFileAttributeView.setReadOnly(boolean),updates the value of the read-only attribute.
java.nio.file.attribute.DosFileAttributeView.setSystem(boolean),updates the value of the system attribute.
java.nio.file.attribute.FileAttribute.name(),returns the attribute name.
java.nio.file.attribute.FileAttribute.value(),returns the attribute value.
java.nio.file.attribute.FileOwnerAttributeView.getOwner(),read the file owner.
java.nio.file.attribute.FileOwnerAttributeView.name(),returns the name of the attribute view.
java.nio.file.attribute.FileOwnerAttributeView.setOwner(java.nio.file.attribute.UserPrincipal),updates the file owner.
java.nio.file.attribute.PosixFileAttributes.group(),returns the group owner of the file.
java.nio.file.attribute.PosixFileAttributes.owner(),returns the owner of the file.
java.nio.file.attribute.PosixFileAttributes.permissions(),returns the permissions of the file.
java.nio.file.attribute.PosixFileAttributeView.name(),returns the name of the attribute view.
java.nio.file.attribute.PosixFileAttributeView.setGroup(java.nio.file.attribute.GroupPrincipal),updates the file group-owner.
java.nio.file.attribute.PosixFileAttributeView.setPermissions(java.util.Set<java.nio.file.attribute.PosixFilePermission>),updates the file permissions.
java.nio.file.attribute.UserDefinedFileAttributeView.delete(java.lang.String),deletes a user-defined attribute.
java.nio.file.attribute.UserDefinedFileAttributeView.list(),returns a list containing the names of the user-defined attributes.
java.nio.file.attribute.UserDefinedFileAttributeView.name(),returns the name of this attribute view.
"java.nio.file.attribute.UserDefinedFileAttributeView.read(java.lang.String,java.nio.ByteBuffer)",read the value of a user-defined attribute into a buffer.
java.nio.file.attribute.UserDefinedFileAttributeView.size(java.lang.String),returns the size of the value of a user-defined attribute.
"java.nio.file.attribute.UserDefinedFileAttributeView.write(java.lang.String,java.nio.ByteBuffer)",writes the value of a user-defined attribute from a buffer.
java.nio.file.attribute.AclEntry.equals(java.lang.Object),compares the specified object with this acl entry for equality.
java.nio.file.attribute.AclEntry.flags(),returns a copy of the flags component.
java.nio.file.attribute.AclEntry.hashCode(),returns the hash-code value for this acl entry.
java.nio.file.attribute.AclEntry.newBuilder(),constructs a new builder.
java.nio.file.attribute.AclEntry.newBuilder(java.nio.file.attribute.AclEntry),constructs a new builder with the components of an existing acl entry.
java.nio.file.attribute.AclEntry.permissions(),returns a copy of the permissions component.
java.nio.file.attribute.AclEntry.principal(),returns the principal component.
java.nio.file.attribute.AclEntry.toString(),returns the string representation of this acl entry.
java.nio.file.attribute.AclEntry.type(),returns the acl entry type.
java.nio.file.attribute.AclEntry.Builder.build(),constructs an aclentry from the components of this builder.
java.nio.file.attribute.AclEntry.Builder.setFlags(java.util.Set<java.nio.file.attribute.AclEntryFlag>),sets the flags component of this builder.
java.nio.file.attribute.AclEntry.Builder.setFlags(java.nio.file.attribute.AclEntryFlag...),sets the flags component of this builder.
java.nio.file.attribute.AclEntry.Builder.setPermissions(java.util.Set<java.nio.file.attribute.AclEntryPermission>),sets the permissions component of this builder.
java.nio.file.attribute.AclEntry.Builder.setPermissions(java.nio.file.attribute.AclEntryPermission...),sets the permissions component of this builder.
java.nio.file.attribute.AclEntry.Builder.setPrincipal(java.nio.file.attribute.UserPrincipal),sets the principal component of this builder.
java.nio.file.attribute.AclEntry.Builder.setType(java.nio.file.attribute.AclEntryType),sets the type component of this builder.
java.nio.file.attribute.FileTime.compareTo(java.nio.file.attribute.FileTime),compares the value of two filetime objects for order.
java.nio.file.attribute.FileTime.equals(java.lang.Object),tests this filetime for equality with the given object.
"java.nio.file.attribute.FileTime.from(long,java.util.concurrent.TimeUnit)",returns a filetime representing a value at the given unit of granularity.
java.nio.file.attribute.FileTime.from(java.time.Instant),returns a filetime representing the same point of time value on the time-line as the provided instant object.
java.nio.file.attribute.FileTime.fromMillis(long),returns a filetime representing the given value in milliseconds.
java.nio.file.attribute.FileTime.hashCode(),computes a hash code for this file time.
java.nio.file.attribute.FileTime.to(java.util.concurrent.TimeUnit),returns the value at the given unit of granularity.
java.nio.file.attribute.FileTime.toInstant(),converts this filetime object to an instant.
java.nio.file.attribute.FileTime.toMillis(),returns the value in milliseconds.
java.nio.file.attribute.FileTime.toString(),returns the string representation of this filetime.
java.nio.file.attribute.PosixFilePermissions.asFileAttribute(java.util.Set<java.nio.file.attribute.PosixFilePermission>),"creates a fileattribute, encapsulating a copy of the given file permissions, suitable for passing to the createfile or createdirectory methods."
java.nio.file.attribute.PosixFilePermissions.fromString(java.lang.String),returns the set of permissions corresponding to a given string representation.
java.nio.file.attribute.PosixFilePermissions.toString(java.util.Set<java.nio.file.attribute.PosixFilePermission>),returns the string representation of a set of permissions.
java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByGroupName(java.lang.String),lookup a group principal by group name.
java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByName(java.lang.String),lookup a user principal by name.
java.nio.file.attribute.AclEntryFlag.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.nio.file.attribute.AclEntryFlag.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.nio.file.attribute.AclEntryPermission.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.nio.file.attribute.AclEntryPermission.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.nio.file.attribute.AclEntryType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.nio.file.attribute.AclEntryType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.nio.file.attribute.PosixFilePermission.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.nio.file.attribute.PosixFilePermission.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.nio.file.attribute.UserPrincipalNotFoundException.getName(),"returns the user principal name if this exception was created with the user principal name that was not found, otherwise null."
"java.nio.file.spi.FileSystemProvider.checkAccess(java.nio.file.Path,java.nio.file.AccessMode...)","checks the existence, and optionally the accessibility, of a file."
"java.nio.file.spi.FileSystemProvider.copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)",copy a file to a target file.
"java.nio.file.spi.FileSystemProvider.createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)",creates a new directory.
"java.nio.file.spi.FileSystemProvider.createLink(java.nio.file.Path,java.nio.file.Path)",creates a new link (directory entry) for an existing file.
"java.nio.file.spi.FileSystemProvider.createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)",creates a symbolic link to a target.
java.nio.file.spi.FileSystemProvider.delete(java.nio.file.Path),deletes a file.
java.nio.file.spi.FileSystemProvider.deleteIfExists(java.nio.file.Path),deletes a file if it exists.
"java.nio.file.spi.FileSystemProvider.getFileAttributeView(java.nio.file.Path,java.lang.Class<V>,java.nio.file.LinkOption...)",returns a file attribute view of a given type.
java.nio.file.spi.FileSystemProvider.getFileStore(java.nio.file.Path),returns the filestore representing the file store where a file is located.
java.nio.file.spi.FileSystemProvider.getFileSystem(java.net.URI),returns an existing filesystem created by this provider.
java.nio.file.spi.FileSystemProvider.getPath(java.net.URI),return a path object by converting the given uri.
java.nio.file.spi.FileSystemProvider.getScheme(),returns the uri scheme that identifies this provider.
java.nio.file.spi.FileSystemProvider.installedProviders(),returns a list of the installed file system providers.
java.nio.file.spi.FileSystemProvider.isHidden(java.nio.file.Path),tells whether or not a file is considered hidden.
"java.nio.file.spi.FileSystemProvider.isSameFile(java.nio.file.Path,java.nio.file.Path)",tests if two paths locate the same file.
"java.nio.file.spi.FileSystemProvider.move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)",move or rename a file to a target file.
"java.nio.file.spi.FileSystemProvider.newAsynchronousFileChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute<?>...)","opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file."
"java.nio.file.spi.FileSystemProvider.newByteChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)","opens or creates a file, returning a seekable byte channel to access the file."
"java.nio.file.spi.FileSystemProvider.newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>)","opens a directory, returning a directorystream to iterate over the entries in the directory."
"java.nio.file.spi.FileSystemProvider.newFileChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)","opens or creates a file for reading and/or writing, returning a file channel to access the file."
"java.nio.file.spi.FileSystemProvider.newFileSystem(java.net.URI,,?>)",constructs a new filesystem object identified by a uri.
"java.nio.file.spi.FileSystemProvider.newFileSystem(java.nio.file.Path,,?>)",constructs a new filesystem to access the contents of a file as a file system.
"java.nio.file.spi.FileSystemProvider.newInputStream(java.nio.file.Path,java.nio.file.OpenOption...)","opens a file, returning an input stream to read from the file."
"java.nio.file.spi.FileSystemProvider.newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)","opens or creates a file, returning an output stream that may be used to write bytes to the file."
"java.nio.file.spi.FileSystemProvider.readAttributes(java.nio.file.Path,java.lang.Class<A>,java.nio.file.LinkOption...)",reads a file's attributes as a bulk operation.
"java.nio.file.spi.FileSystemProvider.readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)",reads a set of file attributes as a bulk operation.
java.nio.file.spi.FileSystemProvider.readSymbolicLink(java.nio.file.Path),reads the target of a symbolic link.
"java.nio.file.spi.FileSystemProvider.setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption...)",sets the value of a file attribute.
java.nio.file.spi.FileTypeDetector.probeContentType(java.nio.file.Path),probes the given file to guess its content type.
java.rmi.MarshalledObject.equals(java.lang.Object),compares this marshalledobject to another object.
java.rmi.MarshalledObject.get(),returns a new copy of the contained marshalledobject.
java.rmi.MarshalledObject.hashCode(),return a hash code for this marshalledobject.
"java.rmi.Naming.bind(java.lang.String,java.rmi.Remote)",binds the specified name to a remote object.
java.rmi.Naming.list(java.lang.String),returns an array of the names bound in the registry.
java.rmi.Naming.lookup(java.lang.String),"returns a reference, a stub, for the remote object associated with the specified name."
"java.rmi.Naming.rebind(java.lang.String,java.rmi.Remote)",rebinds the specified name to a new remote object.
java.rmi.Naming.unbind(java.lang.String),destroys the binding for the specified name that is associated with a remote object.
java.rmi.RemoteException.getCause(),returns the cause of this exception.
java.rmi.RemoteException.getMessage(),"returns the detail message, including the message from the cause, if any, of this exception."
"java.rmi.activation.ActivationInstantiator.newInstance(java.rmi.activation.ActivationID,java.rmi.activation.ActivationDesc)","the activator calls an instantiator's newinstance method in order to recreate in that group an object with the activation identifier, id, and descriptor, desc."
"java.rmi.activation.ActivationMonitor.activeObject(java.rmi.activation.ActivationID,java.rmi.MarshalledObject<? extends java.rmi.Remote>)",informs that an object is now active.
"java.rmi.activation.ActivationMonitor.inactiveGroup(java.rmi.activation.ActivationGroupID,long)",informs that the group is now inactive.
java.rmi.activation.ActivationMonitor.inactiveObject(java.rmi.activation.ActivationID),an activation group calls its monitor's inactiveobject method when an object in its group becomes inactive (deactivates).
"java.rmi.activation.ActivationSystem.activeGroup(java.rmi.activation.ActivationGroupID,java.rmi.activation.ActivationInstantiator,long)",callback to inform activation system that group is now active.
java.rmi.activation.ActivationSystem.getActivationDesc(java.rmi.activation.ActivationID),"returns the activation descriptor, for the object with the activation identifier, id."
java.rmi.activation.ActivationSystem.getActivationGroupDesc(java.rmi.activation.ActivationGroupID),"returns the activation group descriptor, for the group with the activation group identifier, id."
java.rmi.activation.ActivationSystem.registerGroup(java.rmi.activation.ActivationGroupDesc),register the activation group.
java.rmi.activation.ActivationSystem.registerObject(java.rmi.activation.ActivationDesc),"the registerobject method is used to register an activation descriptor, desc, and obtain an activation identifier for a activatable remote object."
"java.rmi.activation.ActivationSystem.setActivationDesc(java.rmi.activation.ActivationID,java.rmi.activation.ActivationDesc)","set the activation descriptor, desc for the object with the activation identifier, id."
"java.rmi.activation.ActivationSystem.setActivationGroupDesc(java.rmi.activation.ActivationGroupID,java.rmi.activation.ActivationGroupDesc)","set the activation group descriptor, desc for the object with the activation group identifier, id."
java.rmi.activation.ActivationSystem.shutdown(),shutdown the activation system.
java.rmi.activation.ActivationSystem.unregisterGroup(java.rmi.activation.ActivationGroupID),remove the activation group.
java.rmi.activation.ActivationSystem.unregisterObject(java.rmi.activation.ActivationID),remove the activation id and associated descriptor previously registered with the activationsystem; the object can no longer be activated via the object's activation id.
"java.rmi.activation.Activator.activate(java.rmi.activation.ActivationID,boolean)","activate the object associated with the activation identifier, id."
"java.rmi.activation.Activatable.exportObject(java.rmi.Remote,java.lang.String,java.rmi.MarshalledObject<?>,boolean,int)","registers an activation descriptor (with the specified location, data, and restart mode) for the specified object, and exports that object with the specified port."
"java.rmi.activation.Activatable.exportObject(java.rmi.Remote,java.lang.String,java.rmi.MarshalledObject<?>,boolean,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)","registers an activation descriptor (with the specified location, data, and restart mode) for the specified object, and exports that object with the specified port, and the specified client and server socket factories."
"java.rmi.activation.Activatable.exportObject(java.rmi.Remote,java.rmi.activation.ActivationID,int)",export the activatable remote object to the rmi runtime to make the object available to receive incoming calls.
"java.rmi.activation.Activatable.exportObject(java.rmi.Remote,java.rmi.activation.ActivationID,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)",export the activatable remote object to the rmi runtime to make the object available to receive incoming calls.
java.rmi.activation.Activatable.getID(),returns the object's activation identifier.
java.rmi.activation.Activatable.inactive(java.rmi.activation.ActivationID),informs the system that the object with the corresponding activation id is currently inactive.
java.rmi.activation.Activatable.register(java.rmi.activation.ActivationDesc),register an object descriptor for an activatable remote object so that is can be activated on demand.
"java.rmi.activation.Activatable.unexportObject(java.rmi.Remote,boolean)","remove the remote object, obj, from the rmi runtime."
java.rmi.activation.Activatable.unregister(java.rmi.activation.ActivationID),revokes previous registration for the activation descriptor associated with id.
java.rmi.activation.ActivationDesc.equals(java.lang.Object),compares two activation descriptors for content equality.
java.rmi.activation.ActivationDesc.getClassName(),returns the class name for the object specified by this descriptor.
java.rmi.activation.ActivationDesc.getData(),"returns a ""marshalled object"" containing intialization/activation data for the object specified by this descriptor."
java.rmi.activation.ActivationDesc.getGroupID(),returns the group identifier for the object specified by this descriptor.
java.rmi.activation.ActivationDesc.getLocation(),returns the code location for the object specified by this descriptor.
java.rmi.activation.ActivationDesc.getRestartMode(),"returns the ""restart"" mode of the object associated with this activation descriptor."
java.rmi.activation.ActivationDesc.hashCode(),return the same hashcode for similar activationdescs.
"java.rmi.activation.ActivationGroup.activeObject(java.rmi.activation.ActivationID,java.rmi.Remote)",the group's activeobject method is called when an object is exported (either by activatable object construction or an explicit call to activatable.
"java.rmi.activation.ActivationGroup.activeObject(java.rmi.activation.ActivationID,java.rmi.MarshalledObject<? extends java.rmi.Remote>)",this protected method is necessary for subclasses to make the activeobject callback to the group's monitor.
"java.rmi.activation.ActivationGroup.createGroup(java.rmi.activation.ActivationGroupID,java.rmi.activation.ActivationGroupDesc,long)",create and set the activation group for the current vm.
java.rmi.activation.ActivationGroup.currentGroupID(),returns the current activation group's identifier.
java.rmi.activation.ActivationGroup.getSystem(),returns the activation system for the vm.
java.rmi.activation.ActivationGroup.inactiveGroup(),this protected method is necessary for subclasses to make the inactivegroup callback to the group's monitor.
java.rmi.activation.ActivationGroup.inactiveObject(java.rmi.activation.ActivationID),the group's inactiveobject method is called indirectly via a call to the activatable.
java.rmi.activation.ActivationGroup.setSystem(java.rmi.activation.ActivationSystem),set the activation system for the vm.
"java.rmi.activation.ActivationGroup_Stub.newInstance(java.rmi.activation.ActivationID,java.rmi.activation.ActivationDesc)",stub method for activationgroup.
java.rmi.activation.ActivationGroupDesc.equals(java.lang.Object),compares two activation group descriptors for content equality.
java.rmi.activation.ActivationGroupDesc.getClassName(),returns the group's class name (possibly null).
java.rmi.activation.ActivationGroupDesc.getCommandEnvironment(),returns the group's command-environment control object.
java.rmi.activation.ActivationGroupDesc.getData(),returns the group's initialization data.
java.rmi.activation.ActivationGroupDesc.getLocation(),returns the group's code location.
java.rmi.activation.ActivationGroupDesc.getPropertyOverrides(),returns the group's property-override list.
java.rmi.activation.ActivationGroupDesc.hashCode(),produce identical numbers for similar activationgroupdescs.
java.rmi.activation.ActivationGroupDesc.CommandEnvironment.equals(java.lang.Object),compares two command environments for content equality.
java.rmi.activation.ActivationGroupDesc.CommandEnvironment.getCommandOptions(),fetch the configured java command options.
java.rmi.activation.ActivationGroupDesc.CommandEnvironment.getCommandPath(),fetch the configured path-qualified java command name.
java.rmi.activation.ActivationGroupDesc.CommandEnvironment.hashCode(),return identical values for similar commandenvironments.
java.rmi.activation.ActivationGroupID.equals(java.lang.Object),compares two group identifiers for content equality.
java.rmi.activation.ActivationGroupID.getSystem(),returns the group's activation system.
java.rmi.activation.ActivationGroupID.hashCode(),returns a hashcode for the group's identifier.
java.rmi.activation.ActivationID.activate(boolean),activate the object for this id.
java.rmi.activation.ActivationID.equals(java.lang.Object),compares two activation ids for content equality.
java.rmi.activation.ActivationID.hashCode(),returns a hashcode for the activation id.
java.rmi.activation.ActivationException.getCause(),returns the cause of this exception.
java.rmi.activation.ActivationException.getMessage(),"returns the detail message, including the message from the cause, if any, of this exception."
"java.rmi.dgc.DGC.clean(java.rmi.server.ObjID[],long,java.rmi.dgc.VMID,boolean)",the clean call removes the 'vmid' from the reference list of each remote object indicated in 'id's.
"java.rmi.dgc.DGC.dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)",the dirty call requests leases for the remote object references associated with the object identifiers contained in the array 'ids'.
java.rmi.dgc.Lease.getValue(),returns the lease duration.
java.rmi.dgc.Lease.getVMID(),returns the client vmid associated with the lease.
java.rmi.dgc.VMID.equals(java.lang.Object),"compare this vmid to another, and return true if they are the same identifier."
java.rmi.dgc.VMID.hashCode(),compute hash code for this vmid.
java.rmi.dgc.VMID.toString(),return string representation of this vmid.
"java.rmi.registry.Registry.bind(java.lang.String,java.rmi.Remote)",binds a remote reference to the specified name in this registry.
java.rmi.registry.Registry.list(),returns an array of the names bound in this registry.
java.rmi.registry.Registry.lookup(java.lang.String),returns the remote reference bound to the specified name in this registry.
"java.rmi.registry.Registry.rebind(java.lang.String,java.rmi.Remote)",replaces the binding for the specified name in this registry with the supplied remote reference.
java.rmi.registry.Registry.unbind(java.lang.String),removes the binding for the specified name in this registry.
java.rmi.registry.LocateRegistry.createRegistry(int),creates and exports a registry instance on the local host that accepts requests on the specified port.
"java.rmi.registry.LocateRegistry.createRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)",creates and exports a registry instance on the local host that uses custom socket factories for communication with that instance.
java.rmi.registry.LocateRegistry.getRegistry(),returns a reference to the the remote object registry for the local host on the default registry port of 1099.
java.rmi.registry.LocateRegistry.getRegistry(int),returns a reference to the the remote object registry for the local host on the specified port.
java.rmi.registry.LocateRegistry.getRegistry(java.lang.String),returns a reference to the remote object registry on the specified host on the default registry port of 1099.
"java.rmi.registry.LocateRegistry.getRegistry(java.lang.String,int)",returns a reference to the remote object registry on the specified host and port.
"java.rmi.registry.LocateRegistry.getRegistry(java.lang.String,int,java.rmi.server.RMIClientSocketFactory)",returns a locally created remote reference to the remote object registry on the specified host and port.
java.rmi.server.RemoteRef.getRefClass(java.io.ObjectOutput),returns the class name of the ref type to be serialized onto the stream 'out'.
"java.rmi.server.RemoteRef.invoke(java.rmi.Remote,java.lang.reflect.Method,java.lang.Object[],long)",invoke a method.
java.rmi.server.RemoteRef.remoteEquals(java.rmi.server.RemoteRef),compares two remote objects for equality.
java.rmi.server.RemoteRef.remoteHashCode(),returns a hashcode for a remote object.
java.rmi.server.RemoteRef.remoteToString(),returns a string that represents the reference of this remote object.
"java.rmi.server.RMIClientSocketFactory.createSocket(java.lang.String,int)",create a client socket connected to the specified host and port.
java.rmi.server.RMIFailureHandler.failure(java.lang.Exception),the failure callback is invoked when the rmi runtime is unable to create a serversocket via the rmisocketfactory.
java.rmi.server.RMIServerSocketFactory.createServerSocket(int),create a server socket on the specified port (port 0 indicates an anonymous port).
java.rmi.server.Unreferenced.unreferenced(),"called by the rmi runtime sometime after the runtime determines that the reference list, the list of clients referencing the remote object, becomes empty."
java.rmi.server.ObjID.equals(java.lang.Object),compares the specified object with this objid for equality.
java.rmi.server.ObjID.hashCode(),"returns the hash code value for this object identifier, the object number."
java.rmi.server.ObjID.read(java.io.ObjectInput),constructs and returns a new objid instance by unmarshalling a binary representation from an objectinput instance.
java.rmi.server.ObjID.toString(),returns a string representation of this object identifier.
java.rmi.server.ObjID.write(java.io.ObjectOutput),marshals a binary representation of this objid to an objectoutput instance.
java.rmi.server.RemoteObject.equals(java.lang.Object),compares two remote objects for equality.
java.rmi.server.RemoteObject.getRef(),returns the remote reference for the remote object.
java.rmi.server.RemoteObject.hashCode(),returns a hashcode for a remote object.
java.rmi.server.RemoteObject.toString(),returns a string that represents the value of this remote object.
java.rmi.server.RemoteObject.toStub(java.rmi.Remote),returns the stub for the remote object obj passed as a parameter.
"java.rmi.server.RemoteObjectInvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])","processes a method invocation made on the encapsulating proxy instance, proxy, and returns the result."
java.rmi.server.RemoteServer.getClientHost(),returns a string representation of the client host for the remote method invocation being processed in the current thread.
java.rmi.server.RemoteServer.getLog(),returns stream for the rmi call log.
java.rmi.server.RemoteServer.setLog(java.io.OutputStream),log rmi calls to the output stream out.
java.rmi.server.RMIClassLoader.getClassAnnotation(java.lang.Class<?>),returns the annotation string (representing a location for the class definition) that rmi will use to annotate the class descriptor when marshalling objects of the given class.
java.rmi.server.RMIClassLoader.getClassLoader(java.lang.String),returns a class loader that loads classes from the given codebase url path.
java.rmi.server.RMIClassLoader.getDefaultProviderInstance(),returns the canonical instance of the default provider for the service provider interface rmiclassloaderspi.
"java.rmi.server.RMIClassLoader.loadClass(java.net.URL,java.lang.String)",loads a class from a codebase url.
"java.rmi.server.RMIClassLoader.loadClass(java.lang.String,java.lang.String)",loads a class from a codebase url path.
"java.rmi.server.RMIClassLoader.loadClass(java.lang.String,java.lang.String,java.lang.ClassLoader)","loads a class from a codebase url path, optionally using the supplied loader."
"java.rmi.server.RMIClassLoader.loadProxyClass(java.lang.String,java.lang.String[],java.lang.ClassLoader)",loads a dynamic proxy class (see proxy) that implements a set of interfaces with the given names from a codebase url path.
java.rmi.server.RMIClassLoaderSpi.getClassAnnotation(java.lang.Class<?>),provides the implementation for rmiclassloader.
java.rmi.server.RMIClassLoaderSpi.getClassLoader(java.lang.String),provides the implementation for rmiclassloader.
"java.rmi.server.RMIClassLoaderSpi.loadClass(java.lang.String,java.lang.String,java.lang.ClassLoader)",provides the implementation for rmiclassloader.
"java.rmi.server.RMIClassLoaderSpi.loadProxyClass(java.lang.String,java.lang.String[],java.lang.ClassLoader)",provides the implementation for rmiclassloader.
java.rmi.server.RMISocketFactory.createServerSocket(int),create a server socket on the specified port (port 0 indicates an anonymous port).
"java.rmi.server.RMISocketFactory.createSocket(java.lang.String,int)",creates a client socket connected to the specified host and port.
java.rmi.server.RMISocketFactory.getDefaultSocketFactory(),returns a reference to the default socket factory used by this rmi implementation.
java.rmi.server.RMISocketFactory.getFailureHandler(),returns the handler for socket creation failure set by the setfailurehandler method.
java.rmi.server.RMISocketFactory.getSocketFactory(),returns the socket factory set by the setsocketfactory method.
java.rmi.server.RMISocketFactory.setFailureHandler(java.rmi.server.RMIFailureHandler),sets the failure handler to be called by the rmi runtime if server socket creation fails.
java.rmi.server.RMISocketFactory.setSocketFactory(java.rmi.server.RMISocketFactory),set the global socket factory from which rmi gets sockets (if the remote object is not associated with a specific client and/or server socket factory).
java.rmi.server.UID.equals(java.lang.Object),compares the specified object with this uid for equality.
java.rmi.server.UID.hashCode(),returns the hash code value for this uid.
java.rmi.server.UID.read(java.io.DataInput),constructs and returns a new uid instance by unmarshalling a binary representation from an datainput instance.
java.rmi.server.UID.toString(),returns a string representation of this uid.
java.rmi.server.UID.write(java.io.DataOutput),marshals a binary representation of this uid to a dataoutput instance.
java.rmi.server.UnicastRemoteObject.clone(),returns a clone of the remote object that is distinct from the original.
"java.rmi.server.UnicastRemoteObject.exportObject(java.rmi.Remote,int)","exports the remote object to make it available to receive incoming calls, using the particular supplied port."
"java.rmi.server.UnicastRemoteObject.exportObject(java.rmi.Remote,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)","exports the remote object to make it available to receive incoming calls, using a transport specified by the given socket factory."
"java.rmi.server.UnicastRemoteObject.unexportObject(java.rmi.Remote,boolean)","removes the remote object, obj, from the rmi runtime."
java.rmi.server.ServerCloneException.getCause(),returns the cause of this exception.
java.rmi.server.ServerCloneException.getMessage(),"returns the detail message, including the message from the cause, if any, of this exception."
"java.security.AlgorithmConstraints.permits(java.util.Set<java.security.CryptoPrimitive>,java.lang.String,java.security.AlgorithmParameters)",determines whether an algorithm is granted permission for the specified cryptographic primitives.
"java.security.AlgorithmConstraints.permits(java.util.Set<java.security.CryptoPrimitive>,java.security.Key)",determines whether a key is granted permission for the specified cryptographic primitives.
"java.security.AlgorithmConstraints.permits(java.util.Set<java.security.CryptoPrimitive>,java.lang.String,java.security.Key,java.security.AlgorithmParameters)",determines whether an algorithm and the corresponding key are granted permission for the specified cryptographic primitives.
"java.security.DomainCombiner.combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])",modify or update the provided protectiondomains.
java.security.Guard.checkGuard(java.lang.Object),determines whether or not to allow access to the guarded object object.
java.security.Key.getAlgorithm(),returns the standard algorithm name for this key.
java.security.Key.getEncoded(),"returns the key in its primary encoding format, or null if this key does not support encoding."
java.security.Key.getFormat(),"returns the name of the primary encoding format of this key, or null if this key does not support encoding."
java.security.KeyStore.Entry.getAttributes(),retrieves the attributes associated with an entry.
java.security.KeyStore.Entry.Attribute.getName(),returns the attribute's name.
java.security.KeyStore.Entry.Attribute.getValue(),returns the attribute's value.
java.security.KeyStore.LoadStoreParameter.getProtectionParameter(),gets the parameter used to protect keystore data.
java.security.Principal.equals(java.lang.Object),compares this principal to the specified object.
java.security.Principal.getName(),returns the name of this principal.
java.security.Principal.hashCode(),returns a hashcode for this principal.
java.security.Principal.implies(javax.security.auth.Subject),returns true if the specified subject is implied by this principal.
java.security.Principal.toString(),returns a string representation of this principal.
java.security.PrivilegedAction.run(),performs the computation.
java.security.PrivilegedExceptionAction.run(),performs the computation.
java.security.AccessControlContext.checkPermission(java.security.Permission),"determines whether the access request indicated by the specified permission should be allowed or denied, based on the security policy currently in effect, and the context in this object."
java.security.AccessControlContext.equals(java.lang.Object),checks two accesscontrolcontext objects for equality.
java.security.AccessControlContext.getDomainCombiner(),get the domaincombiner associated with this accesscontrolcontext.
java.security.AccessControlContext.hashCode(),returns the hash code value for this context.
java.security.AccessController.checkPermission(java.security.Permission),"determines whether the access request indicated by the specified permission should be allowed or denied, based on the current accesscontrolcontext and security policy."
java.security.AccessController.doPrivileged(java.security.PrivilegedAction<T>),performs the specified privilegedaction with privileges enabled.
"java.security.AccessController.doPrivileged(java.security.PrivilegedAction<T>,java.security.AccessControlContext)",performs the specified privilegedaction with privileges enabled and restricted by the specified accesscontrolcontext.
"java.security.AccessController.doPrivileged(java.security.PrivilegedAction<T>,java.security.AccessControlContext,java.security.Permission...)",performs the specified privilegedaction with privileges enabled and restricted by the specified accesscontrolcontext and with a privilege scope limited by specified permission arguments.
java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction<T>),performs the specified privilegedexceptionaction with privileges enabled.
"java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction<T>,java.security.AccessControlContext)",performs the specified privilegedexceptionaction with privileges enabled and restricted by the specified accesscontrolcontext.
"java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction<T>,java.security.AccessControlContext,java.security.Permission...)",performs the specified privilegedexceptionaction with privileges enabled and restricted by the specified accesscontrolcontext and with a privilege scope limited by specified permission arguments.
java.security.AccessController.doPrivilegedWithCombiner(java.security.PrivilegedAction<T>),performs the specified privilegedaction with privileges enabled.
"java.security.AccessController.doPrivilegedWithCombiner(java.security.PrivilegedAction<T>,java.security.AccessControlContext,java.security.Permission...)",performs the specified privilegedaction with privileges enabled and restricted by the specified accesscontrolcontext and with a privilege scope limited by specified permission arguments.
java.security.AccessController.doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction<T>),performs the specified privilegedexceptionaction with privileges enabled.
"java.security.AccessController.doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction<T>,java.security.AccessControlContext,java.security.Permission...)",performs the specified privilegedexceptionaction with privileges enabled and restricted by the specified accesscontrolcontext and with a privilege scope limited by specified permission arguments.
java.security.AccessController.getContext(),"this method takes a ""snapshot"" of the current calling context, which includes the current thread's inherited accesscontrolcontext and any limited privilege scope, and places it in an accesscontrolcontext object."
java.security.AlgorithmParameterGenerator.generateParameters(),generates the parameters.
java.security.AlgorithmParameterGenerator.getAlgorithm(),returns the standard name of the algorithm this parameter generator is associated with.
java.security.AlgorithmParameterGenerator.getInstance(java.lang.String),returns an algorithmparametergenerator object for generating a set of parameters to be used with the specified algorithm.
"java.security.AlgorithmParameterGenerator.getInstance(java.lang.String,java.lang.String)",returns an algorithmparametergenerator object for generating a set of parameters to be used with the specified algorithm.
"java.security.AlgorithmParameterGenerator.getInstance(java.lang.String,java.security.Provider)",returns an algorithmparametergenerator object for generating a set of parameters to be used with the specified algorithm.
java.security.AlgorithmParameterGenerator.getProvider(),returns the provider of this algorithm parameter generator object.
java.security.AlgorithmParameterGenerator.init(int),initializes this parameter generator for a certain size.
"java.security.AlgorithmParameterGenerator.init(int,java.security.SecureRandom)",initializes this parameter generator for a certain size and source of randomness.
java.security.AlgorithmParameterGenerator.init(java.security.spec.AlgorithmParameterSpec),initializes this parameter generator with a set of algorithm-specific parameter generation values.
"java.security.AlgorithmParameterGenerator.init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",initializes this parameter generator with a set of algorithm-specific parameter generation values.
java.security.AlgorithmParameterGeneratorSpi.engineGenerateParameters(),generates the parameters.
"java.security.AlgorithmParameterGeneratorSpi.engineInit(int,java.security.SecureRandom)",initializes this parameter generator for a certain size and source of randomness.
"java.security.AlgorithmParameterGeneratorSpi.engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",initializes this parameter generator with a set of algorithm-specific parameter generation values.
java.security.AlgorithmParameters.getAlgorithm(),returns the name of the algorithm associated with this parameter object.
java.security.AlgorithmParameters.getEncoded(),returns the parameters in their primary encoding format.
java.security.AlgorithmParameters.getEncoded(java.lang.String),returns the parameters encoded in the specified scheme.
java.security.AlgorithmParameters.getInstance(java.lang.String),returns a parameter object for the specified algorithm.
"java.security.AlgorithmParameters.getInstance(java.lang.String,java.lang.String)",returns a parameter object for the specified algorithm.
"java.security.AlgorithmParameters.getInstance(java.lang.String,java.security.Provider)",returns a parameter object for the specified algorithm.
java.security.AlgorithmParameters.getParameterSpec(java.lang.Class<T>),returns a (transparent) specification of this parameter object.
java.security.AlgorithmParameters.getProvider(),returns the provider of this parameter object.
java.security.AlgorithmParameters.init(java.security.spec.AlgorithmParameterSpec),initializes this parameter object using the parameters specified in paramspec.
java.security.AlgorithmParameters.init(byte[]),imports the specified parameters and decodes them according to the primary decoding format for parameters.
"java.security.AlgorithmParameters.init(byte[],java.lang.String)",imports the parameters from params and decodes them according to the specified decoding scheme.
java.security.AlgorithmParameters.toString(),returns a formatted string describing the parameters.
java.security.AlgorithmParametersSpi.engineGetEncoded(),returns the parameters in their primary encoding format.
java.security.AlgorithmParametersSpi.engineGetEncoded(java.lang.String),returns the parameters encoded in the specified format.
java.security.AlgorithmParametersSpi.engineGetParameterSpec(java.lang.Class<T>),returns a (transparent) specification of this parameters object.
java.security.AlgorithmParametersSpi.engineInit(java.security.spec.AlgorithmParameterSpec),initializes this parameters object using the parameters specified in paramspec.
java.security.AlgorithmParametersSpi.engineInit(byte[]),imports the specified parameters and decodes them according to the primary decoding format for parameters.
"java.security.AlgorithmParametersSpi.engineInit(byte[],java.lang.String)",imports the parameters from params and decodes them according to the specified decoding format.
java.security.AlgorithmParametersSpi.engineToString(),returns a formatted string describing the parameters.
java.security.AllPermission.equals(java.lang.Object),checks two allpermission objects for equality.
java.security.AllPermission.getActions(),returns the canonical string representation of the actions.
java.security.AllPermission.hashCode(),returns the hash code value for this object.
java.security.AllPermission.implies(java.security.Permission),"checks if the specified permission is ""implied"" by this object."
java.security.AllPermission.newPermissionCollection(),returns a new permissioncollection object for storing allpermission objects.
"java.security.AuthProvider.login(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler)",log in to this provider.
java.security.AuthProvider.logout(),log out from this provider.
java.security.AuthProvider.setCallbackHandler(javax.security.auth.callback.CallbackHandler),set a callbackhandler.
java.security.BasicPermission.equals(java.lang.Object),checks two basicpermission objects for equality.
java.security.BasicPermission.getActions(),"returns the canonical string representation of the actions, which currently is the empty string """", since there are no actions for a basicpermission."
java.security.BasicPermission.hashCode(),returns the hash code value for this object.
java.security.BasicPermission.implies(java.security.Permission),"checks if the specified permission is ""implied"" by this object."
java.security.BasicPermission.newPermissionCollection(),returns a new permissioncollection object for storing basicpermission objects.
java.security.CodeSigner.equals(java.lang.Object),tests for equality between the specified object and this code signer.
java.security.CodeSigner.getSignerCertPath(),returns the signer's certificate path.
java.security.CodeSigner.getTimestamp(),returns the signature timestamp.
java.security.CodeSigner.hashCode(),returns the hash code value for this code signer.
java.security.CodeSigner.toString(),returns a string describing this code signer.
java.security.CodeSource.equals(java.lang.Object),tests for equality between the specified object and this object.
java.security.CodeSource.getCertificates(),returns the certificates associated with this codesource.
java.security.CodeSource.getCodeSigners(),returns the code signers associated with this codesource.
java.security.CodeSource.getLocation(),returns the location associated with this codesource.
java.security.CodeSource.hashCode(),returns the hash code value for this object.
java.security.CodeSource.implies(java.security.CodeSource),"returns true if this codesource object ""implies"" the specified codesource."
java.security.CodeSource.toString(),"returns a string describing this codesource, telling its url and certificates."
java.security.DigestInputStream.getMessageDigest(),returns the message digest associated with this stream.
java.security.DigestInputStream.on(boolean),turns the digest function on or off.
java.security.DigestInputStream.read(),"reads a byte, and updates the message digest (if the digest function is on)."
"java.security.DigestInputStream.read(byte[],int,int)","reads into a byte array, and updates the message digest (if the digest function is on)."
java.security.DigestInputStream.setMessageDigest(java.security.MessageDigest),associates the specified message digest with this stream.
java.security.DigestInputStream.toString(),prints a string representation of this digest input stream and its associated message digest object.
java.security.DigestOutputStream.getMessageDigest(),returns the message digest associated with this stream.
java.security.DigestOutputStream.on(boolean),turns the digest function on or off.
java.security.DigestOutputStream.setMessageDigest(java.security.MessageDigest),associates the specified message digest with this stream.
java.security.DigestOutputStream.toString(),prints a string representation of this digest output stream and its associated message digest object.
java.security.DigestOutputStream.write(int),"updates the message digest (if the digest function is on) using the specified byte, and in any case writes the byte to the output stream."
"java.security.DigestOutputStream.write(byte[],int,int)","updates the message digest (if the digest function is on) using the specified subarray, and in any case writes the subarray to the output stream."
java.security.DomainLoadStoreParameter.getConfiguration(),gets the identifier for the domain configuration data.
java.security.DomainLoadStoreParameter.getProtectionParameter(),gets the keystore protection parameters for this domain.
java.security.DomainLoadStoreParameter.getProtectionParams(),gets the keystore protection parameters for keystores in this domain.
java.security.GuardedObject.getObject(),"retrieves the guarded object, or throws an exception if access to the guarded object is denied by the guard."
java.security.KeyFactory.generatePrivate(java.security.spec.KeySpec),generates a private key object from the provided key specification (key material).
java.security.KeyFactory.generatePublic(java.security.spec.KeySpec),generates a public key object from the provided key specification (key material).
java.security.KeyFactory.getAlgorithm(),gets the name of the algorithm associated with this keyfactory.
java.security.KeyFactory.getInstance(java.lang.String),returns a keyfactory object that converts public/private keys of the specified algorithm.
"java.security.KeyFactory.getInstance(java.lang.String,java.lang.String)",returns a keyfactory object that converts public/private keys of the specified algorithm.
"java.security.KeyFactory.getInstance(java.lang.String,java.security.Provider)",returns a keyfactory object that converts public/private keys of the specified algorithm.
"java.security.KeyFactory.getKeySpec(java.security.Key,java.lang.Class<T>)",returns a specification (key material) of the given key object.
java.security.KeyFactory.getProvider(),returns the provider of this key factory object.
java.security.KeyFactory.translateKey(java.security.Key),"translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory."
java.security.KeyFactorySpi.engineGeneratePrivate(java.security.spec.KeySpec),generates a private key object from the provided key specification (key material).
java.security.KeyFactorySpi.engineGeneratePublic(java.security.spec.KeySpec),generates a public key object from the provided key specification (key material).
"java.security.KeyFactorySpi.engineGetKeySpec(java.security.Key,java.lang.Class<T>)",returns a specification (key material) of the given key object.
java.security.KeyFactorySpi.engineTranslateKey(java.security.Key),"translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory."
java.security.KeyPair.getPrivate(),returns a reference to the private key component of this key pair.
java.security.KeyPair.getPublic(),returns a reference to the public key component of this key pair.
java.security.KeyPairGenerator.generateKeyPair(),generates a key pair.
java.security.KeyPairGenerator.genKeyPair(),generates a key pair.
java.security.KeyPairGenerator.getAlgorithm(),returns the standard name of the algorithm for this key pair generator.
java.security.KeyPairGenerator.getInstance(java.lang.String),returns a keypairgenerator object that generates public/private key pairs for the specified algorithm.
"java.security.KeyPairGenerator.getInstance(java.lang.String,java.lang.String)",returns a keypairgenerator object that generates public/private key pairs for the specified algorithm.
"java.security.KeyPairGenerator.getInstance(java.lang.String,java.security.Provider)",returns a keypairgenerator object that generates public/private key pairs for the specified algorithm.
java.security.KeyPairGenerator.getProvider(),returns the provider of this key pair generator object.
java.security.KeyPairGenerator.initialize(int),initializes the key pair generator for a certain keysize using a default parameter set and the securerandom implementation of the highest-priority installed provider as the source of randomness.
"java.security.KeyPairGenerator.initialize(int,java.security.SecureRandom)",initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).
java.security.KeyPairGenerator.initialize(java.security.spec.AlgorithmParameterSpec),initializes the key pair generator using the specified parameter set and the securerandom implementation of the highest-priority installed provider as the source of randomness.
"java.security.KeyPairGenerator.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",initializes the key pair generator with the given parameter set and source of randomness.
java.security.KeyPairGeneratorSpi.generateKeyPair(),generates a key pair.
"java.security.KeyPairGeneratorSpi.initialize(int,java.security.SecureRandom)","initializes the key pair generator for a certain keysize, using the default parameter set."
"java.security.KeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",initializes the key pair generator using the specified parameter set and user-provided source of randomness.
java.security.KeyRep.readResolve(),resolve the key object.
java.security.KeyStore.aliases(),lists all the alias names of this keystore.
java.security.KeyStore.containsAlias(java.lang.String),checks if the given alias exists in this keystore.
java.security.KeyStore.deleteEntry(java.lang.String),deletes the entry identified by the given alias from this keystore.
"java.security.KeyStore.entryInstanceOf(java.lang.String,java.lang.Class<? extends java.security.KeyStore.Entry>)",determines if the keystore entry for the specified alias is an instance or subclass of the specified entryclass.
java.security.KeyStore.getCertificate(java.lang.String),returns the certificate associated with the given alias.
java.security.KeyStore.getCertificateAlias(java.security.cert.Certificate),returns the (alias) name of the first keystore entry whose certificate matches the given certificate.
java.security.KeyStore.getCertificateChain(java.lang.String),returns the certificate chain associated with the given alias.
java.security.KeyStore.getCreationDate(java.lang.String),returns the creation date of the entry identified by the given alias.
java.security.KeyStore.getDefaultType(),returns the default keystore type as specified by the keystore.
"java.security.KeyStore.getEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)",gets a keystore entry for the specified alias with the specified protection parameter.
java.security.KeyStore.getInstance(java.lang.String),returns a keystore object of the specified type.
"java.security.KeyStore.getInstance(java.lang.String,java.lang.String)",returns a keystore object of the specified type.
"java.security.KeyStore.getInstance(java.lang.String,java.security.Provider)",returns a keystore object of the specified type.
"java.security.KeyStore.getKey(java.lang.String,char[])","returns the key associated with the given alias, using the given password to recover it."
java.security.KeyStore.getProvider(),returns the provider of this keystore.
java.security.KeyStore.getType(),returns the type of this keystore.
java.security.KeyStore.isCertificateEntry(java.lang.String),"returns true if the entry identified by the given alias was created by a call to setcertificateentry, or created by a call to setentry with a trustedcertificateentry."
java.security.KeyStore.isKeyEntry(java.lang.String),"returns true if the entry identified by the given alias was created by a call to setkeyentry, or created by a call to setentry with a privatekeyentry or a secretkeyentry."
"java.security.KeyStore.load(java.io.InputStream,char[])",loads this keystore from the given input stream.
java.security.KeyStore.load(java.security.KeyStore.LoadStoreParameter),loads this keystore using the given loadstoreparameter.
"java.security.KeyStore.setCertificateEntry(java.lang.String,java.security.cert.Certificate)",assigns the given trusted certificate to the given alias.
"java.security.KeyStore.setEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)",saves a keystore entry under the specified alias.
"java.security.KeyStore.setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])","assigns the given key to the given alias, protecting it with the given password."
"java.security.KeyStore.setKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])",assigns the given key (that has already been protected) to the given alias.
java.security.KeyStore.size(),retrieves the number of entries in this keystore.
"java.security.KeyStore.store(java.io.OutputStream,char[])","stores this keystore to the given output stream, and protects its integrity with the given password."
java.security.KeyStore.store(java.security.KeyStore.LoadStoreParameter),stores this keystore using the given loadstoreparameter.
java.security.KeyStore.Builder.getKeyStore(),returns the keystore described by this object.
java.security.KeyStore.Builder.getProtectionParameter(java.lang.String),returns the protectionparameters that should be used to obtain the entry with the given alias.
"java.security.KeyStore.Builder.newInstance(java.security.KeyStore,java.security.KeyStore.ProtectionParameter)",returns a new builder that encapsulates the given keystore.
"java.security.KeyStore.Builder.newInstance(java.lang.String,java.security.Provider,java.io.File,java.security.KeyStore.ProtectionParameter)",returns a new builder object.
"java.security.KeyStore.Builder.newInstance(java.lang.String,java.security.Provider,java.security.KeyStore.ProtectionParameter)",returns a new builder object.
java.security.KeyStore.CallbackHandlerProtection.getCallbackHandler(),returns the callbackhandler.
java.security.KeyStore.PasswordProtection.destroy(),clears the password.
java.security.KeyStore.PasswordProtection.getPassword(),gets the password.
java.security.KeyStore.PasswordProtection.getProtectionAlgorithm(),gets the name of the protection algorithm.
java.security.KeyStore.PasswordProtection.getProtectionParameters(),gets the parameters supplied for the protection algorithm.
java.security.KeyStore.PasswordProtection.isDestroyed(),determines if password has been cleared.
java.security.KeyStore.PrivateKeyEntry.getAttributes(),retrieves the attributes associated with an entry.
java.security.KeyStore.PrivateKeyEntry.getCertificate(),gets the end entity certificate from the certificate chain in this entry.
java.security.KeyStore.PrivateKeyEntry.getCertificateChain(),gets the certificate chain from this entry.
java.security.KeyStore.PrivateKeyEntry.getPrivateKey(),gets the privatekey from this entry.
java.security.KeyStore.PrivateKeyEntry.toString(),returns a string representation of this privatekeyentry.
java.security.KeyStore.SecretKeyEntry.getAttributes(),retrieves the attributes associated with an entry.
java.security.KeyStore.SecretKeyEntry.getSecretKey(),gets the secretkey from this entry.
java.security.KeyStore.SecretKeyEntry.toString(),returns a string representation of this secretkeyentry.
java.security.KeyStore.TrustedCertificateEntry.getAttributes(),retrieves the attributes associated with an entry.
java.security.KeyStore.TrustedCertificateEntry.getTrustedCertificate(),gets the trusted certficate from this entry.
java.security.KeyStore.TrustedCertificateEntry.toString(),returns a string representation of this trustedcertificateentry.
java.security.KeyStoreSpi.engineAliases(),lists all the alias names of this keystore.
java.security.KeyStoreSpi.engineContainsAlias(java.lang.String),checks if the given alias exists in this keystore.
java.security.KeyStoreSpi.engineDeleteEntry(java.lang.String),deletes the entry identified by the given alias from this keystore.
"java.security.KeyStoreSpi.engineEntryInstanceOf(java.lang.String,java.lang.Class<? extends java.security.KeyStore.Entry>)",determines if the keystore entry for the specified alias is an instance or subclass of the specified entryclass.
java.security.KeyStoreSpi.engineGetCertificate(java.lang.String),returns the certificate associated with the given alias.
java.security.KeyStoreSpi.engineGetCertificateAlias(java.security.cert.Certificate),returns the (alias) name of the first keystore entry whose certificate matches the given certificate.
java.security.KeyStoreSpi.engineGetCertificateChain(java.lang.String),returns the certificate chain associated with the given alias.
java.security.KeyStoreSpi.engineGetCreationDate(java.lang.String),returns the creation date of the entry identified by the given alias.
"java.security.KeyStoreSpi.engineGetEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)",gets a keystore.
"java.security.KeyStoreSpi.engineGetKey(java.lang.String,char[])","returns the key associated with the given alias, using the given password to recover it."
java.security.KeyStoreSpi.engineIsCertificateEntry(java.lang.String),"returns true if the entry identified by the given alias was created by a call to setcertificateentry, or created by a call to setentry with a trustedcertificateentry."
java.security.KeyStoreSpi.engineIsKeyEntry(java.lang.String),"returns true if the entry identified by the given alias was created by a call to setkeyentry, or created by a call to setentry with a privatekeyentry or a secretkeyentry."
"java.security.KeyStoreSpi.engineLoad(java.io.InputStream,char[])",loads the keystore from the given input stream.
java.security.KeyStoreSpi.engineLoad(java.security.KeyStore.LoadStoreParameter),loads the keystore using the given keystore.
"java.security.KeyStoreSpi.engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate)",assigns the given certificate to the given alias.
"java.security.KeyStoreSpi.engineSetEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)",saves a keystore.
"java.security.KeyStoreSpi.engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])","assigns the given key to the given alias, protecting it with the given password."
"java.security.KeyStoreSpi.engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])",assigns the given key (that has already been protected) to the given alias.
java.security.KeyStoreSpi.engineSize(),retrieves the number of entries in this keystore.
"java.security.KeyStoreSpi.engineStore(java.io.OutputStream,char[])","stores this keystore to the given output stream, and protects its integrity with the given password."
java.security.KeyStoreSpi.engineStore(java.security.KeyStore.LoadStoreParameter),stores this keystore using the given keystore.
java.security.MessageDigest.clone(),returns a clone if the implementation is cloneable.
java.security.MessageDigest.digest(),completes the hash computation by performing final operations such as padding.
"java.security.MessageDigest.digest(byte[],int,int)",completes the hash computation by performing final operations such as padding.
java.security.MessageDigest.digest(byte[]),"performs a final update on the digest using the specified array of bytes, then completes the digest computation."
java.security.MessageDigest.getAlgorithm(),"returns a string that identifies the algorithm, independent of implementation details."
java.security.MessageDigest.getDigestLength(),"returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable."
java.security.MessageDigest.getInstance(java.lang.String),returns a messagedigest object that implements the specified digest algorithm.
"java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)",returns a messagedigest object that implements the specified digest algorithm.
"java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)",returns a messagedigest object that implements the specified digest algorithm.
java.security.MessageDigest.getProvider(),returns the provider of this message digest object.
"java.security.MessageDigest.isEqual(byte[],byte[])",compares two digests for equality.
java.security.MessageDigest.reset(),resets the digest for further use.
java.security.MessageDigest.toString(),returns a string representation of this message digest object.
java.security.MessageDigest.update(byte),updates the digest using the specified byte.
"java.security.MessageDigest.update(byte[],int,int)","updates the digest using the specified array of bytes, starting at the specified offset."
java.security.MessageDigest.update(byte[]),updates the digest using the specified array of bytes.
java.security.MessageDigest.update(java.nio.ByteBuffer),update the digest using the specified bytebuffer.
java.security.MessageDigestSpi.clone(),returns a clone if the implementation is cloneable.
java.security.MessageDigestSpi.engineDigest(),completes the hash computation by performing final operations such as padding.
"java.security.MessageDigestSpi.engineDigest(byte[],int,int)",completes the hash computation by performing final operations such as padding.
java.security.MessageDigestSpi.engineGetDigestLength(),returns the digest length in bytes.
java.security.MessageDigestSpi.engineReset(),resets the digest for further use.
java.security.MessageDigestSpi.engineUpdate(byte),updates the digest using the specified byte.
"java.security.MessageDigestSpi.engineUpdate(byte[],int,int)","updates the digest using the specified array of bytes, starting at the specified offset."
java.security.MessageDigestSpi.engineUpdate(java.nio.ByteBuffer),update the digest using the specified bytebuffer.
java.security.Permission.checkGuard(java.lang.Object),implements the guard interface for a permission.
java.security.Permission.equals(java.lang.Object),checks two permission objects for equality.
java.security.Permission.getActions(),returns the actions as a string.
java.security.Permission.getName(),returns the name of this permission.
java.security.Permission.hashCode(),returns the hash code value for this permission object.
java.security.Permission.implies(java.security.Permission),"checks if the specified permission's actions are ""implied by"" this object's actions."
java.security.Permission.newPermissionCollection(),"returns an empty permissioncollection for a given permission object, or null if one is not defined."
java.security.Permission.toString(),returns a string describing this permission.
java.security.PermissionCollection.add(java.security.Permission),adds a permission object to the current collection of permission objects.
java.security.PermissionCollection.elements(),returns an enumeration of all the permission objects in the collection.
java.security.PermissionCollection.implies(java.security.Permission),checks to see if the specified permission is implied by the collection of permission objects held in this permissioncollection.
java.security.PermissionCollection.isReadOnly(),returns true if this permissioncollection object is marked as readonly.
java.security.PermissionCollection.setReadOnly(),"marks this permissioncollection object as ""readonly""."
java.security.PermissionCollection.toString(),"returns a string describing this permissioncollection object, providing information about all the permissions it contains."
java.security.Permissions.add(java.security.Permission),adds a permission object to the permissioncollection for the class the permission belongs to.
java.security.Permissions.elements(),returns an enumeration of all the permission objects in all the permissioncollections in this permissions object.
java.security.Permissions.implies(java.security.Permission),checks to see if this object's permissioncollection for permissions of the specified permission's class implies the permissions expressed in the permission object.
java.security.PKCS12Attribute.equals(java.lang.Object),compares this pkcs12attribute and a specified object for equality.
java.security.PKCS12Attribute.getEncoded(),returns the attribute's asn.
java.security.PKCS12Attribute.getName(),returns the attribute's asn.
java.security.PKCS12Attribute.getValue(),returns the attribute's asn.
java.security.PKCS12Attribute.hashCode(),returns the hashcode for this pkcs12attribute.
java.security.PKCS12Attribute.toString(),returns a string representation of this pkcs12attribute.
"java.security.Policy.getInstance(java.lang.String,java.security.Policy.Parameters)",returns a policy object of the specified type.
"java.security.Policy.getInstance(java.lang.String,java.security.Policy.Parameters,java.lang.String)",returns a policy object of the specified type.
"java.security.Policy.getInstance(java.lang.String,java.security.Policy.Parameters,java.security.Provider)",returns a policy object of the specified type.
java.security.Policy.getParameters(),return policy parameters.
java.security.Policy.getPermissions(java.security.CodeSource),return a permissioncollection object containing the set of permissions granted to the specified codesource.
java.security.Policy.getPermissions(java.security.ProtectionDomain),return a permissioncollection object containing the set of permissions granted to the specified protectiondomain.
java.security.Policy.getPolicy(),returns the installed policy object.
java.security.Policy.getProvider(),return the provider of this policy.
java.security.Policy.getType(),return the type of this policy.
"java.security.Policy.implies(java.security.ProtectionDomain,java.security.Permission)",evaluates the global policy for the permissions granted to the protectiondomain and tests whether the permission is granted.
java.security.Policy.refresh(),refreshes/reloads the policy configuration.
java.security.Policy.setPolicy(java.security.Policy),sets the system-wide policy object.
java.security.PolicySpi.engineGetPermissions(java.security.CodeSource),return a permissioncollection object containing the set of permissions granted to the specified codesource.
java.security.PolicySpi.engineGetPermissions(java.security.ProtectionDomain),return a permissioncollection object containing the set of permissions granted to the specified protectiondomain.
"java.security.PolicySpi.engineImplies(java.security.ProtectionDomain,java.security.Permission)",check whether the policy has granted a permission to a protectiondomain.
java.security.PolicySpi.engineRefresh(),refreshes/reloads the policy configuration.
java.security.ProtectionDomain.getClassLoader(),returns the classloader of this domain.
java.security.ProtectionDomain.getCodeSource(),returns the codesource of this domain.
java.security.ProtectionDomain.getPermissions(),returns the static permissions granted to this domain.
java.security.ProtectionDomain.getPrincipals(),returns an array of principals for this domain.
java.security.ProtectionDomain.implies(java.security.Permission),check and see if this protectiondomain implies the permissions expressed in the permission object.
java.security.ProtectionDomain.toString(),convert a protectiondomain to a string.
java.security.Provider.clear(),clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider.
"java.security.Provider.compute(java.lang.Object,java.util.function.BiFunction<? super,? super,? extends java.lang.Object>)",attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
"java.security.Provider.computeIfAbsent(java.lang.Object,java.util.function.Function<? super,? extends java.lang.Object>)","if the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null."
"java.security.Provider.computeIfPresent(java.lang.Object,java.util.function.BiFunction<? super,? super,? extends java.lang.Object>)","if the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
java.security.Provider.entrySet(),returns an unmodifiable set view of the property entries contained in this provider.
java.security.Provider.getInfo(),returns a human-readable description of the provider and its services.
java.security.Provider.getName(),returns the name of this provider.
"java.security.Provider.getService(java.lang.String,java.lang.String)",get the service describing this provider's implementation of the specified type of this algorithm or alias.
java.security.Provider.getServices(),get an unmodifiable set of all services supported by this provider.
java.security.Provider.getVersion(),returns the version number for this provider.
java.security.Provider.keySet(),returns an unmodifiable set view of the property keys contained in this provider.
java.security.Provider.load(java.io.InputStream),reads a property list (key and element pairs) from the input stream.
"java.security.Provider.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction<? super,? super,? extends java.lang.Object>)","if the specified key is not already associated with a value or is associated with null, associates it with the given value."
"java.security.Provider.put(java.lang.Object,java.lang.Object)",sets the key property to have the specified value.
"java.security.Provider.putAll(,?>)",copies all of the mappings from the specified map to this provider.
"java.security.Provider.putIfAbsent(java.lang.Object,java.lang.Object)","if the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value."
java.security.Provider.putService(java.security.Provider.Service),add a service.
java.security.Provider.remove(java.lang.Object),removes the key property (and its corresponding value).
"java.security.Provider.remove(java.lang.Object,java.lang.Object)",removes the entry for the specified key only if it is currently mapped to the specified value.
java.security.Provider.removeService(java.security.Provider.Service),remove a service previously added using putservice().
"java.security.Provider.replace(java.lang.Object,java.lang.Object,java.lang.Object)",replaces the entry for the specified key only if currently mapped to the specified value.
"java.security.Provider.replace(java.lang.Object,java.lang.Object)",replaces the entry for the specified key only if it is currently mapped to some value.
"java.security.Provider.replaceAll(java.util.function.BiFunction<? super,? super,? extends java.lang.Object>)","replaces each entry's value with the result of invoking the given function on that entry, in the order entries are returned by an entry set iterator, until all entries have been processed or the function throws an exception."
java.security.Provider.toString(),returns a string with the name and the version number of this provider.
java.security.Provider.values(),returns an unmodifiable collection view of the property values contained in this provider.
java.security.Provider.Service.getAlgorithm(),return the name of the algorithm of this service.
java.security.Provider.Service.getAttribute(java.lang.String),return the value of the specified attribute or null if this attribute is not set for this service.
java.security.Provider.Service.getClassName(),return the name of the class implementing this service.
java.security.Provider.Service.getProvider(),return the provider of this service.
java.security.Provider.Service.getType(),get the type of this service.
java.security.Provider.Service.newInstance(java.lang.Object),return a new instance of the implementation described by this service.
java.security.Provider.Service.supportsParameter(java.lang.Object),test whether this service can use the specified parameter.
java.security.Provider.Service.toString(),return a string representation of this service.
"java.security.SecureClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.CodeSource)","converts an array of bytes into an instance of class class, with an optional codesource."
"java.security.SecureClassLoader.defineClass(java.lang.String,java.nio.ByteBuffer,java.security.CodeSource)","converts a bytebuffer into an instance of class class, with an optional codesource."
java.security.SecureClassLoader.getPermissions(java.security.CodeSource),returns the permissions for the given codesource object.
java.security.SecureRandom.generateSeed(int),"returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself."
java.security.SecureRandom.getAlgorithm(),returns the name of the algorithm implemented by this securerandom object.
java.security.SecureRandom.getInstance(java.lang.String),returns a securerandom object that implements the specified random number generator (rng) algorithm.
"java.security.SecureRandom.getInstance(java.lang.String,java.lang.String)",returns a securerandom object that implements the specified random number generator (rng) algorithm.
"java.security.SecureRandom.getInstance(java.lang.String,java.security.Provider)",returns a securerandom object that implements the specified random number generator (rng) algorithm.
java.security.SecureRandom.getInstanceStrong(),returns a securerandom object that was selected by using the algorithms/providers specified in the securerandom.
java.security.SecureRandom.getProvider(),returns the provider of this securerandom object.
java.security.SecureRandom.getSeed(int),"returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself."
java.security.SecureRandom.next(int),"generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros)."
java.security.SecureRandom.nextBytes(byte[]),generates a user-specified number of random bytes.
java.security.SecureRandom.setSeed(byte[]),reseeds this random object.
java.security.SecureRandom.setSeed(long),"reseeds this random object, using the eight bytes contained in the given long seed."
java.security.SecureRandomSpi.engineGenerateSeed(int),returns the given number of seed bytes.
java.security.SecureRandomSpi.engineNextBytes(byte[]),generates a user-specified number of random bytes.
java.security.SecureRandomSpi.engineSetSeed(byte[]),reseeds this random object.
java.security.Security.addProvider(java.security.Provider),adds a provider to the next position available.
java.security.Security.getAlgorithms(java.lang.String),returns a set of strings containing the names of all available algorithms or types for the specified java cryptographic service (e.
java.security.Security.getProperty(java.lang.String),gets a security property value.
java.security.Security.getProvider(java.lang.String),"returns the provider installed with the specified name, if any."
java.security.Security.getProviders(),returns an array containing all the installed providers.
java.security.Security.getProviders(java.lang.String),"returns an array containing all installed providers that satisfy the specified selection criterion, or null if no such providers have been installed."
"java.security.Security.getProviders(,java.lang.String>)","returns an array containing all installed providers that satisfy the specified* selection criteria, or null if no such providers have been installed."
"java.security.Security.insertProviderAt(java.security.Provider,int)","adds a new provider, at a specified position."
java.security.Security.removeProvider(java.lang.String),removes the provider with the specified name.
"java.security.Security.setProperty(java.lang.String,java.lang.String)",sets a security property value.
java.security.Signature.clone(),returns a clone if the implementation is cloneable.
java.security.Signature.getAlgorithm(),returns the name of the algorithm for this signature object.
java.security.Signature.getInstance(java.lang.String),returns a signature object that implements the specified signature algorithm.
"java.security.Signature.getInstance(java.lang.String,java.lang.String)",returns a signature object that implements the specified signature algorithm.
"java.security.Signature.getInstance(java.lang.String,java.security.Provider)",returns a signature object that implements the specified signature algorithm.
java.security.Signature.getParameters(),returns the parameters used with this signature object.
java.security.Signature.getProvider(),returns the provider of this signature object.
java.security.Signature.initSign(java.security.PrivateKey),initialize this object for signing.
"java.security.Signature.initSign(java.security.PrivateKey,java.security.SecureRandom)",initialize this object for signing.
java.security.Signature.initVerify(java.security.PublicKey),initializes this object for verification.
java.security.Signature.initVerify(java.security.cert.Certificate),"initializes this object for verification, using the public key from the given certificate."
java.security.Signature.setParameter(java.security.spec.AlgorithmParameterSpec),initializes this signature engine with the specified parameter set.
java.security.Signature.sign(),returns the signature bytes of all the data updated.
"java.security.Signature.sign(byte[],int,int)","finishes the signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset."
java.security.Signature.toString(),"returns a string representation of this signature object, providing information that includes the state of the object and the name of the algorithm used."
java.security.Signature.update(byte),updates the data to be signed or verified by a byte.
java.security.Signature.update(byte[]),"updates the data to be signed or verified, using the specified array of bytes."
"java.security.Signature.update(byte[],int,int)","updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset."
java.security.Signature.update(java.nio.ByteBuffer),updates the data to be signed or verified using the specified bytebuffer.
java.security.Signature.verify(byte[]),verifies the passed-in signature.
"java.security.Signature.verify(byte[],int,int)","verifies the passed-in signature in the specified array of bytes, starting at the specified offset."
java.security.SignatureSpi.clone(),returns a clone if the implementation is cloneable.
java.security.SignatureSpi.engineGetParameters(),"this method is overridden by providers to return the parameters used with this signature engine, or null if this signature engine does not use any parameters."
java.security.SignatureSpi.engineInitSign(java.security.PrivateKey),initializes this signature object with the specified private key for signing operations.
"java.security.SignatureSpi.engineInitSign(java.security.PrivateKey,java.security.SecureRandom)",initializes this signature object with the specified private key and source of randomness for signing operations.
java.security.SignatureSpi.engineInitVerify(java.security.PublicKey),initializes this signature object with the specified public key for verification operations.
java.security.SignatureSpi.engineSetParameter(java.security.spec.AlgorithmParameterSpec),this method is overridden by providers to initialize this signature engine with the specified parameter set.
java.security.SignatureSpi.engineSign(),returns the signature bytes of all the data updated so far.
"java.security.SignatureSpi.engineSign(byte[],int,int)","finishes this signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset."
java.security.SignatureSpi.engineUpdate(byte),updates the data to be signed or verified using the specified byte.
"java.security.SignatureSpi.engineUpdate(byte[],int,int)","updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset."
java.security.SignatureSpi.engineUpdate(java.nio.ByteBuffer),updates the data to be signed or verified using the specified bytebuffer.
java.security.SignatureSpi.engineVerify(byte[]),verifies the passed-in signature.
"java.security.SignatureSpi.engineVerify(byte[],int,int)","verifies the passed-in signature in the specified array of bytes, starting at the specified offset."
java.security.SignedObject.getAlgorithm(),retrieves the name of the signature algorithm.
java.security.SignedObject.getObject(),retrieves the encapsulated object.
java.security.SignedObject.getSignature(),"retrieves the signature on the signed object, in the form of a byte array."
"java.security.SignedObject.verify(java.security.PublicKey,java.security.Signature)","verifies that the signature in this signedobject is the valid signature for the object stored inside, with the given verification key, using the designated verification engine."
java.security.Timestamp.equals(java.lang.Object),tests for equality between the specified object and this timestamp.
java.security.Timestamp.getSignerCertPath(),returns the certificate path for the timestamping authority.
java.security.Timestamp.getTimestamp(),returns the date and time when the timestamp was generated.
java.security.Timestamp.hashCode(),returns the hash code value for this timestamp.
java.security.Timestamp.toString(),returns a string describing this timestamp.
java.security.UnresolvedPermission.equals(java.lang.Object),checks two unresolvedpermission objects for equality.
java.security.UnresolvedPermission.getActions(),"returns the canonical string representation of the actions, which currently is the empty string """", since there are no actions for an unresolvedpermission."
java.security.UnresolvedPermission.getUnresolvedActions(),get the actions for the underlying permission that has not been resolved.
java.security.UnresolvedPermission.getUnresolvedCerts(),get the signer certificates (without any supporting chain) for the underlying permission that has not been resolved.
java.security.UnresolvedPermission.getUnresolvedName(),get the target name of the underlying permission that has not been resolved.
java.security.UnresolvedPermission.getUnresolvedType(),get the type (class name) of the underlying permission that has not been resolved.
java.security.UnresolvedPermission.hashCode(),returns the hash code value for this object.
java.security.UnresolvedPermission.implies(java.security.Permission),this method always returns false for unresolved permissions.
java.security.UnresolvedPermission.newPermissionCollection(),returns a new permissioncollection object for storing unresolvedpermission objects.
java.security.UnresolvedPermission.toString(),returns a string describing this unresolvedpermission.
java.security.URIParameter.getURI(),returns the uri.
java.security.CryptoPrimitive.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.security.CryptoPrimitive.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.security.KeyRep.Type.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.security.KeyRep.Type.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.security.AccessControlException.getPermission(),"gets the permission object associated with this exception, or null if there was no corresponding permission object."
java.security.PrivilegedActionException.getCause(),returns the cause of this exception (the exception thrown by the privileged computation that resulted in this privilegedactionexception).
java.security.PrivilegedActionException.getException(),returns the exception thrown by the privileged computation that resulted in this privilegedactionexception.
"java.security.acl.Acl.addEntry(java.security.Principal,java.security.acl.AclEntry)",adds an acl entry to this acl.
"java.security.acl.Acl.checkPermission(java.security.Principal,java.security.acl.Permission)",checks whether or not the specified principal has the specified permission.
java.security.acl.Acl.entries(),returns an enumeration of the entries in this acl.
java.security.acl.Acl.getName(),returns the name of this acl.
java.security.acl.Acl.getPermissions(java.security.Principal),returns an enumeration for the set of allowed permissions for the specified principal (representing an entity such as an individual or a group).
"java.security.acl.Acl.removeEntry(java.security.Principal,java.security.acl.AclEntry)",removes an acl entry from this acl.
"java.security.acl.Acl.setName(java.security.Principal,java.lang.String)",sets the name of this acl.
java.security.acl.Acl.toString(),returns a string representation of the acl contents.
java.security.acl.AclEntry.addPermission(java.security.acl.Permission),adds the specified permission to this acl entry.
java.security.acl.AclEntry.checkPermission(java.security.acl.Permission),checks if the specified permission is part of the permission set in this entry.
java.security.acl.AclEntry.clone(),clones this acl entry.
java.security.acl.AclEntry.getPrincipal(),returns the principal for which permissions are granted or denied by this acl entry.
java.security.acl.AclEntry.isNegative(),"returns true if this is a negative acl entry (one denying the associated principal the set of permissions in the entry), false otherwise."
java.security.acl.AclEntry.permissions(),returns an enumeration of the permissions in this acl entry.
java.security.acl.AclEntry.removePermission(java.security.acl.Permission),removes the specified permission from this acl entry.
java.security.acl.AclEntry.setNegativePermissions(),sets this acl entry to be a negative one.
java.security.acl.AclEntry.setPrincipal(java.security.Principal),specifies the principal for which permissions are granted or denied by this acl entry.
java.security.acl.AclEntry.toString(),returns a string representation of the contents of this acl entry.
java.security.acl.Group.addMember(java.security.Principal),adds the specified member to the group.
java.security.acl.Group.isMember(java.security.Principal),returns true if the passed principal is a member of the group.
java.security.acl.Group.members(),returns an enumeration of the members in the group.
java.security.acl.Group.removeMember(java.security.Principal),removes the specified member from the group.
"java.security.acl.Owner.addOwner(java.security.Principal,java.security.Principal)",adds an owner.
"java.security.acl.Owner.deleteOwner(java.security.Principal,java.security.Principal)",deletes an owner.
java.security.acl.Owner.isOwner(java.security.Principal),returns true if the given principal is an owner of the acl.
java.security.acl.Permission.equals(java.lang.Object),returns true if the object passed matches the permission represented in this interface.
java.security.acl.Permission.toString(),prints a string representation of this permission.
java.security.cert.CertPathBuilderResult.clone(),makes a copy of this certpathbuilderresult.
java.security.cert.CertPathBuilderResult.getCertPath(),returns the built certification path.
java.security.cert.CertPathChecker.check(java.security.cert.Certificate),performs the check(s) on the specified certificate using its internal state.
java.security.cert.CertPathChecker.init(boolean),initializes the internal state of this certpathchecker.
java.security.cert.CertPathChecker.isForwardCheckingSupported(),indicates if forward checking is supported.
java.security.cert.CertPathParameters.clone(),makes a copy of this certpathparameters.
java.security.cert.CertPathValidatorResult.clone(),makes a copy of this certpathvalidatorresult.
java.security.cert.CertSelector.clone(),makes a copy of this certselector.
java.security.cert.CertSelector.match(java.security.cert.Certificate),decides whether a certificate should be selected.
java.security.cert.CertStoreParameters.clone(),makes a copy of this certstoreparameters.
java.security.cert.CRLSelector.clone(),makes a copy of this crlselector.
java.security.cert.CRLSelector.match(java.security.cert.CRL),decides whether a crl should be selected.
java.security.cert.Extension.encode(java.io.OutputStream),generates the extension's der encoding and writes it to the output stream.
java.security.cert.Extension.getId(),gets the extensions's object identifier.
java.security.cert.Extension.getValue(),gets the extensions's der-encoded value.
java.security.cert.Extension.isCritical(),gets the extension's criticality setting.
java.security.cert.PolicyNode.getChildren(),returns an iterator over the children of this node.
java.security.cert.PolicyNode.getDepth(),returns the depth of this node in the valid policy tree.
java.security.cert.PolicyNode.getExpectedPolicies(),returns the set of expected policies that would satisfy this node's valid policy in the next certificate to be processed.
java.security.cert.PolicyNode.getParent(),"returns the parent of this node, or null if this is the root node."
java.security.cert.PolicyNode.getPolicyQualifiers(),returns the set of policy qualifiers associated with the valid policy represented by this node.
java.security.cert.PolicyNode.getValidPolicy(),returns the valid policy represented by this node.
java.security.cert.PolicyNode.isCritical(),returns the criticality indicator of the certificate policy extension in the most recently processed certificate.
java.security.cert.X509Extension.getCriticalExtensionOIDs(),gets a set of the oid strings for the extension(s) marked critical in the certificate/crl managed by the object implementing this interface.
java.security.cert.X509Extension.getExtensionValue(java.lang.String),gets the der-encoded octet string for the extension value (extnvalue) identified by the passed-in oid string.
java.security.cert.X509Extension.getNonCriticalExtensionOIDs(),gets a set of the oid strings for the extension(s) marked non-critical in the certificate/crl managed by the object implementing this interface.
java.security.cert.X509Extension.hasUnsupportedCriticalExtension(),check if there is a critical extension that is not supported.
java.security.cert.Certificate.equals(java.lang.Object),compares this certificate for equality with the specified object.
java.security.cert.Certificate.getEncoded(),returns the encoded form of this certificate.
java.security.cert.Certificate.getPublicKey(),gets the public key from this certificate.
java.security.cert.Certificate.getType(),returns the type of this certificate.
java.security.cert.Certificate.hashCode(),returns a hashcode value for this certificate from its encoded form.
java.security.cert.Certificate.toString(),returns a string representation of this certificate.
java.security.cert.Certificate.verify(java.security.PublicKey),verifies that this certificate was signed using the private key that corresponds to the specified public key.
"java.security.cert.Certificate.verify(java.security.PublicKey,java.lang.String)",verifies that this certificate was signed using the private key that corresponds to the specified public key.
"java.security.cert.Certificate.verify(java.security.PublicKey,java.security.Provider)",verifies that this certificate was signed using the private key that corresponds to the specified public key.
java.security.cert.Certificate.writeReplace(),replace the certificate to be serialized.
java.security.cert.Certificate.CertificateRep.readResolve(),resolve the certificate object.
java.security.cert.CertificateFactory.generateCertificate(java.io.InputStream),generates a certificate object and initializes it with the data read from the input stream instream.
java.security.cert.CertificateFactory.generateCertificates(java.io.InputStream),returns a (possibly empty) collection view of the certificates read from the given input stream instream.
java.security.cert.CertificateFactory.generateCertPath(java.io.InputStream),generates a certpath object and initializes it with the data read from the inputstream instream.
"java.security.cert.CertificateFactory.generateCertPath(java.io.InputStream,java.lang.String)",generates a certpath object and initializes it with the data read from the inputstream instream.
java.security.cert.CertificateFactory.generateCertPath(java.util.List<? extends java.security.cert.Certificate>),generates a certpath object and initializes it with a list of certificates.
java.security.cert.CertificateFactory.generateCRL(java.io.InputStream),generates a certificate revocation list (crl) object and initializes it with the data read from the input stream instream.
java.security.cert.CertificateFactory.generateCRLs(java.io.InputStream),returns a (possibly empty) collection view of the crls read from the given input stream instream.
java.security.cert.CertificateFactory.getCertPathEncodings(),"returns an iteration of the certpath encodings supported by this certificate factory, with the default encoding first."
java.security.cert.CertificateFactory.getInstance(java.lang.String),returns a certificate factory object that implements the specified certificate type.
"java.security.cert.CertificateFactory.getInstance(java.lang.String,java.lang.String)",returns a certificate factory object for the specified certificate type.
"java.security.cert.CertificateFactory.getInstance(java.lang.String,java.security.Provider)",returns a certificate factory object for the specified certificate type.
java.security.cert.CertificateFactory.getProvider(),returns the provider of this certificate factory.
java.security.cert.CertificateFactory.getType(),returns the name of the certificate type associated with this certificate factory.
java.security.cert.CertificateFactorySpi.engineGenerateCertificate(java.io.InputStream),generates a certificate object and initializes it with the data read from the input stream instream.
java.security.cert.CertificateFactorySpi.engineGenerateCertificates(java.io.InputStream),returns a (possibly empty) collection view of the certificates read from the given input stream instream.
java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.io.InputStream),generates a certpath object and initializes it with the data read from the inputstream instream.
"java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.io.InputStream,java.lang.String)",generates a certpath object and initializes it with the data read from the inputstream instream.
java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.util.List<? extends java.security.cert.Certificate>),generates a certpath object and initializes it with a list of certificates.
java.security.cert.CertificateFactorySpi.engineGenerateCRL(java.io.InputStream),generates a certificate revocation list (crl) object and initializes it with the data read from the input stream instream.
java.security.cert.CertificateFactorySpi.engineGenerateCRLs(java.io.InputStream),returns a (possibly empty) collection view of the crls read from the given input stream instream.
java.security.cert.CertificateFactorySpi.engineGetCertPathEncodings(),"returns an iteration of the certpath encodings supported by this certificate factory, with the default encoding first."
java.security.cert.CertPath.equals(java.lang.Object),compares this certification path for equality with the specified object.
java.security.cert.CertPath.getCertificates(),returns the list of certificates in this certification path.
java.security.cert.CertPath.getEncoded(),"returns the encoded form of this certification path, using the default encoding."
java.security.cert.CertPath.getEncoded(java.lang.String),"returns the encoded form of this certification path, using the specified encoding."
java.security.cert.CertPath.getEncodings(),"returns an iteration of the encodings supported by this certification path, with the default encoding first."
java.security.cert.CertPath.getType(),returns the type of certificates in this certification path.
java.security.cert.CertPath.hashCode(),returns the hashcode for this certification path.
java.security.cert.CertPath.toString(),returns a string representation of this certification path.
java.security.cert.CertPath.writeReplace(),replaces the certpath to be serialized with a certpathrep object.
java.security.cert.CertPath.CertPathRep.readResolve(),returns a certpath constructed from the type and data.
java.security.cert.CertPathBuilder.build(java.security.cert.CertPathParameters),attempts to build a certification path using the specified algorithm parameter set.
java.security.cert.CertPathBuilder.getAlgorithm(),returns the name of the algorithm of this certpathbuilder.
java.security.cert.CertPathBuilder.getDefaultType(),returns the default certpathbuilder type as specified by the certpathbuilder.
java.security.cert.CertPathBuilder.getInstance(java.lang.String),returns a certpathbuilder object that implements the specified algorithm.
"java.security.cert.CertPathBuilder.getInstance(java.lang.String,java.lang.String)",returns a certpathbuilder object that implements the specified algorithm.
"java.security.cert.CertPathBuilder.getInstance(java.lang.String,java.security.Provider)",returns a certpathbuilder object that implements the specified algorithm.
java.security.cert.CertPathBuilder.getProvider(),returns the provider of this certpathbuilder.
java.security.cert.CertPathBuilder.getRevocationChecker(),returns a certpathchecker that the encapsulated certpathbuilderspi implementation uses to check the revocation status of certificates.
java.security.cert.CertPathBuilderSpi.engineBuild(java.security.cert.CertPathParameters),attempts to build a certification path using the specified algorithm parameter set.
java.security.cert.CertPathBuilderSpi.engineGetRevocationChecker(),returns a certpathchecker that this implementation uses to check the revocation status of certificates.
java.security.cert.CertPathValidator.getAlgorithm(),returns the algorithm name of this certpathvalidator.
java.security.cert.CertPathValidator.getDefaultType(),returns the default certpathvalidator type as specified by the certpathvalidator.
java.security.cert.CertPathValidator.getInstance(java.lang.String),returns a certpathvalidator object that implements the specified algorithm.
"java.security.cert.CertPathValidator.getInstance(java.lang.String,java.lang.String)",returns a certpathvalidator object that implements the specified algorithm.
"java.security.cert.CertPathValidator.getInstance(java.lang.String,java.security.Provider)",returns a certpathvalidator object that implements the specified algorithm.
java.security.cert.CertPathValidator.getProvider(),returns the provider of this certpathvalidator.
java.security.cert.CertPathValidator.getRevocationChecker(),returns a certpathchecker that the encapsulated certpathvalidatorspi implementation uses to check the revocation status of certificates.
"java.security.cert.CertPathValidator.validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)",validates the specified certification path using the specified algorithm parameter set.
java.security.cert.CertPathValidatorSpi.engineGetRevocationChecker(),returns a certpathchecker that this implementation uses to check the revocation status of certificates.
"java.security.cert.CertPathValidatorSpi.engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)",validates the specified certification path using the specified algorithm parameter set.
java.security.cert.CertStore.getCertificates(java.security.cert.CertSelector),returns a collection of certificates that match the specified selector.
java.security.cert.CertStore.getCertStoreParameters(),returns the parameters used to initialize this certstore.
java.security.cert.CertStore.getCRLs(java.security.cert.CRLSelector),returns a collection of crls that match the specified selector.
java.security.cert.CertStore.getDefaultType(),returns the default certstore type as specified by the certstore.
"java.security.cert.CertStore.getInstance(java.lang.String,java.security.cert.CertStoreParameters)",returns a certstore object that implements the specified certstore type and is initialized with the specified parameters.
"java.security.cert.CertStore.getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.lang.String)",returns a certstore object that implements the specified certstore type.
"java.security.cert.CertStore.getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)",returns a certstore object that implements the specified certstore type.
java.security.cert.CertStore.getProvider(),returns the provider of this certstore.
java.security.cert.CertStore.getType(),returns the type of this certstore.
java.security.cert.CertStoreSpi.engineGetCertificates(java.security.cert.CertSelector),returns a collection of certificates that match the specified selector.
java.security.cert.CertStoreSpi.engineGetCRLs(java.security.cert.CRLSelector),returns a collection of crls that match the specified selector.
java.security.cert.CollectionCertStoreParameters.clone(),returns a copy of this object.
java.security.cert.CollectionCertStoreParameters.getCollection(),returns the collection from which certificates and crls are retrieved.
java.security.cert.CollectionCertStoreParameters.toString(),returns a formatted string describing the parameters.
java.security.cert.CRL.getType(),returns the type of this crl.
java.security.cert.CRL.isRevoked(java.security.cert.Certificate),checks whether the given certificate is on this crl.
java.security.cert.CRL.toString(),returns a string representation of this crl.
java.security.cert.LDAPCertStoreParameters.clone(),returns a copy of this object.
java.security.cert.LDAPCertStoreParameters.getPort(),returns the port number of the ldap server.
java.security.cert.LDAPCertStoreParameters.getServerName(),returns the dns name of the ldap server.
java.security.cert.LDAPCertStoreParameters.toString(),returns a formatted string describing the parameters.
java.security.cert.PKIXBuilderParameters.getMaxPathLength(),returns the value of the maximum number of intermediate non-self-issued certificates that may exist in a certification path.
java.security.cert.PKIXBuilderParameters.setMaxPathLength(int),sets the value of the maximum number of non-self-issued intermediate certificates that may exist in a certification path.
java.security.cert.PKIXBuilderParameters.toString(),returns a formatted string describing the parameters.
java.security.cert.PKIXCertPathBuilderResult.getCertPath(),returns the built and validated certification path.
java.security.cert.PKIXCertPathBuilderResult.toString(),return a printable representation of this pkixcertpathbuilderresult.
"java.security.cert.PKIXCertPathChecker.check(java.security.cert.Certificate,java.util.Collection<java.lang.String>)",performs the check(s) on the specified certificate using its internal state and removes any critical extensions that it processes from the specified collection of oid strings that represent the unresolved critical extensions.
java.security.cert.PKIXCertPathChecker.check(java.security.cert.Certificate),performs the check(s) on the specified certificate using its internal state.
java.security.cert.PKIXCertPathChecker.clone(),returns a clone of this object.
java.security.cert.PKIXCertPathChecker.getSupportedExtensions(),returns an immutable set of x.
java.security.cert.PKIXCertPathChecker.init(boolean),initializes the internal state of this pkixcertpathchecker.
java.security.cert.PKIXCertPathChecker.isForwardCheckingSupported(),indicates if forward checking is supported.
java.security.cert.PKIXCertPathValidatorResult.clone(),returns a copy of this object.
java.security.cert.PKIXCertPathValidatorResult.getPolicyTree(),returns the root node of the valid policy tree resulting from the pkix certification path validation algorithm.
java.security.cert.PKIXCertPathValidatorResult.getPublicKey(),"returns the public key of the subject (target) of the certification path, including any inherited public key parameters if applicable."
java.security.cert.PKIXCertPathValidatorResult.getTrustAnchor(),returns the trustanchor describing the ca that served as a trust anchor for the certification path.
java.security.cert.PKIXCertPathValidatorResult.toString(),return a printable representation of this pkixcertpathvalidatorresult.
java.security.cert.PKIXParameters.addCertPathChecker(java.security.cert.PKIXCertPathChecker),adds a pkixcertpathchecker to the list of certification path checkers.
java.security.cert.PKIXParameters.addCertStore(java.security.cert.CertStore),adds a certstore to the end of the list of certstores used in finding certificates and crls.
java.security.cert.PKIXParameters.clone(),makes a copy of this pkixparameters object.
java.security.cert.PKIXParameters.getCertPathCheckers(),returns the list of certification path checkers.
java.security.cert.PKIXParameters.getCertStores(),returns an immutable list of certstores that are used to find certificates and crls.
java.security.cert.PKIXParameters.getDate(),returns the time for which the validity of the certification path should be determined.
java.security.cert.PKIXParameters.getInitialPolicies(),"returns an immutable set of initial policy identifiers (oid strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing."
java.security.cert.PKIXParameters.getPolicyQualifiersRejected(),gets the policyqualifiersrejected flag.
java.security.cert.PKIXParameters.getSigProvider(),"returns the signature provider's name, or null if not set."
java.security.cert.PKIXParameters.getTargetCertConstraints(),returns the required constraints on the target certificate.
java.security.cert.PKIXParameters.getTrustAnchors(),returns an immutable set of the most-trusted cas.
java.security.cert.PKIXParameters.isAnyPolicyInhibited(),checks whether the any policy oid should be processed if it is included in a certificate.
java.security.cert.PKIXParameters.isExplicitPolicyRequired(),checks if explicit policy is required.
java.security.cert.PKIXParameters.isPolicyMappingInhibited(),checks if policy mapping is inhibited.
java.security.cert.PKIXParameters.isRevocationEnabled(),checks the revocationenabled flag.
java.security.cert.PKIXParameters.setAnyPolicyInhibited(boolean),sets state to determine if the any policy oid should be processed if it is included in a certificate.
java.security.cert.PKIXParameters.setCertPathCheckers(java.util.List<java.security.cert.PKIXCertPathChecker>),sets a list of additional certification path checkers.
java.security.cert.PKIXParameters.setCertStores(java.util.List<java.security.cert.CertStore>),sets the list of certstores to be used in finding certificates and crls.
java.security.cert.PKIXParameters.setDate(java.util.Date),sets the time for which the validity of the certification path should be determined.
java.security.cert.PKIXParameters.setExplicitPolicyRequired(boolean),sets the explicitpolicyrequired flag.
java.security.cert.PKIXParameters.setInitialPolicies(java.util.Set<java.lang.String>),"sets the set of initial policy identifiers (oid strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing."
java.security.cert.PKIXParameters.setPolicyMappingInhibited(boolean),sets the policymappinginhibited flag.
java.security.cert.PKIXParameters.setPolicyQualifiersRejected(boolean),sets the policyqualifiersrejected flag.
java.security.cert.PKIXParameters.setRevocationEnabled(boolean),sets the revocationenabled flag.
java.security.cert.PKIXParameters.setSigProvider(java.lang.String),sets the signature provider's name.
java.security.cert.PKIXParameters.setTargetCertConstraints(java.security.cert.CertSelector),sets the required constraints on the target certificate.
java.security.cert.PKIXParameters.setTrustAnchors(java.util.Set<java.security.cert.TrustAnchor>),sets the set of most-trusted cas.
java.security.cert.PKIXParameters.toString(),returns a formatted string describing the parameters.
java.security.cert.PKIXRevocationChecker.getOcspExtensions(),gets the optional ocsp request extensions.
java.security.cert.PKIXRevocationChecker.getOcspResponder(),gets the uri that identifies the location of the ocsp responder.
java.security.cert.PKIXRevocationChecker.getOcspResponderCert(),gets the ocsp responder's certificate.
java.security.cert.PKIXRevocationChecker.getOcspResponses(),gets the ocsp responses.
java.security.cert.PKIXRevocationChecker.getOptions(),gets the revocation options.
java.security.cert.PKIXRevocationChecker.getSoftFailExceptions(),returns a list containing the exceptions that are ignored by the revocation checker when the soft_fail option is set.
java.security.cert.PKIXRevocationChecker.setOcspExtensions(java.util.List<java.security.cert.Extension>),sets the optional ocsp request extensions.
java.security.cert.PKIXRevocationChecker.setOcspResponder(java.net.URI),sets the uri that identifies the location of the ocsp responder.
java.security.cert.PKIXRevocationChecker.setOcspResponderCert(java.security.cert.X509Certificate),sets the ocsp responder's certificate.
"java.security.cert.PKIXRevocationChecker.setOcspResponses(,byte[]>)",sets the ocsp responses.
java.security.cert.PKIXRevocationChecker.setOptions(java.util.Set<java.security.cert.PKIXRevocationChecker.Option>),sets the revocation options.
java.security.cert.PolicyQualifierInfo.getEncoded(),returns the asn.
java.security.cert.PolicyQualifierInfo.getPolicyQualifier(),returns the asn.
java.security.cert.PolicyQualifierInfo.getPolicyQualifierId(),returns the policyqualifierid field of this policyqualifierinfo.
java.security.cert.PolicyQualifierInfo.toString(),return a printable representation of this policyqualifierinfo.
java.security.cert.TrustAnchor.getCA(),returns the name of the most-trusted ca as an x500principal.
java.security.cert.TrustAnchor.getCAName(),returns the name of the most-trusted ca in rfc 2253 string format.
java.security.cert.TrustAnchor.getCAPublicKey(),returns the public key of the most-trusted ca.
java.security.cert.TrustAnchor.getNameConstraints(),returns the name constraints parameter.
java.security.cert.TrustAnchor.getTrustedCert(),returns the most-trusted ca certificate.
java.security.cert.TrustAnchor.toString(),returns a formatted string describing the trustanchor.
java.security.cert.X509Certificate.checkValidity(),checks that the certificate is currently valid.
java.security.cert.X509Certificate.checkValidity(java.util.Date),checks that the given date is within the certificate's validity period.
java.security.cert.X509Certificate.getBasicConstraints(),"gets the certificate constraints path length from the critical basicconstraints extension, (oid = 2."
java.security.cert.X509Certificate.getExtendedKeyUsage(),"gets an unmodifiable list of strings representing the object identifiers of the extkeyusagesyntax field of the extended key usage extension, (oid = 2."
java.security.cert.X509Certificate.getIssuerAlternativeNames(),"gets an immutable collection of issuer alternative names from the issueraltname extension, (oid = 2."
java.security.cert.X509Certificate.getIssuerDN(),"denigrated, replaced by getissuerx500principal()."
java.security.cert.X509Certificate.getIssuerUniqueID(),gets the issueruniqueid value from the certificate.
java.security.cert.X509Certificate.getIssuerX500Principal(),returns the issuer (issuer distinguished name) value from the certificate as an x500principal.
java.security.cert.X509Certificate.getKeyUsage(),"gets a boolean array representing bits of the keyusage extension, (oid = 2."
java.security.cert.X509Certificate.getNotAfter(),gets the notafter date from the validity period of the certificate.
java.security.cert.X509Certificate.getNotBefore(),gets the notbefore date from the validity period of the certificate.
java.security.cert.X509Certificate.getSerialNumber(),gets the serialnumber value from the certificate.
java.security.cert.X509Certificate.getSigAlgName(),gets the signature algorithm name for the certificate signature algorithm.
java.security.cert.X509Certificate.getSigAlgOID(),gets the signature algorithm oid string from the certificate.
java.security.cert.X509Certificate.getSigAlgParams(),gets the der-encoded signature algorithm parameters from this certificate's signature algorithm.
java.security.cert.X509Certificate.getSignature(),gets the signature value (the raw signature bits) from the certificate.
java.security.cert.X509Certificate.getSubjectAlternativeNames(),"gets an immutable collection of subject alternative names from the subjectaltname extension, (oid = 2."
java.security.cert.X509Certificate.getSubjectDN(),"denigrated, replaced by getsubjectx500principal()."
java.security.cert.X509Certificate.getSubjectUniqueID(),gets the subjectuniqueid value from the certificate.
java.security.cert.X509Certificate.getSubjectX500Principal(),returns the subject (subject distinguished name) value from the certificate as an x500principal.
java.security.cert.X509Certificate.getTBSCertificate(),"gets the der-encoded certificate information, the tbscertificate from this certificate."
java.security.cert.X509Certificate.getVersion(),gets the version (version number) value from the certificate.
"java.security.cert.X509Certificate.verify(java.security.PublicKey,java.security.Provider)",verifies that this certificate was signed using the private key that corresponds to the specified public key.
"java.security.cert.X509CertSelector.addPathToName(int,java.lang.String)",adds a name to the pathtonames criterion.
"java.security.cert.X509CertSelector.addPathToName(int,byte[])",adds a name to the pathtonames criterion.
"java.security.cert.X509CertSelector.addSubjectAlternativeName(int,java.lang.String)",adds a name to the subjectalternativenames criterion.
"java.security.cert.X509CertSelector.addSubjectAlternativeName(int,byte[])",adds a name to the subjectalternativenames criterion.
java.security.cert.X509CertSelector.clone(),returns a copy of this object.
java.security.cert.X509CertSelector.getAuthorityKeyIdentifier(),returns the authoritykeyidentifier criterion.
java.security.cert.X509CertSelector.getBasicConstraints(),returns the basic constraints constraint.
java.security.cert.X509CertSelector.getCertificate(),returns the certificateequals criterion.
java.security.cert.X509CertSelector.getCertificateValid(),returns the certificatevalid criterion.
java.security.cert.X509CertSelector.getExtendedKeyUsage(),returns the extendedkeyusage criterion.
java.security.cert.X509CertSelector.getIssuer(),returns the issuer criterion as an x500principal.
java.security.cert.X509CertSelector.getIssuerAsBytes(),returns the issuer criterion as a byte array.
java.security.cert.X509CertSelector.getIssuerAsString(),"denigrated, use getissuer() or getissuerasbytes() instead."
java.security.cert.X509CertSelector.getKeyUsage(),returns the keyusage criterion.
java.security.cert.X509CertSelector.getMatchAllSubjectAltNames(),indicates if the x509certificate must contain all or at least one of the subjectalternativenames specified in the setsubjectalternativenames or addsubjectalternativename methods.
java.security.cert.X509CertSelector.getNameConstraints(),returns the name constraints criterion.
java.security.cert.X509CertSelector.getPathToNames(),returns a copy of the pathtonames criterion.
java.security.cert.X509CertSelector.getPolicy(),returns the policy criterion.
java.security.cert.X509CertSelector.getPrivateKeyValid(),returns the privatekeyvalid criterion.
java.security.cert.X509CertSelector.getSerialNumber(),returns the serialnumber criterion.
java.security.cert.X509CertSelector.getSubject(),returns the subject criterion as an x500principal.
java.security.cert.X509CertSelector.getSubjectAlternativeNames(),returns a copy of the subjectalternativenames criterion.
java.security.cert.X509CertSelector.getSubjectAsBytes(),returns the subject criterion as a byte array.
java.security.cert.X509CertSelector.getSubjectAsString(),"denigrated, use getsubject() or getsubjectasbytes() instead."
java.security.cert.X509CertSelector.getSubjectKeyIdentifier(),returns the subjectkeyidentifier criterion.
java.security.cert.X509CertSelector.getSubjectPublicKey(),returns the subjectpublickey criterion.
java.security.cert.X509CertSelector.getSubjectPublicKeyAlgID(),returns the subjectpublickeyalgid criterion.
java.security.cert.X509CertSelector.match(java.security.cert.Certificate),decides whether a certificate should be selected.
java.security.cert.X509CertSelector.setAuthorityKeyIdentifier(byte[]),sets the authoritykeyidentifier criterion.
java.security.cert.X509CertSelector.setBasicConstraints(int),sets the basic constraints constraint.
java.security.cert.X509CertSelector.setCertificate(java.security.cert.X509Certificate),sets the certificateequals criterion.
java.security.cert.X509CertSelector.setCertificateValid(java.util.Date),sets the certificatevalid criterion.
java.security.cert.X509CertSelector.setExtendedKeyUsage(java.util.Set<java.lang.String>),sets the extendedkeyusage criterion.
java.security.cert.X509CertSelector.setIssuer(javax.security.auth.x500.X500Principal),sets the issuer criterion.
java.security.cert.X509CertSelector.setIssuer(java.lang.String),"denigrated, use setissuer(x500principal) or setissuer(byte[]) instead."
java.security.cert.X509CertSelector.setIssuer(byte[]),sets the issuer criterion.
java.security.cert.X509CertSelector.setKeyUsage(boolean[]),sets the keyusage criterion.
java.security.cert.X509CertSelector.setMatchAllSubjectAltNames(boolean),enables/disables matching all of the subjectalternativenames specified in the setsubjectalternativenames or addsubjectalternativename methods.
java.security.cert.X509CertSelector.setNameConstraints(byte[]),sets the name constraints criterion.
java.security.cert.X509CertSelector.setPathToNames(java.util.Collection<java.util.List<?>>),sets the pathtonames criterion.
java.security.cert.X509CertSelector.setPolicy(java.util.Set<java.lang.String>),sets the policy constraint.
java.security.cert.X509CertSelector.setPrivateKeyValid(java.util.Date),sets the privatekeyvalid criterion.
java.security.cert.X509CertSelector.setSerialNumber(java.math.BigInteger),sets the serialnumber criterion.
java.security.cert.X509CertSelector.setSubject(javax.security.auth.x500.X500Principal),sets the subject criterion.
java.security.cert.X509CertSelector.setSubject(java.lang.String),"denigrated, use setsubject(x500principal) or setsubject(byte[]) instead."
java.security.cert.X509CertSelector.setSubject(byte[]),sets the subject criterion.
java.security.cert.X509CertSelector.setSubjectAlternativeNames(java.util.Collection<java.util.List<?>>),sets the subjectalternativenames criterion.
java.security.cert.X509CertSelector.setSubjectKeyIdentifier(byte[]),sets the subjectkeyidentifier criterion.
java.security.cert.X509CertSelector.setSubjectPublicKey(java.security.PublicKey),sets the subjectpublickey criterion.
java.security.cert.X509CertSelector.setSubjectPublicKey(byte[]),sets the subjectpublickey criterion.
java.security.cert.X509CertSelector.setSubjectPublicKeyAlgID(java.lang.String),sets the subjectpublickeyalgid criterion.
java.security.cert.X509CertSelector.toString(),return a printable representation of the certselector.
java.security.cert.X509CRL.equals(java.lang.Object),compares this crl for equality with the given object.
java.security.cert.X509CRL.getEncoded(),returns the asn.
java.security.cert.X509CRL.getIssuerDN(),"denigrated, replaced by getissuerx500principal()."
java.security.cert.X509CRL.getIssuerX500Principal(),returns the issuer (issuer distinguished name) value from the crl as an x500principal.
java.security.cert.X509CRL.getNextUpdate(),gets the nextupdate date from the crl.
java.security.cert.X509CRL.getRevokedCertificate(java.math.BigInteger),"gets the crl entry, if any, with the given certificate serialnumber."
java.security.cert.X509CRL.getRevokedCertificate(java.security.cert.X509Certificate),"get the crl entry, if any, for the given certificate."
java.security.cert.X509CRL.getRevokedCertificates(),gets all the entries from this crl.
java.security.cert.X509CRL.getSigAlgName(),gets the signature algorithm name for the crl signature algorithm.
java.security.cert.X509CRL.getSigAlgOID(),gets the signature algorithm oid string from the crl.
java.security.cert.X509CRL.getSigAlgParams(),gets the der-encoded signature algorithm parameters from this crl's signature algorithm.
java.security.cert.X509CRL.getSignature(),gets the signature value (the raw signature bits) from the crl.
java.security.cert.X509CRL.getTBSCertList(),"gets the der-encoded crl information, the tbscertlist from this crl."
java.security.cert.X509CRL.getThisUpdate(),gets the thisupdate date from the crl.
java.security.cert.X509CRL.getVersion(),gets the version (version number) value from the crl.
java.security.cert.X509CRL.hashCode(),returns a hashcode value for this crl from its encoded form.
java.security.cert.X509CRL.verify(java.security.PublicKey),verifies that this crl was signed using the private key that corresponds to the given public key.
"java.security.cert.X509CRL.verify(java.security.PublicKey,java.lang.String)",verifies that this crl was signed using the private key that corresponds to the given public key.
"java.security.cert.X509CRL.verify(java.security.PublicKey,java.security.Provider)",verifies that this crl was signed using the private key that corresponds to the given public key.
java.security.cert.X509CRLEntry.equals(java.lang.Object),compares this crl entry for equality with the given object.
java.security.cert.X509CRLEntry.getCertificateIssuer(),get the issuer of the x509certificate described by this entry.
java.security.cert.X509CRLEntry.getEncoded(),returns the asn.
java.security.cert.X509CRLEntry.getRevocationDate(),"gets the revocation date from this x509crlentry, the revocationdate."
java.security.cert.X509CRLEntry.getRevocationReason(),"returns the reason the certificate has been revoked, as specified in the reason code extension of this crl entry."
java.security.cert.X509CRLEntry.getSerialNumber(),"gets the serial number from this x509crlentry, the usercertificate."
java.security.cert.X509CRLEntry.hasExtensions(),returns true if this crl entry has extensions.
java.security.cert.X509CRLEntry.hashCode(),returns a hashcode value for this crl entry from its encoded form.
java.security.cert.X509CRLEntry.toString(),returns a string representation of this crl entry.
java.security.cert.X509CRLSelector.addIssuer(javax.security.auth.x500.X500Principal),adds a name to the issuernames criterion.
java.security.cert.X509CRLSelector.addIssuerName(java.lang.String),"denigrated, use addissuer(x500principal) or addissuername(byte[]) instead."
java.security.cert.X509CRLSelector.addIssuerName(byte[]),adds a name to the issuernames criterion.
java.security.cert.X509CRLSelector.clone(),returns a copy of this object.
java.security.cert.X509CRLSelector.getCertificateChecking(),returns the certificate being checked.
java.security.cert.X509CRLSelector.getDateAndTime(),returns the dateandtime criterion.
java.security.cert.X509CRLSelector.getIssuerNames(),returns a copy of the issuernames criterion.
java.security.cert.X509CRLSelector.getIssuers(),returns the issuernames criterion.
java.security.cert.X509CRLSelector.getMaxCRL(),returns the maxcrlnumber criterion.
java.security.cert.X509CRLSelector.getMinCRL(),returns the mincrlnumber criterion.
java.security.cert.X509CRLSelector.match(java.security.cert.CRL),decides whether a crl should be selected.
java.security.cert.X509CRLSelector.setCertificateChecking(java.security.cert.X509Certificate),sets the certificate being checked.
java.security.cert.X509CRLSelector.setDateAndTime(java.util.Date),sets the dateandtime criterion.
java.security.cert.X509CRLSelector.setIssuerNames(java.util.Collection<?>),note: use setissuers(collection) instead or only specify the byte array form of distinguished names when using this method.
java.security.cert.X509CRLSelector.setIssuers(java.util.Collection<javax.security.auth.x500.X500Principal>),sets the issuernames criterion.
java.security.cert.X509CRLSelector.setMaxCRLNumber(java.math.BigInteger),sets the maxcrlnumber criterion.
java.security.cert.X509CRLSelector.setMinCRLNumber(java.math.BigInteger),sets the mincrlnumber criterion.
java.security.cert.X509CRLSelector.toString(),returns a printable representation of the x509crlselector.
java.security.cert.CertPathValidatorException.BasicReason.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.security.cert.CertPathValidatorException.BasicReason.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.security.cert.CRLReason.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.security.cert.CRLReason.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.security.cert.PKIXReason.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.security.cert.PKIXReason.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.security.cert.PKIXRevocationChecker.Option.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.security.cert.PKIXRevocationChecker.Option.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.security.cert.CertificateRevokedException.getAuthorityName(),returns the name of the authority that signed the certificate's revocation status information.
java.security.cert.CertificateRevokedException.getExtensions(),returns a map of x.
java.security.cert.CertificateRevokedException.getInvalidityDate(),"returns the invalidity date, as specified in the invalidity date extension of this certificaterevokedexception."
java.security.cert.CertificateRevokedException.getRevocationDate(),returns the date on which the certificate was revoked.
java.security.cert.CertificateRevokedException.getRevocationReason(),returns the reason the certificate was revoked.
java.security.cert.CertPathValidatorException.getCertPath(),returns the certification path that was being validated when the exception was thrown.
java.security.cert.CertPathValidatorException.getIndex(),returns the index of the certificate in the certification path that caused the exception to be thrown.
java.security.cert.CertPathValidatorException.getReason(),returns the reason that the validation failed.
java.security.interfaces.DSAKey.getParams(),returns the dsa-specific key parameters.
"java.security.interfaces.DSAKeyPairGenerator.initialize(java.security.interfaces.DSAParams,java.security.SecureRandom)","initializes the key pair generator using the dsa family parameters (p,q and g) and an optional securerandom bit source."
"java.security.interfaces.DSAKeyPairGenerator.initialize(int,boolean,java.security.SecureRandom)","initializes the key pair generator for a given modulus length (instead of parameters), and an optional securerandom bit source."
java.security.interfaces.DSAParams.getG(),"returns the base, g."
java.security.interfaces.DSAParams.getP(),"returns the prime, p."
java.security.interfaces.DSAParams.getQ(),"returns the subprime, q."
java.security.interfaces.DSAPrivateKey.getX(),"returns the value of the private key, x."
java.security.interfaces.DSAPublicKey.getY(),"returns the value of the public key, y."
java.security.interfaces.ECKey.getParams(),returns the domain parameters associated with this key.
java.security.interfaces.ECPrivateKey.getS(),returns the private value s.
java.security.interfaces.ECPublicKey.getW(),returns the public point w.
java.security.interfaces.RSAKey.getModulus(),returns the modulus.
java.security.interfaces.RSAMultiPrimePrivateCrtKey.getCrtCoefficient(),returns the crtcoefficient.
java.security.interfaces.RSAMultiPrimePrivateCrtKey.getOtherPrimeInfo(),returns the otherprimeinfo or null if there are only two prime factors (p and q).
java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPrimeExponentP(),returns the primeexponentp.
java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPrimeExponentQ(),returns the primeexponentq.
java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPrimeP(),returns the primep.
java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPrimeQ(),returns the primeq.
java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPublicExponent(),returns the public exponent.
java.security.interfaces.RSAPrivateCrtKey.getCrtCoefficient(),returns the crtcoefficient.
java.security.interfaces.RSAPrivateCrtKey.getPrimeExponentP(),returns the primeexponentp.
java.security.interfaces.RSAPrivateCrtKey.getPrimeExponentQ(),returns the primeexponentq.
java.security.interfaces.RSAPrivateCrtKey.getPrimeP(),returns the primep.
java.security.interfaces.RSAPrivateCrtKey.getPrimeQ(),returns the primeq.
java.security.interfaces.RSAPrivateCrtKey.getPublicExponent(),returns the public exponent.
java.security.interfaces.RSAPrivateKey.getPrivateExponent(),returns the private exponent.
java.security.interfaces.RSAPublicKey.getPublicExponent(),returns the public exponent.
java.security.spec.ECField.getFieldSize(),returns the field size in bits.
java.security.spec.DSAGenParameterSpec.getPrimePLength(),returns the desired length of the prime p of the to-be-generated dsa domain parameters in bits.
java.security.spec.DSAGenParameterSpec.getSeedLength(),returns the desired length of the domain parameter seed in bits.
java.security.spec.DSAGenParameterSpec.getSubprimeQLength(),returns the desired length of the sub-prime q of the to-be-generated dsa domain parameters in bits.
java.security.spec.DSAParameterSpec.getG(),returns the base g.
java.security.spec.DSAParameterSpec.getP(),returns the prime p.
java.security.spec.DSAParameterSpec.getQ(),returns the sub-prime q.
java.security.spec.DSAPrivateKeySpec.getG(),returns the base g.
java.security.spec.DSAPrivateKeySpec.getP(),returns the prime p.
java.security.spec.DSAPrivateKeySpec.getQ(),returns the sub-prime q.
java.security.spec.DSAPrivateKeySpec.getX(),returns the private key x.
java.security.spec.DSAPublicKeySpec.getG(),returns the base g.
java.security.spec.DSAPublicKeySpec.getP(),returns the prime p.
java.security.spec.DSAPublicKeySpec.getQ(),returns the sub-prime q.
java.security.spec.DSAPublicKeySpec.getY(),returns the public key y.
java.security.spec.ECFieldF2m.equals(java.lang.Object),compares this finite field for equality with the specified object.
java.security.spec.ECFieldF2m.getFieldSize(),returns the field size in bits which is m for this characteristic 2 finite field.
java.security.spec.ECFieldF2m.getM(),returns the value m of this characteristic 2 finite field.
java.security.spec.ECFieldF2m.getMidTermsOfReductionPolynomial(),returns an integer array which contains the order of the middle term(s) of the reduction polynomial for polynomial basis or null for normal basis.
java.security.spec.ECFieldF2m.getReductionPolynomial(),returns a biginteger whose i-th bit corresponds to the i-th coefficient of the reduction polynomial for polynomial basis or null for normal basis.
java.security.spec.ECFieldF2m.hashCode(),returns a hash code value for this characteristic 2 finite field.
java.security.spec.ECFieldFp.equals(java.lang.Object),compares this prime finite field for equality with the specified object.
java.security.spec.ECFieldFp.getFieldSize(),returns the field size in bits which is size of prime p for this prime finite field.
java.security.spec.ECFieldFp.getP(),returns the prime p of this prime finite field.
java.security.spec.ECFieldFp.hashCode(),returns a hash code value for this prime finite field.
java.security.spec.ECGenParameterSpec.getName(),returns the standard or predefined name of the to-be-generated ec domain parameters.
java.security.spec.ECParameterSpec.getCofactor(),returns the cofactor.
java.security.spec.ECParameterSpec.getCurve(),returns the elliptic curve that this parameter defines.
java.security.spec.ECParameterSpec.getGenerator(),returns the generator which is also known as the base point.
java.security.spec.ECParameterSpec.getOrder(),returns the order of the generator.
java.security.spec.ECPoint.equals(java.lang.Object),compares this elliptic curve point for equality with the specified object.
java.security.spec.ECPoint.getAffineX(),returns the affine x-coordinate x.
java.security.spec.ECPoint.getAffineY(),returns the affine y-coordinate y.
java.security.spec.ECPoint.hashCode(),returns a hash code value for this elliptic curve point.
java.security.spec.ECPrivateKeySpec.getParams(),returns the associated elliptic curve domain parameters.
java.security.spec.ECPrivateKeySpec.getS(),returns the private value s.
java.security.spec.ECPublicKeySpec.getParams(),returns the associated elliptic curve domain parameters.
java.security.spec.ECPublicKeySpec.getW(),returns the public point w.
java.security.spec.EllipticCurve.equals(java.lang.Object),compares this elliptic curve for equality with the specified object.
java.security.spec.EllipticCurve.getA(),returns the first coefficient a of the elliptic curve.
java.security.spec.EllipticCurve.getB(),returns the second coefficient b of the elliptic curve.
java.security.spec.EllipticCurve.getField(),returns the finite field field that this elliptic curve is over.
java.security.spec.EllipticCurve.getSeed(),returns the seeding bytes seed used during curve generation.
java.security.spec.EllipticCurve.hashCode(),returns a hash code value for this elliptic curve.
java.security.spec.EncodedKeySpec.getEncoded(),returns the encoded key.
java.security.spec.EncodedKeySpec.getFormat(),returns the name of the encoding format associated with this key specification.
java.security.spec.MGF1ParameterSpec.getDigestAlgorithm(),returns the algorithm name of the message digest used by the mask generation function.
java.security.spec.PKCS8EncodedKeySpec.getEncoded(),"returns the key bytes, encoded according to the pkcs #8 standard."
java.security.spec.PKCS8EncodedKeySpec.getFormat(),returns the name of the encoding format associated with this key specification.
java.security.spec.PSSParameterSpec.getDigestAlgorithm(),returns the message digest algorithm name.
java.security.spec.PSSParameterSpec.getMGFAlgorithm(),returns the mask generation function algorithm name.
java.security.spec.PSSParameterSpec.getMGFParameters(),returns the parameters for the mask generation function.
java.security.spec.PSSParameterSpec.getSaltLength(),returns the salt length in bits.
java.security.spec.PSSParameterSpec.getTrailerField(),"returns the value for the trailer field, i."
java.security.spec.RSAKeyGenParameterSpec.getKeysize(),returns the keysize.
java.security.spec.RSAKeyGenParameterSpec.getPublicExponent(),returns the public-exponent value.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getCrtCoefficient(),returns the crtcoefficient.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getOtherPrimeInfo(),returns a copy of the otherprimeinfo or null if there are only two prime factors (p and q).
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeExponentP(),returns the primeexponentp.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeExponentQ(),returns the primeexponentq.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeP(),returns the primep.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeQ(),returns the primeq.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPublicExponent(),returns the public exponent.
java.security.spec.RSAOtherPrimeInfo.getCrtCoefficient(),returns the prime's crtcoefficient.
java.security.spec.RSAOtherPrimeInfo.getExponent(),returns the prime's exponent.
java.security.spec.RSAOtherPrimeInfo.getPrime(),returns the prime.
java.security.spec.RSAPrivateCrtKeySpec.getCrtCoefficient(),returns the crtcoefficient.
java.security.spec.RSAPrivateCrtKeySpec.getPrimeExponentP(),returns the primeexponentp.
java.security.spec.RSAPrivateCrtKeySpec.getPrimeExponentQ(),returns the primeexponentq.
java.security.spec.RSAPrivateCrtKeySpec.getPrimeP(),returns the primep.
java.security.spec.RSAPrivateCrtKeySpec.getPrimeQ(),returns the primeq.
java.security.spec.RSAPrivateCrtKeySpec.getPublicExponent(),returns the public exponent.
java.security.spec.RSAPrivateKeySpec.getModulus(),returns the modulus.
java.security.spec.RSAPrivateKeySpec.getPrivateExponent(),returns the private exponent.
java.security.spec.RSAPublicKeySpec.getModulus(),returns the modulus.
java.security.spec.RSAPublicKeySpec.getPublicExponent(),returns the public exponent.
java.security.spec.X509EncodedKeySpec.getEncoded(),"returns the key bytes, encoded according to the x."
java.security.spec.X509EncodedKeySpec.getFormat(),returns the name of the encoding format associated with this key specification.
java.sql.Array.free(),this method frees the array object and releases the resources that it holds.
java.sql.Array.getArray(),retrieves the contents of the sql array value designated by this array object in the form of an array in the java programming language.
"java.sql.Array.getArray(,java.lang.Class<?>>)",retrieves the contents of the sql array value designated by this array object.
"java.sql.Array.getArray(long,int)","retrieves a slice of the sql array value designated by this array object, beginning with the specified index and containing up to count successive elements of the sql array."
"java.sql.Array.getArray(long,int,,java.lang.Class<?>>)","retreives a slice of the sql array value designated by this array object, beginning with the specified index and containing up to count successive elements of the sql array."
java.sql.Array.getBaseType(),retrieves the jdbc type of the elements in the array designated by this array object.
java.sql.Array.getBaseTypeName(),retrieves the sql type name of the elements in the array designated by this array object.
java.sql.Array.getResultSet(),retrieves a result set that contains the elements of the sql array value designated by this array object.
"java.sql.Array.getResultSet(,java.lang.Class<?>>)",retrieves a result set that contains the elements of the sql array value designated by this array object.
"java.sql.Array.getResultSet(long,int)",retrieves a result set holding the elements of the subarray that starts at index index and contains up to count successive elements.
"java.sql.Array.getResultSet(long,int,,java.lang.Class<?>>)",retrieves a result set holding the elements of the subarray that starts at index index and contains up to count successive elements.
java.sql.Blob.free(),this method frees the blob object and releases the resources that it holds.
java.sql.Blob.getBinaryStream(),retrieves the blob value designated by this blob instance as a stream.
"java.sql.Blob.getBinaryStream(long,long)","returns an inputstream object that contains a partial blob value, starting with the byte specified by pos, which is length bytes in length."
"java.sql.Blob.getBytes(long,int)","retrieves all or part of the blob value that this blob object represents, as an array of bytes."
java.sql.Blob.length(),returns the number of bytes in the blob value designated by this blob object.
"java.sql.Blob.position(byte[],long)",retrieves the byte position at which the specified byte array pattern begins within the blob value that this blob object represents.
"java.sql.Blob.position(java.sql.Blob,long)",retrieves the byte position in the blob value designated by this blob object at which pattern begins.
java.sql.Blob.setBinaryStream(long),retrieves a stream that can be used to write to the blob value that this blob object represents.
"java.sql.Blob.setBytes(long,byte[])","writes the given array of bytes to the blob value that this blob object represents, starting at position pos, and returns the number of bytes written."
"java.sql.Blob.setBytes(long,byte[],int,int)",writes all or part of the given byte array to the blob value that this blob object represents and returns the number of bytes written.
java.sql.Blob.truncate(long),truncates the blob value that this blob object represents to be len bytes in length.
java.sql.CallableStatement.getArray(int),retrieves the value of the designated jdbc array parameter as an array object in the java programming language.
java.sql.CallableStatement.getArray(java.lang.String),retrieves the value of a jdbc array parameter as an array object in the java programming language.
java.sql.CallableStatement.getBigDecimal(int),retrieves the value of the designated jdbc numeric parameter as a java.
java.sql.CallableStatement.getBigDecimal(java.lang.String),retrieves the value of a jdbc numeric parameter as a java.
java.sql.CallableStatement.getBlob(int),retrieves the value of the designated jdbc blob parameter as a blob object in the java programming language.
java.sql.CallableStatement.getBlob(java.lang.String),retrieves the value of a jdbc blob parameter as a blob object in the java programming language.
java.sql.CallableStatement.getBoolean(int),retrieves the value of the designated jdbc bit or boolean parameter as a boolean in the java programming language.
java.sql.CallableStatement.getBoolean(java.lang.String),retrieves the value of a jdbc bit or boolean parameter as a boolean in the java programming language.
java.sql.CallableStatement.getByte(int),retrieves the value of the designated jdbc tinyint parameter as a byte in the java programming language.
java.sql.CallableStatement.getByte(java.lang.String),retrieves the value of a jdbc tinyint parameter as a byte in the java programming language.
java.sql.CallableStatement.getBytes(int),retrieves the value of the designated jdbc binary or varbinary parameter as an array of byte values in the java programming language.
java.sql.CallableStatement.getBytes(java.lang.String),retrieves the value of a jdbc binary or varbinary parameter as an array of byte values in the java programming language.
java.sql.CallableStatement.getCharacterStream(int),retrieves the value of the designated parameter as a java.
java.sql.CallableStatement.getCharacterStream(java.lang.String),retrieves the value of the designated parameter as a java.
java.sql.CallableStatement.getClob(int),retrieves the value of the designated jdbc clob parameter as a java.
java.sql.CallableStatement.getClob(java.lang.String),retrieves the value of a jdbc clob parameter as a java.
java.sql.CallableStatement.getDate(int),retrieves the value of the designated jdbc date parameter as a java.
"java.sql.CallableStatement.getDate(int,java.util.Calendar)",retrieves the value of the designated jdbc date parameter as a java.
java.sql.CallableStatement.getDate(java.lang.String),retrieves the value of a jdbc date parameter as a java.
"java.sql.CallableStatement.getDate(java.lang.String,java.util.Calendar)",retrieves the value of a jdbc date parameter as a java.
java.sql.CallableStatement.getDouble(int),retrieves the value of the designated jdbc double parameter as a double in the java programming language.
java.sql.CallableStatement.getDouble(java.lang.String),retrieves the value of a jdbc double parameter as a double in the java programming language.
java.sql.CallableStatement.getFloat(int),retrieves the value of the designated jdbc float parameter as a float in the java programming language.
java.sql.CallableStatement.getFloat(java.lang.String),retrieves the value of a jdbc float parameter as a float in the java programming language.
java.sql.CallableStatement.getInt(int),retrieves the value of the designated jdbc integer parameter as an int in the java programming language.
java.sql.CallableStatement.getInt(java.lang.String),retrieves the value of a jdbc integer parameter as an int in the java programming language.
java.sql.CallableStatement.getLong(int),retrieves the value of the designated jdbc bigint parameter as a long in the java programming language.
java.sql.CallableStatement.getLong(java.lang.String),retrieves the value of a jdbc bigint parameter as a long in the java programming language.
java.sql.CallableStatement.getNCharacterStream(int),retrieves the value of the designated parameter as a java.
java.sql.CallableStatement.getNCharacterStream(java.lang.String),retrieves the value of the designated parameter as a java.
java.sql.CallableStatement.getNClob(int),retrieves the value of the designated jdbc nclob parameter as a java.
java.sql.CallableStatement.getNClob(java.lang.String),retrieves the value of a jdbc nclob parameter as a java.
java.sql.CallableStatement.getNString(int),"retrieves the value of the designated nchar, nvarchar or longnvarchar parameter as a string in the java programming language."
java.sql.CallableStatement.getNString(java.lang.String),"retrieves the value of the designated nchar, nvarchar or longnvarchar parameter as a string in the java programming language."
java.sql.CallableStatement.getObject(int),retrieves the value of the designated parameter as an object in the java programming language.
"java.sql.CallableStatement.getObject(int,,java.lang.Class<?>>)",returns an object representing the value of out parameter parameterindex and uses map for the custom mapping of the parameter value.
java.sql.CallableStatement.getObject(java.lang.String),retrieves the value of a parameter as an object in the java programming language.
"java.sql.CallableStatement.getObject(java.lang.String,,java.lang.Class<?>>)",returns an object representing the value of out parameter parametername and uses map for the custom mapping of the parameter value.
"java.sql.CallableStatement.getObject(int,java.lang.Class<T>)","returns an object representing the value of out parameter parameterindex and will convert from the sql type of the parameter to the requested java data type, if the conversion is supported."
"java.sql.CallableStatement.getObject(java.lang.String,java.lang.Class<T>)","returns an object representing the value of out parameter parametername and will convert from the sql type of the parameter to the requested java data type, if the conversion is supported."
java.sql.CallableStatement.getRef(int),retrieves the value of the designated jdbc ref(<structured-type>) parameter as a ref object in the java programming language.
java.sql.CallableStatement.getRef(java.lang.String),retrieves the value of a jdbc ref(<structured-type>) parameter as a ref object in the java programming language.
java.sql.CallableStatement.getRowId(int),retrieves the value of the designated jdbc rowid parameter as a java.
java.sql.CallableStatement.getRowId(java.lang.String),retrieves the value of the designated jdbc rowid parameter as a java.
java.sql.CallableStatement.getShort(int),retrieves the value of the designated jdbc smallint parameter as a short in the java programming language.
java.sql.CallableStatement.getShort(java.lang.String),retrieves the value of a jdbc smallint parameter as a short in the java programming language.
java.sql.CallableStatement.getSQLXML(int),retrieves the value of the designated sql xml parameter as a java.
java.sql.CallableStatement.getSQLXML(java.lang.String),retrieves the value of the designated sql xml parameter as a java.
java.sql.CallableStatement.getString(int),"retrieves the value of the designated jdbc char, varchar, or longvarchar parameter as a string in the java programming language."
java.sql.CallableStatement.getString(java.lang.String),"retrieves the value of a jdbc char, varchar, or longvarchar parameter as a string in the java programming language."
java.sql.CallableStatement.getTime(int),retrieves the value of the designated jdbc time parameter as a java.
"java.sql.CallableStatement.getTime(int,java.util.Calendar)",retrieves the value of the designated jdbc time parameter as a java.
java.sql.CallableStatement.getTime(java.lang.String),retrieves the value of a jdbc time parameter as a java.
"java.sql.CallableStatement.getTime(java.lang.String,java.util.Calendar)",retrieves the value of a jdbc time parameter as a java.
java.sql.CallableStatement.getTimestamp(int),retrieves the value of the designated jdbc timestamp parameter as a java.
"java.sql.CallableStatement.getTimestamp(int,java.util.Calendar)",retrieves the value of the designated jdbc timestamp parameter as a java.
java.sql.CallableStatement.getTimestamp(java.lang.String),retrieves the value of a jdbc timestamp parameter as a java.
"java.sql.CallableStatement.getTimestamp(java.lang.String,java.util.Calendar)",retrieves the value of a jdbc timestamp parameter as a java.
java.sql.CallableStatement.getURL(int),retrieves the value of the designated jdbc datalink parameter as a java.
java.sql.CallableStatement.getURL(java.lang.String),retrieves the value of a jdbc datalink parameter as a java.
"java.sql.CallableStatement.registerOutParameter(int,int)",registers the out parameter in ordinal position parameterindex to the jdbc type sqltype.
"java.sql.CallableStatement.registerOutParameter(int,int,int)",registers the parameter in ordinal position parameterindex to be of jdbc type sqltype.
"java.sql.CallableStatement.registerOutParameter(int,int,java.lang.String)",registers the designated output parameter.
"java.sql.CallableStatement.registerOutParameter(java.lang.String,int)",registers the out parameter named parametername to the jdbc type sqltype.
"java.sql.CallableStatement.registerOutParameter(java.lang.String,int,int)",registers the parameter named parametername to be of jdbc type sqltype.
"java.sql.CallableStatement.registerOutParameter(java.lang.String,int,java.lang.String)",registers the designated output parameter.
"java.sql.CallableStatement.registerOutParameter(int,java.sql.SQLType)",registers the out parameter in ordinal position parameterindex to the jdbc type sqltype.
"java.sql.CallableStatement.registerOutParameter(int,java.sql.SQLType,int)",registers the parameter in ordinal position parameterindex to be of jdbc type sqltype.
"java.sql.CallableStatement.registerOutParameter(int,java.sql.SQLType,java.lang.String)",registers the designated output parameter.
"java.sql.CallableStatement.registerOutParameter(java.lang.String,java.sql.SQLType)",registers the out parameter named parametername to the jdbc type sqltype.
"java.sql.CallableStatement.registerOutParameter(java.lang.String,java.sql.SQLType,int)",registers the parameter named parametername to be of jdbc type sqltype.
"java.sql.CallableStatement.registerOutParameter(java.lang.String,java.sql.SQLType,java.lang.String)",registers the designated output parameter.
"java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream,int)","sets the designated parameter to the given input stream, which will have the specified number of bytes."
"java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream,long)","sets the designated parameter to the given input stream, which will have the specified number of bytes."
"java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream)",sets the designated parameter to the given input stream.
"java.sql.CallableStatement.setBigDecimal(java.lang.String,java.math.BigDecimal)",sets the designated parameter to the given java.
"java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream,int)","sets the designated parameter to the given input stream, which will have the specified number of bytes."
"java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream,long)","sets the designated parameter to the given input stream, which will have the specified number of bytes."
"java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream)",sets the designated parameter to the given input stream.
"java.sql.CallableStatement.setBlob(java.lang.String,java.io.InputStream,long)",sets the designated parameter to a inputstream object.
"java.sql.CallableStatement.setBlob(java.lang.String,java.sql.Blob)",sets the designated parameter to the given java.
"java.sql.CallableStatement.setBlob(java.lang.String,java.io.InputStream)",sets the designated parameter to a inputstream object.
"java.sql.CallableStatement.setBoolean(java.lang.String,boolean)",sets the designated parameter to the given java boolean value.
"java.sql.CallableStatement.setByte(java.lang.String,byte)",sets the designated parameter to the given java byte value.
"java.sql.CallableStatement.setBytes(java.lang.String,byte[])",sets the designated parameter to the given java array of bytes.
"java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader,int)","sets the designated parameter to the given reader object, which is the given number of characters long."
"java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader,long)","sets the designated parameter to the given reader object, which is the given number of characters long."
"java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader)",sets the designated parameter to the given reader object.
"java.sql.CallableStatement.setClob(java.lang.String,java.io.Reader,long)",sets the designated parameter to a reader object.
"java.sql.CallableStatement.setClob(java.lang.String,java.sql.Clob)",sets the designated parameter to the given java.
"java.sql.CallableStatement.setClob(java.lang.String,java.io.Reader)",sets the designated parameter to a reader object.
"java.sql.CallableStatement.setDate(java.lang.String,java.sql.Date)",sets the designated parameter to the given java.
"java.sql.CallableStatement.setDate(java.lang.String,java.sql.Date,java.util.Calendar)",sets the designated parameter to the given java.
"java.sql.CallableStatement.setDouble(java.lang.String,double)",sets the designated parameter to the given java double value.
"java.sql.CallableStatement.setFloat(java.lang.String,float)",sets the designated parameter to the given java float value.
"java.sql.CallableStatement.setInt(java.lang.String,int)",sets the designated parameter to the given java int value.
"java.sql.CallableStatement.setLong(java.lang.String,long)",sets the designated parameter to the given java long value.
"java.sql.CallableStatement.setNCharacterStream(java.lang.String,java.io.Reader,long)",sets the designated parameter to a reader object.
"java.sql.CallableStatement.setNCharacterStream(java.lang.String,java.io.Reader)",sets the designated parameter to a reader object.
"java.sql.CallableStatement.setNClob(java.lang.String,java.sql.NClob)",sets the designated parameter to a java.
"java.sql.CallableStatement.setNClob(java.lang.String,java.io.Reader,long)",sets the designated parameter to a reader object.
"java.sql.CallableStatement.setNClob(java.lang.String,java.io.Reader)",sets the designated parameter to a reader object.
"java.sql.CallableStatement.setNString(java.lang.String,java.lang.String)",sets the designated parameter to the given string object.
"java.sql.CallableStatement.setNull(java.lang.String,int)",sets the designated parameter to sql null.
"java.sql.CallableStatement.setNull(java.lang.String,int,java.lang.String)",sets the designated parameter to sql null.
"java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,int,int)",sets the value of the designated parameter with the given object.
"java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,int)",sets the value of the designated parameter with the given object.
"java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object)",sets the value of the designated parameter with the given object.
"java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,java.sql.SQLType,int)",sets the value of the designated parameter with the given object.
"java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,java.sql.SQLType)",sets the value of the designated parameter with the given object.
"java.sql.CallableStatement.setRowId(java.lang.String,java.sql.RowId)",sets the designated parameter to the given java.
"java.sql.CallableStatement.setShort(java.lang.String,short)",sets the designated parameter to the given java short value.
"java.sql.CallableStatement.setSQLXML(java.lang.String,java.sql.SQLXML)",sets the designated parameter to the given java.
"java.sql.CallableStatement.setString(java.lang.String,java.lang.String)",sets the designated parameter to the given java string value.
"java.sql.CallableStatement.setTime(java.lang.String,java.sql.Time)",sets the designated parameter to the given java.
"java.sql.CallableStatement.setTime(java.lang.String,java.sql.Time,java.util.Calendar)",sets the designated parameter to the given java.
"java.sql.CallableStatement.setTimestamp(java.lang.String,java.sql.Timestamp)",sets the designated parameter to the given java.
"java.sql.CallableStatement.setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)",sets the designated parameter to the given java.
"java.sql.CallableStatement.setURL(java.lang.String,java.net.URL)",sets the designated parameter to the given java.
java.sql.CallableStatement.wasNull(),retrieves whether the last out parameter read had the value of sql null.
java.sql.Clob.free(),this method frees the clob object and releases the resources the resources that it holds.
java.sql.Clob.getAsciiStream(),retrieves the clob value designated by this clob object as an ascii stream.
java.sql.Clob.getCharacterStream(),retrieves the clob value designated by this clob object as a java.
"java.sql.Clob.getCharacterStream(long,long)","returns a reader object that contains a partial clob value, starting with the character specified by pos, which is length characters in length."
"java.sql.Clob.getSubString(long,int)",retrieves a copy of the specified substring in the clob value designated by this clob object.
java.sql.Clob.length(),retrieves the number of characters in the clob value designated by this clob object.
"java.sql.Clob.position(java.lang.String,long)",retrieves the character position at which the specified substring searchstr appears in the sql clob value represented by this clob object.
"java.sql.Clob.position(java.sql.Clob,long)",retrieves the character position at which the specified clob object searchstr appears in this clob object.
java.sql.Clob.setAsciiStream(long),"retrieves a stream to be used to write ascii characters to the clob value that this clob object represents, starting at position pos."
java.sql.Clob.setCharacterStream(long),"retrieves a stream to be used to write a stream of unicode characters to the clob value that this clob object represents, at position pos."
"java.sql.Clob.setString(long,java.lang.String)",writes the given java string to the clob value that this clob object designates at the position pos.
"java.sql.Clob.setString(long,java.lang.String,int,int)","writes len characters of str, starting at character offset, to the clob value that this clob represents."
java.sql.Clob.truncate(long),truncates the clob value that this clob designates to have a length of len characters.
java.sql.Connection.abort(java.util.concurrent.Executor),terminates an open connection.
java.sql.Connection.clearWarnings(),clears all warnings reported for this connection object.
java.sql.Connection.close(),releases this connection object's database and jdbc resources immediately instead of waiting for them to be automatically released.
java.sql.Connection.commit(),makes all changes made since the previous commit/rollback permanent and releases any database locks currently held by this connection object.
"java.sql.Connection.createArrayOf(java.lang.String,java.lang.Object[])",factory method for creating array objects.
java.sql.Connection.createBlob(),constructs an object that implements the blob interface.
java.sql.Connection.createClob(),constructs an object that implements the clob interface.
java.sql.Connection.createNClob(),constructs an object that implements the nclob interface.
java.sql.Connection.createSQLXML(),constructs an object that implements the sqlxml interface.
java.sql.Connection.createStatement(),creates a statement object for sending sql statements to the database.
"java.sql.Connection.createStatement(int,int)",creates a statement object that will generate resultset objects with the given type and concurrency.
"java.sql.Connection.createStatement(int,int,int)","creates a statement object that will generate resultset objects with the given type, concurrency, and holdability."
"java.sql.Connection.createStruct(java.lang.String,java.lang.Object[])",factory method for creating struct objects.
java.sql.Connection.getAutoCommit(),retrieves the current auto-commit mode for this connection object.
java.sql.Connection.getCatalog(),retrieves this connection object's current catalog name.
java.sql.Connection.getClientInfo(java.lang.String),returns the value of the client info property specified by name.
java.sql.Connection.getClientInfo(),returns a list containing the name and current value of each client info property supported by the driver.
java.sql.Connection.getHoldability(),retrieves the current holdability of resultset objects created using this connection object.
java.sql.Connection.getMetaData(),retrieves a databasemetadata object that contains metadata about the database to which this connection object represents a connection.
java.sql.Connection.getNetworkTimeout(),retrieves the number of milliseconds the driver will wait for a database request to complete.
java.sql.Connection.getSchema(),retrieves this connection object's current schema name.
java.sql.Connection.getTransactionIsolation(),retrieves this connection object's current transaction isolation level.
java.sql.Connection.getTypeMap(),retrieves the map object associated with this connection object.
java.sql.Connection.getWarnings(),retrieves the first warning reported by calls on this connection object.
java.sql.Connection.isClosed(),retrieves whether this connection object has been closed.
java.sql.Connection.isReadOnly(),retrieves whether this connection object is in read-only mode.
java.sql.Connection.isValid(int),returns true if the connection has not been closed and is still valid.
java.sql.Connection.nativeSQL(java.lang.String),converts the given sql statement into the system's native sql grammar.
java.sql.Connection.prepareCall(java.lang.String),creates a callablestatement object for calling database stored procedures.
"java.sql.Connection.prepareCall(java.lang.String,int,int)",creates a callablestatement object that will generate resultset objects with the given type and concurrency.
"java.sql.Connection.prepareCall(java.lang.String,int,int,int)",creates a callablestatement object that will generate resultset objects with the given type and concurrency.
java.sql.Connection.prepareStatement(java.lang.String),creates a preparedstatement object for sending parameterized sql statements to the database.
"java.sql.Connection.prepareStatement(java.lang.String,int,int)",creates a preparedstatement object that will generate resultset objects with the given type and concurrency.
"java.sql.Connection.prepareStatement(java.lang.String,int,int,int)","creates a preparedstatement object that will generate resultset objects with the given type, concurrency, and holdability."
"java.sql.Connection.prepareStatement(java.lang.String,int)",creates a default preparedstatement object that has the capability to retrieve auto-generated keys.
"java.sql.Connection.prepareStatement(java.lang.String,int[])",creates a default preparedstatement object capable of returning the auto-generated keys designated by the given array.
"java.sql.Connection.prepareStatement(java.lang.String,java.lang.String[])",creates a default preparedstatement object capable of returning the auto-generated keys designated by the given array.
java.sql.Connection.releaseSavepoint(java.sql.Savepoint),removes the specified savepoint and subsequent savepoint objects from the current transaction.
java.sql.Connection.rollback(),undoes all changes made in the current transaction and releases any database locks currently held by this connection object.
java.sql.Connection.rollback(java.sql.Savepoint),undoes all changes made after the given savepoint object was set.
java.sql.Connection.setAutoCommit(boolean),sets this connection's auto-commit mode to the given state.
java.sql.Connection.setCatalog(java.lang.String),sets the given catalog name in order to select a subspace of this connection object's database in which to work.
"java.sql.Connection.setClientInfo(java.lang.String,java.lang.String)",sets the value of the client info property specified by name to the value specified by value.
java.sql.Connection.setClientInfo(java.util.Properties),sets the value of the connection's client info properties.
java.sql.Connection.setHoldability(int),changes the default holdability of resultset objects created using this connection object to the given holdability.
"java.sql.Connection.setNetworkTimeout(java.util.concurrent.Executor,int)",sets the maximum period a connection or objects created from the connection will wait for the database to reply to any one request.
java.sql.Connection.setReadOnly(boolean),puts this connection in read-only mode as a hint to the driver to enable database optimizations.
java.sql.Connection.setSavepoint(),creates an unnamed savepoint in the current transaction and returns the new savepoint object that represents it.
java.sql.Connection.setSavepoint(java.lang.String),creates a savepoint with the given name in the current transaction and returns the new savepoint object that represents it.
java.sql.Connection.setSchema(java.lang.String),sets the given schema name to access.
java.sql.Connection.setTransactionIsolation(int),attempts to change the transaction isolation level for this connection object to the one given.
"java.sql.Connection.setTypeMap(,java.lang.Class<?>>)",installs the given typemap object as the type map for this connection object.
java.sql.DatabaseMetaData.allProceduresAreCallable(),retrieves whether the current user can call all the procedures returned by the method getprocedures.
java.sql.DatabaseMetaData.allTablesAreSelectable(),retrieves whether the current user can use all the tables returned by the method gettables in a select statement.
java.sql.DatabaseMetaData.autoCommitFailureClosesAllResultSets(),"retrieves whether a sqlexception while autocommit is true indicates that all open resultsets are closed, even ones that are holdable."
java.sql.DatabaseMetaData.dataDefinitionCausesTransactionCommit(),retrieves whether a data definition statement within a transaction forces the transaction to commit.
java.sql.DatabaseMetaData.dataDefinitionIgnoredInTransactions(),retrieves whether this database ignores a data definition statement within a transaction.
java.sql.DatabaseMetaData.deletesAreDetected(int),retrieves whether or not a visible row delete can be detected by calling the method resultset.
java.sql.DatabaseMetaData.doesMaxRowSizeIncludeBlobs(),retrieves whether the return value for the method getmaxrowsize includes the sql data types longvarchar and longvarbinary.
java.sql.DatabaseMetaData.generatedKeyAlwaysReturned(),retrieves whether a generated key will always be returned if the column name(s) or index(es) specified for the auto generated key column(s) are valid and the statement succeeds.
"java.sql.DatabaseMetaData.getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the given attribute of the given type for a user-defined type (udt) that is available in the given schema and catalog.
"java.sql.DatabaseMetaData.getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)",retrieves a description of a table's optimal set of columns that uniquely identifies a row.
java.sql.DatabaseMetaData.getCatalogs(),retrieves the catalog names available in this database.
java.sql.DatabaseMetaData.getCatalogSeparator(),retrieves the string that this database uses as the separator between a catalog and table name.
java.sql.DatabaseMetaData.getCatalogTerm(),"retrieves the database vendor's preferred term for ""catalog""."
java.sql.DatabaseMetaData.getClientInfoProperties(),retrieves a list of the client info properties that the driver supports.
"java.sql.DatabaseMetaData.getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the access rights for a table's columns.
"java.sql.DatabaseMetaData.getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",retrieves a description of table columns available in the specified catalog.
java.sql.DatabaseMetaData.getConnection(),retrieves the connection that produced this metadata object.
"java.sql.DatabaseMetaData.getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the foreign key columns in the given foreign key table that reference the primary key or the columns representing a unique constraint of the parent table (could be the same or a different table).
java.sql.DatabaseMetaData.getDatabaseMajorVersion(),retrieves the major version number of the underlying database.
java.sql.DatabaseMetaData.getDatabaseMinorVersion(),retrieves the minor version number of the underlying database.
java.sql.DatabaseMetaData.getDatabaseProductName(),retrieves the name of this database product.
java.sql.DatabaseMetaData.getDatabaseProductVersion(),retrieves the version number of this database product.
java.sql.DatabaseMetaData.getDefaultTransactionIsolation(),retrieves this database's default transaction isolation level.
java.sql.DatabaseMetaData.getDriverMajorVersion(),retrieves this jdbc driver's major version number.
java.sql.DatabaseMetaData.getDriverMinorVersion(),retrieves this jdbc driver's minor version number.
java.sql.DatabaseMetaData.getDriverName(),retrieves the name of this jdbc driver.
java.sql.DatabaseMetaData.getDriverVersion(),retrieves the version number of this jdbc driver as a string.
"java.sql.DatabaseMetaData.getExportedKeys(java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the foreign key columns that reference the given table's primary key columns (the foreign keys exported by a table).
java.sql.DatabaseMetaData.getExtraNameCharacters(),"retrieves all the ""extra"" characters that can be used in unquoted identifier names (those beyond a-z, a-z, 0-9 and _)."
"java.sql.DatabaseMetaData.getFunctionColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the given catalog's system or user function parameters and return type.
"java.sql.DatabaseMetaData.getFunctions(java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the system and user functions available in the given catalog.
java.sql.DatabaseMetaData.getIdentifierQuoteString(),retrieves the string used to quote sql identifiers.
"java.sql.DatabaseMetaData.getImportedKeys(java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the primary key columns that are referenced by the given table's foreign key columns (the primary keys imported by a table).
"java.sql.DatabaseMetaData.getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",retrieves a description of the given table's indices and statistics.
java.sql.DatabaseMetaData.getJDBCMajorVersion(),retrieves the major jdbc version number for this driver.
java.sql.DatabaseMetaData.getJDBCMinorVersion(),retrieves the minor jdbc version number for this driver.
java.sql.DatabaseMetaData.getMaxBinaryLiteralLength(),retrieves the maximum number of hex characters this database allows in an inline binary literal.
java.sql.DatabaseMetaData.getMaxCatalogNameLength(),retrieves the maximum number of characters that this database allows in a catalog name.
java.sql.DatabaseMetaData.getMaxCharLiteralLength(),retrieves the maximum number of characters this database allows for a character literal.
java.sql.DatabaseMetaData.getMaxColumnNameLength(),retrieves the maximum number of characters this database allows for a column name.
java.sql.DatabaseMetaData.getMaxColumnsInGroupBy(),retrieves the maximum number of columns this database allows in a group by clause.
java.sql.DatabaseMetaData.getMaxColumnsInIndex(),retrieves the maximum number of columns this database allows in an index.
java.sql.DatabaseMetaData.getMaxColumnsInOrderBy(),retrieves the maximum number of columns this database allows in an order by clause.
java.sql.DatabaseMetaData.getMaxColumnsInSelect(),retrieves the maximum number of columns this database allows in a select list.
java.sql.DatabaseMetaData.getMaxColumnsInTable(),retrieves the maximum number of columns this database allows in a table.
java.sql.DatabaseMetaData.getMaxConnections(),retrieves the maximum number of concurrent connections to this database that are possible.
java.sql.DatabaseMetaData.getMaxCursorNameLength(),retrieves the maximum number of characters that this database allows in a cursor name.
java.sql.DatabaseMetaData.getMaxIndexLength(),"retrieves the maximum number of bytes this database allows for an index, including all of the parts of the index."
java.sql.DatabaseMetaData.getMaxLogicalLobSize(),retrieves the maximum number of bytes this database allows for the logical size for a lob.
java.sql.DatabaseMetaData.getMaxProcedureNameLength(),retrieves the maximum number of characters that this database allows in a procedure name.
java.sql.DatabaseMetaData.getMaxRowSize(),retrieves the maximum number of bytes this database allows in a single row.
java.sql.DatabaseMetaData.getMaxSchemaNameLength(),retrieves the maximum number of characters that this database allows in a schema name.
java.sql.DatabaseMetaData.getMaxStatementLength(),retrieves the maximum number of characters this database allows in an sql statement.
java.sql.DatabaseMetaData.getMaxStatements(),retrieves the maximum number of active statements to this database that can be open at the same time.
java.sql.DatabaseMetaData.getMaxTableNameLength(),retrieves the maximum number of characters this database allows in a table name.
java.sql.DatabaseMetaData.getMaxTablesInSelect(),retrieves the maximum number of tables this database allows in a select statement.
java.sql.DatabaseMetaData.getMaxUserNameLength(),retrieves the maximum number of characters this database allows in a user name.
java.sql.DatabaseMetaData.getNumericFunctions(),retrieves a comma-separated list of math functions available with this database.
"java.sql.DatabaseMetaData.getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the given table's primary key columns.
"java.sql.DatabaseMetaData.getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the given catalog's stored procedure parameter and result columns.
"java.sql.DatabaseMetaData.getProcedures(java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the stored procedures available in the given catalog.
java.sql.DatabaseMetaData.getProcedureTerm(),"retrieves the database vendor's preferred term for ""procedure""."
"java.sql.DatabaseMetaData.getPseudoColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the pseudo or hidden columns available in a given table within the specified catalog and schema.
java.sql.DatabaseMetaData.getResultSetHoldability(),retrieves this database's default holdability for resultset objects.
java.sql.DatabaseMetaData.getRowIdLifetime(),"indicates whether or not this data source supports the sql rowid type, and if so the lifetime for which a rowid object remains valid."
java.sql.DatabaseMetaData.getSchemas(),retrieves the schema names available in this database.
"java.sql.DatabaseMetaData.getSchemas(java.lang.String,java.lang.String)",retrieves the schema names available in this database.
java.sql.DatabaseMetaData.getSchemaTerm(),"retrieves the database vendor's preferred term for ""schema""."
java.sql.DatabaseMetaData.getSearchStringEscape(),retrieves the string that can be used to escape wildcard characters.
java.sql.DatabaseMetaData.getSQLKeywords(),retrieves a comma-separated list of all of this database's sql keywords that are not also sql:2003 keywords.
java.sql.DatabaseMetaData.getSQLStateType(),indicates whether the sqlstate returned by sqlexception.
java.sql.DatabaseMetaData.getStringFunctions(),retrieves a comma-separated list of string functions available with this database.
"java.sql.DatabaseMetaData.getSuperTables(java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the table hierarchies defined in a particular schema in this database.
"java.sql.DatabaseMetaData.getSuperTypes(java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the user-defined type (udt) hierarchies defined in a particular schema in this database.
java.sql.DatabaseMetaData.getSystemFunctions(),retrieves a comma-separated list of system functions available with this database.
"java.sql.DatabaseMetaData.getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the access rights for each table available in a catalog.
"java.sql.DatabaseMetaData.getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",retrieves a description of the tables available in the given catalog.
java.sql.DatabaseMetaData.getTableTypes(),retrieves the table types available in this database.
java.sql.DatabaseMetaData.getTimeDateFunctions(),retrieves a comma-separated list of the time and date functions available with this database.
java.sql.DatabaseMetaData.getTypeInfo(),retrieves a description of all the data types supported by this database.
"java.sql.DatabaseMetaData.getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])",retrieves a description of the user-defined types (udts) defined in a particular schema.
java.sql.DatabaseMetaData.getURL(),retrieves the url for this dbms.
java.sql.DatabaseMetaData.getUserName(),retrieves the user name as known to this database.
"java.sql.DatabaseMetaData.getVersionColumns(java.lang.String,java.lang.String,java.lang.String)",retrieves a description of a table's columns that are automatically updated when any value in a row is updated.
java.sql.DatabaseMetaData.insertsAreDetected(int),retrieves whether or not a visible row insert can be detected by calling the method resultset.
java.sql.DatabaseMetaData.isCatalogAtStart(),retrieves whether a catalog appears at the start of a fully qualified table name.
java.sql.DatabaseMetaData.isReadOnly(),retrieves whether this database is in read-only mode.
java.sql.DatabaseMetaData.locatorsUpdateCopy(),indicates whether updates made to a lob are made on a copy or directly to the lob.
java.sql.DatabaseMetaData.nullPlusNonNullIsNull(),retrieves whether this database supports concatenations between null and non-null values being null.
java.sql.DatabaseMetaData.nullsAreSortedAtEnd(),retrieves whether null values are sorted at the end regardless of sort order.
java.sql.DatabaseMetaData.nullsAreSortedAtStart(),retrieves whether null values are sorted at the start regardless of sort order.
java.sql.DatabaseMetaData.nullsAreSortedHigh(),retrieves whether null values are sorted high.
java.sql.DatabaseMetaData.nullsAreSortedLow(),retrieves whether null values are sorted low.
java.sql.DatabaseMetaData.othersDeletesAreVisible(int),retrieves whether deletes made by others are visible.
java.sql.DatabaseMetaData.othersInsertsAreVisible(int),retrieves whether inserts made by others are visible.
java.sql.DatabaseMetaData.othersUpdatesAreVisible(int),retrieves whether updates made by others are visible.
java.sql.DatabaseMetaData.ownDeletesAreVisible(int),retrieves whether a result set's own deletes are visible.
java.sql.DatabaseMetaData.ownInsertsAreVisible(int),retrieves whether a result set's own inserts are visible.
java.sql.DatabaseMetaData.ownUpdatesAreVisible(int),"retrieves whether for the given type of resultset object, the result set's own updates are visible."
java.sql.DatabaseMetaData.storesLowerCaseIdentifiers(),retrieves whether this database treats mixed case unquoted sql identifiers as case insensitive and stores them in lower case.
java.sql.DatabaseMetaData.storesLowerCaseQuotedIdentifiers(),retrieves whether this database treats mixed case quoted sql identifiers as case insensitive and stores them in lower case.
java.sql.DatabaseMetaData.storesMixedCaseIdentifiers(),retrieves whether this database treats mixed case unquoted sql identifiers as case insensitive and stores them in mixed case.
java.sql.DatabaseMetaData.storesMixedCaseQuotedIdentifiers(),retrieves whether this database treats mixed case quoted sql identifiers as case insensitive and stores them in mixed case.
java.sql.DatabaseMetaData.storesUpperCaseIdentifiers(),retrieves whether this database treats mixed case unquoted sql identifiers as case insensitive and stores them in upper case.
java.sql.DatabaseMetaData.storesUpperCaseQuotedIdentifiers(),retrieves whether this database treats mixed case quoted sql identifiers as case insensitive and stores them in upper case.
java.sql.DatabaseMetaData.supportsAlterTableWithAddColumn(),retrieves whether this database supports alter table with add column.
java.sql.DatabaseMetaData.supportsAlterTableWithDropColumn(),retrieves whether this database supports alter table with drop column.
java.sql.DatabaseMetaData.supportsANSI92EntryLevelSQL(),retrieves whether this database supports the ansi92 entry level sql grammar.
java.sql.DatabaseMetaData.supportsANSI92FullSQL(),retrieves whether this database supports the ansi92 full sql grammar supported.
java.sql.DatabaseMetaData.supportsANSI92IntermediateSQL(),retrieves whether this database supports the ansi92 intermediate sql grammar supported.
java.sql.DatabaseMetaData.supportsBatchUpdates(),retrieves whether this database supports batch updates.
java.sql.DatabaseMetaData.supportsCatalogsInDataManipulation(),retrieves whether a catalog name can be used in a data manipulation statement.
java.sql.DatabaseMetaData.supportsCatalogsInIndexDefinitions(),retrieves whether a catalog name can be used in an index definition statement.
java.sql.DatabaseMetaData.supportsCatalogsInPrivilegeDefinitions(),retrieves whether a catalog name can be used in a privilege definition statement.
java.sql.DatabaseMetaData.supportsCatalogsInProcedureCalls(),retrieves whether a catalog name can be used in a procedure call statement.
java.sql.DatabaseMetaData.supportsCatalogsInTableDefinitions(),retrieves whether a catalog name can be used in a table definition statement.
java.sql.DatabaseMetaData.supportsColumnAliasing(),retrieves whether this database supports column aliasing.
java.sql.DatabaseMetaData.supportsConvert(),retrieves whether this database supports the jdbc scalar function convert for the conversion of one jdbc type to another.
"java.sql.DatabaseMetaData.supportsConvert(int,int)",retrieves whether this database supports the jdbc scalar function convert for conversions between the jdbc types fromtype and totype.
java.sql.DatabaseMetaData.supportsCoreSQLGrammar(),retrieves whether this database supports the odbc core sql grammar.
java.sql.DatabaseMetaData.supportsCorrelatedSubqueries(),retrieves whether this database supports correlated subqueries.
java.sql.DatabaseMetaData.supportsDataDefinitionAndDataManipulationTransactions(),retrieves whether this database supports both data definition and data manipulation statements within a transaction.
java.sql.DatabaseMetaData.supportsDataManipulationTransactionsOnly(),retrieves whether this database supports only data manipulation statements within a transaction.
java.sql.DatabaseMetaData.supportsDifferentTableCorrelationNames(),"retrieves whether, when table correlation names are supported, they are restricted to being different from the names of the tables."
java.sql.DatabaseMetaData.supportsExpressionsInOrderBy(),retrieves whether this database supports expressions in order by lists.
java.sql.DatabaseMetaData.supportsExtendedSQLGrammar(),retrieves whether this database supports the odbc extended sql grammar.
java.sql.DatabaseMetaData.supportsFullOuterJoins(),retrieves whether this database supports full nested outer joins.
java.sql.DatabaseMetaData.supportsGetGeneratedKeys(),retrieves whether auto-generated keys can be retrieved after a statement has been executed.
java.sql.DatabaseMetaData.supportsGroupBy(),retrieves whether this database supports some form of group by clause.
java.sql.DatabaseMetaData.supportsGroupByBeyondSelect(),retrieves whether this database supports using columns not included in the select statement in a group by clause provided that all of the columns in the select statement are included in the group by clause.
java.sql.DatabaseMetaData.supportsGroupByUnrelated(),retrieves whether this database supports using a column that is not in the select statement in a group by clause.
java.sql.DatabaseMetaData.supportsIntegrityEnhancementFacility(),retrieves whether this database supports the sql integrity enhancement facility.
java.sql.DatabaseMetaData.supportsLikeEscapeClause(),retrieves whether this database supports specifying a like escape clause.
java.sql.DatabaseMetaData.supportsLimitedOuterJoins(),retrieves whether this database provides limited support for outer joins.
java.sql.DatabaseMetaData.supportsMinimumSQLGrammar(),retrieves whether this database supports the odbc minimum sql grammar.
java.sql.DatabaseMetaData.supportsMixedCaseIdentifiers(),retrieves whether this database treats mixed case unquoted sql identifiers as case sensitive and as a result stores them in mixed case.
java.sql.DatabaseMetaData.supportsMixedCaseQuotedIdentifiers(),retrieves whether this database treats mixed case quoted sql identifiers as case sensitive and as a result stores them in mixed case.
java.sql.DatabaseMetaData.supportsMultipleOpenResults(),retrieves whether it is possible to have multiple resultset objects returned from a callablestatement object simultaneously.
java.sql.DatabaseMetaData.supportsMultipleResultSets(),retrieves whether this database supports getting multiple resultset objects from a single call to the method execute.
java.sql.DatabaseMetaData.supportsMultipleTransactions(),retrieves whether this database allows having multiple transactions open at once (on different connections).
java.sql.DatabaseMetaData.supportsNamedParameters(),retrieves whether this database supports named parameters to callable statements.
java.sql.DatabaseMetaData.supportsNonNullableColumns(),retrieves whether columns in this database may be defined as non-nullable.
java.sql.DatabaseMetaData.supportsOpenCursorsAcrossCommit(),retrieves whether this database supports keeping cursors open across commits.
java.sql.DatabaseMetaData.supportsOpenCursorsAcrossRollback(),retrieves whether this database supports keeping cursors open across rollbacks.
java.sql.DatabaseMetaData.supportsOpenStatementsAcrossCommit(),retrieves whether this database supports keeping statements open across commits.
java.sql.DatabaseMetaData.supportsOpenStatementsAcrossRollback(),retrieves whether this database supports keeping statements open across rollbacks.
java.sql.DatabaseMetaData.supportsOrderByUnrelated(),retrieves whether this database supports using a column that is not in the select statement in an order by clause.
java.sql.DatabaseMetaData.supportsOuterJoins(),retrieves whether this database supports some form of outer join.
java.sql.DatabaseMetaData.supportsPositionedDelete(),retrieves whether this database supports positioned delete statements.
java.sql.DatabaseMetaData.supportsPositionedUpdate(),retrieves whether this database supports positioned update statements.
java.sql.DatabaseMetaData.supportsRefCursors(),retrieves whether this database supports ref cursor.
"java.sql.DatabaseMetaData.supportsResultSetConcurrency(int,int)",retrieves whether this database supports the given concurrency type in combination with the given result set type.
java.sql.DatabaseMetaData.supportsResultSetHoldability(int),retrieves whether this database supports the given result set holdability.
java.sql.DatabaseMetaData.supportsResultSetType(int),retrieves whether this database supports the given result set type.
java.sql.DatabaseMetaData.supportsSavepoints(),retrieves whether this database supports savepoints.
java.sql.DatabaseMetaData.supportsSchemasInDataManipulation(),retrieves whether a schema name can be used in a data manipulation statement.
java.sql.DatabaseMetaData.supportsSchemasInIndexDefinitions(),retrieves whether a schema name can be used in an index definition statement.
java.sql.DatabaseMetaData.supportsSchemasInPrivilegeDefinitions(),retrieves whether a schema name can be used in a privilege definition statement.
java.sql.DatabaseMetaData.supportsSchemasInProcedureCalls(),retrieves whether a schema name can be used in a procedure call statement.
java.sql.DatabaseMetaData.supportsSchemasInTableDefinitions(),retrieves whether a schema name can be used in a table definition statement.
java.sql.DatabaseMetaData.supportsSelectForUpdate(),retrieves whether this database supports select for update statements.
java.sql.DatabaseMetaData.supportsStatementPooling(),retrieves whether this database supports statement pooling.
java.sql.DatabaseMetaData.supportsStoredFunctionsUsingCallSyntax(),retrieves whether this database supports invoking user-defined or vendor functions using the stored procedure escape syntax.
java.sql.DatabaseMetaData.supportsStoredProcedures(),retrieves whether this database supports stored procedure calls that use the stored procedure escape syntax.
java.sql.DatabaseMetaData.supportsSubqueriesInComparisons(),retrieves whether this database supports subqueries in comparison expressions.
java.sql.DatabaseMetaData.supportsSubqueriesInExists(),retrieves whether this database supports subqueries in exists expressions.
java.sql.DatabaseMetaData.supportsSubqueriesInIns(),retrieves whether this database supports subqueries in in expressions.
java.sql.DatabaseMetaData.supportsSubqueriesInQuantifieds(),retrieves whether this database supports subqueries in quantified expressions.
java.sql.DatabaseMetaData.supportsTableCorrelationNames(),retrieves whether this database supports table correlation names.
java.sql.DatabaseMetaData.supportsTransactionIsolationLevel(int),retrieves whether this database supports the given transaction isolation level.
java.sql.DatabaseMetaData.supportsTransactions(),retrieves whether this database supports transactions.
java.sql.DatabaseMetaData.supportsUnion(),retrieves whether this database supports sql union.
java.sql.DatabaseMetaData.supportsUnionAll(),retrieves whether this database supports sql union all.
java.sql.DatabaseMetaData.updatesAreDetected(int),retrieves whether or not a visible row update can be detected by calling the method resultset.
java.sql.DatabaseMetaData.usesLocalFilePerTable(),retrieves whether this database uses a file for each table.
java.sql.DatabaseMetaData.usesLocalFiles(),retrieves whether this database stores tables in a local file.
java.sql.Driver.acceptsURL(java.lang.String),retrieves whether the driver thinks that it can open a connection to the given url.
"java.sql.Driver.connect(java.lang.String,java.util.Properties)",attempts to make a database connection to the given url.
java.sql.Driver.getMajorVersion(),retrieves the driver's major version number.
java.sql.Driver.getMinorVersion(),gets the driver's minor version number.
java.sql.Driver.getParentLogger(),return the parent logger of all the loggers used by this driver.
"java.sql.Driver.getPropertyInfo(java.lang.String,java.util.Properties)",gets information about the possible properties for this driver.
java.sql.Driver.jdbcCompliant(),reports whether this driver is a genuine jdbc compliant™ driver.
java.sql.DriverAction.deregister(),method called by drivermanager.
java.sql.ParameterMetaData.getParameterClassName(int),retrieves the fully-qualified name of the java class whose instances should be passed to the method preparedstatement.
java.sql.ParameterMetaData.getParameterCount(),retrieves the number of parameters in the preparedstatement object for which this parametermetadata object contains information.
java.sql.ParameterMetaData.getParameterMode(int),retrieves the designated parameter's mode.
java.sql.ParameterMetaData.getParameterType(int),retrieves the designated parameter's sql type.
java.sql.ParameterMetaData.getParameterTypeName(int),retrieves the designated parameter's database-specific type name.
java.sql.ParameterMetaData.getPrecision(int),retrieves the designated parameter's specified column size.
java.sql.ParameterMetaData.getScale(int),retrieves the designated parameter's number of digits to right of the decimal point.
java.sql.ParameterMetaData.isNullable(int),retrieves whether null values are allowed in the designated parameter.
java.sql.ParameterMetaData.isSigned(int),retrieves whether values for the designated parameter can be signed numbers.
java.sql.PreparedStatement.addBatch(),adds a set of parameters to this preparedstatement object's batch of commands.
java.sql.PreparedStatement.clearParameters(),clears the current parameter values immediately.
java.sql.PreparedStatement.execute(),"executes the sql statement in this preparedstatement object, which may be any kind of sql statement."
java.sql.PreparedStatement.executeLargeUpdate(),"executes the sql statement in this preparedstatement object, which must be an sql data manipulation language (dml) statement, such as insert, update or delete; or an sql statement that returns nothing, such as a ddl statement."
java.sql.PreparedStatement.executeQuery(),executes the sql query in this preparedstatement object and returns the resultset object generated by the query.
java.sql.PreparedStatement.executeUpdate(),"executes the sql statement in this preparedstatement object, which must be an sql data manipulation language (dml) statement, such as insert, update or delete; or an sql statement that returns nothing, such as a ddl statement."
java.sql.PreparedStatement.getMetaData(),retrieves a resultsetmetadata object that contains information about the columns of the resultset object that will be returned when this preparedstatement object is executed.
java.sql.PreparedStatement.getParameterMetaData(),"retrieves the number, types and properties of this preparedstatement object's parameters."
"java.sql.PreparedStatement.setArray(int,java.sql.Array)",sets the designated parameter to the given java.
"java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream,int)","sets the designated parameter to the given input stream, which will have the specified number of bytes."
"java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream,long)","sets the designated parameter to the given input stream, which will have the specified number of bytes."
"java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream)",sets the designated parameter to the given input stream.
"java.sql.PreparedStatement.setBigDecimal(int,java.math.BigDecimal)",sets the designated parameter to the given java.
"java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,int)","sets the designated parameter to the given input stream, which will have the specified number of bytes."
"java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,long)","sets the designated parameter to the given input stream, which will have the specified number of bytes."
"java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream)",sets the designated parameter to the given input stream.
"java.sql.PreparedStatement.setBlob(int,java.sql.Blob)",sets the designated parameter to the given java.
"java.sql.PreparedStatement.setBlob(int,java.io.InputStream,long)",sets the designated parameter to a inputstream object.
"java.sql.PreparedStatement.setBlob(int,java.io.InputStream)",sets the designated parameter to a inputstream object.
"java.sql.PreparedStatement.setBoolean(int,boolean)",sets the designated parameter to the given java boolean value.
"java.sql.PreparedStatement.setByte(int,byte)",sets the designated parameter to the given java byte value.
"java.sql.PreparedStatement.setBytes(int,byte[])",sets the designated parameter to the given java array of bytes.
"java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader,int)","sets the designated parameter to the given reader object, which is the given number of characters long."
"java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader,long)","sets the designated parameter to the given reader object, which is the given number of characters long."
"java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader)",sets the designated parameter to the given reader object.
"java.sql.PreparedStatement.setClob(int,java.sql.Clob)",sets the designated parameter to the given java.
"java.sql.PreparedStatement.setClob(int,java.io.Reader,long)",sets the designated parameter to a reader object.
"java.sql.PreparedStatement.setClob(int,java.io.Reader)",sets the designated parameter to a reader object.
"java.sql.PreparedStatement.setDate(int,java.sql.Date)",sets the designated parameter to the given java.
"java.sql.PreparedStatement.setDate(int,java.sql.Date,java.util.Calendar)",sets the designated parameter to the given java.
"java.sql.PreparedStatement.setDouble(int,double)",sets the designated parameter to the given java double value.
"java.sql.PreparedStatement.setFloat(int,float)",sets the designated parameter to the given java float value.
"java.sql.PreparedStatement.setInt(int,int)",sets the designated parameter to the given java int value.
"java.sql.PreparedStatement.setLong(int,long)",sets the designated parameter to the given java long value.
"java.sql.PreparedStatement.setNCharacterStream(int,java.io.Reader,long)",sets the designated parameter to a reader object.
"java.sql.PreparedStatement.setNCharacterStream(int,java.io.Reader)",sets the designated parameter to a reader object.
"java.sql.PreparedStatement.setNClob(int,java.sql.NClob)",sets the designated parameter to a java.
"java.sql.PreparedStatement.setNClob(int,java.io.Reader,long)",sets the designated parameter to a reader object.
"java.sql.PreparedStatement.setNClob(int,java.io.Reader)",sets the designated parameter to a reader object.
"java.sql.PreparedStatement.setNString(int,java.lang.String)",sets the designated parameter to the given string object.
"java.sql.PreparedStatement.setNull(int,int)",sets the designated parameter to sql null.
"java.sql.PreparedStatement.setNull(int,int,java.lang.String)",sets the designated parameter to sql null.
"java.sql.PreparedStatement.setObject(int,java.lang.Object,int)",sets the value of the designated parameter with the given object.
"java.sql.PreparedStatement.setObject(int,java.lang.Object)",sets the value of the designated parameter using the given object.
"java.sql.PreparedStatement.setObject(int,java.lang.Object,int,int)",sets the value of the designated parameter with the given object.
"java.sql.PreparedStatement.setObject(int,java.lang.Object,java.sql.SQLType,int)",sets the value of the designated parameter with the given object.
"java.sql.PreparedStatement.setObject(int,java.lang.Object,java.sql.SQLType)",sets the value of the designated parameter with the given object.
"java.sql.PreparedStatement.setRef(int,java.sql.Ref)",sets the designated parameter to the given ref(<structured-type>) value.
"java.sql.PreparedStatement.setRowId(int,java.sql.RowId)",sets the designated parameter to the given java.
"java.sql.PreparedStatement.setShort(int,short)",sets the designated parameter to the given java short value.
"java.sql.PreparedStatement.setSQLXML(int,java.sql.SQLXML)",sets the designated parameter to the given java.
"java.sql.PreparedStatement.setString(int,java.lang.String)",sets the designated parameter to the given java string value.
"java.sql.PreparedStatement.setTime(int,java.sql.Time)",sets the designated parameter to the given java.
"java.sql.PreparedStatement.setTime(int,java.sql.Time,java.util.Calendar)",sets the designated parameter to the given java.
"java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp)",sets the designated parameter to the given java.
"java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp,java.util.Calendar)",sets the designated parameter to the given java.
"java.sql.PreparedStatement.setURL(int,java.net.URL)",sets the designated parameter to the given java.
java.sql.Ref.getBaseTypeName(),retrieves the fully-qualified sql name of the sql structured type that this ref object references.
"java.sql.Ref.getObject(,java.lang.Class<?>>)",retrieves the referenced object and maps it to a java type using the given type map.
java.sql.Ref.getObject(),retrieves the sql structured type instance referenced by this ref object.
java.sql.Ref.setObject(java.lang.Object),sets the structured type value that this ref object references to the given instance of object.
java.sql.ResultSet.absolute(int),moves the cursor to the given row number in this resultset object.
java.sql.ResultSet.afterLast(),"moves the cursor to the end of this resultset object, just after the last row."
java.sql.ResultSet.beforeFirst(),"moves the cursor to the front of this resultset object, just before the first row."
java.sql.ResultSet.cancelRowUpdates(),cancels the updates made to the current row in this resultset object.
java.sql.ResultSet.clearWarnings(),clears all warnings reported on this resultset object.
java.sql.ResultSet.close(),releases this resultset object's database and jdbc resources immediately instead of waiting for this to happen when it is automatically closed.
java.sql.ResultSet.deleteRow(),deletes the current row from this resultset object and from the underlying database.
java.sql.ResultSet.findColumn(java.lang.String),maps the given resultset column label to its resultset column index.
java.sql.ResultSet.first(),moves the cursor to the first row in this resultset object.
java.sql.ResultSet.getArray(int),retrieves the value of the designated column in the current row of this resultset object as an array object in the java programming language.
java.sql.ResultSet.getArray(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as an array object in the java programming language.
java.sql.ResultSet.getAsciiStream(int),retrieves the value of the designated column in the current row of this resultset object as a stream of ascii characters.
java.sql.ResultSet.getAsciiStream(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a stream of ascii characters.
java.sql.ResultSet.getBigDecimal(int),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getBigDecimal(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getBinaryStream(int),retrieves the value of the designated column in the current row of this resultset object as a stream of uninterpreted bytes.
java.sql.ResultSet.getBinaryStream(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a stream of uninterpreted bytes.
java.sql.ResultSet.getBlob(int),retrieves the value of the designated column in the current row of this resultset object as a blob object in the java programming language.
java.sql.ResultSet.getBlob(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a blob object in the java programming language.
java.sql.ResultSet.getBoolean(int),retrieves the value of the designated column in the current row of this resultset object as a boolean in the java programming language.
java.sql.ResultSet.getBoolean(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a boolean in the java programming language.
java.sql.ResultSet.getByte(int),retrieves the value of the designated column in the current row of this resultset object as a byte in the java programming language.
java.sql.ResultSet.getByte(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a byte in the java programming language.
java.sql.ResultSet.getBytes(int),retrieves the value of the designated column in the current row of this resultset object as a byte array in the java programming language.
java.sql.ResultSet.getBytes(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a byte array in the java programming language.
java.sql.ResultSet.getCharacterStream(int),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getCharacterStream(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getClob(int),retrieves the value of the designated column in the current row of this resultset object as a clob object in the java programming language.
java.sql.ResultSet.getClob(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a clob object in the java programming language.
java.sql.ResultSet.getConcurrency(),retrieves the concurrency mode of this resultset object.
java.sql.ResultSet.getCursorName(),retrieves the name of the sql cursor used by this resultset object.
java.sql.ResultSet.getDate(int),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getDate(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a java.
"java.sql.ResultSet.getDate(int,java.util.Calendar)",retrieves the value of the designated column in the current row of this resultset object as a java.
"java.sql.ResultSet.getDate(java.lang.String,java.util.Calendar)",retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getDouble(int),retrieves the value of the designated column in the current row of this resultset object as a double in the java programming language.
java.sql.ResultSet.getDouble(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a double in the java programming language.
java.sql.ResultSet.getFetchDirection(),retrieves the fetch direction for this resultset object.
java.sql.ResultSet.getFetchSize(),retrieves the fetch size for this resultset object.
java.sql.ResultSet.getFloat(int),retrieves the value of the designated column in the current row of this resultset object as a float in the java programming language.
java.sql.ResultSet.getFloat(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a float in the java programming language.
java.sql.ResultSet.getHoldability(),retrieves the holdability of this resultset object.
java.sql.ResultSet.getInt(int),retrieves the value of the designated column in the current row of this resultset object as an int in the java programming language.
java.sql.ResultSet.getInt(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as an int in the java programming language.
java.sql.ResultSet.getLong(int),retrieves the value of the designated column in the current row of this resultset object as a long in the java programming language.
java.sql.ResultSet.getLong(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a long in the java programming language.
java.sql.ResultSet.getMetaData(),"retrieves the number, types and properties of this resultset object's columns."
java.sql.ResultSet.getNCharacterStream(int),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getNCharacterStream(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getNClob(int),retrieves the value of the designated column in the current row of this resultset object as a nclob object in the java programming language.
java.sql.ResultSet.getNClob(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a nclob object in the java programming language.
java.sql.ResultSet.getNString(int),retrieves the value of the designated column in the current row of this resultset object as a string in the java programming language.
java.sql.ResultSet.getNString(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a string in the java programming language.
java.sql.ResultSet.getObject(int),gets the value of the designated column in the current row of this resultset object as an object in the java programming language.
java.sql.ResultSet.getObject(java.lang.String),gets the value of the designated column in the current row of this resultset object as an object in the java programming language.
"java.sql.ResultSet.getObject(int,,java.lang.Class<?>>)",retrieves the value of the designated column in the current row of this resultset object as an object in the java programming language.
"java.sql.ResultSet.getObject(java.lang.String,,java.lang.Class<?>>)",retrieves the value of the designated column in the current row of this resultset object as an object in the java programming language.
"java.sql.ResultSet.getObject(int,java.lang.Class<T>)","retrieves the value of the designated column in the current row of this resultset object and will convert from the sql type of the column to the requested java data type, if the conversion is supported."
"java.sql.ResultSet.getObject(java.lang.String,java.lang.Class<T>)","retrieves the value of the designated column in the current row of this resultset object and will convert from the sql type of the column to the requested java data type, if the conversion is supported."
java.sql.ResultSet.getRef(int),retrieves the value of the designated column in the current row of this resultset object as a ref object in the java programming language.
java.sql.ResultSet.getRef(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a ref object in the java programming language.
java.sql.ResultSet.getRow(),retrieves the current row number.
java.sql.ResultSet.getRowId(int),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getRowId(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getShort(int),retrieves the value of the designated column in the current row of this resultset object as a short in the java programming language.
java.sql.ResultSet.getShort(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a short in the java programming language.
java.sql.ResultSet.getSQLXML(int),retrieves the value of the designated column in the current row of this resultset as a java.
java.sql.ResultSet.getSQLXML(java.lang.String),retrieves the value of the designated column in the current row of this resultset as a java.
java.sql.ResultSet.getStatement(),retrieves the statement object that produced this resultset object.
java.sql.ResultSet.getString(int),retrieves the value of the designated column in the current row of this resultset object as a string in the java programming language.
java.sql.ResultSet.getString(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a string in the java programming language.
java.sql.ResultSet.getTime(int),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getTime(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a java.
"java.sql.ResultSet.getTime(int,java.util.Calendar)",retrieves the value of the designated column in the current row of this resultset object as a java.
"java.sql.ResultSet.getTime(java.lang.String,java.util.Calendar)",retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getTimestamp(int),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getTimestamp(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a java.
"java.sql.ResultSet.getTimestamp(int,java.util.Calendar)",retrieves the value of the designated column in the current row of this resultset object as a java.
"java.sql.ResultSet.getTimestamp(java.lang.String,java.util.Calendar)",retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getType(),retrieves the type of this resultset object.
java.sql.ResultSet.getURL(int),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getURL(java.lang.String),retrieves the value of the designated column in the current row of this resultset object as a java.
java.sql.ResultSet.getWarnings(),retrieves the first warning reported by calls on this resultset object.
java.sql.ResultSet.insertRow(),inserts the contents of the insert row into this resultset object and into the database.
java.sql.ResultSet.isAfterLast(),retrieves whether the cursor is after the last row in this resultset object.
java.sql.ResultSet.isBeforeFirst(),retrieves whether the cursor is before the first row in this resultset object.
java.sql.ResultSet.isClosed(),retrieves whether this resultset object has been closed.
java.sql.ResultSet.isFirst(),retrieves whether the cursor is on the first row of this resultset object.
java.sql.ResultSet.isLast(),retrieves whether the cursor is on the last row of this resultset object.
java.sql.ResultSet.last(),moves the cursor to the last row in this resultset object.
java.sql.ResultSet.moveToCurrentRow(),"moves the cursor to the remembered cursor position, usually the current row."
java.sql.ResultSet.moveToInsertRow(),moves the cursor to the insert row.
java.sql.ResultSet.next(),moves the cursor forward one row from its current position.
java.sql.ResultSet.previous(),moves the cursor to the previous row in this resultset object.
java.sql.ResultSet.refreshRow(),refreshes the current row with its most recent value in the database.
java.sql.ResultSet.relative(int),"moves the cursor a relative number of rows, either positive or negative."
java.sql.ResultSet.rowDeleted(),retrieves whether a row has been deleted.
java.sql.ResultSet.rowInserted(),retrieves whether the current row has had an insertion.
java.sql.ResultSet.rowUpdated(),retrieves whether the current row has been updated.
java.sql.ResultSet.setFetchDirection(int),gives a hint as to the direction in which the rows in this resultset object will be processed.
java.sql.ResultSet.setFetchSize(int),gives the jdbc driver a hint as to the number of rows that should be fetched from the database when more rows are needed for this resultset object.
"java.sql.ResultSet.updateArray(int,java.sql.Array)",updates the designated column with a java.
"java.sql.ResultSet.updateArray(java.lang.String,java.sql.Array)",updates the designated column with a java.
"java.sql.ResultSet.updateAsciiStream(int,java.io.InputStream,int)","updates the designated column with an ascii stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateAsciiStream(java.lang.String,java.io.InputStream,int)","updates the designated column with an ascii stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateAsciiStream(int,java.io.InputStream,long)","updates the designated column with an ascii stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateAsciiStream(java.lang.String,java.io.InputStream,long)","updates the designated column with an ascii stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateAsciiStream(int,java.io.InputStream)",updates the designated column with an ascii stream value.
"java.sql.ResultSet.updateAsciiStream(java.lang.String,java.io.InputStream)",updates the designated column with an ascii stream value.
"java.sql.ResultSet.updateBigDecimal(int,java.math.BigDecimal)",updates the designated column with a java.
"java.sql.ResultSet.updateBigDecimal(java.lang.String,java.math.BigDecimal)",updates the designated column with a java.
"java.sql.ResultSet.updateBinaryStream(int,java.io.InputStream,int)","updates the designated column with a binary stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateBinaryStream(java.lang.String,java.io.InputStream,int)","updates the designated column with a binary stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateBinaryStream(int,java.io.InputStream,long)","updates the designated column with a binary stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateBinaryStream(java.lang.String,java.io.InputStream,long)","updates the designated column with a binary stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateBinaryStream(int,java.io.InputStream)",updates the designated column with a binary stream value.
"java.sql.ResultSet.updateBinaryStream(java.lang.String,java.io.InputStream)",updates the designated column with a binary stream value.
"java.sql.ResultSet.updateBlob(int,java.sql.Blob)",updates the designated column with a java.
"java.sql.ResultSet.updateBlob(java.lang.String,java.sql.Blob)",updates the designated column with a java.
"java.sql.ResultSet.updateBlob(int,java.io.InputStream,long)","updates the designated column using the given input stream, which will have the specified number of bytes."
"java.sql.ResultSet.updateBlob(java.lang.String,java.io.InputStream,long)","updates the designated column using the given input stream, which will have the specified number of bytes."
"java.sql.ResultSet.updateBlob(int,java.io.InputStream)",updates the designated column using the given input stream.
"java.sql.ResultSet.updateBlob(java.lang.String,java.io.InputStream)",updates the designated column using the given input stream.
"java.sql.ResultSet.updateBoolean(int,boolean)",updates the designated column with a boolean value.
"java.sql.ResultSet.updateBoolean(java.lang.String,boolean)",updates the designated column with a boolean value.
"java.sql.ResultSet.updateByte(int,byte)",updates the designated column with a byte value.
"java.sql.ResultSet.updateByte(java.lang.String,byte)",updates the designated column with a byte value.
"java.sql.ResultSet.updateBytes(int,byte[])",updates the designated column with a byte array value.
"java.sql.ResultSet.updateBytes(java.lang.String,byte[])",updates the designated column with a byte array value.
"java.sql.ResultSet.updateCharacterStream(int,java.io.Reader,int)","updates the designated column with a character stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateCharacterStream(java.lang.String,java.io.Reader,int)","updates the designated column with a character stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateCharacterStream(int,java.io.Reader,long)","updates the designated column with a character stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateCharacterStream(java.lang.String,java.io.Reader,long)","updates the designated column with a character stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateCharacterStream(int,java.io.Reader)",updates the designated column with a character stream value.
"java.sql.ResultSet.updateCharacterStream(java.lang.String,java.io.Reader)",updates the designated column with a character stream value.
"java.sql.ResultSet.updateClob(int,java.sql.Clob)",updates the designated column with a java.
"java.sql.ResultSet.updateClob(java.lang.String,java.sql.Clob)",updates the designated column with a java.
"java.sql.ResultSet.updateClob(int,java.io.Reader,long)","updates the designated column using the given reader object, which is the given number of characters long."
"java.sql.ResultSet.updateClob(java.lang.String,java.io.Reader,long)","updates the designated column using the given reader object, which is the given number of characters long."
"java.sql.ResultSet.updateClob(int,java.io.Reader)",updates the designated column using the given reader object.
"java.sql.ResultSet.updateClob(java.lang.String,java.io.Reader)",updates the designated column using the given reader object.
"java.sql.ResultSet.updateDate(int,java.sql.Date)",updates the designated column with a java.
"java.sql.ResultSet.updateDate(java.lang.String,java.sql.Date)",updates the designated column with a java.
"java.sql.ResultSet.updateDouble(int,double)",updates the designated column with a double value.
"java.sql.ResultSet.updateDouble(java.lang.String,double)",updates the designated column with a double value.
"java.sql.ResultSet.updateFloat(int,float)",updates the designated column with a float value.
"java.sql.ResultSet.updateFloat(java.lang.String,float)",updates the designated column with a float value.
"java.sql.ResultSet.updateInt(int,int)",updates the designated column with an int value.
"java.sql.ResultSet.updateInt(java.lang.String,int)",updates the designated column with an int value.
"java.sql.ResultSet.updateLong(int,long)",updates the designated column with a long value.
"java.sql.ResultSet.updateLong(java.lang.String,long)",updates the designated column with a long value.
"java.sql.ResultSet.updateNCharacterStream(int,java.io.Reader,long)","updates the designated column with a character stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateNCharacterStream(java.lang.String,java.io.Reader,long)","updates the designated column with a character stream value, which will have the specified number of bytes."
"java.sql.ResultSet.updateNCharacterStream(int,java.io.Reader)",updates the designated column with a character stream value.
"java.sql.ResultSet.updateNCharacterStream(java.lang.String,java.io.Reader)",updates the designated column with a character stream value.
"java.sql.ResultSet.updateNClob(int,java.sql.NClob)",updates the designated column with a java.
"java.sql.ResultSet.updateNClob(java.lang.String,java.sql.NClob)",updates the designated column with a java.
"java.sql.ResultSet.updateNClob(int,java.io.Reader,long)","updates the designated column using the given reader object, which is the given number of characters long."
"java.sql.ResultSet.updateNClob(java.lang.String,java.io.Reader,long)","updates the designated column using the given reader object, which is the given number of characters long."
"java.sql.ResultSet.updateNClob(int,java.io.Reader)","updates the designated column using the given reader
the data will be read from the stream as needed until end-of-stream is reached."
"java.sql.ResultSet.updateNClob(java.lang.String,java.io.Reader)",updates the designated column using the given reader object.
"java.sql.ResultSet.updateNString(int,java.lang.String)",updates the designated column with a string value.
"java.sql.ResultSet.updateNString(java.lang.String,java.lang.String)",updates the designated column with a string value.
java.sql.ResultSet.updateNull(int),updates the designated column with a null value.
java.sql.ResultSet.updateNull(java.lang.String),updates the designated column with a null value.
"java.sql.ResultSet.updateObject(int,java.lang.Object,int)",updates the designated column with an object value.
"java.sql.ResultSet.updateObject(int,java.lang.Object)",updates the designated column with an object value.
"java.sql.ResultSet.updateObject(java.lang.String,java.lang.Object,int)",updates the designated column with an object value.
"java.sql.ResultSet.updateObject(java.lang.String,java.lang.Object)",updates the designated column with an object value.
"java.sql.ResultSet.updateObject(int,java.lang.Object,java.sql.SQLType,int)",updates the designated column with an object value.
"java.sql.ResultSet.updateObject(java.lang.String,java.lang.Object,java.sql.SQLType,int)",updates the designated column with an object value.
"java.sql.ResultSet.updateObject(int,java.lang.Object,java.sql.SQLType)",updates the designated column with an object value.
"java.sql.ResultSet.updateObject(java.lang.String,java.lang.Object,java.sql.SQLType)",updates the designated column with an object value.
"java.sql.ResultSet.updateRef(int,java.sql.Ref)",updates the designated column with a java.
"java.sql.ResultSet.updateRef(java.lang.String,java.sql.Ref)",updates the designated column with a java.
java.sql.ResultSet.updateRow(),updates the underlying database with the new contents of the current row of this resultset object.
"java.sql.ResultSet.updateRowId(int,java.sql.RowId)",updates the designated column with a rowid value.
"java.sql.ResultSet.updateRowId(java.lang.String,java.sql.RowId)",updates the designated column with a rowid value.
"java.sql.ResultSet.updateShort(int,short)",updates the designated column with a short value.
"java.sql.ResultSet.updateShort(java.lang.String,short)",updates the designated column with a short value.
"java.sql.ResultSet.updateSQLXML(int,java.sql.SQLXML)",updates the designated column with a java.
"java.sql.ResultSet.updateSQLXML(java.lang.String,java.sql.SQLXML)",updates the designated column with a java.
"java.sql.ResultSet.updateString(int,java.lang.String)",updates the designated column with a string value.
"java.sql.ResultSet.updateString(java.lang.String,java.lang.String)",updates the designated column with a string value.
"java.sql.ResultSet.updateTime(int,java.sql.Time)",updates the designated column with a java.
"java.sql.ResultSet.updateTime(java.lang.String,java.sql.Time)",updates the designated column with a java.
"java.sql.ResultSet.updateTimestamp(int,java.sql.Timestamp)",updates the designated column with a java.
"java.sql.ResultSet.updateTimestamp(java.lang.String,java.sql.Timestamp)",updates the designated column with a java.
java.sql.ResultSet.wasNull(),reports whether the last column read had a value of sql null.
java.sql.ResultSetMetaData.getCatalogName(int),gets the designated column's table's catalog name.
java.sql.ResultSetMetaData.getColumnClassName(int),returns the fully-qualified name of the java class whose instances are manufactured if the method resultset.
java.sql.ResultSetMetaData.getColumnCount(),returns the number of columns in this resultset object.
java.sql.ResultSetMetaData.getColumnDisplaySize(int),indicates the designated column's normal maximum width in characters.
java.sql.ResultSetMetaData.getColumnLabel(int),gets the designated column's suggested title for use in printouts and displays.
java.sql.ResultSetMetaData.getColumnName(int),get the designated column's name.
java.sql.ResultSetMetaData.getColumnType(int),retrieves the designated column's sql type.
java.sql.ResultSetMetaData.getColumnTypeName(int),retrieves the designated column's database-specific type name.
java.sql.ResultSetMetaData.getPrecision(int),get the designated column's specified column size.
java.sql.ResultSetMetaData.getScale(int),gets the designated column's number of digits to right of the decimal point.
java.sql.ResultSetMetaData.getSchemaName(int),get the designated column's table's schema.
java.sql.ResultSetMetaData.getTableName(int),gets the designated column's table name.
java.sql.ResultSetMetaData.isAutoIncrement(int),indicates whether the designated column is automatically numbered.
java.sql.ResultSetMetaData.isCaseSensitive(int),indicates whether a column's case matters.
java.sql.ResultSetMetaData.isCurrency(int),indicates whether the designated column is a cash value.
java.sql.ResultSetMetaData.isDefinitelyWritable(int),indicates whether a write on the designated column will definitely succeed.
java.sql.ResultSetMetaData.isNullable(int),indicates the nullability of values in the designated column.
java.sql.ResultSetMetaData.isReadOnly(int),indicates whether the designated column is definitely not writable.
java.sql.ResultSetMetaData.isSearchable(int),indicates whether the designated column can be used in a where clause.
java.sql.ResultSetMetaData.isSigned(int),indicates whether values in the designated column are signed numbers.
java.sql.ResultSetMetaData.isWritable(int),indicates whether it is possible for a write on the designated column to succeed.
java.sql.RowId.equals(java.lang.Object),compares this rowid to the specified object.
java.sql.RowId.getBytes(),returns an array of bytes representing the value of the sql rowid designated by this java.
java.sql.RowId.hashCode(),returns a hash code value of this rowid object.
java.sql.RowId.toString(),returns a string representing the value of the sql rowid designated by this java.
java.sql.Savepoint.getSavepointId(),retrieves the generated id for the savepoint that this savepoint object represents.
java.sql.Savepoint.getSavepointName(),retrieves the name of the savepoint that this savepoint object represents.
java.sql.SQLData.getSQLTypeName(),returns the fully-qualified name of the sql user-defined type that this object represents.
"java.sql.SQLData.readSQL(java.sql.SQLInput,java.lang.String)",populates this object with data read from the database.
java.sql.SQLData.writeSQL(java.sql.SQLOutput),"writes this object to the given sql data stream, converting it back to its sql value in the data source."
java.sql.SQLInput.readArray(),reads an sql array value from the stream and returns it as an array object in the java programming language.
java.sql.SQLInput.readAsciiStream(),reads the next attribute in the stream and returns it as a stream of ascii characters.
java.sql.SQLInput.readBigDecimal(),reads the next attribute in the stream and returns it as a java.
java.sql.SQLInput.readBinaryStream(),reads the next attribute in the stream and returns it as a stream of uninterpreted bytes.
java.sql.SQLInput.readBlob(),reads an sql blob value from the stream and returns it as a blob object in the java programming language.
java.sql.SQLInput.readBoolean(),reads the next attribute in the stream and returns it as a boolean in the java programming language.
java.sql.SQLInput.readByte(),reads the next attribute in the stream and returns it as a byte in the java programming language.
java.sql.SQLInput.readBytes(),reads the next attribute in the stream and returns it as an array of bytes in the java programming language.
java.sql.SQLInput.readCharacterStream(),reads the next attribute in the stream and returns it as a stream of unicode characters.
java.sql.SQLInput.readClob(),reads an sql clob value from the stream and returns it as a clob object in the java programming language.
java.sql.SQLInput.readDate(),reads the next attribute in the stream and returns it as a java.
java.sql.SQLInput.readDouble(),reads the next attribute in the stream and returns it as a double in the java programming language.
java.sql.SQLInput.readFloat(),reads the next attribute in the stream and returns it as a float in the java programming language.
java.sql.SQLInput.readInt(),reads the next attribute in the stream and returns it as an int in the java programming language.
java.sql.SQLInput.readLong(),reads the next attribute in the stream and returns it as a long in the java programming language.
java.sql.SQLInput.readNClob(),reads an sql nclob value from the stream and returns it as a nclob object in the java programming language.
java.sql.SQLInput.readNString(),reads the next attribute in the stream and returns it as a string in the java programming language.
java.sql.SQLInput.readObject(),reads the datum at the head of the stream and returns it as an object in the java programming language.
java.sql.SQLInput.readObject(java.lang.Class<T>),reads the next attribute in the stream and returns it as an object in the java programming language.
java.sql.SQLInput.readRef(),reads an sql ref value from the stream and returns it as a ref object in the java programming language.
java.sql.SQLInput.readRowId(),reads an sql rowid value from the stream and returns it as a rowid object in the java programming language.
java.sql.SQLInput.readShort(),reads the next attribute in the stream and returns it as a short in the java programming language.
java.sql.SQLInput.readSQLXML(),reads an sql xml value from the stream and returns it as a sqlxml object in the java programming language.
java.sql.SQLInput.readString(),reads the next attribute in the stream and returns it as a string in the java programming language.
java.sql.SQLInput.readTime(),reads the next attribute in the stream and returns it as a java.
java.sql.SQLInput.readTimestamp(),reads the next attribute in the stream and returns it as a java.
java.sql.SQLInput.readURL(),reads an sql datalink value from the stream and returns it as a java.
java.sql.SQLInput.wasNull(),retrieves whether the last value read was sql null.
java.sql.SQLOutput.writeArray(java.sql.Array),writes an sql array value to the stream.
java.sql.SQLOutput.writeAsciiStream(java.io.InputStream),writes the next attribute to the stream as a stream of ascii characters.
java.sql.SQLOutput.writeBigDecimal(java.math.BigDecimal),writes the next attribute to the stream as a java.
java.sql.SQLOutput.writeBinaryStream(java.io.InputStream),writes the next attribute to the stream as a stream of uninterpreted bytes.
java.sql.SQLOutput.writeBlob(java.sql.Blob),writes an sql blob value to the stream.
java.sql.SQLOutput.writeBoolean(boolean),writes the next attribute to the stream as a java boolean.
java.sql.SQLOutput.writeByte(byte),writes the next attribute to the stream as a java byte.
java.sql.SQLOutput.writeBytes(byte[]),writes the next attribute to the stream as an array of bytes.
java.sql.SQLOutput.writeCharacterStream(java.io.Reader),writes the next attribute to the stream as a stream of unicode characters.
java.sql.SQLOutput.writeClob(java.sql.Clob),writes an sql clob value to the stream.
java.sql.SQLOutput.writeDate(java.sql.Date),writes the next attribute to the stream as a java.
java.sql.SQLOutput.writeDouble(double),writes the next attribute to the stream as a java double.
java.sql.SQLOutput.writeFloat(float),writes the next attribute to the stream as a java float.
java.sql.SQLOutput.writeInt(int),writes the next attribute to the stream as a java int.
java.sql.SQLOutput.writeLong(long),writes the next attribute to the stream as a java long.
java.sql.SQLOutput.writeNClob(java.sql.NClob),writes an sql nclob value to the stream.
java.sql.SQLOutput.writeNString(java.lang.String),writes the next attribute to the stream as a string in the java programming language.
java.sql.SQLOutput.writeObject(java.sql.SQLData),writes to the stream the data contained in the given sqldata object.
"java.sql.SQLOutput.writeObject(java.lang.Object,java.sql.SQLType)",writes to the stream the data contained in the given object.
java.sql.SQLOutput.writeRef(java.sql.Ref),writes an sql ref value to the stream.
java.sql.SQLOutput.writeRowId(java.sql.RowId),writes an sql rowid value to the stream.
java.sql.SQLOutput.writeShort(short),writes the next attribute to the stream as a java short.
java.sql.SQLOutput.writeSQLXML(java.sql.SQLXML),writes an sql xml value to the stream.
java.sql.SQLOutput.writeString(java.lang.String),writes the next attribute to the stream as a string in the java programming language.
java.sql.SQLOutput.writeStruct(java.sql.Struct),writes an sql structured type value to the stream.
java.sql.SQLOutput.writeTime(java.sql.Time),writes the next attribute to the stream as a java.
java.sql.SQLOutput.writeTimestamp(java.sql.Timestamp),writes the next attribute to the stream as a java.
java.sql.SQLOutput.writeURL(java.net.URL),writes a sql datalink value to the stream.
java.sql.SQLType.getName(),returns the sqltype name that represents a sql data type.
java.sql.SQLType.getVendor(),returns the name of the vendor that supports this data type.
java.sql.SQLType.getVendorTypeNumber(),returns the vendor specific type number for the data type.
java.sql.SQLXML.free(),this method closes this object and releases the resources that it held.
java.sql.SQLXML.getBinaryStream(),retrieves the xml value designated by this sqlxml instance as a stream.
java.sql.SQLXML.getCharacterStream(),retrieves the xml value designated by this sqlxml instance as a java.
java.sql.SQLXML.getSource(java.lang.Class<T>),returns a source for reading the xml value designated by this sqlxml instance.
java.sql.SQLXML.getString(),returns a string representation of the xml value designated by this sqlxml instance.
java.sql.SQLXML.setBinaryStream(),retrieves a stream that can be used to write the xml value that this sqlxml instance represents.
java.sql.SQLXML.setCharacterStream(),retrieves a stream to be used to write the xml value that this sqlxml instance represents.
java.sql.SQLXML.setResult(java.lang.Class<T>),returns a result for setting the xml value designated by this sqlxml instance.
java.sql.SQLXML.setString(java.lang.String),sets the xml value designated by this sqlxml instance to the given string representation.
java.sql.Statement.addBatch(java.lang.String),adds the given sql command to the current list of commands for this statement object.
java.sql.Statement.cancel(),cancels this statement object if both the dbms and driver support aborting an sql statement.
java.sql.Statement.clearBatch(),empties this statement object's current list of sql commands.
java.sql.Statement.clearWarnings(),clears all the warnings reported on this statement object.
java.sql.Statement.close(),releases this statement object's database and jdbc resources immediately instead of waiting for this to happen when it is automatically closed.
java.sql.Statement.closeOnCompletion(),specifies that this statement will be closed when all its dependent result sets are closed.
java.sql.Statement.execute(java.lang.String),"executes the given sql statement, which may return multiple results."
"java.sql.Statement.execute(java.lang.String,int)","executes the given sql statement, which may return multiple results, and signals the driver that any auto-generated keys should be made available for retrieval."
"java.sql.Statement.execute(java.lang.String,int[])","executes the given sql statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval."
"java.sql.Statement.execute(java.lang.String,java.lang.String[])","executes the given sql statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval."
java.sql.Statement.executeBatch(),"submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts."
java.sql.Statement.executeLargeBatch(),"submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts."
java.sql.Statement.executeLargeUpdate(java.lang.String),"executes the given sql statement, which may be an insert, update, or delete statement or an sql statement that returns nothing, such as an sql ddl statement."
"java.sql.Statement.executeLargeUpdate(java.lang.String,int)",executes the given sql statement and signals the driver with the given flag about whether the auto-generated keys produced by this statement object should be made available for retrieval.
"java.sql.Statement.executeLargeUpdate(java.lang.String,int[])",executes the given sql statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.
"java.sql.Statement.executeLargeUpdate(java.lang.String,java.lang.String[])",executes the given sql statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.
java.sql.Statement.executeQuery(java.lang.String),"executes the given sql statement, which returns a single resultset object."
java.sql.Statement.executeUpdate(java.lang.String),"executes the given sql statement, which may be an insert, update, or delete statement or an sql statement that returns nothing, such as an sql ddl statement."
"java.sql.Statement.executeUpdate(java.lang.String,int)",executes the given sql statement and signals the driver with the given flag about whether the auto-generated keys produced by this statement object should be made available for retrieval.
"java.sql.Statement.executeUpdate(java.lang.String,int[])",executes the given sql statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.
"java.sql.Statement.executeUpdate(java.lang.String,java.lang.String[])",executes the given sql statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.
java.sql.Statement.getConnection(),retrieves the connection object that produced this statement object.
java.sql.Statement.getFetchDirection(),retrieves the direction for fetching rows from database tables that is the default for result sets generated from this statement object.
java.sql.Statement.getFetchSize(),retrieves the number of result set rows that is the default fetch size for resultset objects generated from this statement object.
java.sql.Statement.getGeneratedKeys(),retrieves any auto-generated keys created as a result of executing this statement object.
java.sql.Statement.getLargeMaxRows(),retrieves the maximum number of rows that a resultset object produced by this statement object can contain.
java.sql.Statement.getLargeUpdateCount(),"retrieves the current result as an update count; if the result is a resultset object or there are no more results, -1 is returned."
java.sql.Statement.getMaxFieldSize(),retrieves the maximum number of bytes that can be returned for character and binary column values in a resultset object produced by this statement object.
java.sql.Statement.getMaxRows(),retrieves the maximum number of rows that a resultset object produced by this statement object can contain.
java.sql.Statement.getMoreResults(),"moves to this statement object's next result, returns true if it is a resultset object, and implicitly closes any current resultset object(s) obtained with the method getresultset."
java.sql.Statement.getMoreResults(int),"moves to this statement object's next result, deals with any current resultset object(s) according to the instructions specified by the given flag, and returns true if the next result is a resultset object."
java.sql.Statement.getQueryTimeout(),retrieves the number of seconds the driver will wait for a statement object to execute.
java.sql.Statement.getResultSet(),retrieves the current result as a resultset object.
java.sql.Statement.getResultSetConcurrency(),retrieves the result set concurrency for resultset objects generated by this statement object.
java.sql.Statement.getResultSetHoldability(),retrieves the result set holdability for resultset objects generated by this statement object.
java.sql.Statement.getResultSetType(),retrieves the result set type for resultset objects generated by this statement object.
java.sql.Statement.getUpdateCount(),"retrieves the current result as an update count; if the result is a resultset object or there are no more results, -1 is returned."
java.sql.Statement.getWarnings(),retrieves the first warning reported by calls on this statement object.
java.sql.Statement.isClosed(),retrieves whether this statement object has been closed.
java.sql.Statement.isCloseOnCompletion(),returns a value indicating whether this statement will be closed when all its dependent result sets are closed.
java.sql.Statement.isPoolable(),returns a value indicating whether the statement is poolable or not.
java.sql.Statement.setCursorName(java.lang.String),"sets the sql cursor name to the given string, which will be used by subsequent statement object execute methods."
java.sql.Statement.setEscapeProcessing(boolean),sets escape processing on or off.
java.sql.Statement.setFetchDirection(int),gives the driver a hint as to the direction in which rows will be processed in resultset objects created using this statement object.
java.sql.Statement.setFetchSize(int),gives the jdbc driver a hint as to the number of rows that should be fetched from the database when more rows are needed for resultset objects generated by this statement.
java.sql.Statement.setLargeMaxRows(long),sets the limit for the maximum number of rows that any resultset object generated by this statement object can contain to the given number.
java.sql.Statement.setMaxFieldSize(int),sets the limit for the maximum number of bytes that can be returned for character and binary column values in a resultset object produced by this statement object.
java.sql.Statement.setMaxRows(int),sets the limit for the maximum number of rows that any resultset object generated by this statement object can contain to the given number.
java.sql.Statement.setPoolable(boolean),requests that a statement be pooled or not pooled.
java.sql.Statement.setQueryTimeout(int),sets the number of seconds the driver will wait for a statement object to execute to the given number of seconds.
java.sql.Struct.getAttributes(),produces the ordered values of the attributes of the sql structured type that this struct object represents.
"java.sql.Struct.getAttributes(,java.lang.Class<?>>)",produces the ordered values of the attributes of the sql structured type that this struct object represents.
java.sql.Struct.getSQLTypeName(),retrieves the sql type name of the sql structured type that this struct object represents.
java.sql.Wrapper.isWrapperFor(java.lang.Class<?>),returns true if this either implements the interface argument or is directly or indirectly a wrapper for an object that does.
java.sql.Wrapper.unwrap(java.lang.Class<T>),"returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy."
java.sql.Date.setTime(long),sets an existing date object using the given milliseconds time value.
java.sql.Date.toInstant(),this method always throws an unsupportedoperationexception and should not be used because sql date values do not have a time component.
java.sql.Date.toLocalDate(),"converts this date object to a localdate
the conversion creates a localdate that represents the same date value as this date in local time zone."
java.sql.Date.toString(),formats a date in the date escape format yyyy-mm-dd.
java.sql.Date.valueOf(java.lang.String),converts a string in jdbc date escape format to a date value.
java.sql.Date.valueOf(java.time.LocalDate),"obtains an instance of date from a localdate object with the same year, month and day of month value as the given localdate."
java.sql.DriverManager.deregisterDriver(java.sql.Driver),removes the specified driver from the drivermanager's list of registered drivers.
"java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)",attempts to establish a connection to the given database url.
"java.sql.DriverManager.getConnection(java.lang.String,java.lang.String,java.lang.String)",attempts to establish a connection to the given database url.
java.sql.DriverManager.getConnection(java.lang.String),attempts to establish a connection to the given database url.
java.sql.DriverManager.getDriver(java.lang.String),attempts to locate a driver that understands the given url.
java.sql.DriverManager.getDrivers(),retrieves an enumeration with all of the currently loaded jdbc drivers to which the current caller has access.
java.sql.DriverManager.getLoginTimeout(),gets the maximum time in seconds that a driver can wait when attempting to log in to a database.
java.sql.DriverManager.getLogWriter(),retrieves the log writer.
java.sql.DriverManager.println(java.lang.String),prints a message to the current jdbc log stream.
java.sql.DriverManager.registerDriver(java.sql.Driver),registers the given driver with the drivermanager.
"java.sql.DriverManager.registerDriver(java.sql.Driver,java.sql.DriverAction)",registers the given driver with the drivermanager.
java.sql.DriverManager.setLoginTimeout(int),sets the maximum time in seconds that a driver will wait while attempting to connect to a database once the driver has been identified.
java.sql.DriverManager.setLogWriter(java.io.PrintWriter),sets the logging/tracing printwriter object that is used by the drivermanager and all drivers.
java.sql.Time.setTime(long),sets a time object using a milliseconds time value.
java.sql.Time.toInstant(),this method always throws an unsupportedoperationexception and should not be used because sql time values do not have a date component.
java.sql.Time.toLocalTime(),converts this time object to a localtime.
java.sql.Time.toString(),formats a time in jdbc time escape format.
java.sql.Time.valueOf(java.lang.String),converts a string in jdbc time escape format to a time value.
java.sql.Time.valueOf(java.time.LocalTime),"obtains an instance of time from a localtime object with the same hour, minute and second time value as the given localtime."
java.sql.Timestamp.after(java.sql.Timestamp),indicates whether this timestamp object is later than the given timestamp object.
java.sql.Timestamp.before(java.sql.Timestamp),indicates whether this timestamp object is earlier than the given timestamp object.
java.sql.Timestamp.compareTo(java.sql.Timestamp),compares this timestamp object to the given timestamp object.
java.sql.Timestamp.compareTo(java.util.Date),compares this timestamp object to the given date object.
java.sql.Timestamp.equals(java.sql.Timestamp),tests to see if this timestamp object is equal to the given timestamp object.
java.sql.Timestamp.equals(java.lang.Object),tests to see if this timestamp object is equal to the given object.
java.sql.Timestamp.from(java.time.Instant),obtains an instance of timestamp from an instant object.
java.sql.Timestamp.getNanos(),gets this timestamp object's nanos value.
java.sql.Timestamp.getTime(),"returns the number of milliseconds since january 1, 1970, 00:00:00 gmt represented by this timestamp object."
java.sql.Timestamp.hashCode(),returns a hash code value for this object.
java.sql.Timestamp.setNanos(int),sets this timestamp object's nanos field to the given value.
java.sql.Timestamp.setTime(long),"sets this timestamp object to represent a point in time that is time milliseconds after january 1, 1970 00:00:00 gmt."
java.sql.Timestamp.toInstant(),converts this timestamp object to an instant.
java.sql.Timestamp.toLocalDateTime(),converts this timestamp object to a localdatetime.
java.sql.Timestamp.toString(),formats a timestamp in jdbc timestamp escape format.
java.sql.Timestamp.valueOf(java.lang.String),converts a string object in jdbc timestamp escape format to a timestamp value.
java.sql.Timestamp.valueOf(java.time.LocalDateTime),"obtains an instance of timestamp from a localdatetime object, with the same year, month, day of month, hours, minutes, seconds and nanos date-time value as the provided localdatetime."
java.sql.ClientInfoStatus.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.sql.ClientInfoStatus.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.sql.JDBCType.getName(),returns the sqltype name that represents a sql data type.
java.sql.JDBCType.getVendor(),returns the name of the vendor that supports this data type.
java.sql.JDBCType.getVendorTypeNumber(),returns the vendor specific type number for the data type.
java.sql.JDBCType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.sql.JDBCType.valueOf(int),returns the jdbctype that corresponds to the specified types value.
java.sql.JDBCType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.sql.PseudoColumnUsage.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.sql.PseudoColumnUsage.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.sql.RowIdLifetime.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.sql.RowIdLifetime.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.sql.BatchUpdateException.getLargeUpdateCounts(),retrieves the update count for each update statement in the batch update that executed successfully before this exception occurred.
java.sql.BatchUpdateException.getUpdateCounts(),retrieves the update count for each update statement in the batch update that executed successfully before this exception occurred.
java.sql.DataTruncation.getDataSize(),gets the number of bytes of data that should have been transferred.
java.sql.DataTruncation.getIndex(),retrieves the index of the column or parameter that was truncated.
java.sql.DataTruncation.getParameter(),indicates whether the value truncated was a parameter value or a column value.
java.sql.DataTruncation.getRead(),indicates whether or not the value was truncated on a read.
java.sql.DataTruncation.getTransferSize(),gets the number of bytes of data actually transferred.
java.sql.SQLClientInfoException.getFailedProperties(),returns the list of client info properties that could not be set.
java.sql.SQLException.getErrorCode(),retrieves the vendor-specific exception code for this sqlexception object.
java.sql.SQLException.getNextException(),retrieves the exception chained to this sqlexception object by setnextexception(sqlexception ex).
java.sql.SQLException.getSQLState(),retrieves the sqlstate for this sqlexception object.
java.sql.SQLException.iterator(),returns an iterator over the chained sqlexceptions.
java.sql.SQLException.setNextException(java.sql.SQLException),adds an sqlexception object to the end of the chain.
java.sql.SQLWarning.getNextWarning(),retrieves the warning chained to this sqlwarning object by setnextwarning.
java.sql.SQLWarning.setNextWarning(java.sql.SQLWarning),adds a sqlwarning object to the end of the chain.
java.text.AttributedCharacterIterator.getAllAttributeKeys(),returns the keys of all attributes defined on the iterator's text range.
java.text.AttributedCharacterIterator.getAttribute(java.text.AttributedCharacterIterator.Attribute),returns the value of the named attribute for the current character.
java.text.AttributedCharacterIterator.getAttributes(),returns a map with the attributes defined on the current character.
java.text.AttributedCharacterIterator.getRunLimit(),returns the index of the first character following the run with respect to all attributes containing the current character.
java.text.AttributedCharacterIterator.getRunLimit(java.text.AttributedCharacterIterator.Attribute),returns the index of the first character following the run with respect to the given attribute containing the current character.
java.text.AttributedCharacterIterator.getRunLimit(java.util.Set<? extends java.text.AttributedCharacterIterator.Attribute>),returns the index of the first character following the run with respect to the given attributes containing the current character.
java.text.AttributedCharacterIterator.getRunStart(),returns the index of the first character of the run with respect to all attributes containing the current character.
java.text.AttributedCharacterIterator.getRunStart(java.text.AttributedCharacterIterator.Attribute),returns the index of the first character of the run with respect to the given attribute containing the current character.
java.text.AttributedCharacterIterator.getRunStart(java.util.Set<? extends java.text.AttributedCharacterIterator.Attribute>),returns the index of the first character of the run with respect to the given attributes containing the current character.
java.text.CharacterIterator.clone(),create a copy of this iterator.
java.text.CharacterIterator.current(),gets the character at the current position (as returned by getindex()).
java.text.CharacterIterator.first(),sets the position to getbeginindex() and returns the character at that position.
java.text.CharacterIterator.getBeginIndex(),returns the start index of the text.
java.text.CharacterIterator.getEndIndex(),returns the end index of the text.
java.text.CharacterIterator.getIndex(),returns the current index.
java.text.CharacterIterator.last(),sets the position to getendindex()-1 (getendindex() if the text is empty) and returns the character at that position.
java.text.CharacterIterator.next(),increments the iterator's index by one and returns the character at the new index.
java.text.CharacterIterator.previous(),decrements the iterator's index by one and returns the character at the new index.
java.text.CharacterIterator.setIndex(int),sets the position to the specified position in the text and returns that character.
java.text.Annotation.getValue(),"returns the value of the attribute, which may be null."
java.text.Annotation.toString(),returns the string representation of this annotation.
java.text.AttributedCharacterIterator.Attribute.equals(java.lang.Object),compares two objects for equality.
java.text.AttributedCharacterIterator.Attribute.getName(),returns the name of the attribute.
java.text.AttributedCharacterIterator.Attribute.hashCode(),returns a hash code value for the object.
java.text.AttributedCharacterIterator.Attribute.readResolve(),resolves instances being deserialized to the predefined constants.
java.text.AttributedCharacterIterator.Attribute.toString(),returns a string representation of the object.
"java.text.AttributedString.addAttribute(java.text.AttributedCharacterIterator.Attribute,java.lang.Object)",adds an attribute to the entire string.
"java.text.AttributedString.addAttribute(java.text.AttributedCharacterIterator.Attribute,java.lang.Object,int,int)",adds an attribute to a subrange of the string.
"java.text.AttributedString.addAttributes(java.util.Map<? extends,?>,int,int)",adds a set of attributes to a subrange of the string.
java.text.AttributedString.getIterator(),creates an attributedcharacteriterator instance that provides access to the entire contents of this string.
java.text.AttributedString.getIterator(java.text.AttributedCharacterIterator.Attribute[]),creates an attributedcharacteriterator instance that provides access to selected contents of this string.
"java.text.AttributedString.getIterator(java.text.AttributedCharacterIterator.Attribute[],int,int)",creates an attributedcharacteriterator instance that provides access to selected contents of this string.
java.text.Bidi.baseIsLeftToRight(),return true if the base direction is left-to-right.
"java.text.Bidi.createLineBidi(int,int)",create a bidi object representing the bidi information on a line of text within the paragraph represented by the current bidi.
java.text.Bidi.getBaseLevel(),"return the base level (0 if left-to-right, 1 if right-to-left)."
java.text.Bidi.getLength(),return the length of text in the line.
java.text.Bidi.getLevelAt(int),return the resolved level of the character at offset.
java.text.Bidi.getRunCount(),return the number of level runs.
java.text.Bidi.getRunLevel(int),return the level of the nth logical run in this line.
java.text.Bidi.getRunLimit(int),"return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line."
java.text.Bidi.getRunStart(int),"return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line."
java.text.Bidi.isLeftToRight(),return true if the line is all left-to-right text and the base direction is left-to-right.
java.text.Bidi.isMixed(),return true if the line is not left-to-right or right-to-left.
java.text.Bidi.isRightToLeft(),"return true if the line is all right-to-left text, and the base direction is right-to-left."
"java.text.Bidi.reorderVisually(byte[],int,java.lang.Object[],int,int)",reorder the objects in the array into visual order based on their levels.
"java.text.Bidi.requiresBidi(char[],int,int)",return true if the specified text requires bidi analysis.
java.text.Bidi.toString(),"display the bidi internal state, used in debugging."
java.text.BreakIterator.clone(),create a copy of this iterator.
java.text.BreakIterator.current(),"returns character index of the text boundary that was most recently returned by next(), next(int), previous(), first(), last(), following(int) or preceding(int)."
java.text.BreakIterator.first(),returns the first boundary.
java.text.BreakIterator.following(int),returns the first boundary following the specified character offset.
java.text.BreakIterator.getAvailableLocales(),returns an array of all locales for which the get*instance methods of this class can return localized instances.
java.text.BreakIterator.getCharacterInstance(),returns a new breakiterator instance for character breaks for the default locale.
java.text.BreakIterator.getCharacterInstance(java.util.Locale),returns a new breakiterator instance for character breaks for the given locale.
java.text.BreakIterator.getLineInstance(),returns a new breakiterator instance for line breaks for the default locale.
java.text.BreakIterator.getLineInstance(java.util.Locale),returns a new breakiterator instance for line breaks for the given locale.
java.text.BreakIterator.getSentenceInstance(),returns a new breakiterator instance for sentence breaks for the default locale.
java.text.BreakIterator.getSentenceInstance(java.util.Locale),returns a new breakiterator instance for sentence breaks for the given locale.
java.text.BreakIterator.getText(),get the text being scanned.
java.text.BreakIterator.getWordInstance(),returns a new breakiterator instance for word breaks for the default locale.
java.text.BreakIterator.getWordInstance(java.util.Locale),returns a new breakiterator instance for word breaks for the given locale.
java.text.BreakIterator.isBoundary(int),returns true if the specified character offset is a text boundary.
java.text.BreakIterator.last(),returns the last boundary.
java.text.BreakIterator.next(int),returns the nth boundary from the current boundary.
java.text.BreakIterator.next(),returns the boundary following the current boundary.
java.text.BreakIterator.preceding(int),returns the last boundary preceding the specified character offset.
java.text.BreakIterator.previous(),returns the boundary preceding the current boundary.
java.text.BreakIterator.setText(java.lang.String),set a new text string to be scanned.
java.text.BreakIterator.setText(java.text.CharacterIterator),set a new text for scanning.
java.text.ChoiceFormat.applyPattern(java.lang.String),sets the pattern.
java.text.ChoiceFormat.equals(java.lang.Object),equality comparision between two.
"java.text.ChoiceFormat.format(long,java.lang.StringBuffer,java.text.FieldPosition)",specialization of format.
"java.text.ChoiceFormat.format(double,java.lang.StringBuffer,java.text.FieldPosition)",returns pattern with formatted double.
java.text.ChoiceFormat.getFormats(),get the formats passed in the constructor.
java.text.ChoiceFormat.getLimits(),get the limits passed in the constructor.
java.text.ChoiceFormat.hashCode(),generates a hash code for the message format object.
java.text.ChoiceFormat.nextDouble(double),finds the least double greater than d.
"java.text.ChoiceFormat.nextDouble(double,boolean)","finds the least double greater than d (if positive is true), or the greatest double less than d (if positive is false)."
"java.text.ChoiceFormat.parse(java.lang.String,java.text.ParsePosition)",parses a number from the input text.
java.text.ChoiceFormat.previousDouble(double),finds the greatest double less than d.
"java.text.ChoiceFormat.setChoices(double[],java.lang.String[])",set the choices to be used in formatting.
java.text.ChoiceFormat.toPattern(),gets the pattern.
java.text.CollationElementIterator.getMaxExpansion(int),return the maximum length of any expansion sequences that end with the specified comparison order.
java.text.CollationElementIterator.getOffset(),returns the character offset in the original text corresponding to the next collation element.
java.text.CollationElementIterator.next(),get the next collation element in the string.
java.text.CollationElementIterator.previous(),get the previous collation element in the string.
java.text.CollationElementIterator.primaryOrder(int),return the primary component of a collation element.
java.text.CollationElementIterator.reset(),resets the cursor to the beginning of the string.
java.text.CollationElementIterator.secondaryOrder(int),return the secondary component of a collation element.
java.text.CollationElementIterator.setOffset(int),"sets the iterator to point to the collation element corresponding to the specified character (the parameter is a character offset in the original string, not an offset into its corresponding sequence of collation elements)."
java.text.CollationElementIterator.setText(java.lang.String),set a new string over which to iterate.
java.text.CollationElementIterator.setText(java.text.CharacterIterator),set a new string over which to iterate.
java.text.CollationElementIterator.tertiaryOrder(int),return the tertiary component of a collation element.
java.text.CollationKey.compareTo(java.text.CollationKey),compare this collationkey to the target collationkey.
java.text.CollationKey.getSourceString(),returns the string that this collationkey represents.
java.text.CollationKey.toByteArray(),converts the collationkey to a sequence of bits.
"java.text.Collator.compare(java.lang.String,java.lang.String)",compares the source string to the target string according to the collation rules for this collator.
"java.text.Collator.compare(java.lang.Object,java.lang.Object)",compares its two arguments for order.
"java.text.Collator.equals(java.lang.String,java.lang.String)",convenience method for comparing the equality of two strings based on this collator's collation rules.
java.text.Collator.equals(java.lang.Object),compares the equality of two collators.
java.text.Collator.getAvailableLocales(),returns an array of all locales for which the getinstance methods of this class can return localized instances.
java.text.Collator.getCollationKey(java.lang.String),transforms the string into a series of bits that can be compared bitwise to other collationkeys.
java.text.Collator.getDecomposition(),get the decomposition mode of this collator.
java.text.Collator.getInstance(),gets the collator for the current default locale.
java.text.Collator.getInstance(java.util.Locale),gets the collator for the desired locale.
java.text.Collator.getStrength(),returns this collator's strength property.
java.text.Collator.hashCode(),generates the hash code for this collator.
java.text.Collator.setDecomposition(int),set the decomposition mode of this collator.
java.text.Collator.setStrength(int),sets this collator's strength property.
"java.text.DateFormat.format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)",formats a date into a date/time string.
java.text.DateFormat.format(java.util.Date),formats a date into a date/time string.
java.text.DateFormat.getAvailableLocales(),returns an array of all locales for which the get*instance methods of this class can return localized instances.
java.text.DateFormat.getCalendar(),gets the calendar associated with this date/time formatter.
java.text.DateFormat.getDateInstance(),gets the date formatter with the default formatting style for the default format locale.
java.text.DateFormat.getDateInstance(int),gets the date formatter with the given formatting style for the default format locale.
"java.text.DateFormat.getDateInstance(int,java.util.Locale)",gets the date formatter with the given formatting style for the given locale.
java.text.DateFormat.getDateTimeInstance(),gets the date/time formatter with the default formatting style for the default format locale.
"java.text.DateFormat.getDateTimeInstance(int,int)",gets the date/time formatter with the given date and time formatting styles for the default format locale.
"java.text.DateFormat.getDateTimeInstance(int,int,java.util.Locale)",gets the date/time formatter with the given formatting styles for the given locale.
java.text.DateFormat.getInstance(),get a default date/time formatter that uses the short style for both the date and the time.
java.text.DateFormat.getNumberFormat(),gets the number formatter which this date/time formatter uses to format and parse a time.
java.text.DateFormat.getTimeInstance(),gets the time formatter with the default formatting style for the default format locale.
java.text.DateFormat.getTimeInstance(int),gets the time formatter with the given formatting style for the default format locale.
"java.text.DateFormat.getTimeInstance(int,java.util.Locale)",gets the time formatter with the given formatting style for the given locale.
java.text.DateFormat.getTimeZone(),gets the time zone.
java.text.DateFormat.isLenient(),tell whether date/time parsing is to be lenient.
java.text.DateFormat.parse(java.lang.String),parses text from the beginning of the given string to produce a date.
"java.text.DateFormat.parse(java.lang.String,java.text.ParsePosition)",parse a date/time string according to the given parse position.
"java.text.DateFormat.parseObject(java.lang.String,java.text.ParsePosition)",parses text from a string to produce a date.
java.text.DateFormat.setCalendar(java.util.Calendar),set the calendar to be used by this date format.
java.text.DateFormat.setLenient(boolean),specify whether or not date/time parsing is to be lenient.
java.text.DateFormat.setNumberFormat(java.text.NumberFormat),allows you to set the number formatter.
java.text.DateFormat.setTimeZone(java.util.TimeZone),sets the time zone for the calendar of this dateformat object.
java.text.DateFormat.Field.getCalendarField(),returns the calendar field associated with this attribute.
java.text.DateFormat.Field.ofCalendarField(int),returns the field constant that corresponds to the calendar constant calendarfield.
java.text.DateFormat.Field.readResolve(),resolves instances being deserialized to the predefined constants.
java.text.DateFormatSymbols.getAmPmStrings(),gets ampm strings.
java.text.DateFormatSymbols.getAvailableLocales(),returns an array of all locales for which the getinstance methods of this class can return localized instances.
java.text.DateFormatSymbols.getEras(),gets era strings.
java.text.DateFormatSymbols.getInstance(),gets the dateformatsymbols instance for the default locale.
java.text.DateFormatSymbols.getInstance(java.util.Locale),gets the dateformatsymbols instance for the specified locale.
java.text.DateFormatSymbols.getLocalPatternChars(),gets localized date-time pattern characters.
java.text.DateFormatSymbols.getMonths(),gets month strings.
java.text.DateFormatSymbols.getShortMonths(),gets short month strings.
java.text.DateFormatSymbols.getShortWeekdays(),gets short weekday strings.
java.text.DateFormatSymbols.getWeekdays(),gets weekday strings.
java.text.DateFormatSymbols.getZoneStrings(),gets time zone strings.
java.text.DateFormatSymbols.setAmPmStrings(java.lang.String[]),sets ampm strings.
java.text.DateFormatSymbols.setEras(java.lang.String[]),sets era strings.
java.text.DateFormatSymbols.setLocalPatternChars(java.lang.String),sets localized date-time pattern characters.
java.text.DateFormatSymbols.setMonths(java.lang.String[]),sets month strings.
java.text.DateFormatSymbols.setShortMonths(java.lang.String[]),sets short month strings.
java.text.DateFormatSymbols.setShortWeekdays(java.lang.String[]),sets short weekday strings.
java.text.DateFormatSymbols.setWeekdays(java.lang.String[]),sets weekday strings.
java.text.DateFormatSymbols.setZoneStrings(java.lang.String[][]),sets time zone strings.
java.text.DecimalFormat.applyLocalizedPattern(java.lang.String),apply the given pattern to this format object.
java.text.DecimalFormat.applyPattern(java.lang.String),apply the given pattern to this format object.
java.text.DecimalFormat.clone(),standard override; no change in semantics.
"java.text.DecimalFormat.format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)",formats a number and appends the resulting text to the given string buffer.
"java.text.DecimalFormat.format(double,java.lang.StringBuffer,java.text.FieldPosition)",formats a double to produce a string.
"java.text.DecimalFormat.format(long,java.lang.StringBuffer,java.text.FieldPosition)",format a long to produce a string.
java.text.DecimalFormat.formatToCharacterIterator(java.lang.Object),formats an object producing an attributedcharacteriterator.
java.text.DecimalFormat.getCurrency(),gets the currency used by this decimal format when formatting currency values.
java.text.DecimalFormat.getDecimalFormatSymbols(),"returns a copy of the decimal format symbols, which is generally not changed by the programmer or user."
java.text.DecimalFormat.getGroupingSize(),return the grouping size.
java.text.DecimalFormat.getMaximumFractionDigits(),gets the maximum number of digits allowed in the fraction portion of a number.
java.text.DecimalFormat.getMaximumIntegerDigits(),gets the maximum number of digits allowed in the integer portion of a number.
java.text.DecimalFormat.getMinimumFractionDigits(),gets the minimum number of digits allowed in the fraction portion of a number.
java.text.DecimalFormat.getMinimumIntegerDigits(),gets the minimum number of digits allowed in the integer portion of a number.
java.text.DecimalFormat.getMultiplier(),"gets the multiplier for use in percent, per mille, and similar formats."
java.text.DecimalFormat.getNegativePrefix(),get the negative prefix.
java.text.DecimalFormat.getNegativeSuffix(),get the negative suffix.
java.text.DecimalFormat.getPositivePrefix(),get the positive prefix.
java.text.DecimalFormat.getPositiveSuffix(),get the positive suffix.
java.text.DecimalFormat.getRoundingMode(),gets the roundingmode used in this decimalformat.
java.text.DecimalFormat.isDecimalSeparatorAlwaysShown(),allows you to get the behavior of the decimal separator with integers.
java.text.DecimalFormat.isParseBigDecimal(),returns whether the parse(java.
"java.text.DecimalFormat.parse(java.lang.String,java.text.ParsePosition)",parses text from a string to produce a number.
java.text.DecimalFormat.setCurrency(java.util.Currency),sets the currency used by this number format when formatting currency values.
java.text.DecimalFormat.setDecimalFormatSymbols(java.text.DecimalFormatSymbols),"sets the decimal format symbols, which is generally not changed by the programmer or user."
java.text.DecimalFormat.setDecimalSeparatorAlwaysShown(boolean),allows you to set the behavior of the decimal separator with integers.
java.text.DecimalFormat.setGroupingSize(int),set the grouping size.
java.text.DecimalFormat.setGroupingUsed(boolean),set whether or not grouping will be used in this format.
java.text.DecimalFormat.setMaximumFractionDigits(int),sets the maximum number of digits allowed in the fraction portion of a number.
java.text.DecimalFormat.setMaximumIntegerDigits(int),sets the maximum number of digits allowed in the integer portion of a number.
java.text.DecimalFormat.setMinimumFractionDigits(int),sets the minimum number of digits allowed in the fraction portion of a number.
java.text.DecimalFormat.setMinimumIntegerDigits(int),sets the minimum number of digits allowed in the integer portion of a number.
java.text.DecimalFormat.setMultiplier(int),"sets the multiplier for use in percent, per mille, and similar formats."
java.text.DecimalFormat.setNegativePrefix(java.lang.String),set the negative prefix.
java.text.DecimalFormat.setNegativeSuffix(java.lang.String),set the negative suffix.
java.text.DecimalFormat.setParseBigDecimal(boolean),sets whether the parse(java.
java.text.DecimalFormat.setPositivePrefix(java.lang.String),set the positive prefix.
java.text.DecimalFormat.setPositiveSuffix(java.lang.String),set the positive suffix.
java.text.DecimalFormat.setRoundingMode(java.math.RoundingMode),sets the roundingmode used in this decimalformat.
java.text.DecimalFormat.toLocalizedPattern(),synthesizes a localized pattern string that represents the current state of this format object.
java.text.DecimalFormat.toPattern(),synthesizes a pattern string that represents the current state of this format object.
java.text.DecimalFormatSymbols.clone(),standard override.
java.text.DecimalFormatSymbols.getAvailableLocales(),returns an array of all locales for which the getinstance methods of this class can return localized instances.
java.text.DecimalFormatSymbols.getCurrency(),gets the currency of these decimalformatsymbols.
java.text.DecimalFormatSymbols.getCurrencySymbol(),returns the currency symbol for the currency of these decimalformatsymbols in their locale.
java.text.DecimalFormatSymbols.getDecimalSeparator(),gets the character used for decimal sign.
java.text.DecimalFormatSymbols.getDigit(),gets the character used for a digit in a pattern.
java.text.DecimalFormatSymbols.getExponentSeparator(),returns the string used to separate the mantissa from the exponent.
java.text.DecimalFormatSymbols.getGroupingSeparator(),gets the character used for thousands separator.
java.text.DecimalFormatSymbols.getInfinity(),gets the string used to represent infinity.
java.text.DecimalFormatSymbols.getInstance(),gets the decimalformatsymbols instance for the default locale.
java.text.DecimalFormatSymbols.getInstance(java.util.Locale),gets the decimalformatsymbols instance for the specified locale.
java.text.DecimalFormatSymbols.getInternationalCurrencySymbol(),returns the iso 4217 currency code of the currency of these decimalformatsymbols.
java.text.DecimalFormatSymbols.getMinusSign(),gets the character used to represent minus sign.
java.text.DecimalFormatSymbols.getMonetaryDecimalSeparator(),returns the monetary decimal separator.
java.text.DecimalFormatSymbols.getNaN(),"gets the string used to represent ""not a number""."
java.text.DecimalFormatSymbols.getPatternSeparator(),gets the character used to separate positive and negative subpatterns in a pattern.
java.text.DecimalFormatSymbols.getPercent(),gets the character used for percent sign.
java.text.DecimalFormatSymbols.getPerMill(),gets the character used for per mille sign.
java.text.DecimalFormatSymbols.getZeroDigit(),gets the character used for zero.
java.text.DecimalFormatSymbols.setCurrency(java.util.Currency),sets the currency of these decimalformatsymbols.
java.text.DecimalFormatSymbols.setCurrencySymbol(java.lang.String),sets the currency symbol for the currency of these decimalformatsymbols in their locale.
java.text.DecimalFormatSymbols.setDecimalSeparator(char),sets the character used for decimal sign.
java.text.DecimalFormatSymbols.setDigit(char),sets the character used for a digit in a pattern.
java.text.DecimalFormatSymbols.setExponentSeparator(java.lang.String),sets the string used to separate the mantissa from the exponent.
java.text.DecimalFormatSymbols.setGroupingSeparator(char),sets the character used for thousands separator.
java.text.DecimalFormatSymbols.setInfinity(java.lang.String),sets the string used to represent infinity.
java.text.DecimalFormatSymbols.setInternationalCurrencySymbol(java.lang.String),sets the iso 4217 currency code of the currency of these decimalformatsymbols.
java.text.DecimalFormatSymbols.setMinusSign(char),sets the character used to represent minus sign.
java.text.DecimalFormatSymbols.setMonetaryDecimalSeparator(char),sets the monetary decimal separator.
java.text.DecimalFormatSymbols.setNaN(java.lang.String),"sets the string used to represent ""not a number""."
java.text.DecimalFormatSymbols.setPatternSeparator(char),sets the character used to separate positive and negative subpatterns in a pattern.
java.text.DecimalFormatSymbols.setPercent(char),sets the character used for percent sign.
java.text.DecimalFormatSymbols.setPerMill(char),sets the character used for per mille sign.
java.text.DecimalFormatSymbols.setZeroDigit(char),sets the character used for zero.
java.text.FieldPosition.getBeginIndex(),retrieves the index of the first character in the requested field.
java.text.FieldPosition.getEndIndex(),retrieves the index of the character following the last character in the requested field.
java.text.FieldPosition.getField(),retrieves the field identifier.
java.text.FieldPosition.getFieldAttribute(),returns the field identifier as an attribute constant from one of the field subclasses.
java.text.FieldPosition.hashCode(),returns a hash code for this fieldposition.
java.text.FieldPosition.setBeginIndex(int),sets the begin index.
java.text.FieldPosition.setEndIndex(int),sets the end index.
java.text.FieldPosition.toString(),return a string representation of this fieldposition.
java.text.Format.clone(),creates and returns a copy of this object.
java.text.Format.format(java.lang.Object),formats an object to produce a string.
"java.text.Format.format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)",formats an object and appends the resulting text to a given string buffer.
java.text.Format.formatToCharacterIterator(java.lang.Object),formats an object producing an attributedcharacteriterator.
"java.text.Format.parseObject(java.lang.String,java.text.ParsePosition)",parses text from a string to produce an object.
java.text.Format.parseObject(java.lang.String),parses text from the beginning of the given string to produce an object.
java.text.MessageFormat.applyPattern(java.lang.String),sets the pattern used by this message format.
java.text.MessageFormat.clone(),creates and returns a copy of this object.
java.text.MessageFormat.equals(java.lang.Object),equality comparison between two message format objects.
"java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)","formats an array of objects and appends the messageformat's pattern, with format elements replaced by the formatted objects, to the provided stringbuffer."
"java.text.MessageFormat.format(java.lang.String,java.lang.Object...)",creates a messageformat with the given pattern and uses it to format the given arguments.
"java.text.MessageFormat.format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)","formats an array of objects and appends the messageformat's pattern, with format elements replaced by the formatted objects, to the provided stringbuffer."
java.text.MessageFormat.formatToCharacterIterator(java.lang.Object),"formats an array of objects and inserts them into the messageformat's pattern, producing an attributedcharacteriterator."
java.text.MessageFormat.getFormats(),gets the formats used for the format elements in the previously set pattern string.
java.text.MessageFormat.getFormatsByArgumentIndex(),gets the formats used for the values passed into format methods or returned from parse methods.
java.text.MessageFormat.getLocale(),gets the locale that's used when creating or comparing subformats.
java.text.MessageFormat.hashCode(),generates a hash code for the message format object.
"java.text.MessageFormat.parse(java.lang.String,java.text.ParsePosition)",parses the string.
java.text.MessageFormat.parse(java.lang.String),parses text from the beginning of the given string to produce an object array.
"java.text.MessageFormat.parseObject(java.lang.String,java.text.ParsePosition)",parses text from a string to produce an object array.
"java.text.MessageFormat.setFormat(int,java.text.Format)",sets the format to use for the format element with the given format element index within the previously set pattern string.
"java.text.MessageFormat.setFormatByArgumentIndex(int,java.text.Format)",sets the format to use for the format elements within the previously set pattern string that use the given argument index.
java.text.MessageFormat.setFormats(java.text.Format[]),sets the formats to use for the format elements in the previously set pattern string.
java.text.MessageFormat.setFormatsByArgumentIndex(java.text.Format[]),sets the formats to use for the values passed into format methods or returned from parse methods.
java.text.MessageFormat.setLocale(java.util.Locale),sets the locale to be used when creating or comparing subformats.
java.text.MessageFormat.toPattern(),returns a pattern representing the current state of the message format.
java.text.MessageFormat.Field.readResolve(),resolves instances being deserialized to the predefined constants.
"java.text.Normalizer.isNormalized(java.lang.CharSequence,java.text.Normalizer.Form)",determines if the given sequence of char values is normalized.
"java.text.Normalizer.normalize(java.lang.CharSequence,java.text.Normalizer.Form)",normalize a sequence of char values.
"java.text.NumberFormat.format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)",formats a number and appends the resulting text to the given string buffer.
java.text.NumberFormat.format(double),specialization of format.
java.text.NumberFormat.format(long),specialization of format.
"java.text.NumberFormat.format(double,java.lang.StringBuffer,java.text.FieldPosition)",specialization of format.
"java.text.NumberFormat.format(long,java.lang.StringBuffer,java.text.FieldPosition)",specialization of format.
java.text.NumberFormat.getAvailableLocales(),returns an array of all locales for which the get*instance methods of this class can return localized instances.
java.text.NumberFormat.getCurrency(),gets the currency used by this number format when formatting currency values.
java.text.NumberFormat.getCurrencyInstance(),returns a currency format for the current default format locale.
java.text.NumberFormat.getCurrencyInstance(java.util.Locale),returns a currency format for the specified locale.
java.text.NumberFormat.getInstance(),returns a general-purpose number format for the current default format locale.
java.text.NumberFormat.getInstance(java.util.Locale),returns a general-purpose number format for the specified locale.
java.text.NumberFormat.getIntegerInstance(),returns an integer number format for the current default format locale.
java.text.NumberFormat.getIntegerInstance(java.util.Locale),returns an integer number format for the specified locale.
java.text.NumberFormat.getMaximumFractionDigits(),returns the maximum number of digits allowed in the fraction portion of a number.
java.text.NumberFormat.getMaximumIntegerDigits(),returns the maximum number of digits allowed in the integer portion of a number.
java.text.NumberFormat.getMinimumFractionDigits(),returns the minimum number of digits allowed in the fraction portion of a number.
java.text.NumberFormat.getMinimumIntegerDigits(),returns the minimum number of digits allowed in the integer portion of a number.
java.text.NumberFormat.getNumberInstance(),returns a general-purpose number format for the current default format locale.
java.text.NumberFormat.getNumberInstance(java.util.Locale),returns a general-purpose number format for the specified locale.
java.text.NumberFormat.getPercentInstance(),returns a percentage format for the current default format locale.
java.text.NumberFormat.getPercentInstance(java.util.Locale),returns a percentage format for the specified locale.
java.text.NumberFormat.getRoundingMode(),gets the roundingmode used in this numberformat.
java.text.NumberFormat.isGroupingUsed(),returns true if grouping is used in this format.
java.text.NumberFormat.isParseIntegerOnly(),returns true if this format will parse numbers as integers only.
"java.text.NumberFormat.parse(java.lang.String,java.text.ParsePosition)",returns a long if possible (e.
java.text.NumberFormat.parse(java.lang.String),parses text from the beginning of the given string to produce a number.
"java.text.NumberFormat.parseObject(java.lang.String,java.text.ParsePosition)",parses text from a string to produce a number.
java.text.NumberFormat.setCurrency(java.util.Currency),sets the currency used by this number format when formatting currency values.
java.text.NumberFormat.setGroupingUsed(boolean),set whether or not grouping will be used in this format.
java.text.NumberFormat.setMaximumFractionDigits(int),sets the maximum number of digits allowed in the fraction portion of a number.
java.text.NumberFormat.setMaximumIntegerDigits(int),sets the maximum number of digits allowed in the integer portion of a number.
java.text.NumberFormat.setMinimumFractionDigits(int),sets the minimum number of digits allowed in the fraction portion of a number.
java.text.NumberFormat.setMinimumIntegerDigits(int),sets the minimum number of digits allowed in the integer portion of a number.
java.text.NumberFormat.setParseIntegerOnly(boolean),sets whether or not numbers should be parsed as integers only.
java.text.NumberFormat.setRoundingMode(java.math.RoundingMode),sets the roundingmode used in this numberformat.
java.text.NumberFormat.Field.readResolve(),resolves instances being deserialized to the predefined constants.
java.text.ParsePosition.getErrorIndex(),"retrieve the index at which an error occurred, or -1 if the error index has not been set."
java.text.ParsePosition.getIndex(),retrieve the current parse position.
java.text.ParsePosition.hashCode(),returns a hash code for this parseposition.
java.text.ParsePosition.setErrorIndex(int),set the index at which a parse error occurred.
java.text.ParsePosition.setIndex(int),set the current parse position.
java.text.ParsePosition.toString(),return a string representation of this parseposition.
java.text.RuleBasedCollator.clone(),standard override; no change in semantics.
"java.text.RuleBasedCollator.compare(java.lang.String,java.lang.String)",compares the character data stored in two different strings based on the collation rules.
java.text.RuleBasedCollator.equals(java.lang.Object),compares the equality of two collation objects.
java.text.RuleBasedCollator.getCollationElementIterator(java.lang.String),returns a collationelementiterator for the given string.
java.text.RuleBasedCollator.getCollationElementIterator(java.text.CharacterIterator),returns a collationelementiterator for the given characteriterator.
java.text.RuleBasedCollator.getCollationKey(java.lang.String),transforms the string into a series of characters that can be compared with collationkey.
java.text.RuleBasedCollator.getRules(),gets the table-based rules for the collation object.
java.text.RuleBasedCollator.hashCode(),generates the hash code for the table-based collation object.
java.text.SimpleDateFormat.applyLocalizedPattern(java.lang.String),applies the given localized pattern string to this date format.
java.text.SimpleDateFormat.applyPattern(java.lang.String),applies the given pattern string to this date format.
java.text.SimpleDateFormat.clone(),creates a copy of this simpledateformat.
java.text.SimpleDateFormat.equals(java.lang.Object),compares the given object with this simpledateformat for equality.
"java.text.SimpleDateFormat.format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)",formats the given date into a date/time string and appends the result to the given stringbuffer.
java.text.SimpleDateFormat.formatToCharacterIterator(java.lang.Object),formats an object producing an attributedcharacteriterator.
java.text.SimpleDateFormat.get2DigitYearStart(),returns the beginning date of the 100-year period 2-digit years are interpreted as being within.
java.text.SimpleDateFormat.getDateFormatSymbols(),gets a copy of the date and time format symbols of this date format.
java.text.SimpleDateFormat.hashCode(),returns the hash code value for this simpledateformat object.
"java.text.SimpleDateFormat.parse(java.lang.String,java.text.ParsePosition)",parses text from a string to produce a date.
java.text.SimpleDateFormat.set2DigitYearStart(java.util.Date),sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies.
java.text.SimpleDateFormat.setDateFormatSymbols(java.text.DateFormatSymbols),sets the date and time format symbols of this date format.
java.text.SimpleDateFormat.toLocalizedPattern(),returns a localized pattern string describing this date format.
java.text.SimpleDateFormat.toPattern(),returns a pattern string describing this date format.
java.text.StringCharacterIterator.clone(),creates a copy of this iterator.
java.text.StringCharacterIterator.current(),implements characteriterator.
java.text.StringCharacterIterator.equals(java.lang.Object),compares the equality of two stringcharacteriterator objects.
java.text.StringCharacterIterator.first(),implements characteriterator.
java.text.StringCharacterIterator.getBeginIndex(),implements characteriterator.
java.text.StringCharacterIterator.getEndIndex(),implements characteriterator.
java.text.StringCharacterIterator.getIndex(),implements characteriterator.
java.text.StringCharacterIterator.hashCode(),computes a hashcode for this iterator.
java.text.StringCharacterIterator.last(),implements characteriterator.
java.text.StringCharacterIterator.next(),implements characteriterator.
java.text.StringCharacterIterator.previous(),implements characteriterator.
java.text.StringCharacterIterator.setIndex(int),implements characteriterator.
java.text.StringCharacterIterator.setText(java.lang.String),reset this iterator to point to a new string.
java.text.Normalizer.Form.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.text.Normalizer.Form.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.text.ParseException.getErrorOffset(),returns the position where the error was found.
java.text.spi.BreakIteratorProvider.getCharacterInstance(java.util.Locale),returns a new breakiterator instance for character breaks for the given locale.
java.text.spi.BreakIteratorProvider.getLineInstance(java.util.Locale),returns a new breakiterator instance for line breaks for the given locale.
java.text.spi.BreakIteratorProvider.getSentenceInstance(java.util.Locale),returns a new breakiterator instance for sentence breaks for the given locale.
java.text.spi.BreakIteratorProvider.getWordInstance(java.util.Locale),returns a new breakiterator instance for word breaks for the given locale.
java.text.spi.CollatorProvider.getInstance(java.util.Locale),returns a new collator instance for the specified locale.
"java.text.spi.DateFormatProvider.getDateInstance(int,java.util.Locale)",returns a new dateformat instance which formats date with the given formatting style for the specified locale.
"java.text.spi.DateFormatProvider.getDateTimeInstance(int,int,java.util.Locale)",returns a new dateformat instance which formats date and time with the given formatting style for the specified locale.
"java.text.spi.DateFormatProvider.getTimeInstance(int,java.util.Locale)",returns a new dateformat instance which formats time with the given formatting style for the specified locale.
java.text.spi.DateFormatSymbolsProvider.getInstance(java.util.Locale),returns a new dateformatsymbols instance for the specified locale.
java.text.spi.DecimalFormatSymbolsProvider.getInstance(java.util.Locale),returns a new decimalformatsymbols instance for the specified locale.
java.text.spi.NumberFormatProvider.getCurrencyInstance(java.util.Locale),returns a new numberformat instance which formats monetary values for the specified locale.
java.text.spi.NumberFormatProvider.getIntegerInstance(java.util.Locale),returns a new numberformat instance which formats integer values for the specified locale.
java.text.spi.NumberFormatProvider.getNumberInstance(java.util.Locale),returns a new general-purpose numberformat instance for the specified locale.
java.text.spi.NumberFormatProvider.getPercentInstance(java.util.Locale),returns a new numberformat instance which formats percentage values for the specified locale.
java.time.Clock.equals(java.lang.Object),checks if this clock is equal to another clock.
"java.time.Clock.fixed(java.time.Instant,java.time.ZoneId)",obtains a clock that always returns the same instant.
java.time.Clock.getZone(),gets the time-zone being used to create dates and times.
java.time.Clock.hashCode(),a hash code for this clock.
java.time.Clock.instant(),gets the current instant of the clock.
java.time.Clock.millis(),gets the current millisecond instant of the clock.
"java.time.Clock.offset(java.time.Clock,java.time.Duration)","obtains a clock that returns instants from the specified clock with the specified duration added
this clock wraps another clock, returning instants that are later by the specified duration."
java.time.Clock.system(java.time.ZoneId),obtains a clock that returns the current instant using best available system clock.
java.time.Clock.systemDefaultZone(),"obtains a clock that returns the current instant using the best available system clock, converting to date and time using the default time-zone."
java.time.Clock.systemUTC(),"obtains a clock that returns the current instant using the best available system clock, converting to date and time using the utc time-zone."
"java.time.Clock.tick(java.time.Clock,java.time.Duration)",obtains a clock that returns instants from the specified clock truncated to the nearest occurrence of the specified duration.
java.time.Clock.tickMinutes(java.time.ZoneId),obtains a clock that returns the current instant ticking in whole minutes using best available system clock.
java.time.Clock.tickSeconds(java.time.ZoneId),obtains a clock that returns the current instant ticking in whole seconds using best available system clock.
java.time.Clock.withZone(java.time.ZoneId),returns a copy of this clock with a different time-zone.
java.time.Duration.abs(),returns a copy of this duration with a positive length.
java.time.Duration.addTo(java.time.temporal.Temporal),adds this duration to the specified temporal object.
"java.time.Duration.between(java.time.temporal.Temporal,java.time.temporal.Temporal)",obtains a duration representing the duration between two temporal objects.
java.time.Duration.compareTo(java.time.Duration),compares this duration to the specified duration.
java.time.Duration.dividedBy(long),returns a copy of this duration divided by the specified value.
java.time.Duration.equals(java.lang.Object),checks if this duration is equal to the specified duration.
java.time.Duration.from(java.time.temporal.TemporalAmount),obtains an instance of duration from a temporal amount.
java.time.Duration.get(java.time.temporal.TemporalUnit),gets the value of the requested unit.
java.time.Duration.getNano(),gets the number of nanoseconds within the second in this duration.
java.time.Duration.getSeconds(),gets the number of seconds in this duration.
java.time.Duration.getUnits(),gets the set of units supported by this duration.
java.time.Duration.hashCode(),a hash code for this duration.
java.time.Duration.isNegative(),"checks if this duration is negative, excluding zero."
java.time.Duration.isZero(),checks if this duration is zero length.
java.time.Duration.minus(java.time.Duration),returns a copy of this duration with the specified duration subtracted.
"java.time.Duration.minus(long,java.time.temporal.TemporalUnit)",returns a copy of this duration with the specified duration subtracted.
java.time.Duration.minusDays(long),returns a copy of this duration with the specified duration in standard 24 hour days subtracted.
java.time.Duration.minusHours(long),returns a copy of this duration with the specified duration in hours subtracted.
java.time.Duration.minusMillis(long),returns a copy of this duration with the specified duration in milliseconds subtracted.
java.time.Duration.minusMinutes(long),returns a copy of this duration with the specified duration in minutes subtracted.
java.time.Duration.minusNanos(long),returns a copy of this duration with the specified duration in nanoseconds subtracted.
java.time.Duration.minusSeconds(long),returns a copy of this duration with the specified duration in seconds subtracted.
java.time.Duration.multipliedBy(long),returns a copy of this duration multiplied by the scalar.
java.time.Duration.negated(),returns a copy of this duration with the length negated.
"java.time.Duration.of(long,java.time.temporal.TemporalUnit)",obtains a duration representing an amount in the specified unit.
java.time.Duration.ofDays(long),obtains a duration representing a number of standard 24 hour days.
java.time.Duration.ofHours(long),obtains a duration representing a number of standard hours.
java.time.Duration.ofMillis(long),obtains a duration representing a number of milliseconds.
java.time.Duration.ofMinutes(long),obtains a duration representing a number of standard minutes.
java.time.Duration.ofNanos(long),obtains a duration representing a number of nanoseconds.
java.time.Duration.ofSeconds(long),obtains a duration representing a number of seconds.
"java.time.Duration.ofSeconds(long,long)",obtains a duration representing a number of seconds and an adjustment in nanoseconds.
java.time.Duration.parse(java.lang.CharSequence),obtains a duration from a text string such as pndtnhnmn.
java.time.Duration.plus(java.time.Duration),returns a copy of this duration with the specified duration added.
"java.time.Duration.plus(long,java.time.temporal.TemporalUnit)",returns a copy of this duration with the specified duration added.
java.time.Duration.plusDays(long),returns a copy of this duration with the specified duration in standard 24 hour days added.
java.time.Duration.plusHours(long),returns a copy of this duration with the specified duration in hours added.
java.time.Duration.plusMillis(long),returns a copy of this duration with the specified duration in milliseconds added.
java.time.Duration.plusMinutes(long),returns a copy of this duration with the specified duration in minutes added.
java.time.Duration.plusNanos(long),returns a copy of this duration with the specified duration in nanoseconds added.
java.time.Duration.plusSeconds(long),returns a copy of this duration with the specified duration in seconds added.
java.time.Duration.subtractFrom(java.time.temporal.Temporal),subtracts this duration from the specified temporal object.
java.time.Duration.toDays(),gets the number of days in this duration.
java.time.Duration.toHours(),gets the number of hours in this duration.
java.time.Duration.toMillis(),converts this duration to the total length in milliseconds.
java.time.Duration.toMinutes(),gets the number of minutes in this duration.
java.time.Duration.toNanos(),converts this duration to the total length in nanoseconds expressed as a long.
java.time.Duration.toString(),"a string representation of this duration using iso-8601 seconds based representation, such as pt8h6m12."
java.time.Duration.withNanos(int),returns a copy of this duration with the specified nano-of-second.
java.time.Duration.withSeconds(long),returns a copy of this duration with the specified amount of seconds.
java.time.Instant.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have this instant.
java.time.Instant.atOffset(java.time.ZoneOffset),combines this instant with an offset to create an offsetdatetime.
java.time.Instant.atZone(java.time.ZoneId),combines this instant with a time-zone to create a zoneddatetime.
java.time.Instant.compareTo(java.time.Instant),compares this instant to the specified instant.
java.time.Instant.equals(java.lang.Object),checks if this instant is equal to the specified instant.
java.time.Instant.from(java.time.temporal.TemporalAccessor),obtains an instance of instant from a temporal object.
java.time.Instant.get(java.time.temporal.TemporalField),gets the value of the specified field from this instant as an int.
java.time.Instant.getEpochSecond(),gets the number of seconds from the java epoch of 1970-01-01t00:00:00z.
java.time.Instant.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this instant as a long.
java.time.Instant.getNano(),"gets the number of nanoseconds, later along the time-line, from the start of the second."
java.time.Instant.hashCode(),returns a hash code for this instant.
java.time.Instant.isAfter(java.time.Instant),checks if this instant is after the specified instant.
java.time.Instant.isBefore(java.time.Instant),checks if this instant is before the specified instant.
java.time.Instant.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.Instant.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.Instant.minus(java.time.temporal.TemporalAmount),returns a copy of this instant with the specified amount subtracted.
"java.time.Instant.minus(long,java.time.temporal.TemporalUnit)",returns a copy of this instant with the specified amount subtracted.
java.time.Instant.minusMillis(long),returns a copy of this instant with the specified duration in milliseconds subtracted.
java.time.Instant.minusNanos(long),returns a copy of this instant with the specified duration in nanoseconds subtracted.
java.time.Instant.minusSeconds(long),returns a copy of this instant with the specified duration in seconds subtracted.
java.time.Instant.now(),obtains the current instant from the system clock.
java.time.Instant.now(java.time.Clock),obtains the current instant from the specified clock.
java.time.Instant.ofEpochMilli(long),obtains an instance of instant using milliseconds from the epoch of 1970-01-01t00:00:00z.
java.time.Instant.ofEpochSecond(long),obtains an instance of instant using seconds from the epoch of 1970-01-01t00:00:00z.
"java.time.Instant.ofEpochSecond(long,long)",obtains an instance of instant using seconds from the epoch of 1970-01-01t00:00:00z and nanosecond fraction of second.
java.time.Instant.parse(java.lang.CharSequence),obtains an instance of instant from a text string such as 2007-12-03t10:15:30.
java.time.Instant.plus(java.time.temporal.TemporalAmount),returns a copy of this instant with the specified amount added.
"java.time.Instant.plus(long,java.time.temporal.TemporalUnit)",returns a copy of this instant with the specified amount added.
java.time.Instant.plusMillis(long),returns a copy of this instant with the specified duration in milliseconds added.
java.time.Instant.plusNanos(long),returns a copy of this instant with the specified duration in nanoseconds added.
java.time.Instant.plusSeconds(long),returns a copy of this instant with the specified duration in seconds added.
java.time.Instant.query(java.time.temporal.TemporalQuery<R>),queries this instant using the specified query.
java.time.Instant.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.Instant.toEpochMilli(),converts this instant to the number of milliseconds from the epoch of 1970-01-01t00:00:00z.
java.time.Instant.toString(),a string representation of this instant using iso-8601 representation.
java.time.Instant.truncatedTo(java.time.temporal.TemporalUnit),returns a copy of this instant truncated to the specified unit.
"java.time.Instant.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",calculates the amount of time until another instant in terms of the specified unit.
java.time.Instant.with(java.time.temporal.TemporalAdjuster),returns an adjusted copy of this instant.
"java.time.Instant.with(java.time.temporal.TemporalField,long)",returns a copy of this instant with the specified field set to a new value.
java.time.LocalDate.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have the same date as this object.
java.time.LocalDate.atStartOfDay(),combines this date with the time of midnight to create a localdatetime at the start of this date.
java.time.LocalDate.atStartOfDay(java.time.ZoneId),returns a zoned date-time from this date at the earliest valid time according to the rules in the time-zone.
java.time.LocalDate.atTime(java.time.LocalTime),combines this date with a time to create a localdatetime.
"java.time.LocalDate.atTime(int,int)",combines this date with a time to create a localdatetime.
"java.time.LocalDate.atTime(int,int,int)",combines this date with a time to create a localdatetime.
"java.time.LocalDate.atTime(int,int,int,int)",combines this date with a time to create a localdatetime.
java.time.LocalDate.atTime(java.time.OffsetTime),combines this date with an offset time to create an offsetdatetime.
java.time.LocalDate.compareTo(java.time.chrono.ChronoLocalDate),compares this date to another date.
java.time.LocalDate.equals(java.lang.Object),checks if this date is equal to another date.
java.time.LocalDate.format(java.time.format.DateTimeFormatter),formats this date using the specified formatter.
java.time.LocalDate.from(java.time.temporal.TemporalAccessor),obtains an instance of localdate from a temporal object.
java.time.LocalDate.get(java.time.temporal.TemporalField),gets the value of the specified field from this date as an int.
java.time.LocalDate.getChronology(),"gets the chronology of this date, which is the iso calendar system."
java.time.LocalDate.getDayOfMonth(),gets the day-of-month field.
java.time.LocalDate.getDayOfWeek(),"gets the day-of-week field, which is an enum dayofweek."
java.time.LocalDate.getDayOfYear(),gets the day-of-year field.
java.time.LocalDate.getEra(),gets the era applicable at this date.
java.time.LocalDate.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this date as a long.
java.time.LocalDate.getMonth(),gets the month-of-year field using the month enum.
java.time.LocalDate.getMonthValue(),gets the month-of-year field from 1 to 12.
java.time.LocalDate.getYear(),gets the year field.
java.time.LocalDate.hashCode(),a hash code for this date.
java.time.LocalDate.isAfter(java.time.chrono.ChronoLocalDate),checks if this date is after the specified date.
java.time.LocalDate.isBefore(java.time.chrono.ChronoLocalDate),checks if this date is before the specified date.
java.time.LocalDate.isEqual(java.time.chrono.ChronoLocalDate),checks if this date is equal to the specified date.
java.time.LocalDate.isLeapYear(),"checks if the year is a leap year, according to the iso proleptic calendar system rules."
java.time.LocalDate.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.LocalDate.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.LocalDate.lengthOfMonth(),returns the length of the month represented by this date.
java.time.LocalDate.lengthOfYear(),returns the length of the year represented by this date.
java.time.LocalDate.minus(java.time.temporal.TemporalAmount),returns a copy of this date with the specified amount subtracted.
"java.time.LocalDate.minus(long,java.time.temporal.TemporalUnit)",returns a copy of this date with the specified amount subtracted.
java.time.LocalDate.minusDays(long),returns a copy of this localdate with the specified number of days subtracted.
java.time.LocalDate.minusMonths(long),returns a copy of this localdate with the specified number of months subtracted.
java.time.LocalDate.minusWeeks(long),returns a copy of this localdate with the specified number of weeks subtracted.
java.time.LocalDate.minusYears(long),returns a copy of this localdate with the specified number of years subtracted.
java.time.LocalDate.now(),obtains the current date from the system clock in the default time-zone.
java.time.LocalDate.now(java.time.ZoneId),obtains the current date from the system clock in the specified time-zone.
java.time.LocalDate.now(java.time.Clock),obtains the current date from the specified clock.
"java.time.LocalDate.of(int,java.time.Month,int)","obtains an instance of localdate from a year, month and day."
"java.time.LocalDate.of(int,int,int)","obtains an instance of localdate from a year, month and day."
java.time.LocalDate.ofEpochDay(long),obtains an instance of localdate from the epoch day count.
"java.time.LocalDate.ofYearDay(int,int)",obtains an instance of localdate from a year and day-of-year.
java.time.LocalDate.parse(java.lang.CharSequence),obtains an instance of localdate from a text string such as 2007-12-03.
"java.time.LocalDate.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",obtains an instance of localdate from a text string using a specific formatter.
java.time.LocalDate.plus(java.time.temporal.TemporalAmount),returns a copy of this date with the specified amount added.
"java.time.LocalDate.plus(long,java.time.temporal.TemporalUnit)",returns a copy of this date with the specified amount added.
java.time.LocalDate.plusDays(long),returns a copy of this localdate with the specified number of days added.
java.time.LocalDate.plusMonths(long),returns a copy of this localdate with the specified number of months added.
java.time.LocalDate.plusWeeks(long),returns a copy of this localdate with the specified number of weeks added.
java.time.LocalDate.plusYears(long),returns a copy of this localdate with the specified number of years added.
java.time.LocalDate.query(java.time.temporal.TemporalQuery<R>),queries this date using the specified query.
java.time.LocalDate.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.LocalDate.toString(),"outputs this date as a string, such as 2007-12-03."
"java.time.LocalDate.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",calculates the amount of time until another date in terms of the specified unit.
java.time.LocalDate.until(java.time.chrono.ChronoLocalDate),calculates the period between this date and another date as a period.
java.time.LocalDate.with(java.time.temporal.TemporalAdjuster),returns an adjusted copy of this date.
"java.time.LocalDate.with(java.time.temporal.TemporalField,long)",returns a copy of this date with the specified field set to a new value.
java.time.LocalDate.withDayOfMonth(int),returns a copy of this localdate with the day-of-month altered.
java.time.LocalDate.withDayOfYear(int),returns a copy of this localdate with the day-of-year altered.
java.time.LocalDate.withMonth(int),returns a copy of this localdate with the month-of-year altered.
java.time.LocalDate.withYear(int),returns a copy of this localdate with the year altered.
java.time.LocalDateTime.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have the same date and time as this object.
java.time.LocalDateTime.atOffset(java.time.ZoneOffset),combines this date-time with an offset to create an offsetdatetime.
java.time.LocalDateTime.atZone(java.time.ZoneId),combines this date-time with a time-zone to create a zoneddatetime.
java.time.LocalDateTime.compareTo(java.time.chrono.ChronoLocalDateTime<?>),compares this date-time to another date-time.
java.time.LocalDateTime.equals(java.lang.Object),checks if this date-time is equal to another date-time.
java.time.LocalDateTime.format(java.time.format.DateTimeFormatter),formats this date-time using the specified formatter.
java.time.LocalDateTime.from(java.time.temporal.TemporalAccessor),obtains an instance of localdatetime from a temporal object.
java.time.LocalDateTime.get(java.time.temporal.TemporalField),gets the value of the specified field from this date-time as an int.
java.time.LocalDateTime.getDayOfMonth(),gets the day-of-month field.
java.time.LocalDateTime.getDayOfWeek(),"gets the day-of-week field, which is an enum dayofweek."
java.time.LocalDateTime.getDayOfYear(),gets the day-of-year field.
java.time.LocalDateTime.getHour(),gets the hour-of-day field.
java.time.LocalDateTime.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this date-time as a long.
java.time.LocalDateTime.getMinute(),gets the minute-of-hour field.
java.time.LocalDateTime.getMonth(),gets the month-of-year field using the month enum.
java.time.LocalDateTime.getMonthValue(),gets the month-of-year field from 1 to 12.
java.time.LocalDateTime.getNano(),gets the nano-of-second field.
java.time.LocalDateTime.getSecond(),gets the second-of-minute field.
java.time.LocalDateTime.getYear(),gets the year field.
java.time.LocalDateTime.hashCode(),a hash code for this date-time.
java.time.LocalDateTime.isAfter(java.time.chrono.ChronoLocalDateTime<?>),checks if this date-time is after the specified date-time.
java.time.LocalDateTime.isBefore(java.time.chrono.ChronoLocalDateTime<?>),checks if this date-time is before the specified date-time.
java.time.LocalDateTime.isEqual(java.time.chrono.ChronoLocalDateTime<?>),checks if this date-time is equal to the specified date-time.
java.time.LocalDateTime.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.LocalDateTime.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.LocalDateTime.minus(java.time.temporal.TemporalAmount),returns a copy of this date-time with the specified amount subtracted.
"java.time.LocalDateTime.minus(long,java.time.temporal.TemporalUnit)",returns a copy of this date-time with the specified amount subtracted.
java.time.LocalDateTime.minusDays(long),returns a copy of this localdatetime with the specified number of days subtracted.
java.time.LocalDateTime.minusHours(long),returns a copy of this localdatetime with the specified number of hours subtracted.
java.time.LocalDateTime.minusMinutes(long),returns a copy of this localdatetime with the specified number of minutes subtracted.
java.time.LocalDateTime.minusMonths(long),returns a copy of this localdatetime with the specified number of months subtracted.
java.time.LocalDateTime.minusNanos(long),returns a copy of this localdatetime with the specified number of nanoseconds subtracted.
java.time.LocalDateTime.minusSeconds(long),returns a copy of this localdatetime with the specified number of seconds subtracted.
java.time.LocalDateTime.minusWeeks(long),returns a copy of this localdatetime with the specified number of weeks subtracted.
java.time.LocalDateTime.minusYears(long),returns a copy of this localdatetime with the specified number of years subtracted.
java.time.LocalDateTime.now(),obtains the current date-time from the system clock in the default time-zone.
java.time.LocalDateTime.now(java.time.ZoneId),obtains the current date-time from the system clock in the specified time-zone.
java.time.LocalDateTime.now(java.time.Clock),obtains the current date-time from the specified clock.
"java.time.LocalDateTime.of(int,java.time.Month,int,int,int)","obtains an instance of localdatetime from year, month, day, hour and minute, setting the second and nanosecond to zero."
"java.time.LocalDateTime.of(int,java.time.Month,int,int,int,int)","obtains an instance of localdatetime from year, month, day, hour, minute and second, setting the nanosecond to zero."
"java.time.LocalDateTime.of(int,java.time.Month,int,int,int,int,int)","obtains an instance of localdatetime from year, month, day, hour, minute, second and nanosecond."
"java.time.LocalDateTime.of(int,int,int,int,int)","obtains an instance of localdatetime from year, month, day, hour and minute, setting the second and nanosecond to zero."
"java.time.LocalDateTime.of(int,int,int,int,int,int)","obtains an instance of localdatetime from year, month, day, hour, minute and second, setting the nanosecond to zero."
"java.time.LocalDateTime.of(int,int,int,int,int,int,int)","obtains an instance of localdatetime from year, month, day, hour, minute, second and nanosecond."
"java.time.LocalDateTime.of(java.time.LocalDate,java.time.LocalTime)",obtains an instance of localdatetime from a date and time.
"java.time.LocalDateTime.ofEpochSecond(long,int,java.time.ZoneOffset)",obtains an instance of localdatetime using seconds from the epoch of 1970-01-01t00:00:00z.
"java.time.LocalDateTime.ofInstant(java.time.Instant,java.time.ZoneId)",obtains an instance of localdatetime from an instant and zone id.
java.time.LocalDateTime.parse(java.lang.CharSequence),obtains an instance of localdatetime from a text string such as 2007-12-03t10:15:30.
"java.time.LocalDateTime.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",obtains an instance of localdatetime from a text string using a specific formatter.
java.time.LocalDateTime.plus(java.time.temporal.TemporalAmount),returns a copy of this date-time with the specified amount added.
"java.time.LocalDateTime.plus(long,java.time.temporal.TemporalUnit)",returns a copy of this date-time with the specified amount added.
java.time.LocalDateTime.plusDays(long),returns a copy of this localdatetime with the specified number of days added.
java.time.LocalDateTime.plusHours(long),returns a copy of this localdatetime with the specified number of hours added.
java.time.LocalDateTime.plusMinutes(long),returns a copy of this localdatetime with the specified number of minutes added.
java.time.LocalDateTime.plusMonths(long),returns a copy of this localdatetime with the specified number of months added.
java.time.LocalDateTime.plusNanos(long),returns a copy of this localdatetime with the specified number of nanoseconds added.
java.time.LocalDateTime.plusSeconds(long),returns a copy of this localdatetime with the specified number of seconds added.
java.time.LocalDateTime.plusWeeks(long),returns a copy of this localdatetime with the specified number of weeks added.
java.time.LocalDateTime.plusYears(long),returns a copy of this localdatetime with the specified number of years added.
java.time.LocalDateTime.query(java.time.temporal.TemporalQuery<R>),queries this date-time using the specified query.
java.time.LocalDateTime.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.LocalDateTime.toLocalDate(),gets the localdate part of this date-time.
java.time.LocalDateTime.toLocalTime(),gets the localtime part of this date-time.
java.time.LocalDateTime.toString(),"outputs this date-time as a string, such as 2007-12-03t10:15:30."
java.time.LocalDateTime.truncatedTo(java.time.temporal.TemporalUnit),returns a copy of this localdatetime with the time truncated.
"java.time.LocalDateTime.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",calculates the amount of time until another date-time in terms of the specified unit.
java.time.LocalDateTime.with(java.time.temporal.TemporalAdjuster),returns an adjusted copy of this date-time.
"java.time.LocalDateTime.with(java.time.temporal.TemporalField,long)",returns a copy of this date-time with the specified field set to a new value.
java.time.LocalDateTime.withDayOfMonth(int),returns a copy of this localdatetime with the day-of-month altered.
java.time.LocalDateTime.withDayOfYear(int),returns a copy of this localdatetime with the day-of-year altered.
java.time.LocalDateTime.withHour(int),returns a copy of this localdatetime with the hour-of-day altered.
java.time.LocalDateTime.withMinute(int),returns a copy of this localdatetime with the minute-of-hour altered.
java.time.LocalDateTime.withMonth(int),returns a copy of this localdatetime with the month-of-year altered.
java.time.LocalDateTime.withNano(int),returns a copy of this localdatetime with the nano-of-second altered.
java.time.LocalDateTime.withSecond(int),returns a copy of this localdatetime with the second-of-minute altered.
java.time.LocalDateTime.withYear(int),returns a copy of this localdatetime with the year altered.
java.time.LocalTime.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have the same time as this object.
java.time.LocalTime.atDate(java.time.LocalDate),combines this time with a date to create a localdatetime.
java.time.LocalTime.atOffset(java.time.ZoneOffset),combines this time with an offset to create an offsettime.
java.time.LocalTime.compareTo(java.time.LocalTime),compares this time to another time.
java.time.LocalTime.equals(java.lang.Object),checks if this time is equal to another time.
java.time.LocalTime.format(java.time.format.DateTimeFormatter),formats this time using the specified formatter.
java.time.LocalTime.from(java.time.temporal.TemporalAccessor),obtains an instance of localtime from a temporal object.
java.time.LocalTime.get(java.time.temporal.TemporalField),gets the value of the specified field from this time as an int.
java.time.LocalTime.getHour(),gets the hour-of-day field.
java.time.LocalTime.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this time as a long.
java.time.LocalTime.getMinute(),gets the minute-of-hour field.
java.time.LocalTime.getNano(),gets the nano-of-second field.
java.time.LocalTime.getSecond(),gets the second-of-minute field.
java.time.LocalTime.hashCode(),a hash code for this time.
java.time.LocalTime.isAfter(java.time.LocalTime),checks if this time is after the specified time.
java.time.LocalTime.isBefore(java.time.LocalTime),checks if this time is before the specified time.
java.time.LocalTime.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.LocalTime.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.LocalTime.minus(java.time.temporal.TemporalAmount),returns a copy of this time with the specified amount subtracted.
"java.time.LocalTime.minus(long,java.time.temporal.TemporalUnit)",returns a copy of this time with the specified amount subtracted.
java.time.LocalTime.minusHours(long),returns a copy of this localtime with the specified number of hours subtracted.
java.time.LocalTime.minusMinutes(long),returns a copy of this localtime with the specified number of minutes subtracted.
java.time.LocalTime.minusNanos(long),returns a copy of this localtime with the specified number of nanoseconds subtracted.
java.time.LocalTime.minusSeconds(long),returns a copy of this localtime with the specified number of seconds subtracted.
java.time.LocalTime.now(),obtains the current time from the system clock in the default time-zone.
java.time.LocalTime.now(java.time.ZoneId),obtains the current time from the system clock in the specified time-zone.
java.time.LocalTime.now(java.time.Clock),obtains the current time from the specified clock.
"java.time.LocalTime.of(int,int)",obtains an instance of localtime from an hour and minute.
"java.time.LocalTime.of(int,int,int)","obtains an instance of localtime from an hour, minute and second."
"java.time.LocalTime.of(int,int,int,int)","obtains an instance of localtime from an hour, minute, second and nanosecond."
java.time.LocalTime.ofNanoOfDay(long),obtains an instance of localtime from a nanos-of-day value.
java.time.LocalTime.ofSecondOfDay(long),obtains an instance of localtime from a second-of-day value.
java.time.LocalTime.parse(java.lang.CharSequence),obtains an instance of localtime from a text string such as 10:15.
"java.time.LocalTime.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",obtains an instance of localtime from a text string using a specific formatter.
java.time.LocalTime.plus(java.time.temporal.TemporalAmount),returns a copy of this time with the specified amount added.
"java.time.LocalTime.plus(long,java.time.temporal.TemporalUnit)",returns a copy of this time with the specified amount added.
java.time.LocalTime.plusHours(long),returns a copy of this localtime with the specified number of hours added.
java.time.LocalTime.plusMinutes(long),returns a copy of this localtime with the specified number of minutes added.
java.time.LocalTime.plusNanos(long),returns a copy of this localtime with the specified number of nanoseconds added.
java.time.LocalTime.plusSeconds(long),returns a copy of this localtime with the specified number of seconds added.
java.time.LocalTime.query(java.time.temporal.TemporalQuery<R>),queries this time using the specified query.
java.time.LocalTime.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.LocalTime.toNanoOfDay(),"extracts the time as nanos of day, from 0 to 24 * 60 * 60 * 1,000,000,000 - 1."
java.time.LocalTime.toSecondOfDay(),"extracts the time as seconds of day, from 0 to 24 * 60 * 60 - 1."
java.time.LocalTime.toString(),"outputs this time as a string, such as 10:15."
java.time.LocalTime.truncatedTo(java.time.temporal.TemporalUnit),returns a copy of this localtime with the time truncated.
"java.time.LocalTime.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",calculates the amount of time until another time in terms of the specified unit.
java.time.LocalTime.with(java.time.temporal.TemporalAdjuster),returns an adjusted copy of this time.
"java.time.LocalTime.with(java.time.temporal.TemporalField,long)",returns a copy of this time with the specified field set to a new value.
java.time.LocalTime.withHour(int),returns a copy of this localtime with the hour-of-day altered.
java.time.LocalTime.withMinute(int),returns a copy of this localtime with the minute-of-hour altered.
java.time.LocalTime.withNano(int),returns a copy of this localtime with the nano-of-second altered.
java.time.LocalTime.withSecond(int),returns a copy of this localtime with the second-of-minute altered.
java.time.MonthDay.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have this month-day.
java.time.MonthDay.atYear(int),combines this month-day with a year to create a localdate.
java.time.MonthDay.compareTo(java.time.MonthDay),compares this month-day to another month-day.
java.time.MonthDay.equals(java.lang.Object),checks if this month-day is equal to another month-day.
java.time.MonthDay.format(java.time.format.DateTimeFormatter),formats this month-day using the specified formatter.
java.time.MonthDay.from(java.time.temporal.TemporalAccessor),obtains an instance of monthday from a temporal object.
java.time.MonthDay.get(java.time.temporal.TemporalField),gets the value of the specified field from this month-day as an int.
java.time.MonthDay.getDayOfMonth(),gets the day-of-month field.
java.time.MonthDay.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this month-day as a long.
java.time.MonthDay.getMonth(),gets the month-of-year field using the month enum.
java.time.MonthDay.getMonthValue(),gets the month-of-year field from 1 to 12.
java.time.MonthDay.hashCode(),a hash code for this month-day.
java.time.MonthDay.isAfter(java.time.MonthDay),checks if this month-day is after the specified month-day.
java.time.MonthDay.isBefore(java.time.MonthDay),checks if this month-day is before the specified month-day.
java.time.MonthDay.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.MonthDay.isValidYear(int),checks if the year is valid for this month-day.
java.time.MonthDay.now(),obtains the current month-day from the system clock in the default time-zone.
java.time.MonthDay.now(java.time.ZoneId),obtains the current month-day from the system clock in the specified time-zone.
java.time.MonthDay.now(java.time.Clock),obtains the current month-day from the specified clock.
"java.time.MonthDay.of(java.time.Month,int)",obtains an instance of monthday.
"java.time.MonthDay.of(int,int)",obtains an instance of monthday.
java.time.MonthDay.parse(java.lang.CharSequence),obtains an instance of monthday from a text string such as --12-03.
"java.time.MonthDay.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",obtains an instance of monthday from a text string using a specific formatter.
java.time.MonthDay.query(java.time.temporal.TemporalQuery<R>),queries this month-day using the specified query.
java.time.MonthDay.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.MonthDay.toString(),"outputs this month-day as a string, such as --12-03."
java.time.MonthDay.with(java.time.Month),returns a copy of this monthday with the month-of-year altered.
java.time.MonthDay.withDayOfMonth(int),returns a copy of this monthday with the day-of-month altered.
java.time.MonthDay.withMonth(int),returns a copy of this monthday with the month-of-year altered.
java.time.OffsetDateTime.adjustInto(java.time.temporal.Temporal),"adjusts the specified temporal object to have the same offset, date and time as this object."
java.time.OffsetDateTime.atZoneSameInstant(java.time.ZoneId),combines this date-time with a time-zone to create a zoneddatetime ensuring that the result has the same instant.
java.time.OffsetDateTime.atZoneSimilarLocal(java.time.ZoneId),combines this date-time with a time-zone to create a zoneddatetime trying to keep the same local date and time.
java.time.OffsetDateTime.compareTo(java.time.OffsetDateTime),compares this date-time to another date-time.
java.time.OffsetDateTime.equals(java.lang.Object),checks if this date-time is equal to another date-time.
java.time.OffsetDateTime.format(java.time.format.DateTimeFormatter),formats this date-time using the specified formatter.
java.time.OffsetDateTime.from(java.time.temporal.TemporalAccessor),obtains an instance of offsetdatetime from a temporal object.
java.time.OffsetDateTime.get(java.time.temporal.TemporalField),gets the value of the specified field from this date-time as an int.
java.time.OffsetDateTime.getDayOfMonth(),gets the day-of-month field.
java.time.OffsetDateTime.getDayOfWeek(),"gets the day-of-week field, which is an enum dayofweek."
java.time.OffsetDateTime.getDayOfYear(),gets the day-of-year field.
java.time.OffsetDateTime.getHour(),gets the hour-of-day field.
java.time.OffsetDateTime.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this date-time as a long.
java.time.OffsetDateTime.getMinute(),gets the minute-of-hour field.
java.time.OffsetDateTime.getMonth(),gets the month-of-year field using the month enum.
java.time.OffsetDateTime.getMonthValue(),gets the month-of-year field from 1 to 12.
java.time.OffsetDateTime.getNano(),gets the nano-of-second field.
java.time.OffsetDateTime.getOffset(),"gets the zone offset, such as '+01:00'."
java.time.OffsetDateTime.getSecond(),gets the second-of-minute field.
java.time.OffsetDateTime.getYear(),gets the year field.
java.time.OffsetDateTime.hashCode(),a hash code for this date-time.
java.time.OffsetDateTime.isAfter(java.time.OffsetDateTime),checks if the instant of this date-time is after that of the specified date-time.
java.time.OffsetDateTime.isBefore(java.time.OffsetDateTime),checks if the instant of this date-time is before that of the specified date-time.
java.time.OffsetDateTime.isEqual(java.time.OffsetDateTime),checks if the instant of this date-time is equal to that of the specified date-time.
java.time.OffsetDateTime.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.OffsetDateTime.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.OffsetDateTime.minus(java.time.temporal.TemporalAmount),returns a copy of this date-time with the specified amount subtracted.
"java.time.OffsetDateTime.minus(long,java.time.temporal.TemporalUnit)",returns a copy of this date-time with the specified amount subtracted.
java.time.OffsetDateTime.minusDays(long),returns a copy of this offsetdatetime with the specified number of days subtracted.
java.time.OffsetDateTime.minusHours(long),returns a copy of this offsetdatetime with the specified number of hours subtracted.
java.time.OffsetDateTime.minusMinutes(long),returns a copy of this offsetdatetime with the specified number of minutes subtracted.
java.time.OffsetDateTime.minusMonths(long),returns a copy of this offsetdatetime with the specified number of months subtracted.
java.time.OffsetDateTime.minusNanos(long),returns a copy of this offsetdatetime with the specified number of nanoseconds subtracted.
java.time.OffsetDateTime.minusSeconds(long),returns a copy of this offsetdatetime with the specified number of seconds subtracted.
java.time.OffsetDateTime.minusWeeks(long),returns a copy of this offsetdatetime with the specified number of weeks subtracted.
java.time.OffsetDateTime.minusYears(long),returns a copy of this offsetdatetime with the specified number of years subtracted.
java.time.OffsetDateTime.now(),obtains the current date-time from the system clock in the default time-zone.
java.time.OffsetDateTime.now(java.time.ZoneId),obtains the current date-time from the system clock in the specified time-zone.
java.time.OffsetDateTime.now(java.time.Clock),obtains the current date-time from the specified clock.
"java.time.OffsetDateTime.of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneOffset)","obtains an instance of offsetdatetime from a date, time and offset."
"java.time.OffsetDateTime.of(java.time.LocalDateTime,java.time.ZoneOffset)",obtains an instance of offsetdatetime from a date-time and offset.
"java.time.OffsetDateTime.of(int,int,int,int,int,int,int,java.time.ZoneOffset)","obtains an instance of offsetdatetime from a year, month, day, hour, minute, second, nanosecond and offset."
"java.time.OffsetDateTime.ofInstant(java.time.Instant,java.time.ZoneId)",obtains an instance of offsetdatetime from an instant and zone id.
java.time.OffsetDateTime.parse(java.lang.CharSequence),obtains an instance of offsetdatetime from a text string such as 2007-12-03t10:15:30+01:00.
"java.time.OffsetDateTime.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",obtains an instance of offsetdatetime from a text string using a specific formatter.
java.time.OffsetDateTime.plus(java.time.temporal.TemporalAmount),returns a copy of this date-time with the specified amount added.
"java.time.OffsetDateTime.plus(long,java.time.temporal.TemporalUnit)",returns a copy of this date-time with the specified amount added.
java.time.OffsetDateTime.plusDays(long),returns a copy of this offsetdatetime with the specified number of days added.
java.time.OffsetDateTime.plusHours(long),returns a copy of this offsetdatetime with the specified number of hours added.
java.time.OffsetDateTime.plusMinutes(long),returns a copy of this offsetdatetime with the specified number of minutes added.
java.time.OffsetDateTime.plusMonths(long),returns a copy of this offsetdatetime with the specified number of months added.
java.time.OffsetDateTime.plusNanos(long),returns a copy of this offsetdatetime with the specified number of nanoseconds added.
java.time.OffsetDateTime.plusSeconds(long),returns a copy of this offsetdatetime with the specified number of seconds added.
java.time.OffsetDateTime.plusWeeks(long),returns a copy of this offsetdatetime with the specified number of weeks added.
java.time.OffsetDateTime.plusYears(long),returns a copy of this offsetdatetime with the specified number of years added.
java.time.OffsetDateTime.query(java.time.temporal.TemporalQuery<R>),queries this date-time using the specified query.
java.time.OffsetDateTime.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.OffsetDateTime.timeLineOrder(),gets a comparator that compares two offsetdatetime instances based solely on the instant.
java.time.OffsetDateTime.toEpochSecond(),converts this date-time to the number of seconds from the epoch of 1970-01-01t00:00:00z.
java.time.OffsetDateTime.toInstant(),converts this date-time to an instant.
java.time.OffsetDateTime.toLocalDate(),gets the localdate part of this date-time.
java.time.OffsetDateTime.toLocalDateTime(),gets the localdatetime part of this date-time.
java.time.OffsetDateTime.toLocalTime(),gets the localtime part of this date-time.
java.time.OffsetDateTime.toOffsetTime(),converts this date-time to an offsettime.
java.time.OffsetDateTime.toString(),"outputs this date-time as a string, such as 2007-12-03t10:15:30+01:00."
java.time.OffsetDateTime.toZonedDateTime(),converts this date-time to a zoneddatetime using the offset as the zone id.
java.time.OffsetDateTime.truncatedTo(java.time.temporal.TemporalUnit),returns a copy of this offsetdatetime with the time truncated.
"java.time.OffsetDateTime.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",calculates the amount of time until another date-time in terms of the specified unit.
java.time.OffsetDateTime.with(java.time.temporal.TemporalAdjuster),returns an adjusted copy of this date-time.
"java.time.OffsetDateTime.with(java.time.temporal.TemporalField,long)",returns a copy of this date-time with the specified field set to a new value.
java.time.OffsetDateTime.withDayOfMonth(int),returns a copy of this offsetdatetime with the day-of-month altered.
java.time.OffsetDateTime.withDayOfYear(int),returns a copy of this offsetdatetime with the day-of-year altered.
java.time.OffsetDateTime.withHour(int),returns a copy of this offsetdatetime with the hour-of-day altered.
java.time.OffsetDateTime.withMinute(int),returns a copy of this offsetdatetime with the minute-of-hour altered.
java.time.OffsetDateTime.withMonth(int),returns a copy of this offsetdatetime with the month-of-year altered.
java.time.OffsetDateTime.withNano(int),returns a copy of this offsetdatetime with the nano-of-second altered.
java.time.OffsetDateTime.withOffsetSameInstant(java.time.ZoneOffset),returns a copy of this offsetdatetime with the specified offset ensuring that the result is at the same instant.
java.time.OffsetDateTime.withOffsetSameLocal(java.time.ZoneOffset),returns a copy of this offsetdatetime with the specified offset ensuring that the result has the same local date-time.
java.time.OffsetDateTime.withSecond(int),returns a copy of this offsetdatetime with the second-of-minute altered.
java.time.OffsetDateTime.withYear(int),returns a copy of this offsetdatetime with the year altered.
java.time.OffsetTime.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have the same offset and time as this object.
java.time.OffsetTime.atDate(java.time.LocalDate),combines this time with a date to create an offsetdatetime.
java.time.OffsetTime.compareTo(java.time.OffsetTime),compares this offsettime to another time.
java.time.OffsetTime.equals(java.lang.Object),checks if this time is equal to another time.
java.time.OffsetTime.format(java.time.format.DateTimeFormatter),formats this time using the specified formatter.
java.time.OffsetTime.from(java.time.temporal.TemporalAccessor),obtains an instance of offsettime from a temporal object.
java.time.OffsetTime.get(java.time.temporal.TemporalField),gets the value of the specified field from this time as an int.
java.time.OffsetTime.getHour(),gets the hour-of-day field.
java.time.OffsetTime.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this time as a long.
java.time.OffsetTime.getMinute(),gets the minute-of-hour field.
java.time.OffsetTime.getNano(),gets the nano-of-second field.
java.time.OffsetTime.getOffset(),"gets the zone offset, such as '+01:00'."
java.time.OffsetTime.getSecond(),gets the second-of-minute field.
java.time.OffsetTime.hashCode(),a hash code for this time.
java.time.OffsetTime.isAfter(java.time.OffsetTime),checks if the instant of this offsettime is after that of the specified time applying both times to a common date.
java.time.OffsetTime.isBefore(java.time.OffsetTime),checks if the instant of this offsettime is before that of the specified time applying both times to a common date.
java.time.OffsetTime.isEqual(java.time.OffsetTime),checks if the instant of this offsettime is equal to that of the specified time applying both times to a common date.
java.time.OffsetTime.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.OffsetTime.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.OffsetTime.minus(java.time.temporal.TemporalAmount),returns a copy of this time with the specified amount subtracted.
"java.time.OffsetTime.minus(long,java.time.temporal.TemporalUnit)",returns a copy of this time with the specified amount subtracted.
java.time.OffsetTime.minusHours(long),returns a copy of this offsettime with the specified number of hours subtracted.
java.time.OffsetTime.minusMinutes(long),returns a copy of this offsettime with the specified number of minutes subtracted.
java.time.OffsetTime.minusNanos(long),returns a copy of this offsettime with the specified number of nanoseconds subtracted.
java.time.OffsetTime.minusSeconds(long),returns a copy of this offsettime with the specified number of seconds subtracted.
java.time.OffsetTime.now(),obtains the current time from the system clock in the default time-zone.
java.time.OffsetTime.now(java.time.ZoneId),obtains the current time from the system clock in the specified time-zone.
java.time.OffsetTime.now(java.time.Clock),obtains the current time from the specified clock.
"java.time.OffsetTime.of(java.time.LocalTime,java.time.ZoneOffset)",obtains an instance of offsettime from a local time and an offset.
"java.time.OffsetTime.of(int,int,int,int,java.time.ZoneOffset)","obtains an instance of offsettime from an hour, minute, second and nanosecond."
"java.time.OffsetTime.ofInstant(java.time.Instant,java.time.ZoneId)",obtains an instance of offsettime from an instant and zone id.
java.time.OffsetTime.parse(java.lang.CharSequence),obtains an instance of offsettime from a text string such as 10:15:30+01:00.
"java.time.OffsetTime.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",obtains an instance of offsettime from a text string using a specific formatter.
java.time.OffsetTime.plus(java.time.temporal.TemporalAmount),returns a copy of this time with the specified amount added.
"java.time.OffsetTime.plus(long,java.time.temporal.TemporalUnit)",returns a copy of this time with the specified amount added.
java.time.OffsetTime.plusHours(long),returns a copy of this offsettime with the specified number of hours added.
java.time.OffsetTime.plusMinutes(long),returns a copy of this offsettime with the specified number of minutes added.
java.time.OffsetTime.plusNanos(long),returns a copy of this offsettime with the specified number of nanoseconds added.
java.time.OffsetTime.plusSeconds(long),returns a copy of this offsettime with the specified number of seconds added.
java.time.OffsetTime.query(java.time.temporal.TemporalQuery<R>),queries this time using the specified query.
java.time.OffsetTime.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.OffsetTime.toLocalTime(),gets the localtime part of this date-time.
java.time.OffsetTime.toString(),"outputs this time as a string, such as 10:15:30+01:00."
java.time.OffsetTime.truncatedTo(java.time.temporal.TemporalUnit),returns a copy of this offsettime with the time truncated.
"java.time.OffsetTime.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",calculates the amount of time until another time in terms of the specified unit.
java.time.OffsetTime.with(java.time.temporal.TemporalAdjuster),returns an adjusted copy of this time.
"java.time.OffsetTime.with(java.time.temporal.TemporalField,long)",returns a copy of this time with the specified field set to a new value.
java.time.OffsetTime.withHour(int),returns a copy of this offsettime with the hour-of-day altered.
java.time.OffsetTime.withMinute(int),returns a copy of this offsettime with the minute-of-hour altered.
java.time.OffsetTime.withNano(int),returns a copy of this offsettime with the nano-of-second altered.
java.time.OffsetTime.withOffsetSameInstant(java.time.ZoneOffset),returns a copy of this offsettime with the specified offset ensuring that the result is at the same instant on an implied day.
java.time.OffsetTime.withOffsetSameLocal(java.time.ZoneOffset),returns a copy of this offsettime with the specified offset ensuring that the result has the same local time.
java.time.OffsetTime.withSecond(int),returns a copy of this offsettime with the second-of-minute altered.
java.time.Period.addTo(java.time.temporal.Temporal),adds this period to the specified temporal object.
"java.time.Period.between(java.time.LocalDate,java.time.LocalDate)","obtains a period consisting of the number of years, months, and days between two dates."
java.time.Period.equals(java.lang.Object),checks if this period is equal to another period.
java.time.Period.from(java.time.temporal.TemporalAmount),obtains an instance of period from a temporal amount.
java.time.Period.get(java.time.temporal.TemporalUnit),gets the value of the requested unit.
java.time.Period.getChronology(),"gets the chronology of this period, which is the iso calendar system."
java.time.Period.getDays(),gets the amount of days of this period.
java.time.Period.getMonths(),gets the amount of months of this period.
java.time.Period.getUnits(),gets the set of units supported by this period.
java.time.Period.getYears(),gets the amount of years of this period.
java.time.Period.hashCode(),a hash code for this period.
java.time.Period.isNegative(),checks if any of the three units of this period are negative.
java.time.Period.isZero(),checks if all three units of this period are zero.
java.time.Period.minus(java.time.temporal.TemporalAmount),returns a copy of this period with the specified period subtracted.
java.time.Period.minusDays(long),returns a copy of this period with the specified days subtracted.
java.time.Period.minusMonths(long),returns a copy of this period with the specified months subtracted.
java.time.Period.minusYears(long),returns a copy of this period with the specified years subtracted.
java.time.Period.multipliedBy(int),returns a new instance with each element in this period multiplied by the specified scalar.
java.time.Period.negated(),returns a new instance with each amount in this period negated.
java.time.Period.normalized(),returns a copy of this period with the years and months normalized.
"java.time.Period.of(int,int,int)","obtains a period representing a number of years, months and days."
java.time.Period.ofDays(int),obtains a period representing a number of days.
java.time.Period.ofMonths(int),obtains a period representing a number of months.
java.time.Period.ofWeeks(int),obtains a period representing a number of weeks.
java.time.Period.ofYears(int),obtains a period representing a number of years.
java.time.Period.parse(java.lang.CharSequence),obtains a period from a text string such as pnynmnd.
java.time.Period.plus(java.time.temporal.TemporalAmount),returns a copy of this period with the specified period added.
java.time.Period.plusDays(long),returns a copy of this period with the specified days added.
java.time.Period.plusMonths(long),returns a copy of this period with the specified months added.
java.time.Period.plusYears(long),returns a copy of this period with the specified years added.
java.time.Period.subtractFrom(java.time.temporal.Temporal),subtracts this period from the specified temporal object.
java.time.Period.toString(),"outputs this period as a string, such as p6y3m1d."
java.time.Period.toTotalMonths(),gets the total number of months in this period.
java.time.Period.withDays(int),returns a copy of this period with the specified amount of days.
java.time.Period.withMonths(int),returns a copy of this period with the specified amount of months.
java.time.Period.withYears(int),returns a copy of this period with the specified amount of years.
java.time.Year.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have this year.
java.time.Year.atDay(int),combines this year with a day-of-year to create a localdate.
java.time.Year.atMonth(java.time.Month),combines this year with a month to create a yearmonth.
java.time.Year.atMonth(int),combines this year with a month to create a yearmonth.
java.time.Year.atMonthDay(java.time.MonthDay),combines this year with a month-day to create a localdate.
java.time.Year.compareTo(java.time.Year),compares this year to another year.
java.time.Year.equals(java.lang.Object),checks if this year is equal to another year.
java.time.Year.format(java.time.format.DateTimeFormatter),formats this year using the specified formatter.
java.time.Year.from(java.time.temporal.TemporalAccessor),obtains an instance of year from a temporal object.
java.time.Year.get(java.time.temporal.TemporalField),gets the value of the specified field from this year as an int.
java.time.Year.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this year as a long.
java.time.Year.getValue(),gets the year value.
java.time.Year.hashCode(),a hash code for this year.
java.time.Year.isAfter(java.time.Year),checks if this year is after the specified year.
java.time.Year.isBefore(java.time.Year),checks if this year is before the specified year.
java.time.Year.isLeap(long),"checks if the year is a leap year, according to the iso proleptic calendar system rules."
java.time.Year.isLeap(),"checks if the year is a leap year, according to the iso proleptic calendar system rules."
java.time.Year.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.Year.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.Year.isValidMonthDay(java.time.MonthDay),checks if the month-day is valid for this year.
java.time.Year.length(),gets the length of this year in days.
java.time.Year.minus(java.time.temporal.TemporalAmount),returns a copy of this year with the specified amount subtracted.
"java.time.Year.minus(long,java.time.temporal.TemporalUnit)",returns a copy of this year with the specified amount subtracted.
java.time.Year.minusYears(long),returns a copy of this year with the specified number of years subtracted.
java.time.Year.now(),obtains the current year from the system clock in the default time-zone.
java.time.Year.now(java.time.ZoneId),obtains the current year from the system clock in the specified time-zone.
java.time.Year.now(java.time.Clock),obtains the current year from the specified clock.
java.time.Year.of(int),obtains an instance of year.
java.time.Year.parse(java.lang.CharSequence),obtains an instance of year from a text string such as 2007.
"java.time.Year.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",obtains an instance of year from a text string using a specific formatter.
java.time.Year.plus(java.time.temporal.TemporalAmount),returns a copy of this year with the specified amount added.
"java.time.Year.plus(long,java.time.temporal.TemporalUnit)",returns a copy of this year with the specified amount added.
java.time.Year.plusYears(long),returns a copy of this year with the specified number of years added.
java.time.Year.query(java.time.temporal.TemporalQuery<R>),queries this year using the specified query.
java.time.Year.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.Year.toString(),outputs this year as a string.
"java.time.Year.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",calculates the amount of time until another year in terms of the specified unit.
java.time.Year.with(java.time.temporal.TemporalAdjuster),returns an adjusted copy of this year.
"java.time.Year.with(java.time.temporal.TemporalField,long)",returns a copy of this year with the specified field set to a new value.
java.time.YearMonth.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have this year-month.
java.time.YearMonth.atDay(int),combines this year-month with a day-of-month to create a localdate.
java.time.YearMonth.atEndOfMonth(),returns a localdate at the end of the month.
java.time.YearMonth.compareTo(java.time.YearMonth),compares this year-month to another year-month.
java.time.YearMonth.equals(java.lang.Object),checks if this year-month is equal to another year-month.
java.time.YearMonth.format(java.time.format.DateTimeFormatter),formats this year-month using the specified formatter.
java.time.YearMonth.from(java.time.temporal.TemporalAccessor),obtains an instance of yearmonth from a temporal object.
java.time.YearMonth.get(java.time.temporal.TemporalField),gets the value of the specified field from this year-month as an int.
java.time.YearMonth.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this year-month as a long.
java.time.YearMonth.getMonth(),gets the month-of-year field using the month enum.
java.time.YearMonth.getMonthValue(),gets the month-of-year field from 1 to 12.
java.time.YearMonth.getYear(),gets the year field.
java.time.YearMonth.hashCode(),a hash code for this year-month.
java.time.YearMonth.isAfter(java.time.YearMonth),checks if this year-month is after the specified year-month.
java.time.YearMonth.isBefore(java.time.YearMonth),checks if this year-month is before the specified year-month.
java.time.YearMonth.isLeapYear(),"checks if the year is a leap year, according to the iso proleptic calendar system rules."
java.time.YearMonth.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.YearMonth.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.YearMonth.isValidDay(int),checks if the day-of-month is valid for this year-month.
java.time.YearMonth.lengthOfMonth(),"returns the length of the month, taking account of the year."
java.time.YearMonth.lengthOfYear(),returns the length of the year.
java.time.YearMonth.minus(java.time.temporal.TemporalAmount),returns a copy of this year-month with the specified amount subtracted.
"java.time.YearMonth.minus(long,java.time.temporal.TemporalUnit)",returns a copy of this year-month with the specified amount subtracted.
java.time.YearMonth.minusMonths(long),returns a copy of this yearmonth with the specified number of months subtracted.
java.time.YearMonth.minusYears(long),returns a copy of this yearmonth with the specified number of years subtracted.
java.time.YearMonth.now(),obtains the current year-month from the system clock in the default time-zone.
java.time.YearMonth.now(java.time.ZoneId),obtains the current year-month from the system clock in the specified time-zone.
java.time.YearMonth.now(java.time.Clock),obtains the current year-month from the specified clock.
"java.time.YearMonth.of(int,java.time.Month)",obtains an instance of yearmonth from a year and month.
"java.time.YearMonth.of(int,int)",obtains an instance of yearmonth from a year and month.
java.time.YearMonth.parse(java.lang.CharSequence),obtains an instance of yearmonth from a text string such as 2007-12.
"java.time.YearMonth.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",obtains an instance of yearmonth from a text string using a specific formatter.
java.time.YearMonth.plus(java.time.temporal.TemporalAmount),returns a copy of this year-month with the specified amount added.
"java.time.YearMonth.plus(long,java.time.temporal.TemporalUnit)",returns a copy of this year-month with the specified amount added.
java.time.YearMonth.plusMonths(long),returns a copy of this yearmonth with the specified number of months added.
java.time.YearMonth.plusYears(long),returns a copy of this yearmonth with the specified number of years added.
java.time.YearMonth.query(java.time.temporal.TemporalQuery<R>),queries this year-month using the specified query.
java.time.YearMonth.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.YearMonth.toString(),"outputs this year-month as a string, such as 2007-12."
"java.time.YearMonth.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",calculates the amount of time until another year-month in terms of the specified unit.
java.time.YearMonth.with(java.time.temporal.TemporalAdjuster),returns an adjusted copy of this year-month.
"java.time.YearMonth.with(java.time.temporal.TemporalField,long)",returns a copy of this year-month with the specified field set to a new value.
java.time.YearMonth.withMonth(int),returns a copy of this yearmonth with the month-of-year altered.
java.time.YearMonth.withYear(int),returns a copy of this yearmonth with the year altered.
java.time.ZonedDateTime.equals(java.lang.Object),checks if this date-time is equal to another date-time.
java.time.ZonedDateTime.format(java.time.format.DateTimeFormatter),formats this date-time using the specified formatter.
java.time.ZonedDateTime.from(java.time.temporal.TemporalAccessor),obtains an instance of zoneddatetime from a temporal object.
java.time.ZonedDateTime.get(java.time.temporal.TemporalField),gets the value of the specified field from this date-time as an int.
java.time.ZonedDateTime.getDayOfMonth(),gets the day-of-month field.
java.time.ZonedDateTime.getDayOfWeek(),"gets the day-of-week field, which is an enum dayofweek."
java.time.ZonedDateTime.getDayOfYear(),gets the day-of-year field.
java.time.ZonedDateTime.getHour(),gets the hour-of-day field.
java.time.ZonedDateTime.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this date-time as a long.
java.time.ZonedDateTime.getMinute(),gets the minute-of-hour field.
java.time.ZonedDateTime.getMonth(),gets the month-of-year field using the month enum.
java.time.ZonedDateTime.getMonthValue(),gets the month-of-year field from 1 to 12.
java.time.ZonedDateTime.getNano(),gets the nano-of-second field.
java.time.ZonedDateTime.getOffset(),"gets the zone offset, such as '+01:00'."
java.time.ZonedDateTime.getSecond(),gets the second-of-minute field.
java.time.ZonedDateTime.getYear(),gets the year field.
java.time.ZonedDateTime.getZone(),"gets the time-zone, such as 'europe/paris'."
java.time.ZonedDateTime.hashCode(),a hash code for this date-time.
java.time.ZonedDateTime.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.ZonedDateTime.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.ZonedDateTime.minus(java.time.temporal.TemporalAmount),returns a copy of this date-time with the specified amount subtracted.
"java.time.ZonedDateTime.minus(long,java.time.temporal.TemporalUnit)",returns a copy of this date-time with the specified amount subtracted.
java.time.ZonedDateTime.minusDays(long),returns a copy of this zoneddatetime with the specified number of days subtracted.
java.time.ZonedDateTime.minusHours(long),returns a copy of this zoneddatetime with the specified number of hours subtracted.
java.time.ZonedDateTime.minusMinutes(long),returns a copy of this zoneddatetime with the specified number of minutes subtracted.
java.time.ZonedDateTime.minusMonths(long),returns a copy of this zoneddatetime with the specified number of months subtracted.
java.time.ZonedDateTime.minusNanos(long),returns a copy of this zoneddatetime with the specified number of nanoseconds subtracted.
java.time.ZonedDateTime.minusSeconds(long),returns a copy of this zoneddatetime with the specified number of seconds subtracted.
java.time.ZonedDateTime.minusWeeks(long),returns a copy of this zoneddatetime with the specified number of weeks subtracted.
java.time.ZonedDateTime.minusYears(long),returns a copy of this zoneddatetime with the specified number of years subtracted.
java.time.ZonedDateTime.now(),obtains the current date-time from the system clock in the default time-zone.
java.time.ZonedDateTime.now(java.time.ZoneId),obtains the current date-time from the system clock in the specified time-zone.
java.time.ZonedDateTime.now(java.time.Clock),obtains the current date-time from the specified clock.
"java.time.ZonedDateTime.of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)",obtains an instance of zoneddatetime from a local date and time.
"java.time.ZonedDateTime.of(java.time.LocalDateTime,java.time.ZoneId)",obtains an instance of zoneddatetime from a local date-time.
"java.time.ZonedDateTime.of(int,int,int,int,int,int,int,java.time.ZoneId)","obtains an instance of zoneddatetime from a year, month, day, hour, minute, second, nanosecond and time-zone."
"java.time.ZonedDateTime.ofInstant(java.time.Instant,java.time.ZoneId)",obtains an instance of zoneddatetime from an instant.
"java.time.ZonedDateTime.ofInstant(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)",obtains an instance of zoneddatetime from the instant formed by combining the local date-time and offset.
"java.time.ZonedDateTime.ofLocal(java.time.LocalDateTime,java.time.ZoneId,java.time.ZoneOffset)",obtains an instance of zoneddatetime from a local date-time using the preferred offset if possible.
"java.time.ZonedDateTime.ofStrict(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)","obtains an instance of zoneddatetime strictly validating the combination of local date-time, offset and zone id."
java.time.ZonedDateTime.parse(java.lang.CharSequence),obtains an instance of zoneddatetime from a text string such as 2007-12-03t10:15:30+01:00[europe/paris].
"java.time.ZonedDateTime.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",obtains an instance of zoneddatetime from a text string using a specific formatter.
java.time.ZonedDateTime.plus(java.time.temporal.TemporalAmount),returns a copy of this date-time with the specified amount added.
"java.time.ZonedDateTime.plus(long,java.time.temporal.TemporalUnit)",returns a copy of this date-time with the specified amount added.
java.time.ZonedDateTime.plusDays(long),returns a copy of this zoneddatetime with the specified number of days added.
java.time.ZonedDateTime.plusHours(long),returns a copy of this zoneddatetime with the specified number of hours added.
java.time.ZonedDateTime.plusMinutes(long),returns a copy of this zoneddatetime with the specified number of minutes added.
java.time.ZonedDateTime.plusMonths(long),returns a copy of this zoneddatetime with the specified number of months added.
java.time.ZonedDateTime.plusNanos(long),returns a copy of this zoneddatetime with the specified number of nanoseconds added.
java.time.ZonedDateTime.plusSeconds(long),returns a copy of this zoneddatetime with the specified number of seconds added.
java.time.ZonedDateTime.plusWeeks(long),returns a copy of this zoneddatetime with the specified number of weeks added.
java.time.ZonedDateTime.plusYears(long),returns a copy of this zoneddatetime with the specified number of years added.
java.time.ZonedDateTime.query(java.time.temporal.TemporalQuery<R>),queries this date-time using the specified query.
java.time.ZonedDateTime.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.ZonedDateTime.toLocalDate(),gets the localdate part of this date-time.
java.time.ZonedDateTime.toLocalDateTime(),gets the localdatetime part of this date-time.
java.time.ZonedDateTime.toLocalTime(),gets the localtime part of this date-time.
java.time.ZonedDateTime.toOffsetDateTime(),converts this date-time to an offsetdatetime.
java.time.ZonedDateTime.toString(),"outputs this date-time as a string, such as 2007-12-03t10:15:30+01:00[europe/paris]."
java.time.ZonedDateTime.truncatedTo(java.time.temporal.TemporalUnit),returns a copy of this zoneddatetime with the time truncated.
"java.time.ZonedDateTime.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",calculates the amount of time until another date-time in terms of the specified unit.
java.time.ZonedDateTime.with(java.time.temporal.TemporalAdjuster),returns an adjusted copy of this date-time.
"java.time.ZonedDateTime.with(java.time.temporal.TemporalField,long)",returns a copy of this date-time with the specified field set to a new value.
java.time.ZonedDateTime.withDayOfMonth(int),returns a copy of this zoneddatetime with the day-of-month altered.
java.time.ZonedDateTime.withDayOfYear(int),returns a copy of this zoneddatetime with the day-of-year altered.
java.time.ZonedDateTime.withEarlierOffsetAtOverlap(),returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap.
java.time.ZonedDateTime.withFixedOffsetZone(),returns a copy of this date-time with the zone id set to the offset.
java.time.ZonedDateTime.withHour(int),returns a copy of this zoneddatetime with the hour-of-day altered.
java.time.ZonedDateTime.withLaterOffsetAtOverlap(),returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap.
java.time.ZonedDateTime.withMinute(int),returns a copy of this zoneddatetime with the minute-of-hour altered.
java.time.ZonedDateTime.withMonth(int),returns a copy of this zoneddatetime with the month-of-year altered.
java.time.ZonedDateTime.withNano(int),returns a copy of this zoneddatetime with the nano-of-second altered.
java.time.ZonedDateTime.withSecond(int),returns a copy of this zoneddatetime with the second-of-minute altered.
java.time.ZonedDateTime.withYear(int),returns a copy of this zoneddatetime with the year altered.
java.time.ZonedDateTime.withZoneSameInstant(java.time.ZoneId),"returns a copy of this date-time with a different time-zone, retaining the instant."
java.time.ZonedDateTime.withZoneSameLocal(java.time.ZoneId),"returns a copy of this date-time with a different time-zone, retaining the local date-time if possible."
java.time.ZoneId.equals(java.lang.Object),checks if this time-zone id is equal to another time-zone id.
java.time.ZoneId.from(java.time.temporal.TemporalAccessor),obtains an instance of zoneid from a temporal object.
java.time.ZoneId.getAvailableZoneIds(),gets the set of available zone ids.
"java.time.ZoneId.getDisplayName(java.time.format.TextStyle,java.util.Locale)","gets the textual representation of the zone, such as 'british time' or '+02:00'."
java.time.ZoneId.getId(),gets the unique time-zone id.
java.time.ZoneId.getRules(),gets the time-zone rules for this id allowing calculations to be performed.
java.time.ZoneId.hashCode(),a hash code for this time-zone id.
java.time.ZoneId.normalized(),"normalizes the time-zone id, returning a zoneoffset where possible."
"java.time.ZoneId.of(java.lang.String,,java.lang.String>)",obtains an instance of zoneid using its id using a map of aliases to supplement the standard zone ids.
java.time.ZoneId.of(java.lang.String),obtains an instance of zoneid from an id ensuring that the id is valid and available for use.
"java.time.ZoneId.ofOffset(java.lang.String,java.time.ZoneOffset)",obtains an instance of zoneid wrapping an offset.
java.time.ZoneId.systemDefault(),gets the system default time-zone.
java.time.ZoneId.toString(),"outputs this zone as a string, using the id."
java.time.ZoneOffset.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have the same offset as this object.
java.time.ZoneOffset.compareTo(java.time.ZoneOffset),compares this offset to another offset in descending order.
java.time.ZoneOffset.equals(java.lang.Object),checks if this offset is equal to another offset.
java.time.ZoneOffset.from(java.time.temporal.TemporalAccessor),obtains an instance of zoneoffset from a temporal object.
java.time.ZoneOffset.get(java.time.temporal.TemporalField),gets the value of the specified field from this offset as an int.
java.time.ZoneOffset.getId(),gets the normalized zone offset id.
java.time.ZoneOffset.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this offset as a long.
java.time.ZoneOffset.getRules(),gets the associated time-zone rules.
java.time.ZoneOffset.getTotalSeconds(),gets the total zone offset in seconds.
java.time.ZoneOffset.hashCode(),a hash code for this offset.
java.time.ZoneOffset.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.ZoneOffset.of(java.lang.String),obtains an instance of zoneoffset using the id.
java.time.ZoneOffset.ofHours(int),obtains an instance of zoneoffset using an offset in hours.
"java.time.ZoneOffset.ofHoursMinutes(int,int)",obtains an instance of zoneoffset using an offset in hours and minutes.
"java.time.ZoneOffset.ofHoursMinutesSeconds(int,int,int)","obtains an instance of zoneoffset using an offset in hours, minutes and seconds."
java.time.ZoneOffset.ofTotalSeconds(int),"obtains an instance of zoneoffset specifying the total offset in seconds
the offset must be in the range -18:00 to +18:00, which corresponds to -64800 to +64800."
java.time.ZoneOffset.query(java.time.temporal.TemporalQuery<R>),queries this offset using the specified query.
java.time.ZoneOffset.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.ZoneOffset.toString(),"outputs this offset as a string, using the normalized id."
java.time.DayOfWeek.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have this day-of-week.
java.time.DayOfWeek.from(java.time.temporal.TemporalAccessor),obtains an instance of dayofweek from a temporal object.
java.time.DayOfWeek.get(java.time.temporal.TemporalField),gets the value of the specified field from this day-of-week as an int.
"java.time.DayOfWeek.getDisplayName(java.time.format.TextStyle,java.util.Locale)","gets the textual representation, such as 'mon' or 'friday'."
java.time.DayOfWeek.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this day-of-week as a long.
java.time.DayOfWeek.getValue(),gets the day-of-week int value.
java.time.DayOfWeek.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.DayOfWeek.minus(long),returns the day-of-week that is the specified number of days before this one.
java.time.DayOfWeek.of(int),obtains an instance of dayofweek from an int value.
java.time.DayOfWeek.plus(long),returns the day-of-week that is the specified number of days after this one.
java.time.DayOfWeek.query(java.time.temporal.TemporalQuery<R>),queries this day-of-week using the specified query.
java.time.DayOfWeek.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.DayOfWeek.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.DayOfWeek.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.time.Month.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have this month-of-year.
java.time.Month.firstDayOfYear(boolean),gets the day-of-year corresponding to the first day of this month.
java.time.Month.firstMonthOfQuarter(),gets the month corresponding to the first month of this quarter.
java.time.Month.from(java.time.temporal.TemporalAccessor),obtains an instance of month from a temporal object.
java.time.Month.get(java.time.temporal.TemporalField),gets the value of the specified field from this month-of-year as an int.
"java.time.Month.getDisplayName(java.time.format.TextStyle,java.util.Locale)","gets the textual representation, such as 'jan' or 'december'."
java.time.Month.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this month-of-year as a long.
java.time.Month.getValue(),gets the month-of-year int value.
java.time.Month.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.Month.length(boolean),gets the length of this month in days.
java.time.Month.maxLength(),gets the maximum length of this month in days.
java.time.Month.minLength(),gets the minimum length of this month in days.
java.time.Month.minus(long),returns the month-of-year that is the specified number of months before this one.
java.time.Month.of(int),obtains an instance of month from an int value.
java.time.Month.plus(long),returns the month-of-year that is the specified number of quarters after this one.
java.time.Month.query(java.time.temporal.TemporalQuery<R>),queries this month-of-year using the specified query.
java.time.Month.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.Month.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.Month.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.time.chrono.ChronoLocalDate.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have the same date as this object.
java.time.chrono.ChronoLocalDate.atTime(java.time.LocalTime),combines this date with a time to create a chronolocaldatetime.
java.time.chrono.ChronoLocalDate.compareTo(java.time.chrono.ChronoLocalDate),"compares this date to another date, including the chronology."
java.time.chrono.ChronoLocalDate.equals(java.lang.Object),"checks if this date is equal to another date, including the chronology."
java.time.chrono.ChronoLocalDate.format(java.time.format.DateTimeFormatter),formats this date using the specified formatter.
java.time.chrono.ChronoLocalDate.from(java.time.temporal.TemporalAccessor),obtains an instance of chronolocaldate from a temporal object.
java.time.chrono.ChronoLocalDate.getChronology(),gets the chronology of this date.
java.time.chrono.ChronoLocalDate.getEra(),"gets the era, as defined by the chronology."
java.time.chrono.ChronoLocalDate.hashCode(),a hash code for this date.
java.time.chrono.ChronoLocalDate.isAfter(java.time.chrono.ChronoLocalDate),checks if this date is after the specified date ignoring the chronology.
java.time.chrono.ChronoLocalDate.isBefore(java.time.chrono.ChronoLocalDate),checks if this date is before the specified date ignoring the chronology.
java.time.chrono.ChronoLocalDate.isEqual(java.time.chrono.ChronoLocalDate),checks if this date is equal to the specified date ignoring the chronology.
java.time.chrono.ChronoLocalDate.isLeapYear(),"checks if the year is a leap year, as defined by the calendar system."
java.time.chrono.ChronoLocalDate.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.chrono.ChronoLocalDate.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.chrono.ChronoLocalDate.lengthOfMonth(),"returns the length of the month represented by this date, as defined by the calendar system."
java.time.chrono.ChronoLocalDate.lengthOfYear(),"returns the length of the year represented by this date, as defined by the calendar system."
java.time.chrono.ChronoLocalDate.minus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount subtracted.
"java.time.chrono.ChronoLocalDate.minus(long,java.time.temporal.TemporalUnit)",returns an object of the same type as this object with the specified period subtracted.
java.time.chrono.ChronoLocalDate.plus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount added.
"java.time.chrono.ChronoLocalDate.plus(long,java.time.temporal.TemporalUnit)",returns an object of the same type as this object with the specified period added.
java.time.chrono.ChronoLocalDate.query(java.time.temporal.TemporalQuery<R>),queries this date using the specified query.
java.time.chrono.ChronoLocalDate.timeLineOrder(),gets a comparator that compares chronolocaldate in time-line order ignoring the chronology.
java.time.chrono.ChronoLocalDate.toEpochDay(),converts this date to the epoch day.
java.time.chrono.ChronoLocalDate.toString(),outputs this date as a string.
"java.time.chrono.ChronoLocalDate.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",calculates the amount of time until another date in terms of the specified unit.
java.time.chrono.ChronoLocalDate.until(java.time.chrono.ChronoLocalDate),calculates the period between this date and another date as a chronoperiod.
java.time.chrono.ChronoLocalDate.with(java.time.temporal.TemporalAdjuster),returns an adjusted object of the same type as this object with the adjustment made.
"java.time.chrono.ChronoLocalDate.with(java.time.temporal.TemporalField,long)",returns an object of the same type as this object with the specified field altered.
java.time.chrono.ChronoLocalDateTime.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have the same date and time as this object.
java.time.chrono.ChronoLocalDateTime.atZone(java.time.ZoneId),combines this time with a time-zone to create a chronozoneddatetime.
java.time.chrono.ChronoLocalDateTime.compareTo(java.time.chrono.ChronoLocalDateTime<?>),"compares this date-time to another date-time, including the chronology."
java.time.chrono.ChronoLocalDateTime.equals(java.lang.Object),"checks if this date-time is equal to another date-time, including the chronology."
java.time.chrono.ChronoLocalDateTime.format(java.time.format.DateTimeFormatter),formats this date-time using the specified formatter.
java.time.chrono.ChronoLocalDateTime.from(java.time.temporal.TemporalAccessor),obtains an instance of chronolocaldatetime from a temporal object.
java.time.chrono.ChronoLocalDateTime.getChronology(),gets the chronology of this date-time.
java.time.chrono.ChronoLocalDateTime.hashCode(),a hash code for this date-time.
java.time.chrono.ChronoLocalDateTime.isAfter(java.time.chrono.ChronoLocalDateTime<?>),checks if this date-time is after the specified date-time ignoring the chronology.
java.time.chrono.ChronoLocalDateTime.isBefore(java.time.chrono.ChronoLocalDateTime<?>),checks if this date-time is before the specified date-time ignoring the chronology.
java.time.chrono.ChronoLocalDateTime.isEqual(java.time.chrono.ChronoLocalDateTime<?>),checks if this date-time is equal to the specified date-time ignoring the chronology.
java.time.chrono.ChronoLocalDateTime.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.chrono.ChronoLocalDateTime.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.chrono.ChronoLocalDateTime.minus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount subtracted.
"java.time.chrono.ChronoLocalDateTime.minus(long,java.time.temporal.TemporalUnit)",returns an object of the same type as this object with the specified period subtracted.
java.time.chrono.ChronoLocalDateTime.plus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount added.
"java.time.chrono.ChronoLocalDateTime.plus(long,java.time.temporal.TemporalUnit)",returns an object of the same type as this object with the specified period added.
java.time.chrono.ChronoLocalDateTime.query(java.time.temporal.TemporalQuery<R>),queries this date-time using the specified query.
java.time.chrono.ChronoLocalDateTime.timeLineOrder(),gets a comparator that compares chronolocaldatetime in time-line order ignoring the chronology.
java.time.chrono.ChronoLocalDateTime.toEpochSecond(java.time.ZoneOffset),converts this date-time to the number of seconds from the epoch of 1970-01-01t00:00:00z.
java.time.chrono.ChronoLocalDateTime.toInstant(java.time.ZoneOffset),converts this date-time to an instant.
java.time.chrono.ChronoLocalDateTime.toLocalDate(),gets the local date part of this date-time.
java.time.chrono.ChronoLocalDateTime.toLocalTime(),gets the local time part of this date-time.
java.time.chrono.ChronoLocalDateTime.toString(),outputs this date-time as a string.
java.time.chrono.ChronoLocalDateTime.with(java.time.temporal.TemporalAdjuster),returns an adjusted object of the same type as this object with the adjustment made.
"java.time.chrono.ChronoLocalDateTime.with(java.time.temporal.TemporalField,long)",returns an object of the same type as this object with the specified field altered.
java.time.chrono.Chronology.compareTo(java.time.chrono.Chronology),compares this chronology to another chronology.
"java.time.chrono.Chronology.date(java.time.chrono.Era,int,int,int)","obtains a local date in this chronology from the era, year-of-era, month-of-year and day-of-month fields."
"java.time.chrono.Chronology.date(int,int,int)","obtains a local date in this chronology from the proleptic-year, month-of-year and day-of-month fields."
java.time.chrono.Chronology.date(java.time.temporal.TemporalAccessor),obtains a local date in this chronology from another temporal object.
java.time.chrono.Chronology.dateEpochDay(long),obtains a local date in this chronology from the epoch-day.
java.time.chrono.Chronology.dateNow(),obtains the current local date in this chronology from the system clock in the default time-zone.
java.time.chrono.Chronology.dateNow(java.time.ZoneId),obtains the current local date in this chronology from the system clock in the specified time-zone.
java.time.chrono.Chronology.dateNow(java.time.Clock),obtains the current local date in this chronology from the specified clock.
"java.time.chrono.Chronology.dateYearDay(java.time.chrono.Era,int,int)","obtains a local date in this chronology from the era, year-of-era and day-of-year fields."
"java.time.chrono.Chronology.dateYearDay(int,int)",obtains a local date in this chronology from the proleptic-year and day-of-year fields.
java.time.chrono.Chronology.equals(java.lang.Object),checks if this chronology is equal to another chronology.
java.time.chrono.Chronology.eraOf(int),creates the chronology era object from the numeric value.
java.time.chrono.Chronology.eras(),gets the list of eras for the chronology.
java.time.chrono.Chronology.from(java.time.temporal.TemporalAccessor),obtains an instance of chronology from a temporal object.
java.time.chrono.Chronology.getAvailableChronologies(),returns the available chronologies.
java.time.chrono.Chronology.getCalendarType(),gets the calendar type of the calendar system.
"java.time.chrono.Chronology.getDisplayName(java.time.format.TextStyle,java.util.Locale)",gets the textual representation of this chronology.
java.time.chrono.Chronology.getId(),gets the id of the chronology.
java.time.chrono.Chronology.hashCode(),a hash code for this chronology.
java.time.chrono.Chronology.isLeapYear(long),checks if the specified year is a leap year.
java.time.chrono.Chronology.localDateTime(java.time.temporal.TemporalAccessor),obtains a local date-time in this chronology from another temporal object.
java.time.chrono.Chronology.of(java.lang.String),obtains an instance of chronology from a chronology id or calendar system type.
java.time.chrono.Chronology.ofLocale(java.util.Locale),obtains an instance of chronology from a locale.
"java.time.chrono.Chronology.period(int,int,int)","obtains a period for this chronology based on years, months and days."
"java.time.chrono.Chronology.prolepticYear(java.time.chrono.Era,int)",calculates the proleptic-year given the era and year-of-era.
java.time.chrono.Chronology.range(java.time.temporal.ChronoField),gets the range of valid values for the specified field.
"java.time.chrono.Chronology.resolveDate(,java.lang.Long>,java.time.format.ResolverStyle)",resolves parsed chronofield values into a date during parsing.
java.time.chrono.Chronology.toString(),outputs this chronology as a string.
java.time.chrono.Chronology.zonedDateTime(java.time.temporal.TemporalAccessor),obtains a chronozoneddatetime in this chronology from another temporal object.
"java.time.chrono.Chronology.zonedDateTime(java.time.Instant,java.time.ZoneId)",obtains a chronozoneddatetime in this chronology from an instant.
java.time.chrono.ChronoPeriod.addTo(java.time.temporal.Temporal),adds this period to the specified temporal object.
"java.time.chrono.ChronoPeriod.between(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)",obtains a chronoperiod consisting of amount of time between two dates.
java.time.chrono.ChronoPeriod.equals(java.lang.Object),"checks if this period is equal to another period, including the chronology."
java.time.chrono.ChronoPeriod.get(java.time.temporal.TemporalUnit),gets the value of the requested unit.
java.time.chrono.ChronoPeriod.getChronology(),gets the chronology that defines the meaning of the supported units.
java.time.chrono.ChronoPeriod.getUnits(),gets the set of units supported by this period.
java.time.chrono.ChronoPeriod.hashCode(),a hash code for this period.
java.time.chrono.ChronoPeriod.isNegative(),checks if any of the supported units of this period are negative.
java.time.chrono.ChronoPeriod.isZero(),checks if all the supported units of this period are zero.
java.time.chrono.ChronoPeriod.minus(java.time.temporal.TemporalAmount),returns a copy of this period with the specified period subtracted.
java.time.chrono.ChronoPeriod.multipliedBy(int),returns a new instance with each amount in this period in this period multiplied by the specified scalar.
java.time.chrono.ChronoPeriod.negated(),returns a new instance with each amount in this period negated.
java.time.chrono.ChronoPeriod.normalized(),returns a copy of this period with the amounts of each unit normalized.
java.time.chrono.ChronoPeriod.plus(java.time.temporal.TemporalAmount),returns a copy of this period with the specified period added.
java.time.chrono.ChronoPeriod.subtractFrom(java.time.temporal.Temporal),subtracts this period from the specified temporal object.
java.time.chrono.ChronoPeriod.toString(),outputs this period as a string.
java.time.chrono.ChronoZonedDateTime.compareTo(java.time.chrono.ChronoZonedDateTime<?>),"compares this date-time to another date-time, including the chronology."
java.time.chrono.ChronoZonedDateTime.equals(java.lang.Object),checks if this date-time is equal to another date-time.
java.time.chrono.ChronoZonedDateTime.format(java.time.format.DateTimeFormatter),formats this date-time using the specified formatter.
java.time.chrono.ChronoZonedDateTime.from(java.time.temporal.TemporalAccessor),obtains an instance of chronozoneddatetime from a temporal object.
java.time.chrono.ChronoZonedDateTime.getChronology(),gets the chronology of this date-time.
java.time.chrono.ChronoZonedDateTime.getOffset(),"gets the zone offset, such as '+01:00'."
java.time.chrono.ChronoZonedDateTime.getZone(),"gets the zone id, such as 'europe/paris'."
java.time.chrono.ChronoZonedDateTime.hashCode(),a hash code for this date-time.
java.time.chrono.ChronoZonedDateTime.isAfter(java.time.chrono.ChronoZonedDateTime<?>),checks if the instant of this date-time is after that of the specified date-time.
java.time.chrono.ChronoZonedDateTime.isBefore(java.time.chrono.ChronoZonedDateTime<?>),checks if the instant of this date-time is before that of the specified date-time.
java.time.chrono.ChronoZonedDateTime.isEqual(java.time.chrono.ChronoZonedDateTime<?>),checks if the instant of this date-time is equal to that of the specified date-time.
java.time.chrono.ChronoZonedDateTime.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.chrono.ChronoZonedDateTime.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.chrono.ChronoZonedDateTime.minus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount subtracted.
"java.time.chrono.ChronoZonedDateTime.minus(long,java.time.temporal.TemporalUnit)",returns an object of the same type as this object with the specified period subtracted.
java.time.chrono.ChronoZonedDateTime.plus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount added.
"java.time.chrono.ChronoZonedDateTime.plus(long,java.time.temporal.TemporalUnit)",returns an object of the same type as this object with the specified period added.
java.time.chrono.ChronoZonedDateTime.query(java.time.temporal.TemporalQuery<R>),queries this date-time using the specified query.
java.time.chrono.ChronoZonedDateTime.timeLineOrder(),gets a comparator that compares chronozoneddatetime in time-line order ignoring the chronology.
java.time.chrono.ChronoZonedDateTime.toEpochSecond(),converts this date-time to the number of seconds from the epoch of 1970-01-01t00:00:00z.
java.time.chrono.ChronoZonedDateTime.toInstant(),converts this date-time to an instant.
java.time.chrono.ChronoZonedDateTime.toLocalDate(),gets the local date part of this date-time.
java.time.chrono.ChronoZonedDateTime.toLocalDateTime(),gets the local date-time part of this date-time.
java.time.chrono.ChronoZonedDateTime.toLocalTime(),gets the local time part of this date-time.
java.time.chrono.ChronoZonedDateTime.toString(),outputs this date-time as a string.
java.time.chrono.ChronoZonedDateTime.with(java.time.temporal.TemporalAdjuster),returns an adjusted object of the same type as this object with the adjustment made.
"java.time.chrono.ChronoZonedDateTime.with(java.time.temporal.TemporalField,long)",returns an object of the same type as this object with the specified field altered.
java.time.chrono.ChronoZonedDateTime.withEarlierOffsetAtOverlap(),returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap.
java.time.chrono.ChronoZonedDateTime.withLaterOffsetAtOverlap(),returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap.
java.time.chrono.ChronoZonedDateTime.withZoneSameInstant(java.time.ZoneId),"returns a copy of this date-time with a different time-zone, retaining the instant."
java.time.chrono.ChronoZonedDateTime.withZoneSameLocal(java.time.ZoneId),"returns a copy of this date-time with a different time-zone, retaining the local date-time if possible."
java.time.chrono.Era.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object to have the same era as this object.
java.time.chrono.Era.get(java.time.temporal.TemporalField),gets the value of the specified field from this era as an int.
"java.time.chrono.Era.getDisplayName(java.time.format.TextStyle,java.util.Locale)",gets the textual representation of this era.
java.time.chrono.Era.getLong(java.time.temporal.TemporalField),gets the value of the specified field from this era as a long.
java.time.chrono.Era.getValue(),gets the numeric value associated with the era as defined by the chronology.
java.time.chrono.Era.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.chrono.Era.query(java.time.temporal.TemporalQuery<R>),queries this era using the specified query.
java.time.chrono.Era.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.chrono.AbstractChronology.compareTo(java.time.chrono.Chronology),compares this chronology to another chronology.
java.time.chrono.AbstractChronology.equals(java.lang.Object),checks if this chronology is equal to another chronology.
java.time.chrono.AbstractChronology.hashCode(),a hash code for this chronology.
"java.time.chrono.AbstractChronology.resolveDate(,java.lang.Long>,java.time.format.ResolverStyle)",resolves parsed chronofield values into a date during parsing.
java.time.chrono.AbstractChronology.toString(),"outputs this chronology as a string, using the chronology id."
"java.time.chrono.HijrahChronology.date(java.time.chrono.Era,int,int,int)","obtains a local date in hijrah calendar system from the era, year-of-era, month-of-year and day-of-month fields."
"java.time.chrono.HijrahChronology.date(int,int,int)","obtains a local date in hijrah calendar system from the proleptic-year, month-of-year and day-of-month fields."
java.time.chrono.HijrahChronology.dateEpochDay(long),obtains a local date in the hijrah calendar system from the epoch-day.
"java.time.chrono.HijrahChronology.dateYearDay(java.time.chrono.Era,int,int)","obtains a local date in hijrah calendar system from the era, year-of-era and day-of-year fields."
"java.time.chrono.HijrahChronology.dateYearDay(int,int)",obtains a local date in hijrah calendar system from the proleptic-year and day-of-year fields.
java.time.chrono.HijrahChronology.getCalendarType(),gets the calendar type of the islamic calendar.
java.time.chrono.HijrahChronology.getId(),gets the id of the chronology.
java.time.chrono.HijrahDate.equals(java.lang.Object),"compares this date to another date, including the chronology."
java.time.chrono.HijrahDate.from(java.time.temporal.TemporalAccessor),obtains a hijrahdate of the islamic umm al-qura calendar from a temporal object.
java.time.chrono.HijrahDate.getChronology(),"gets the chronology of this date, which is the hijrah calendar system."
java.time.chrono.HijrahDate.getEra(),gets the era applicable at this date.
java.time.chrono.HijrahDate.hashCode(),a hash code for this date.
java.time.chrono.HijrahDate.isLeapYear(),"checks if the year is a leap year, according to the hijrah calendar system rules."
java.time.chrono.HijrahDate.lengthOfMonth(),returns the length of the month represented by this date.
java.time.chrono.HijrahDate.lengthOfYear(),returns the length of the year represented by this date.
java.time.chrono.HijrahDate.minus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount subtracted.
java.time.chrono.HijrahDate.now(),obtains the current hijrahdate of the islamic umm al-qura calendar in the default time-zone.
java.time.chrono.HijrahDate.now(java.time.ZoneId),obtains the current hijrahdate of the islamic umm al-qura calendar in the specified time-zone.
java.time.chrono.HijrahDate.now(java.time.Clock),obtains the current hijrahdate of the islamic umm al-qura calendar from the specified clock.
"java.time.chrono.HijrahDate.of(int,int,int)","obtains a hijrahdate of the islamic umm al-qura calendar from the proleptic-year, month-of-year and day-of-month fields."
java.time.chrono.HijrahDate.plus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount added.
java.time.chrono.HijrahDate.with(java.time.temporal.TemporalAdjuster),returns an adjusted object of the same type as this object with the adjustment made.
java.time.chrono.HijrahDate.withVariant(java.time.chrono.HijrahChronology),returns a hijrahdate with the chronology requested.
"java.time.chrono.IsoChronology.date(java.time.chrono.Era,int,int,int)","obtains an iso local date from the era, year-of-era, month-of-year and day-of-month fields."
"java.time.chrono.IsoChronology.date(int,int,int)","obtains an iso local date from the proleptic-year, month-of-year and day-of-month fields."
java.time.chrono.IsoChronology.date(java.time.temporal.TemporalAccessor),obtains an iso local date from another date-time object.
java.time.chrono.IsoChronology.dateEpochDay(long),obtains an iso local date from the epoch-day.
java.time.chrono.IsoChronology.dateNow(),obtains the current iso local date from the system clock in the default time-zone.
java.time.chrono.IsoChronology.dateNow(java.time.ZoneId),obtains the current iso local date from the system clock in the specified time-zone.
java.time.chrono.IsoChronology.dateNow(java.time.Clock),obtains the current iso local date from the specified clock.
"java.time.chrono.IsoChronology.dateYearDay(java.time.chrono.Era,int,int)","obtains an iso local date from the era, year-of-era and day-of-year fields."
"java.time.chrono.IsoChronology.dateYearDay(int,int)",obtains an iso local date from the proleptic-year and day-of-year fields.
java.time.chrono.IsoChronology.getCalendarType(),gets the calendar type of the underlying calendar system - 'iso8601'.
java.time.chrono.IsoChronology.getId(),gets the id of the chronology - 'iso'.
java.time.chrono.IsoChronology.isLeapYear(long),"checks if the year is a leap year, according to the iso proleptic calendar system rules."
java.time.chrono.IsoChronology.localDateTime(java.time.temporal.TemporalAccessor),obtains an iso local date-time from another date-time object.
"java.time.chrono.IsoChronology.period(int,int,int)","obtains a period for this chronology based on years, months and days."
"java.time.chrono.IsoChronology.resolveDate(,java.lang.Long>,java.time.format.ResolverStyle)",resolves parsed chronofield values into a date during parsing.
java.time.chrono.IsoChronology.zonedDateTime(java.time.temporal.TemporalAccessor),obtains an iso zoned date-time from another date-time object.
"java.time.chrono.IsoChronology.zonedDateTime(java.time.Instant,java.time.ZoneId)",obtains an iso zoned date-time in this chronology from an instant.
"java.time.chrono.JapaneseChronology.date(java.time.chrono.Era,int,int,int)","obtains a local date in japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields."
"java.time.chrono.JapaneseChronology.date(int,int,int)","obtains a local date in japanese calendar system from the proleptic-year, month-of-year and day-of-month fields."
java.time.chrono.JapaneseChronology.dateEpochDay(long),obtains a local date in the japanese calendar system from the epoch-day.
"java.time.chrono.JapaneseChronology.dateYearDay(java.time.chrono.Era,int,int)","obtains a local date in japanese calendar system from the era, year-of-era and day-of-year fields."
"java.time.chrono.JapaneseChronology.dateYearDay(int,int)",obtains a local date in japanese calendar system from the proleptic-year and day-of-year fields.
java.time.chrono.JapaneseChronology.eraOf(int),returns the calendar system era object from the given numeric value.
java.time.chrono.JapaneseChronology.getCalendarType(),gets the calendar type of the underlying calendar system - 'japanese'.
java.time.chrono.JapaneseChronology.getId(),gets the id of the chronology - 'japanese'.
java.time.chrono.JapaneseChronology.isLeapYear(long),checks if the specified year is a leap year.
java.time.chrono.JapaneseDate.equals(java.lang.Object),"compares this date to another date, including the chronology."
java.time.chrono.JapaneseDate.from(java.time.temporal.TemporalAccessor),obtains a japanesedate from a temporal object.
java.time.chrono.JapaneseDate.getChronology(),"gets the chronology of this date, which is the japanese calendar system."
java.time.chrono.JapaneseDate.getEra(),gets the era applicable at this date.
java.time.chrono.JapaneseDate.hashCode(),a hash code for this date.
java.time.chrono.JapaneseDate.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.chrono.JapaneseDate.lengthOfMonth(),returns the length of the month represented by this date.
java.time.chrono.JapaneseDate.minus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount subtracted.
java.time.chrono.JapaneseDate.now(),obtains the current japanesedate from the system clock in the default time-zone.
java.time.chrono.JapaneseDate.now(java.time.ZoneId),obtains the current japanesedate from the system clock in the specified time-zone.
java.time.chrono.JapaneseDate.now(java.time.Clock),obtains the current japanesedate from the specified clock.
"java.time.chrono.JapaneseDate.of(java.time.chrono.JapaneseEra,int,int,int)","obtains a japanesedate representing a date in the japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields."
"java.time.chrono.JapaneseDate.of(int,int,int)","obtains a japanesedate representing a date in the japanese calendar system from the proleptic-year, month-of-year and day-of-month fields."
java.time.chrono.JapaneseDate.plus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount added.
java.time.chrono.JapaneseDate.with(java.time.temporal.TemporalAdjuster),returns an adjusted object of the same type as this object with the adjustment made.
java.time.chrono.JapaneseEra.getValue(),gets the numeric era int value.
java.time.chrono.JapaneseEra.of(int),obtains an instance of japaneseera from an int value.
java.time.chrono.JapaneseEra.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.chrono.JapaneseEra.valueOf(java.lang.String),returns the japaneseera with the name.
java.time.chrono.JapaneseEra.values(),returns an array of japaneseeras.
"java.time.chrono.MinguoChronology.date(java.time.chrono.Era,int,int,int)","obtains a local date in minguo calendar system from the era, year-of-era, month-of-year and day-of-month fields."
"java.time.chrono.MinguoChronology.date(int,int,int)","obtains a local date in minguo calendar system from the proleptic-year, month-of-year and day-of-month fields."
java.time.chrono.MinguoChronology.dateEpochDay(long),obtains a local date in the minguo calendar system from the epoch-day.
"java.time.chrono.MinguoChronology.dateYearDay(java.time.chrono.Era,int,int)","obtains a local date in minguo calendar system from the era, year-of-era and day-of-year fields."
"java.time.chrono.MinguoChronology.dateYearDay(int,int)",obtains a local date in minguo calendar system from the proleptic-year and day-of-year fields.
java.time.chrono.MinguoChronology.getCalendarType(),gets the calendar type of the underlying calendar system - 'roc'.
java.time.chrono.MinguoChronology.getId(),gets the id of the chronology - 'minguo'.
java.time.chrono.MinguoChronology.isLeapYear(long),checks if the specified year is a leap year.
java.time.chrono.MinguoDate.equals(java.lang.Object),"compares this date to another date, including the chronology."
java.time.chrono.MinguoDate.from(java.time.temporal.TemporalAccessor),obtains a minguodate from a temporal object.
java.time.chrono.MinguoDate.getChronology(),"gets the chronology of this date, which is the minguo calendar system."
java.time.chrono.MinguoDate.getEra(),gets the era applicable at this date.
java.time.chrono.MinguoDate.hashCode(),a hash code for this date.
java.time.chrono.MinguoDate.lengthOfMonth(),returns the length of the month represented by this date.
java.time.chrono.MinguoDate.minus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount subtracted.
java.time.chrono.MinguoDate.now(),obtains the current minguodate from the system clock in the default time-zone.
java.time.chrono.MinguoDate.now(java.time.ZoneId),obtains the current minguodate from the system clock in the specified time-zone.
java.time.chrono.MinguoDate.now(java.time.Clock),obtains the current minguodate from the specified clock.
"java.time.chrono.MinguoDate.of(int,int,int)","obtains a minguodate representing a date in the minguo calendar system from the proleptic-year, month-of-year and day-of-month fields."
java.time.chrono.MinguoDate.plus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount added.
java.time.chrono.MinguoDate.with(java.time.temporal.TemporalAdjuster),returns an adjusted object of the same type as this object with the adjustment made.
"java.time.chrono.ThaiBuddhistChronology.date(java.time.chrono.Era,int,int,int)","obtains a local date in thai buddhist calendar system from the era, year-of-era, month-of-year and day-of-month fields."
"java.time.chrono.ThaiBuddhistChronology.date(int,int,int)","obtains a local date in thai buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields."
java.time.chrono.ThaiBuddhistChronology.dateEpochDay(long),obtains a local date in the thai buddhist calendar system from the epoch-day.
"java.time.chrono.ThaiBuddhistChronology.dateYearDay(java.time.chrono.Era,int,int)","obtains a local date in thai buddhist calendar system from the era, year-of-era and day-of-year fields."
"java.time.chrono.ThaiBuddhistChronology.dateYearDay(int,int)",obtains a local date in thai buddhist calendar system from the proleptic-year and day-of-year fields.
java.time.chrono.ThaiBuddhistChronology.getCalendarType(),gets the calendar type of the underlying calendar system - 'buddhist'.
java.time.chrono.ThaiBuddhistChronology.getId(),gets the id of the chronology - 'thaibuddhist'.
java.time.chrono.ThaiBuddhistChronology.isLeapYear(long),checks if the specified year is a leap year.
java.time.chrono.ThaiBuddhistDate.equals(java.lang.Object),"compares this date to another date, including the chronology."
java.time.chrono.ThaiBuddhistDate.from(java.time.temporal.TemporalAccessor),obtains a thaibuddhistdate from a temporal object.
java.time.chrono.ThaiBuddhistDate.getChronology(),"gets the chronology of this date, which is the thai buddhist calendar system."
java.time.chrono.ThaiBuddhistDate.getEra(),gets the era applicable at this date.
java.time.chrono.ThaiBuddhistDate.hashCode(),a hash code for this date.
java.time.chrono.ThaiBuddhistDate.lengthOfMonth(),returns the length of the month represented by this date.
java.time.chrono.ThaiBuddhistDate.minus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount subtracted.
java.time.chrono.ThaiBuddhistDate.now(),obtains the current thaibuddhistdate from the system clock in the default time-zone.
java.time.chrono.ThaiBuddhistDate.now(java.time.ZoneId),obtains the current thaibuddhistdate from the system clock in the specified time-zone.
java.time.chrono.ThaiBuddhistDate.now(java.time.Clock),obtains the current thaibuddhistdate from the specified clock.
"java.time.chrono.ThaiBuddhistDate.of(int,int,int)","obtains a thaibuddhistdate representing a date in the thai buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields."
java.time.chrono.ThaiBuddhistDate.plus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount added.
java.time.chrono.ThaiBuddhistDate.with(java.time.temporal.TemporalAdjuster),returns an adjusted object of the same type as this object with the adjustment made.
java.time.chrono.HijrahEra.getValue(),gets the numeric era int value.
java.time.chrono.HijrahEra.of(int),obtains an instance of hijrahera from an int value.
java.time.chrono.HijrahEra.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.chrono.HijrahEra.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.chrono.HijrahEra.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.time.chrono.IsoEra.getValue(),gets the numeric era int value.
java.time.chrono.IsoEra.of(int),obtains an instance of isoera from an int value.
java.time.chrono.IsoEra.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.chrono.IsoEra.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.time.chrono.MinguoEra.getValue(),gets the numeric era int value.
java.time.chrono.MinguoEra.of(int),obtains an instance of minguoera from an int value.
java.time.chrono.MinguoEra.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.chrono.MinguoEra.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.time.chrono.ThaiBuddhistEra.getValue(),gets the numeric era int value.
java.time.chrono.ThaiBuddhistEra.of(int),obtains an instance of thaibuddhistera from an int value.
java.time.chrono.ThaiBuddhistEra.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.chrono.ThaiBuddhistEra.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.time.format.DateTimeFormatter.format(java.time.temporal.TemporalAccessor),formats a date-time object using this formatter.
"java.time.format.DateTimeFormatter.formatTo(java.time.temporal.TemporalAccessor,java.lang.Appendable)",formats a date-time object to an appendable using this formatter.
java.time.format.DateTimeFormatter.getChronology(),gets the overriding chronology to be used during formatting.
java.time.format.DateTimeFormatter.getDecimalStyle(),gets the decimalstyle to be used during formatting.
java.time.format.DateTimeFormatter.getLocale(),gets the locale to be used during formatting.
java.time.format.DateTimeFormatter.getResolverFields(),gets the resolver fields to use during parsing.
java.time.format.DateTimeFormatter.getResolverStyle(),gets the resolver style to use during parsing.
java.time.format.DateTimeFormatter.getZone(),gets the overriding zone to be used during formatting.
java.time.format.DateTimeFormatter.ofLocalizedDate(java.time.format.FormatStyle),returns a locale specific date format for the iso chronology.
java.time.format.DateTimeFormatter.ofLocalizedDateTime(java.time.format.FormatStyle),returns a locale specific date-time formatter for the iso chronology.
"java.time.format.DateTimeFormatter.ofLocalizedDateTime(java.time.format.FormatStyle,java.time.format.FormatStyle)",returns a locale specific date and time format for the iso chronology.
java.time.format.DateTimeFormatter.ofLocalizedTime(java.time.format.FormatStyle),returns a locale specific time format for the iso chronology.
java.time.format.DateTimeFormatter.ofPattern(java.lang.String),creates a formatter using the specified pattern.
"java.time.format.DateTimeFormatter.ofPattern(java.lang.String,java.util.Locale)",creates a formatter using the specified pattern and locale.
java.time.format.DateTimeFormatter.parse(java.lang.CharSequence),fully parses the text producing a temporal object.
"java.time.format.DateTimeFormatter.parse(java.lang.CharSequence,java.text.ParsePosition)","parses the text using this formatter, providing control over the text position."
"java.time.format.DateTimeFormatter.parse(java.lang.CharSequence,java.time.temporal.TemporalQuery<T>)",fully parses the text producing an object of the specified type.
"java.time.format.DateTimeFormatter.parseBest(java.lang.CharSequence,java.time.temporal.TemporalQuery<?>...)",fully parses the text producing an object of one of the specified types.
java.time.format.DateTimeFormatter.parsedExcessDays(),a query that provides access to the excess days that were parsed.
java.time.format.DateTimeFormatter.parsedLeapSecond(),a query that provides access to whether a leap-second was parsed.
"java.time.format.DateTimeFormatter.parseUnresolved(java.lang.CharSequence,java.text.ParsePosition)","parses the text using this formatter, without resolving the result, intended for advanced use cases."
java.time.format.DateTimeFormatter.toFormat(),returns this formatter as a java.
java.time.format.DateTimeFormatter.toFormat(java.time.temporal.TemporalQuery<?>),returns this formatter as a java.
java.time.format.DateTimeFormatter.toString(),returns a description of the underlying formatters.
java.time.format.DateTimeFormatter.withChronology(java.time.chrono.Chronology),returns a copy of this formatter with a new override chronology.
java.time.format.DateTimeFormatter.withDecimalStyle(java.time.format.DecimalStyle),returns a copy of this formatter with a new decimalstyle.
java.time.format.DateTimeFormatter.withLocale(java.util.Locale),returns a copy of this formatter with a new locale.
java.time.format.DateTimeFormatter.withResolverFields(java.time.temporal.TemporalField...),returns a copy of this formatter with a new set of resolver fields.
java.time.format.DateTimeFormatter.withResolverFields(java.util.Set<java.time.temporal.TemporalField>),returns a copy of this formatter with a new set of resolver fields.
java.time.format.DateTimeFormatter.withResolverStyle(java.time.format.ResolverStyle),returns a copy of this formatter with a new resolver style.
java.time.format.DateTimeFormatter.withZone(java.time.ZoneId),returns a copy of this formatter with a new override zone.
java.time.format.DateTimeFormatterBuilder.append(java.time.format.DateTimeFormatter),appends all the elements of a formatter to the builder.
java.time.format.DateTimeFormatterBuilder.appendChronologyId(),"appends the chronology id, such as 'iso' or 'thaibuddhist', to the formatter."
java.time.format.DateTimeFormatterBuilder.appendChronologyText(java.time.format.TextStyle),appends the chronology name to the formatter.
"java.time.format.DateTimeFormatterBuilder.appendFraction(java.time.temporal.TemporalField,int,int,boolean)",appends the fractional value of a date-time field to the formatter.
java.time.format.DateTimeFormatterBuilder.appendInstant(),"appends an instant using iso-8601 to the formatter, formatting fractional digits in groups of three."
java.time.format.DateTimeFormatterBuilder.appendInstant(int),appends an instant using iso-8601 to the formatter with control over the number of fractional digits.
java.time.format.DateTimeFormatterBuilder.appendLiteral(char),appends a character literal to the formatter.
java.time.format.DateTimeFormatterBuilder.appendLiteral(java.lang.String),appends a string literal to the formatter.
"java.time.format.DateTimeFormatterBuilder.appendLocalized(java.time.format.FormatStyle,java.time.format.FormatStyle)",appends a localized date-time pattern to the formatter.
java.time.format.DateTimeFormatterBuilder.appendLocalizedOffset(java.time.format.TextStyle),"appends the localized zone offset, such as 'gmt+01:00', to the formatter."
"java.time.format.DateTimeFormatterBuilder.appendOffset(java.lang.String,java.lang.String)","appends the zone offset, such as '+01:00', to the formatter."
java.time.format.DateTimeFormatterBuilder.appendOffsetId(),"appends the zone offset, such as '+01:00', to the formatter."
java.time.format.DateTimeFormatterBuilder.appendOptional(java.time.format.DateTimeFormatter),appends a formatter to the builder which will optionally format/parse.
java.time.format.DateTimeFormatterBuilder.appendPattern(java.lang.String),appends the elements defined by the specified pattern to the builder.
java.time.format.DateTimeFormatterBuilder.appendText(java.time.temporal.TemporalField),appends the text of a date-time field to the formatter using the full text style.
"java.time.format.DateTimeFormatterBuilder.appendText(java.time.temporal.TemporalField,java.time.format.TextStyle)",appends the text of a date-time field to the formatter.
"java.time.format.DateTimeFormatterBuilder.appendText(java.time.temporal.TemporalField,,java.lang.String>)",appends the text of a date-time field to the formatter using the specified map to supply the text.
java.time.format.DateTimeFormatterBuilder.appendValue(java.time.temporal.TemporalField),appends the value of a date-time field to the formatter using a normal output style.
"java.time.format.DateTimeFormatterBuilder.appendValue(java.time.temporal.TemporalField,int)","appends the value of a date-time field to the formatter using a fixed width, zero-padded approach."
"java.time.format.DateTimeFormatterBuilder.appendValue(java.time.temporal.TemporalField,int,int,java.time.format.SignStyle)",appends the value of a date-time field to the formatter providing full control over formatting.
"java.time.format.DateTimeFormatterBuilder.appendValueReduced(java.time.temporal.TemporalField,int,int,int)",appends the reduced value of a date-time field to the formatter.
"java.time.format.DateTimeFormatterBuilder.appendValueReduced(java.time.temporal.TemporalField,int,int,java.time.chrono.ChronoLocalDate)",appends the reduced value of a date-time field to the formatter.
java.time.format.DateTimeFormatterBuilder.appendZoneId(),"appends the time-zone id, such as 'europe/paris' or '+02:00', to the formatter."
java.time.format.DateTimeFormatterBuilder.appendZoneOrOffsetId(),"appends the time-zone id, such as 'europe/paris' or '+02:00', to the formatter, using the best available zone id."
java.time.format.DateTimeFormatterBuilder.appendZoneRegionId(),"appends the time-zone region id, such as 'europe/paris', to the formatter, rejecting the zone id if it is a zoneoffset."
java.time.format.DateTimeFormatterBuilder.appendZoneText(java.time.format.TextStyle),"appends the time-zone name, such as 'british summer time', to the formatter."
"java.time.format.DateTimeFormatterBuilder.appendZoneText(java.time.format.TextStyle,java.util.Set<java.time.ZoneId>)","appends the time-zone name, such as 'british summer time', to the formatter."
"java.time.format.DateTimeFormatterBuilder.getLocalizedDateTimePattern(java.time.format.FormatStyle,java.time.format.FormatStyle,java.time.chrono.Chronology,java.util.Locale)",gets the formatting pattern for date and time styles for a locale and chronology.
java.time.format.DateTimeFormatterBuilder.optionalEnd(),ends an optional section.
java.time.format.DateTimeFormatterBuilder.optionalStart(),mark the start of an optional section.
java.time.format.DateTimeFormatterBuilder.padNext(int),causes the next added printer/parser to pad to a fixed width using a space.
"java.time.format.DateTimeFormatterBuilder.padNext(int,char)",causes the next added printer/parser to pad to a fixed width.
java.time.format.DateTimeFormatterBuilder.parseCaseInsensitive(),changes the parse style to be case insensitive for the remainder of the formatter.
java.time.format.DateTimeFormatterBuilder.parseCaseSensitive(),changes the parse style to be case sensitive for the remainder of the formatter.
"java.time.format.DateTimeFormatterBuilder.parseDefaulting(java.time.temporal.TemporalField,long)",appends a default value for a field to the formatter for use in parsing.
java.time.format.DateTimeFormatterBuilder.parseLenient(),changes the parse style to be lenient for the remainder of the formatter.
java.time.format.DateTimeFormatterBuilder.parseStrict(),changes the parse style to be strict for the remainder of the formatter.
java.time.format.DateTimeFormatterBuilder.toFormatter(),completes this builder by creating the datetimeformatter using the default locale.
java.time.format.DateTimeFormatterBuilder.toFormatter(java.util.Locale),completes this builder by creating the datetimeformatter using the specified locale.
java.time.format.DecimalStyle.equals(java.lang.Object),checks if this decimalstyle is equal to another decimalstyle.
java.time.format.DecimalStyle.getAvailableLocales(),lists all the locales that are supported.
java.time.format.DecimalStyle.getDecimalSeparator(),gets the character that represents the decimal point.
java.time.format.DecimalStyle.getNegativeSign(),gets the character that represents the negative sign.
java.time.format.DecimalStyle.getPositiveSign(),gets the character that represents the positive sign.
java.time.format.DecimalStyle.getZeroDigit(),gets the character that represents zero.
java.time.format.DecimalStyle.hashCode(),a hash code for this decimalstyle.
java.time.format.DecimalStyle.of(java.util.Locale),obtains the decimalstyle for the specified locale.
java.time.format.DecimalStyle.ofDefaultLocale(),obtains the decimalstyle for the default format locale.
java.time.format.DecimalStyle.toString(),returns a string describing this decimalstyle.
java.time.format.DecimalStyle.withDecimalSeparator(char),returns a copy of the info with a new character that represents the decimal point.
java.time.format.DecimalStyle.withNegativeSign(char),returns a copy of the info with a new character that represents the negative sign.
java.time.format.DecimalStyle.withPositiveSign(char),returns a copy of the info with a new character that represents the positive sign.
java.time.format.DecimalStyle.withZeroDigit(char),returns a copy of the info with a new character that represents zero.
java.time.format.FormatStyle.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.format.FormatStyle.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.time.format.ResolverStyle.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.format.ResolverStyle.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.time.format.SignStyle.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.format.SignStyle.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.time.format.TextStyle.asNormal(),returns the normal style with the same size.
java.time.format.TextStyle.asStandalone(),returns the stand-alone style with the same size.
java.time.format.TextStyle.isStandalone(),returns true if the style is a stand-alone style.
java.time.format.TextStyle.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.format.TextStyle.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.time.format.DateTimeParseException.getErrorIndex(),returns the index where the error was found.
java.time.format.DateTimeParseException.getParsedString(),returns the string that was being parsed.
java.time.temporal.Temporal.isSupported(java.time.temporal.TemporalUnit),checks if the specified unit is supported.
java.time.temporal.Temporal.minus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount subtracted.
"java.time.temporal.Temporal.minus(long,java.time.temporal.TemporalUnit)",returns an object of the same type as this object with the specified period subtracted.
java.time.temporal.Temporal.plus(java.time.temporal.TemporalAmount),returns an object of the same type as this object with an amount added.
"java.time.temporal.Temporal.plus(long,java.time.temporal.TemporalUnit)",returns an object of the same type as this object with the specified period added.
"java.time.temporal.Temporal.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",calculates the amount of time until another temporal in terms of the specified unit.
java.time.temporal.Temporal.with(java.time.temporal.TemporalAdjuster),returns an adjusted object of the same type as this object with the adjustment made.
"java.time.temporal.Temporal.with(java.time.temporal.TemporalField,long)",returns an object of the same type as this object with the specified field altered.
java.time.temporal.TemporalAccessor.get(java.time.temporal.TemporalField),gets the value of the specified field as an int.
java.time.temporal.TemporalAccessor.getLong(java.time.temporal.TemporalField),gets the value of the specified field as a long.
java.time.temporal.TemporalAccessor.isSupported(java.time.temporal.TemporalField),checks if the specified field is supported.
java.time.temporal.TemporalAccessor.query(java.time.temporal.TemporalQuery<R>),queries this date-time.
java.time.temporal.TemporalAccessor.range(java.time.temporal.TemporalField),gets the range of valid values for the specified field.
java.time.temporal.TemporalAdjuster.adjustInto(java.time.temporal.Temporal),adjusts the specified temporal object.
java.time.temporal.TemporalAmount.addTo(java.time.temporal.Temporal),adds to the specified temporal object.
java.time.temporal.TemporalAmount.get(java.time.temporal.TemporalUnit),returns the value of the requested unit.
java.time.temporal.TemporalAmount.getUnits(),returns the list of units uniquely defining the value of this temporalamount.
java.time.temporal.TemporalAmount.subtractFrom(java.time.temporal.Temporal),subtracts this object from the specified temporal object.
"java.time.temporal.TemporalField.adjustInto(R,long)",returns a copy of the specified temporal object with the value of this field set.
java.time.temporal.TemporalField.getBaseUnit(),gets the unit that the field is measured in.
java.time.temporal.TemporalField.getDisplayName(java.util.Locale),gets the display name for the field in the requested locale.
java.time.temporal.TemporalField.getFrom(java.time.temporal.TemporalAccessor),gets the value of this field from the specified temporal object.
java.time.temporal.TemporalField.getRangeUnit(),gets the range that the field is bound by.
java.time.temporal.TemporalField.isDateBased(),checks if this field represents a component of a date.
java.time.temporal.TemporalField.isSupportedBy(java.time.temporal.TemporalAccessor),checks if this field is supported by the temporal object.
java.time.temporal.TemporalField.isTimeBased(),checks if this field represents a component of a time.
java.time.temporal.TemporalField.range(),gets the range of valid values for the field.
java.time.temporal.TemporalField.rangeRefinedBy(java.time.temporal.TemporalAccessor),get the range of valid values for this field using the temporal object to refine the result.
"java.time.temporal.TemporalField.resolve(,java.lang.Long>,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)",resolves this field to provide a simpler alternative or a date.
java.time.temporal.TemporalField.toString(),gets a descriptive name for the field.
java.time.temporal.TemporalQuery.queryFrom(java.time.temporal.TemporalAccessor),queries the specified temporal object.
"java.time.temporal.TemporalUnit.addTo(R,long)",returns a copy of the specified temporal object with the specified period added.
"java.time.temporal.TemporalUnit.between(java.time.temporal.Temporal,java.time.temporal.Temporal)",calculates the amount of time between two temporal objects.
java.time.temporal.TemporalUnit.getDuration(),"gets the duration of this unit, which may be an estimate."
java.time.temporal.TemporalUnit.isDateBased(),checks if this unit represents a component of a date.
java.time.temporal.TemporalUnit.isDurationEstimated(),checks if the duration of the unit is an estimate.
java.time.temporal.TemporalUnit.isSupportedBy(java.time.temporal.Temporal),checks if this unit is supported by the specified temporal object.
java.time.temporal.TemporalUnit.isTimeBased(),checks if this unit represents a component of a time.
java.time.temporal.TemporalUnit.toString(),gets a descriptive name for the unit.
"java.time.temporal.TemporalAdjusters.dayOfWeekInMonth(int,java.time.DayOfWeek)","returns the day-of-week in month adjuster, which returns a new date in the same month with the ordinal day-of-week."
java.time.temporal.TemporalAdjusters.firstDayOfMonth(),"returns the ""first day of month"" adjuster, which returns a new date set to the first day of the current month."
java.time.temporal.TemporalAdjusters.firstDayOfNextMonth(),"returns the ""first day of next month"" adjuster, which returns a new date set to the first day of the next month."
java.time.temporal.TemporalAdjusters.firstDayOfNextYear(),"returns the ""first day of next year"" adjuster, which returns a new date set to the first day of the next year."
java.time.temporal.TemporalAdjusters.firstDayOfYear(),"returns the ""first day of year"" adjuster, which returns a new date set to the first day of the current year."
java.time.temporal.TemporalAdjusters.firstInMonth(java.time.DayOfWeek),"returns the first in month adjuster, which returns a new date in the same month with the first matching day-of-week."
java.time.temporal.TemporalAdjusters.lastDayOfMonth(),"returns the ""last day of month"" adjuster, which returns a new date set to the last day of the current month."
java.time.temporal.TemporalAdjusters.lastDayOfYear(),"returns the ""last day of year"" adjuster, which returns a new date set to the last day of the current year."
java.time.temporal.TemporalAdjusters.lastInMonth(java.time.DayOfWeek),"returns the last in month adjuster, which returns a new date in the same month with the last matching day-of-week."
java.time.temporal.TemporalAdjusters.next(java.time.DayOfWeek),"returns the next day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted."
java.time.temporal.TemporalAdjusters.nextOrSame(java.time.DayOfWeek),"returns the next-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted unless it is already on that day in which case the same object is returned."
java.time.temporal.TemporalAdjusters.ofDateAdjuster(java.util.function.UnaryOperator<java.time.LocalDate>),obtains a temporaladjuster that wraps a date adjuster.
java.time.temporal.TemporalAdjusters.previous(java.time.DayOfWeek),"returns the previous day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted."
java.time.temporal.TemporalAdjusters.previousOrSame(java.time.DayOfWeek),"returns the previous-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted unless it is already on that day in which case the same object is returned."
java.time.temporal.TemporalQueries.chronology(),a query for the chronology.
java.time.temporal.TemporalQueries.localDate(),a query for localdate returning null if not found.
java.time.temporal.TemporalQueries.localTime(),a query for localtime returning null if not found.
java.time.temporal.TemporalQueries.offset(),a query for zoneoffset returning null if not found.
java.time.temporal.TemporalQueries.precision(),a query for the smallest supported unit.
java.time.temporal.TemporalQueries.zone(),"a lenient query for the zoneid, falling back to the zoneoffset."
java.time.temporal.TemporalQueries.zoneId(),a strict query for the zoneid.
"java.time.temporal.ValueRange.checkValidIntValue(long,java.time.temporal.TemporalField)",checks that the specified value is valid and fits in an int.
"java.time.temporal.ValueRange.checkValidValue(long,java.time.temporal.TemporalField)",checks that the specified value is valid.
java.time.temporal.ValueRange.equals(java.lang.Object),checks if this range is equal to another range.
java.time.temporal.ValueRange.getLargestMinimum(),gets the largest possible minimum value that the field can take.
java.time.temporal.ValueRange.getMaximum(),gets the maximum value that the field can take.
java.time.temporal.ValueRange.getMinimum(),gets the minimum value that the field can take.
java.time.temporal.ValueRange.getSmallestMaximum(),gets the smallest possible maximum value that the field can take.
java.time.temporal.ValueRange.hashCode(),a hash code for this range.
java.time.temporal.ValueRange.isFixed(),is the value range fixed and fully known.
java.time.temporal.ValueRange.isIntValue(),checks if all values in the range fit in an int.
java.time.temporal.ValueRange.isValidIntValue(long),checks if the value is within the valid range and that all values in the range fit in an int.
java.time.temporal.ValueRange.isValidValue(long),checks if the value is within the valid range.
"java.time.temporal.ValueRange.of(long,long)",obtains a fixed value range.
"java.time.temporal.ValueRange.of(long,long,long)",obtains a variable value range.
"java.time.temporal.ValueRange.of(long,long,long,long)",obtains a fully variable value range.
java.time.temporal.ValueRange.toString(),outputs this range as a string.
java.time.temporal.WeekFields.dayOfWeek(),returns a field to access the day of week based on this weekfields.
java.time.temporal.WeekFields.equals(java.lang.Object),checks if this weekfields is equal to the specified object.
java.time.temporal.WeekFields.getFirstDayOfWeek(),gets the first day-of-week.
java.time.temporal.WeekFields.getMinimalDaysInFirstWeek(),gets the minimal number of days in the first week.
java.time.temporal.WeekFields.hashCode(),a hash code for this weekfields.
java.time.temporal.WeekFields.of(java.util.Locale),obtains an instance of weekfields appropriate for a locale.
"java.time.temporal.WeekFields.of(java.time.DayOfWeek,int)",obtains an instance of weekfields from the first day-of-week and minimal days.
java.time.temporal.WeekFields.toString(),a string representation of this weekfields instance.
java.time.temporal.WeekFields.weekBasedYear(),returns a field to access the year of a week-based-year based on this weekfields.
java.time.temporal.WeekFields.weekOfMonth(),returns a field to access the week of month based on this weekfields.
java.time.temporal.WeekFields.weekOfWeekBasedYear(),returns a field to access the week of a week-based-year based on this weekfields.
java.time.temporal.WeekFields.weekOfYear(),returns a field to access the week of year based on this weekfields.
java.time.temporal.ChronoField.checkValidIntValue(long),checks that the specified value is valid and fits in an int.
java.time.temporal.ChronoField.checkValidValue(long),checks that the specified value is valid for this field.
java.time.temporal.ChronoField.isDateBased(),checks if this field represents a component of a date.
java.time.temporal.ChronoField.isTimeBased(),checks if this field represents a component of a time.
java.time.temporal.ChronoField.range(),gets the range of valid values for the field.
java.time.temporal.ChronoField.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.temporal.ChronoField.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.time.temporal.ChronoUnit.getDuration(),gets the estimated duration of this unit in the iso calendar system.
java.time.temporal.ChronoUnit.isDateBased(),checks if this unit is a date unit.
java.time.temporal.ChronoUnit.isDurationEstimated(),checks if the duration of the unit is an estimate.
java.time.temporal.ChronoUnit.isTimeBased(),checks if this unit is a time unit.
java.time.temporal.ChronoUnit.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.temporal.ChronoUnit.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.time.zone.ZoneOffsetTransition.compareTo(java.time.zone.ZoneOffsetTransition),compares this transition to another based on the transition instant.
java.time.zone.ZoneOffsetTransition.equals(java.lang.Object),checks if this object equals another.
java.time.zone.ZoneOffsetTransition.getDateTimeAfter(),"gets the local transition date-time, as would be expressed with the 'after' offset."
java.time.zone.ZoneOffsetTransition.getDateTimeBefore(),"gets the local transition date-time, as would be expressed with the 'before' offset."
java.time.zone.ZoneOffsetTransition.getDuration(),gets the duration of the transition.
java.time.zone.ZoneOffsetTransition.getInstant(),gets the transition instant.
java.time.zone.ZoneOffsetTransition.getOffsetAfter(),gets the offset after the transition.
java.time.zone.ZoneOffsetTransition.getOffsetBefore(),gets the offset before the transition.
java.time.zone.ZoneOffsetTransition.hashCode(),returns a suitable hash code.
java.time.zone.ZoneOffsetTransition.isGap(),does this transition represent a gap in the local time-line.
java.time.zone.ZoneOffsetTransition.isOverlap(),does this transition represent an overlap in the local time-line.
java.time.zone.ZoneOffsetTransition.isValidOffset(java.time.ZoneOffset),checks if the specified offset is valid during this transition.
"java.time.zone.ZoneOffsetTransition.of(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)",obtains an instance defining a transition between two offsets.
java.time.zone.ZoneOffsetTransition.toEpochSecond(),gets the transition instant as an epoch second.
java.time.zone.ZoneOffsetTransition.toString(),returns a string describing this object.
java.time.zone.ZoneOffsetTransitionRule.createTransition(int),creates a transition instance for the specified year.
java.time.zone.ZoneOffsetTransitionRule.equals(java.lang.Object),checks if this object equals another.
java.time.zone.ZoneOffsetTransitionRule.getDayOfMonthIndicator(),gets the indicator of the day-of-month of the transition.
java.time.zone.ZoneOffsetTransitionRule.getDayOfWeek(),gets the day-of-week of the transition.
java.time.zone.ZoneOffsetTransitionRule.getLocalTime(),gets the local time of day of the transition which must be checked with ismidnightendofday().
java.time.zone.ZoneOffsetTransitionRule.getMonth(),gets the month of the transition.
java.time.zone.ZoneOffsetTransitionRule.getOffsetAfter(),gets the offset after the transition.
java.time.zone.ZoneOffsetTransitionRule.getOffsetBefore(),gets the offset before the transition.
java.time.zone.ZoneOffsetTransitionRule.getStandardOffset(),gets the standard offset in force at the transition.
java.time.zone.ZoneOffsetTransitionRule.getTimeDefinition(),"gets the time definition, specifying how to convert the time to an instant."
java.time.zone.ZoneOffsetTransitionRule.hashCode(),returns a suitable hash code.
java.time.zone.ZoneOffsetTransitionRule.isMidnightEndOfDay(),is the transition local time midnight at the end of day.
"java.time.zone.ZoneOffsetTransitionRule.of(java.time.Month,int,java.time.DayOfWeek,java.time.LocalTime,boolean,java.time.zone.ZoneOffsetTransitionRule.TimeDefinition,java.time.ZoneOffset,java.time.ZoneOffset,java.time.ZoneOffset)",obtains an instance defining the yearly rule to create transitions between two offsets.
java.time.zone.ZoneOffsetTransitionRule.toString(),returns a string describing this object.
java.time.zone.ZoneRules.equals(java.lang.Object),checks if this set of rules equals another.
java.time.zone.ZoneRules.getDaylightSavings(java.time.Instant),gets the amount of daylight savings in use for the specified instant in this zone.
java.time.zone.ZoneRules.getOffset(java.time.Instant),gets the offset applicable at the specified instant in these rules.
java.time.zone.ZoneRules.getOffset(java.time.LocalDateTime),gets a suitable offset for the specified local date-time in these rules.
java.time.zone.ZoneRules.getStandardOffset(java.time.Instant),gets the standard offset for the specified instant in this zone.
java.time.zone.ZoneRules.getTransition(java.time.LocalDateTime),gets the offset transition applicable at the specified local date-time in these rules.
java.time.zone.ZoneRules.getTransitionRules(),gets the list of transition rules for years beyond those defined in the transition list.
java.time.zone.ZoneRules.getTransitions(),gets the complete list of fully defined transitions.
java.time.zone.ZoneRules.getValidOffsets(java.time.LocalDateTime),gets the offset applicable at the specified local date-time in these rules.
java.time.zone.ZoneRules.hashCode(),returns a suitable hash code given the definition of #equals.
java.time.zone.ZoneRules.isDaylightSavings(java.time.Instant),checks if the specified instant is in daylight savings.
java.time.zone.ZoneRules.isFixedOffset(),"checks of the zone rules are fixed, such that the offset never varies."
"java.time.zone.ZoneRules.isValidOffset(java.time.LocalDateTime,java.time.ZoneOffset)",checks if the offset date-time is valid for these rules.
java.time.zone.ZoneRules.nextTransition(java.time.Instant),gets the next transition after the specified instant.
"java.time.zone.ZoneRules.of(java.time.ZoneOffset,java.time.ZoneOffset,java.util.List<java.time.zone.ZoneOffsetTransition>,java.util.List<java.time.zone.ZoneOffsetTransition>,java.util.List<java.time.zone.ZoneOffsetTransitionRule>)",obtains an instance of a zonerules.
java.time.zone.ZoneRules.of(java.time.ZoneOffset),obtains an instance of zonerules that has fixed zone rules.
java.time.zone.ZoneRules.previousTransition(java.time.Instant),gets the previous transition before the specified instant.
java.time.zone.ZoneRules.toString(),returns a string describing this object.
java.time.zone.ZoneRulesProvider.getAvailableZoneIds(),gets the set of available zone ids.
"java.time.zone.ZoneRulesProvider.getRules(java.lang.String,boolean)",gets the rules for the zone id.
java.time.zone.ZoneRulesProvider.getVersions(java.lang.String),gets the history of rules for the zone id.
java.time.zone.ZoneRulesProvider.provideRefresh(),spi method to refresh the rules from the underlying data provider.
"java.time.zone.ZoneRulesProvider.provideRules(java.lang.String,boolean)",spi method to get the rules for the zone id.
java.time.zone.ZoneRulesProvider.provideVersions(java.lang.String),spi method to get the history of rules for the zone id.
java.time.zone.ZoneRulesProvider.provideZoneIds(),spi method to get the available zone ids.
java.time.zone.ZoneRulesProvider.refresh(),refreshes the rules from the underlying data provider.
java.time.zone.ZoneRulesProvider.registerProvider(java.time.zone.ZoneRulesProvider),registers a zone rules provider.
"java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.createDateTime(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)",converts the specified local date-time to the local date-time actually seen on a wall clock.
java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.util.Collection.add(java.util.Collection),ensures that this collection contains the specified element (optional operation).
java.util.Collection.addAll(java.util.Collection<? extends java.util.Collection>),adds all of the elements in the specified collection to this collection (optional operation).
java.util.Collection.clear(),removes all of the elements from this collection (optional operation).
java.util.Collection.contains(java.lang.Object),returns true if this collection contains the specified element.
java.util.Collection.containsAll(java.util.Collection<?>),returns true if this collection contains all of the elements in the specified collection.
java.util.Collection.equals(java.lang.Object),compares the specified object with this collection for equality.
java.util.Collection.hashCode(),returns the hash code value for this collection.
java.util.Collection.isEmpty(),returns true if this collection contains no elements.
java.util.Collection.iterator(),returns an iterator over the elements in this collection.
java.util.Collection.parallelStream(),returns a possibly parallel stream with this collection as its source.
java.util.Collection.remove(java.lang.Object),"removes a single instance of the specified element from this collection, if it is present (optional operation)."
java.util.Collection.removeAll(java.util.Collection<?>),removes all of this collection's elements that are also contained in the specified collection (optional operation).
java.util.Collection.removeIf(java.util.function.Predicate<? super java.util.Collection>),removes all of the elements of this collection that satisfy the given predicate.
java.util.Collection.retainAll(java.util.Collection<?>),retains only the elements in this collection that are contained in the specified collection (optional operation).
java.util.Collection.size(),returns the number of elements in this collection.
java.util.Collection.spliterator(),creates a spliterator over the elements in this collection.
java.util.Collection.stream(),returns a sequential stream with this collection as its source.
java.util.Collection.toArray(),returns an array containing all of the elements in this collection.
java.util.Collection.toArray(T[]),returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.
"java.util.Comparator.compare(java.util.Comparator,java.util.Comparator)",compares its two arguments for order.
"java.util.Comparator.comparing(java.util.function.Function<? super,? extends U>,java.util.Comparator<? super U>)","accepts a function that extracts a sort key from a type t, and returns a comparator<t> that compares by that sort key using the specified comparator."
"java.util.Comparator.comparing(java.util.function.Function<? super,? extends U>)","accepts a function that extracts a comparable sort key from a type t, and returns a comparator<t> that compares by that sort key."
java.util.Comparator.comparingDouble(java.util.function.ToDoubleFunction<? super T>),"accepts a function that extracts a double sort key from a type t, and returns a comparator<t> that compares by that sort key."
java.util.Comparator.comparingInt(java.util.function.ToIntFunction<? super T>),"accepts a function that extracts an int sort key from a type t, and returns a comparator<t> that compares by that sort key."
java.util.Comparator.comparingLong(java.util.function.ToLongFunction<? super T>),"accepts a function that extracts a long sort key from a type t, and returns a comparator<t> that compares by that sort key."
java.util.Comparator.equals(java.lang.Object),"indicates whether some other object is ""equal to"" this comparator."
java.util.Comparator.naturalOrder(),returns a comparator that compares comparable objects in natural order.
java.util.Comparator.nullsFirst(java.util.Comparator<? super T>),returns a null-friendly comparator that considers null to be less than non-null.
java.util.Comparator.nullsLast(java.util.Comparator<? super T>),returns a null-friendly comparator that considers null to be greater than non-null.
java.util.Comparator.reversed(),returns a comparator that imposes the reverse ordering of this comparator.
java.util.Comparator.reverseOrder(),returns a comparator that imposes the reverse of the natural ordering.
java.util.Comparator.thenComparing(java.util.Comparator<? super java.util.Comparator>),returns a lexicographic-order comparator with another comparator.
"java.util.Comparator.thenComparing(java.util.function.Function<? super,? extends U>,java.util.Comparator<? super U>)",returns a lexicographic-order comparator with a function that extracts a key to be compared with the given comparator.
"java.util.Comparator.thenComparing(java.util.function.Function<? super,? extends U>)",returns a lexicographic-order comparator with a function that extracts a comparable sort key.
java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super java.util.Comparator>),returns a lexicographic-order comparator with a function that extracts a double sort key.
java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super java.util.Comparator>),returns a lexicographic-order comparator with a function that extracts a int sort key.
java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super java.util.Comparator>),returns a lexicographic-order comparator with a function that extracts a long sort key.
java.util.Deque.add(java.util.Deque),"inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an illegalstateexception if no space is currently available."
java.util.Deque.addFirst(java.util.Deque),"inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.Deque.addLast(java.util.Deque),"inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.Deque.contains(java.lang.Object),returns true if this deque contains the specified element.
java.util.Deque.descendingIterator(),returns an iterator over the elements in this deque in reverse sequential order.
java.util.Deque.element(),"retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque)."
java.util.Deque.getFirst(),"retrieves, but does not remove, the first element of this deque."
java.util.Deque.getLast(),"retrieves, but does not remove, the last element of this deque."
java.util.Deque.iterator(),returns an iterator over the elements in this deque in proper sequence.
java.util.Deque.offer(java.util.Deque),"inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
java.util.Deque.offerFirst(java.util.Deque),inserts the specified element at the front of this deque unless it would violate capacity restrictions.
java.util.Deque.offerLast(java.util.Deque),inserts the specified element at the end of this deque unless it would violate capacity restrictions.
java.util.Deque.peek(),"retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
java.util.Deque.peekFirst(),"retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty."
java.util.Deque.peekLast(),"retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty."
java.util.Deque.poll(),"retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
java.util.Deque.pollFirst(),"retrieves and removes the first element of this deque, or returns null if this deque is empty."
java.util.Deque.pollLast(),"retrieves and removes the last element of this deque, or returns null if this deque is empty."
java.util.Deque.pop(),pops an element from the stack represented by this deque.
java.util.Deque.push(java.util.Deque),"pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.Deque.remove(),"retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque)."
java.util.Deque.remove(java.lang.Object),removes the first occurrence of the specified element from this deque.
java.util.Deque.removeFirst(),retrieves and removes the first element of this deque.
java.util.Deque.removeFirstOccurrence(java.lang.Object),removes the first occurrence of the specified element from this deque.
java.util.Deque.removeLast(),retrieves and removes the last element of this deque.
java.util.Deque.removeLastOccurrence(java.lang.Object),removes the last occurrence of the specified element from this deque.
java.util.Deque.size(),returns the number of elements in this deque.
java.util.Enumeration.hasMoreElements(),tests if this enumeration contains more elements.
java.util.Enumeration.nextElement(),returns the next element of this enumeration if this enumeration object has at least one more element to provide.
"java.util.Formattable.formatTo(java.util.Formatter,int,int,int)",formats the object using the provided formatter.
java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super java.util.Iterator>),performs the given action for each remaining element until all elements have been processed or the action throws an exception.
java.util.Iterator.hasNext(),returns true if the iteration has more elements.
java.util.Iterator.next(),returns the next element in the iteration.
java.util.Iterator.remove(),removes from the underlying collection the last element returned by this iterator (optional operation).
java.util.List.add(java.util.List),appends the specified element to the end of this list (optional operation).
"java.util.List.add(int,java.util.List)",inserts the specified element at the specified position in this list (optional operation).
java.util.List.addAll(java.util.Collection<? extends java.util.List>),"appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation)."
"java.util.List.addAll(int,java.util.Collection<? extends java.util.List>)",inserts all of the elements in the specified collection into this list at the specified position (optional operation).
java.util.List.clear(),removes all of the elements from this list (optional operation).
java.util.List.contains(java.lang.Object),returns true if this list contains the specified element.
java.util.List.containsAll(java.util.Collection<?>),returns true if this list contains all of the elements of the specified collection.
java.util.List.equals(java.lang.Object),compares the specified object with this list for equality.
java.util.List.get(int),returns the element at the specified position in this list.
java.util.List.hashCode(),returns the hash code value for this list.
java.util.List.indexOf(java.lang.Object),"returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element."
java.util.List.isEmpty(),returns true if this list contains no elements.
java.util.List.iterator(),returns an iterator over the elements in this list in proper sequence.
java.util.List.lastIndexOf(java.lang.Object),"returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element."
java.util.List.listIterator(),returns a list iterator over the elements in this list (in proper sequence).
java.util.List.listIterator(int),"returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list."
java.util.List.remove(java.lang.Object),"removes the first occurrence of the specified element from this list, if it is present (optional operation)."
java.util.List.remove(int),removes the element at the specified position in this list (optional operation).
java.util.List.removeAll(java.util.Collection<?>),removes from this list all of its elements that are contained in the specified collection (optional operation).
java.util.List.replaceAll(java.util.function.UnaryOperator<java.util.List>),replaces each element of this list with the result of applying the operator to that element.
java.util.List.retainAll(java.util.Collection<?>),retains only the elements in this list that are contained in the specified collection (optional operation).
"java.util.List.set(int,java.util.List)",replaces the element at the specified position in this list with the specified element (optional operation).
java.util.List.size(),returns the number of elements in this list.
java.util.List.sort(java.util.Comparator<? super java.util.List>),sorts this list according to the order induced by the specified comparator.
java.util.List.spliterator(),creates a spliterator over the elements in this list.
"java.util.List.subList(int,int)","returns a view of the portion of this list between the specified fromindex, inclusive, and toindex, exclusive."
java.util.List.toArray(),returns an array containing all of the elements in this list in proper sequence (from first to last element).
java.util.List.toArray(T[]),returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
java.util.ListIterator.add(java.util.ListIterator),inserts the specified element into the list (optional operation).
java.util.ListIterator.hasNext(),returns true if this list iterator has more elements when traversing the list in the forward direction.
java.util.ListIterator.hasPrevious(),returns true if this list iterator has more elements when traversing the list in the reverse direction.
java.util.ListIterator.next(),returns the next element in the list and advances the cursor position.
java.util.ListIterator.nextIndex(),returns the index of the element that would be returned by a subsequent call to next().
java.util.ListIterator.previous(),returns the previous element in the list and moves the cursor position backwards.
java.util.ListIterator.previousIndex(),returns the index of the element that would be returned by a subsequent call to previous().
java.util.ListIterator.remove(),removes from the list the last element that was returned by next() or previous() (optional operation).
java.util.ListIterator.set(java.util.ListIterator),replaces the last element returned by next() or previous() with the specified element (optional operation).
java.util.Map.clear(),removes all of the mappings from this map (optional operation).
"java.util.Map.compute(java.util.Map,java.util.function.BiFunction<? super,? super,? extends java.util.Map>)",attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
"java.util.Map.computeIfAbsent(java.util.Map,java.util.function.Function<? super,? extends java.util.Map>)","if the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null."
"java.util.Map.computeIfPresent(java.util.Map,java.util.function.BiFunction<? super,? super,? extends java.util.Map>)","if the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
java.util.Map.containsKey(java.lang.Object),returns true if this map contains a mapping for the specified key.
java.util.Map.containsValue(java.lang.Object),returns true if this map maps one or more keys to the specified value.
java.util.Map.entrySet(),returns a set view of the mappings contained in this map.
java.util.Map.equals(java.lang.Object),compares the specified object with this map for equality.
"java.util.Map.forEach(java.util.function.BiConsumer<? super,? super java.util.Map>)",performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
java.util.Map.get(java.lang.Object),"returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
"java.util.Map.getOrDefault(java.lang.Object,java.util.Map)","returns the value to which the specified key is mapped, or defaultvalue if this map contains no mapping for the key."
java.util.Map.hashCode(),returns the hash code value for this map.
java.util.Map.isEmpty(),returns true if this map contains no key-value mappings.
java.util.Map.keySet(),returns a set view of the keys contained in this map.
"java.util.Map.merge(java.util.Map,java.util.Map,java.util.function.BiFunction<? super,? super,? extends java.util.Map>)","if the specified key is not already associated with a value or is associated with null, associates it with the given non-null value."
"java.util.Map.put(java.util.Map,java.util.Map)",associates the specified value with the specified key in this map (optional operation).
"java.util.Map.putAll(java.util.Map<? extends,? extends java.util.Map>)",copies all of the mappings from the specified map to this map (optional operation).
"java.util.Map.putIfAbsent(java.util.Map,java.util.Map)","if the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value."
java.util.Map.remove(java.lang.Object),removes the mapping for a key from this map if it is present (optional operation).
"java.util.Map.remove(java.lang.Object,java.lang.Object)",removes the entry for the specified key only if it is currently mapped to the specified value.
"java.util.Map.replace(java.util.Map,java.util.Map,java.util.Map)",replaces the entry for the specified key only if currently mapped to the specified value.
"java.util.Map.replace(java.util.Map,java.util.Map)",replaces the entry for the specified key only if it is currently mapped to some value.
"java.util.Map.replaceAll(java.util.function.BiFunction<? super,? super,? extends java.util.Map>)",replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
java.util.Map.size(),returns the number of key-value mappings in this map.
java.util.Map.values(),returns a collection view of the values contained in this map.
java.util.Map.Entry.comparingByKey(),returns a comparator that compares map.
java.util.Map.Entry.comparingByKey(java.util.Comparator<? super K>),returns a comparator that compares map.
java.util.Map.Entry.comparingByValue(),returns a comparator that compares map.
java.util.Map.Entry.comparingByValue(java.util.Comparator<? super V>),returns a comparator that compares map.
java.util.Map.Entry.equals(java.lang.Object),compares the specified object with this entry for equality.
java.util.Map.Entry.getKey(),returns the key corresponding to this entry.
java.util.Map.Entry.getValue(),returns the value corresponding to this entry.
java.util.Map.Entry.hashCode(),returns the hash code value for this map entry.
java.util.Map.Entry.setValue(java.util.Map.Entry),replaces the value corresponding to this entry with the specified value (optional operation).
java.util.NavigableMap.ceilingEntry(java.util.NavigableMap),"returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key."
java.util.NavigableMap.ceilingKey(java.util.NavigableMap),"returns the least key greater than or equal to the given key, or null if there is no such key."
java.util.NavigableMap.descendingKeySet(),returns a reverse order navigableset view of the keys contained in this map.
java.util.NavigableMap.descendingMap(),returns a reverse order view of the mappings contained in this map.
java.util.NavigableMap.firstEntry(),"returns a key-value mapping associated with the least key in this map, or null if the map is empty."
java.util.NavigableMap.floorEntry(java.util.NavigableMap),"returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key."
java.util.NavigableMap.floorKey(java.util.NavigableMap),"returns the greatest key less than or equal to the given key, or null if there is no such key."
"java.util.NavigableMap.headMap(java.util.NavigableMap,boolean)","returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) tokey."
java.util.NavigableMap.headMap(java.util.NavigableMap),returns a view of the portion of this map whose keys are strictly less than tokey.
java.util.NavigableMap.higherEntry(java.util.NavigableMap),"returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key."
java.util.NavigableMap.higherKey(java.util.NavigableMap),"returns the least key strictly greater than the given key, or null if there is no such key."
java.util.NavigableMap.lastEntry(),"returns a key-value mapping associated with the greatest key in this map, or null if the map is empty."
java.util.NavigableMap.lowerEntry(java.util.NavigableMap),"returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key."
java.util.NavigableMap.lowerKey(java.util.NavigableMap),"returns the greatest key strictly less than the given key, or null if there is no such key."
java.util.NavigableMap.navigableKeySet(),returns a navigableset view of the keys contained in this map.
java.util.NavigableMap.pollFirstEntry(),"removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty."
java.util.NavigableMap.pollLastEntry(),"removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty."
"java.util.NavigableMap.subMap(java.util.NavigableMap,boolean,java.util.NavigableMap,boolean)",returns a view of the portion of this map whose keys range from fromkey to tokey.
"java.util.NavigableMap.subMap(java.util.NavigableMap,java.util.NavigableMap)","returns a view of the portion of this map whose keys range from fromkey, inclusive, to tokey, exclusive."
"java.util.NavigableMap.tailMap(java.util.NavigableMap,boolean)","returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromkey."
java.util.NavigableMap.tailMap(java.util.NavigableMap),returns a view of the portion of this map whose keys are greater than or equal to fromkey.
java.util.NavigableSet.ceiling(java.util.NavigableSet),"returns the least element in this set greater than or equal to the given element, or null if there is no such element."
java.util.NavigableSet.descendingIterator(),"returns an iterator over the elements in this set, in descending order."
java.util.NavigableSet.descendingSet(),returns a reverse order view of the elements contained in this set.
java.util.NavigableSet.floor(java.util.NavigableSet),"returns the greatest element in this set less than or equal to the given element, or null if there is no such element."
"java.util.NavigableSet.headSet(java.util.NavigableSet,boolean)","returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toelement."
java.util.NavigableSet.headSet(java.util.NavigableSet),returns a view of the portion of this set whose elements are strictly less than toelement.
java.util.NavigableSet.higher(java.util.NavigableSet),"returns the least element in this set strictly greater than the given element, or null if there is no such element."
java.util.NavigableSet.iterator(),"returns an iterator over the elements in this set, in ascending order."
java.util.NavigableSet.lower(java.util.NavigableSet),"returns the greatest element in this set strictly less than the given element, or null if there is no such element."
java.util.NavigableSet.pollFirst(),"retrieves and removes the first (lowest) element, or returns null if this set is empty."
java.util.NavigableSet.pollLast(),"retrieves and removes the last (highest) element, or returns null if this set is empty."
"java.util.NavigableSet.subSet(java.util.NavigableSet,boolean,java.util.NavigableSet,boolean)",returns a view of the portion of this set whose elements range from fromelement to toelement.
"java.util.NavigableSet.subSet(java.util.NavigableSet,java.util.NavigableSet)","returns a view of the portion of this set whose elements range from fromelement, inclusive, to toelement, exclusive."
"java.util.NavigableSet.tailSet(java.util.NavigableSet,boolean)","returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromelement."
java.util.NavigableSet.tailSet(java.util.NavigableSet),returns a view of the portion of this set whose elements are greater than or equal to fromelement.
"java.util.Observer.update(java.util.Observable,java.lang.Object)",this method is called whenever the observed object is changed.
java.util.PrimitiveIterator.forEachRemaining(java.util.PrimitiveIterator),"performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception."
java.util.PrimitiveIterator.OfDouble.forEachRemaining(java.util.function.DoubleConsumer),performs the given action for each remaining element until all elements have been processed or the action throws an exception.
java.util.PrimitiveIterator.OfDouble.forEachRemaining(java.util.function.Consumer<? super java.lang.Double>),performs the given action for each remaining element until all elements have been processed or the action throws an exception.
java.util.PrimitiveIterator.OfDouble.next(),returns the next element in the iteration.
java.util.PrimitiveIterator.OfDouble.nextDouble(),returns the next double element in the iteration.
java.util.PrimitiveIterator.OfInt.forEachRemaining(java.util.function.IntConsumer),performs the given action for each remaining element until all elements have been processed or the action throws an exception.
java.util.PrimitiveIterator.OfInt.forEachRemaining(java.util.function.Consumer<? super java.lang.Integer>),performs the given action for each remaining element until all elements have been processed or the action throws an exception.
java.util.PrimitiveIterator.OfInt.next(),returns the next element in the iteration.
java.util.PrimitiveIterator.OfInt.nextInt(),returns the next int element in the iteration.
java.util.PrimitiveIterator.OfLong.forEachRemaining(java.util.function.LongConsumer),performs the given action for each remaining element until all elements have been processed or the action throws an exception.
java.util.PrimitiveIterator.OfLong.forEachRemaining(java.util.function.Consumer<? super java.lang.Long>),performs the given action for each remaining element until all elements have been processed or the action throws an exception.
java.util.PrimitiveIterator.OfLong.next(),returns the next element in the iteration.
java.util.PrimitiveIterator.OfLong.nextLong(),returns the next long element in the iteration.
java.util.Queue.add(java.util.Queue),"inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an illegalstateexception if no space is currently available."
java.util.Queue.element(),"retrieves, but does not remove, the head of this queue."
java.util.Queue.offer(java.util.Queue),inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.
java.util.Queue.peek(),"retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
java.util.Queue.poll(),"retrieves and removes the head of this queue, or returns null if this queue is empty."
java.util.Queue.remove(),retrieves and removes the head of this queue.
java.util.Set.add(java.util.Set),adds the specified element to this set if it is not already present (optional operation).
java.util.Set.addAll(java.util.Collection<? extends java.util.Set>),adds all of the elements in the specified collection to this set if they're not already present (optional operation).
java.util.Set.clear(),removes all of the elements from this set (optional operation).
java.util.Set.contains(java.lang.Object),returns true if this set contains the specified element.
java.util.Set.containsAll(java.util.Collection<?>),returns true if this set contains all of the elements of the specified collection.
java.util.Set.equals(java.lang.Object),compares the specified object with this set for equality.
java.util.Set.hashCode(),returns the hash code value for this set.
java.util.Set.isEmpty(),returns true if this set contains no elements.
java.util.Set.iterator(),returns an iterator over the elements in this set.
java.util.Set.remove(java.lang.Object),removes the specified element from this set if it is present (optional operation).
java.util.Set.removeAll(java.util.Collection<?>),removes from this set all of its elements that are contained in the specified collection (optional operation).
java.util.Set.retainAll(java.util.Collection<?>),retains only the elements in this set that are contained in the specified collection (optional operation).
java.util.Set.size(),returns the number of elements in this set (its cardinality).
java.util.Set.spliterator(),creates a spliterator over the elements in this set.
java.util.Set.toArray(),returns an array containing all of the elements in this set.
java.util.Set.toArray(T[]),returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array.
java.util.SortedMap.comparator(),"returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys."
java.util.SortedMap.entrySet(),returns a set view of the mappings contained in this map.
java.util.SortedMap.firstKey(),returns the first (lowest) key currently in this map.
java.util.SortedMap.headMap(java.util.SortedMap),returns a view of the portion of this map whose keys are strictly less than tokey.
java.util.SortedMap.keySet(),returns a set view of the keys contained in this map.
java.util.SortedMap.lastKey(),returns the last (highest) key currently in this map.
"java.util.SortedMap.subMap(java.util.SortedMap,java.util.SortedMap)","returns a view of the portion of this map whose keys range from fromkey, inclusive, to tokey, exclusive."
java.util.SortedMap.tailMap(java.util.SortedMap),returns a view of the portion of this map whose keys are greater than or equal to fromkey.
java.util.SortedMap.values(),returns a collection view of the values contained in this map.
java.util.SortedSet.comparator(),"returns the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements."
java.util.SortedSet.first(),returns the first (lowest) element currently in this set.
java.util.SortedSet.headSet(java.util.SortedSet),returns a view of the portion of this set whose elements are strictly less than toelement.
java.util.SortedSet.last(),returns the last (highest) element currently in this set.
java.util.SortedSet.spliterator(),creates a spliterator over the elements in this sorted set.
"java.util.SortedSet.subSet(java.util.SortedSet,java.util.SortedSet)","returns a view of the portion of this set whose elements range from fromelement, inclusive, to toelement, exclusive."
java.util.SortedSet.tailSet(java.util.SortedSet),returns a view of the portion of this set whose elements are greater than or equal to fromelement.
java.util.Spliterator.characteristics(),returns a set of characteristics of this spliterator and its elements.
java.util.Spliterator.estimateSize(),returns an estimate of the number of elements that would be encountered by a foreachremaining(java.
java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super java.util.Spliterator>),"performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception."
java.util.Spliterator.getComparator(),"if this spliterator's source is sorted by a comparator, returns that comparator."
java.util.Spliterator.getExactSizeIfKnown(),"convenience method that returns estimatesize() if this spliterator is sized, else -1."
java.util.Spliterator.hasCharacteristics(int),returns true if this spliterator's characteristics() contain all of the given characteristics.
java.util.Spliterator.tryAdvance(java.util.function.Consumer<? super java.util.Spliterator>),"if a remaining element exists, performs the given action on it, returning true; else returns false."
java.util.Spliterator.trySplit(),"if this spliterator can be partitioned, returns a spliterator covering elements, that will, upon return from this method, not be covered by this spliterator."
java.util.Spliterator.OfDouble.forEachRemaining(java.util.function.Consumer<? super java.lang.Double>),"performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception."
java.util.Spliterator.OfDouble.tryAdvance(java.util.function.Consumer<? super java.lang.Double>),"if a remaining element exists, performs the given action on it, returning true; else returns false."
java.util.Spliterator.OfInt.forEachRemaining(java.util.function.Consumer<? super java.lang.Integer>),"performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception."
java.util.Spliterator.OfInt.tryAdvance(java.util.function.Consumer<? super java.lang.Integer>),"if a remaining element exists, performs the given action on it, returning true; else returns false."
java.util.Spliterator.OfLong.forEachRemaining(java.util.function.Consumer<? super java.lang.Long>),"performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception."
java.util.Spliterator.OfLong.tryAdvance(java.util.function.Consumer<? super java.lang.Long>),"if a remaining element exists, performs the given action on it, returning true; else returns false."
java.util.Spliterator.OfPrimitive.forEachRemaining(java.util.Spliterator.OfPrimitive),"performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception."
java.util.Spliterator.OfPrimitive.tryAdvance(java.util.Spliterator.OfPrimitive),"if a remaining element exists, performs the given action on it, returning true; else returns false."
java.util.AbstractCollection.add(java.util.AbstractCollection),ensures that this collection contains the specified element (optional operation).
java.util.AbstractCollection.addAll(java.util.Collection<? extends java.util.AbstractCollection>),adds all of the elements in the specified collection to this collection (optional operation).
java.util.AbstractCollection.clear(),removes all of the elements from this collection (optional operation).
java.util.AbstractCollection.contains(java.lang.Object),returns true if this collection contains the specified element.
java.util.AbstractCollection.containsAll(java.util.Collection<?>),returns true if this collection contains all of the elements in the specified collection.
java.util.AbstractCollection.isEmpty(),returns true if this collection contains no elements.
java.util.AbstractCollection.iterator(),returns an iterator over the elements contained in this collection.
java.util.AbstractCollection.remove(java.lang.Object),"removes a single instance of the specified element from this collection, if it is present (optional operation)."
java.util.AbstractCollection.removeAll(java.util.Collection<?>),removes all of this collection's elements that are also contained in the specified collection (optional operation).
java.util.AbstractCollection.retainAll(java.util.Collection<?>),retains only the elements in this collection that are contained in the specified collection (optional operation).
java.util.AbstractCollection.toArray(),returns an array containing all of the elements in this collection.
java.util.AbstractCollection.toArray(T[]),returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.
java.util.AbstractCollection.toString(),returns a string representation of this collection.
java.util.AbstractList.add(java.util.AbstractList),appends the specified element to the end of this list (optional operation).
"java.util.AbstractList.add(int,java.util.AbstractList)",inserts the specified element at the specified position in this list (optional operation).
"java.util.AbstractList.addAll(int,java.util.Collection<? extends java.util.AbstractList>)",inserts all of the elements in the specified collection into this list at the specified position (optional operation).
java.util.AbstractList.clear(),removes all of the elements from this list (optional operation).
java.util.AbstractList.equals(java.lang.Object),compares the specified object with this list for equality.
java.util.AbstractList.get(int),returns the element at the specified position in this list.
java.util.AbstractList.hashCode(),returns the hash code value for this list.
java.util.AbstractList.indexOf(java.lang.Object),"returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element."
java.util.AbstractList.iterator(),returns an iterator over the elements in this list in proper sequence.
java.util.AbstractList.lastIndexOf(java.lang.Object),"returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element."
java.util.AbstractList.listIterator(),returns a list iterator over the elements in this list (in proper sequence).
java.util.AbstractList.listIterator(int),"returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list."
java.util.AbstractList.remove(int),removes the element at the specified position in this list (optional operation).
"java.util.AbstractList.removeRange(int,int)","removes from this list all of the elements whose index is between fromindex, inclusive, and toindex, exclusive."
"java.util.AbstractList.set(int,java.util.AbstractList)",replaces the element at the specified position in this list with the specified element (optional operation).
"java.util.AbstractList.subList(int,int)","returns a view of the portion of this list between the specified fromindex, inclusive, and toindex, exclusive."
java.util.AbstractMap.clear(),removes all of the mappings from this map (optional operation).
java.util.AbstractMap.clone(),returns a shallow copy of this abstractmap instance: the keys and values themselves are not cloned.
java.util.AbstractMap.containsKey(java.lang.Object),returns true if this map contains a mapping for the specified key.
java.util.AbstractMap.containsValue(java.lang.Object),returns true if this map maps one or more keys to the specified value.
java.util.AbstractMap.equals(java.lang.Object),compares the specified object with this map for equality.
java.util.AbstractMap.get(java.lang.Object),"returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
java.util.AbstractMap.hashCode(),returns the hash code value for this map.
java.util.AbstractMap.isEmpty(),returns true if this map contains no key-value mappings.
java.util.AbstractMap.keySet(),returns a set view of the keys contained in this map.
"java.util.AbstractMap.put(java.util.AbstractMap,java.util.AbstractMap)",associates the specified value with the specified key in this map (optional operation).
"java.util.AbstractMap.putAll(java.util.Map<? extends,? extends java.util.AbstractMap>)",copies all of the mappings from the specified map to this map (optional operation).
java.util.AbstractMap.remove(java.lang.Object),removes the mapping for a key from this map if it is present (optional operation).
java.util.AbstractMap.size(),returns the number of key-value mappings in this map.
java.util.AbstractMap.toString(),returns a string representation of this map.
java.util.AbstractMap.values(),returns a collection view of the values contained in this map.
java.util.AbstractMap.SimpleEntry.equals(java.lang.Object),compares the specified object with this entry for equality.
java.util.AbstractMap.SimpleEntry.getKey(),returns the key corresponding to this entry.
java.util.AbstractMap.SimpleEntry.getValue(),returns the value corresponding to this entry.
java.util.AbstractMap.SimpleEntry.hashCode(),returns the hash code value for this map entry.
java.util.AbstractMap.SimpleEntry.setValue(java.util.AbstractMap.SimpleEntry),replaces the value corresponding to this entry with the specified value.
java.util.AbstractMap.SimpleEntry.toString(),returns a string representation of this map entry.
java.util.AbstractMap.SimpleImmutableEntry.equals(java.lang.Object),compares the specified object with this entry for equality.
java.util.AbstractMap.SimpleImmutableEntry.getKey(),returns the key corresponding to this entry.
java.util.AbstractMap.SimpleImmutableEntry.getValue(),returns the value corresponding to this entry.
java.util.AbstractMap.SimpleImmutableEntry.hashCode(),returns the hash code value for this map entry.
java.util.AbstractMap.SimpleImmutableEntry.setValue(java.util.AbstractMap.SimpleImmutableEntry),replaces the value corresponding to this entry with the specified value (optional operation).
java.util.AbstractMap.SimpleImmutableEntry.toString(),returns a string representation of this map entry.
java.util.AbstractQueue.add(java.util.AbstractQueue),"inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an illegalstateexception if no space is currently available."
java.util.AbstractQueue.addAll(java.util.Collection<? extends java.util.AbstractQueue>),adds all of the elements in the specified collection to this queue.
java.util.AbstractQueue.clear(),removes all of the elements from this queue.
java.util.AbstractQueue.element(),"retrieves, but does not remove, the head of this queue."
java.util.AbstractQueue.remove(),retrieves and removes the head of this queue.
"java.util.AbstractSequentialList.add(int,java.util.AbstractSequentialList)",inserts the specified element at the specified position in this list (optional operation).
"java.util.AbstractSequentialList.addAll(int,java.util.Collection<? extends java.util.AbstractSequentialList>)",inserts all of the elements in the specified collection into this list at the specified position (optional operation).
java.util.AbstractSequentialList.get(int),returns the element at the specified position in this list.
java.util.AbstractSequentialList.iterator(),returns an iterator over the elements in this list (in proper sequence).
java.util.AbstractSequentialList.listIterator(int),returns a list iterator over the elements in this list (in proper sequence).
java.util.AbstractSequentialList.remove(int),removes the element at the specified position in this list (optional operation).
"java.util.AbstractSequentialList.set(int,java.util.AbstractSequentialList)",replaces the element at the specified position in this list with the specified element (optional operation).
java.util.AbstractSet.equals(java.lang.Object),compares the specified object with this set for equality.
java.util.AbstractSet.hashCode(),returns the hash code value for this set.
java.util.AbstractSet.removeAll(java.util.Collection<?>),removes from this set all of its elements that are contained in the specified collection (optional operation).
java.util.ArrayDeque.add(java.util.ArrayDeque),inserts the specified element at the end of this deque.
java.util.ArrayDeque.addFirst(java.util.ArrayDeque),inserts the specified element at the front of this deque.
java.util.ArrayDeque.addLast(java.util.ArrayDeque),inserts the specified element at the end of this deque.
java.util.ArrayDeque.clear(),removes all of the elements from this deque.
java.util.ArrayDeque.clone(),returns a copy of this deque.
java.util.ArrayDeque.contains(java.lang.Object),returns true if this deque contains the specified element.
java.util.ArrayDeque.element(),"retrieves, but does not remove, the head of the queue represented by this deque."
java.util.ArrayDeque.isEmpty(),returns true if this deque contains no elements.
java.util.ArrayDeque.iterator(),returns an iterator over the elements in this deque.
java.util.ArrayDeque.offer(java.util.ArrayDeque),inserts the specified element at the end of this deque.
java.util.ArrayDeque.offerFirst(java.util.ArrayDeque),inserts the specified element at the front of this deque.
java.util.ArrayDeque.offerLast(java.util.ArrayDeque),inserts the specified element at the end of this deque.
java.util.ArrayDeque.peek(),"retrieves, but does not remove, the head of the queue represented by this deque, or returns null if this deque is empty."
java.util.ArrayDeque.poll(),"retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
java.util.ArrayDeque.pop(),pops an element from the stack represented by this deque.
java.util.ArrayDeque.push(java.util.ArrayDeque),pushes an element onto the stack represented by this deque.
java.util.ArrayDeque.remove(),retrieves and removes the head of the queue represented by this deque.
java.util.ArrayDeque.remove(java.lang.Object),removes a single instance of the specified element from this deque.
java.util.ArrayDeque.removeFirstOccurrence(java.lang.Object),removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail).
java.util.ArrayDeque.removeLastOccurrence(java.lang.Object),removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail).
java.util.ArrayDeque.size(),returns the number of elements in this deque.
java.util.ArrayDeque.spliterator(),creates a late-binding and fail-fast spliterator over the elements in this deque.
java.util.ArrayDeque.toArray(),returns an array containing all of the elements in this deque in proper sequence (from first to last element).
java.util.ArrayDeque.toArray(T[]),returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
java.util.ArrayList.add(java.util.ArrayList),appends the specified element to the end of this list.
"java.util.ArrayList.add(int,java.util.ArrayList)",inserts the specified element at the specified position in this list.
java.util.ArrayList.addAll(java.util.Collection<? extends java.util.ArrayList>),"appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator."
"java.util.ArrayList.addAll(int,java.util.Collection<? extends java.util.ArrayList>)","inserts all of the elements in the specified collection into this list, starting at the specified position."
java.util.ArrayList.clear(),removes all of the elements from this list.
java.util.ArrayList.clone(),returns a shallow copy of this arraylist instance.
java.util.ArrayList.contains(java.lang.Object),returns true if this list contains the specified element.
java.util.ArrayList.ensureCapacity(int),"increases the capacity of this arraylist instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument."
java.util.ArrayList.get(int),returns the element at the specified position in this list.
java.util.ArrayList.indexOf(java.lang.Object),"returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element."
java.util.ArrayList.isEmpty(),returns true if this list contains no elements.
java.util.ArrayList.iterator(),returns an iterator over the elements in this list in proper sequence.
java.util.ArrayList.lastIndexOf(java.lang.Object),"returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element."
java.util.ArrayList.listIterator(int),"returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list."
java.util.ArrayList.listIterator(),returns a list iterator over the elements in this list (in proper sequence).
java.util.ArrayList.remove(int),removes the element at the specified position in this list.
java.util.ArrayList.remove(java.lang.Object),"removes the first occurrence of the specified element from this list, if it is present."
java.util.ArrayList.removeAll(java.util.Collection<?>),removes from this list all of its elements that are contained in the specified collection.
"java.util.ArrayList.removeRange(int,int)","removes from this list all of the elements whose index is between fromindex, inclusive, and toindex, exclusive."
java.util.ArrayList.retainAll(java.util.Collection<?>),retains only the elements in this list that are contained in the specified collection.
"java.util.ArrayList.set(int,java.util.ArrayList)",replaces the element at the specified position in this list with the specified element.
java.util.ArrayList.size(),returns the number of elements in this list.
java.util.ArrayList.spliterator(),creates a late-binding and fail-fast spliterator over the elements in this list.
"java.util.ArrayList.subList(int,int)","returns a view of the portion of this list between the specified fromindex, inclusive, and toindex, exclusive."
java.util.ArrayList.toArray(),returns an array containing all of the elements in this list in proper sequence (from first to last element).
java.util.ArrayList.toArray(T[]),returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
java.util.ArrayList.trimToSize(),trims the capacity of this arraylist instance to be the list's current size.
java.util.Arrays.asList(T...),returns a fixed-size list backed by the specified array.
"java.util.Arrays.binarySearch(long[],long)",searches the specified array of longs for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(long[],int,int,long)",searches a range of the specified array of longs for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(int[],int)",searches the specified array of ints for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(int[],int,int,int)",searches a range of the specified array of ints for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(short[],short)",searches the specified array of shorts for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(short[],int,int,short)",searches a range of the specified array of shorts for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(char[],char)",searches the specified array of chars for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(char[],int,int,char)",searches a range of the specified array of chars for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(byte[],byte)",searches the specified array of bytes for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(byte[],int,int,byte)",searches a range of the specified array of bytes for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(double[],double)",searches the specified array of doubles for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(double[],int,int,double)",searches a range of the specified array of doubles for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(float[],float)",searches the specified array of floats for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(float[],int,int,float)",searches a range of the specified array of floats for the specified value using the binary search algorithm.
"java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)",searches the specified array for the specified object using the binary search algorithm.
"java.util.Arrays.binarySearch(java.lang.Object[],int,int,java.lang.Object)",searches a range of the specified array for the specified object using the binary search algorithm.
"java.util.Arrays.binarySearch(T[],T,java.util.Comparator<? super T>)",searches the specified array for the specified object using the binary search algorithm.
"java.util.Arrays.binarySearch(T[],int,int,T,java.util.Comparator<? super T>)",searches a range of the specified array for the specified object using the binary search algorithm.
"java.util.Arrays.copyOf(T[],int)","copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length."
"java.util.Arrays.copyOf(U[],int,java.lang.Class<? extends T[]>)","copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length."
"java.util.Arrays.copyOf(byte[],int)","copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
"java.util.Arrays.copyOf(short[],int)","copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
"java.util.Arrays.copyOf(int[],int)","copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
"java.util.Arrays.copyOf(long[],int)","copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
"java.util.Arrays.copyOf(char[],int)","copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length."
"java.util.Arrays.copyOf(float[],int)","copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
"java.util.Arrays.copyOf(double[],int)","copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
"java.util.Arrays.copyOf(boolean[],int)","copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length."
"java.util.Arrays.copyOfRange(T[],int,int)",copies the specified range of the specified array into a new array.
"java.util.Arrays.copyOfRange(U[],int,int,java.lang.Class<? extends T[]>)",copies the specified range of the specified array into a new array.
"java.util.Arrays.copyOfRange(byte[],int,int)",copies the specified range of the specified array into a new array.
"java.util.Arrays.copyOfRange(short[],int,int)",copies the specified range of the specified array into a new array.
"java.util.Arrays.copyOfRange(int[],int,int)",copies the specified range of the specified array into a new array.
"java.util.Arrays.copyOfRange(long[],int,int)",copies the specified range of the specified array into a new array.
"java.util.Arrays.copyOfRange(char[],int,int)",copies the specified range of the specified array into a new array.
"java.util.Arrays.copyOfRange(float[],int,int)",copies the specified range of the specified array into a new array.
"java.util.Arrays.copyOfRange(double[],int,int)",copies the specified range of the specified array into a new array.
"java.util.Arrays.copyOfRange(boolean[],int,int)",copies the specified range of the specified array into a new array.
"java.util.Arrays.deepEquals(java.lang.Object[],java.lang.Object[])",returns true if the two specified arrays are deeply equal to one another.
java.util.Arrays.deepHashCode(java.lang.Object[]),"returns a hash code based on the ""deep contents"" of the specified array."
java.util.Arrays.deepToString(java.lang.Object[]),"returns a string representation of the ""deep contents"" of the specified array."
"java.util.Arrays.equals(long[],long[])",returns true if the two specified arrays of longs are equal to one another.
"java.util.Arrays.equals(int[],int[])",returns true if the two specified arrays of ints are equal to one another.
"java.util.Arrays.equals(short[],short[])",returns true if the two specified arrays of shorts are equal to one another.
"java.util.Arrays.equals(char[],char[])",returns true if the two specified arrays of chars are equal to one another.
"java.util.Arrays.equals(byte[],byte[])",returns true if the two specified arrays of bytes are equal to one another.
"java.util.Arrays.equals(boolean[],boolean[])",returns true if the two specified arrays of booleans are equal to one another.
"java.util.Arrays.equals(double[],double[])",returns true if the two specified arrays of doubles are equal to one another.
"java.util.Arrays.equals(float[],float[])",returns true if the two specified arrays of floats are equal to one another.
"java.util.Arrays.equals(java.lang.Object[],java.lang.Object[])",returns true if the two specified arrays of objects are equal to one another.
"java.util.Arrays.fill(long[],long)",assigns the specified long value to each element of the specified array of longs.
"java.util.Arrays.fill(long[],int,int,long)",assigns the specified long value to each element of the specified range of the specified array of longs.
"java.util.Arrays.fill(int[],int)",assigns the specified int value to each element of the specified array of ints.
"java.util.Arrays.fill(int[],int,int,int)",assigns the specified int value to each element of the specified range of the specified array of ints.
"java.util.Arrays.fill(short[],short)",assigns the specified short value to each element of the specified array of shorts.
"java.util.Arrays.fill(short[],int,int,short)",assigns the specified short value to each element of the specified range of the specified array of shorts.
"java.util.Arrays.fill(char[],char)",assigns the specified char value to each element of the specified array of chars.
"java.util.Arrays.fill(char[],int,int,char)",assigns the specified char value to each element of the specified range of the specified array of chars.
"java.util.Arrays.fill(byte[],byte)",assigns the specified byte value to each element of the specified array of bytes.
"java.util.Arrays.fill(byte[],int,int,byte)",assigns the specified byte value to each element of the specified range of the specified array of bytes.
"java.util.Arrays.fill(boolean[],boolean)",assigns the specified boolean value to each element of the specified array of booleans.
"java.util.Arrays.fill(boolean[],int,int,boolean)",assigns the specified boolean value to each element of the specified range of the specified array of booleans.
"java.util.Arrays.fill(double[],double)",assigns the specified double value to each element of the specified array of doubles.
"java.util.Arrays.fill(double[],int,int,double)",assigns the specified double value to each element of the specified range of the specified array of doubles.
"java.util.Arrays.fill(float[],float)",assigns the specified float value to each element of the specified array of floats.
"java.util.Arrays.fill(float[],int,int,float)",assigns the specified float value to each element of the specified range of the specified array of floats.
"java.util.Arrays.fill(java.lang.Object[],java.lang.Object)",assigns the specified object reference to each element of the specified array of objects.
"java.util.Arrays.fill(java.lang.Object[],int,int,java.lang.Object)",assigns the specified object reference to each element of the specified range of the specified array of objects.
java.util.Arrays.hashCode(long[]),returns a hash code based on the contents of the specified array.
java.util.Arrays.hashCode(int[]),returns a hash code based on the contents of the specified array.
java.util.Arrays.hashCode(short[]),returns a hash code based on the contents of the specified array.
java.util.Arrays.hashCode(char[]),returns a hash code based on the contents of the specified array.
java.util.Arrays.hashCode(byte[]),returns a hash code based on the contents of the specified array.
java.util.Arrays.hashCode(boolean[]),returns a hash code based on the contents of the specified array.
java.util.Arrays.hashCode(float[]),returns a hash code based on the contents of the specified array.
java.util.Arrays.hashCode(double[]),returns a hash code based on the contents of the specified array.
java.util.Arrays.hashCode(java.lang.Object[]),returns a hash code based on the contents of the specified array.
"java.util.Arrays.parallelPrefix(T[],java.util.function.BinaryOperator<T>)","cumulates, in parallel, each element of the given array in place, using the supplied function."
"java.util.Arrays.parallelPrefix(T[],int,int,java.util.function.BinaryOperator<T>)","performs parallelprefix(object[], binaryoperator) for the given subrange of the array."
"java.util.Arrays.parallelPrefix(long[],java.util.function.LongBinaryOperator)","cumulates, in parallel, each element of the given array in place, using the supplied function."
"java.util.Arrays.parallelPrefix(long[],int,int,java.util.function.LongBinaryOperator)","performs parallelprefix(long[], longbinaryoperator) for the given subrange of the array."
"java.util.Arrays.parallelPrefix(double[],java.util.function.DoubleBinaryOperator)","cumulates, in parallel, each element of the given array in place, using the supplied function."
"java.util.Arrays.parallelPrefix(double[],int,int,java.util.function.DoubleBinaryOperator)","performs parallelprefix(double[], doublebinaryoperator) for the given subrange of the array."
"java.util.Arrays.parallelPrefix(int[],java.util.function.IntBinaryOperator)","cumulates, in parallel, each element of the given array in place, using the supplied function."
"java.util.Arrays.parallelPrefix(int[],int,int,java.util.function.IntBinaryOperator)","performs parallelprefix(int[], intbinaryoperator) for the given subrange of the array."
"java.util.Arrays.parallelSetAll(T[],java.util.function.IntFunction<? extends T>)","set all elements of the specified array, in parallel, using the provided generator function to compute each element."
"java.util.Arrays.parallelSetAll(int[],java.util.function.IntUnaryOperator)","set all elements of the specified array, in parallel, using the provided generator function to compute each element."
"java.util.Arrays.parallelSetAll(long[],java.util.function.IntToLongFunction)","set all elements of the specified array, in parallel, using the provided generator function to compute each element."
"java.util.Arrays.parallelSetAll(double[],java.util.function.IntToDoubleFunction)","set all elements of the specified array, in parallel, using the provided generator function to compute each element."
java.util.Arrays.parallelSort(byte[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.parallelSort(byte[],int,int)",sorts the specified range of the array into ascending numerical order.
java.util.Arrays.parallelSort(char[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.parallelSort(char[],int,int)",sorts the specified range of the array into ascending numerical order.
java.util.Arrays.parallelSort(short[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.parallelSort(short[],int,int)",sorts the specified range of the array into ascending numerical order.
java.util.Arrays.parallelSort(int[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.parallelSort(int[],int,int)",sorts the specified range of the array into ascending numerical order.
java.util.Arrays.parallelSort(long[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.parallelSort(long[],int,int)",sorts the specified range of the array into ascending numerical order.
java.util.Arrays.parallelSort(float[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.parallelSort(float[],int,int)",sorts the specified range of the array into ascending numerical order.
java.util.Arrays.parallelSort(double[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.parallelSort(double[],int,int)",sorts the specified range of the array into ascending numerical order.
java.util.Arrays.parallelSort(T[]),"sorts the specified array of objects into ascending order, according to the natural ordering of its elements."
"java.util.Arrays.parallelSort(T[],int,int)","sorts the specified range of the specified array of objects into ascending order, according to the natural ordering of its elements."
"java.util.Arrays.parallelSort(T[],java.util.Comparator<? super T>)",sorts the specified array of objects according to the order induced by the specified comparator.
"java.util.Arrays.parallelSort(T[],int,int,java.util.Comparator<? super T>)",sorts the specified range of the specified array of objects according to the order induced by the specified comparator.
"java.util.Arrays.setAll(T[],java.util.function.IntFunction<? extends T>)","set all elements of the specified array, using the provided generator function to compute each element."
"java.util.Arrays.setAll(int[],java.util.function.IntUnaryOperator)","set all elements of the specified array, using the provided generator function to compute each element."
"java.util.Arrays.setAll(long[],java.util.function.IntToLongFunction)","set all elements of the specified array, using the provided generator function to compute each element."
"java.util.Arrays.setAll(double[],java.util.function.IntToDoubleFunction)","set all elements of the specified array, using the provided generator function to compute each element."
java.util.Arrays.sort(int[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.sort(int[],int,int)",sorts the specified range of the array into ascending order.
java.util.Arrays.sort(long[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.sort(long[],int,int)",sorts the specified range of the array into ascending order.
java.util.Arrays.sort(short[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.sort(short[],int,int)",sorts the specified range of the array into ascending order.
java.util.Arrays.sort(char[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.sort(char[],int,int)",sorts the specified range of the array into ascending order.
java.util.Arrays.sort(byte[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.sort(byte[],int,int)",sorts the specified range of the array into ascending order.
java.util.Arrays.sort(float[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.sort(float[],int,int)",sorts the specified range of the array into ascending order.
java.util.Arrays.sort(double[]),sorts the specified array into ascending numerical order.
"java.util.Arrays.sort(double[],int,int)",sorts the specified range of the array into ascending order.
java.util.Arrays.sort(java.lang.Object[]),"sorts the specified array of objects into ascending order, according to the natural ordering of its elements."
"java.util.Arrays.sort(java.lang.Object[],int,int)","sorts the specified range of the specified array of objects into ascending order, according to the natural ordering of its elements."
"java.util.Arrays.sort(T[],java.util.Comparator<? super T>)",sorts the specified array of objects according to the order induced by the specified comparator.
"java.util.Arrays.sort(T[],int,int,java.util.Comparator<? super T>)",sorts the specified range of the specified array of objects according to the order induced by the specified comparator.
java.util.Arrays.spliterator(T[]),returns a spliterator covering all of the specified array.
"java.util.Arrays.spliterator(T[],int,int)",returns a spliterator covering the specified range of the specified array.
java.util.Arrays.spliterator(int[]),returns a spliterator.
"java.util.Arrays.spliterator(int[],int,int)",returns a spliterator.
java.util.Arrays.spliterator(long[]),returns a spliterator.
"java.util.Arrays.spliterator(long[],int,int)",returns a spliterator.
java.util.Arrays.spliterator(double[]),returns a spliterator.
"java.util.Arrays.spliterator(double[],int,int)",returns a spliterator.
java.util.Arrays.stream(T[]),returns a sequential stream with the specified array as its source.
"java.util.Arrays.stream(T[],int,int)",returns a sequential stream with the specified range of the specified array as its source.
java.util.Arrays.stream(int[]),returns a sequential intstream with the specified array as its source.
"java.util.Arrays.stream(int[],int,int)",returns a sequential intstream with the specified range of the specified array as its source.
java.util.Arrays.stream(long[]),returns a sequential longstream with the specified array as its source.
"java.util.Arrays.stream(long[],int,int)",returns a sequential longstream with the specified range of the specified array as its source.
java.util.Arrays.stream(double[]),returns a sequential doublestream with the specified array as its source.
"java.util.Arrays.stream(double[],int,int)",returns a sequential doublestream with the specified range of the specified array as its source.
java.util.Arrays.toString(long[]),returns a string representation of the contents of the specified array.
java.util.Arrays.toString(int[]),returns a string representation of the contents of the specified array.
java.util.Arrays.toString(short[]),returns a string representation of the contents of the specified array.
java.util.Arrays.toString(char[]),returns a string representation of the contents of the specified array.
java.util.Arrays.toString(byte[]),returns a string representation of the contents of the specified array.
java.util.Arrays.toString(boolean[]),returns a string representation of the contents of the specified array.
java.util.Arrays.toString(float[]),returns a string representation of the contents of the specified array.
java.util.Arrays.toString(double[]),returns a string representation of the contents of the specified array.
java.util.Arrays.toString(java.lang.Object[]),returns a string representation of the contents of the specified array.
java.util.Base64.getDecoder(),returns a base64.
java.util.Base64.getEncoder(),returns a base64.
java.util.Base64.getMimeDecoder(),returns a base64.
java.util.Base64.getMimeEncoder(),returns a base64.
"java.util.Base64.getMimeEncoder(int,byte[])",returns a base64.
java.util.Base64.getUrlDecoder(),returns a base64.
java.util.Base64.getUrlEncoder(),returns a base64.
java.util.Base64.Decoder.decode(byte[]),"decodes all bytes from the input byte array using the base64 encoding scheme, writing the results into a newly-allocated output byte array."
java.util.Base64.Decoder.decode(java.lang.String),decodes a base64 encoded string into a newly-allocated byte array using the base64 encoding scheme.
"java.util.Base64.Decoder.decode(byte[],byte[])","decodes all bytes from the input byte array using the base64 encoding scheme, writing the results into the given output byte array, starting at offset 0."
java.util.Base64.Decoder.decode(java.nio.ByteBuffer),"decodes all bytes from the input byte buffer using the base64 encoding scheme, writing the results into a newly-allocated bytebuffer."
java.util.Base64.Decoder.wrap(java.io.InputStream),returns an input stream for decoding base64 encoded byte stream.
java.util.Base64.Encoder.encode(byte[]),encodes all bytes from the specified byte array into a newly-allocated byte array using the base64 encoding scheme.
"java.util.Base64.Encoder.encode(byte[],byte[])","encodes all bytes from the specified byte array using the base64 encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0."
java.util.Base64.Encoder.encode(java.nio.ByteBuffer),encodes all remaining bytes from the specified byte buffer into a newly-allocated bytebuffer using the base64 encoding scheme.
java.util.Base64.Encoder.encodeToString(byte[]),encodes the specified byte array into a string using the base64 encoding scheme.
java.util.Base64.Encoder.withoutPadding(),"returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data."
java.util.Base64.Encoder.wrap(java.io.OutputStream),wraps an output stream for encoding byte data using the base64 encoding scheme.
java.util.BitSet.and(java.util.BitSet),performs a logical and of this target bit set with the argument bit set.
java.util.BitSet.andNot(java.util.BitSet),clears all of the bits in this bitset whose corresponding bit is set in the specified bitset.
java.util.BitSet.cardinality(),returns the number of bits set to true in this bitset.
java.util.BitSet.clear(int),sets the bit specified by the index to false.
"java.util.BitSet.clear(int,int)",sets the bits from the specified fromindex (inclusive) to the specified toindex (exclusive) to false.
java.util.BitSet.clear(),sets all of the bits in this bitset to false.
java.util.BitSet.clone(),cloning this bitset produces a new bitset that is equal to it.
java.util.BitSet.equals(java.lang.Object),compares this object against the specified object.
java.util.BitSet.flip(int),sets the bit at the specified index to the complement of its current value.
"java.util.BitSet.flip(int,int)",sets each bit from the specified fromindex (inclusive) to the specified toindex (exclusive) to the complement of its current value.
java.util.BitSet.get(int),returns the value of the bit with the specified index.
"java.util.BitSet.get(int,int)",returns a new bitset composed of bits from this bitset from fromindex (inclusive) to toindex (exclusive).
java.util.BitSet.hashCode(),returns the hash code value for this bit set.
java.util.BitSet.intersects(java.util.BitSet),returns true if the specified bitset has any bits set to true that are also set to true in this bitset.
java.util.BitSet.isEmpty(),returns true if this bitset contains no bits that are set to true.
java.util.BitSet.length(),"returns the ""logical size"" of this bitset: the index of the highest set bit in the bitset plus one."
java.util.BitSet.nextClearBit(int),returns the index of the first bit that is set to false that occurs on or after the specified starting index.
java.util.BitSet.nextSetBit(int),returns the index of the first bit that is set to true that occurs on or after the specified starting index.
java.util.BitSet.or(java.util.BitSet),performs a logical or of this bit set with the bit set argument.
java.util.BitSet.previousClearBit(int),returns the index of the nearest bit that is set to false that occurs on or before the specified starting index.
java.util.BitSet.previousSetBit(int),returns the index of the nearest bit that is set to true that occurs on or before the specified starting index.
java.util.BitSet.set(int),sets the bit at the specified index to true.
"java.util.BitSet.set(int,boolean)",sets the bit at the specified index to the specified value.
"java.util.BitSet.set(int,int)",sets the bits from the specified fromindex (inclusive) to the specified toindex (exclusive) to true.
"java.util.BitSet.set(int,int,boolean)",sets the bits from the specified fromindex (inclusive) to the specified toindex (exclusive) to the specified value.
java.util.BitSet.size(),returns the number of bits of space actually in use by this bitset to represent bit values.
java.util.BitSet.stream(),returns a stream of indices for which this bitset contains a bit in the set state.
java.util.BitSet.toByteArray(),returns a new byte array containing all the bits in this bit set.
java.util.BitSet.toLongArray(),returns a new long array containing all the bits in this bit set.
java.util.BitSet.toString(),returns a string representation of this bit set.
java.util.BitSet.valueOf(long[]),returns a new bit set containing all the bits in the given long array.
java.util.BitSet.valueOf(java.nio.LongBuffer),returns a new bit set containing all the bits in the given long buffer between its position and limit.
java.util.BitSet.valueOf(byte[]),returns a new bit set containing all the bits in the given byte array.
java.util.BitSet.valueOf(java.nio.ByteBuffer),returns a new bit set containing all the bits in the given byte buffer between its position and limit.
java.util.BitSet.xor(java.util.BitSet),performs a logical xor of this bit set with the bit set argument.
"java.util.Calendar.add(int,int)","adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules."
java.util.Calendar.after(java.lang.Object),returns whether this calendar represents a time after the time represented by the specified object.
java.util.Calendar.before(java.lang.Object),returns whether this calendar represents a time before the time represented by the specified object.
java.util.Calendar.clear(),sets all the calendar field values and the time value (millisecond offset from the epoch) of this calendar undefined.
java.util.Calendar.clear(int),sets the given calendar field value and the time value (millisecond offset from the epoch) of this calendar undefined.
java.util.Calendar.clone(),creates and returns a copy of this object.
java.util.Calendar.compareTo(java.util.Calendar),compares the time values (millisecond offsets from the epoch) represented by two calendar objects.
java.util.Calendar.complete(),fills in any unset fields in the calendar fields.
java.util.Calendar.computeFields(),converts the current millisecond time value time to calendar field values in fields[].
java.util.Calendar.computeTime(),converts the current calendar field values in fields[] to the millisecond time value time.
java.util.Calendar.equals(java.lang.Object),compares this calendar to the specified object.
java.util.Calendar.get(int),returns the value of the given calendar field.
java.util.Calendar.getActualMaximum(int),"returns the maximum value that the specified calendar field could have, given the time value of this calendar."
java.util.Calendar.getActualMinimum(int),"returns the minimum value that the specified calendar field could have, given the time value of this calendar."
java.util.Calendar.getAvailableCalendarTypes(),returns an unmodifiable set containing all calendar types supported by calendar in the runtime environment.
java.util.Calendar.getAvailableLocales(),returns an array of all locales for which the getinstance methods of this class can return localized instances.
java.util.Calendar.getCalendarType(),returns the calendar type of this calendar.
"java.util.Calendar.getDisplayName(int,int,java.util.Locale)",returns the string representation of the calendar field value in the given style and locale.
"java.util.Calendar.getDisplayNames(int,int,java.util.Locale)",returns a map containing all names of the calendar field in the given style and locale and their corresponding field values.
java.util.Calendar.getFirstDayOfWeek(),gets what the first day of the week is; e.
java.util.Calendar.getGreatestMinimum(int),returns the highest minimum value for the given calendar field of this calendar instance.
java.util.Calendar.getInstance(),gets a calendar using the default time zone and locale.
java.util.Calendar.getInstance(java.util.TimeZone),gets a calendar using the specified time zone and default locale.
java.util.Calendar.getInstance(java.util.Locale),gets a calendar using the default time zone and specified locale.
"java.util.Calendar.getInstance(java.util.TimeZone,java.util.Locale)",gets a calendar with the specified time zone and locale.
java.util.Calendar.getLeastMaximum(int),returns the lowest maximum value for the given calendar field of this calendar instance.
java.util.Calendar.getMaximum(int),returns the maximum value for the given calendar field of this calendar instance.
java.util.Calendar.getMinimalDaysInFirstWeek(),gets what the minimal days required in the first week of the year are; e.
java.util.Calendar.getMinimum(int),returns the minimum value for the given calendar field of this calendar instance.
java.util.Calendar.getTime(),"returns a date object representing this calendar's time value (millisecond offset from the epoch"")."
java.util.Calendar.getTimeInMillis(),returns this calendar's time value in milliseconds.
java.util.Calendar.getTimeZone(),gets the time zone.
java.util.Calendar.getWeeksInWeekYear(),returns the number of weeks in the week year represented by this calendar.
java.util.Calendar.getWeekYear(),returns the week year represented by this calendar.
java.util.Calendar.hashCode(),returns a hash code for this calendar.
java.util.Calendar.internalGet(int),returns the value of the given calendar field.
java.util.Calendar.isLenient(),tells whether date/time interpretation is to be lenient.
java.util.Calendar.isSet(int),"determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a get method call."
java.util.Calendar.isWeekDateSupported(),returns whether this calendar supports week dates.
"java.util.Calendar.roll(int,boolean)",adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields.
"java.util.Calendar.roll(int,int)",adds the specified (signed) amount to the specified calendar field without changing larger fields.
"java.util.Calendar.set(int,int)",sets the given calendar field to the given value.
"java.util.Calendar.set(int,int,int)","sets the values for the calendar fields year, month, and day_of_month."
"java.util.Calendar.set(int,int,int,int,int)","sets the values for the calendar fields year, month, day_of_month, hour_of_day, and minute."
"java.util.Calendar.set(int,int,int,int,int,int)","sets the values for the fields year, month, day_of_month, hour_of_day, minute, and second."
java.util.Calendar.setFirstDayOfWeek(int),sets what the first day of the week is; e.
java.util.Calendar.setLenient(boolean),specifies whether or not date/time interpretation is to be lenient.
java.util.Calendar.setMinimalDaysInFirstWeek(int),"sets what the minimal days required in the first week of the year are; for example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1."
java.util.Calendar.setTime(java.util.Date),sets this calendar's time with the given date.
java.util.Calendar.setTimeInMillis(long),sets this calendar's current time from the given long value.
java.util.Calendar.setTimeZone(java.util.TimeZone),sets the time zone with the given time zone value.
"java.util.Calendar.setWeekDate(int,int,int)","sets the date of this calendar with the the given date specifiers - week year, week of year, and day of week."
java.util.Calendar.toInstant(),converts this object to an instant.
java.util.Calendar.toString(),return a string representation of this calendar.
java.util.Calendar.Builder.build(),returns a calendar built from the parameters set by the setter methods.
"java.util.Calendar.Builder.set(int,int)",sets the field parameter to the given value.
java.util.Calendar.Builder.setCalendarType(java.lang.String),sets the calendar type parameter to the given type.
"java.util.Calendar.Builder.setDate(int,int,int)","sets the date field parameters to the values given by year, month, and dayofmonth."
java.util.Calendar.Builder.setFields(int...),sets field parameters to their values given by fieldvaluepairs that are pairs of a field and its value.
java.util.Calendar.Builder.setInstant(long),sets the instant parameter to the given instant value that is a millisecond offset from the epoch.
java.util.Calendar.Builder.setInstant(java.util.Date),sets the instant parameter to the instant value given by a date.
java.util.Calendar.Builder.setLenient(boolean),sets the lenient mode parameter to the value given by lenient.
java.util.Calendar.Builder.setLocale(java.util.Locale),sets the locale parameter to the given locale.
"java.util.Calendar.Builder.setTimeOfDay(int,int,int)","sets the time of day field parameters to the values given by hourofday, minute, and second."
"java.util.Calendar.Builder.setTimeOfDay(int,int,int,int)","sets the time of day field parameters to the values given by hourofday, minute, second, and millis."
java.util.Calendar.Builder.setTimeZone(java.util.TimeZone),sets the time zone parameter to the given zone.
"java.util.Calendar.Builder.setWeekDate(int,int,int)","sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week."
"java.util.Calendar.Builder.setWeekDefinition(int,int)",sets the week definition parameters to the values given by firstdayofweek and minimaldaysinfirstweek that are used to determine the first week of a year.
"java.util.Collections.addAll(java.util.Collection<? super T>,T...)",adds all of the specified elements to the specified collection.
java.util.Collections.asLifoQueue(java.util.Deque<T>),returns a view of a deque as a last-in-first-out (lifo) queue.
"java.util.Collections.binarySearch(java.util.List<? extends java.lang.Comparable<? super T>>,T)",searches the specified list for the specified object using the binary search algorithm.
"java.util.Collections.binarySearch(java.util.List<? extends T>,T,java.util.Comparator<? super T>)",searches the specified list for the specified object using the binary search algorithm.
"java.util.Collections.checkedCollection(java.util.Collection<E>,java.lang.Class<E>)",returns a dynamically typesafe view of the specified collection.
"java.util.Collections.checkedList(java.util.List<E>,java.lang.Class<E>)",returns a dynamically typesafe view of the specified list.
"java.util.Collections.checkedMap(,V>,java.lang.Class<K>,java.lang.Class<V>)",returns a dynamically typesafe view of the specified map.
"java.util.Collections.checkedNavigableMap(,V>,java.lang.Class<K>,java.lang.Class<V>)",returns a dynamically typesafe view of the specified navigable map.
"java.util.Collections.checkedNavigableSet(java.util.NavigableSet<E>,java.lang.Class<E>)",returns a dynamically typesafe view of the specified navigable set.
"java.util.Collections.checkedQueue(java.util.Queue<E>,java.lang.Class<E>)",returns a dynamically typesafe view of the specified queue.
"java.util.Collections.checkedSet(java.util.Set<E>,java.lang.Class<E>)",returns a dynamically typesafe view of the specified set.
"java.util.Collections.checkedSortedMap(,V>,java.lang.Class<K>,java.lang.Class<V>)",returns a dynamically typesafe view of the specified sorted map.
"java.util.Collections.checkedSortedSet(java.util.SortedSet<E>,java.lang.Class<E>)",returns a dynamically typesafe view of the specified sorted set.
"java.util.Collections.copy(java.util.List<? super T>,java.util.List<? extends T>)",copies all of the elements from one list into another.
"java.util.Collections.disjoint(java.util.Collection<?>,java.util.Collection<?>)",returns true if the two specified collections have no elements in common.
java.util.Collections.emptyEnumeration(),returns an enumeration that has no elements.
java.util.Collections.emptyIterator(),returns an iterator that has no elements.
java.util.Collections.emptyList(),returns an empty list (immutable).
java.util.Collections.emptyListIterator(),returns a list iterator that has no elements.
java.util.Collections.emptyMap(),returns an empty map (immutable).
java.util.Collections.emptyNavigableMap(),returns an empty navigable map (immutable).
java.util.Collections.emptyNavigableSet(),returns an empty navigable set (immutable).
java.util.Collections.emptySet(),returns an empty set (immutable).
java.util.Collections.emptySortedMap(),returns an empty sorted map (immutable).
java.util.Collections.emptySortedSet(),returns an empty sorted set (immutable).
java.util.Collections.enumeration(java.util.Collection<T>),returns an enumeration over the specified collection.
"java.util.Collections.fill(java.util.List<? super T>,T)",replaces all of the elements of the specified list with the specified element.
"java.util.Collections.frequency(java.util.Collection<?>,java.lang.Object)",returns the number of elements in the specified collection equal to the specified object.
"java.util.Collections.indexOfSubList(java.util.List<?>,java.util.List<?>)","returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."
"java.util.Collections.lastIndexOfSubList(java.util.List<?>,java.util.List<?>)","returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."
java.util.Collections.list(java.util.Enumeration<T>),returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration.
java.util.Collections.max(java.util.Collection<? extends T>),"returns the maximum element of the given collection, according to the natural ordering of its elements."
"java.util.Collections.max(java.util.Collection<? extends T>,java.util.Comparator<? super T>)","returns the maximum element of the given collection, according to the order induced by the specified comparator."
java.util.Collections.min(java.util.Collection<? extends T>),"returns the minimum element of the given collection, according to the natural ordering of its elements."
"java.util.Collections.min(java.util.Collection<? extends T>,java.util.Comparator<? super T>)","returns the minimum element of the given collection, according to the order induced by the specified comparator."
"java.util.Collections.nCopies(int,T)",returns an immutable list consisting of n copies of the specified object.
"java.util.Collections.newSetFromMap(,java.lang.Boolean>)",returns a set backed by the specified map.
"java.util.Collections.replaceAll(java.util.List<T>,T,T)",replaces all occurrences of one specified value in a list with another.
java.util.Collections.reverse(java.util.List<?>),reverses the order of the elements in the specified list.
java.util.Collections.reverseOrder(),returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the comparable interface.
java.util.Collections.reverseOrder(java.util.Comparator<T>),returns a comparator that imposes the reverse ordering of the specified comparator.
"java.util.Collections.rotate(java.util.List<?>,int)",rotates the elements in the specified list by the specified distance.
java.util.Collections.shuffle(java.util.List<?>),randomly permutes the specified list using a default source of randomness.
"java.util.Collections.shuffle(java.util.List<?>,java.util.Random)",randomly permute the specified list using the specified source of randomness.
java.util.Collections.singleton(T),returns an immutable set containing only the specified object.
java.util.Collections.singletonList(T),returns an immutable list containing only the specified object.
"java.util.Collections.singletonMap(K,V)","returns an immutable map, mapping only the specified key to the specified value."
java.util.Collections.sort(java.util.List<T>),"sorts the specified list into ascending order, according to the natural ordering of its elements."
"java.util.Collections.sort(java.util.List<T>,java.util.Comparator<? super T>)",sorts the specified list according to the order induced by the specified comparator.
"java.util.Collections.swap(java.util.List<?>,int,int)",swaps the elements at the specified positions in the specified list.
java.util.Collections.synchronizedCollection(java.util.Collection<T>),returns a synchronized (thread-safe) collection backed by the specified collection.
java.util.Collections.synchronizedList(java.util.List<T>),returns a synchronized (thread-safe) list backed by the specified list.
"java.util.Collections.synchronizedMap(,V>)",returns a synchronized (thread-safe) map backed by the specified map.
"java.util.Collections.synchronizedNavigableMap(,V>)",returns a synchronized (thread-safe) navigable map backed by the specified navigable map.
java.util.Collections.synchronizedNavigableSet(java.util.NavigableSet<T>),returns a synchronized (thread-safe) navigable set backed by the specified navigable set.
java.util.Collections.synchronizedSet(java.util.Set<T>),returns a synchronized (thread-safe) set backed by the specified set.
"java.util.Collections.synchronizedSortedMap(,V>)",returns a synchronized (thread-safe) sorted map backed by the specified sorted map.
java.util.Collections.synchronizedSortedSet(java.util.SortedSet<T>),returns a synchronized (thread-safe) sorted set backed by the specified sorted set.
java.util.Collections.unmodifiableCollection(java.util.Collection<? extends T>),returns an unmodifiable view of the specified collection.
java.util.Collections.unmodifiableList(java.util.List<? extends T>),returns an unmodifiable view of the specified list.
"java.util.Collections.unmodifiableMap(java.util.Map<? extends,? extends V>)",returns an unmodifiable view of the specified map.
"java.util.Collections.unmodifiableNavigableMap(,? extends V>)",returns an unmodifiable view of the specified navigable map.
java.util.Collections.unmodifiableNavigableSet(java.util.NavigableSet<T>),returns an unmodifiable view of the specified navigable set.
java.util.Collections.unmodifiableSet(java.util.Set<? extends T>),returns an unmodifiable view of the specified set.
"java.util.Collections.unmodifiableSortedMap(,? extends V>)",returns an unmodifiable view of the specified sorted map.
java.util.Collections.unmodifiableSortedSet(java.util.SortedSet<T>),returns an unmodifiable view of the specified sorted set.
java.util.Currency.getAvailableCurrencies(),gets the set of available currencies.
java.util.Currency.getCurrencyCode(),gets the iso 4217 currency code of this currency.
java.util.Currency.getDefaultFractionDigits(),gets the default number of fraction digits used with this currency.
java.util.Currency.getDisplayName(),gets the name that is suitable for displaying this currency for the default display locale.
java.util.Currency.getDisplayName(java.util.Locale),gets the name that is suitable for displaying this currency for the specified locale.
java.util.Currency.getInstance(java.lang.String),returns the currency instance for the given currency code.
java.util.Currency.getInstance(java.util.Locale),returns the currency instance for the country of the given locale.
java.util.Currency.getNumericCode(),returns the iso 4217 numeric code of this currency.
java.util.Currency.getSymbol(),gets the symbol of this currency for the default display locale.
java.util.Currency.getSymbol(java.util.Locale),gets the symbol of this currency for the specified locale.
java.util.Currency.toString(),returns the iso 4217 currency code of this currency.
java.util.Date.after(java.util.Date),tests if this date is after the specified date.
java.util.Date.before(java.util.Date),tests if this date is before the specified date.
java.util.Date.clone(),return a copy of this object.
java.util.Date.compareTo(java.util.Date),compares two dates for ordering.
java.util.Date.equals(java.lang.Object),compares two dates for equality.
java.util.Date.from(java.time.Instant),obtains an instance of date from an instant object.
java.util.Date.getTime(),"returns the number of milliseconds since january 1, 1970, 00:00:00 gmt represented by this date object."
java.util.Date.hashCode(),returns a hash code value for this object.
java.util.Date.setTime(long),"sets this date object to represent a point in time that is time milliseconds after january 1, 1970 00:00:00 gmt."
java.util.Date.toInstant(),converts this date object to an instant.
java.util.Date.toString(),"converts this date object to a string of the form:
dow mon dd hh:mm:ss zzz yyyy ."
java.util.Dictionary.elements(),returns an enumeration of the values in this dictionary.
java.util.Dictionary.get(java.lang.Object),returns the value to which the key is mapped in this dictionary.
java.util.Dictionary.isEmpty(),tests if this dictionary maps no keys to value.
java.util.Dictionary.keys(),returns an enumeration of the keys in this dictionary.
"java.util.Dictionary.put(java.util.Dictionary,java.util.Dictionary)",maps the specified key to the specified value in this dictionary.
java.util.Dictionary.remove(java.lang.Object),removes the key (and its corresponding value) from this dictionary.
java.util.Dictionary.size(),returns the number of entries (distinct keys) in this dictionary.
java.util.DoubleSummaryStatistics.accept(double),records another value into the summary information.
java.util.DoubleSummaryStatistics.combine(java.util.DoubleSummaryStatistics),combines the state of another doublesummarystatistics into this one.
java.util.DoubleSummaryStatistics.getAverage(),"returns the arithmetic mean of values recorded, or zero if no values have been recorded."
java.util.DoubleSummaryStatistics.getCount(),return the count of values recorded.
java.util.DoubleSummaryStatistics.getMax(),"returns the maximum recorded value, double."
java.util.DoubleSummaryStatistics.getMin(),"returns the minimum recorded value, double."
java.util.DoubleSummaryStatistics.getSum(),"returns the sum of values recorded, or zero if no values have been recorded."
java.util.DoubleSummaryStatistics.toString(),returns a string representation of the object.
java.util.EnumMap.clear(),removes all mappings from this map.
java.util.EnumMap.clone(),returns a shallow copy of this enum map.
java.util.EnumMap.containsKey(java.lang.Object),returns true if this map contains a mapping for the specified key.
java.util.EnumMap.containsValue(java.lang.Object),returns true if this map maps one or more keys to the specified value.
java.util.EnumMap.entrySet(),returns a set view of the mappings contained in this map.
java.util.EnumMap.equals(java.lang.Object),compares the specified object with this map for equality.
java.util.EnumMap.get(java.lang.Object),"returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
java.util.EnumMap.hashCode(),returns the hash code value for this map.
java.util.EnumMap.keySet(),returns a set view of the keys contained in this map.
"java.util.EnumMap.put(java.util.EnumMap,java.util.EnumMap)",associates the specified value with the specified key in this map.
"java.util.EnumMap.putAll(java.util.Map<? extends,? extends java.util.EnumMap>)",copies all of the mappings from the specified map to this map.
java.util.EnumMap.remove(java.lang.Object),removes the mapping for this key from this map if present.
java.util.EnumMap.size(),returns the number of key-value mappings in this map.
java.util.EnumMap.values(),returns a collection view of the values contained in this map.
java.util.EnumSet.allOf(java.lang.Class<E>),creates an enum set containing all of the elements in the specified element type.
java.util.EnumSet.clone(),returns a copy of this set.
java.util.EnumSet.complementOf(java.util.EnumSet<E>),"creates an enum set with the same element type as the specified enum set, initially containing all the elements of this type that are not contained in the specified set."
java.util.EnumSet.copyOf(java.util.EnumSet<E>),"creates an enum set with the same element type as the specified enum set, initially containing the same elements (if any)."
java.util.EnumSet.copyOf(java.util.Collection<E>),creates an enum set initialized from the specified collection.
java.util.EnumSet.noneOf(java.lang.Class<E>),creates an empty enum set with the specified element type.
java.util.EnumSet.of(E),creates an enum set initially containing the specified element.
"java.util.EnumSet.of(E,E)",creates an enum set initially containing the specified elements.
"java.util.EnumSet.of(E,E,E)",creates an enum set initially containing the specified elements.
"java.util.EnumSet.of(E,E,E,E)",creates an enum set initially containing the specified elements.
"java.util.EnumSet.of(E,E,E,E,E)",creates an enum set initially containing the specified elements.
"java.util.EnumSet.of(E,E...)",creates an enum set initially containing the specified elements.
"java.util.EnumSet.range(E,E)",creates an enum set initially containing all of the elements in the range defined by the two specified endpoints.
java.util.EventListenerProxy.getListener(),returns the listener associated with the proxy.
java.util.EventObject.getSource(),the object on which the event initially occurred.
java.util.EventObject.toString(),returns a string representation of this eventobject.
java.util.Formatter.close(),closes this formatter.
java.util.Formatter.flush(),flushes this formatter.
"java.util.Formatter.format(java.lang.String,java.lang.Object...)",writes a formatted string to this object's destination using the specified format string and arguments.
"java.util.Formatter.format(java.util.Locale,java.lang.String,java.lang.Object...)","writes a formatted string to this object's destination using the specified locale, format string, and arguments."
java.util.Formatter.ioException(),returns the ioexception last thrown by this formatter's appendable.
java.util.Formatter.locale(),returns the locale set by the construction of this formatter.
java.util.Formatter.out(),returns the destination for the output.
java.util.Formatter.toString(),returns the result of invoking tostring() on the destination for the output.
"java.util.GregorianCalendar.add(int,int)","adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules."
java.util.GregorianCalendar.computeFields(),converts the time value (millisecond offset from the epoch) to calendar field values.
java.util.GregorianCalendar.computeTime(),converts calendar field values to the time value (millisecond offset from the epoch).
java.util.GregorianCalendar.equals(java.lang.Object),compares this gregoriancalendar to the specified object.
java.util.GregorianCalendar.from(java.time.ZonedDateTime),obtains an instance of gregoriancalendar with the default locale from a zoneddatetime object.
java.util.GregorianCalendar.getActualMaximum(int),"returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the getfirstdayofweek, getminimaldaysinfirstweek, getgregorianchange and gettimezone methods."
java.util.GregorianCalendar.getActualMinimum(int),"returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the getfirstdayofweek, getminimaldaysinfirstweek, getgregorianchange and gettimezone methods."
java.util.GregorianCalendar.getCalendarType(),"returns ""gregory"" as the calendar type."
java.util.GregorianCalendar.getGreatestMinimum(int),returns the highest minimum value for the given calendar field of this gregoriancalendar instance.
java.util.GregorianCalendar.getGregorianChange(),gets the gregorian calendar change date.
java.util.GregorianCalendar.getLeastMaximum(int),returns the lowest maximum value for the given calendar field of this gregoriancalendar instance.
java.util.GregorianCalendar.getMaximum(int),returns the maximum value for the given calendar field of this gregoriancalendar instance.
java.util.GregorianCalendar.getMinimum(int),returns the minimum value for the given calendar field of this gregoriancalendar instance.
java.util.GregorianCalendar.getWeeksInWeekYear(),returns the number of weeks in the week year represented by this gregoriancalendar.
java.util.GregorianCalendar.getWeekYear(),returns the week year represented by this gregoriancalendar.
java.util.GregorianCalendar.hashCode(),generates the hash code for this gregoriancalendar object.
java.util.GregorianCalendar.isLeapYear(int),determines if the given year is a leap year.
java.util.GregorianCalendar.isWeekDateSupported(),returns true indicating this gregoriancalendar supports week dates.
"java.util.GregorianCalendar.roll(int,boolean)",adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields.
"java.util.GregorianCalendar.roll(int,int)",adds a signed amount to the specified calendar field without changing larger fields.
java.util.GregorianCalendar.setGregorianChange(java.util.Date),sets the gregoriancalendar change date.
"java.util.GregorianCalendar.setWeekDate(int,int,int)","sets this gregoriancalendar to the date given by the date specifiers - weekyear, weekofyear, and dayofweek."
java.util.GregorianCalendar.toZonedDateTime(),converts this object to a zoneddatetime that represents the same point on the time-line as this gregoriancalendar.
java.util.HashMap.clear(),removes all of the mappings from this map.
java.util.HashMap.clone(),returns a shallow copy of this hashmap instance: the keys and values themselves are not cloned.
java.util.HashMap.containsKey(java.lang.Object),returns true if this map contains a mapping for the specified key.
java.util.HashMap.containsValue(java.lang.Object),returns true if this map maps one or more keys to the specified value.
java.util.HashMap.entrySet(),returns a set view of the mappings contained in this map.
java.util.HashMap.get(java.lang.Object),"returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
java.util.HashMap.isEmpty(),returns true if this map contains no key-value mappings.
java.util.HashMap.keySet(),returns a set view of the keys contained in this map.
"java.util.HashMap.put(java.util.HashMap,java.util.HashMap)",associates the specified value with the specified key in this map.
"java.util.HashMap.putAll(java.util.Map<? extends,? extends java.util.HashMap>)",copies all of the mappings from the specified map to this map.
java.util.HashMap.remove(java.lang.Object),removes the mapping for the specified key from this map if present.
java.util.HashMap.size(),returns the number of key-value mappings in this map.
java.util.HashMap.values(),returns a collection view of the values contained in this map.
java.util.HashSet.add(java.util.HashSet),adds the specified element to this set if it is not already present.
java.util.HashSet.clear(),removes all of the elements from this set.
java.util.HashSet.clone(),returns a shallow copy of this hashset instance: the elements themselves are not cloned.
java.util.HashSet.contains(java.lang.Object),returns true if this set contains the specified element.
java.util.HashSet.isEmpty(),returns true if this set contains no elements.
java.util.HashSet.iterator(),returns an iterator over the elements in this set.
java.util.HashSet.remove(java.lang.Object),removes the specified element from this set if it is present.
java.util.HashSet.size(),returns the number of elements in this set (its cardinality).
java.util.HashSet.spliterator(),creates a late-binding and fail-fast spliterator over the elements in this set.
java.util.Hashtable.clear(),clears this hashtable so that it contains no keys.
java.util.Hashtable.clone(),creates a shallow copy of this hashtable.
java.util.Hashtable.contains(java.lang.Object),tests if some key maps into the specified value in this hashtable.
java.util.Hashtable.containsKey(java.lang.Object),tests if the specified object is a key in this hashtable.
java.util.Hashtable.containsValue(java.lang.Object),returns true if this hashtable maps one or more keys to this value.
java.util.Hashtable.elements(),returns an enumeration of the values in this hashtable.
java.util.Hashtable.entrySet(),returns a set view of the mappings contained in this map.
java.util.Hashtable.equals(java.lang.Object),"compares the specified object with this map for equality, as per the definition in the map interface."
java.util.Hashtable.get(java.lang.Object),"returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
java.util.Hashtable.hashCode(),returns the hash code value for this map as per the definition in the map interface.
java.util.Hashtable.isEmpty(),tests if this hashtable maps no keys to values.
java.util.Hashtable.keys(),returns an enumeration of the keys in this hashtable.
java.util.Hashtable.keySet(),returns a set view of the keys contained in this map.
"java.util.Hashtable.put(java.util.Hashtable,java.util.Hashtable)",maps the specified key to the specified value in this hashtable.
"java.util.Hashtable.putAll(java.util.Map<? extends,? extends java.util.Hashtable>)",copies all of the mappings from the specified map to this hashtable.
java.util.Hashtable.rehash(),"increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently."
java.util.Hashtable.remove(java.lang.Object),removes the key (and its corresponding value) from this hashtable.
java.util.Hashtable.size(),returns the number of keys in this hashtable.
java.util.Hashtable.toString(),"returns a string representation of this hashtable object in the form of a set of entries, enclosed in braces and separated by the ascii characters "", "" (comma and space)."
java.util.Hashtable.values(),returns a collection view of the values contained in this map.
java.util.IdentityHashMap.clear(),removes all of the mappings from this map.
java.util.IdentityHashMap.clone(),returns a shallow copy of this identity hash map: the keys and values themselves are not cloned.
java.util.IdentityHashMap.containsKey(java.lang.Object),tests whether the specified object reference is a key in this identity hash map.
java.util.IdentityHashMap.containsValue(java.lang.Object),tests whether the specified object reference is a value in this identity hash map.
java.util.IdentityHashMap.entrySet(),returns a set view of the mappings contained in this map.
java.util.IdentityHashMap.equals(java.lang.Object),compares the specified object with this map for equality.
java.util.IdentityHashMap.get(java.lang.Object),"returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
java.util.IdentityHashMap.hashCode(),returns the hash code value for this map.
java.util.IdentityHashMap.isEmpty(),returns true if this identity hash map contains no key-value mappings.
java.util.IdentityHashMap.keySet(),returns an identity-based set view of the keys contained in this map.
"java.util.IdentityHashMap.put(java.util.IdentityHashMap,java.util.IdentityHashMap)",associates the specified value with the specified key in this identity hash map.
"java.util.IdentityHashMap.putAll(java.util.Map<? extends,? extends java.util.IdentityHashMap>)",copies all of the mappings from the specified map to this map.
java.util.IdentityHashMap.remove(java.lang.Object),removes the mapping for this key from this map if present.
java.util.IdentityHashMap.size(),returns the number of key-value mappings in this identity hash map.
java.util.IdentityHashMap.values(),returns a collection view of the values contained in this map.
java.util.IntSummaryStatistics.accept(int),records a new value into the summary information.
java.util.IntSummaryStatistics.combine(java.util.IntSummaryStatistics),combines the state of another intsummarystatistics into this one.
java.util.IntSummaryStatistics.getAverage(),"returns the arithmetic mean of values recorded, or zero if no values have been recorded."
java.util.IntSummaryStatistics.getCount(),returns the count of values recorded.
java.util.IntSummaryStatistics.getMax(),"returns the maximum value recorded, or integer."
java.util.IntSummaryStatistics.getMin(),"returns the minimum value recorded, or integer."
java.util.IntSummaryStatistics.getSum(),"returns the sum of values recorded, or zero if no values have been recorded."
java.util.LinkedHashMap.clear(),removes all of the mappings from this map.
java.util.LinkedHashMap.containsValue(java.lang.Object),returns true if this map maps one or more keys to the specified value.
java.util.LinkedHashMap.entrySet(),returns a set view of the mappings contained in this map.
java.util.LinkedHashMap.get(java.lang.Object),"returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
"java.util.LinkedHashMap.getOrDefault(java.lang.Object,java.util.LinkedHashMap)","returns the value to which the specified key is mapped, or defaultvalue if this map contains no mapping for the key."
java.util.LinkedHashMap.keySet(),returns a set view of the keys contained in this map.
"java.util.LinkedHashMap.removeEldestEntry(,java.util.LinkedHashMap>)",returns true if this map should remove its eldest entry.
java.util.LinkedHashMap.values(),returns a collection view of the values contained in this map.
java.util.LinkedHashSet.spliterator(),creates a late-binding and fail-fast spliterator over the elements in this set.
java.util.LinkedList.add(java.util.LinkedList),appends the specified element to the end of this list.
"java.util.LinkedList.add(int,java.util.LinkedList)",inserts the specified element at the specified position in this list.
java.util.LinkedList.addAll(java.util.Collection<? extends java.util.LinkedList>),"appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator."
"java.util.LinkedList.addAll(int,java.util.Collection<? extends java.util.LinkedList>)","inserts all of the elements in the specified collection into this list, starting at the specified position."
java.util.LinkedList.addFirst(java.util.LinkedList),inserts the specified element at the beginning of this list.
java.util.LinkedList.addLast(java.util.LinkedList),appends the specified element to the end of this list.
java.util.LinkedList.clear(),removes all of the elements from this list.
java.util.LinkedList.clone(),returns a shallow copy of this linkedlist.
java.util.LinkedList.contains(java.lang.Object),returns true if this list contains the specified element.
java.util.LinkedList.element(),"retrieves, but does not remove, the head (first element) of this list."
java.util.LinkedList.get(int),returns the element at the specified position in this list.
java.util.LinkedList.getFirst(),returns the first element in this list.
java.util.LinkedList.getLast(),returns the last element in this list.
java.util.LinkedList.indexOf(java.lang.Object),"returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element."
java.util.LinkedList.lastIndexOf(java.lang.Object),"returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element."
java.util.LinkedList.listIterator(int),"returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list."
java.util.LinkedList.offer(java.util.LinkedList),adds the specified element as the tail (last element) of this list.
java.util.LinkedList.offerFirst(java.util.LinkedList),inserts the specified element at the front of this list.
java.util.LinkedList.offerLast(java.util.LinkedList),inserts the specified element at the end of this list.
java.util.LinkedList.peek(),"retrieves, but does not remove, the head (first element) of this list."
java.util.LinkedList.peekFirst(),"retrieves, but does not remove, the first element of this list, or returns null if this list is empty."
java.util.LinkedList.peekLast(),"retrieves, but does not remove, the last element of this list, or returns null if this list is empty."
java.util.LinkedList.poll(),retrieves and removes the head (first element) of this list.
java.util.LinkedList.pollFirst(),"retrieves and removes the first element of this list, or returns null if this list is empty."
java.util.LinkedList.pollLast(),"retrieves and removes the last element of this list, or returns null if this list is empty."
java.util.LinkedList.pop(),pops an element from the stack represented by this list.
java.util.LinkedList.push(java.util.LinkedList),pushes an element onto the stack represented by this list.
java.util.LinkedList.remove(java.lang.Object),"removes the first occurrence of the specified element from this list, if it is present."
java.util.LinkedList.remove(int),removes the element at the specified position in this list.
java.util.LinkedList.remove(),retrieves and removes the head (first element) of this list.
java.util.LinkedList.removeFirst(),removes and returns the first element from this list.
java.util.LinkedList.removeFirstOccurrence(java.lang.Object),removes the first occurrence of the specified element in this list (when traversing the list from head to tail).
java.util.LinkedList.removeLast(),removes and returns the last element from this list.
java.util.LinkedList.removeLastOccurrence(java.lang.Object),removes the last occurrence of the specified element in this list (when traversing the list from head to tail).
"java.util.LinkedList.set(int,java.util.LinkedList)",replaces the element at the specified position in this list with the specified element.
java.util.LinkedList.size(),returns the number of elements in this list.
java.util.LinkedList.spliterator(),creates a late-binding and fail-fast spliterator over the elements in this list.
java.util.LinkedList.toArray(),returns an array containing all of the elements in this list in proper sequence (from first to last element).
java.util.LinkedList.toArray(T[]),returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
java.util.ListResourceBundle.getContents(),returns an array in which each item is a pair of objects in an object array.
java.util.ListResourceBundle.getKeys(),returns an enumeration of the keys contained in this resourcebundle and its parent bundles.
java.util.ListResourceBundle.handleKeySet(),returns a set of the keys contained only in this resourcebundle.
java.util.Locale.equals(java.lang.Object),returns true if this locale is equal to another object.
"java.util.Locale.filter(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.util.Locale>,java.util.Locale.FilteringMode)",returns a list of matching locale instances using the filtering mechanism defined in rfc 4647.
"java.util.Locale.filter(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.util.Locale>)",returns a list of matching locale instances using the filtering mechanism defined in rfc 4647.
"java.util.Locale.filterTags(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.lang.String>,java.util.Locale.FilteringMode)",returns a list of matching languages tags using the basic filtering mechanism defined in rfc 4647.
"java.util.Locale.filterTags(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.lang.String>)",returns a list of matching languages tags using the basic filtering mechanism defined in rfc 4647.
java.util.Locale.forLanguageTag(java.lang.String),returns a locale for the specified ietf bcp 47 language tag string.
java.util.Locale.getAvailableLocales(),returns an array of all installed locales.
java.util.Locale.getCountry(),"returns the country/region code for this locale, which should either be the empty string, an uppercase iso 3166 2-letter code, or a un m."
java.util.Locale.getDefault(),gets the current value of the default locale for this instance of the java virtual machine.
java.util.Locale.getDefault(java.util.Locale.Category),gets the current value of the default locale for the specified category for this instance of the java virtual machine.
java.util.Locale.getDisplayCountry(),returns a name for the locale's country that is appropriate for display to the user.
java.util.Locale.getDisplayCountry(java.util.Locale),returns a name for the locale's country that is appropriate for display to the user.
java.util.Locale.getDisplayLanguage(),returns a name for the locale's language that is appropriate for display to the user.
java.util.Locale.getDisplayLanguage(java.util.Locale),returns a name for the locale's language that is appropriate for display to the user.
java.util.Locale.getDisplayName(),returns a name for the locale that is appropriate for display to the user.
java.util.Locale.getDisplayName(java.util.Locale),returns a name for the locale that is appropriate for display to the user.
java.util.Locale.getDisplayScript(),returns a name for the the locale's script that is appropriate for display to the user.
java.util.Locale.getDisplayScript(java.util.Locale),returns a name for the locale's script that is appropriate for display to the user.
java.util.Locale.getDisplayVariant(),returns a name for the locale's variant code that is appropriate for display to the user.
java.util.Locale.getDisplayVariant(java.util.Locale),returns a name for the locale's variant code that is appropriate for display to the user.
java.util.Locale.getExtension(char),"returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key."
java.util.Locale.getExtensionKeys(),"returns the set of extension keys associated with this locale, or the empty set if it has no extensions."
java.util.Locale.getISO3Country(),returns a three-letter abbreviation for this locale's country.
java.util.Locale.getISO3Language(),returns a three-letter abbreviation of this locale's language.
java.util.Locale.getISOCountries(),returns a list of all 2-letter country codes defined in iso 3166.
java.util.Locale.getISOLanguages(),returns a list of all 2-letter language codes defined in iso 639.
java.util.Locale.getLanguage(),returns the language code of this locale.
java.util.Locale.getScript(),"returns the script for this locale, which should either be the empty string or an iso 15924 4-letter script code."
java.util.Locale.getUnicodeLocaleAttributes(),"returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes."
java.util.Locale.getUnicodeLocaleKeys(),"returns the set of unicode locale keys defined by this locale, or the empty set if this locale has none."
java.util.Locale.getUnicodeLocaleType(java.lang.String),returns the unicode locale type associated with the specified unicode locale key for this locale.
java.util.Locale.getVariant(),returns the variant code for this locale.
java.util.Locale.hasExtensions(),returns true if this locale has any extensions.
"java.util.Locale.lookup(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.util.Locale>)",returns a locale instance for the best-matching language tag using the lookup mechanism defined in rfc 4647.
"java.util.Locale.lookupTag(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.lang.String>)",returns the best-matching language tag using the lookup mechanism defined in rfc 4647.
java.util.Locale.setDefault(java.util.Locale),sets the default locale for this instance of the java virtual machine.
"java.util.Locale.setDefault(java.util.Locale.Category,java.util.Locale)",sets the default locale for the specified category for this instance of the java virtual machine.
java.util.Locale.stripExtensions(),returns a copy of this locale with no extensions.
java.util.Locale.toLanguageTag(),returns a well-formed ietf bcp 47 language tag representing this locale.
java.util.Locale.toString(),"returns a string representation of this locale object, consisting of language, country, variant, script, and extensions as below:
language + ""_"" + country + ""_"" + (variant + ""_#"" | ""#"") + script + ""-"" + extensions ."
java.util.Locale.Builder.addUnicodeLocaleAttribute(java.lang.String),"adds a unicode locale attribute, if not already present, otherwise has no effect."
java.util.Locale.Builder.build(),returns an instance of locale created from the fields set on this builder.
java.util.Locale.Builder.clear(),"resets the builder to its initial, empty state."
java.util.Locale.Builder.clearExtensions(),"resets the extensions to their initial, empty state."
java.util.Locale.Builder.removeUnicodeLocaleAttribute(java.lang.String),"removes a unicode locale attribute, if present, otherwise has no effect."
"java.util.Locale.Builder.setExtension(char,java.lang.String)",sets the extension for the given key.
java.util.Locale.Builder.setLanguage(java.lang.String),sets the language.
java.util.Locale.Builder.setLanguageTag(java.lang.String),resets the builder to match the provided ietf bcp 47 language tag.
java.util.Locale.Builder.setLocale(java.util.Locale),resets the builder to match the provided locale.
java.util.Locale.Builder.setRegion(java.lang.String),sets the region.
java.util.Locale.Builder.setScript(java.lang.String),sets the script.
"java.util.Locale.Builder.setUnicodeLocaleKeyword(java.lang.String,java.lang.String)",sets the unicode locale keyword type for the given key.
java.util.Locale.Builder.setVariant(java.lang.String),sets the variant.
java.util.Locale.LanguageRange.equals(java.lang.Object),compares this object to the specified object.
java.util.Locale.LanguageRange.getRange(),returns the language range of this languagerange.
java.util.Locale.LanguageRange.getWeight(),returns the weight of this languagerange.
java.util.Locale.LanguageRange.hashCode(),returns a hash code value for the object.
"java.util.Locale.LanguageRange.mapEquivalents(java.util.List<java.util.Locale.LanguageRange>,,java.util.List<java.lang.String>>)",generates a new customized language priority list using the given prioritylist and map.
java.util.Locale.LanguageRange.parse(java.lang.String),parses the given ranges to generate a language priority list.
"java.util.Locale.LanguageRange.parse(java.lang.String,,java.util.List<java.lang.String>>)","parses the given ranges to generate a language priority list, and then customizes the list using the given map."
java.util.LongSummaryStatistics.accept(int),records a new int value into the summary information.
java.util.LongSummaryStatistics.accept(long),records a new long value into the summary information.
java.util.LongSummaryStatistics.combine(java.util.LongSummaryStatistics),combines the state of another longsummarystatistics into this one.
java.util.LongSummaryStatistics.getAverage(),"returns the arithmetic mean of values recorded, or zero if no values have been recorded."
java.util.LongSummaryStatistics.getCount(),returns the count of values recorded.
java.util.LongSummaryStatistics.getMax(),"returns the maximum value recorded, or long."
java.util.LongSummaryStatistics.getMin(),"returns the minimum value recorded, or long."
java.util.LongSummaryStatistics.getSum(),"returns the sum of values recorded, or zero if no values have been recorded."
"java.util.Objects.compare(T,T,java.util.Comparator<? super T>)",returns 0 if the arguments are identical and c.
"java.util.Objects.deepEquals(java.lang.Object,java.lang.Object)",returns true if the arguments are deeply equal to each other and false otherwise.
"java.util.Objects.equals(java.lang.Object,java.lang.Object)",returns true if the arguments are equal to each other and false otherwise.
java.util.Objects.hash(java.lang.Object...),generates a hash code for a sequence of input values.
java.util.Objects.hashCode(java.lang.Object),returns the hash code of a non-null argument and 0 for a null argument.
java.util.Objects.isNull(java.lang.Object),returns true if the provided reference is null otherwise returns false.
java.util.Objects.nonNull(java.lang.Object),returns true if the provided reference is non-null otherwise returns false.
java.util.Objects.requireNonNull(T),checks that the specified object reference is not null.
"java.util.Objects.requireNonNull(T,java.lang.String)",checks that the specified object reference is not null and throws a customized nullpointerexception if it is.
"java.util.Objects.requireNonNull(T,java.util.function.Supplier<java.lang.String>)",checks that the specified object reference is not null and throws a customized nullpointerexception if it is.
java.util.Objects.toString(java.lang.Object),"returns the result of calling tostring for a non-null argument and ""null"" for a null argument."
"java.util.Objects.toString(java.lang.Object,java.lang.String)",returns the result of calling tostring on the first argument if the first argument is not null and returns the second argument otherwise.
java.util.Observable.addObserver(java.util.Observer),"adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set."
java.util.Observable.clearChanged(),"indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the haschanged method will now return false."
java.util.Observable.countObservers(),returns the number of observers of this observable object.
java.util.Observable.deleteObserver(java.util.Observer),deletes an observer from the set of observers of this object.
java.util.Observable.deleteObservers(),clears the observer list so that this object no longer has any observers.
java.util.Observable.hasChanged(),tests if this object has changed.
java.util.Observable.notifyObservers(),"if this object has changed, as indicated by the haschanged method, then notify all of its observers and then call the clearchanged method to indicate that this object has no longer changed."
java.util.Observable.notifyObservers(java.lang.Object),"if this object has changed, as indicated by the haschanged method, then notify all of its observers and then call the clearchanged method to indicate that this object has no longer changed."
java.util.Observable.setChanged(),marks this observable object as having been changed; the haschanged method will now return true.
java.util.Optional.empty(),returns an empty optional instance.
java.util.Optional.equals(java.lang.Object),"indicates whether some other object is ""equal to"" this optional."
java.util.Optional.filter(java.util.function.Predicate<? super java.util.Optional>),"if a value is present, and the value matches the given predicate, return an optional describing the value, otherwise return an empty optional."
"java.util.Optional.flatMap(java.util.function.Function<? super,java.util.Optional<U>>)","if a value is present, apply the provided optional-bearing mapping function to it, return that result, otherwise return an empty optional."
java.util.Optional.get(),"if a value is present in this optional, returns the value, otherwise throws nosuchelementexception."
java.util.Optional.hashCode(),"returns the hash code value of the present value, if any, or 0 (zero) if no value is present."
java.util.Optional.ifPresent(java.util.function.Consumer<? super java.util.Optional>),"if a value is present, invoke the specified consumer with the value, otherwise do nothing."
java.util.Optional.isPresent(),"return true if there is a value present, otherwise false."
"java.util.Optional.map(java.util.function.Function<? super,? extends U>)","if a value is present, apply the provided mapping function to it, and if the result is non-null, return an optional describing the result."
java.util.Optional.of(T),returns an optional with the specified present non-null value.
java.util.Optional.ofNullable(T),"returns an optional describing the specified value, if non-null, otherwise returns an empty optional."
java.util.Optional.orElse(java.util.Optional),"return the value if present, otherwise return other."
java.util.Optional.orElseGet(java.util.function.Supplier<? extends java.util.Optional>),"return the value if present, otherwise invoke other and return the result of that invocation."
java.util.Optional.orElseThrow(java.util.function.Supplier<? extends X>),"return the contained value, if present, otherwise throw an exception to be created by the provided supplier."
java.util.Optional.toString(),returns a non-empty string representation of this optional suitable for debugging.
java.util.OptionalDouble.empty(),returns an empty optionaldouble instance.
java.util.OptionalDouble.equals(java.lang.Object),"indicates whether some other object is ""equal to"" this optionaldouble."
java.util.OptionalDouble.getAsDouble(),"if a value is present in this optionaldouble, returns the value, otherwise throws nosuchelementexception."
java.util.OptionalDouble.hashCode(),"returns the hash code value of the present value, if any, or 0 (zero) if no value is present."
java.util.OptionalDouble.ifPresent(java.util.function.DoubleConsumer),"have the specified consumer accept the value if a value is present, otherwise do nothing."
java.util.OptionalDouble.isPresent(),"return true if there is a value present, otherwise false."
java.util.OptionalDouble.of(double),return an optionaldouble with the specified value present.
java.util.OptionalDouble.orElse(double),"return the value if present, otherwise return other."
java.util.OptionalDouble.orElseGet(java.util.function.DoubleSupplier),"return the value if present, otherwise invoke other and return the result of that invocation."
java.util.OptionalDouble.orElseThrow(java.util.function.Supplier<X>),"return the contained value, if present, otherwise throw an exception to be created by the provided supplier."
java.util.OptionalDouble.toString(),returns a string representation of the object.
java.util.OptionalInt.empty(),returns an empty optionalint instance.
java.util.OptionalInt.equals(java.lang.Object),"indicates whether some other object is ""equal to"" this optionalint."
java.util.OptionalInt.getAsInt(),"if a value is present in this optionalint, returns the value, otherwise throws nosuchelementexception."
java.util.OptionalInt.hashCode(),"returns the hash code value of the present value, if any, or 0 (zero) if no value is present."
java.util.OptionalInt.ifPresent(java.util.function.IntConsumer),"have the specified consumer accept the value if a value is present, otherwise do nothing."
java.util.OptionalInt.isPresent(),"return true if there is a value present, otherwise false."
java.util.OptionalInt.of(int),return an optionalint with the specified value present.
java.util.OptionalInt.orElse(int),"return the value if present, otherwise return other."
java.util.OptionalInt.orElseGet(java.util.function.IntSupplier),"return the value if present, otherwise invoke other and return the result of that invocation."
java.util.OptionalInt.orElseThrow(java.util.function.Supplier<X>),"return the contained value, if present, otherwise throw an exception to be created by the provided supplier."
java.util.OptionalInt.toString(),returns a string representation of the object.
java.util.OptionalLong.empty(),returns an empty optionallong instance.
java.util.OptionalLong.equals(java.lang.Object),"indicates whether some other object is ""equal to"" this optionallong."
java.util.OptionalLong.getAsLong(),"if a value is present in this optionallong, returns the value, otherwise throws nosuchelementexception."
java.util.OptionalLong.hashCode(),"returns the hash code value of the present value, if any, or 0 (zero) if no value is present."
java.util.OptionalLong.ifPresent(java.util.function.LongConsumer),"have the specified consumer accept the value if a value is present, otherwise do nothing."
java.util.OptionalLong.isPresent(),"return true if there is a value present, otherwise false."
java.util.OptionalLong.of(long),return an optionallong with the specified value present.
java.util.OptionalLong.orElse(long),"return the value if present, otherwise return other."
java.util.OptionalLong.orElseGet(java.util.function.LongSupplier),"return the value if present, otherwise invoke other and return the result of that invocation."
java.util.OptionalLong.orElseThrow(java.util.function.Supplier<X>),"return the contained value, if present, otherwise throw an exception to be created by the provided supplier."
java.util.OptionalLong.toString(),returns a string representation of the object.
java.util.PriorityQueue.add(java.util.PriorityQueue),inserts the specified element into this priority queue.
java.util.PriorityQueue.clear(),removes all of the elements from this priority queue.
java.util.PriorityQueue.comparator(),"returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the natural ordering of its elements."
java.util.PriorityQueue.contains(java.lang.Object),returns true if this queue contains the specified element.
java.util.PriorityQueue.iterator(),returns an iterator over the elements in this queue.
java.util.PriorityQueue.offer(java.util.PriorityQueue),inserts the specified element into this priority queue.
java.util.PriorityQueue.remove(java.lang.Object),"removes a single instance of the specified element from this queue, if it is present."
java.util.PriorityQueue.spliterator(),creates a late-binding and fail-fast spliterator over the elements in this queue.
java.util.PriorityQueue.toArray(),returns an array containing all of the elements in this queue.
java.util.PriorityQueue.toArray(T[]),returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array.
java.util.Properties.getProperty(java.lang.String),searches for the property with the specified key in this property list.
"java.util.Properties.getProperty(java.lang.String,java.lang.String)",searches for the property with the specified key in this property list.
java.util.Properties.list(java.io.PrintStream),prints this property list out to the specified output stream.
java.util.Properties.list(java.io.PrintWriter),prints this property list out to the specified output stream.
java.util.Properties.load(java.io.Reader),reads a property list (key and element pairs) from the input character stream in a simple line-oriented format.
java.util.Properties.load(java.io.InputStream),reads a property list (key and element pairs) from the input byte stream.
java.util.Properties.loadFromXML(java.io.InputStream),loads all of the properties represented by the xml document on the specified input stream into this properties table.
java.util.Properties.propertyNames(),"returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list."
"java.util.Properties.setProperty(java.lang.String,java.lang.String)",calls the hashtable method put.
"java.util.Properties.store(java.io.Writer,java.lang.String)",writes this property list (key and element pairs) in this properties table to the output character stream in a format suitable for using the load(reader) method.
"java.util.Properties.store(java.io.OutputStream,java.lang.String)",writes this property list (key and element pairs) in this properties table to the output stream in a format suitable for loading into a properties table using the load(inputstream) method.
"java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String)",emits an xml document representing all of the properties contained in this table.
"java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)","emits an xml document representing all of the properties contained in this table, using the specified encoding."
java.util.Properties.stringPropertyNames(),"returns a set of keys in this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list."
java.util.PropertyPermission.equals(java.lang.Object),checks two propertypermission objects for equality.
java.util.PropertyPermission.getActions(),"returns the ""canonical string representation"" of the actions."
java.util.PropertyPermission.hashCode(),returns the hash code value for this object.
java.util.PropertyPermission.implies(java.security.Permission),"checks if this propertypermission object ""implies"" the specified permission."
java.util.PropertyPermission.newPermissionCollection(),returns a new permissioncollection object for storing propertypermission objects.
java.util.PropertyResourceBundle.getKeys(),returns an enumeration of the keys contained in this resourcebundle and its parent bundles.
java.util.PropertyResourceBundle.handleKeySet(),returns a set of the keys contained only in this resourcebundle.
java.util.Random.doubles(long),"returns a stream producing the given streamsize number of pseudorandom double values, each between zero (inclusive) and one (exclusive)."
java.util.Random.doubles(),"returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive)."
"java.util.Random.doubles(long,double,double)","returns a stream producing the given streamsize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)."
"java.util.Random.doubles(double,double)","returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)."
java.util.Random.ints(long),returns a stream producing the given streamsize number of pseudorandom int values.
java.util.Random.ints(),returns an effectively unlimited stream of pseudorandom int values.
"java.util.Random.ints(long,int,int)","returns a stream producing the given streamsize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)."
"java.util.Random.ints(int,int)","returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)."
java.util.Random.longs(long),returns a stream producing the given streamsize number of pseudorandom long values.
java.util.Random.longs(),returns an effectively unlimited stream of pseudorandom long values.
"java.util.Random.longs(long,long,long)","returns a stream producing the given streamsize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive)."
"java.util.Random.longs(long,long)","returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive)."
java.util.Random.next(int),generates the next pseudorandom number.
java.util.Random.nextBoolean(),"returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence."
java.util.Random.nextBytes(byte[]),generates random bytes and places them into a user-supplied byte array.
java.util.Random.nextDouble(),"returns the next pseudorandom, uniformly distributed double value between 0."
java.util.Random.nextFloat(),"returns the next pseudorandom, uniformly distributed float value between 0."
java.util.Random.nextGaussian(),"returns the next pseudorandom, gaussian (""normally"") distributed double value with mean 0."
java.util.Random.nextInt(),"returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence."
java.util.Random.nextInt(int),"returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence."
java.util.Random.nextLong(),"returns the next pseudorandom, uniformly distributed long value from this random number generator's sequence."
java.util.Random.setSeed(long),sets the seed of this random number generator using a single long seed.
java.util.ResourceBundle.clearCache(),removes all resource bundles from the cache that have been loaded using the caller's class loader.
java.util.ResourceBundle.clearCache(java.lang.ClassLoader),removes all resource bundles from the cache that have been loaded using the given class loader.
java.util.ResourceBundle.containsKey(java.lang.String),determines whether the given key is contained in this resourcebundle or its parent bundles.
java.util.ResourceBundle.getBaseBundleName(),"returns the base name of this bundle, if known, or null if unknown."
java.util.ResourceBundle.getBundle(java.lang.String),"gets a resource bundle using the specified base name, the default locale, and the caller's class loader."
"java.util.ResourceBundle.getBundle(java.lang.String,java.util.ResourceBundle.Control)","returns a resource bundle using the specified base name, the default locale and the specified control."
"java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale)","gets a resource bundle using the specified base name and locale, and the caller's class loader."
"java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle.Control)","returns a resource bundle using the specified base name, target locale and control, and the caller's class loader."
"java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)","gets a resource bundle using the specified base name, locale, and class loader."
"java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle.Control)","returns a resource bundle using the specified base name, target locale, class loader and control."
java.util.ResourceBundle.getKeys(),returns an enumeration of the keys.
java.util.ResourceBundle.getLocale(),returns the locale of this resource bundle.
java.util.ResourceBundle.getObject(java.lang.String),gets an object for the given key from this resource bundle or one of its parents.
java.util.ResourceBundle.getString(java.lang.String),gets a string for the given key from this resource bundle or one of its parents.
java.util.ResourceBundle.getStringArray(java.lang.String),gets a string array for the given key from this resource bundle or one of its parents.
java.util.ResourceBundle.handleGetObject(java.lang.String),gets an object for the given key from this resource bundle.
java.util.ResourceBundle.handleKeySet(),returns a set of the keys contained only in this resourcebundle.
java.util.ResourceBundle.keySet(),returns a set of all keys contained in this resourcebundle and its parent bundles.
java.util.ResourceBundle.setParent(java.util.ResourceBundle),sets the parent bundle of this bundle.
"java.util.ResourceBundle.Control.getCandidateLocales(java.lang.String,java.util.Locale)",returns a list of locales as candidate locales for basename and locale.
java.util.ResourceBundle.Control.getControl(java.util.List<java.lang.String>),returns a resourcebundle.
"java.util.ResourceBundle.Control.getFallbackLocale(java.lang.String,java.util.Locale)",returns a locale to be used as a fallback locale for further resource bundle searches by the resourcebundle.
java.util.ResourceBundle.Control.getFormats(java.lang.String),returns a list of strings containing formats to be used to load resource bundles for the given basename.
java.util.ResourceBundle.Control.getNoFallbackControl(java.util.List<java.lang.String>),returns a resourcebundle.
"java.util.ResourceBundle.Control.getTimeToLive(java.lang.String,java.util.Locale)",returns the time-to-live (ttl) value for resource bundles that are loaded under this resourcebundle.
"java.util.ResourceBundle.Control.needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)",determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadtime or some other criteria.
"java.util.ResourceBundle.Control.newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)","instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary."
"java.util.ResourceBundle.Control.toBundleName(java.lang.String,java.util.Locale)",converts the given basename and locale to the bundle name.
"java.util.ResourceBundle.Control.toResourceName(java.lang.String,java.lang.String)",converts the given bundlename to the form required by the classloader.
java.util.Scanner.close(),closes this scanner.
java.util.Scanner.delimiter(),returns the pattern this scanner is currently using to match delimiters.
java.util.Scanner.findInLine(java.lang.String),"attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters."
java.util.Scanner.findInLine(java.util.regex.Pattern),attempts to find the next occurrence of the specified pattern ignoring delimiters.
"java.util.Scanner.findWithinHorizon(java.lang.String,int)","attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters."
"java.util.Scanner.findWithinHorizon(java.util.regex.Pattern,int)",attempts to find the next occurrence of the specified pattern.
java.util.Scanner.hasNext(),returns true if this scanner has another token in its input.
java.util.Scanner.hasNext(java.lang.String),returns true if the next token matches the pattern constructed from the specified string.
java.util.Scanner.hasNext(java.util.regex.Pattern),returns true if the next complete token matches the specified pattern.
java.util.Scanner.hasNextBigDecimal(),returns true if the next token in this scanner's input can be interpreted as a bigdecimal using the nextbigdecimal() method.
java.util.Scanner.hasNextBigInteger(),returns true if the next token in this scanner's input can be interpreted as a biginteger in the default radix using the nextbiginteger() method.
java.util.Scanner.hasNextBigInteger(int),returns true if the next token in this scanner's input can be interpreted as a biginteger in the specified radix using the nextbiginteger() method.
java.util.Scanner.hasNextBoolean(),"returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string ""true|false""."
java.util.Scanner.hasNextByte(),returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the nextbyte() method.
java.util.Scanner.hasNextByte(int),returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the nextbyte() method.
java.util.Scanner.hasNextDouble(),returns true if the next token in this scanner's input can be interpreted as a double value using the nextdouble() method.
java.util.Scanner.hasNextFloat(),returns true if the next token in this scanner's input can be interpreted as a float value using the nextfloat() method.
java.util.Scanner.hasNextInt(),returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the nextint() method.
java.util.Scanner.hasNextInt(int),returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the nextint() method.
java.util.Scanner.hasNextLine(),returns true if there is another line in the input of this scanner.
java.util.Scanner.hasNextLong(),returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the nextlong() method.
java.util.Scanner.hasNextLong(int),returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the nextlong() method.
java.util.Scanner.hasNextShort(),returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the nextshort() method.
java.util.Scanner.hasNextShort(int),returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the nextshort() method.
java.util.Scanner.ioException(),returns the ioexception last thrown by this scanner's underlying readable.
java.util.Scanner.locale(),returns this scanner's locale.
java.util.Scanner.match(),returns the match result of the last scanning operation performed by this scanner.
java.util.Scanner.next(),finds and returns the next complete token from this scanner.
java.util.Scanner.next(java.lang.String),returns the next token if it matches the pattern constructed from the specified string.
java.util.Scanner.next(java.util.regex.Pattern),returns the next token if it matches the specified pattern.
java.util.Scanner.nextBigDecimal(),scans the next token of the input as a bigdecimal.
java.util.Scanner.nextBigInteger(),scans the next token of the input as a biginteger.
java.util.Scanner.nextBigInteger(int),scans the next token of the input as a biginteger.
java.util.Scanner.nextBoolean(),scans the next token of the input into a boolean value and returns that value.
java.util.Scanner.nextByte(),scans the next token of the input as a byte.
java.util.Scanner.nextByte(int),scans the next token of the input as a byte.
java.util.Scanner.nextDouble(),scans the next token of the input as a double.
java.util.Scanner.nextFloat(),scans the next token of the input as a float.
java.util.Scanner.nextInt(),scans the next token of the input as an int.
java.util.Scanner.nextInt(int),scans the next token of the input as an int.
java.util.Scanner.nextLine(),advances this scanner past the current line and returns the input that was skipped.
java.util.Scanner.nextLong(),scans the next token of the input as a long.
java.util.Scanner.nextLong(int),scans the next token of the input as a long.
java.util.Scanner.nextShort(),scans the next token of the input as a short.
java.util.Scanner.nextShort(int),scans the next token of the input as a short.
java.util.Scanner.radix(),returns this scanner's default radix.
java.util.Scanner.remove(),the remove operation is not supported by this implementation of iterator.
java.util.Scanner.reset(),resets this scanner.
java.util.Scanner.skip(java.util.regex.Pattern),"skips input that matches the specified pattern, ignoring delimiters."
java.util.Scanner.skip(java.lang.String),skips input that matches a pattern constructed from the specified string.
java.util.Scanner.toString(),returns the string representation of this scanner.
java.util.Scanner.useDelimiter(java.util.regex.Pattern),sets this scanner's delimiting pattern to the specified pattern.
java.util.Scanner.useDelimiter(java.lang.String),sets this scanner's delimiting pattern to a pattern constructed from the specified string.
java.util.Scanner.useLocale(java.util.Locale),sets this scanner's locale to the specified locale.
java.util.Scanner.useRadix(int),sets this scanner's default radix to the specified radix.
java.util.ServiceLoader.iterator(),lazily loads the available providers of this loader's service.
"java.util.ServiceLoader.load(java.lang.Class<S>,java.lang.ClassLoader)",creates a new service loader for the given service type and class loader.
java.util.ServiceLoader.load(java.lang.Class<S>),"creates a new service loader for the given service type, using the current thread's context class loader."
java.util.ServiceLoader.loadInstalled(java.lang.Class<S>),"creates a new service loader for the given service type, using the extension class loader."
java.util.ServiceLoader.reload(),clear this loader's provider cache so that all providers will be reloaded.
java.util.ServiceLoader.toString(),returns a string describing this service.
java.util.SimpleTimeZone.clone(),returns a clone of this simpletimezone instance.
java.util.SimpleTimeZone.equals(java.lang.Object),compares the equality of two simpletimezone objects.
java.util.SimpleTimeZone.getDSTSavings(),returns the amount of time in milliseconds that the clock is advanced during daylight saving time.
java.util.SimpleTimeZone.getOffset(long),returns the offset of this time zone from utc at the given time.
"java.util.SimpleTimeZone.getOffset(int,int,int,int,int,int)","returns the difference in milliseconds between local time and utc, taking into account both the raw offset and the effect of daylight saving, for the specified date and time."
java.util.SimpleTimeZone.getRawOffset(),gets the gmt offset for this time zone.
java.util.SimpleTimeZone.hashCode(),generates the hash code for the simpledateformat object.
java.util.SimpleTimeZone.hasSameRules(java.util.TimeZone),returns true if this zone has the same rules and offset as another zone.
java.util.SimpleTimeZone.inDaylightTime(java.util.Date),queries if the given date is in daylight saving time.
java.util.SimpleTimeZone.observesDaylightTime(),returns true if this simpletimezone observes daylight saving time.
java.util.SimpleTimeZone.setDSTSavings(int),sets the amount of time in milliseconds that the clock is advanced during daylight saving time.
"java.util.SimpleTimeZone.setEndRule(int,int,int,int)",sets the daylight saving time end rule.
"java.util.SimpleTimeZone.setEndRule(int,int,int)",sets the daylight saving time end rule to a fixed date within a month.
"java.util.SimpleTimeZone.setEndRule(int,int,int,int,boolean)","sets the daylight saving time end rule to a weekday before or after the given date within a month, e."
java.util.SimpleTimeZone.setRawOffset(int),sets the base time zone offset to gmt.
"java.util.SimpleTimeZone.setStartRule(int,int,int,int)",sets the daylight saving time start rule.
"java.util.SimpleTimeZone.setStartRule(int,int,int)",sets the daylight saving time start rule to a fixed date within a month.
"java.util.SimpleTimeZone.setStartRule(int,int,int,int,boolean)","sets the daylight saving time start rule to a weekday before or after the given date within a month, e."
java.util.SimpleTimeZone.setStartYear(int),sets the daylight saving time starting year.
java.util.SimpleTimeZone.toString(),returns a string representation of this time zone.
java.util.SimpleTimeZone.useDaylightTime(),queries if this time zone uses daylight saving time.
java.util.Spliterators.emptyDoubleSpliterator(),creates an empty spliterator.
java.util.Spliterators.emptyIntSpliterator(),creates an empty spliterator.
java.util.Spliterators.emptyLongSpliterator(),creates an empty spliterator.
java.util.Spliterators.emptySpliterator(),creates an empty spliterator the empty spliterator reports spliterator.
java.util.Spliterators.iterator(java.util.Spliterator<? extends T>),creates an iterator from a spliterator.
java.util.Spliterators.iterator(java.util.Spliterator.OfInt),creates an primitiveiterator.
java.util.Spliterators.iterator(java.util.Spliterator.OfLong),creates an primitiveiterator.
java.util.Spliterators.iterator(java.util.Spliterator.OfDouble),creates an primitiveiterator.
"java.util.Spliterators.spliterator(java.lang.Object[],int)","creates a spliterator covering the elements of a given array, using a customized set of spliterator characteristics."
"java.util.Spliterators.spliterator(java.lang.Object[],int,int,int)","creates a spliterator covering a range of elements of a given array, using a customized set of spliterator characteristics."
"java.util.Spliterators.spliterator(int[],int)",creates a spliterator.
"java.util.Spliterators.spliterator(int[],int,int,int)",creates a spliterator.
"java.util.Spliterators.spliterator(long[],int)",creates a spliterator.
"java.util.Spliterators.spliterator(long[],int,int,int)",creates a spliterator.
"java.util.Spliterators.spliterator(double[],int)",creates a spliterator.
"java.util.Spliterators.spliterator(double[],int,int,int)",creates a spliterator.
"java.util.Spliterators.spliterator(java.util.Collection<? extends T>,int)",creates a spliterator using the given collection's collection.
"java.util.Spliterators.spliterator(java.util.Iterator<? extends T>,long,int)","creates a spliterator using a given iterator as the source of elements, and with a given initially reported size."
"java.util.Spliterators.spliterator(java.util.PrimitiveIterator.OfInt,long,int)",creates a spliterator.
"java.util.Spliterators.spliterator(java.util.PrimitiveIterator.OfLong,long,int)",creates a spliterator.
"java.util.Spliterators.spliterator(java.util.PrimitiveIterator.OfDouble,long,int)",creates a spliterator.
"java.util.Spliterators.spliteratorUnknownSize(java.util.Iterator<? extends T>,int)","creates a spliterator using a given iterator as the source of elements, with no initial size estimate."
"java.util.Spliterators.spliteratorUnknownSize(java.util.PrimitiveIterator.OfInt,int)",creates a spliterator.
"java.util.Spliterators.spliteratorUnknownSize(java.util.PrimitiveIterator.OfLong,int)",creates a spliterator.
"java.util.Spliterators.spliteratorUnknownSize(java.util.PrimitiveIterator.OfDouble,int)",creates a spliterator.
java.util.Spliterators.AbstractDoubleSpliterator.characteristics(),returns a set of characteristics of this spliterator and its elements.
java.util.Spliterators.AbstractDoubleSpliterator.estimateSize(),returns an estimate of the number of elements that would be encountered by a spliterator.
java.util.Spliterators.AbstractDoubleSpliterator.trySplit(),"if this spliterator can be partitioned, returns a spliterator covering elements, that will, upon return from this method, not be covered by this spliterator."
java.util.Spliterators.AbstractIntSpliterator.characteristics(),returns a set of characteristics of this spliterator and its elements.
java.util.Spliterators.AbstractIntSpliterator.estimateSize(),returns an estimate of the number of elements that would be encountered by a spliterator.
java.util.Spliterators.AbstractIntSpliterator.trySplit(),"if this spliterator can be partitioned, returns a spliterator covering elements, that will, upon return from this method, not be covered by this spliterator."
java.util.Spliterators.AbstractLongSpliterator.characteristics(),returns a set of characteristics of this spliterator and its elements.
java.util.Spliterators.AbstractLongSpliterator.estimateSize(),returns an estimate of the number of elements that would be encountered by a spliterator.
java.util.Spliterators.AbstractLongSpliterator.trySplit(),"if this spliterator can be partitioned, returns a spliterator covering elements, that will, upon return from this method, not be covered by this spliterator."
java.util.Spliterators.AbstractSpliterator.characteristics(),returns a set of characteristics of this spliterator and its elements.
java.util.Spliterators.AbstractSpliterator.estimateSize(),returns an estimate of the number of elements that would be encountered by a spliterator.
java.util.Spliterators.AbstractSpliterator.trySplit(),"if this spliterator can be partitioned, returns a spliterator covering elements, that will, upon return from this method, not be covered by this spliterator."
java.util.SplittableRandom.doubles(long),returns a stream producing the given streamsize number of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).
java.util.SplittableRandom.doubles(),returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).
"java.util.SplittableRandom.doubles(long,double,double)",returns a stream producing the given streamsize number of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
"java.util.SplittableRandom.doubles(double,double)",returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
java.util.SplittableRandom.ints(long),returns a stream producing the given streamsize number of pseudorandom int values from this generator and/or one split from it.
java.util.SplittableRandom.ints(),returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it.
"java.util.SplittableRandom.ints(long,int,int)",returns a stream producing the given streamsize number of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
"java.util.SplittableRandom.ints(int,int)",returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
java.util.SplittableRandom.longs(long),returns a stream producing the given streamsize number of pseudorandom long values from this generator and/or one split from it.
java.util.SplittableRandom.longs(),returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it.
"java.util.SplittableRandom.longs(long,long,long)",returns a stream producing the given streamsize number of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
"java.util.SplittableRandom.longs(long,long)",returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
java.util.SplittableRandom.nextBoolean(),returns a pseudorandom boolean value.
java.util.SplittableRandom.nextDouble(),returns a pseudorandom double value between zero (inclusive) and one (exclusive).
java.util.SplittableRandom.nextDouble(double),returns a pseudorandom double value between 0.
"java.util.SplittableRandom.nextDouble(double,double)",returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).
java.util.SplittableRandom.nextInt(),returns a pseudorandom int value.
java.util.SplittableRandom.nextInt(int),returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).
"java.util.SplittableRandom.nextInt(int,int)",returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).
java.util.SplittableRandom.nextLong(),returns a pseudorandom long value.
java.util.SplittableRandom.nextLong(long),returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).
"java.util.SplittableRandom.nextLong(long,long)",returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).
java.util.SplittableRandom.split(),constructs and returns a new splittablerandom instance that shares no mutable state with this instance.
java.util.Stack.empty(),tests if this stack is empty.
java.util.Stack.peek(),looks at the object at the top of this stack without removing it from the stack.
java.util.Stack.pop(),removes the object at the top of this stack and returns that object as the value of this function.
java.util.Stack.push(java.util.Stack),pushes an item onto the top of this stack.
java.util.Stack.search(java.lang.Object),returns the 1-based position where an object is on this stack.
java.util.StringJoiner.add(java.lang.CharSequence),adds a copy of the given charsequence value as the next element of the stringjoiner value.
java.util.StringJoiner.length(),returns the length of the string representation of this stringjoiner.
java.util.StringJoiner.merge(java.util.StringJoiner),adds the contents of the given stringjoiner without prefix and suffix as the next element if it is non-empty.
java.util.StringJoiner.setEmptyValue(java.lang.CharSequence),"sets the sequence of characters to be used when determining the string representation of this stringjoiner and no elements have been added yet, that is, when it is empty."
java.util.StringJoiner.toString(),"returns the current value, consisting of the prefix, the values added so far separated by the delimiter, and the suffix, unless no elements have been added in which case, the prefix + suffix or the emptyvalue characters are returned."
java.util.StringTokenizer.countTokens(),calculates the number of times that this tokenizer's nexttoken method can be called before it generates an exception.
java.util.StringTokenizer.hasMoreElements(),returns the same value as the hasmoretokens method.
java.util.StringTokenizer.hasMoreTokens(),tests if there are more tokens available from this tokenizer's string.
java.util.StringTokenizer.nextElement(),"returns the same value as the nexttoken method, except that its declared return value is object rather than string."
java.util.StringTokenizer.nextToken(),returns the next token from this string tokenizer.
java.util.StringTokenizer.nextToken(java.lang.String),returns the next token in this string tokenizer's string.
java.util.Timer.cancel(),"terminates this timer, discarding any currently scheduled tasks."
java.util.Timer.purge(),removes all cancelled tasks from this timer's task queue.
"java.util.Timer.schedule(java.util.TimerTask,long)",schedules the specified task for execution after the specified delay.
"java.util.Timer.schedule(java.util.TimerTask,java.util.Date)",schedules the specified task for execution at the specified time.
"java.util.Timer.schedule(java.util.TimerTask,long,long)","schedules the specified task for repeated fixed-delay execution, beginning after the specified delay."
"java.util.Timer.schedule(java.util.TimerTask,java.util.Date,long)","schedules the specified task for repeated fixed-delay execution, beginning at the specified time."
"java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,long,long)","schedules the specified task for repeated fixed-rate execution, beginning after the specified delay."
"java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)","schedules the specified task for repeated fixed-rate execution, beginning at the specified time."
java.util.TimerTask.cancel(),cancels this timer task.
java.util.TimerTask.run(),the action to be performed by this timer task.
java.util.TimerTask.scheduledExecutionTime(),returns the scheduled execution time of the most recent actual execution of this task.
java.util.TimeZone.clone(),creates a copy of this timezone.
java.util.TimeZone.getAvailableIDs(int),gets the available ids according to the given time zone offset in milliseconds.
java.util.TimeZone.getAvailableIDs(),gets all the available ids supported.
java.util.TimeZone.getDefault(),gets the default timezone of the java virtual machine.
java.util.TimeZone.getDisplayName(),returns a long standard time name of this timezone suitable for presentation to the user in the default locale.
java.util.TimeZone.getDisplayName(java.util.Locale),returns a long standard time name of this timezone suitable for presentation to the user in the specified locale.
"java.util.TimeZone.getDisplayName(boolean,int)",returns a name in the specified style of this timezone suitable for presentation to the user in the default locale.
"java.util.TimeZone.getDisplayName(boolean,int,java.util.Locale)",returns a name in the specified style of this timezone suitable for presentation to the user in the specified locale.
java.util.TimeZone.getDSTSavings(),returns the amount of time to be added to local standard time to get local wall clock time.
java.util.TimeZone.getID(),gets the id of this time zone.
"java.util.TimeZone.getOffset(int,int,int,int,int,int)","gets the time zone offset, for current date, modified in case of daylight savings."
java.util.TimeZone.getOffset(long),returns the offset of this time zone from utc at the specified date.
java.util.TimeZone.getRawOffset(),returns the amount of time in milliseconds to add to utc to get standard time in this time zone.
java.util.TimeZone.getTimeZone(java.lang.String),gets the timezone for the given id.
java.util.TimeZone.getTimeZone(java.time.ZoneId),gets the timezone for the given zoneid.
java.util.TimeZone.hasSameRules(java.util.TimeZone),returns true if this zone has the same rule and offset as another zone.
java.util.TimeZone.inDaylightTime(java.util.Date),queries if the given date is in daylight saving time in this time zone.
java.util.TimeZone.observesDaylightTime(),"returns true if this timezone is currently in daylight saving time, or if a transition from standard time to daylight saving time occurs at any future time."
java.util.TimeZone.setDefault(java.util.TimeZone),sets the timezone that is returned by the getdefault method.
java.util.TimeZone.setID(java.lang.String),sets the time zone id.
java.util.TimeZone.setRawOffset(int),sets the base time zone offset to gmt.
java.util.TimeZone.toZoneId(),converts this timezone object to a zoneid.
java.util.TimeZone.useDaylightTime(),queries if this timezone uses daylight saving time.
java.util.TreeMap.clear(),removes all of the mappings from this map.
java.util.TreeMap.clone(),returns a shallow copy of this treemap instance.
java.util.TreeMap.containsKey(java.lang.Object),returns true if this map contains a mapping for the specified key.
java.util.TreeMap.containsValue(java.lang.Object),returns true if this map maps one or more keys to the specified value.
java.util.TreeMap.entrySet(),returns a set view of the mappings contained in this map.
java.util.TreeMap.get(java.lang.Object),"returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
java.util.TreeMap.keySet(),returns a set view of the keys contained in this map.
"java.util.TreeMap.put(java.util.TreeMap,java.util.TreeMap)",associates the specified value with the specified key in this map.
"java.util.TreeMap.putAll(java.util.Map<? extends,? extends java.util.TreeMap>)",copies all of the mappings from the specified map to this map.
java.util.TreeMap.remove(java.lang.Object),removes the mapping for this key from this treemap if present.
java.util.TreeMap.size(),returns the number of key-value mappings in this map.
java.util.TreeMap.values(),returns a collection view of the values contained in this map.
java.util.TreeSet.add(java.util.TreeSet),adds the specified element to this set if it is not already present.
java.util.TreeSet.addAll(java.util.Collection<? extends java.util.TreeSet>),adds all of the elements in the specified collection to this set.
java.util.TreeSet.clear(),removes all of the elements from this set.
java.util.TreeSet.clone(),returns a shallow copy of this treeset instance.
java.util.TreeSet.contains(java.lang.Object),returns true if this set contains the specified element.
java.util.TreeSet.descendingIterator(),returns an iterator over the elements in this set in descending order.
java.util.TreeSet.isEmpty(),returns true if this set contains no elements.
java.util.TreeSet.iterator(),returns an iterator over the elements in this set in ascending order.
java.util.TreeSet.remove(java.lang.Object),removes the specified element from this set if it is present.
java.util.TreeSet.size(),returns the number of elements in this set (its cardinality).
java.util.TreeSet.spliterator(),creates a late-binding and fail-fast spliterator over the elements in this set.
java.util.UUID.clockSequence(),the clock sequence value associated with this uuid.
java.util.UUID.compareTo(java.util.UUID),compares this uuid with the specified uuid.
java.util.UUID.equals(java.lang.Object),compares this object to the specified object.
java.util.UUID.fromString(java.lang.String),creates a uuid from the string standard representation as described in the tostring() method.
java.util.UUID.getLeastSignificantBits(),returns the least significant 64 bits of this uuid's 128 bit value.
java.util.UUID.getMostSignificantBits(),returns the most significant 64 bits of this uuid's 128 bit value.
java.util.UUID.hashCode(),returns a hash code for this uuid.
java.util.UUID.nameUUIDFromBytes(byte[]),static factory to retrieve a type 3 (name based) uuid based on the specified byte array.
java.util.UUID.node(),the node value associated with this uuid.
java.util.UUID.randomUUID(),static factory to retrieve a type 4 (pseudo randomly generated) uuid.
java.util.UUID.timestamp(),the timestamp value associated with this uuid.
java.util.UUID.toString(),returns a string object representing this uuid.
java.util.UUID.variant(),the variant number associated with this uuid.
java.util.UUID.version(),the version number associated with this uuid.
java.util.Vector.add(java.util.Vector),appends the specified element to the end of this vector.
"java.util.Vector.add(int,java.util.Vector)",inserts the specified element at the specified position in this vector.
java.util.Vector.addAll(java.util.Collection<? extends java.util.Vector>),"appends all of the elements in the specified collection to the end of this vector, in the order that they are returned by the specified collection's iterator."
"java.util.Vector.addAll(int,java.util.Collection<? extends java.util.Vector>)",inserts all of the elements in the specified collection into this vector at the specified position.
java.util.Vector.addElement(java.util.Vector),"adds the specified component to the end of this vector, increasing its size by one."
java.util.Vector.capacity(),returns the current capacity of this vector.
java.util.Vector.clear(),removes all of the elements from this vector.
java.util.Vector.clone(),returns a clone of this vector.
java.util.Vector.contains(java.lang.Object),returns true if this vector contains the specified element.
java.util.Vector.containsAll(java.util.Collection<?>),returns true if this vector contains all of the elements in the specified collection.
java.util.Vector.copyInto(java.lang.Object[]),copies the components of this vector into the specified array.
java.util.Vector.elementAt(int),returns the component at the specified index.
java.util.Vector.elements(),returns an enumeration of the components of this vector.
java.util.Vector.ensureCapacity(int),"increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument."
java.util.Vector.equals(java.lang.Object),compares the specified object with this vector for equality.
java.util.Vector.firstElement(),returns the first component (the item at index 0) of this vector.
java.util.Vector.get(int),returns the element at the specified position in this vector.
java.util.Vector.hashCode(),returns the hash code value for this vector.
java.util.Vector.indexOf(java.lang.Object),"returns the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element."
"java.util.Vector.indexOf(java.lang.Object,int)","returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found."
"java.util.Vector.insertElementAt(java.util.Vector,int)",inserts the specified object as a component in this vector at the specified index.
java.util.Vector.isEmpty(),tests if this vector has no components.
java.util.Vector.iterator(),returns an iterator over the elements in this list in proper sequence.
java.util.Vector.lastElement(),returns the last component of the vector.
java.util.Vector.lastIndexOf(java.lang.Object),"returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element."
"java.util.Vector.lastIndexOf(java.lang.Object,int)","returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found."
java.util.Vector.listIterator(int),"returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list."
java.util.Vector.listIterator(),returns a list iterator over the elements in this list (in proper sequence).
java.util.Vector.remove(java.lang.Object),"removes the first occurrence of the specified element in this vector if the vector does not contain the element, it is unchanged."
java.util.Vector.remove(int),removes the element at the specified position in this vector.
java.util.Vector.removeAll(java.util.Collection<?>),removes from this vector all of its elements that are contained in the specified collection.
java.util.Vector.removeAllElements(),removes all components from this vector and sets its size to zero.
java.util.Vector.removeElement(java.lang.Object),removes the first (lowest-indexed) occurrence of the argument from this vector.
java.util.Vector.removeElementAt(int),deletes the component at the specified index.
"java.util.Vector.removeRange(int,int)","removes from this list all of the elements whose index is between fromindex, inclusive, and toindex, exclusive."
java.util.Vector.retainAll(java.util.Collection<?>),retains only the elements in this vector that are contained in the specified collection.
"java.util.Vector.set(int,java.util.Vector)",replaces the element at the specified position in this vector with the specified element.
"java.util.Vector.setElementAt(java.util.Vector,int)",sets the component at the specified index of this vector to be the specified object.
java.util.Vector.setSize(int),sets the size of this vector.
java.util.Vector.size(),returns the number of components in this vector.
java.util.Vector.spliterator(),creates a late-binding and fail-fast spliterator over the elements in this list.
"java.util.Vector.subList(int,int)","returns a view of the portion of this list between fromindex, inclusive, and toindex, exclusive."
java.util.Vector.toArray(),returns an array containing all of the elements in this vector in the correct order.
java.util.Vector.toArray(T[]),returns an array containing all of the elements in this vector in the correct order; the runtime type of the returned array is that of the specified array.
java.util.Vector.toString(),"returns a string representation of this vector, containing the string representation of each element."
java.util.Vector.trimToSize(),trims the capacity of this vector to be the vector's current size.
java.util.WeakHashMap.clear(),removes all of the mappings from this map.
java.util.WeakHashMap.containsKey(java.lang.Object),returns true if this map contains a mapping for the specified key.
java.util.WeakHashMap.containsValue(java.lang.Object),returns true if this map maps one or more keys to the specified value.
java.util.WeakHashMap.entrySet(),returns a set view of the mappings contained in this map.
java.util.WeakHashMap.get(java.lang.Object),"returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
java.util.WeakHashMap.isEmpty(),returns true if this map contains no key-value mappings.
java.util.WeakHashMap.keySet(),returns a set view of the keys contained in this map.
"java.util.WeakHashMap.put(java.util.WeakHashMap,java.util.WeakHashMap)",associates the specified value with the specified key in this map.
"java.util.WeakHashMap.putAll(java.util.Map<? extends,? extends java.util.WeakHashMap>)",copies all of the mappings from the specified map to this map.
java.util.WeakHashMap.remove(java.lang.Object),removes the mapping for a key from this weak hash map if it is present.
java.util.WeakHashMap.size(),returns the number of key-value mappings in this map.
java.util.WeakHashMap.values(),returns a collection view of the values contained in this map.
java.util.Formatter.BigDecimalLayoutForm.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.util.Formatter.BigDecimalLayoutForm.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.util.Locale.Category.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.util.Locale.Category.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.util.Locale.FilteringMode.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.util.Locale.FilteringMode.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.util.DuplicateFormatFlagsException.getFlags(),returns the set of flags which contains a duplicate flag.
java.util.FormatFlagsConversionMismatchException.getConversion(),returns the incompatible conversion.
java.util.FormatFlagsConversionMismatchException.getFlags(),returns the incompatible flag.
java.util.IllegalFormatCodePointException.getCodePoint(),returns the illegal code point as defined by character.
java.util.IllegalFormatConversionException.getArgumentClass(),returns the class of the mismatched argument.
java.util.IllegalFormatConversionException.getConversion(),returns the inapplicable conversion.
java.util.IllegalFormatFlagsException.getFlags(),returns the set of flags which contains an illegal combination.
java.util.IllegalFormatPrecisionException.getPrecision(),returns the precision.
java.util.IllegalFormatWidthException.getWidth(),returns the width.
java.util.IllformedLocaleException.getErrorIndex(),returns the index where the error was found.
java.util.MissingFormatArgumentException.getFormatSpecifier(),returns the unmatched format specifier.
java.util.MissingFormatWidthException.getFormatSpecifier(),returns the format specifier which does not have a width.
java.util.MissingResourceException.getClassName(),gets parameter passed by constructor.
java.util.MissingResourceException.getKey(),gets parameter passed by constructor.
java.util.UnknownFormatConversionException.getConversion(),returns the unknown conversion.
java.util.UnknownFormatFlagsException.getFlags(),returns the set of flags which contains an unknown flag.
java.util.concurrent.BlockingDeque.add(java.util.concurrent.BlockingDeque),"inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an illegalstateexception if no space is currently available."
java.util.concurrent.BlockingDeque.addFirst(java.util.concurrent.BlockingDeque),"inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.concurrent.BlockingDeque.addLast(java.util.concurrent.BlockingDeque),"inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.concurrent.BlockingDeque.contains(java.lang.Object),returns true if this deque contains the specified element.
java.util.concurrent.BlockingDeque.element(),"retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque)."
java.util.concurrent.BlockingDeque.iterator(),returns an iterator over the elements in this deque in proper sequence.
java.util.concurrent.BlockingDeque.offer(java.util.concurrent.BlockingDeque),"inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
"java.util.concurrent.BlockingDeque.offer(java.util.concurrent.BlockingDeque,long,java.util.concurrent.TimeUnit)","inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available."
java.util.concurrent.BlockingDeque.offerFirst(java.util.concurrent.BlockingDeque),"inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
"java.util.concurrent.BlockingDeque.offerFirst(java.util.concurrent.BlockingDeque,long,java.util.concurrent.TimeUnit)","inserts the specified element at the front of this deque, waiting up to the specified wait time if necessary for space to become available."
java.util.concurrent.BlockingDeque.offerLast(java.util.concurrent.BlockingDeque),"inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
"java.util.concurrent.BlockingDeque.offerLast(java.util.concurrent.BlockingDeque,long,java.util.concurrent.TimeUnit)","inserts the specified element at the end of this deque, waiting up to the specified wait time if necessary for space to become available."
java.util.concurrent.BlockingDeque.peek(),"retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
java.util.concurrent.BlockingDeque.poll(),"retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
"java.util.concurrent.BlockingDeque.poll(long,java.util.concurrent.TimeUnit)","retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting up to the specified wait time if necessary for an element to become available."
"java.util.concurrent.BlockingDeque.pollFirst(long,java.util.concurrent.TimeUnit)","retrieves and removes the first element of this deque, waiting up to the specified wait time if necessary for an element to become available."
"java.util.concurrent.BlockingDeque.pollLast(long,java.util.concurrent.TimeUnit)","retrieves and removes the last element of this deque, waiting up to the specified wait time if necessary for an element to become available."
java.util.concurrent.BlockingDeque.push(java.util.concurrent.BlockingDeque),"pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.concurrent.BlockingDeque.put(java.util.concurrent.BlockingDeque),"inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting if necessary for space to become available."
java.util.concurrent.BlockingDeque.putFirst(java.util.concurrent.BlockingDeque),"inserts the specified element at the front of this deque, waiting if necessary for space to become available."
java.util.concurrent.BlockingDeque.putLast(java.util.concurrent.BlockingDeque),"inserts the specified element at the end of this deque, waiting if necessary for space to become available."
java.util.concurrent.BlockingDeque.remove(),"retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque)."
java.util.concurrent.BlockingDeque.remove(java.lang.Object),removes the first occurrence of the specified element from this deque.
java.util.concurrent.BlockingDeque.removeFirstOccurrence(java.lang.Object),removes the first occurrence of the specified element from this deque.
java.util.concurrent.BlockingDeque.removeLastOccurrence(java.lang.Object),removes the last occurrence of the specified element from this deque.
java.util.concurrent.BlockingDeque.size(),returns the number of elements in this deque.
java.util.concurrent.BlockingDeque.take(),"retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting if necessary until an element becomes available."
java.util.concurrent.BlockingDeque.takeFirst(),"retrieves and removes the first element of this deque, waiting if necessary until an element becomes available."
java.util.concurrent.BlockingDeque.takeLast(),"retrieves and removes the last element of this deque, waiting if necessary until an element becomes available."
java.util.concurrent.BlockingQueue.add(java.util.concurrent.BlockingQueue),"inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an illegalstateexception if no space is currently available."
java.util.concurrent.BlockingQueue.contains(java.lang.Object),returns true if this queue contains the specified element.
java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<? super java.util.concurrent.BlockingQueue>),removes all available elements from this queue and adds them to the given collection.
"java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<? super java.util.concurrent.BlockingQueue>,int)",removes at most the given number of available elements from this queue and adds them to the given collection.
java.util.concurrent.BlockingQueue.offer(java.util.concurrent.BlockingQueue),"inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
"java.util.concurrent.BlockingQueue.offer(java.util.concurrent.BlockingQueue,long,java.util.concurrent.TimeUnit)","inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available."
"java.util.concurrent.BlockingQueue.poll(long,java.util.concurrent.TimeUnit)","retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available."
java.util.concurrent.BlockingQueue.put(java.util.concurrent.BlockingQueue),"inserts the specified element into this queue, waiting if necessary for space to become available."
java.util.concurrent.BlockingQueue.remainingCapacity(),"returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or integer."
java.util.concurrent.BlockingQueue.remove(java.lang.Object),"removes a single instance of the specified element from this queue, if it is present."
java.util.concurrent.BlockingQueue.take(),"retrieves and removes the head of this queue, waiting if necessary until an element becomes available."
java.util.concurrent.Callable.call(),"computes a result, or throws an exception if unable to do so."
java.util.concurrent.CompletionService.poll(),"retrieves and removes the future representing the next completed task, or null if none are present."
"java.util.concurrent.CompletionService.poll(long,java.util.concurrent.TimeUnit)","retrieves and removes the future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present."
java.util.concurrent.CompletionService.submit(java.util.concurrent.Callable<java.util.concurrent.CompletionService>),submits a value-returning task for execution and returns a future representing the pending results of the task.
"java.util.concurrent.CompletionService.submit(java.lang.Runnable,java.util.concurrent.CompletionService)",submits a runnable task for execution and returns a future representing that task.
java.util.concurrent.CompletionService.take(),"retrieves and removes the future representing the next completed task, waiting if none are yet present."
"java.util.concurrent.CompletionStage.acceptEither(java.util.concurrent.CompletionStage<? extends java.util.concurrent.CompletionStage>,java.util.function.Consumer<? super java.util.concurrent.CompletionStage>)","returns a new completionstage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied action."
"java.util.concurrent.CompletionStage.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends java.util.concurrent.CompletionStage>,java.util.function.Consumer<? super java.util.concurrent.CompletionStage>)","returns a new completionstage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied action."
"java.util.concurrent.CompletionStage.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends java.util.concurrent.CompletionStage>,java.util.function.Consumer<? super java.util.concurrent.CompletionStage>,java.util.concurrent.Executor)","returns a new completionstage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function."
"java.util.concurrent.CompletionStage.applyToEither(java.util.concurrent.CompletionStage<? extends java.util.concurrent.CompletionStage>,java.util.function.Function<? super,U>)","returns a new completionstage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied function."
"java.util.concurrent.CompletionStage.applyToEitherAsync(java.util.concurrent.CompletionStage<? extends java.util.concurrent.CompletionStage>,java.util.function.Function<? super,U>)","returns a new completionstage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied function."
"java.util.concurrent.CompletionStage.applyToEitherAsync(java.util.concurrent.CompletionStage<? extends java.util.concurrent.CompletionStage>,java.util.function.Function<? super,U>,java.util.concurrent.Executor)","returns a new completionstage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function."
"java.util.concurrent.CompletionStage.exceptionally(,? extends java.util.concurrent.CompletionStage>)","returns a new completionstage that, when this stage completes exceptionally, is executed with this stage's exception as the argument to the supplied function."
"java.util.concurrent.CompletionStage.handle(java.util.function.BiFunction<? super,,? extends U>)","returns a new completionstage that, when this stage completes either normally or exceptionally, is executed with this stage's result and exception as arguments to the supplied function."
"java.util.concurrent.CompletionStage.handleAsync(java.util.function.BiFunction<? super,,? extends U>)","returns a new completionstage that, when this stage completes either normally or exceptionally, is executed using this stage's default asynchronous execution facility, with this stage's result and exception as arguments to the supplied function."
"java.util.concurrent.CompletionStage.handleAsync(java.util.function.BiFunction<? super,,? extends U>,java.util.concurrent.Executor)","returns a new completionstage that, when this stage completes either normally or exceptionally, is executed using the supplied executor, with this stage's result and exception as arguments to the supplied function."
"java.util.concurrent.CompletionStage.runAfterBoth(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)","returns a new completionstage that, when this and the other given stage both complete normally, executes the given action."
"java.util.concurrent.CompletionStage.runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)","returns a new completionstage that, when this and the other given stage complete normally, executes the given action using this stage's default asynchronous execution facility."
"java.util.concurrent.CompletionStage.runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)","returns a new completionstage that, when this and the other given stage complete normally, executes the given action using the supplied executor."
"java.util.concurrent.CompletionStage.runAfterEither(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)","returns a new completionstage that, when either this or the other given stage complete normally, executes the given action."
"java.util.concurrent.CompletionStage.runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)","returns a new completionstage that, when either this or the other given stage complete normally, executes the given action using this stage's default asynchronous execution facility."
"java.util.concurrent.CompletionStage.runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)","returns a new completionstage that, when either this or the other given stage complete normally, executes the given action using the supplied executor."
java.util.concurrent.CompletionStage.thenAccept(java.util.function.Consumer<? super java.util.concurrent.CompletionStage>),"returns a new completionstage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied action."
java.util.concurrent.CompletionStage.thenAcceptAsync(java.util.function.Consumer<? super java.util.concurrent.CompletionStage>),"returns a new completionstage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied action."
"java.util.concurrent.CompletionStage.thenAcceptAsync(java.util.function.Consumer<? super java.util.concurrent.CompletionStage>,java.util.concurrent.Executor)","returns a new completionstage that, when this stage completes normally, is executed using the supplied executor, with this stage's result as the argument to the supplied action."
"java.util.concurrent.CompletionStage.thenAcceptBoth(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super,? super U>)","returns a new completionstage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied action."
"java.util.concurrent.CompletionStage.thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super,? super U>)","returns a new completionstage that, when this and the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied action."
"java.util.concurrent.CompletionStage.thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super,? super U>,java.util.concurrent.Executor)","returns a new completionstage that, when this and the other given stage complete normally, is executed using the supplied executor, with the two results as arguments to the supplied function."
"java.util.concurrent.CompletionStage.thenApply(java.util.function.Function<? super,? extends U>)","returns a new completionstage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied function."
"java.util.concurrent.CompletionStage.thenApplyAsync(java.util.function.Function<? super,? extends U>)","returns a new completionstage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied function."
"java.util.concurrent.CompletionStage.thenApplyAsync(java.util.function.Function<? super,? extends U>,java.util.concurrent.Executor)","returns a new completionstage that, when this stage completes normally, is executed using the supplied executor, with this stage's result as the argument to the supplied function."
"java.util.concurrent.CompletionStage.thenCombine(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super,? super,? extends V>)","returns a new completionstage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied function."
"java.util.concurrent.CompletionStage.thenCombineAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super,? super,? extends V>)","returns a new completionstage that, when this and the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied function."
"java.util.concurrent.CompletionStage.thenCombineAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super,? super,? extends V>,java.util.concurrent.Executor)","returns a new completionstage that, when this and the other given stage complete normally, is executed using the supplied executor, with the two results as arguments to the supplied function."
"java.util.concurrent.CompletionStage.thenCompose(java.util.function.Function<? super,? extends java.util.concurrent.CompletionStage<U>>)","returns a new completionstage that, when this stage completes normally, is executed with this stage as the argument to the supplied function."
"java.util.concurrent.CompletionStage.thenComposeAsync(java.util.function.Function<? super,? extends java.util.concurrent.CompletionStage<U>>)","returns a new completionstage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage as the argument to the supplied function."
"java.util.concurrent.CompletionStage.thenComposeAsync(java.util.function.Function<? super,? extends java.util.concurrent.CompletionStage<U>>,java.util.concurrent.Executor)","returns a new completionstage that, when this stage completes normally, is executed using the supplied executor, with this stage's result as the argument to the supplied function."
java.util.concurrent.CompletionStage.thenRun(java.lang.Runnable),"returns a new completionstage that, when this stage completes normally, executes the given action."
java.util.concurrent.CompletionStage.thenRunAsync(java.lang.Runnable),"returns a new completionstage that, when this stage completes normally, executes the given action using this stage's default asynchronous execution facility."
"java.util.concurrent.CompletionStage.thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)","returns a new completionstage that, when this stage completes normally, executes the given action using the supplied executor."
java.util.concurrent.CompletionStage.toCompletableFuture(),returns a completablefuture maintaining the same completion properties as this stage.
"java.util.concurrent.CompletionStage.whenComplete(java.util.function.BiConsumer<? super,? super java.lang.Throwable>)","returns a new completionstage with the same result or exception as this stage, that executes the given action when this stage completes."
"java.util.concurrent.CompletionStage.whenCompleteAsync(java.util.function.BiConsumer<? super,? super java.lang.Throwable>)","returns a new completionstage with the same result or exception as this stage, that executes the given action using this stage's default asynchronous execution facility when this stage completes."
"java.util.concurrent.CompletionStage.whenCompleteAsync(java.util.function.BiConsumer<? super,? super java.lang.Throwable>,java.util.concurrent.Executor)","returns a new completionstage with the same result or exception as this stage, that executes the given action using the supplied executor when this stage completes."
"java.util.concurrent.ConcurrentMap.compute(java.util.concurrent.ConcurrentMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentMap>)",attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
"java.util.concurrent.ConcurrentMap.computeIfAbsent(java.util.concurrent.ConcurrentMap,java.util.function.Function<? super,? extends java.util.concurrent.ConcurrentMap>)","if the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null."
"java.util.concurrent.ConcurrentMap.computeIfPresent(java.util.concurrent.ConcurrentMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentMap>)","if the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
"java.util.concurrent.ConcurrentMap.forEach(java.util.function.BiConsumer<? super,? super java.util.concurrent.ConcurrentMap>)",performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
"java.util.concurrent.ConcurrentMap.getOrDefault(java.lang.Object,java.util.concurrent.ConcurrentMap)","returns the value to which the specified key is mapped, or defaultvalue if this map contains no mapping for the key."
"java.util.concurrent.ConcurrentMap.merge(java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentMap>)","if the specified key is not already associated with a value or is associated with null, associates it with the given non-null value."
"java.util.concurrent.ConcurrentMap.putIfAbsent(java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap)","if the specified key is not already associated with a value, associate it with the given value."
"java.util.concurrent.ConcurrentMap.remove(java.lang.Object,java.lang.Object)",removes the entry for a key only if currently mapped to a given value.
"java.util.concurrent.ConcurrentMap.replace(java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap)",replaces the entry for a key only if currently mapped to a given value.
"java.util.concurrent.ConcurrentMap.replace(java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap)",replaces the entry for a key only if currently mapped to some value.
"java.util.concurrent.ConcurrentMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentMap>)",replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
java.util.concurrent.ConcurrentNavigableMap.descendingKeySet(),returns a reverse order navigableset view of the keys contained in this map.
java.util.concurrent.ConcurrentNavigableMap.descendingMap(),returns a reverse order view of the mappings contained in this map.
java.util.concurrent.ConcurrentNavigableMap.keySet(),returns a navigableset view of the keys contained in this map.
java.util.concurrent.ConcurrentNavigableMap.navigableKeySet(),returns a navigableset view of the keys contained in this map.
java.util.concurrent.Delayed.getDelay(java.util.concurrent.TimeUnit),"returns the remaining delay associated with this object, in the given time unit."
java.util.concurrent.Executor.execute(java.lang.Runnable),executes the given command at some time in the future.
"java.util.concurrent.ExecutorService.awaitTermination(long,java.util.concurrent.TimeUnit)","blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first."
java.util.concurrent.ExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>),"executes the given tasks, returning a list of futures holding their status and results when all complete."
"java.util.concurrent.ExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)","executes the given tasks, returning a list of futures holding their status and results when all complete or the timeout expires, whichever happens first."
java.util.concurrent.ExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>),"executes the given tasks, returning the result of one that has completed successfully (i."
"java.util.concurrent.ExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)","executes the given tasks, returning the result of one that has completed successfully (i."
java.util.concurrent.ExecutorService.isShutdown(),returns true if this executor has been shut down.
java.util.concurrent.ExecutorService.isTerminated(),returns true if all tasks have completed following shut down.
java.util.concurrent.ExecutorService.shutdown(),"initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted."
java.util.concurrent.ExecutorService.shutdownNow(),"attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution."
java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable<T>),submits a value-returning task for execution and returns a future representing the pending results of the task.
"java.util.concurrent.ExecutorService.submit(java.lang.Runnable,T)",submits a runnable task for execution and returns a future representing that task.
java.util.concurrent.ExecutorService.submit(java.lang.Runnable),submits a runnable task for execution and returns a future representing that task.
java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory.newThread(java.util.concurrent.ForkJoinPool),returns a new worker thread operating in the given pool.
java.util.concurrent.ForkJoinPool.ManagedBlocker.block(),"possibly blocks the current thread, for example waiting for a lock or condition."
java.util.concurrent.ForkJoinPool.ManagedBlocker.isReleasable(),returns true if blocking is unnecessary.
java.util.concurrent.Future.cancel(boolean),attempts to cancel execution of this task.
java.util.concurrent.Future.get(),"waits if necessary for the computation to complete, and then retrieves its result."
"java.util.concurrent.Future.get(long,java.util.concurrent.TimeUnit)","waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available."
java.util.concurrent.Future.isCancelled(),returns true if this task was cancelled before it completed normally.
java.util.concurrent.Future.isDone(),returns true if this task completed.
"java.util.concurrent.RejectedExecutionHandler.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",method that may be invoked by a threadpoolexecutor when execute cannot accept a task.
java.util.concurrent.RunnableFuture.run(),sets this future to the result of its computation unless it has been cancelled.
java.util.concurrent.RunnableScheduledFuture.isPeriodic(),returns true if this task is periodic.
"java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",creates and executes a one-shot action that becomes enabled after the given delay.
"java.util.concurrent.ScheduledExecutorService.schedule(java.util.concurrent.Callable<V>,long,java.util.concurrent.TimeUnit)",creates and executes a scheduledfuture that becomes enabled after the given delay.
"java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)","creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialdelay then initialdelay+period, then initialdelay + 2 * period, and so on."
"java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)","creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next."
java.util.concurrent.ThreadFactory.newThread(java.lang.Runnable),constructs a new thread.
java.util.concurrent.TransferQueue.getWaitingConsumerCount(),returns an estimate of the number of consumers waiting to receive elements via blockingqueue.
java.util.concurrent.TransferQueue.hasWaitingConsumer(),returns true if there is at least one consumer waiting to receive an element via blockingqueue.
java.util.concurrent.TransferQueue.transfer(java.util.concurrent.TransferQueue),"transfers the element to a consumer, waiting if necessary to do so."
java.util.concurrent.TransferQueue.tryTransfer(java.util.concurrent.TransferQueue),"transfers the element to a waiting consumer immediately, if possible."
"java.util.concurrent.TransferQueue.tryTransfer(java.util.concurrent.TransferQueue,long,java.util.concurrent.TimeUnit)",transfers the element to a consumer if it is possible to do so before the timeout elapses.
"java.util.concurrent.AbstractExecutorService.newTaskFor(java.lang.Runnable,T)",returns a runnablefuture for the given runnable and default value.
java.util.concurrent.AbstractExecutorService.newTaskFor(java.util.concurrent.Callable<T>),returns a runnablefuture for the given callable task.
java.util.concurrent.ArrayBlockingQueue.add(java.util.concurrent.ArrayBlockingQueue),"inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and throwing an illegalstateexception if this queue is full."
java.util.concurrent.ArrayBlockingQueue.clear(),atomically removes all of the elements from this queue.
java.util.concurrent.ArrayBlockingQueue.contains(java.lang.Object),returns true if this queue contains the specified element.
java.util.concurrent.ArrayBlockingQueue.iterator(),returns an iterator over the elements in this queue in proper sequence.
java.util.concurrent.ArrayBlockingQueue.offer(java.util.concurrent.ArrayBlockingQueue),"inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full."
"java.util.concurrent.ArrayBlockingQueue.offer(java.util.concurrent.ArrayBlockingQueue,long,java.util.concurrent.TimeUnit)","inserts the specified element at the tail of this queue, waiting up to the specified wait time for space to become available if the queue is full."
java.util.concurrent.ArrayBlockingQueue.put(java.util.concurrent.ArrayBlockingQueue),"inserts the specified element at the tail of this queue, waiting for space to become available if the queue is full."
java.util.concurrent.ArrayBlockingQueue.remainingCapacity(),returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking.
java.util.concurrent.ArrayBlockingQueue.remove(java.lang.Object),"removes a single instance of the specified element from this queue, if it is present."
java.util.concurrent.ArrayBlockingQueue.size(),returns the number of elements in this queue.
java.util.concurrent.ArrayBlockingQueue.spliterator(),returns a spliterator over the elements in this queue.
java.util.concurrent.ArrayBlockingQueue.toArray(),"returns an array containing all of the elements in this queue, in proper sequence."
java.util.concurrent.ArrayBlockingQueue.toArray(T[]),"returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array."
java.util.concurrent.CompletableFuture.allOf(java.util.concurrent.CompletableFuture<?>...),returns a new completablefuture that is completed when all of the given completablefutures complete.
java.util.concurrent.CompletableFuture.anyOf(java.util.concurrent.CompletableFuture<?>...),"returns a new completablefuture that is completed when any of the given completablefutures complete, with the same result."
java.util.concurrent.CompletableFuture.cancel(boolean),"if not already completed, completes this completablefuture with a cancellationexception."
java.util.concurrent.CompletableFuture.complete(java.util.concurrent.CompletableFuture),"if not already completed, sets the value returned by get() and related methods to the given value."
java.util.concurrent.CompletableFuture.completedFuture(U),returns a new completablefuture that is already completed with the given value.
java.util.concurrent.CompletableFuture.completeExceptionally(java.lang.Throwable),"if not already completed, causes invocations of get() and related methods to throw the given exception."
"java.util.concurrent.CompletableFuture.exceptionally(,? extends java.util.concurrent.CompletableFuture>)","returns a new completablefuture that is completed when this completablefuture completes, with the result of the given function of the exception triggering this completablefuture's completion when it completes exceptionally; otherwise, if this completablefuture completes normally, then the returned completablefuture also completes normally with the same value."
java.util.concurrent.CompletableFuture.get(),"waits if necessary for this future to complete, and then returns its result."
"java.util.concurrent.CompletableFuture.get(long,java.util.concurrent.TimeUnit)","waits if necessary for at most the given time for this future to complete, and then returns its result, if available."
java.util.concurrent.CompletableFuture.getNow(java.util.concurrent.CompletableFuture),"returns the result value (or throws any encountered exception) if completed, else returns the given valueifabsent."
java.util.concurrent.CompletableFuture.getNumberOfDependents(),returns the estimated number of completablefutures whose completions are awaiting completion of this completablefuture.
java.util.concurrent.CompletableFuture.isCancelled(),returns true if this completablefuture was cancelled before it completed normally.
java.util.concurrent.CompletableFuture.isCompletedExceptionally(),"returns true if this completablefuture completed exceptionally, in any way."
java.util.concurrent.CompletableFuture.isDone(),"returns true if completed in any fashion: normally, exceptionally, or via cancellation."
java.util.concurrent.CompletableFuture.join(),"returns the result value when complete, or throws an (unchecked) exception if completed exceptionally."
java.util.concurrent.CompletableFuture.obtrudeException(java.lang.Throwable),"forcibly causes subsequent invocations of method get() and related methods to throw the given exception, whether or not already completed."
java.util.concurrent.CompletableFuture.obtrudeValue(java.util.concurrent.CompletableFuture),"forcibly sets or resets the value subsequently returned by method get() and related methods, whether or not already completed."
java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable),returns a new completablefuture that is asynchronously completed by a task running in the forkjoinpool.
"java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable,java.util.concurrent.Executor)",returns a new completablefuture that is asynchronously completed by a task running in the given executor after it runs the given action.
java.util.concurrent.CompletableFuture.supplyAsync(java.util.function.Supplier<U>),returns a new completablefuture that is asynchronously completed by a task running in the forkjoinpool.
"java.util.concurrent.CompletableFuture.supplyAsync(java.util.function.Supplier<U>,java.util.concurrent.Executor)",returns a new completablefuture that is asynchronously completed by a task running in the given executor with the value obtained by calling the given supplier.
java.util.concurrent.CompletableFuture.toCompletableFuture(),returns this completablefuture.
java.util.concurrent.CompletableFuture.toString(),"returns a string identifying this completablefuture, as well as its completion state."
java.util.concurrent.ConcurrentHashMap.clear(),removes all of the mappings from this map.
"java.util.concurrent.ConcurrentHashMap.compute(java.util.concurrent.ConcurrentHashMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentHashMap>)",attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
"java.util.concurrent.ConcurrentHashMap.computeIfAbsent(java.util.concurrent.ConcurrentHashMap,java.util.function.Function<? super,? extends java.util.concurrent.ConcurrentHashMap>)","if the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null."
"java.util.concurrent.ConcurrentHashMap.computeIfPresent(java.util.concurrent.ConcurrentHashMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentHashMap>)","if the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value."
java.util.concurrent.ConcurrentHashMap.contains(java.lang.Object),legacy method testing if some key maps into the specified value in this table.
java.util.concurrent.ConcurrentHashMap.containsKey(java.lang.Object),tests if the specified object is a key in this table.
java.util.concurrent.ConcurrentHashMap.containsValue(java.lang.Object),returns true if this map maps one or more keys to the specified value.
java.util.concurrent.ConcurrentHashMap.elements(),returns an enumeration of the values in this table.
java.util.concurrent.ConcurrentHashMap.entrySet(),returns a set view of the mappings contained in this map.
java.util.concurrent.ConcurrentHashMap.equals(java.lang.Object),compares the specified object with this map for equality.
"java.util.concurrent.ConcurrentHashMap.forEach(long,java.util.function.BiConsumer<? super,? super java.util.concurrent.ConcurrentHashMap>)","performs the given action for each (key, value)."
"java.util.concurrent.ConcurrentHashMap.forEach(long,java.util.function.BiFunction<? super,? super,? extends U>,java.util.function.Consumer<? super U>)","performs the given action for each non-null transformation of each (key, value)."
"java.util.concurrent.ConcurrentHashMap.forEachEntry(long,java.util.function.Consumer<? super,java.util.concurrent.ConcurrentHashMap>>)",performs the given action for each entry.
"java.util.concurrent.ConcurrentHashMap.forEachEntry(long,,,? extends U>,java.util.function.Consumer<? super U>)",performs the given action for each non-null transformation of each entry.
"java.util.concurrent.ConcurrentHashMap.forEachKey(long,java.util.function.Consumer<? super java.util.concurrent.ConcurrentHashMap>)",performs the given action for each key.
"java.util.concurrent.ConcurrentHashMap.forEachKey(long,java.util.function.Function<? super,? extends U>,java.util.function.Consumer<? super U>)",performs the given action for each non-null transformation of each key.
"java.util.concurrent.ConcurrentHashMap.forEachValue(long,java.util.function.Consumer<? super java.util.concurrent.ConcurrentHashMap>)",performs the given action for each value.
"java.util.concurrent.ConcurrentHashMap.forEachValue(long,java.util.function.Function<? super,? extends U>,java.util.function.Consumer<? super U>)",performs the given action for each non-null transformation of each value.
java.util.concurrent.ConcurrentHashMap.get(java.lang.Object),"returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
"java.util.concurrent.ConcurrentHashMap.getOrDefault(java.lang.Object,java.util.concurrent.ConcurrentHashMap)","returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key."
java.util.concurrent.ConcurrentHashMap.hashCode(),"returns the hash code value for this map, i."
java.util.concurrent.ConcurrentHashMap.isEmpty(),returns true if this map contains no key-value mappings.
java.util.concurrent.ConcurrentHashMap.keys(),returns an enumeration of the keys in this table.
java.util.concurrent.ConcurrentHashMap.keySet(),returns a set view of the keys contained in this map.
java.util.concurrent.ConcurrentHashMap.keySet(java.util.concurrent.ConcurrentHashMap),"returns a set view of the keys in this map, using the given common mapped value for any additions (i."
java.util.concurrent.ConcurrentHashMap.mappingCount(),returns the number of mappings.
"java.util.concurrent.ConcurrentHashMap.merge(java.util.concurrent.ConcurrentHashMap,java.util.concurrent.ConcurrentHashMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentHashMap>)","if the specified key is not already associated with a (non-null) value, associates it with the given value."
java.util.concurrent.ConcurrentHashMap.newKeySet(),creates a new set backed by a concurrenthashmap from the given type to boolean.
java.util.concurrent.ConcurrentHashMap.newKeySet(int),creates a new set backed by a concurrenthashmap from the given type to boolean.
"java.util.concurrent.ConcurrentHashMap.put(java.util.concurrent.ConcurrentHashMap,java.util.concurrent.ConcurrentHashMap)",maps the specified key to the specified value in this table.
"java.util.concurrent.ConcurrentHashMap.putAll(java.util.Map<? extends,? extends java.util.concurrent.ConcurrentHashMap>)",copies all of the mappings from the specified map to this one.
"java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.util.concurrent.ConcurrentHashMap,java.util.concurrent.ConcurrentHashMap)","if the specified key is not already associated with a value, associate it with the given value."
"java.util.concurrent.ConcurrentHashMap.reduce(long,java.util.function.BiFunction<? super,? super,? extends U>,java.util.function.BiFunction<? super,? super,? extends U>)","returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none."
"java.util.concurrent.ConcurrentHashMap.reduceEntries(long,,,,,? extends,java.util.concurrent.ConcurrentHashMap>>)","returns the result of accumulating all entries using the given reducer to combine values, or null if none."
"java.util.concurrent.ConcurrentHashMap.reduceEntries(long,,,? extends U>,java.util.function.BiFunction<? super,? super,? extends U>)","returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none."
"java.util.concurrent.ConcurrentHashMap.reduceEntriesToDouble(long,,java.util.concurrent.ConcurrentHashMap>>,double,java.util.function.DoubleBinaryOperator)","returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceEntriesToInt(long,,java.util.concurrent.ConcurrentHashMap>>,int,java.util.function.IntBinaryOperator)","returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceEntriesToLong(long,,java.util.concurrent.ConcurrentHashMap>>,long,java.util.function.LongBinaryOperator)","returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceKeys(long,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentHashMap>)","returns the result of accumulating all keys using the given reducer to combine values, or null if none."
"java.util.concurrent.ConcurrentHashMap.reduceKeys(long,java.util.function.Function<? super,? extends U>,java.util.function.BiFunction<? super,? super,? extends U>)","returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none."
"java.util.concurrent.ConcurrentHashMap.reduceKeysToDouble(long,java.util.function.ToDoubleFunction<? super java.util.concurrent.ConcurrentHashMap>,double,java.util.function.DoubleBinaryOperator)","returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceKeysToInt(long,java.util.function.ToIntFunction<? super java.util.concurrent.ConcurrentHashMap>,int,java.util.function.IntBinaryOperator)","returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceKeysToLong(long,java.util.function.ToLongFunction<? super java.util.concurrent.ConcurrentHashMap>,long,java.util.function.LongBinaryOperator)","returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceToDouble(long,java.util.function.ToDoubleBiFunction<? super,? super java.util.concurrent.ConcurrentHashMap>,double,java.util.function.DoubleBinaryOperator)","returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceToInt(long,java.util.function.ToIntBiFunction<? super,? super java.util.concurrent.ConcurrentHashMap>,int,java.util.function.IntBinaryOperator)","returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceToLong(long,java.util.function.ToLongBiFunction<? super,? super java.util.concurrent.ConcurrentHashMap>,long,java.util.function.LongBinaryOperator)","returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceValues(long,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentHashMap>)","returns the result of accumulating all values using the given reducer to combine values, or null if none."
"java.util.concurrent.ConcurrentHashMap.reduceValues(long,java.util.function.Function<? super,? extends U>,java.util.function.BiFunction<? super,? super,? extends U>)","returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none."
"java.util.concurrent.ConcurrentHashMap.reduceValuesToDouble(long,java.util.function.ToDoubleFunction<? super java.util.concurrent.ConcurrentHashMap>,double,java.util.function.DoubleBinaryOperator)","returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceValuesToInt(long,java.util.function.ToIntFunction<? super java.util.concurrent.ConcurrentHashMap>,int,java.util.function.IntBinaryOperator)","returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceValuesToLong(long,java.util.function.ToLongFunction<? super java.util.concurrent.ConcurrentHashMap>,long,java.util.function.LongBinaryOperator)","returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value."
java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object),removes the key (and its corresponding value) from this map.
"java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object,java.lang.Object)",removes the entry for a key only if currently mapped to a given value.
"java.util.concurrent.ConcurrentHashMap.replace(java.util.concurrent.ConcurrentHashMap,java.util.concurrent.ConcurrentHashMap,java.util.concurrent.ConcurrentHashMap)",replaces the entry for a key only if currently mapped to a given value.
"java.util.concurrent.ConcurrentHashMap.replace(java.util.concurrent.ConcurrentHashMap,java.util.concurrent.ConcurrentHashMap)",replaces the entry for a key only if currently mapped to some value.
"java.util.concurrent.ConcurrentHashMap.search(long,java.util.function.BiFunction<? super,? super,? extends U>)","returns a non-null result from applying the given search function on each (key, value), or null if none."
"java.util.concurrent.ConcurrentHashMap.searchEntries(long,,,? extends U>)","returns a non-null result from applying the given search function on each entry, or null if none."
"java.util.concurrent.ConcurrentHashMap.searchKeys(long,java.util.function.Function<? super,? extends U>)","returns a non-null result from applying the given search function on each key, or null if none."
"java.util.concurrent.ConcurrentHashMap.searchValues(long,java.util.function.Function<? super,? extends U>)","returns a non-null result from applying the given search function on each value, or null if none."
java.util.concurrent.ConcurrentHashMap.size(),returns the number of key-value mappings in this map.
java.util.concurrent.ConcurrentHashMap.toString(),returns a string representation of this map.
java.util.concurrent.ConcurrentHashMap.values(),returns a collection view of the values contained in this map.
java.util.concurrent.ConcurrentHashMap.KeySetView.add(java.util.concurrent.ConcurrentHashMap.KeySetView),"adds the specified key to this set view by mapping the key to the default mapped value in the backing map, if defined."
java.util.concurrent.ConcurrentHashMap.KeySetView.addAll(java.util.Collection<? extends java.util.concurrent.ConcurrentHashMap.KeySetView>),"adds all of the elements in the specified collection to this set, as if by calling add(k) on each one."
java.util.concurrent.ConcurrentHashMap.KeySetView.clear(),"removes all of the elements from this view, by removing all the mappings from the map backing this view."
java.util.concurrent.ConcurrentHashMap.KeySetView.contains(java.lang.Object),returns true if this collection contains the specified element.
java.util.concurrent.ConcurrentHashMap.KeySetView.getMap(),returns the map backing this view.
java.util.concurrent.ConcurrentHashMap.KeySetView.getMappedValue(),"returns the default mapped value for additions, or null if additions are not supported."
java.util.concurrent.ConcurrentHashMap.KeySetView.iterator(),returns an iterator over the elements in this collection.
java.util.concurrent.ConcurrentHashMap.KeySetView.remove(java.lang.Object),"removes the key from this map view, by removing the key (and its corresponding value) from the backing map."
java.util.concurrent.ConcurrentHashMap.KeySetView.toString(),returns a string representation of this collection.
java.util.concurrent.ConcurrentLinkedDeque.add(java.util.concurrent.ConcurrentLinkedDeque),inserts the specified element at the tail of this deque.
java.util.concurrent.ConcurrentLinkedDeque.addAll(java.util.Collection<? extends java.util.concurrent.ConcurrentLinkedDeque>),"appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator."
java.util.concurrent.ConcurrentLinkedDeque.addFirst(java.util.concurrent.ConcurrentLinkedDeque),inserts the specified element at the front of this deque.
java.util.concurrent.ConcurrentLinkedDeque.addLast(java.util.concurrent.ConcurrentLinkedDeque),inserts the specified element at the end of this deque.
java.util.concurrent.ConcurrentLinkedDeque.clear(),removes all of the elements from this deque.
java.util.concurrent.ConcurrentLinkedDeque.contains(java.lang.Object),returns true if this deque contains at least one element e such that o.
java.util.concurrent.ConcurrentLinkedDeque.descendingIterator(),returns an iterator over the elements in this deque in reverse sequential order.
java.util.concurrent.ConcurrentLinkedDeque.isEmpty(),returns true if this collection contains no elements.
java.util.concurrent.ConcurrentLinkedDeque.iterator(),returns an iterator over the elements in this deque in proper sequence.
java.util.concurrent.ConcurrentLinkedDeque.offer(java.util.concurrent.ConcurrentLinkedDeque),inserts the specified element at the tail of this deque.
java.util.concurrent.ConcurrentLinkedDeque.offerFirst(java.util.concurrent.ConcurrentLinkedDeque),inserts the specified element at the front of this deque.
java.util.concurrent.ConcurrentLinkedDeque.offerLast(java.util.concurrent.ConcurrentLinkedDeque),inserts the specified element at the end of this deque.
java.util.concurrent.ConcurrentLinkedDeque.remove(java.lang.Object),removes the first element e such that o.
java.util.concurrent.ConcurrentLinkedDeque.removeFirstOccurrence(java.lang.Object),removes the first element e such that o.
java.util.concurrent.ConcurrentLinkedDeque.removeLastOccurrence(java.lang.Object),removes the last element e such that o.
java.util.concurrent.ConcurrentLinkedDeque.size(),returns the number of elements in this deque.
java.util.concurrent.ConcurrentLinkedDeque.spliterator(),returns a spliterator over the elements in this deque.
java.util.concurrent.ConcurrentLinkedDeque.toArray(),"returns an array containing all of the elements in this deque, in proper sequence (from first to last element)."
java.util.concurrent.ConcurrentLinkedDeque.toArray(T[]),"returns an array containing all of the elements in this deque, in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array."
java.util.concurrent.ConcurrentLinkedQueue.add(java.util.concurrent.ConcurrentLinkedQueue),inserts the specified element at the tail of this queue.
java.util.concurrent.ConcurrentLinkedQueue.addAll(java.util.Collection<? extends java.util.concurrent.ConcurrentLinkedQueue>),"appends all of the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collection's iterator."
java.util.concurrent.ConcurrentLinkedQueue.contains(java.lang.Object),returns true if this queue contains the specified element.
java.util.concurrent.ConcurrentLinkedQueue.isEmpty(),returns true if this queue contains no elements.
java.util.concurrent.ConcurrentLinkedQueue.iterator(),returns an iterator over the elements in this queue in proper sequence.
java.util.concurrent.ConcurrentLinkedQueue.offer(java.util.concurrent.ConcurrentLinkedQueue),inserts the specified element at the tail of this queue.
java.util.concurrent.ConcurrentLinkedQueue.remove(java.lang.Object),"removes a single instance of the specified element from this queue, if it is present."
java.util.concurrent.ConcurrentLinkedQueue.size(),returns the number of elements in this queue.
java.util.concurrent.ConcurrentLinkedQueue.spliterator(),returns a spliterator over the elements in this queue.
java.util.concurrent.ConcurrentLinkedQueue.toArray(),"returns an array containing all of the elements in this queue, in proper sequence."
java.util.concurrent.ConcurrentLinkedQueue.toArray(T[]),"returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array."
java.util.concurrent.ConcurrentSkipListMap.ceilingEntry(java.util.concurrent.ConcurrentSkipListMap),"returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such entry."
java.util.concurrent.ConcurrentSkipListMap.clear(),removes all of the mappings from this map.
java.util.concurrent.ConcurrentSkipListMap.clone(),returns a shallow copy of this concurrentskiplistmap instance.
"java.util.concurrent.ConcurrentSkipListMap.compute(java.util.concurrent.ConcurrentSkipListMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentSkipListMap>)",attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
"java.util.concurrent.ConcurrentSkipListMap.computeIfAbsent(java.util.concurrent.ConcurrentSkipListMap,java.util.function.Function<? super,? extends java.util.concurrent.ConcurrentSkipListMap>)","if the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null."
"java.util.concurrent.ConcurrentSkipListMap.computeIfPresent(java.util.concurrent.ConcurrentSkipListMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentSkipListMap>)","if the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value."
java.util.concurrent.ConcurrentSkipListMap.containsKey(java.lang.Object),returns true if this map contains a mapping for the specified key.
java.util.concurrent.ConcurrentSkipListMap.containsValue(java.lang.Object),returns true if this map maps one or more keys to the specified value.
java.util.concurrent.ConcurrentSkipListMap.entrySet(),returns a set view of the mappings contained in this map.
java.util.concurrent.ConcurrentSkipListMap.equals(java.lang.Object),compares the specified object with this map for equality.
java.util.concurrent.ConcurrentSkipListMap.firstEntry(),"returns a key-value mapping associated with the least key in this map, or null if the map is empty."
java.util.concurrent.ConcurrentSkipListMap.floorEntry(java.util.concurrent.ConcurrentSkipListMap),"returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key."
java.util.concurrent.ConcurrentSkipListMap.get(java.lang.Object),"returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
"java.util.concurrent.ConcurrentSkipListMap.getOrDefault(java.lang.Object,java.util.concurrent.ConcurrentSkipListMap)","returns the value to which the specified key is mapped, or the given defaultvalue if this map contains no mapping for the key."
java.util.concurrent.ConcurrentSkipListMap.higherEntry(java.util.concurrent.ConcurrentSkipListMap),"returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key."
java.util.concurrent.ConcurrentSkipListMap.isEmpty(),returns true if this map contains no key-value mappings.
java.util.concurrent.ConcurrentSkipListMap.keySet(),returns a navigableset view of the keys contained in this map.
java.util.concurrent.ConcurrentSkipListMap.lastEntry(),"returns a key-value mapping associated with the greatest key in this map, or null if the map is empty."
java.util.concurrent.ConcurrentSkipListMap.lowerEntry(java.util.concurrent.ConcurrentSkipListMap),"returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key."
"java.util.concurrent.ConcurrentSkipListMap.merge(java.util.concurrent.ConcurrentSkipListMap,java.util.concurrent.ConcurrentSkipListMap,java.util.function.BiFunction<? super,? super,? extends java.util.concurrent.ConcurrentSkipListMap>)","if the specified key is not already associated with a value, associates it with the given value."
java.util.concurrent.ConcurrentSkipListMap.pollFirstEntry(),"removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty."
java.util.concurrent.ConcurrentSkipListMap.pollLastEntry(),"removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty."
"java.util.concurrent.ConcurrentSkipListMap.put(java.util.concurrent.ConcurrentSkipListMap,java.util.concurrent.ConcurrentSkipListMap)",associates the specified value with the specified key in this map.
"java.util.concurrent.ConcurrentSkipListMap.putIfAbsent(java.util.concurrent.ConcurrentSkipListMap,java.util.concurrent.ConcurrentSkipListMap)","if the specified key is not already associated with a value, associate it with the given value."
java.util.concurrent.ConcurrentSkipListMap.remove(java.lang.Object),removes the mapping for the specified key from this map if present.
"java.util.concurrent.ConcurrentSkipListMap.remove(java.lang.Object,java.lang.Object)",removes the entry for a key only if currently mapped to a given value.
"java.util.concurrent.ConcurrentSkipListMap.replace(java.util.concurrent.ConcurrentSkipListMap,java.util.concurrent.ConcurrentSkipListMap,java.util.concurrent.ConcurrentSkipListMap)",replaces the entry for a key only if currently mapped to a given value.
"java.util.concurrent.ConcurrentSkipListMap.replace(java.util.concurrent.ConcurrentSkipListMap,java.util.concurrent.ConcurrentSkipListMap)",replaces the entry for a key only if currently mapped to some value.
java.util.concurrent.ConcurrentSkipListMap.size(),returns the number of key-value mappings in this map.
java.util.concurrent.ConcurrentSkipListMap.values(),returns a collection view of the values contained in this map.
java.util.concurrent.ConcurrentSkipListSet.add(java.util.concurrent.ConcurrentSkipListSet),adds the specified element to this set if it is not already present.
java.util.concurrent.ConcurrentSkipListSet.clear(),removes all of the elements from this set.
java.util.concurrent.ConcurrentSkipListSet.clone(),returns a shallow copy of this concurrentskiplistset instance.
java.util.concurrent.ConcurrentSkipListSet.contains(java.lang.Object),returns true if this set contains the specified element.
java.util.concurrent.ConcurrentSkipListSet.descendingIterator(),returns an iterator over the elements in this set in descending order.
java.util.concurrent.ConcurrentSkipListSet.descendingSet(),returns a reverse order view of the elements contained in this set.
java.util.concurrent.ConcurrentSkipListSet.equals(java.lang.Object),compares the specified object with this set for equality.
java.util.concurrent.ConcurrentSkipListSet.isEmpty(),returns true if this set contains no elements.
java.util.concurrent.ConcurrentSkipListSet.iterator(),returns an iterator over the elements in this set in ascending order.
java.util.concurrent.ConcurrentSkipListSet.remove(java.lang.Object),removes the specified element from this set if it is present.
java.util.concurrent.ConcurrentSkipListSet.removeAll(java.util.Collection<?>),removes from this set all of its elements that are contained in the specified collection.
java.util.concurrent.ConcurrentSkipListSet.size(),returns the number of elements in this set.
java.util.concurrent.ConcurrentSkipListSet.spliterator(),returns a spliterator over the elements in this set.
java.util.concurrent.CopyOnWriteArrayList.add(java.util.concurrent.CopyOnWriteArrayList),appends the specified element to the end of this list.
"java.util.concurrent.CopyOnWriteArrayList.add(int,java.util.concurrent.CopyOnWriteArrayList)",inserts the specified element at the specified position in this list.
java.util.concurrent.CopyOnWriteArrayList.addAll(java.util.Collection<? extends java.util.concurrent.CopyOnWriteArrayList>),"appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator."
"java.util.concurrent.CopyOnWriteArrayList.addAll(int,java.util.Collection<? extends java.util.concurrent.CopyOnWriteArrayList>)","inserts all of the elements in the specified collection into this list, starting at the specified position."
java.util.concurrent.CopyOnWriteArrayList.addAllAbsent(java.util.Collection<? extends java.util.concurrent.CopyOnWriteArrayList>),"appends all of the elements in the specified collection that are not already contained in this list, to the end of this list, in the order that they are returned by the specified collection's iterator."
java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(java.util.concurrent.CopyOnWriteArrayList),"appends the element, if not present."
java.util.concurrent.CopyOnWriteArrayList.clear(),removes all of the elements from this list.
java.util.concurrent.CopyOnWriteArrayList.clone(),returns a shallow copy of this list.
java.util.concurrent.CopyOnWriteArrayList.contains(java.lang.Object),returns true if this list contains the specified element.
java.util.concurrent.CopyOnWriteArrayList.containsAll(java.util.Collection<?>),returns true if this list contains all of the elements of the specified collection.
java.util.concurrent.CopyOnWriteArrayList.equals(java.lang.Object),compares the specified object with this list for equality.
java.util.concurrent.CopyOnWriteArrayList.get(int),returns the element at the specified position in this list.
java.util.concurrent.CopyOnWriteArrayList.hashCode(),returns the hash code value for this list.
java.util.concurrent.CopyOnWriteArrayList.indexOf(java.lang.Object),"returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element."
"java.util.concurrent.CopyOnWriteArrayList.indexOf(java.util.concurrent.CopyOnWriteArrayList,int)","returns the index of the first occurrence of the specified element in this list, searching forwards from index, or returns -1 if the element is not found."
java.util.concurrent.CopyOnWriteArrayList.isEmpty(),returns true if this list contains no elements.
java.util.concurrent.CopyOnWriteArrayList.iterator(),returns an iterator over the elements in this list in proper sequence.
java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(java.lang.Object),"returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element."
"java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(java.util.concurrent.CopyOnWriteArrayList,int)","returns the index of the last occurrence of the specified element in this list, searching backwards from index, or returns -1 if the element is not found."
java.util.concurrent.CopyOnWriteArrayList.listIterator(),returns a list iterator over the elements in this list (in proper sequence).
java.util.concurrent.CopyOnWriteArrayList.listIterator(int),"returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list."
java.util.concurrent.CopyOnWriteArrayList.remove(int),removes the element at the specified position in this list.
java.util.concurrent.CopyOnWriteArrayList.remove(java.lang.Object),"removes the first occurrence of the specified element from this list, if it is present."
java.util.concurrent.CopyOnWriteArrayList.removeAll(java.util.Collection<?>),removes from this list all of its elements that are contained in the specified collection.
java.util.concurrent.CopyOnWriteArrayList.retainAll(java.util.Collection<?>),retains only the elements in this list that are contained in the specified collection.
"java.util.concurrent.CopyOnWriteArrayList.set(int,java.util.concurrent.CopyOnWriteArrayList)",replaces the element at the specified position in this list with the specified element.
java.util.concurrent.CopyOnWriteArrayList.size(),returns the number of elements in this list.
java.util.concurrent.CopyOnWriteArrayList.spliterator(),returns a spliterator over the elements in this list.
"java.util.concurrent.CopyOnWriteArrayList.subList(int,int)","returns a view of the portion of this list between fromindex, inclusive, and toindex, exclusive."
java.util.concurrent.CopyOnWriteArrayList.toArray(),returns an array containing all of the elements in this list in proper sequence (from first to last element).
java.util.concurrent.CopyOnWriteArrayList.toArray(T[]),returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
java.util.concurrent.CopyOnWriteArrayList.toString(),returns a string representation of this list.
java.util.concurrent.CopyOnWriteArraySet.add(java.util.concurrent.CopyOnWriteArraySet),adds the specified element to this set if it is not already present.
java.util.concurrent.CopyOnWriteArraySet.addAll(java.util.Collection<? extends java.util.concurrent.CopyOnWriteArraySet>),adds all of the elements in the specified collection to this set if they're not already present.
java.util.concurrent.CopyOnWriteArraySet.clear(),removes all of the elements from this set.
java.util.concurrent.CopyOnWriteArraySet.contains(java.lang.Object),returns true if this set contains the specified element.
java.util.concurrent.CopyOnWriteArraySet.containsAll(java.util.Collection<?>),returns true if this set contains all of the elements of the specified collection.
java.util.concurrent.CopyOnWriteArraySet.equals(java.lang.Object),compares the specified object with this set for equality.
java.util.concurrent.CopyOnWriteArraySet.isEmpty(),returns true if this set contains no elements.
java.util.concurrent.CopyOnWriteArraySet.iterator(),returns an iterator over the elements contained in this set in the order in which these elements were added.
java.util.concurrent.CopyOnWriteArraySet.remove(java.lang.Object),removes the specified element from this set if it is present.
java.util.concurrent.CopyOnWriteArraySet.removeAll(java.util.Collection<?>),removes from this set all of its elements that are contained in the specified collection.
java.util.concurrent.CopyOnWriteArraySet.retainAll(java.util.Collection<?>),retains only the elements in this set that are contained in the specified collection.
java.util.concurrent.CopyOnWriteArraySet.size(),returns the number of elements in this set.
java.util.concurrent.CopyOnWriteArraySet.spliterator(),returns a spliterator over the elements in this set in the order in which these elements were added.
java.util.concurrent.CopyOnWriteArraySet.toArray(),returns an array containing all of the elements in this set.
java.util.concurrent.CopyOnWriteArraySet.toArray(T[]),returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array.
java.util.concurrent.CountDownLatch.await(),"causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted."
"java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)","causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted, or the specified waiting time elapses."
java.util.concurrent.CountDownLatch.countDown(),"decrements the count of the latch, releasing all waiting threads if the count reaches zero."
java.util.concurrent.CountDownLatch.getCount(),returns the current count.
java.util.concurrent.CountDownLatch.toString(),"returns a string identifying this latch, as well as its state."
java.util.concurrent.CountedCompleter.addToPendingCount(int),adds (atomically) the given value to the pending count.
"java.util.concurrent.CountedCompleter.compareAndSetPendingCount(int,int)",sets (atomically) the pending count to the given count only if it currently holds the given expected value.
java.util.concurrent.CountedCompleter.complete(java.util.concurrent.CountedCompleter),"regardless of pending count, invokes oncompletion(countedcompleter), marks this task as complete and further triggers trycomplete() on this task's completer, if one exists."
java.util.concurrent.CountedCompleter.compute(),the main computation performed by this task.
java.util.concurrent.CountedCompleter.decrementPendingCountUnlessZero(),"if the pending count is nonzero, (atomically) decrements it."
java.util.concurrent.CountedCompleter.exec(),implements execution conventions for countedcompleters.
java.util.concurrent.CountedCompleter.firstComplete(),"if this task's pending count is zero, returns this task; otherwise decrements its pending count and returns null."
java.util.concurrent.CountedCompleter.getCompleter(),"returns the completer established in this task's constructor, or null if none."
java.util.concurrent.CountedCompleter.getPendingCount(),returns the current pending count.
java.util.concurrent.CountedCompleter.getRawResult(),returns the result of the computation.
java.util.concurrent.CountedCompleter.getRoot(),returns the root of the current computation; i.
java.util.concurrent.CountedCompleter.helpComplete(int),"if this task has not completed, attempts to process at most the given number of other unprocessed tasks for which this task is on the completion path, if any are known to exist."
java.util.concurrent.CountedCompleter.nextComplete(),"if this task does not have a completer, invokes forkjointask."
java.util.concurrent.CountedCompleter.onCompletion(java.util.concurrent.CountedCompleter<?>),"performs an action when method trycomplete() is invoked and the pending count is zero, or when the unconditional method complete(t) is invoked."
"java.util.concurrent.CountedCompleter.onExceptionalCompletion(java.lang.Throwable,java.util.concurrent.CountedCompleter<?>)",performs an action when method forkjointask.
java.util.concurrent.CountedCompleter.setPendingCount(int),sets the pending count to the given value.
java.util.concurrent.CountedCompleter.setRawResult(java.util.concurrent.CountedCompleter),a method that result-bearing countedcompleters may optionally use to help maintain result data.
java.util.concurrent.CountedCompleter.tryComplete(),"if the pending count is nonzero, decrements the count; otherwise invokes oncompletion(countedcompleter) and then similarly tries to complete this task's completer, if one exists, else marks this task as complete."
java.util.concurrent.CyclicBarrier.await(),waits until all parties have invoked await on this barrier.
"java.util.concurrent.CyclicBarrier.await(long,java.util.concurrent.TimeUnit)","waits until all parties have invoked await on this barrier, or the specified waiting time elapses."
java.util.concurrent.CyclicBarrier.getNumberWaiting(),returns the number of parties currently waiting at the barrier.
java.util.concurrent.CyclicBarrier.getParties(),returns the number of parties required to trip this barrier.
java.util.concurrent.CyclicBarrier.isBroken(),queries if this barrier is in a broken state.
java.util.concurrent.CyclicBarrier.reset(),resets the barrier to its initial state.
java.util.concurrent.DelayQueue.add(java.util.concurrent.DelayQueue),inserts the specified element into this delay queue.
java.util.concurrent.DelayQueue.clear(),atomically removes all of the elements from this delay queue.
java.util.concurrent.DelayQueue.iterator(),returns an iterator over all the elements (both expired and unexpired) in this queue.
java.util.concurrent.DelayQueue.offer(java.util.concurrent.DelayQueue),inserts the specified element into this delay queue.
"java.util.concurrent.DelayQueue.offer(java.util.concurrent.DelayQueue,long,java.util.concurrent.TimeUnit)",inserts the specified element into this delay queue.
java.util.concurrent.DelayQueue.peek(),"retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
java.util.concurrent.DelayQueue.poll(),"retrieves and removes the head of this queue, or returns null if this queue has no elements with an expired delay."
"java.util.concurrent.DelayQueue.poll(long,java.util.concurrent.TimeUnit)","retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue, or the specified wait time expires."
java.util.concurrent.DelayQueue.put(java.util.concurrent.DelayQueue),inserts the specified element into this delay queue.
java.util.concurrent.DelayQueue.remainingCapacity(),always returns integer.
java.util.concurrent.DelayQueue.remove(java.lang.Object),"removes a single instance of the specified element from this queue, if it is present, whether or not it has expired."
java.util.concurrent.DelayQueue.take(),"retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue."
java.util.concurrent.DelayQueue.toArray(),returns an array containing all of the elements in this queue.
java.util.concurrent.DelayQueue.toArray(T[]),returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array.
java.util.concurrent.Exchanger.exchange(java.util.concurrent.Exchanger),"waits for another thread to arrive at this exchange point (unless the current thread is interrupted), and then transfers the given object to it, receiving its object in return."
"java.util.concurrent.Exchanger.exchange(java.util.concurrent.Exchanger,long,java.util.concurrent.TimeUnit)","waits for another thread to arrive at this exchange point (unless the current thread is interrupted or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return."
"java.util.concurrent.Executors.callable(java.lang.Runnable,T)","returns a callable object that, when called, runs the given task and returns the given result."
java.util.concurrent.Executors.callable(java.lang.Runnable),"returns a callable object that, when called, runs the given task and returns null."
java.util.concurrent.Executors.callable(java.security.PrivilegedAction<?>),"returns a callable object that, when called, runs the given privileged action and returns its result."
java.util.concurrent.Executors.callable(java.security.PrivilegedExceptionAction<?>),"returns a callable object that, when called, runs the given privileged exception action and returns its result."
java.util.concurrent.Executors.defaultThreadFactory(),returns a default thread factory used to create new threads.
java.util.concurrent.Executors.newCachedThreadPool(),"creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available."
java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory),"creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available, and uses the provided threadfactory to create new threads when needed."
java.util.concurrent.Executors.newFixedThreadPool(int),creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.
"java.util.concurrent.Executors.newFixedThreadPool(int,java.util.concurrent.ThreadFactory)","creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue, using the provided threadfactory to create new threads when needed."
java.util.concurrent.Executors.newScheduledThreadPool(int),"creates a thread pool that can schedule commands to run after a given delay, or to execute periodically."
"java.util.concurrent.Executors.newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)","creates a thread pool that can schedule commands to run after a given delay, or to execute periodically."
java.util.concurrent.Executors.newSingleThreadExecutor(),creates an executor that uses a single worker thread operating off an unbounded queue.
java.util.concurrent.Executors.newSingleThreadExecutor(java.util.concurrent.ThreadFactory),"creates an executor that uses a single worker thread operating off an unbounded queue, and uses the provided threadfactory to create a new thread when needed."
java.util.concurrent.Executors.newSingleThreadScheduledExecutor(),"creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically."
java.util.concurrent.Executors.newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory),"creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically."
java.util.concurrent.Executors.newWorkStealingPool(int),"creates a thread pool that maintains enough threads to support the given parallelism level, and may use multiple queues to reduce contention."
java.util.concurrent.Executors.newWorkStealingPool(),creates a work-stealing thread pool using all available processors as its target parallelism level.
java.util.concurrent.Executors.privilegedCallable(java.util.concurrent.Callable<T>),"returns a callable object that will, when called, execute the given callable under the current access control context."
java.util.concurrent.Executors.privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable<T>),"returns a callable object that will, when called, execute the given callable under the current access control context, with the current context class loader as the context class loader."
java.util.concurrent.Executors.privilegedThreadFactory(),returns a thread factory used to create new threads that have the same permissions as the current thread.
java.util.concurrent.Executors.unconfigurableExecutorService(java.util.concurrent.ExecutorService),"returns an object that delegates all defined executorservice methods to the given executor, but not any other methods that might otherwise be accessible using casts."
java.util.concurrent.Executors.unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService),"returns an object that delegates all defined scheduledexecutorservice methods to the given executor, but not any other methods that might otherwise be accessible using casts."
"java.util.concurrent.ForkJoinPool.awaitQuiescence(long,java.util.concurrent.TimeUnit)","if called by a forkjointask operating in this pool, equivalent in effect to forkjointask."
"java.util.concurrent.ForkJoinPool.awaitTermination(long,java.util.concurrent.TimeUnit)","blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first."
java.util.concurrent.ForkJoinPool.commonPool(),returns the common pool instance.
java.util.concurrent.ForkJoinPool.drainTasksTo(java.util.Collection<? super java.util.concurrent.ForkJoinTask<?>>),"removes all available unexecuted submitted and forked tasks from scheduling queues and adds them to the given collection, without altering their execution status."
java.util.concurrent.ForkJoinPool.execute(java.util.concurrent.ForkJoinTask<?>),arranges for (asynchronous) execution of the given task.
java.util.concurrent.ForkJoinPool.getActiveThreadCount(),returns an estimate of the number of threads that are currently stealing or executing tasks.
java.util.concurrent.ForkJoinPool.getAsyncMode(),returns true if this pool uses local first-in-first-out scheduling mode for forked tasks that are never joined.
java.util.concurrent.ForkJoinPool.getCommonPoolParallelism(),returns the targeted parallelism level of the common pool.
java.util.concurrent.ForkJoinPool.getFactory(),returns the factory used for constructing new workers.
java.util.concurrent.ForkJoinPool.getParallelism(),returns the targeted parallelism level of this pool.
java.util.concurrent.ForkJoinPool.getPoolSize(),returns the number of worker threads that have started but not yet terminated.
java.util.concurrent.ForkJoinPool.getQueuedSubmissionCount(),returns an estimate of the number of tasks submitted to this pool that have not yet begun executing.
java.util.concurrent.ForkJoinPool.getQueuedTaskCount(),returns an estimate of the total number of tasks currently held in queues by worker threads (but not including tasks submitted to the pool that have not begun executing).
java.util.concurrent.ForkJoinPool.getRunningThreadCount(),returns an estimate of the number of worker threads that are not blocked waiting to join tasks or for other managed synchronization.
java.util.concurrent.ForkJoinPool.getStealCount(),returns an estimate of the total number of tasks stolen from one thread's work queue by another.
java.util.concurrent.ForkJoinPool.getUncaughtExceptionHandler(),returns the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks.
java.util.concurrent.ForkJoinPool.hasQueuedSubmissions(),returns true if there are any tasks submitted to this pool that have not yet begun executing.
java.util.concurrent.ForkJoinPool.invoke(java.util.concurrent.ForkJoinTask<T>),"performs the given task, returning its result upon completion."
java.util.concurrent.ForkJoinPool.isQuiescent(),returns true if all worker threads are currently idle.
java.util.concurrent.ForkJoinPool.isShutdown(),returns true if this pool has been shut down.
java.util.concurrent.ForkJoinPool.isTerminated(),returns true if all tasks have completed following shut down.
java.util.concurrent.ForkJoinPool.isTerminating(),returns true if the process of termination has commenced but not yet completed.
java.util.concurrent.ForkJoinPool.managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker),runs the given possibly blocking task.
java.util.concurrent.ForkJoinPool.pollSubmission(),removes and returns the next unexecuted submission if one is available.
java.util.concurrent.ForkJoinPool.shutdown(),"possibly initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted."
java.util.concurrent.ForkJoinPool.shutdownNow(),"possibly attempts to cancel and/or stop all tasks, and reject all subsequently submitted tasks."
java.util.concurrent.ForkJoinPool.submit(java.util.concurrent.ForkJoinTask<T>),submits a forkjointask for execution.
java.util.concurrent.ForkJoinPool.toString(),"returns a string identifying this pool, as well as its state, including indications of run state, parallelism level, and worker and task counts."
java.util.concurrent.ForkJoinTask.adapt(java.lang.Runnable),"returns a new forkjointask that performs the run method of the given runnable as its action, and returns a null result upon join()."
"java.util.concurrent.ForkJoinTask.adapt(java.lang.Runnable,T)","returns a new forkjointask that performs the run method of the given runnable as its action, and returns the given result upon join()."
java.util.concurrent.ForkJoinTask.adapt(java.util.concurrent.Callable<? extends T>),"returns a new forkjointask that performs the call method of the given callable as its action, and returns its result upon join(), translating any checked exceptions encountered into runtimeexception."
java.util.concurrent.ForkJoinTask.cancel(boolean),attempts to cancel execution of this task.
"java.util.concurrent.ForkJoinTask.compareAndSetForkJoinTaskTag(short,short)",atomically conditionally sets the tag value for this task.
java.util.concurrent.ForkJoinTask.complete(java.util.concurrent.ForkJoinTask),"completes this task, and if not already aborted or cancelled, returning the given value as the result of subsequent invocations of join and related operations."
java.util.concurrent.ForkJoinTask.completeExceptionally(java.lang.Throwable),"completes this task abnormally, and if not already aborted or cancelled, causes it to throw the given exception upon join and related operations."
java.util.concurrent.ForkJoinTask.exec(),"immediately performs the base action of this task and returns true if, upon return from this method, this task is guaranteed to have completed normally."
java.util.concurrent.ForkJoinTask.fork(),"arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the forkjoinpool."
java.util.concurrent.ForkJoinTask.get(),"waits if necessary for the computation to complete, and then retrieves its result."
"java.util.concurrent.ForkJoinTask.get(long,java.util.concurrent.TimeUnit)","waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available."
java.util.concurrent.ForkJoinTask.getException(),"returns the exception thrown by the base computation, or a cancellationexception if cancelled, or null if none or if the method has not yet completed."
java.util.concurrent.ForkJoinTask.getForkJoinTaskTag(),returns the tag for this task.
java.util.concurrent.ForkJoinTask.getPool(),"returns the pool hosting the current task execution, or null if this task is executing outside of any forkjoinpool."
java.util.concurrent.ForkJoinTask.getQueuedTaskCount(),returns an estimate of the number of tasks that have been forked by the current worker thread but not yet executed.
java.util.concurrent.ForkJoinTask.getRawResult(),"returns the result that would be returned by join(), even if this task completed abnormally, or null if this task is not known to have been completed."
java.util.concurrent.ForkJoinTask.getSurplusQueuedTaskCount(),"returns an estimate of how many more locally queued tasks are held by the current worker thread than there are other worker threads that might steal them, or zero if this thread is not operating in a forkjoinpool."
java.util.concurrent.ForkJoinTask.helpQuiesce(),possibly executes tasks until the pool hosting the current task is quiescent.
java.util.concurrent.ForkJoinTask.inForkJoinPool(),returns true if the current thread is a forkjoinworkerthread executing as a forkjoinpool computation.
java.util.concurrent.ForkJoinTask.invoke(),"commences performing this task, awaits its completion if necessary, and returns its result, or throws an (unchecked) runtimeexception or error if the underlying computation did so."
"java.util.concurrent.ForkJoinTask.invokeAll(java.util.concurrent.ForkJoinTask<?>,java.util.concurrent.ForkJoinTask<?>)","forks the given tasks, returning when isdone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown."
java.util.concurrent.ForkJoinTask.invokeAll(java.util.concurrent.ForkJoinTask<?>...),"forks the given tasks, returning when isdone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown."
java.util.concurrent.ForkJoinTask.invokeAll(java.util.Collection<T>),"forks all tasks in the specified collection, returning when isdone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown."
java.util.concurrent.ForkJoinTask.isCompletedAbnormally(),returns true if this task threw an exception or was cancelled.
java.util.concurrent.ForkJoinTask.isCompletedNormally(),returns true if this task completed without throwing an exception and was not cancelled.
java.util.concurrent.ForkJoinTask.join(),returns the result of the computation when it is done.
java.util.concurrent.ForkJoinTask.peekNextLocalTask(),"returns, but does not unschedule or execute, a task queued by the current thread but not yet executed, if one is immediately available."
java.util.concurrent.ForkJoinTask.pollNextLocalTask(),"unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if the current thread is operating in a forkjoinpool."
java.util.concurrent.ForkJoinTask.pollTask(),"if the current thread is operating in a forkjoinpool, unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if one is available, or if not available, a task that was forked by some other thread, if available."
java.util.concurrent.ForkJoinTask.quietlyComplete(),completes this task normally without setting a value.
java.util.concurrent.ForkJoinTask.quietlyInvoke(),"commences performing this task and awaits its completion if necessary, without returning its result or throwing its exception."
java.util.concurrent.ForkJoinTask.quietlyJoin(),"joins this task, without returning its result or throwing its exception."
java.util.concurrent.ForkJoinTask.reinitialize(),"resets the internal bookkeeping state of this task, allowing a subsequent fork."
java.util.concurrent.ForkJoinTask.setForkJoinTaskTag(short),atomically sets the tag value for this task.
java.util.concurrent.ForkJoinTask.setRawResult(java.util.concurrent.ForkJoinTask),forces the given value to be returned as a result.
java.util.concurrent.ForkJoinTask.tryUnfork(),tries to unschedule this task for execution.
java.util.concurrent.ForkJoinWorkerThread.getPool(),returns the pool hosting this thread.
java.util.concurrent.ForkJoinWorkerThread.getPoolIndex(),returns the unique index number of this thread in its pool.
java.util.concurrent.ForkJoinWorkerThread.onStart(),initializes internal state after construction but before processing any tasks.
java.util.concurrent.ForkJoinWorkerThread.onTermination(java.lang.Throwable),performs cleanup associated with termination of this worker thread.
java.util.concurrent.ForkJoinWorkerThread.run(),"this method is required to be public, but should never be called explicitly."
java.util.concurrent.FutureTask.done(),protected method invoked when this task transitions to state isdone (whether normally or via cancellation).
java.util.concurrent.FutureTask.runAndReset(),"executes the computation without setting its result, and then resets this future to initial state, failing to do so if the computation encounters an exception or is cancelled."
java.util.concurrent.FutureTask.set(java.util.concurrent.FutureTask),sets the result of this future to the given value unless this future has already been set or has been cancelled.
java.util.concurrent.FutureTask.setException(java.lang.Throwable),"causes this future to report an executionexception with the given throwable as its cause, unless this future has already been set or has been cancelled."
java.util.concurrent.LinkedBlockingDeque.add(java.util.concurrent.LinkedBlockingDeque),inserts the specified element at the end of this deque unless it would violate capacity restrictions.
java.util.concurrent.LinkedBlockingDeque.clear(),atomically removes all of the elements from this deque.
java.util.concurrent.LinkedBlockingDeque.contains(java.lang.Object),returns true if this deque contains the specified element.
java.util.concurrent.LinkedBlockingDeque.descendingIterator(),returns an iterator over the elements in this deque in reverse sequential order.
java.util.concurrent.LinkedBlockingDeque.element(),"retrieves, but does not remove, the head of the queue represented by this deque."
java.util.concurrent.LinkedBlockingDeque.iterator(),returns an iterator over the elements in this deque in proper sequence.
java.util.concurrent.LinkedBlockingDeque.remainingCapacity(),returns the number of additional elements that this deque can ideally (in the absence of memory or resource constraints) accept without blocking.
java.util.concurrent.LinkedBlockingDeque.remove(),retrieves and removes the head of the queue represented by this deque.
java.util.concurrent.LinkedBlockingDeque.remove(java.lang.Object),removes the first occurrence of the specified element from this deque.
java.util.concurrent.LinkedBlockingDeque.size(),returns the number of elements in this deque.
java.util.concurrent.LinkedBlockingDeque.spliterator(),returns a spliterator over the elements in this deque.
java.util.concurrent.LinkedBlockingDeque.toArray(),"returns an array containing all of the elements in this deque, in proper sequence (from first to last element)."
java.util.concurrent.LinkedBlockingDeque.toArray(T[]),"returns an array containing all of the elements in this deque, in proper sequence; the runtime type of the returned array is that of the specified array."
java.util.concurrent.LinkedBlockingQueue.clear(),atomically removes all of the elements from this queue.
java.util.concurrent.LinkedBlockingQueue.contains(java.lang.Object),returns true if this queue contains the specified element.
java.util.concurrent.LinkedBlockingQueue.iterator(),returns an iterator over the elements in this queue in proper sequence.
"java.util.concurrent.LinkedBlockingQueue.offer(java.util.concurrent.LinkedBlockingQueue,long,java.util.concurrent.TimeUnit)","inserts the specified element at the tail of this queue, waiting if necessary up to the specified wait time for space to become available."
java.util.concurrent.LinkedBlockingQueue.offer(java.util.concurrent.LinkedBlockingQueue),"inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full."
java.util.concurrent.LinkedBlockingQueue.put(java.util.concurrent.LinkedBlockingQueue),"inserts the specified element at the tail of this queue, waiting if necessary for space to become available."
java.util.concurrent.LinkedBlockingQueue.remainingCapacity(),returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking.
java.util.concurrent.LinkedBlockingQueue.remove(java.lang.Object),"removes a single instance of the specified element from this queue, if it is present."
java.util.concurrent.LinkedBlockingQueue.size(),returns the number of elements in this queue.
java.util.concurrent.LinkedBlockingQueue.spliterator(),returns a spliterator over the elements in this queue.
java.util.concurrent.LinkedBlockingQueue.toArray(),"returns an array containing all of the elements in this queue, in proper sequence."
java.util.concurrent.LinkedBlockingQueue.toArray(T[]),"returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array."
java.util.concurrent.LinkedTransferQueue.add(java.util.concurrent.LinkedTransferQueue),inserts the specified element at the tail of this queue.
java.util.concurrent.LinkedTransferQueue.contains(java.lang.Object),returns true if this queue contains the specified element.
java.util.concurrent.LinkedTransferQueue.isEmpty(),returns true if this queue contains no elements.
java.util.concurrent.LinkedTransferQueue.iterator(),returns an iterator over the elements in this queue in proper sequence.
"java.util.concurrent.LinkedTransferQueue.offer(java.util.concurrent.LinkedTransferQueue,long,java.util.concurrent.TimeUnit)",inserts the specified element at the tail of this queue.
java.util.concurrent.LinkedTransferQueue.offer(java.util.concurrent.LinkedTransferQueue),inserts the specified element at the tail of this queue.
java.util.concurrent.LinkedTransferQueue.put(java.util.concurrent.LinkedTransferQueue),inserts the specified element at the tail of this queue.
java.util.concurrent.LinkedTransferQueue.remainingCapacity(),always returns integer.
java.util.concurrent.LinkedTransferQueue.remove(java.lang.Object),"removes a single instance of the specified element from this queue, if it is present."
java.util.concurrent.LinkedTransferQueue.size(),returns the number of elements in this queue.
java.util.concurrent.LinkedTransferQueue.spliterator(),returns a spliterator over the elements in this queue.
java.util.concurrent.LinkedTransferQueue.transfer(java.util.concurrent.LinkedTransferQueue),"transfers the element to a consumer, waiting if necessary to do so."
java.util.concurrent.LinkedTransferQueue.tryTransfer(java.util.concurrent.LinkedTransferQueue),"transfers the element to a waiting consumer immediately, if possible."
"java.util.concurrent.LinkedTransferQueue.tryTransfer(java.util.concurrent.LinkedTransferQueue,long,java.util.concurrent.TimeUnit)",transfers the element to a consumer if it is possible to do so before the timeout elapses.
java.util.concurrent.Phaser.arrive(),"arrives at this phaser, without waiting for others to arrive."
java.util.concurrent.Phaser.arriveAndAwaitAdvance(),arrives at this phaser and awaits others.
java.util.concurrent.Phaser.arriveAndDeregister(),arrives at this phaser and deregisters from it without waiting for others to arrive.
java.util.concurrent.Phaser.awaitAdvance(int),"awaits the phase of this phaser to advance from the given phase value, returning immediately if the current phase is not equal to the given phase value or this phaser is terminated."
java.util.concurrent.Phaser.awaitAdvanceInterruptibly(int),"awaits the phase of this phaser to advance from the given phase value, throwing interruptedexception if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated."
"java.util.concurrent.Phaser.awaitAdvanceInterruptibly(int,long,java.util.concurrent.TimeUnit)","awaits the phase of this phaser to advance from the given phase value or the given timeout to elapse, throwing interruptedexception if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated."
java.util.concurrent.Phaser.bulkRegister(int),adds the given number of new unarrived parties to this phaser.
java.util.concurrent.Phaser.forceTermination(),forces this phaser to enter termination state.
java.util.concurrent.Phaser.getArrivedParties(),returns the number of registered parties that have arrived at the current phase of this phaser.
java.util.concurrent.Phaser.getParent(),"returns the parent of this phaser, or null if none."
java.util.concurrent.Phaser.getPhase(),returns the current phase number.
java.util.concurrent.Phaser.getRegisteredParties(),returns the number of parties registered at this phaser.
java.util.concurrent.Phaser.getRoot(),"returns the root ancestor of this phaser, which is the same as this phaser if it has no parent."
java.util.concurrent.Phaser.getUnarrivedParties(),returns the number of registered parties that have not yet arrived at the current phase of this phaser.
java.util.concurrent.Phaser.isTerminated(),returns true if this phaser has been terminated.
"java.util.concurrent.Phaser.onAdvance(int,int)","overridable method to perform an action upon impending phase advance, and to control termination."
java.util.concurrent.Phaser.register(),adds a new unarrived party to this phaser.
java.util.concurrent.Phaser.toString(),"returns a string identifying this phaser, as well as its state."
java.util.concurrent.PriorityBlockingQueue.add(java.util.concurrent.PriorityBlockingQueue),inserts the specified element into this priority queue.
java.util.concurrent.PriorityBlockingQueue.clear(),atomically removes all of the elements from this queue.
java.util.concurrent.PriorityBlockingQueue.comparator(),"returns the comparator used to order the elements in this queue, or null if this queue uses the natural ordering of its elements."
java.util.concurrent.PriorityBlockingQueue.contains(java.lang.Object),returns true if this queue contains the specified element.
java.util.concurrent.PriorityBlockingQueue.iterator(),returns an iterator over the elements in this queue.
java.util.concurrent.PriorityBlockingQueue.offer(java.util.concurrent.PriorityBlockingQueue),inserts the specified element into this priority queue.
"java.util.concurrent.PriorityBlockingQueue.offer(java.util.concurrent.PriorityBlockingQueue,long,java.util.concurrent.TimeUnit)",inserts the specified element into this priority queue.
java.util.concurrent.PriorityBlockingQueue.put(java.util.concurrent.PriorityBlockingQueue),inserts the specified element into this priority queue.
java.util.concurrent.PriorityBlockingQueue.remainingCapacity(),always returns integer.
java.util.concurrent.PriorityBlockingQueue.remove(java.lang.Object),"removes a single instance of the specified element from this queue, if it is present."
java.util.concurrent.PriorityBlockingQueue.spliterator(),returns a spliterator over the elements in this queue.
java.util.concurrent.PriorityBlockingQueue.toArray(),returns an array containing all of the elements in this queue.
java.util.concurrent.PriorityBlockingQueue.toArray(T[]),returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array.
java.util.concurrent.RecursiveAction.compute(),the main computation performed by this task.
java.util.concurrent.RecursiveAction.exec(),implements execution conventions for recursiveactions.
java.util.concurrent.RecursiveAction.getRawResult(),always returns null.
java.util.concurrent.RecursiveAction.setRawResult(java.lang.Void),requires null completion value.
java.util.concurrent.RecursiveTask.compute(),the main computation performed by this task.
java.util.concurrent.RecursiveTask.exec(),implements execution conventions for recursivetask.
"java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(java.lang.Runnable,java.util.concurrent.RunnableScheduledFuture<V>)",modifies or replaces the task used to execute a runnable.
"java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(java.util.concurrent.Callable<V>,java.util.concurrent.RunnableScheduledFuture<V>)",modifies or replaces the task used to execute a callable.
java.util.concurrent.ScheduledThreadPoolExecutor.execute(java.lang.Runnable),executes command with zero required delay.
java.util.concurrent.ScheduledThreadPoolExecutor.getContinueExistingPeriodicTasksAfterShutdownPolicy(),gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown.
java.util.concurrent.ScheduledThreadPoolExecutor.getExecuteExistingDelayedTasksAfterShutdownPolicy(),gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown.
java.util.concurrent.ScheduledThreadPoolExecutor.getQueue(),returns the task queue used by this executor.
java.util.concurrent.ScheduledThreadPoolExecutor.getRemoveOnCancelPolicy(),gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation.
java.util.concurrent.ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean),sets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown.
java.util.concurrent.ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean),sets the policy on whether to execute existing delayed tasks even when this executor has been shutdown.
java.util.concurrent.ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean),sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation.
java.util.concurrent.ScheduledThreadPoolExecutor.shutdown(),"initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted."
java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow(),"attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution."
java.util.concurrent.Semaphore.acquire(),"acquires a permit from this semaphore, blocking until one is available, or the thread is interrupted."
java.util.concurrent.Semaphore.acquire(int),"acquires the given number of permits from this semaphore, blocking until all are available, or the thread is interrupted."
java.util.concurrent.Semaphore.acquireUninterruptibly(),"acquires a permit from this semaphore, blocking until one is available."
java.util.concurrent.Semaphore.acquireUninterruptibly(int),"acquires the given number of permits from this semaphore, blocking until all are available."
java.util.concurrent.Semaphore.availablePermits(),returns the current number of permits available in this semaphore.
java.util.concurrent.Semaphore.drainPermits(),acquires and returns all permits that are immediately available.
java.util.concurrent.Semaphore.getQueuedThreads(),returns a collection containing threads that may be waiting to acquire.
java.util.concurrent.Semaphore.getQueueLength(),returns an estimate of the number of threads waiting to acquire.
java.util.concurrent.Semaphore.hasQueuedThreads(),queries whether any threads are waiting to acquire.
java.util.concurrent.Semaphore.isFair(),returns true if this semaphore has fairness set true.
java.util.concurrent.Semaphore.reducePermits(int),shrinks the number of available permits by the indicated reduction.
java.util.concurrent.Semaphore.release(),"releases a permit, returning it to the semaphore."
java.util.concurrent.Semaphore.release(int),"releases the given number of permits, returning them to the semaphore."
java.util.concurrent.Semaphore.toString(),"returns a string identifying this semaphore, as well as its state."
java.util.concurrent.Semaphore.tryAcquire(),"acquires a permit from this semaphore, only if one is available at the time of invocation."
"java.util.concurrent.Semaphore.tryAcquire(long,java.util.concurrent.TimeUnit)","acquires a permit from this semaphore, if one becomes available within the given waiting time and the current thread has not been interrupted."
java.util.concurrent.Semaphore.tryAcquire(int),"acquires the given number of permits from this semaphore, only if all are available at the time of invocation."
"java.util.concurrent.Semaphore.tryAcquire(int,long,java.util.concurrent.TimeUnit)","acquires the given number of permits from this semaphore, if all become available within the given waiting time and the current thread has not been interrupted."
java.util.concurrent.SynchronousQueue.clear(),does nothing.
java.util.concurrent.SynchronousQueue.contains(java.lang.Object),always returns false.
java.util.concurrent.SynchronousQueue.containsAll(java.util.Collection<?>),returns false unless the given collection is empty.
java.util.concurrent.SynchronousQueue.isEmpty(),always returns true.
java.util.concurrent.SynchronousQueue.iterator(),returns an empty iterator in which hasnext always returns false.
"java.util.concurrent.SynchronousQueue.offer(java.util.concurrent.SynchronousQueue,long,java.util.concurrent.TimeUnit)","inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it."
java.util.concurrent.SynchronousQueue.offer(java.util.concurrent.SynchronousQueue),"inserts the specified element into this queue, if another thread is waiting to receive it."
java.util.concurrent.SynchronousQueue.peek(),always returns null.
"java.util.concurrent.SynchronousQueue.poll(long,java.util.concurrent.TimeUnit)","retrieves and removes the head of this queue, waiting if necessary up to the specified wait time, for another thread to insert it."
java.util.concurrent.SynchronousQueue.poll(),"retrieves and removes the head of this queue, if another thread is currently making an element available."
java.util.concurrent.SynchronousQueue.put(java.util.concurrent.SynchronousQueue),"adds the specified element to this queue, waiting if necessary for another thread to receive it."
java.util.concurrent.SynchronousQueue.remainingCapacity(),always returns zero.
java.util.concurrent.SynchronousQueue.remove(java.lang.Object),always returns false.
java.util.concurrent.SynchronousQueue.removeAll(java.util.Collection<?>),always returns false.
java.util.concurrent.SynchronousQueue.retainAll(java.util.Collection<?>),always returns false.
java.util.concurrent.SynchronousQueue.size(),always returns zero.
java.util.concurrent.SynchronousQueue.spliterator(),returns an empty spliterator in which calls to spliterator.
java.util.concurrent.SynchronousQueue.take(),"retrieves and removes the head of this queue, waiting if necessary for another thread to insert it."
java.util.concurrent.SynchronousQueue.toArray(),returns a zero-length array.
java.util.concurrent.SynchronousQueue.toArray(T[]),sets the zeroeth element of the specified array to null (if the array has non-zero length) and returns it.
java.util.concurrent.ThreadLocalRandom.current(),returns the current thread's threadlocalrandom.
java.util.concurrent.ThreadLocalRandom.doubles(long),"returns a stream producing the given streamsize number of pseudorandom double values, each between zero (inclusive) and one (exclusive)."
java.util.concurrent.ThreadLocalRandom.doubles(),"returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive)."
"java.util.concurrent.ThreadLocalRandom.doubles(long,double,double)","returns a stream producing the given streamsize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)."
"java.util.concurrent.ThreadLocalRandom.doubles(double,double)","returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)."
java.util.concurrent.ThreadLocalRandom.ints(long),returns a stream producing the given streamsize number of pseudorandom int values.
java.util.concurrent.ThreadLocalRandom.ints(),returns an effectively unlimited stream of pseudorandom int values.
"java.util.concurrent.ThreadLocalRandom.ints(long,int,int)","returns a stream producing the given streamsize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)."
"java.util.concurrent.ThreadLocalRandom.ints(int,int)","returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)."
java.util.concurrent.ThreadLocalRandom.longs(long),returns a stream producing the given streamsize number of pseudorandom long values.
java.util.concurrent.ThreadLocalRandom.longs(),returns an effectively unlimited stream of pseudorandom long values.
"java.util.concurrent.ThreadLocalRandom.longs(long,long,long)","returns a stream producing the given streamsize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive)."
"java.util.concurrent.ThreadLocalRandom.longs(long,long)","returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive)."
java.util.concurrent.ThreadLocalRandom.nextBoolean(),returns a pseudorandom boolean value.
java.util.concurrent.ThreadLocalRandom.nextDouble(),returns a pseudorandom double value between zero (inclusive) and one (exclusive).
java.util.concurrent.ThreadLocalRandom.nextDouble(double),returns a pseudorandom double value between 0.
"java.util.concurrent.ThreadLocalRandom.nextDouble(double,double)",returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).
java.util.concurrent.ThreadLocalRandom.nextFloat(),returns a pseudorandom float value between zero (inclusive) and one (exclusive).
java.util.concurrent.ThreadLocalRandom.nextInt(),returns a pseudorandom int value.
java.util.concurrent.ThreadLocalRandom.nextInt(int),returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).
"java.util.concurrent.ThreadLocalRandom.nextInt(int,int)",returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).
java.util.concurrent.ThreadLocalRandom.nextLong(),returns a pseudorandom long value.
java.util.concurrent.ThreadLocalRandom.nextLong(long),returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).
"java.util.concurrent.ThreadLocalRandom.nextLong(long,long)",returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).
java.util.concurrent.ThreadLocalRandom.setSeed(long),throws unsupportedoperationexception.
"java.util.concurrent.ThreadPoolExecutor.afterExecute(java.lang.Runnable,java.lang.Throwable)",method invoked upon completion of execution of the given runnable.
java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean),"sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep-alive time, being replaced if needed when new tasks arrive."
java.util.concurrent.ThreadPoolExecutor.allowsCoreThreadTimeOut(),"returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepalive time, being replaced if needed when new tasks arrive."
"java.util.concurrent.ThreadPoolExecutor.beforeExecute(java.lang.Thread,java.lang.Runnable)",method invoked prior to executing the given runnable in the given thread.
java.util.concurrent.ThreadPoolExecutor.execute(java.lang.Runnable),executes the given task sometime in the future.
java.util.concurrent.ThreadPoolExecutor.finalize(),invokes shutdown when this executor is no longer referenced and it has no threads.
java.util.concurrent.ThreadPoolExecutor.getActiveCount(),returns the approximate number of threads that are actively executing tasks.
java.util.concurrent.ThreadPoolExecutor.getCompletedTaskCount(),returns the approximate total number of tasks that have completed execution.
java.util.concurrent.ThreadPoolExecutor.getCorePoolSize(),returns the core number of threads.
java.util.concurrent.ThreadPoolExecutor.getKeepAliveTime(java.util.concurrent.TimeUnit),"returns the thread keep-alive time, which is the amount of time that threads in excess of the core pool size may remain idle before being terminated."
java.util.concurrent.ThreadPoolExecutor.getLargestPoolSize(),returns the largest number of threads that have ever simultaneously been in the pool.
java.util.concurrent.ThreadPoolExecutor.getMaximumPoolSize(),returns the maximum allowed number of threads.
java.util.concurrent.ThreadPoolExecutor.getPoolSize(),returns the current number of threads in the pool.
java.util.concurrent.ThreadPoolExecutor.getQueue(),returns the task queue used by this executor.
java.util.concurrent.ThreadPoolExecutor.getRejectedExecutionHandler(),returns the current handler for unexecutable tasks.
java.util.concurrent.ThreadPoolExecutor.getTaskCount(),returns the approximate total number of tasks that have ever been scheduled for execution.
java.util.concurrent.ThreadPoolExecutor.getThreadFactory(),returns the thread factory used to create new threads.
java.util.concurrent.ThreadPoolExecutor.isTerminating(),returns true if this executor is in the process of terminating after shutdown() or shutdownnow() but has not completely terminated.
java.util.concurrent.ThreadPoolExecutor.prestartAllCoreThreads(),"starts all core threads, causing them to idly wait for work."
java.util.concurrent.ThreadPoolExecutor.prestartCoreThread(),"starts a core thread, causing it to idly wait for work."
java.util.concurrent.ThreadPoolExecutor.purge(),tries to remove from the work queue all future tasks that have been cancelled.
java.util.concurrent.ThreadPoolExecutor.remove(java.lang.Runnable),"removes this task from the executor's internal queue if it is present, thus causing it not to be run if it has not already started."
java.util.concurrent.ThreadPoolExecutor.setCorePoolSize(int),sets the core number of threads.
"java.util.concurrent.ThreadPoolExecutor.setKeepAliveTime(long,java.util.concurrent.TimeUnit)",sets the time limit for which threads may remain idle before being terminated.
java.util.concurrent.ThreadPoolExecutor.setMaximumPoolSize(int),sets the maximum allowed number of threads.
java.util.concurrent.ThreadPoolExecutor.setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler),sets a new handler for unexecutable tasks.
java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory),sets the thread factory used to create new threads.
java.util.concurrent.ThreadPoolExecutor.shutdown(),"initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted."
java.util.concurrent.ThreadPoolExecutor.shutdownNow(),"attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution."
java.util.concurrent.ThreadPoolExecutor.terminated(),method invoked when the executor has terminated.
java.util.concurrent.ThreadPoolExecutor.toString(),"returns a string identifying this pool, as well as its state, including indications of run state and estimated worker and task counts."
"java.util.concurrent.ThreadPoolExecutor.AbortPolicy.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",always throws rejectedexecutionexception.
"java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)","executes task r in the caller's thread, unless the executor has been shut down, in which case the task is discarded."
"java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)","obtains and ignores the next task that the executor would otherwise execute, if one is immediately available, and then retries execution of task r, unless the executor is shut down, in which case task r is instead discarded."
"java.util.concurrent.ThreadPoolExecutor.DiscardPolicy.rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)","does nothing, which has the effect of discarding task r."
"java.util.concurrent.TimeUnit.convert(long,java.util.concurrent.TimeUnit)",converts the given time duration in the given unit to this unit.
java.util.concurrent.TimeUnit.sleep(long),performs a thread.
"java.util.concurrent.TimeUnit.timedJoin(java.lang.Thread,long)",performs a timed thread.
"java.util.concurrent.TimeUnit.timedWait(java.lang.Object,long)",performs a timed object.
java.util.concurrent.TimeUnit.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.util.concurrent.TimeUnit.values(),"returns an array containing the constants of this enum type, in the order they are declared."
"java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean)",atomically sets the value to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicBoolean.get(),returns the current value.
java.util.concurrent.atomic.AtomicBoolean.getAndSet(boolean),atomically sets to the given value and returns the previous value.
java.util.concurrent.atomic.AtomicBoolean.lazySet(boolean),eventually sets to the given value.
java.util.concurrent.atomic.AtomicBoolean.set(boolean),unconditionally sets to the given value.
java.util.concurrent.atomic.AtomicBoolean.toString(),returns the string representation of the current value.
"java.util.concurrent.atomic.AtomicBoolean.weakCompareAndSet(boolean,boolean)",atomically sets the value to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicInteger.accumulateAndGet(int,java.util.function.IntBinaryOperator)","atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value."
java.util.concurrent.atomic.AtomicInteger.addAndGet(int),atomically adds the given value to the current value.
"java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int)",atomically sets the value to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicInteger.decrementAndGet(),atomically decrements by one the current value.
java.util.concurrent.atomic.AtomicInteger.doubleValue(),returns the value of this atomicinteger as a double after a widening primitive conversion.
java.util.concurrent.atomic.AtomicInteger.floatValue(),returns the value of this atomicinteger as a float after a widening primitive conversion.
java.util.concurrent.atomic.AtomicInteger.get(),gets the current value.
"java.util.concurrent.atomic.AtomicInteger.getAndAccumulate(int,java.util.function.IntBinaryOperator)","atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value."
java.util.concurrent.atomic.AtomicInteger.getAndAdd(int),atomically adds the given value to the current value.
java.util.concurrent.atomic.AtomicInteger.getAndDecrement(),atomically decrements by one the current value.
java.util.concurrent.atomic.AtomicInteger.getAndIncrement(),atomically increments by one the current value.
java.util.concurrent.atomic.AtomicInteger.getAndSet(int),atomically sets to the given value and returns the old value.
java.util.concurrent.atomic.AtomicInteger.getAndUpdate(java.util.function.IntUnaryOperator),"atomically updates the current value with the results of applying the given function, returning the previous value."
java.util.concurrent.atomic.AtomicInteger.incrementAndGet(),atomically increments by one the current value.
java.util.concurrent.atomic.AtomicInteger.intValue(),returns the value of this atomicinteger as an int.
java.util.concurrent.atomic.AtomicInteger.lazySet(int),eventually sets to the given value.
java.util.concurrent.atomic.AtomicInteger.longValue(),returns the value of this atomicinteger as a long after a widening primitive conversion.
java.util.concurrent.atomic.AtomicInteger.set(int),sets to the given value.
java.util.concurrent.atomic.AtomicInteger.toString(),returns the string representation of the current value.
java.util.concurrent.atomic.AtomicInteger.updateAndGet(java.util.function.IntUnaryOperator),"atomically updates the current value with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicInteger.weakCompareAndSet(int,int)",atomically sets the value to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicIntegerArray.accumulateAndGet(int,int,java.util.function.IntBinaryOperator)","atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value."
"java.util.concurrent.atomic.AtomicIntegerArray.addAndGet(int,int)",atomically adds the given value to the element at index i.
"java.util.concurrent.atomic.AtomicIntegerArray.compareAndSet(int,int,int)",atomically sets the element at position i to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicIntegerArray.decrementAndGet(int),atomically decrements by one the element at index i.
java.util.concurrent.atomic.AtomicIntegerArray.get(int),gets the current value at position i.
"java.util.concurrent.atomic.AtomicIntegerArray.getAndAccumulate(int,int,java.util.function.IntBinaryOperator)","atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value."
"java.util.concurrent.atomic.AtomicIntegerArray.getAndAdd(int,int)",atomically adds the given value to the element at index i.
java.util.concurrent.atomic.AtomicIntegerArray.getAndDecrement(int),atomically decrements by one the element at index i.
java.util.concurrent.atomic.AtomicIntegerArray.getAndIncrement(int),atomically increments by one the element at index i.
"java.util.concurrent.atomic.AtomicIntegerArray.getAndSet(int,int)",atomically sets the element at position i to the given value and returns the old value.
"java.util.concurrent.atomic.AtomicIntegerArray.getAndUpdate(int,java.util.function.IntUnaryOperator)","atomically updates the element at index i with the results of applying the given function, returning the previous value."
java.util.concurrent.atomic.AtomicIntegerArray.incrementAndGet(int),atomically increments by one the element at index i.
"java.util.concurrent.atomic.AtomicIntegerArray.lazySet(int,int)",eventually sets the element at position i to the given value.
java.util.concurrent.atomic.AtomicIntegerArray.length(),returns the length of the array.
"java.util.concurrent.atomic.AtomicIntegerArray.set(int,int)",sets the element at position i to the given value.
java.util.concurrent.atomic.AtomicIntegerArray.toString(),returns the string representation of the current values of array.
"java.util.concurrent.atomic.AtomicIntegerArray.updateAndGet(int,java.util.function.IntUnaryOperator)","atomically updates the element at index i with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSet(int,int,int)",atomically sets the element at position i to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.accumulateAndGet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int,java.util.function.IntBinaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value."
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.addAndGet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int)",atomically adds the given value to the current value of the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int,int)",atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.decrementAndGet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater),atomically decrements by one the current value of the field of the given object managed by this updater.
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.get(java.util.concurrent.atomic.AtomicIntegerFieldUpdater),gets the current value held in the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAccumulate(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int,java.util.function.IntBinaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value."
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAdd(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int)",atomically adds the given value to the current value of the field of the given object managed by this updater.
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndDecrement(java.util.concurrent.atomic.AtomicIntegerFieldUpdater),atomically decrements by one the current value of the field of the given object managed by this updater.
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndIncrement(java.util.concurrent.atomic.AtomicIntegerFieldUpdater),atomically increments by one the current value of the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndSet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int)",atomically sets the field of the given object managed by this updater to the given value and returns the old value.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndUpdate(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,java.util.function.IntUnaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value."
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater),atomically increments by one the current value of the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.lazySet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int)",eventually sets the field of the given object managed by this updater to the given updated value.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater(java.lang.Class<U>,java.lang.String)",creates and returns an updater for objects with the given field.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.set(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int)",sets the field of the given object managed by this updater to the given updated value.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.updateAndGet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,java.util.function.IntUnaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.weakCompareAndSet(java.util.concurrent.atomic.AtomicIntegerFieldUpdater,int,int)",atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicLong.accumulateAndGet(long,java.util.function.LongBinaryOperator)","atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value."
java.util.concurrent.atomic.AtomicLong.addAndGet(long),atomically adds the given value to the current value.
"java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long)",atomically sets the value to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicLong.decrementAndGet(),atomically decrements by one the current value.
java.util.concurrent.atomic.AtomicLong.doubleValue(),returns the value of this atomiclong as a double after a widening primitive conversion.
java.util.concurrent.atomic.AtomicLong.floatValue(),returns the value of this atomiclong as a float after a widening primitive conversion.
java.util.concurrent.atomic.AtomicLong.get(),gets the current value.
"java.util.concurrent.atomic.AtomicLong.getAndAccumulate(long,java.util.function.LongBinaryOperator)","atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value."
java.util.concurrent.atomic.AtomicLong.getAndAdd(long),atomically adds the given value to the current value.
java.util.concurrent.atomic.AtomicLong.getAndDecrement(),atomically decrements by one the current value.
java.util.concurrent.atomic.AtomicLong.getAndIncrement(),atomically increments by one the current value.
java.util.concurrent.atomic.AtomicLong.getAndSet(long),atomically sets to the given value and returns the old value.
java.util.concurrent.atomic.AtomicLong.getAndUpdate(java.util.function.LongUnaryOperator),"atomically updates the current value with the results of applying the given function, returning the previous value."
java.util.concurrent.atomic.AtomicLong.incrementAndGet(),atomically increments by one the current value.
java.util.concurrent.atomic.AtomicLong.intValue(),returns the value of this atomiclong as an int after a narrowing primitive conversion.
java.util.concurrent.atomic.AtomicLong.lazySet(long),eventually sets to the given value.
java.util.concurrent.atomic.AtomicLong.longValue(),returns the value of this atomiclong as a long.
java.util.concurrent.atomic.AtomicLong.set(long),sets to the given value.
java.util.concurrent.atomic.AtomicLong.toString(),returns the string representation of the current value.
java.util.concurrent.atomic.AtomicLong.updateAndGet(java.util.function.LongUnaryOperator),"atomically updates the current value with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(long,long)",atomically sets the value to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicLongArray.accumulateAndGet(int,long,java.util.function.LongBinaryOperator)","atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value."
"java.util.concurrent.atomic.AtomicLongArray.addAndGet(int,long)",atomically adds the given value to the element at index i.
"java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long)",atomically sets the element at position i to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicLongArray.decrementAndGet(int),atomically decrements by one the element at index i.
java.util.concurrent.atomic.AtomicLongArray.get(int),gets the current value at position i.
"java.util.concurrent.atomic.AtomicLongArray.getAndAccumulate(int,long,java.util.function.LongBinaryOperator)","atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value."
"java.util.concurrent.atomic.AtomicLongArray.getAndAdd(int,long)",atomically adds the given value to the element at index i.
java.util.concurrent.atomic.AtomicLongArray.getAndDecrement(int),atomically decrements by one the element at index i.
java.util.concurrent.atomic.AtomicLongArray.getAndIncrement(int),atomically increments by one the element at index i.
"java.util.concurrent.atomic.AtomicLongArray.getAndSet(int,long)",atomically sets the element at position i to the given value and returns the old value.
"java.util.concurrent.atomic.AtomicLongArray.getAndUpdate(int,java.util.function.LongUnaryOperator)","atomically updates the element at index i with the results of applying the given function, returning the previous value."
java.util.concurrent.atomic.AtomicLongArray.incrementAndGet(int),atomically increments by one the element at index i.
"java.util.concurrent.atomic.AtomicLongArray.lazySet(int,long)",eventually sets the element at position i to the given value.
java.util.concurrent.atomic.AtomicLongArray.length(),returns the length of the array.
"java.util.concurrent.atomic.AtomicLongArray.set(int,long)",sets the element at position i to the given value.
java.util.concurrent.atomic.AtomicLongArray.toString(),returns the string representation of the current values of array.
"java.util.concurrent.atomic.AtomicLongArray.updateAndGet(int,java.util.function.LongUnaryOperator)","atomically updates the element at index i with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicLongArray.weakCompareAndSet(int,long,long)",atomically sets the element at position i to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.accumulateAndGet(java.util.concurrent.atomic.AtomicLongFieldUpdater,long,java.util.function.LongBinaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value."
"java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(java.util.concurrent.atomic.AtomicLongFieldUpdater,long)",atomically adds the given value to the current value of the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(java.util.concurrent.atomic.AtomicLongFieldUpdater,long,long)",atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicLongFieldUpdater.decrementAndGet(java.util.concurrent.atomic.AtomicLongFieldUpdater),atomically decrements by one the current value of the field of the given object managed by this updater.
java.util.concurrent.atomic.AtomicLongFieldUpdater.get(java.util.concurrent.atomic.AtomicLongFieldUpdater),gets the current value held in the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAccumulate(java.util.concurrent.atomic.AtomicLongFieldUpdater,long,java.util.function.LongBinaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value."
"java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAdd(java.util.concurrent.atomic.AtomicLongFieldUpdater,long)",atomically adds the given value to the current value of the field of the given object managed by this updater.
java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(java.util.concurrent.atomic.AtomicLongFieldUpdater),atomically decrements by one the current value of the field of the given object managed by this updater.
java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(java.util.concurrent.atomic.AtomicLongFieldUpdater),atomically increments by one the current value of the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndSet(java.util.concurrent.atomic.AtomicLongFieldUpdater,long)",atomically sets the field of the given object managed by this updater to the given value and returns the old value.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndUpdate(java.util.concurrent.atomic.AtomicLongFieldUpdater,java.util.function.LongUnaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value."
java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(java.util.concurrent.atomic.AtomicLongFieldUpdater),atomically increments by one the current value of the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.lazySet(java.util.concurrent.atomic.AtomicLongFieldUpdater,long)",eventually sets the field of the given object managed by this updater to the given updated value.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(java.lang.Class<U>,java.lang.String)",creates and returns an updater for objects with the given field.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.set(java.util.concurrent.atomic.AtomicLongFieldUpdater,long)",sets the field of the given object managed by this updater to the given updated value.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.updateAndGet(java.util.concurrent.atomic.AtomicLongFieldUpdater,java.util.function.LongUnaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicLongFieldUpdater.weakCompareAndSet(java.util.concurrent.atomic.AtomicLongFieldUpdater,long,long)",atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(java.util.concurrent.atomic.AtomicMarkableReference,boolean)",atomically sets the value of the mark to the given update value if the current reference is == to the expected reference.
"java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(java.util.concurrent.atomic.AtomicMarkableReference,java.util.concurrent.atomic.AtomicMarkableReference,boolean,boolean)",atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.
java.util.concurrent.atomic.AtomicMarkableReference.get(boolean[]),returns the current values of both the reference and the mark.
java.util.concurrent.atomic.AtomicMarkableReference.getReference(),returns the current value of the reference.
java.util.concurrent.atomic.AtomicMarkableReference.isMarked(),returns the current value of the mark.
"java.util.concurrent.atomic.AtomicMarkableReference.set(java.util.concurrent.atomic.AtomicMarkableReference,boolean)",unconditionally sets the value of both the reference and mark.
"java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(java.util.concurrent.atomic.AtomicMarkableReference,java.util.concurrent.atomic.AtomicMarkableReference,boolean,boolean)",atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.
"java.util.concurrent.atomic.AtomicReference.accumulateAndGet(java.util.concurrent.atomic.AtomicReference,java.util.function.BinaryOperator<java.util.concurrent.atomic.AtomicReference>)","atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value."
"java.util.concurrent.atomic.AtomicReference.compareAndSet(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)",atomically sets the value to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicReference.get(),gets the current value.
"java.util.concurrent.atomic.AtomicReference.getAndAccumulate(java.util.concurrent.atomic.AtomicReference,java.util.function.BinaryOperator<java.util.concurrent.atomic.AtomicReference>)","atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value."
java.util.concurrent.atomic.AtomicReference.getAndSet(java.util.concurrent.atomic.AtomicReference),atomically sets to the given value and returns the old value.
java.util.concurrent.atomic.AtomicReference.getAndUpdate(java.util.function.UnaryOperator<java.util.concurrent.atomic.AtomicReference>),"atomically updates the current value with the results of applying the given function, returning the previous value."
java.util.concurrent.atomic.AtomicReference.lazySet(java.util.concurrent.atomic.AtomicReference),eventually sets to the given value.
java.util.concurrent.atomic.AtomicReference.set(java.util.concurrent.atomic.AtomicReference),sets to the given value.
java.util.concurrent.atomic.AtomicReference.toString(),returns the string representation of the current value.
java.util.concurrent.atomic.AtomicReference.updateAndGet(java.util.function.UnaryOperator<java.util.concurrent.atomic.AtomicReference>),"atomically updates the current value with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)",atomically sets the value to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicReferenceArray.accumulateAndGet(int,java.util.concurrent.atomic.AtomicReferenceArray,java.util.function.BinaryOperator<java.util.concurrent.atomic.AtomicReferenceArray>)","atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value."
"java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int,java.util.concurrent.atomic.AtomicReferenceArray,java.util.concurrent.atomic.AtomicReferenceArray)",atomically sets the element at position i to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicReferenceArray.get(int),gets the current value at position i.
"java.util.concurrent.atomic.AtomicReferenceArray.getAndAccumulate(int,java.util.concurrent.atomic.AtomicReferenceArray,java.util.function.BinaryOperator<java.util.concurrent.atomic.AtomicReferenceArray>)","atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value."
"java.util.concurrent.atomic.AtomicReferenceArray.getAndSet(int,java.util.concurrent.atomic.AtomicReferenceArray)",atomically sets the element at position i to the given value and returns the old value.
"java.util.concurrent.atomic.AtomicReferenceArray.getAndUpdate(int,java.util.function.UnaryOperator<java.util.concurrent.atomic.AtomicReferenceArray>)","atomically updates the element at index i with the results of applying the given function, returning the previous value."
"java.util.concurrent.atomic.AtomicReferenceArray.lazySet(int,java.util.concurrent.atomic.AtomicReferenceArray)",eventually sets the element at position i to the given value.
java.util.concurrent.atomic.AtomicReferenceArray.length(),returns the length of the array.
"java.util.concurrent.atomic.AtomicReferenceArray.set(int,java.util.concurrent.atomic.AtomicReferenceArray)",sets the element at position i to the given value.
java.util.concurrent.atomic.AtomicReferenceArray.toString(),returns the string representation of the current values of array.
"java.util.concurrent.atomic.AtomicReferenceArray.updateAndGet(int,java.util.function.UnaryOperator<java.util.concurrent.atomic.AtomicReferenceArray>)","atomically updates the element at index i with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicReferenceArray.weakCompareAndSet(int,java.util.concurrent.atomic.AtomicReferenceArray,java.util.concurrent.atomic.AtomicReferenceArray)",atomically sets the element at position i to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.accumulateAndGet(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.function.BinaryOperator<java.util.concurrent.atomic.AtomicReferenceFieldUpdater>)","atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value."
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)",atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicReferenceFieldUpdater.get(java.util.concurrent.atomic.AtomicReferenceFieldUpdater),gets the current value held in the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndAccumulate(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.function.BinaryOperator<java.util.concurrent.atomic.AtomicReferenceFieldUpdater>)","atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value."
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)",atomically sets the field of the given object managed by this updater to the given value and returns the old value.
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndUpdate(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.function.UnaryOperator<java.util.concurrent.atomic.AtomicReferenceFieldUpdater>)","atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value."
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.lazySet(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)",eventually sets the field of the given object managed by this updater to the given updated value.
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(java.lang.Class<U>,java.lang.Class<W>,java.lang.String)",creates and returns an updater for objects with the given field.
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.set(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)",sets the field of the given object managed by this updater to the given updated value.
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.updateAndGet(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.function.UnaryOperator<java.util.concurrent.atomic.AtomicReferenceFieldUpdater>)","atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.weakCompareAndSet(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)",atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicStampedReference.attemptStamp(java.util.concurrent.atomic.AtomicStampedReference,int)",atomically sets the value of the stamp to the given update value if the current reference is == to the expected reference.
"java.util.concurrent.atomic.AtomicStampedReference.compareAndSet(java.util.concurrent.atomic.AtomicStampedReference,java.util.concurrent.atomic.AtomicStampedReference,int,int)",atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.
java.util.concurrent.atomic.AtomicStampedReference.get(int[]),returns the current values of both the reference and the stamp.
java.util.concurrent.atomic.AtomicStampedReference.getReference(),returns the current value of the reference.
java.util.concurrent.atomic.AtomicStampedReference.getStamp(),returns the current value of the stamp.
"java.util.concurrent.atomic.AtomicStampedReference.set(java.util.concurrent.atomic.AtomicStampedReference,int)",unconditionally sets the value of both the reference and stamp.
"java.util.concurrent.atomic.AtomicStampedReference.weakCompareAndSet(java.util.concurrent.atomic.AtomicStampedReference,java.util.concurrent.atomic.AtomicStampedReference,int,int)",atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.
java.util.concurrent.atomic.DoubleAccumulator.accumulate(double),updates with the given value.
java.util.concurrent.atomic.DoubleAccumulator.floatValue(),returns the current value as a float after a narrowing primitive conversion.
java.util.concurrent.atomic.DoubleAccumulator.get(),returns the current value.
java.util.concurrent.atomic.DoubleAccumulator.getThenReset(),equivalent in effect to get() followed by reset().
java.util.concurrent.atomic.DoubleAccumulator.intValue(),returns the current value as an int after a narrowing primitive conversion.
java.util.concurrent.atomic.DoubleAccumulator.longValue(),returns the current value as a long after a narrowing primitive conversion.
java.util.concurrent.atomic.DoubleAccumulator.reset(),resets variables maintaining updates to the identity value.
java.util.concurrent.atomic.DoubleAccumulator.toString(),returns the string representation of the current value.
java.util.concurrent.atomic.DoubleAdder.add(double),adds the given value.
java.util.concurrent.atomic.DoubleAdder.floatValue(),returns the sum() as a float after a narrowing primitive conversion.
java.util.concurrent.atomic.DoubleAdder.intValue(),returns the sum() as an int after a narrowing primitive conversion.
java.util.concurrent.atomic.DoubleAdder.longValue(),returns the sum() as a long after a narrowing primitive conversion.
java.util.concurrent.atomic.DoubleAdder.reset(),resets variables maintaining the sum to zero.
java.util.concurrent.atomic.DoubleAdder.sum(),returns the current sum.
java.util.concurrent.atomic.DoubleAdder.sumThenReset(),equivalent in effect to sum() followed by reset().
java.util.concurrent.atomic.DoubleAdder.toString(),returns the string representation of the sum().
java.util.concurrent.atomic.LongAccumulator.accumulate(long),updates with the given value.
java.util.concurrent.atomic.LongAccumulator.doubleValue(),returns the current value as a double after a widening primitive conversion.
java.util.concurrent.atomic.LongAccumulator.floatValue(),returns the current value as a float after a widening primitive conversion.
java.util.concurrent.atomic.LongAccumulator.get(),returns the current value.
java.util.concurrent.atomic.LongAccumulator.getThenReset(),equivalent in effect to get() followed by reset().
java.util.concurrent.atomic.LongAccumulator.intValue(),returns the current value as an int after a narrowing primitive conversion.
java.util.concurrent.atomic.LongAccumulator.reset(),resets variables maintaining updates to the identity value.
java.util.concurrent.atomic.LongAccumulator.toString(),returns the string representation of the current value.
java.util.concurrent.atomic.LongAdder.add(long),adds the given value.
java.util.concurrent.atomic.LongAdder.doubleValue(),returns the sum() as a double after a widening primitive conversion.
java.util.concurrent.atomic.LongAdder.floatValue(),returns the sum() as a float after a widening primitive conversion.
java.util.concurrent.atomic.LongAdder.intValue(),returns the sum() as an int after a narrowing primitive conversion.
java.util.concurrent.atomic.LongAdder.reset(),resets variables maintaining the sum to zero.
java.util.concurrent.atomic.LongAdder.sum(),returns the current sum.
java.util.concurrent.atomic.LongAdder.sumThenReset(),equivalent in effect to sum() followed by reset().
java.util.concurrent.atomic.LongAdder.toString(),returns the string representation of the sum().
java.util.concurrent.locks.Condition.await(),causes the current thread to wait until it is signalled or interrupted.
"java.util.concurrent.locks.Condition.await(long,java.util.concurrent.TimeUnit)","causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses."
java.util.concurrent.locks.Condition.awaitNanos(long),"causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses."
java.util.concurrent.locks.Condition.awaitUninterruptibly(),causes the current thread to wait until it is signalled.
java.util.concurrent.locks.Condition.awaitUntil(java.util.Date),"causes the current thread to wait until it is signalled or interrupted, or the specified deadline elapses."
java.util.concurrent.locks.Condition.signal(),wakes up one waiting thread.
java.util.concurrent.locks.Condition.signalAll(),wakes up all waiting threads.
java.util.concurrent.locks.Lock.lock(),acquires the lock.
java.util.concurrent.locks.Lock.lockInterruptibly(),acquires the lock unless the current thread is interrupted.
java.util.concurrent.locks.Lock.newCondition(),returns a new condition instance that is bound to this lock instance.
java.util.concurrent.locks.Lock.tryLock(),acquires the lock only if it is free at the time of invocation.
"java.util.concurrent.locks.Lock.tryLock(long,java.util.concurrent.TimeUnit)",acquires the lock if it is free within the given waiting time and the current thread has not been interrupted.
java.util.concurrent.locks.Lock.unlock(),releases the lock.
java.util.concurrent.locks.ReadWriteLock.readLock(),returns the lock used for reading.
java.util.concurrent.locks.ReadWriteLock.writeLock(),returns the lock used for writing.
java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread(),"returns the thread last set by setexclusiveownerthread, or null if never set."
java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(java.lang.Thread),sets the thread that currently owns exclusive access.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquire(long),"acquires in exclusive mode, ignoring interrupts."
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireInterruptibly(long),"acquires in exclusive mode, aborting if interrupted."
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireShared(long),"acquires in shared mode, ignoring interrupts."
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireSharedInterruptibly(long),"acquires in shared mode, aborting if interrupted."
"java.util.concurrent.locks.AbstractQueuedLongSynchronizer.compareAndSetState(long,long)",atomically sets synchronization state to the given updated value if the current state value equals the expected value.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getExclusiveQueuedThreads(),returns a collection containing threads that may be waiting to acquire in exclusive mode.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getFirstQueuedThread(),"returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued."
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueuedThreads(),returns a collection containing threads that may be waiting to acquire.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueueLength(),returns an estimate of the number of threads waiting to acquire.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getSharedQueuedThreads(),returns a collection containing threads that may be waiting to acquire in shared mode.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getState(),returns the current value of synchronization state.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject),returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject),returns an estimate of the number of threads waiting on the given condition associated with this synchronizer.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasContended(),queries whether any threads have ever contended to acquire this synchronizer; that is if an acquire method has ever blocked.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedPredecessors(),queries whether any threads have been waiting to acquire longer than the current thread.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedThreads(),queries whether any threads are waiting to acquire.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasWaiters(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject),queries whether any threads are waiting on the given condition associated with this synchronizer.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isHeldExclusively(),returns true if synchronization is held exclusively with respect to the current (calling) thread.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isQueued(java.lang.Thread),returns true if the given thread is currently queued.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject),queries whether the given conditionobject uses this synchronizer as its lock.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.release(long),releases in exclusive mode.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.releaseShared(long),releases in shared mode.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.setState(long),sets the value of synchronization state.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.toString(),"returns a string identifying this synchronizer, as well as its state."
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquire(long),attempts to acquire in exclusive mode.
"java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireNanos(long,long)","attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses."
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireShared(long),attempts to acquire in shared mode.
"java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireSharedNanos(long,long)","attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses."
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryRelease(long),attempts to set the state to reflect a release in exclusive mode.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryReleaseShared(long),attempts to set the state to reflect a release in shared mode.
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int),"acquires in exclusive mode, ignoring interrupts."
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(int),"acquires in exclusive mode, aborting if interrupted."
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(int),"acquires in shared mode, ignoring interrupts."
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(int),"acquires in shared mode, aborting if interrupted."
"java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int,int)",atomically sets synchronization state to the given updated value if the current state value equals the expected value.
java.util.concurrent.locks.AbstractQueuedSynchronizer.getExclusiveQueuedThreads(),returns a collection containing threads that may be waiting to acquire in exclusive mode.
java.util.concurrent.locks.AbstractQueuedSynchronizer.getFirstQueuedThread(),"returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued."
java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueuedThreads(),returns a collection containing threads that may be waiting to acquire.
java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueueLength(),returns an estimate of the number of threads waiting to acquire.
java.util.concurrent.locks.AbstractQueuedSynchronizer.getSharedQueuedThreads(),returns a collection containing threads that may be waiting to acquire in shared mode.
java.util.concurrent.locks.AbstractQueuedSynchronizer.getState(),returns the current value of synchronization state.
java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject),returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer.
java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject),returns an estimate of the number of threads waiting on the given condition associated with this synchronizer.
java.util.concurrent.locks.AbstractQueuedSynchronizer.hasContended(),queries whether any threads have ever contended to acquire this synchronizer; that is if an acquire method has ever blocked.
java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedPredecessors(),queries whether any threads have been waiting to acquire longer than the current thread.
java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedThreads(),queries whether any threads are waiting to acquire.
java.util.concurrent.locks.AbstractQueuedSynchronizer.hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject),queries whether any threads are waiting on the given condition associated with this synchronizer.
java.util.concurrent.locks.AbstractQueuedSynchronizer.isHeldExclusively(),returns true if synchronization is held exclusively with respect to the current (calling) thread.
java.util.concurrent.locks.AbstractQueuedSynchronizer.isQueued(java.lang.Thread),returns true if the given thread is currently queued.
java.util.concurrent.locks.AbstractQueuedSynchronizer.owns(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject),queries whether the given conditionobject uses this synchronizer as its lock.
java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int),releases in exclusive mode.
java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared(int),releases in shared mode.
java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int),sets the value of synchronization state.
java.util.concurrent.locks.AbstractQueuedSynchronizer.toString(),"returns a string identifying this synchronizer, as well as its state."
java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquire(int),attempts to acquire in exclusive mode.
"java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(int,long)","attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses."
java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int),attempts to acquire in shared mode.
"java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(int,long)","attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses."
java.util.concurrent.locks.AbstractQueuedSynchronizer.tryRelease(int),attempts to set the state to reflect a release in exclusive mode.
java.util.concurrent.locks.AbstractQueuedSynchronizer.tryReleaseShared(int),attempts to set the state to reflect a release in shared mode.
java.util.concurrent.locks.LockSupport.getBlocker(java.lang.Thread),"returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked, or null if not blocked."
java.util.concurrent.locks.LockSupport.park(java.lang.Object),disables the current thread for thread scheduling purposes unless the permit is available.
java.util.concurrent.locks.LockSupport.park(),disables the current thread for thread scheduling purposes unless the permit is available.
"java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object,long)","disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available."
java.util.concurrent.locks.LockSupport.parkNanos(long),"disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available."
"java.util.concurrent.locks.LockSupport.parkUntil(java.lang.Object,long)","disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available."
java.util.concurrent.locks.LockSupport.parkUntil(long),"disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available."
java.util.concurrent.locks.LockSupport.unpark(java.lang.Thread),"makes available the permit for the given thread, if it was not already available."
java.util.concurrent.locks.ReentrantLock.getHoldCount(),queries the number of holds on this lock by the current thread.
java.util.concurrent.locks.ReentrantLock.getOwner(),"returns the thread that currently owns this lock, or null if not owned."
java.util.concurrent.locks.ReentrantLock.getQueuedThreads(),returns a collection containing threads that may be waiting to acquire this lock.
java.util.concurrent.locks.ReentrantLock.getQueueLength(),returns an estimate of the number of threads waiting to acquire this lock.
java.util.concurrent.locks.ReentrantLock.getWaitingThreads(java.util.concurrent.locks.Condition),returns a collection containing those threads that may be waiting on the given condition associated with this lock.
java.util.concurrent.locks.ReentrantLock.getWaitQueueLength(java.util.concurrent.locks.Condition),returns an estimate of the number of threads waiting on the given condition associated with this lock.
java.util.concurrent.locks.ReentrantLock.hasQueuedThread(java.lang.Thread),queries whether the given thread is waiting to acquire this lock.
java.util.concurrent.locks.ReentrantLock.hasQueuedThreads(),queries whether any threads are waiting to acquire this lock.
java.util.concurrent.locks.ReentrantLock.hasWaiters(java.util.concurrent.locks.Condition),queries whether any threads are waiting on the given condition associated with this lock.
java.util.concurrent.locks.ReentrantLock.isFair(),returns true if this lock has fairness set true.
java.util.concurrent.locks.ReentrantLock.isHeldByCurrentThread(),queries if this lock is held by the current thread.
java.util.concurrent.locks.ReentrantLock.isLocked(),queries if this lock is held by any thread.
java.util.concurrent.locks.ReentrantLock.lock(),acquires the lock.
java.util.concurrent.locks.ReentrantLock.lockInterruptibly(),acquires the lock unless the current thread is interrupted.
java.util.concurrent.locks.ReentrantLock.newCondition(),returns a condition instance for use with this lock instance.
java.util.concurrent.locks.ReentrantLock.toString(),"returns a string identifying this lock, as well as its lock state."
java.util.concurrent.locks.ReentrantLock.tryLock(),acquires the lock only if it is not held by another thread at the time of invocation.
"java.util.concurrent.locks.ReentrantLock.tryLock(long,java.util.concurrent.TimeUnit)",acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been interrupted.
java.util.concurrent.locks.ReentrantLock.unlock(),attempts to release this lock.
java.util.concurrent.locks.ReentrantReadWriteLock.getOwner(),"returns the thread that currently owns the write lock, or null if not owned."
java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedReaderThreads(),returns a collection containing threads that may be waiting to acquire the read lock.
java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedThreads(),returns a collection containing threads that may be waiting to acquire either the read or write lock.
java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedWriterThreads(),returns a collection containing threads that may be waiting to acquire the write lock.
java.util.concurrent.locks.ReentrantReadWriteLock.getQueueLength(),returns an estimate of the number of threads waiting to acquire either the read or write lock.
java.util.concurrent.locks.ReentrantReadWriteLock.getReadHoldCount(),queries the number of reentrant read holds on this lock by the current thread.
java.util.concurrent.locks.ReentrantReadWriteLock.getReadLockCount(),queries the number of read locks held for this lock.
java.util.concurrent.locks.ReentrantReadWriteLock.getWaitingThreads(java.util.concurrent.locks.Condition),returns a collection containing those threads that may be waiting on the given condition associated with the write lock.
java.util.concurrent.locks.ReentrantReadWriteLock.getWaitQueueLength(java.util.concurrent.locks.Condition),returns an estimate of the number of threads waiting on the given condition associated with the write lock.
java.util.concurrent.locks.ReentrantReadWriteLock.getWriteHoldCount(),queries the number of reentrant write holds on this lock by the current thread.
java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThread(java.lang.Thread),queries whether the given thread is waiting to acquire either the read or write lock.
java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThreads(),queries whether any threads are waiting to acquire the read or write lock.
java.util.concurrent.locks.ReentrantReadWriteLock.hasWaiters(java.util.concurrent.locks.Condition),queries whether any threads are waiting on the given condition associated with the write lock.
java.util.concurrent.locks.ReentrantReadWriteLock.isFair(),returns true if this lock has fairness set true.
java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLocked(),queries if the write lock is held by any thread.
java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLockedByCurrentThread(),queries if the write lock is held by the current thread.
java.util.concurrent.locks.ReentrantReadWriteLock.toString(),"returns a string identifying this lock, as well as its lock state."
java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lock(),acquires the read lock.
java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lockInterruptibly(),acquires the read lock unless the current thread is interrupted.
java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.newCondition(),throws unsupportedoperationexception because readlocks do not support conditions.
java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.toString(),"returns a string identifying this lock, as well as its lock state."
java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.tryLock(),acquires the read lock only if the write lock is not held by another thread at the time of invocation.
"java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.tryLock(long,java.util.concurrent.TimeUnit)",acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been interrupted.
java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.unlock(),attempts to release this lock.
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.getHoldCount(),queries the number of holds on this write lock by the current thread.
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.isHeldByCurrentThread(),queries if this write lock is held by the current thread.
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lock(),acquires the write lock.
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lockInterruptibly(),acquires the write lock unless the current thread is interrupted.
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.newCondition(),returns a condition instance for use with this lock instance.
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.toString(),"returns a string identifying this lock, as well as its lock state."
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.tryLock(),acquires the write lock only if it is not held by another thread at the time of invocation.
"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.tryLock(long,java.util.concurrent.TimeUnit)",acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been interrupted.
java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock(),attempts to release this lock.
java.util.concurrent.locks.StampedLock.asReadLock(),returns a plain lock view of this stampedlock in which the lock.
java.util.concurrent.locks.StampedLock.asReadWriteLock(),returns a readwritelock view of this stampedlock in which the readwritelock.
java.util.concurrent.locks.StampedLock.asWriteLock(),returns a plain lock view of this stampedlock in which the lock.
java.util.concurrent.locks.StampedLock.getReadLockCount(),queries the number of read locks held for this lock.
java.util.concurrent.locks.StampedLock.isReadLocked(),returns true if the lock is currently held non-exclusively.
java.util.concurrent.locks.StampedLock.isWriteLocked(),returns true if the lock is currently held exclusively.
java.util.concurrent.locks.StampedLock.readLock(),"non-exclusively acquires the lock, blocking if necessary until available."
java.util.concurrent.locks.StampedLock.readLockInterruptibly(),"non-exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted."
java.util.concurrent.locks.StampedLock.toString(),"returns a string identifying this lock, as well as its lock state."
java.util.concurrent.locks.StampedLock.tryConvertToOptimisticRead(long),"if the lock state matches the given stamp then, if the stamp represents holding a lock, releases it and returns an observation stamp."
java.util.concurrent.locks.StampedLock.tryConvertToReadLock(long),"if the lock state matches the given stamp, performs one of the following actions."
java.util.concurrent.locks.StampedLock.tryConvertToWriteLock(long),"if the lock state matches the given stamp, performs one of the following actions."
java.util.concurrent.locks.StampedLock.tryOptimisticRead(),"returns a stamp that can later be validated, or zero if exclusively locked."
java.util.concurrent.locks.StampedLock.tryReadLock(),non-exclusively acquires the lock if it is immediately available.
"java.util.concurrent.locks.StampedLock.tryReadLock(long,java.util.concurrent.TimeUnit)",non-exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted.
java.util.concurrent.locks.StampedLock.tryUnlockRead(),"releases one hold of the read lock if it is held, without requiring a stamp value."
java.util.concurrent.locks.StampedLock.tryUnlockWrite(),"releases the write lock if it is held, without requiring a stamp value."
java.util.concurrent.locks.StampedLock.tryWriteLock(),exclusively acquires the lock if it is immediately available.
"java.util.concurrent.locks.StampedLock.tryWriteLock(long,java.util.concurrent.TimeUnit)",exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted.
java.util.concurrent.locks.StampedLock.unlock(long),"if the lock state matches the given stamp, releases the corresponding mode of the lock."
java.util.concurrent.locks.StampedLock.unlockRead(long),"if the lock state matches the given stamp, releases the non-exclusive lock."
java.util.concurrent.locks.StampedLock.unlockWrite(long),"if the lock state matches the given stamp, releases the exclusive lock."
java.util.concurrent.locks.StampedLock.validate(long),returns true if the lock has not been exclusively acquired since issuance of the given stamp.
java.util.concurrent.locks.StampedLock.writeLock(),"exclusively acquires the lock, blocking if necessary until available."
java.util.concurrent.locks.StampedLock.writeLockInterruptibly(),"exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted."
"java.util.function.BiConsumer.accept(java.util.function.BiConsumer,java.util.function.BiConsumer)",performs this operation on the given arguments.
"java.util.function.BiConsumer.andThen(java.util.function.BiConsumer<? super,? super java.util.function.BiConsumer>)","returns a composed biconsumer that performs, in sequence, this operation followed by the after operation."
"java.util.function.BiFunction.andThen(java.util.function.Function<? super,? extends V>)","returns a composed function that first applies this function to its input, and then applies the after function to the result."
"java.util.function.BiFunction.apply(java.util.function.BiFunction,java.util.function.BiFunction)",applies this function to the given arguments.
java.util.function.BinaryOperator.maxBy(java.util.Comparator<? super T>),returns a binaryoperator which returns the greater of two elements according to the specified comparator.
java.util.function.BinaryOperator.minBy(java.util.Comparator<? super T>),returns a binaryoperator which returns the lesser of two elements according to the specified comparator.
"java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super,? super java.util.function.BiPredicate>)",returns a composed predicate that represents a short-circuiting logical and of this predicate and another.
java.util.function.BiPredicate.negate(),returns a predicate that represents the logical negation of this predicate.
"java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super,? super java.util.function.BiPredicate>)",returns a composed predicate that represents a short-circuiting logical or of this predicate and another.
"java.util.function.BiPredicate.test(java.util.function.BiPredicate,java.util.function.BiPredicate)",evaluates this predicate on the given arguments.
java.util.function.BooleanSupplier.getAsBoolean(),gets a result.
java.util.function.Consumer.accept(java.util.function.Consumer),performs this operation on the given argument.
java.util.function.Consumer.andThen(java.util.function.Consumer<? super java.util.function.Consumer>),"returns a composed consumer that performs, in sequence, this operation followed by the after operation."
"java.util.function.DoubleBinaryOperator.applyAsDouble(double,double)",applies this operator to the given operands.
java.util.function.DoubleConsumer.accept(double),performs this operation on the given argument.
java.util.function.DoubleConsumer.andThen(java.util.function.DoubleConsumer),"returns a composed doubleconsumer that performs, in sequence, this operation followed by the after operation."
java.util.function.DoubleFunction.apply(double),applies this function to the given argument.
java.util.function.DoublePredicate.and(java.util.function.DoublePredicate),returns a composed predicate that represents a short-circuiting logical and of this predicate and another.
java.util.function.DoublePredicate.negate(),returns a predicate that represents the logical negation of this predicate.
java.util.function.DoublePredicate.or(java.util.function.DoublePredicate),returns a composed predicate that represents a short-circuiting logical or of this predicate and another.
java.util.function.DoublePredicate.test(double),evaluates this predicate on the given argument.
java.util.function.DoubleSupplier.getAsDouble(),gets a result.
java.util.function.DoubleToIntFunction.applyAsInt(double),applies this function to the given argument.
java.util.function.DoubleToLongFunction.applyAsLong(double),applies this function to the given argument.
java.util.function.DoubleUnaryOperator.andThen(java.util.function.DoubleUnaryOperator),"returns a composed operator that first applies this operator to its input, and then applies the after operator to the result."
java.util.function.DoubleUnaryOperator.applyAsDouble(double),applies this operator to the given operand.
java.util.function.DoubleUnaryOperator.compose(java.util.function.DoubleUnaryOperator),"returns a composed operator that first applies the before operator to its input, and then applies this operator to the result."
java.util.function.DoubleUnaryOperator.identity(),returns a unary operator that always returns its input argument.
"java.util.function.Function.andThen(java.util.function.Function<? super,? extends V>)","returns a composed function that first applies this function to its input, and then applies the after function to the result."
java.util.function.Function.apply(java.util.function.Function),applies this function to the given argument.
"java.util.function.Function.compose(java.util.function.Function<? super,? extends java.util.function.Function>)","returns a composed function that first applies the before function to its input, and then applies this function to the result."
java.util.function.Function.identity(),returns a function that always returns its input argument.
"java.util.function.IntBinaryOperator.applyAsInt(int,int)",applies this operator to the given operands.
java.util.function.IntConsumer.accept(int),performs this operation on the given argument.
java.util.function.IntConsumer.andThen(java.util.function.IntConsumer),"returns a composed intconsumer that performs, in sequence, this operation followed by the after operation."
java.util.function.IntFunction.apply(int),applies this function to the given argument.
java.util.function.IntPredicate.and(java.util.function.IntPredicate),returns a composed predicate that represents a short-circuiting logical and of this predicate and another.
java.util.function.IntPredicate.negate(),returns a predicate that represents the logical negation of this predicate.
java.util.function.IntPredicate.or(java.util.function.IntPredicate),returns a composed predicate that represents a short-circuiting logical or of this predicate and another.
java.util.function.IntPredicate.test(int),evaluates this predicate on the given argument.
java.util.function.IntSupplier.getAsInt(),gets a result.
java.util.function.IntToDoubleFunction.applyAsDouble(int),applies this function to the given argument.
java.util.function.IntToLongFunction.applyAsLong(int),applies this function to the given argument.
java.util.function.IntUnaryOperator.andThen(java.util.function.IntUnaryOperator),"returns a composed operator that first applies this operator to its input, and then applies the after operator to the result."
java.util.function.IntUnaryOperator.applyAsInt(int),applies this operator to the given operand.
java.util.function.IntUnaryOperator.compose(java.util.function.IntUnaryOperator),"returns a composed operator that first applies the before operator to its input, and then applies this operator to the result."
java.util.function.IntUnaryOperator.identity(),returns a unary operator that always returns its input argument.
"java.util.function.LongBinaryOperator.applyAsLong(long,long)",applies this operator to the given operands.
java.util.function.LongConsumer.accept(long),performs this operation on the given argument.
java.util.function.LongConsumer.andThen(java.util.function.LongConsumer),"returns a composed longconsumer that performs, in sequence, this operation followed by the after operation."
java.util.function.LongFunction.apply(long),applies this function to the given argument.
java.util.function.LongPredicate.and(java.util.function.LongPredicate),returns a composed predicate that represents a short-circuiting logical and of this predicate and another.
java.util.function.LongPredicate.negate(),returns a predicate that represents the logical negation of this predicate.
java.util.function.LongPredicate.or(java.util.function.LongPredicate),returns a composed predicate that represents a short-circuiting logical or of this predicate and another.
java.util.function.LongPredicate.test(long),evaluates this predicate on the given argument.
java.util.function.LongSupplier.getAsLong(),gets a result.
java.util.function.LongToDoubleFunction.applyAsDouble(long),applies this function to the given argument.
java.util.function.LongToIntFunction.applyAsInt(long),applies this function to the given argument.
java.util.function.LongUnaryOperator.andThen(java.util.function.LongUnaryOperator),"returns a composed operator that first applies this operator to its input, and then applies the after operator to the result."
java.util.function.LongUnaryOperator.applyAsLong(long),applies this operator to the given operand.
java.util.function.LongUnaryOperator.compose(java.util.function.LongUnaryOperator),"returns a composed operator that first applies the before operator to its input, and then applies this operator to the result."
java.util.function.LongUnaryOperator.identity(),returns a unary operator that always returns its input argument.
"java.util.function.ObjDoubleConsumer.accept(java.util.function.ObjDoubleConsumer,double)",performs this operation on the given arguments.
"java.util.function.ObjIntConsumer.accept(java.util.function.ObjIntConsumer,int)",performs this operation on the given arguments.
"java.util.function.ObjLongConsumer.accept(java.util.function.ObjLongConsumer,long)",performs this operation on the given arguments.
java.util.function.Predicate.and(java.util.function.Predicate<? super java.util.function.Predicate>),returns a composed predicate that represents a short-circuiting logical and of this predicate and another.
java.util.function.Predicate.isEqual(java.lang.Object),returns a predicate that tests if two arguments are equal according to objects.
java.util.function.Predicate.negate(),returns a predicate that represents the logical negation of this predicate.
java.util.function.Predicate.or(java.util.function.Predicate<? super java.util.function.Predicate>),returns a composed predicate that represents a short-circuiting logical or of this predicate and another.
java.util.function.Predicate.test(java.util.function.Predicate),evaluates this predicate on the given argument.
java.util.function.Supplier.get(),gets a result.
"java.util.function.ToDoubleBiFunction.applyAsDouble(java.util.function.ToDoubleBiFunction,java.util.function.ToDoubleBiFunction)",applies this function to the given arguments.
java.util.function.ToDoubleFunction.applyAsDouble(java.util.function.ToDoubleFunction),applies this function to the given argument.
"java.util.function.ToIntBiFunction.applyAsInt(java.util.function.ToIntBiFunction,java.util.function.ToIntBiFunction)",applies this function to the given arguments.
java.util.function.ToIntFunction.applyAsInt(java.util.function.ToIntFunction),applies this function to the given argument.
"java.util.function.ToLongBiFunction.applyAsLong(java.util.function.ToLongBiFunction,java.util.function.ToLongBiFunction)",applies this function to the given arguments.
java.util.function.ToLongFunction.applyAsLong(java.util.function.ToLongFunction),applies this function to the given argument.
java.util.function.UnaryOperator.identity(),returns a unary operator that always returns its input argument.
"java.util.jar.Pack200.Packer.pack(java.util.jar.JarFile,java.io.OutputStream)",takes a jarfile and converts it into a pack200 archive.
"java.util.jar.Pack200.Packer.pack(java.util.jar.JarInputStream,java.io.OutputStream)",takes a jarinputstream and converts it into a pack200 archive.
java.util.jar.Pack200.Packer.properties(),get the set of this engine's properties.
java.util.jar.Pack200.Unpacker.properties(),get the set of this engine's properties.
"java.util.jar.Pack200.Unpacker.unpack(java.io.InputStream,java.util.jar.JarOutputStream)","read a pack200 archive, and write the encoded jar to a jaroutputstream."
"java.util.jar.Pack200.Unpacker.unpack(java.io.File,java.util.jar.JarOutputStream)","read a pack200 archive, and write the encoded jar to a jaroutputstream."
java.util.jar.Attributes.clear(),removes all attributes from this map.
java.util.jar.Attributes.clone(),"returns a copy of the attributes, implemented as follows:
public object clone() { return new attributes(this); } ."
java.util.jar.Attributes.containsKey(java.lang.Object),returns true if this map contains the specified attribute name (key).
java.util.jar.Attributes.containsValue(java.lang.Object),returns true if this map maps one or more attribute names (keys) to the specified value.
java.util.jar.Attributes.entrySet(),returns a collection view of the attribute name-value mappings contained in this map.
java.util.jar.Attributes.equals(java.lang.Object),compares the specified attributes object with this map for equality.
java.util.jar.Attributes.get(java.lang.Object),"returns the value of the specified attribute name, or null if the attribute name was not found."
java.util.jar.Attributes.getValue(java.lang.String),"returns the value of the specified attribute name, specified as a string, or null if the attribute was not found."
java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name),returns the value of the specified attributes.
java.util.jar.Attributes.hashCode(),returns the hash code value for this map.
java.util.jar.Attributes.isEmpty(),returns true if this map contains no attributes.
java.util.jar.Attributes.keySet(),returns a set view of the attribute names (keys) contained in this map.
"java.util.jar.Attributes.put(java.lang.Object,java.lang.Object)",associates the specified value with the specified attribute name (key) in this map.
"java.util.jar.Attributes.putAll(,?>)",copies all of the attribute name-value mappings from the specified attributes to this map.
"java.util.jar.Attributes.putValue(java.lang.String,java.lang.String)","associates the specified value with the specified attribute name, specified as a string."
java.util.jar.Attributes.remove(java.lang.Object),removes the attribute with the specified name (key) from this map.
java.util.jar.Attributes.size(),returns the number of attributes in this map.
java.util.jar.Attributes.values(),returns a collection view of the attribute values contained in this map.
java.util.jar.Attributes.Name.equals(java.lang.Object),compares this attribute name to another for equality.
java.util.jar.Attributes.Name.hashCode(),computes the hash value for this attribute name.
java.util.jar.Attributes.Name.toString(),returns the attribute name as a string.
java.util.jar.JarEntry.getAttributes(),"returns the manifest attributes for this entry, or null if none."
java.util.jar.JarEntry.getCertificates(),"returns the certificate objects for this entry, or null if none."
java.util.jar.JarEntry.getCodeSigners(),"returns the codesigner objects for this entry, or null if none."
java.util.jar.JarFile.entries(),returns an enumeration of the zip file entries.
java.util.jar.JarFile.getEntry(java.lang.String),returns the zipentry for the given entry name or null if not found.
java.util.jar.JarFile.getInputStream(java.util.zip.ZipEntry),returns an input stream for reading the contents of the specified zip file entry.
java.util.jar.JarFile.getJarEntry(java.lang.String),returns the jarentry for the given entry name or null if not found.
java.util.jar.JarFile.getManifest(),"returns the jar file manifest, or null if none."
java.util.jar.JarInputStream.createZipEntry(java.lang.String),creates a new jarentry (zipentry) for the specified jar file entry name.
java.util.jar.JarInputStream.getManifest(),"returns the manifest for this jar file, or null if none."
java.util.jar.JarInputStream.getNextEntry(),reads the next zip file entry and positions the stream at the beginning of the entry data.
java.util.jar.JarInputStream.getNextJarEntry(),reads the next jar file entry and positions the stream at the beginning of the entry data.
"java.util.jar.JarInputStream.read(byte[],int,int)",reads from the current jar file entry into an array of bytes.
java.util.jar.JarOutputStream.putNextEntry(java.util.zip.ZipEntry),begins writing a new jar file entry and positions the stream to the start of the entry data.
java.util.jar.Manifest.clear(),clears the main attributes as well as the entries in this manifest.
java.util.jar.Manifest.clone(),returns a shallow copy of this manifest.
java.util.jar.Manifest.equals(java.lang.Object),returns true if the specified object is also a manifest and has the same main attributes and entries.
java.util.jar.Manifest.getAttributes(java.lang.String),returns the attributes for the specified entry name.
java.util.jar.Manifest.getEntries(),returns a map of the entries contained in this manifest.
java.util.jar.Manifest.getMainAttributes(),returns the main attributes for the manifest.
java.util.jar.Manifest.hashCode(),returns the hash code for this manifest.
java.util.jar.Manifest.read(java.io.InputStream),reads the manifest from the specified inputstream.
java.util.jar.Manifest.write(java.io.OutputStream),writes the manifest to the specified outputstream.
java.util.jar.Pack200.newPacker(),obtain new instance of a class that implements packer.
java.util.jar.Pack200.newUnpacker(),obtain new instance of a class that implements unpacker.
java.util.logging.Filter.isLoggable(java.util.logging.LogRecord),check if a given log record should be published.
java.util.logging.LoggingMXBean.getLoggerLevel(java.lang.String),gets the name of the log level associated with the specified logger.
java.util.logging.LoggingMXBean.getLoggerNames(),returns the list of currently registered logger names.
java.util.logging.LoggingMXBean.getParentLoggerName(java.lang.String),returns the name of the parent for the specified logger.
"java.util.logging.LoggingMXBean.setLoggerLevel(java.lang.String,java.lang.String)",sets the specified logger to the specified new level.
java.util.logging.ConsoleHandler.publish(java.util.logging.LogRecord),publish a logrecord.
"java.util.logging.ErrorManager.error(java.lang.String,java.lang.Exception,int)",the error method is called when a handler failure occurs.
java.util.logging.FileHandler.close(),close all the files.
java.util.logging.FileHandler.publish(java.util.logging.LogRecord),format and publish a logrecord.
java.util.logging.Formatter.format(java.util.logging.LogRecord),format the given log record and return the formatted string.
java.util.logging.Formatter.formatMessage(java.util.logging.LogRecord),localize and format the message string from a log record.
java.util.logging.Formatter.getHead(java.util.logging.Handler),return the header string for a set of formatted records.
java.util.logging.Formatter.getTail(java.util.logging.Handler),return the tail string for a set of formatted records.
java.util.logging.Handler.close(),close the handler and free all associated resources.
java.util.logging.Handler.flush(),flush any buffered output.
java.util.logging.Handler.getEncoding(),return the character encoding for this handler.
java.util.logging.Handler.getErrorManager(),retrieves the errormanager for this handler.
java.util.logging.Handler.getFilter(),get the current filter for this handler.
java.util.logging.Handler.getFormatter(),return the formatter for this handler.
java.util.logging.Handler.getLevel(),get the log level specifying which messages will be logged by this handler.
java.util.logging.Handler.isLoggable(java.util.logging.LogRecord),check if this handler would actually log a given logrecord.
java.util.logging.Handler.publish(java.util.logging.LogRecord),publish a logrecord.
"java.util.logging.Handler.reportError(java.lang.String,java.lang.Exception,int)",protected convenience method to report an error to this handler's errormanager.
java.util.logging.Handler.setEncoding(java.lang.String),set the character encoding used by this handler.
java.util.logging.Handler.setErrorManager(java.util.logging.ErrorManager),define an errormanager for this handler.
java.util.logging.Handler.setFilter(java.util.logging.Filter),set a filter to control output on this handler.
java.util.logging.Handler.setFormatter(java.util.logging.Formatter),set a formatter.
java.util.logging.Handler.setLevel(java.util.logging.Level),set the log level specifying which message levels will be logged by this handler.
java.util.logging.Level.equals(java.lang.Object),compare two objects for value equality.
java.util.logging.Level.getLocalizedName(),"return the localized string name of the level, for the current default locale."
java.util.logging.Level.getName(),return the non-localized string name of the level.
java.util.logging.Level.getResourceBundleName(),"return the level's localization resource bundle name, or null if no localization bundle is defined."
java.util.logging.Level.hashCode(),generate a hashcode.
java.util.logging.Level.intValue(),get the integer value for this level.
java.util.logging.Level.parse(java.lang.String),parse a level name string into a level.
java.util.logging.Level.toString(),returns a string representation of this level.
java.util.logging.Logger.addHandler(java.util.logging.Handler),add a log handler to receive logging messages.
java.util.logging.Logger.config(java.lang.String),log a config message.
java.util.logging.Logger.config(java.util.function.Supplier<java.lang.String>),"log a config message, which is only to be constructed if the logging level is such that the message will actually be logged."
"java.util.logging.Logger.entering(java.lang.String,java.lang.String)",log a method entry.
"java.util.logging.Logger.entering(java.lang.String,java.lang.String,java.lang.Object)","log a method entry, with one parameter."
"java.util.logging.Logger.entering(java.lang.String,java.lang.String,java.lang.Object[])","log a method entry, with an array of parameters."
"java.util.logging.Logger.exiting(java.lang.String,java.lang.String)",log a method return.
"java.util.logging.Logger.exiting(java.lang.String,java.lang.String,java.lang.Object)","log a method return, with result object."
java.util.logging.Logger.fine(java.lang.String),log a fine message.
java.util.logging.Logger.fine(java.util.function.Supplier<java.lang.String>),"log a fine message, which is only to be constructed if the logging level is such that the message will actually be logged."
java.util.logging.Logger.finer(java.lang.String),log a finer message.
java.util.logging.Logger.finer(java.util.function.Supplier<java.lang.String>),"log a finer message, which is only to be constructed if the logging level is such that the message will actually be logged."
java.util.logging.Logger.finest(java.lang.String),log a finest message.
java.util.logging.Logger.finest(java.util.function.Supplier<java.lang.String>),"log a finest message, which is only to be constructed if the logging level is such that the message will actually be logged."
java.util.logging.Logger.getAnonymousLogger(),create an anonymous logger.
java.util.logging.Logger.getAnonymousLogger(java.lang.String),create an anonymous logger.
java.util.logging.Logger.getFilter(),get the current filter for this logger.
java.util.logging.Logger.getGlobal(),return global logger object with the name logger.
java.util.logging.Logger.getHandlers(),get the handlers associated with this logger.
java.util.logging.Logger.getLevel(),get the log level that has been specified for this logger.
java.util.logging.Logger.getLogger(java.lang.String),find or create a logger for a named subsystem.
"java.util.logging.Logger.getLogger(java.lang.String,java.lang.String)",find or create a logger for a named subsystem.
java.util.logging.Logger.getName(),get the name for this logger.
java.util.logging.Logger.getParent(),return the parent for this logger.
java.util.logging.Logger.getResourceBundle(),retrieve the localization resource bundle for this logger.
java.util.logging.Logger.getResourceBundleName(),retrieve the localization resource bundle name for this logger.
java.util.logging.Logger.getUseParentHandlers(),discover whether or not this logger is sending its output to its parent logger.
java.util.logging.Logger.info(java.lang.String),log an info message.
java.util.logging.Logger.info(java.util.function.Supplier<java.lang.String>),"log a info message, which is only to be constructed if the logging level is such that the message will actually be logged."
java.util.logging.Logger.isLoggable(java.util.logging.Level),check if a message of the given level would actually be logged by this logger.
java.util.logging.Logger.log(java.util.logging.LogRecord),log a logrecord.
"java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)","log a message, with no arguments."
"java.util.logging.Logger.log(java.util.logging.Level,java.util.function.Supplier<java.lang.String>)","log a message, which is only to be constructed if the logging level is such that the message will actually be logged."
"java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)","log a message, with one object parameter."
"java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object[])","log a message, with an array of object arguments."
"java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)","log a message, with associated throwable information."
"java.util.logging.Logger.log(java.util.logging.Level,java.lang.Throwable,java.util.function.Supplier<java.lang.String>)","log a lazily constructed message, with associated throwable information."
"java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)","log a message, specifying source class and method, with no arguments."
"java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.util.function.Supplier<java.lang.String>)","log a lazily constructed message, specifying source class and method, with no arguments."
"java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)","log a message, specifying source class and method, with a single object parameter to the log message."
"java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])","log a message, specifying source class and method, with an array of object arguments."
"java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)","log a message, specifying source class and method, with associated throwable information."
"java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable,java.util.function.Supplier<java.lang.String>)","log a lazily constructed message, specifying source class and method, with associated throwable information."
"java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Object...)","log a message, specifying source class, method, and resource bundle, with an optional list of message parameters."
"java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Throwable)","log a message, specifying source class, method, and resource bundle, with associated throwable information."
java.util.logging.Logger.removeHandler(java.util.logging.Handler),remove a log handler.
java.util.logging.Logger.setFilter(java.util.logging.Filter),set a filter to control output on this logger.
java.util.logging.Logger.setLevel(java.util.logging.Level),set the log level specifying which message levels will be logged by this logger.
java.util.logging.Logger.setParent(java.util.logging.Logger),set the parent for this logger.
java.util.logging.Logger.setResourceBundle(java.util.ResourceBundle),sets a resource bundle on this logger.
java.util.logging.Logger.setUseParentHandlers(boolean),specify whether or not this logger should send its output to its parent logger.
java.util.logging.Logger.severe(java.lang.String),log a severe message.
java.util.logging.Logger.severe(java.util.function.Supplier<java.lang.String>),"log a severe message, which is only to be constructed if the logging level is such that the message will actually be logged."
"java.util.logging.Logger.throwing(java.lang.String,java.lang.String,java.lang.Throwable)",log throwing an exception.
java.util.logging.Logger.warning(java.lang.String),log a warning message.
java.util.logging.Logger.warning(java.util.function.Supplier<java.lang.String>),"log a warning message, which is only to be constructed if the logging level is such that the message will actually be logged."
java.util.logging.LogManager.addLogger(java.util.logging.Logger),add a named logger.
java.util.logging.LogManager.checkAccess(),check that the current context is trusted to modify the logging configuration.
java.util.logging.LogManager.getLogger(java.lang.String),method to find a named logger.
java.util.logging.LogManager.getLoggerNames(),get an enumeration of known logger names.
java.util.logging.LogManager.getLoggingMXBean(),returns loggingmxbean for managing loggers.
java.util.logging.LogManager.getLogManager(),returns the global logmanager object.
java.util.logging.LogManager.getProperty(java.lang.String),get the value of a logging property.
java.util.logging.LogManager.readConfiguration(),reinitialize the logging properties and reread the logging configuration.
java.util.logging.LogManager.readConfiguration(java.io.InputStream),"reinitialize the logging properties and reread the logging configuration from the given stream, which should be in java."
java.util.logging.LogManager.reset(),reset the logging configuration.
java.util.logging.LogRecord.getLevel(),"get the logging message level, for example level."
java.util.logging.LogRecord.getLoggerName(),get the source logger's name.
java.util.logging.LogRecord.getMessage(),"get the ""raw"" log message, before localization or formatting."
java.util.logging.LogRecord.getMillis(),get event time in milliseconds since 1970.
java.util.logging.LogRecord.getParameters(),get the parameters to the log message.
java.util.logging.LogRecord.getResourceBundle(),"get the localization resource bundle
this is the resourcebundle that should be used to localize the message string before formatting it."
java.util.logging.LogRecord.getResourceBundleName(),"get the localization resource bundle name
this is the name for the resourcebundle that should be used to localize the message string before formatting it."
java.util.logging.LogRecord.getSequenceNumber(),get the sequence number.
java.util.logging.LogRecord.getSourceClassName(),get the name of the class that (allegedly) issued the logging request.
java.util.logging.LogRecord.getSourceMethodName(),get the name of the method that (allegedly) issued the logging request.
java.util.logging.LogRecord.getThreadID(),get an identifier for the thread where the message originated.
java.util.logging.LogRecord.getThrown(),get any throwable associated with the log record.
java.util.logging.LogRecord.setLevel(java.util.logging.Level),"set the logging message level, for example level."
java.util.logging.LogRecord.setLoggerName(java.lang.String),set the source logger's name.
java.util.logging.LogRecord.setMessage(java.lang.String),"set the ""raw"" log message, before localization or formatting."
java.util.logging.LogRecord.setMillis(long),set event time.
java.util.logging.LogRecord.setParameters(java.lang.Object[]),set the parameters to the log message.
java.util.logging.LogRecord.setResourceBundle(java.util.ResourceBundle),set the localization resource bundle.
java.util.logging.LogRecord.setResourceBundleName(java.lang.String),set the localization resource bundle name.
java.util.logging.LogRecord.setSequenceNumber(long),set the sequence number.
java.util.logging.LogRecord.setSourceClassName(java.lang.String),set the name of the class that (allegedly) issued the logging request.
java.util.logging.LogRecord.setSourceMethodName(java.lang.String),set the name of the method that (allegedly) issued the logging request.
java.util.logging.LogRecord.setThreadID(int),set an identifier for the thread where the message originated.
java.util.logging.LogRecord.setThrown(java.lang.Throwable),set a throwable associated with the log event.
java.util.logging.MemoryHandler.close(),close the handler and free all associated resources.
java.util.logging.MemoryHandler.flush(),causes a flush on the target handler.
java.util.logging.MemoryHandler.getPushLevel(),get the pushlevel.
java.util.logging.MemoryHandler.isLoggable(java.util.logging.LogRecord),check if this handler would actually log a given logrecord into its internal buffer.
java.util.logging.MemoryHandler.publish(java.util.logging.LogRecord),store a logrecord in an internal buffer.
java.util.logging.MemoryHandler.push(),push any buffered output to the target handler.
java.util.logging.MemoryHandler.setPushLevel(java.util.logging.Level),set the pushlevel.
java.util.logging.SimpleFormatter.format(java.util.logging.LogRecord),format the given logrecord.
java.util.logging.SocketHandler.close(),close this output stream.
java.util.logging.SocketHandler.publish(java.util.logging.LogRecord),format and publish a logrecord.
java.util.logging.StreamHandler.close(),close the current output stream.
java.util.logging.StreamHandler.flush(),flush any buffered messages.
java.util.logging.StreamHandler.isLoggable(java.util.logging.LogRecord),check if this handler would actually log a given logrecord.
java.util.logging.StreamHandler.publish(java.util.logging.LogRecord),format and publish a logrecord.
java.util.logging.StreamHandler.setEncoding(java.lang.String),set (or change) the character encoding used by this handler.
java.util.logging.StreamHandler.setOutputStream(java.io.OutputStream),change the output stream.
java.util.logging.XMLFormatter.format(java.util.logging.LogRecord),format the given message to xml.
java.util.logging.XMLFormatter.getHead(java.util.logging.Handler),return the header string for a set of xml formatted records.
java.util.logging.XMLFormatter.getTail(java.util.logging.Handler),return the tail string for a set of xml formatted records.
java.util.prefs.NodeChangeListener.childAdded(java.util.prefs.NodeChangeEvent),this method gets called when a child node is added.
java.util.prefs.NodeChangeListener.childRemoved(java.util.prefs.NodeChangeEvent),this method gets called when a child node is removed.
java.util.prefs.PreferenceChangeListener.preferenceChange(java.util.prefs.PreferenceChangeEvent),"this method gets called when a preference is added, removed or when its value is changed."
java.util.prefs.PreferencesFactory.systemRoot(),returns the system root preference node.
java.util.prefs.PreferencesFactory.userRoot(),returns the user root preference node corresponding to the calling user.
java.util.prefs.AbstractPreferences.absolutePath(),implements the absolutepath method as per the specification in preferences.
java.util.prefs.AbstractPreferences.cachedChildren(),returns all known unremoved children of this node.
java.util.prefs.AbstractPreferences.childrenNames(),implements the children method as per the specification in preferences.
java.util.prefs.AbstractPreferences.childrenNamesSpi(),returns the names of the children of this preference node.
java.util.prefs.AbstractPreferences.childSpi(java.lang.String),"returns the named child of this preference node, creating it if it does not already exist."
java.util.prefs.AbstractPreferences.clear(),implements the clear method as per the specification in preferences.
java.util.prefs.AbstractPreferences.exportNode(java.io.OutputStream),implements the exportnode method as per the specification in preferences.
java.util.prefs.AbstractPreferences.exportSubtree(java.io.OutputStream),implements the exportsubtree method as per the specification in preferences.
java.util.prefs.AbstractPreferences.flush(),implements the flush method as per the specification in preferences.
java.util.prefs.AbstractPreferences.flushSpi(),this method is invoked with this node locked.
"java.util.prefs.AbstractPreferences.get(java.lang.String,java.lang.String)",implements the get method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.getBoolean(java.lang.String,boolean)",implements the getboolean method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.getByteArray(java.lang.String,byte[])",implements the getbytearray method as per the specification in preferences.
java.util.prefs.AbstractPreferences.getChild(java.lang.String),"returns the named child if it exists, or null if it does not."
"java.util.prefs.AbstractPreferences.getDouble(java.lang.String,double)",implements the getdouble method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.getFloat(java.lang.String,float)",implements the getfloat method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.getInt(java.lang.String,int)",implements the getint method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.getLong(java.lang.String,long)",implements the getlong method as per the specification in preferences.
java.util.prefs.AbstractPreferences.getSpi(java.lang.String),"return the value associated with the specified key at this preference node, or null if there is no association for this key, or the association cannot be determined at this time."
java.util.prefs.AbstractPreferences.isRemoved(),returns true iff this node (or an ancestor) has been removed with the removenode() method.
java.util.prefs.AbstractPreferences.isUserNode(),implements the isusernode method as per the specification in preferences.
java.util.prefs.AbstractPreferences.keys(),implements the keys method as per the specification in preferences.
java.util.prefs.AbstractPreferences.keysSpi(),returns all of the keys that have an associated value in this preference node.
java.util.prefs.AbstractPreferences.name(),implements the name method as per the specification in preferences.
java.util.prefs.AbstractPreferences.node(java.lang.String),implements the node method as per the specification in preferences.
java.util.prefs.AbstractPreferences.nodeExists(java.lang.String),implements the nodeexists method as per the specification in preferences.
java.util.prefs.AbstractPreferences.parent(),implements the parent method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.put(java.lang.String,java.lang.String)",implements the put method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.putBoolean(java.lang.String,boolean)",implements the putboolean method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.putByteArray(java.lang.String,byte[])",implements the putbytearray method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.putDouble(java.lang.String,double)",implements the putdouble method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.putFloat(java.lang.String,float)",implements the putfloat method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.putInt(java.lang.String,int)",implements the putint method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.putLong(java.lang.String,long)",implements the putlong method as per the specification in preferences.
"java.util.prefs.AbstractPreferences.putSpi(java.lang.String,java.lang.String)",put the given key-value association into this preference node.
java.util.prefs.AbstractPreferences.remove(java.lang.String),implements the remove(string) method as per the specification in preferences.
java.util.prefs.AbstractPreferences.removeNode(),implements the removenode() method as per the specification in preferences.
java.util.prefs.AbstractPreferences.removeNodeSpi(),"removes this preference node, invalidating it and any preferences that it contains."
java.util.prefs.AbstractPreferences.removeSpi(java.lang.String),remove the association (if any) for the specified key at this preference node.
java.util.prefs.AbstractPreferences.sync(),implements the sync method as per the specification in preferences.
java.util.prefs.AbstractPreferences.syncSpi(),this method is invoked with this node locked.
java.util.prefs.AbstractPreferences.toString(),returns the absolute path name of this preferences node.
java.util.prefs.NodeChangeEvent.getChild(),returns the node that was added or removed.
java.util.prefs.NodeChangeEvent.getParent(),returns the parent of the node that was added or removed.
java.util.prefs.PreferenceChangeEvent.getKey(),returns the key of the preference that was changed.
java.util.prefs.PreferenceChangeEvent.getNewValue(),returns the new value for the preference.
java.util.prefs.PreferenceChangeEvent.getNode(),returns the preference node that emitted the event.
java.util.prefs.Preferences.absolutePath(),returns this preference node's absolute path name.
java.util.prefs.Preferences.addNodeChangeListener(java.util.prefs.NodeChangeListener),registers the specified listener to receive node change events for this node.
java.util.prefs.Preferences.addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener),registers the specified listener to receive preference change events for this preference node.
java.util.prefs.Preferences.childrenNames(),"returns the names of the children of this preference node, relative to this node."
java.util.prefs.Preferences.clear(),removes all of the preferences (key-value associations) in this preference node.
java.util.prefs.Preferences.exportNode(java.io.OutputStream),emits on the specified output stream an xml document representing all of the preferences contained in this node (but not its descendants).
java.util.prefs.Preferences.exportSubtree(java.io.OutputStream),emits an xml document representing all of the preferences contained in this node and all of its descendants.
java.util.prefs.Preferences.flush(),forces any changes in the contents of this preference node and its descendants to the persistent store.
"java.util.prefs.Preferences.get(java.lang.String,java.lang.String)",returns the value associated with the specified key in this preference node.
"java.util.prefs.Preferences.getBoolean(java.lang.String,boolean)",returns the boolean value represented by the string associated with the specified key in this preference node.
"java.util.prefs.Preferences.getByteArray(java.lang.String,byte[])",returns the byte array value represented by the string associated with the specified key in this preference node.
"java.util.prefs.Preferences.getDouble(java.lang.String,double)",returns the double value represented by the string associated with the specified key in this preference node.
"java.util.prefs.Preferences.getFloat(java.lang.String,float)",returns the float value represented by the string associated with the specified key in this preference node.
"java.util.prefs.Preferences.getInt(java.lang.String,int)",returns the int value represented by the string associated with the specified key in this preference node.
"java.util.prefs.Preferences.getLong(java.lang.String,long)",returns the long value represented by the string associated with the specified key in this preference node.
java.util.prefs.Preferences.importPreferences(java.io.InputStream),imports all of the preferences represented by the xml document on the specified input stream.
java.util.prefs.Preferences.isUserNode(),"returns true if this preference node is in the user preference tree, false if it's in the system preference tree."
java.util.prefs.Preferences.keys(),returns all of the keys that have an associated value in this preference node.
java.util.prefs.Preferences.name(),"returns this preference node's name, relative to its parent."
java.util.prefs.Preferences.node(java.lang.String),"returns the named preference node in the same tree as this node, creating it and any of its ancestors if they do not already exist."
java.util.prefs.Preferences.nodeExists(java.lang.String),returns true if the named preference node exists in the same tree as this node.
java.util.prefs.Preferences.parent(),"returns the parent of this preference node, or null if this is the root."
"java.util.prefs.Preferences.put(java.lang.String,java.lang.String)",associates the specified value with the specified key in this preference node.
"java.util.prefs.Preferences.putBoolean(java.lang.String,boolean)",associates a string representing the specified boolean value with the specified key in this preference node.
"java.util.prefs.Preferences.putByteArray(java.lang.String,byte[])",associates a string representing the specified byte array with the specified key in this preference node.
"java.util.prefs.Preferences.putDouble(java.lang.String,double)",associates a string representing the specified double value with the specified key in this preference node.
"java.util.prefs.Preferences.putFloat(java.lang.String,float)",associates a string representing the specified float value with the specified key in this preference node.
"java.util.prefs.Preferences.putInt(java.lang.String,int)",associates a string representing the specified int value with the specified key in this preference node.
"java.util.prefs.Preferences.putLong(java.lang.String,long)",associates a string representing the specified long value with the specified key in this preference node.
java.util.prefs.Preferences.remove(java.lang.String),"removes the value associated with the specified key in this preference node, if any."
java.util.prefs.Preferences.removeNode(),"removes this preference node and all of its descendants, invalidating any preferences contained in the removed nodes."
java.util.prefs.Preferences.removeNodeChangeListener(java.util.prefs.NodeChangeListener),"removes the specified nodechangelistener, so it no longer receives change events."
java.util.prefs.Preferences.removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener),"removes the specified preference change listener, so it no longer receives preference change events."
java.util.prefs.Preferences.sync(),ensures that future reads from this preference node and its descendants reflect any changes that were committed to the persistent store (from any vm) prior to the sync invocation.
java.util.prefs.Preferences.systemNodeForPackage(java.lang.Class<?>),returns the preference node from the system preference tree that is associated (by convention) with the specified class's package.
java.util.prefs.Preferences.systemRoot(),returns the root preference node for the system.
java.util.prefs.Preferences.toString(),"returns a string representation of this preferences node, as if computed by the expression:(this."
java.util.prefs.Preferences.userNodeForPackage(java.lang.Class<?>),returns the preference node from the calling user's preference tree that is associated (by convention) with the specified class's package.
java.util.prefs.Preferences.userRoot(),returns the root preference node for the calling user.
java.util.regex.MatchResult.end(),returns the offset after the last character matched.
java.util.regex.MatchResult.end(int),returns the offset after the last character of the subsequence captured by the given group during this match.
java.util.regex.MatchResult.group(),returns the input subsequence matched by the previous match.
java.util.regex.MatchResult.group(int),returns the input subsequence captured by the given group during the previous match operation.
java.util.regex.MatchResult.groupCount(),returns the number of capturing groups in this match result's pattern.
java.util.regex.MatchResult.start(),returns the start index of the match.
java.util.regex.MatchResult.start(int),returns the start index of the subsequence captured by the given group during this match.
"java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer,java.lang.String)",implements a non-terminal append-and-replace step.
java.util.regex.Matcher.appendTail(java.lang.StringBuffer),implements a terminal append-and-replace step.
java.util.regex.Matcher.end(),returns the offset after the last character matched.
java.util.regex.Matcher.end(int),returns the offset after the last character of the subsequence captured by the given group during the previous match operation.
java.util.regex.Matcher.end(java.lang.String),returns the offset after the last character of the subsequence captured by the given named-capturing group during the previous match operation.
java.util.regex.Matcher.find(),attempts to find the next subsequence of the input sequence that matches the pattern.
java.util.regex.Matcher.find(int),"resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index."
java.util.regex.Matcher.group(),returns the input subsequence matched by the previous match.
java.util.regex.Matcher.group(int),returns the input subsequence captured by the given group during the previous match operation.
java.util.regex.Matcher.group(java.lang.String),returns the input subsequence captured by the given named-capturing group during the previous match operation.
java.util.regex.Matcher.groupCount(),returns the number of capturing groups in this matcher's pattern.
java.util.regex.Matcher.hasAnchoringBounds(),queries the anchoring of region bounds for this matcher.
java.util.regex.Matcher.hasTransparentBounds(),queries the transparency of region bounds for this matcher.
java.util.regex.Matcher.hitEnd(),returns true if the end of input was hit by the search engine in the last match operation performed by this matcher.
java.util.regex.Matcher.lookingAt(),"attempts to match the input sequence, starting at the beginning of the region, against the pattern."
java.util.regex.Matcher.matches(),attempts to match the entire region against the pattern.
java.util.regex.Matcher.pattern(),returns the pattern that is interpreted by this matcher.
java.util.regex.Matcher.quoteReplacement(java.lang.String),returns a literal replacement string for the specified string.
"java.util.regex.Matcher.region(int,int)",sets the limits of this matcher's region.
java.util.regex.Matcher.regionEnd(),reports the end index (exclusive) of this matcher's region.
java.util.regex.Matcher.regionStart(),reports the start index of this matcher's region.
java.util.regex.Matcher.replaceAll(java.lang.String),replaces every subsequence of the input sequence that matches the pattern with the given replacement string.
java.util.regex.Matcher.replaceFirst(java.lang.String),replaces the first subsequence of the input sequence that matches the pattern with the given replacement string.
java.util.regex.Matcher.requireEnd(),returns true if more input could change a positive match into a negative one.
java.util.regex.Matcher.reset(),resets this matcher.
java.util.regex.Matcher.reset(java.lang.CharSequence),resets this matcher with a new input sequence.
java.util.regex.Matcher.start(),returns the start index of the previous match.
java.util.regex.Matcher.start(int),returns the start index of the subsequence captured by the given group during the previous match operation.
java.util.regex.Matcher.start(java.lang.String),returns the start index of the subsequence captured by the given named-capturing group during the previous match operation.
java.util.regex.Matcher.toMatchResult(),returns the match state of this matcher as a matchresult.
java.util.regex.Matcher.toString(),returns the string representation of this matcher.
java.util.regex.Matcher.useAnchoringBounds(boolean),sets the anchoring of region bounds for this matcher.
java.util.regex.Matcher.usePattern(java.util.regex.Pattern),changes the pattern that this matcher uses to find matches with.
java.util.regex.Matcher.useTransparentBounds(boolean),sets the transparency of region bounds for this matcher.
java.util.regex.Pattern.asPredicate(),creates a predicate which can be used to match a string.
java.util.regex.Pattern.compile(java.lang.String),compiles the given regular expression into a pattern.
"java.util.regex.Pattern.compile(java.lang.String,int)",compiles the given regular expression into a pattern with the given flags.
java.util.regex.Pattern.flags(),returns this pattern's match flags.
java.util.regex.Pattern.matcher(java.lang.CharSequence),creates a matcher that will match the given input against this pattern.
"java.util.regex.Pattern.matches(java.lang.String,java.lang.CharSequence)",compiles the given regular expression and attempts to match the given input against it.
java.util.regex.Pattern.pattern(),returns the regular expression from which this pattern was compiled.
java.util.regex.Pattern.quote(java.lang.String),returns a literal pattern string for the specified string.
"java.util.regex.Pattern.split(java.lang.CharSequence,int)",splits the given input sequence around matches of this pattern.
java.util.regex.Pattern.split(java.lang.CharSequence),splits the given input sequence around matches of this pattern.
java.util.regex.Pattern.splitAsStream(java.lang.CharSequence),creates a stream from the given input sequence around matches of this pattern.
java.util.regex.Pattern.toString(),returns the string representation of this pattern.
java.util.regex.PatternSyntaxException.getDescription(),retrieves the description of the error.
java.util.regex.PatternSyntaxException.getIndex(),retrieves the error index.
java.util.regex.PatternSyntaxException.getMessage(),"returns a multi-line string containing the description of the syntax error and its index, the erroneous regular-expression pattern, and a visual indication of the error index within the pattern."
java.util.regex.PatternSyntaxException.getPattern(),retrieves the erroneous regular-expression pattern.
java.util.spi.ResourceBundleControlProvider.getControl(java.lang.String),returns a resourcebundle.
java.util.spi.CalendarDataProvider.getFirstDayOfWeek(java.util.Locale),returns the first day of a week in the given locale.
java.util.spi.CalendarDataProvider.getMinimalDaysInFirstWeek(java.util.Locale),returns the minimal number of days required in the first week of a year.
"java.util.spi.CalendarNameProvider.getDisplayName(java.lang.String,int,int,int,java.util.Locale)",returns the string representation (display name) of the calendar field value in the given style and locale.
"java.util.spi.CalendarNameProvider.getDisplayNames(java.lang.String,int,int,java.util.Locale)",returns a map containing all string representations (display names) of the calendar field in the given style and locale and their corresponding field values.
"java.util.spi.CurrencyNameProvider.getDisplayName(java.lang.String,java.util.Locale)",returns a name for the currency that is appropriate for display to the user.
"java.util.spi.CurrencyNameProvider.getSymbol(java.lang.String,java.util.Locale)",gets the symbol of the given currency code for the specified locale.
"java.util.spi.LocaleNameProvider.getDisplayCountry(java.lang.String,java.util.Locale)",returns a localized name for the given ietf bcp47 region code (either iso 3166 country code or un m.
"java.util.spi.LocaleNameProvider.getDisplayLanguage(java.lang.String,java.util.Locale)",returns a localized name for the given ietf bcp47 language code and the given locale that is appropriate for display to the user.
"java.util.spi.LocaleNameProvider.getDisplayScript(java.lang.String,java.util.Locale)",returns a localized name for the given ietf bcp47 script code and the given locale that is appropriate for display to the user.
"java.util.spi.LocaleNameProvider.getDisplayVariant(java.lang.String,java.util.Locale)",returns a localized name for the given variant code and the given locale that is appropriate for display to the user.
java.util.spi.LocaleServiceProvider.getAvailableLocales(),returns an array of all locales for which this locale service provider can provide localized objects or names.
java.util.spi.LocaleServiceProvider.isSupportedLocale(java.util.Locale),returns true if the given locale is supported by this locale service provider.
"java.util.spi.TimeZoneNameProvider.getDisplayName(java.lang.String,boolean,int,java.util.Locale)",returns a name for the given time zone id that's suitable for presentation to the user in the specified locale.
"java.util.spi.TimeZoneNameProvider.getGenericDisplayName(java.lang.String,int,java.util.Locale)",returns a generic name for the given time zone id that's suitable for presentation to the user in the specified locale.
java.util.stream.BaseStream.close(),"closes this stream, causing all close handlers for this stream pipeline to be called."
java.util.stream.BaseStream.isParallel(),"returns whether this stream, if a terminal operation were to be executed, would execute in parallel."
java.util.stream.BaseStream.iterator(),returns an iterator for the elements of this stream.
java.util.stream.BaseStream.onClose(java.lang.Runnable),returns an equivalent stream with an additional close handler.
java.util.stream.BaseStream.parallel(),returns an equivalent stream that is parallel.
java.util.stream.BaseStream.sequential(),returns an equivalent stream that is sequential.
java.util.stream.BaseStream.spliterator(),returns a spliterator for the elements of this stream.
java.util.stream.BaseStream.unordered(),returns an equivalent stream that is unordered.
java.util.stream.Collector.accumulator(),a function that folds a value into a mutable result container.
java.util.stream.Collector.characteristics(),returns a set of collector.
java.util.stream.Collector.combiner(),a function that accepts two partial results and merges them.
java.util.stream.Collector.finisher(),perform the final transformation from the intermediate accumulation type a to the final result type r.
"java.util.stream.Collector.of(java.util.function.Supplier<R>,,T>,java.util.function.BinaryOperator<R>,java.util.stream.Collector.Characteristics...)","returns a new collector described by the given supplier, accumulator, and combiner functions."
"java.util.stream.Collector.of(java.util.function.Supplier<A>,,T>,java.util.function.BinaryOperator<A>,,R>,java.util.stream.Collector.Characteristics...)","returns a new collector described by the given supplier, accumulator, combiner, and finisher functions."
java.util.stream.Collector.supplier(),a function that creates and returns a new mutable result container.
java.util.stream.DoubleStream.allMatch(java.util.function.DoublePredicate),returns whether all elements of this stream match the provided predicate.
java.util.stream.DoubleStream.anyMatch(java.util.function.DoublePredicate),returns whether any elements of this stream match the provided predicate.
java.util.stream.DoubleStream.average(),"returns an optionaldouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty."
java.util.stream.DoubleStream.boxed(),"returns a stream consisting of the elements of this stream, boxed to double."
java.util.stream.DoubleStream.builder(),returns a builder for a doublestream.
"java.util.stream.DoubleStream.collect(java.util.function.Supplier<R>,java.util.function.ObjDoubleConsumer<R>,,R>)",performs a mutable reduction operation on the elements of this stream.
"java.util.stream.DoubleStream.concat(java.util.stream.DoubleStream,java.util.stream.DoubleStream)",creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream.
java.util.stream.DoubleStream.count(),returns the count of elements in this stream.
java.util.stream.DoubleStream.distinct(),returns a stream consisting of the distinct elements of this stream.
java.util.stream.DoubleStream.empty(),returns an empty sequential doublestream.
java.util.stream.DoubleStream.filter(java.util.function.DoublePredicate),returns a stream consisting of the elements of this stream that match the given predicate.
java.util.stream.DoubleStream.findAny(),"returns an optionaldouble describing some element of the stream, or an empty optionaldouble if the stream is empty."
java.util.stream.DoubleStream.findFirst(),"returns an optionaldouble describing the first element of this stream, or an empty optionaldouble if the stream is empty."
java.util.stream.DoubleStream.flatMap(java.util.function.DoubleFunction<? extends java.util.stream.DoubleStream>),returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.
java.util.stream.DoubleStream.forEach(java.util.function.DoubleConsumer),performs an action for each element of this stream.
java.util.stream.DoubleStream.forEachOrdered(java.util.function.DoubleConsumer),"performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order."
java.util.stream.DoubleStream.generate(java.util.function.DoubleSupplier),returns an infinite sequential unordered stream where each element is generated by the provided doublesupplier.
"java.util.stream.DoubleStream.iterate(double,java.util.function.DoubleUnaryOperator)","returns an infinite sequential ordered doublestream produced by iterative application of a function f to an initial element seed, producing a stream consisting of seed, f(seed), f(f(seed)), etc."
java.util.stream.DoubleStream.limit(long),"returns a stream consisting of the elements of this stream, truncated to be no longer than maxsize in length."
java.util.stream.DoubleStream.map(java.util.function.DoubleUnaryOperator),returns a stream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.DoubleStream.mapToInt(java.util.function.DoubleToIntFunction),returns an intstream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.DoubleStream.mapToLong(java.util.function.DoubleToLongFunction),returns a longstream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.DoubleStream.mapToObj(java.util.function.DoubleFunction<? extends U>),returns an object-valued stream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.DoubleStream.max(),"returns an optionaldouble describing the maximum element of this stream, or an empty optionaldouble if this stream is empty."
java.util.stream.DoubleStream.min(),"returns an optionaldouble describing the minimum element of this stream, or an empty optionaldouble if this stream is empty."
java.util.stream.DoubleStream.noneMatch(java.util.function.DoublePredicate),returns whether no elements of this stream match the provided predicate.
java.util.stream.DoubleStream.of(double),returns a sequential doublestream containing a single element.
java.util.stream.DoubleStream.of(double...),returns a sequential ordered stream whose elements are the specified values.
java.util.stream.DoubleStream.peek(java.util.function.DoubleConsumer),"returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream."
"java.util.stream.DoubleStream.reduce(double,java.util.function.DoubleBinaryOperator)","performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value."
java.util.stream.DoubleStream.reduce(java.util.function.DoubleBinaryOperator),"performs a reduction on the elements of this stream, using an associative accumulation function, and returns an optionaldouble describing the reduced value, if any."
java.util.stream.DoubleStream.skip(long),returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream.
java.util.stream.DoubleStream.sorted(),returns a stream consisting of the elements of this stream in sorted order.
java.util.stream.DoubleStream.sum(),returns the sum of elements in this stream.
java.util.stream.DoubleStream.summaryStatistics(),returns a doublesummarystatistics describing various summary data about the elements of this stream.
java.util.stream.DoubleStream.toArray(),returns an array containing the elements of this stream.
java.util.stream.DoubleStream.Builder.accept(double),adds an element to the stream being built.
java.util.stream.DoubleStream.Builder.add(double),adds an element to the stream being built.
java.util.stream.DoubleStream.Builder.build(),"builds the stream, transitioning this builder to the built state."
java.util.stream.IntStream.allMatch(java.util.function.IntPredicate),returns whether all elements of this stream match the provided predicate.
java.util.stream.IntStream.anyMatch(java.util.function.IntPredicate),returns whether any elements of this stream match the provided predicate.
java.util.stream.IntStream.asDoubleStream(),"returns a doublestream consisting of the elements of this stream, converted to double."
java.util.stream.IntStream.asLongStream(),"returns a longstream consisting of the elements of this stream, converted to long."
java.util.stream.IntStream.average(),"returns an optionaldouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty."
java.util.stream.IntStream.boxed(),"returns a stream consisting of the elements of this stream, each boxed to an integer."
java.util.stream.IntStream.builder(),returns a builder for an intstream.
"java.util.stream.IntStream.collect(java.util.function.Supplier<R>,java.util.function.ObjIntConsumer<R>,,R>)",performs a mutable reduction operation on the elements of this stream.
"java.util.stream.IntStream.concat(java.util.stream.IntStream,java.util.stream.IntStream)",creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream.
java.util.stream.IntStream.count(),returns the count of elements in this stream.
java.util.stream.IntStream.distinct(),returns a stream consisting of the distinct elements of this stream.
java.util.stream.IntStream.empty(),returns an empty sequential intstream.
java.util.stream.IntStream.filter(java.util.function.IntPredicate),returns a stream consisting of the elements of this stream that match the given predicate.
java.util.stream.IntStream.findAny(),"returns an optionalint describing some element of the stream, or an empty optionalint if the stream is empty."
java.util.stream.IntStream.findFirst(),"returns an optionalint describing the first element of this stream, or an empty optionalint if the stream is empty."
java.util.stream.IntStream.flatMap(java.util.function.IntFunction<? extends java.util.stream.IntStream>),returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.
java.util.stream.IntStream.forEach(java.util.function.IntConsumer),performs an action for each element of this stream.
java.util.stream.IntStream.forEachOrdered(java.util.function.IntConsumer),"performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order."
java.util.stream.IntStream.generate(java.util.function.IntSupplier),returns an infinite sequential unordered stream where each element is generated by the provided intsupplier.
"java.util.stream.IntStream.iterate(int,java.util.function.IntUnaryOperator)","returns an infinite sequential ordered intstream produced by iterative application of a function f to an initial element seed, producing a stream consisting of seed, f(seed), f(f(seed)), etc."
java.util.stream.IntStream.limit(long),"returns a stream consisting of the elements of this stream, truncated to be no longer than maxsize in length."
java.util.stream.IntStream.map(java.util.function.IntUnaryOperator),returns a stream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.IntStream.mapToDouble(java.util.function.IntToDoubleFunction),returns a doublestream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.IntStream.mapToLong(java.util.function.IntToLongFunction),returns a longstream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.IntStream.mapToObj(java.util.function.IntFunction<? extends U>),returns an object-valued stream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.IntStream.max(),"returns an optionalint describing the maximum element of this stream, or an empty optional if this stream is empty."
java.util.stream.IntStream.min(),"returns an optionalint describing the minimum element of this stream, or an empty optional if this stream is empty."
java.util.stream.IntStream.noneMatch(java.util.function.IntPredicate),returns whether no elements of this stream match the provided predicate.
java.util.stream.IntStream.of(int),returns a sequential intstream containing a single element.
java.util.stream.IntStream.of(int...),returns a sequential ordered stream whose elements are the specified values.
java.util.stream.IntStream.peek(java.util.function.IntConsumer),"returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream."
"java.util.stream.IntStream.range(int,int)",returns a sequential ordered intstream from startinclusive (inclusive) to endexclusive (exclusive) by an incremental step of 1.
"java.util.stream.IntStream.rangeClosed(int,int)",returns a sequential ordered intstream from startinclusive (inclusive) to endinclusive (inclusive) by an incremental step of 1.
"java.util.stream.IntStream.reduce(int,java.util.function.IntBinaryOperator)","performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value."
java.util.stream.IntStream.reduce(java.util.function.IntBinaryOperator),"performs a reduction on the elements of this stream, using an associative accumulation function, and returns an optionalint describing the reduced value, if any."
java.util.stream.IntStream.skip(long),returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream.
java.util.stream.IntStream.sorted(),returns a stream consisting of the elements of this stream in sorted order.
java.util.stream.IntStream.sum(),returns the sum of elements in this stream.
java.util.stream.IntStream.summaryStatistics(),returns an intsummarystatistics describing various summary data about the elements of this stream.
java.util.stream.IntStream.toArray(),returns an array containing the elements of this stream.
java.util.stream.IntStream.Builder.accept(int),adds an element to the stream being built.
java.util.stream.IntStream.Builder.add(int),adds an element to the stream being built.
java.util.stream.IntStream.Builder.build(),"builds the stream, transitioning this builder to the built state."
java.util.stream.LongStream.allMatch(java.util.function.LongPredicate),returns whether all elements of this stream match the provided predicate.
java.util.stream.LongStream.anyMatch(java.util.function.LongPredicate),returns whether any elements of this stream match the provided predicate.
java.util.stream.LongStream.asDoubleStream(),"returns a doublestream consisting of the elements of this stream, converted to double."
java.util.stream.LongStream.average(),"returns an optionaldouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty."
java.util.stream.LongStream.boxed(),"returns a stream consisting of the elements of this stream, each boxed to a long."
java.util.stream.LongStream.builder(),returns a builder for a longstream.
"java.util.stream.LongStream.collect(java.util.function.Supplier<R>,java.util.function.ObjLongConsumer<R>,,R>)",performs a mutable reduction operation on the elements of this stream.
"java.util.stream.LongStream.concat(java.util.stream.LongStream,java.util.stream.LongStream)",creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream.
java.util.stream.LongStream.count(),returns the count of elements in this stream.
java.util.stream.LongStream.distinct(),returns a stream consisting of the distinct elements of this stream.
java.util.stream.LongStream.empty(),returns an empty sequential longstream.
java.util.stream.LongStream.filter(java.util.function.LongPredicate),returns a stream consisting of the elements of this stream that match the given predicate.
java.util.stream.LongStream.findAny(),"returns an optionallong describing some element of the stream, or an empty optionallong if the stream is empty."
java.util.stream.LongStream.findFirst(),"returns an optionallong describing the first element of this stream, or an empty optionallong if the stream is empty."
java.util.stream.LongStream.flatMap(java.util.function.LongFunction<? extends java.util.stream.LongStream>),returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.
java.util.stream.LongStream.forEach(java.util.function.LongConsumer),performs an action for each element of this stream.
java.util.stream.LongStream.forEachOrdered(java.util.function.LongConsumer),"performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order."
java.util.stream.LongStream.generate(java.util.function.LongSupplier),returns an infinite sequential unordered stream where each element is generated by the provided longsupplier.
"java.util.stream.LongStream.iterate(long,java.util.function.LongUnaryOperator)","returns an infinite sequential ordered longstream produced by iterative application of a function f to an initial element seed, producing a stream consisting of seed, f(seed), f(f(seed)), etc."
java.util.stream.LongStream.limit(long),"returns a stream consisting of the elements of this stream, truncated to be no longer than maxsize in length."
java.util.stream.LongStream.map(java.util.function.LongUnaryOperator),returns a stream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.LongStream.mapToDouble(java.util.function.LongToDoubleFunction),returns a doublestream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.LongStream.mapToInt(java.util.function.LongToIntFunction),returns an intstream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.LongStream.mapToObj(java.util.function.LongFunction<? extends U>),returns an object-valued stream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.LongStream.max(),"returns an optionallong describing the maximum element of this stream, or an empty optional if this stream is empty."
java.util.stream.LongStream.min(),"returns an optionallong describing the minimum element of this stream, or an empty optional if this stream is empty."
java.util.stream.LongStream.noneMatch(java.util.function.LongPredicate),returns whether no elements of this stream match the provided predicate.
java.util.stream.LongStream.of(long),returns a sequential longstream containing a single element.
java.util.stream.LongStream.of(long...),returns a sequential ordered stream whose elements are the specified values.
java.util.stream.LongStream.peek(java.util.function.LongConsumer),"returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream."
"java.util.stream.LongStream.range(long,long)",returns a sequential ordered longstream from startinclusive (inclusive) to endexclusive (exclusive) by an incremental step of 1.
"java.util.stream.LongStream.rangeClosed(long,long)",returns a sequential ordered longstream from startinclusive (inclusive) to endinclusive (inclusive) by an incremental step of 1.
"java.util.stream.LongStream.reduce(long,java.util.function.LongBinaryOperator)","performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value."
java.util.stream.LongStream.reduce(java.util.function.LongBinaryOperator),"performs a reduction on the elements of this stream, using an associative accumulation function, and returns an optionallong describing the reduced value, if any."
java.util.stream.LongStream.skip(long),returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream.
java.util.stream.LongStream.sorted(),returns a stream consisting of the elements of this stream in sorted order.
java.util.stream.LongStream.sum(),returns the sum of elements in this stream.
java.util.stream.LongStream.summaryStatistics(),returns a longsummarystatistics describing various summary data about the elements of this stream.
java.util.stream.LongStream.toArray(),returns an array containing the elements of this stream.
java.util.stream.LongStream.Builder.accept(long),adds an element to the stream being built.
java.util.stream.LongStream.Builder.add(long),adds an element to the stream being built.
java.util.stream.LongStream.Builder.build(),"builds the stream, transitioning this builder to the built state."
java.util.stream.Stream.allMatch(java.util.function.Predicate<? super java.util.stream.Stream>),returns whether all elements of this stream match the provided predicate.
java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super java.util.stream.Stream>),returns whether any elements of this stream match the provided predicate.
java.util.stream.Stream.builder(),returns a builder for a stream.
"java.util.stream.Stream.collect(java.util.function.Supplier<R>,,? super java.util.stream.Stream>,,R>)",performs a mutable reduction operation on the elements of this stream.
"java.util.stream.Stream.collect(java.util.stream.Collector<? super,,R>)",performs a mutable reduction operation on the elements of this stream using a collector.
"java.util.stream.Stream.concat(java.util.stream.Stream<? extends T>,java.util.stream.Stream<? extends T>)",creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream.
java.util.stream.Stream.count(),returns the count of elements in this stream.
java.util.stream.Stream.distinct(),returns a stream consisting of the distinct elements (according to object.
java.util.stream.Stream.empty(),returns an empty sequential stream.
java.util.stream.Stream.filter(java.util.function.Predicate<? super java.util.stream.Stream>),returns a stream consisting of the elements of this stream that match the given predicate.
java.util.stream.Stream.findAny(),"returns an optional describing some element of the stream, or an empty optional if the stream is empty."
java.util.stream.Stream.findFirst(),"returns an optional describing the first element of this stream, or an empty optional if the stream is empty."
"java.util.stream.Stream.flatMap(java.util.function.Function<? super,? extends java.util.stream.Stream<? extends R>>)",returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.
"java.util.stream.Stream.flatMapToDouble(java.util.function.Function<? super,? extends java.util.stream.DoubleStream>)",returns an doublestream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.
"java.util.stream.Stream.flatMapToInt(java.util.function.Function<? super,? extends java.util.stream.IntStream>)",returns an intstream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.
"java.util.stream.Stream.flatMapToLong(java.util.function.Function<? super,? extends java.util.stream.LongStream>)",returns an longstream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.
java.util.stream.Stream.forEach(java.util.function.Consumer<? super java.util.stream.Stream>),performs an action for each element of this stream.
java.util.stream.Stream.forEachOrdered(java.util.function.Consumer<? super java.util.stream.Stream>),"performs an action for each element of this stream, in the encounter order of the stream if the stream has a defined encounter order."
java.util.stream.Stream.generate(java.util.function.Supplier<T>),returns an infinite sequential unordered stream where each element is generated by the provided supplier.
"java.util.stream.Stream.iterate(T,java.util.function.UnaryOperator<T>)","returns an infinite sequential ordered stream produced by iterative application of a function f to an initial element seed, producing a stream consisting of seed, f(seed), f(f(seed)), etc."
java.util.stream.Stream.limit(long),"returns a stream consisting of the elements of this stream, truncated to be no longer than maxsize in length."
"java.util.stream.Stream.map(java.util.function.Function<? super,? extends R>)",returns a stream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.Stream.mapToDouble(java.util.function.ToDoubleFunction<? super java.util.stream.Stream>),returns a doublestream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.Stream.mapToInt(java.util.function.ToIntFunction<? super java.util.stream.Stream>),returns an intstream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.Stream.mapToLong(java.util.function.ToLongFunction<? super java.util.stream.Stream>),returns a longstream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.Stream.max(java.util.Comparator<? super java.util.stream.Stream>),returns the maximum element of this stream according to the provided comparator.
java.util.stream.Stream.min(java.util.Comparator<? super java.util.stream.Stream>),returns the minimum element of this stream according to the provided comparator.
java.util.stream.Stream.noneMatch(java.util.function.Predicate<? super java.util.stream.Stream>),returns whether no elements of this stream match the provided predicate.
java.util.stream.Stream.of(T),returns a sequential stream containing a single element.
java.util.stream.Stream.of(T...),returns a sequential ordered stream whose elements are the specified values.
java.util.stream.Stream.peek(java.util.function.Consumer<? super java.util.stream.Stream>),"returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream."
"java.util.stream.Stream.reduce(java.util.stream.Stream,java.util.function.BinaryOperator<java.util.stream.Stream>)","performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value."
java.util.stream.Stream.reduce(java.util.function.BinaryOperator<java.util.stream.Stream>),"performs a reduction on the elements of this stream, using an associative accumulation function, and returns an optional describing the reduced value, if any."
"java.util.stream.Stream.reduce(U,,? super,U>,java.util.function.BinaryOperator<U>)","performs a reduction on the elements of this stream, using the provided identity, accumulation and combining functions."
java.util.stream.Stream.skip(long),returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream.
java.util.stream.Stream.sorted(),"returns a stream consisting of the elements of this stream, sorted according to natural order."
java.util.stream.Stream.sorted(java.util.Comparator<? super java.util.stream.Stream>),"returns a stream consisting of the elements of this stream, sorted according to the provided comparator."
java.util.stream.Stream.toArray(),returns an array containing the elements of this stream.
java.util.stream.Stream.toArray(java.util.function.IntFunction<A[]>),"returns an array containing the elements of this stream, using the provided generator function to allocate the returned array, as well as any additional arrays that might be required for a partitioned execution or for resizing."
java.util.stream.Stream.Builder.accept(java.util.stream.Stream.Builder),adds an element to the stream being built.
java.util.stream.Stream.Builder.add(java.util.stream.Stream.Builder),adds an element to the stream being built.
java.util.stream.Stream.Builder.build(),"builds the stream, transitioning this builder to the built state."
java.util.stream.Collectors.averagingDouble(java.util.function.ToDoubleFunction<? super T>),returns a collector that produces the arithmetic mean of a double-valued function applied to the input elements.
java.util.stream.Collectors.averagingInt(java.util.function.ToIntFunction<? super T>),returns a collector that produces the arithmetic mean of an integer-valued function applied to the input elements.
java.util.stream.Collectors.averagingLong(java.util.function.ToLongFunction<? super T>),returns a collector that produces the arithmetic mean of a long-valued function applied to the input elements.
"java.util.stream.Collectors.collectingAndThen(,,R>,,RR>)",adapts a collector to perform an additional finishing transformation.
java.util.stream.Collectors.counting(),returns a collector accepting elements of type t that counts the number of input elements.
"java.util.stream.Collectors.groupingBy(java.util.function.Function<? super,? extends K>)","returns a collector implementing a ""group by"" operation on input elements of type t, grouping elements according to a classification function, and returning the results in a map."
"java.util.stream.Collectors.groupingBy(java.util.function.Function<? super,? extends K>,java.util.stream.Collector<? super,,D>)","returns a collector implementing a cascaded ""group by"" operation on input elements of type t, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream collector."
"java.util.stream.Collectors.groupingBy(java.util.function.Function<? super,? extends K>,java.util.function.Supplier<M>,java.util.stream.Collector<? super,,D>)","returns a collector implementing a cascaded ""group by"" operation on input elements of type t, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream collector."
"java.util.stream.Collectors.groupingByConcurrent(java.util.function.Function<? super,? extends K>)","returns a concurrent collector implementing a ""group by"" operation on input elements of type t, grouping elements according to a classification function."
"java.util.stream.Collectors.groupingByConcurrent(java.util.function.Function<? super,? extends K>,java.util.stream.Collector<? super,,D>)","returns a concurrent collector implementing a cascaded ""group by"" operation on input elements of type t, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream collector."
"java.util.stream.Collectors.groupingByConcurrent(java.util.function.Function<? super,? extends K>,java.util.function.Supplier<M>,java.util.stream.Collector<? super,,D>)","returns a concurrent collector implementing a cascaded ""group by"" operation on input elements of type t, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream collector."
java.util.stream.Collectors.joining(),"returns a collector that concatenates the input elements into a string, in encounter order."
java.util.stream.Collectors.joining(java.lang.CharSequence),"returns a collector that concatenates the input elements, separated by the specified delimiter, in encounter order."
"java.util.stream.Collectors.joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)","returns a collector that concatenates the input elements, separated by the specified delimiter, with the specified prefix and suffix, in encounter order."
"java.util.stream.Collectors.mapping(java.util.function.Function<? super,? extends U>,java.util.stream.Collector<? super,,R>)",adapts a collector accepting elements of type u to one accepting elements of type t by applying a mapping function to each input element before accumulation.
java.util.stream.Collectors.maxBy(java.util.Comparator<? super T>),"returns a collector that produces the maximal element according to a given comparator, described as an optional<t>."
java.util.stream.Collectors.minBy(java.util.Comparator<? super T>),"returns a collector that produces the minimal element according to a given comparator, described as an optional<t>."
java.util.stream.Collectors.partitioningBy(java.util.function.Predicate<? super T>),"returns a collector which partitions the input elements according to a predicate, and organizes them into a map<boolean, list<t>>."
"java.util.stream.Collectors.partitioningBy(java.util.function.Predicate<? super T>,java.util.stream.Collector<? super,,D>)","returns a collector which partitions the input elements according to a predicate, reduces the values in each partition according to another collector, and organizes them into a map<boolean, d> whose values are the result of the downstream reduction."
"java.util.stream.Collectors.reducing(T,java.util.function.BinaryOperator<T>)",returns a collector which performs a reduction of its input elements under a specified binaryoperator using the provided identity.
java.util.stream.Collectors.reducing(java.util.function.BinaryOperator<T>),returns a collector which performs a reduction of its input elements under a specified binaryoperator.
"java.util.stream.Collectors.reducing(U,java.util.function.Function<? super,? extends U>,java.util.function.BinaryOperator<U>)",returns a collector which performs a reduction of its input elements under a specified mapping function and binaryoperator.
java.util.stream.Collectors.summarizingDouble(java.util.function.ToDoubleFunction<? super T>),"returns a collector which applies an double-producing mapping function to each input element, and returns summary statistics for the resulting values."
java.util.stream.Collectors.summarizingInt(java.util.function.ToIntFunction<? super T>),"returns a collector which applies an int-producing mapping function to each input element, and returns summary statistics for the resulting values."
java.util.stream.Collectors.summarizingLong(java.util.function.ToLongFunction<? super T>),"returns a collector which applies an long-producing mapping function to each input element, and returns summary statistics for the resulting values."
java.util.stream.Collectors.summingDouble(java.util.function.ToDoubleFunction<? super T>),returns a collector that produces the sum of a double-valued function applied to the input elements.
java.util.stream.Collectors.summingInt(java.util.function.ToIntFunction<? super T>),returns a collector that produces the sum of a integer-valued function applied to the input elements.
java.util.stream.Collectors.summingLong(java.util.function.ToLongFunction<? super T>),returns a collector that produces the sum of a long-valued function applied to the input elements.
java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>),"returns a collector that accumulates the input elements into a new collection, in encounter order."
"java.util.stream.Collectors.toConcurrentMap(java.util.function.Function<? super,? extends K>,java.util.function.Function<? super,? extends U>)",returns a concurrent collector that accumulates elements into a concurrentmap whose keys and values are the result of applying the provided mapping functions to the input elements.
"java.util.stream.Collectors.toConcurrentMap(java.util.function.Function<? super,? extends K>,java.util.function.Function<? super,? extends U>,java.util.function.BinaryOperator<U>)",returns a concurrent collector that accumulates elements into a concurrentmap whose keys and values are the result of applying the provided mapping functions to the input elements.
"java.util.stream.Collectors.toConcurrentMap(java.util.function.Function<? super,? extends K>,java.util.function.Function<? super,? extends U>,java.util.function.BinaryOperator<U>,java.util.function.Supplier<M>)",returns a concurrent collector that accumulates elements into a concurrentmap whose keys and values are the result of applying the provided mapping functions to the input elements.
java.util.stream.Collectors.toList(),returns a collector that accumulates the input elements into a new list.
"java.util.stream.Collectors.toMap(java.util.function.Function<? super,? extends K>,java.util.function.Function<? super,? extends U>)",returns a collector that accumulates elements into a map whose keys and values are the result of applying the provided mapping functions to the input elements.
"java.util.stream.Collectors.toMap(java.util.function.Function<? super,? extends K>,java.util.function.Function<? super,? extends U>,java.util.function.BinaryOperator<U>)",returns a collector that accumulates elements into a map whose keys and values are the result of applying the provided mapping functions to the input elements.
"java.util.stream.Collectors.toMap(java.util.function.Function<? super,? extends K>,java.util.function.Function<? super,? extends U>,java.util.function.BinaryOperator<U>,java.util.function.Supplier<M>)",returns a collector that accumulates elements into a map whose keys and values are the result of applying the provided mapping functions to the input elements.
java.util.stream.Collectors.toSet(),returns a collector that accumulates the input elements into a new set.
"java.util.stream.StreamSupport.doubleStream(java.util.Spliterator.OfDouble,boolean)",creates a new sequential or parallel doublestream from a spliterator.
"java.util.stream.StreamSupport.doubleStream(java.util.function.Supplier<? extends java.util.Spliterator.OfDouble>,int,boolean)",creates a new sequential or parallel doublestream from a supplier of spliterator.
"java.util.stream.StreamSupport.intStream(java.util.Spliterator.OfInt,boolean)",creates a new sequential or parallel intstream from a spliterator.
"java.util.stream.StreamSupport.intStream(java.util.function.Supplier<? extends java.util.Spliterator.OfInt>,int,boolean)",creates a new sequential or parallel intstream from a supplier of spliterator.
"java.util.stream.StreamSupport.longStream(java.util.Spliterator.OfLong,boolean)",creates a new sequential or parallel longstream from a spliterator.
"java.util.stream.StreamSupport.longStream(java.util.function.Supplier<? extends java.util.Spliterator.OfLong>,int,boolean)",creates a new sequential or parallel longstream from a supplier of spliterator.
"java.util.stream.StreamSupport.stream(java.util.Spliterator<T>,boolean)",creates a new sequential or parallel stream from a spliterator.
"java.util.stream.StreamSupport.stream(java.util.function.Supplier<? extends java.util.Spliterator<T>>,int,boolean)",creates a new sequential or parallel stream from a supplier of spliterator.
java.util.stream.Collector.Characteristics.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
java.util.stream.Collector.Characteristics.values(),"returns an array containing the constants of this enum type, in the order they are declared."
java.util.zip.Checksum.getValue(),returns the current checksum value.
java.util.zip.Checksum.reset(),resets the checksum to its initial value.
java.util.zip.Checksum.update(int),updates the current checksum with the specified byte.
"java.util.zip.Checksum.update(byte[],int,int)",updates the current checksum with the specified array of bytes.
java.util.zip.Adler32.getValue(),returns the checksum value.
java.util.zip.Adler32.reset(),resets the checksum to initial value.
java.util.zip.Adler32.update(int),updates the checksum with the specified byte (the low eight bits of the argument b).
"java.util.zip.Adler32.update(byte[],int,int)",updates the checksum with the specified array of bytes.
java.util.zip.Adler32.update(byte[]),updates the checksum with the specified array of bytes.
java.util.zip.Adler32.update(java.nio.ByteBuffer),updates the checksum with the bytes from the specified buffer.
java.util.zip.CheckedInputStream.getChecksum(),returns the checksum for this input stream.
java.util.zip.CheckedInputStream.read(),reads a byte.
"java.util.zip.CheckedInputStream.read(byte[],int,int)",reads into an array of bytes.
java.util.zip.CheckedInputStream.skip(long),skips specified number of bytes of input.
java.util.zip.CheckedOutputStream.getChecksum(),returns the checksum for this output stream.
java.util.zip.CheckedOutputStream.write(int),writes a byte.
"java.util.zip.CheckedOutputStream.write(byte[],int,int)",writes an array of bytes.
java.util.zip.CRC32.getValue(),returns crc-32 value.
java.util.zip.CRC32.reset(),resets crc-32 to initial value.
java.util.zip.CRC32.update(int),updates the crc-32 checksum with the specified byte (the low eight bits of the argument b).
"java.util.zip.CRC32.update(byte[],int,int)",updates the crc-32 checksum with the specified array of bytes.
java.util.zip.CRC32.update(byte[]),updates the crc-32 checksum with the specified array of bytes.
java.util.zip.CRC32.update(java.nio.ByteBuffer),updates the checksum with the bytes from the specified buffer.
"java.util.zip.Deflater.deflate(byte[],int,int)",compresses the input data and fills specified buffer with compressed data.
java.util.zip.Deflater.deflate(byte[]),compresses the input data and fills specified buffer with compressed data.
"java.util.zip.Deflater.deflate(byte[],int,int,int)",compresses the input data and fills the specified buffer with compressed data.
java.util.zip.Deflater.end(),closes the compressor and discards any unprocessed input.
java.util.zip.Deflater.finalize(),closes the compressor when garbage is collected.
java.util.zip.Deflater.finish(),"when called, indicates that compression should end with the current contents of the input buffer."
java.util.zip.Deflater.finished(),returns true if the end of the compressed data output stream has been reached.
java.util.zip.Deflater.getAdler(),returns the adler-32 value of the uncompressed data.
java.util.zip.Deflater.getBytesRead(),returns the total number of uncompressed bytes input so far.
java.util.zip.Deflater.getBytesWritten(),returns the total number of compressed bytes output so far.
java.util.zip.Deflater.getTotalIn(),returns the total number of uncompressed bytes input so far.
java.util.zip.Deflater.getTotalOut(),returns the total number of compressed bytes output so far.
java.util.zip.Deflater.needsInput(),returns true if the input data buffer is empty and setinput() should be called in order to provide more input.
java.util.zip.Deflater.reset(),resets deflater so that a new set of input data can be processed.
"java.util.zip.Deflater.setDictionary(byte[],int,int)",sets preset dictionary for compression.
java.util.zip.Deflater.setDictionary(byte[]),sets preset dictionary for compression.
"java.util.zip.Deflater.setInput(byte[],int,int)",sets input data for compression.
java.util.zip.Deflater.setInput(byte[]),sets input data for compression.
java.util.zip.Deflater.setLevel(int),sets the compression level to the specified value.
java.util.zip.Deflater.setStrategy(int),sets the compression strategy to the specified value.
java.util.zip.DeflaterInputStream.available(),"returns 0 after eof has been reached, otherwise always return 1."
java.util.zip.DeflaterInputStream.close(),"closes this input stream and its underlying input stream, discarding any pending uncompressed data."
java.util.zip.DeflaterInputStream.mark(int),this operation is not supported.
java.util.zip.DeflaterInputStream.markSupported(),always returns false because this input stream does not support the mark() and reset() methods.
java.util.zip.DeflaterInputStream.read(),reads a single byte of compressed data from the input stream.
"java.util.zip.DeflaterInputStream.read(byte[],int,int)",reads compressed data into a byte array.
java.util.zip.DeflaterInputStream.reset(),this operation is not supported.
java.util.zip.DeflaterInputStream.skip(long),skips over and discards data from the input stream.
java.util.zip.DeflaterOutputStream.close(),writes remaining compressed data to the output stream and closes the underlying stream.
java.util.zip.DeflaterOutputStream.deflate(),writes next block of compressed data to the output stream.
java.util.zip.DeflaterOutputStream.finish(),finishes writing compressed data to the output stream without closing the underlying stream.
java.util.zip.DeflaterOutputStream.flush(),flushes the compressed output stream.
java.util.zip.DeflaterOutputStream.write(int),writes a byte to the compressed output stream.
"java.util.zip.DeflaterOutputStream.write(byte[],int,int)",writes an array of bytes to the compressed output stream.
java.util.zip.GZIPInputStream.close(),closes this input stream and releases any system resources associated with the stream.
"java.util.zip.GZIPInputStream.read(byte[],int,int)",reads uncompressed data into an array of bytes.
java.util.zip.GZIPOutputStream.finish(),finishes writing compressed data to the output stream without closing the underlying stream.
"java.util.zip.GZIPOutputStream.write(byte[],int,int)",writes array of bytes to the compressed output stream.
java.util.zip.Inflater.end(),closes the decompressor and discards any unprocessed input.
java.util.zip.Inflater.finalize(),closes the decompressor when garbage is collected.
java.util.zip.Inflater.finished(),returns true if the end of the compressed data stream has been reached.
java.util.zip.Inflater.getAdler(),returns the adler-32 value of the uncompressed data.
java.util.zip.Inflater.getBytesRead(),returns the total number of compressed bytes input so far.
java.util.zip.Inflater.getBytesWritten(),returns the total number of uncompressed bytes output so far.
java.util.zip.Inflater.getRemaining(),returns the total number of bytes remaining in the input buffer.
java.util.zip.Inflater.getTotalIn(),returns the total number of compressed bytes input so far.
java.util.zip.Inflater.getTotalOut(),returns the total number of uncompressed bytes output so far.
"java.util.zip.Inflater.inflate(byte[],int,int)",uncompresses bytes into specified buffer.
java.util.zip.Inflater.inflate(byte[]),uncompresses bytes into specified buffer.
java.util.zip.Inflater.needsDictionary(),returns true if a preset dictionary is needed for decompression.
java.util.zip.Inflater.needsInput(),returns true if no data remains in the input buffer.
java.util.zip.Inflater.reset(),resets inflater so that a new set of input data can be processed.
"java.util.zip.Inflater.setDictionary(byte[],int,int)",sets the preset dictionary to the given array of bytes.
java.util.zip.Inflater.setDictionary(byte[]),sets the preset dictionary to the given array of bytes.
"java.util.zip.Inflater.setInput(byte[],int,int)",sets input data for decompression.
java.util.zip.Inflater.setInput(byte[]),sets input data for decompression.
java.util.zip.InflaterInputStream.available(),"returns 0 after eof has been reached, otherwise always return 1."
java.util.zip.InflaterInputStream.close(),closes this input stream and releases any system resources associated with the stream.
java.util.zip.InflaterInputStream.fill(),fills input buffer with more data to decompress.
java.util.zip.InflaterInputStream.mark(int),marks the current position in this input stream.
java.util.zip.InflaterInputStream.markSupported(),tests if this input stream supports the mark and reset methods.
java.util.zip.InflaterInputStream.read(),reads a byte of uncompressed data.
"java.util.zip.InflaterInputStream.read(byte[],int,int)",reads uncompressed data into an array of bytes.
java.util.zip.InflaterInputStream.reset(),repositions this stream to the position at the time the mark method was last called on this input stream.
java.util.zip.InflaterInputStream.skip(long),skips specified number of bytes of uncompressed data.
java.util.zip.InflaterOutputStream.close(),writes any remaining uncompressed data to the output stream and closes the underlying output stream.
java.util.zip.InflaterOutputStream.finish(),finishes writing uncompressed data to the output stream without closing the underlying stream.
java.util.zip.InflaterOutputStream.flush(),"flushes this output stream, forcing any pending buffered output bytes to be written."
java.util.zip.InflaterOutputStream.write(int),writes a byte to the uncompressed output stream.
"java.util.zip.InflaterOutputStream.write(byte[],int,int)",writes an array of bytes to the uncompressed output stream.
java.util.zip.ZipEntry.clone(),returns a copy of this entry.
java.util.zip.ZipEntry.getComment(),returns the comment string for the entry.
java.util.zip.ZipEntry.getCompressedSize(),returns the size of the compressed entry data.
java.util.zip.ZipEntry.getCrc(),returns the crc-32 checksum of the uncompressed entry data.
java.util.zip.ZipEntry.getCreationTime(),returns the creation time of the entry.
java.util.zip.ZipEntry.getExtra(),returns the extra field data for the entry.
java.util.zip.ZipEntry.getLastAccessTime(),returns the last access time of the entry.
java.util.zip.ZipEntry.getLastModifiedTime(),returns the last modification time of the entry.
java.util.zip.ZipEntry.getMethod(),returns the compression method of the entry.
java.util.zip.ZipEntry.getName(),returns the name of the entry.
java.util.zip.ZipEntry.getSize(),returns the uncompressed size of the entry data.
java.util.zip.ZipEntry.getTime(),returns the last modification time of the entry.
java.util.zip.ZipEntry.hashCode(),returns the hash code value for this entry.
java.util.zip.ZipEntry.isDirectory(),returns true if this is a directory entry.
java.util.zip.ZipEntry.setComment(java.lang.String),sets the optional comment string for the entry.
java.util.zip.ZipEntry.setCompressedSize(long),sets the size of the compressed entry data.
java.util.zip.ZipEntry.setCrc(long),sets the crc-32 checksum of the uncompressed entry data.
java.util.zip.ZipEntry.setCreationTime(java.nio.file.attribute.FileTime),sets the creation time of the entry.
java.util.zip.ZipEntry.setExtra(byte[]),sets the optional extra field data for the entry.
java.util.zip.ZipEntry.setLastAccessTime(java.nio.file.attribute.FileTime),sets the last access time of the entry.
java.util.zip.ZipEntry.setLastModifiedTime(java.nio.file.attribute.FileTime),sets the last modification time of the entry.
java.util.zip.ZipEntry.setMethod(int),sets the compression method for the entry.
java.util.zip.ZipEntry.setSize(long),sets the uncompressed size of the entry data.
java.util.zip.ZipEntry.setTime(long),sets the last modification time of the entry.
java.util.zip.ZipEntry.toString(),returns a string representation of the zip entry.
java.util.zip.ZipFile.close(),closes the zip file.
java.util.zip.ZipFile.entries(),returns an enumeration of the zip file entries.
java.util.zip.ZipFile.finalize(),ensures that the system resources held by this zipfile object are released when there are no more references to it.
java.util.zip.ZipFile.getComment(),"returns the zip file comment, or null if none."
java.util.zip.ZipFile.getEntry(java.lang.String),"returns the zip file entry for the specified name, or null if not found."
java.util.zip.ZipFile.getInputStream(java.util.zip.ZipEntry),returns an input stream for reading the contents of the specified zip file entry.
java.util.zip.ZipFile.getName(),returns the path name of the zip file.
java.util.zip.ZipFile.size(),returns the number of entries in the zip file.
java.util.zip.ZipFile.stream(),return an ordered stream over the zip file entries.
java.util.zip.ZipInputStream.available(),"returns 0 after eof has reached for the current entry data, otherwise always return 1."
java.util.zip.ZipInputStream.close(),closes this input stream and releases any system resources associated with the stream.
java.util.zip.ZipInputStream.closeEntry(),closes the current zip entry and positions the stream for reading the next entry.
java.util.zip.ZipInputStream.createZipEntry(java.lang.String),creates a new zipentry object for the specified entry name.
java.util.zip.ZipInputStream.getNextEntry(),reads the next zip file entry and positions the stream at the beginning of the entry data.
"java.util.zip.ZipInputStream.read(byte[],int,int)",reads from the current zip entry into an array of bytes.
java.util.zip.ZipInputStream.skip(long),skips specified number of bytes in the current zip entry.
java.util.zip.ZipOutputStream.close(),closes the zip output stream as well as the stream being filtered.
java.util.zip.ZipOutputStream.closeEntry(),closes the current zip entry and positions the stream for writing the next entry.
java.util.zip.ZipOutputStream.finish(),finishes writing the contents of the zip output stream without closing the underlying stream.
java.util.zip.ZipOutputStream.putNextEntry(java.util.zip.ZipEntry),begins writing a new zip file entry and positions the stream to the start of the entry data.
java.util.zip.ZipOutputStream.setComment(java.lang.String),sets the zip file comment.
java.util.zip.ZipOutputStream.setLevel(int),sets the compression level for subsequent entries which are deflated.
java.util.zip.ZipOutputStream.setMethod(int),sets the default compression method for subsequent entries.
"java.util.zip.ZipOutputStream.write(byte[],int,int)",writes an array of bytes to the current zip entry data.
javax.accessibility.Accessible.getAccessibleContext(),returns the accessiblecontext associated with this object.
javax.accessibility.AccessibleAction.doAccessibleAction(int),performs the specified action on the object.
javax.accessibility.AccessibleAction.getAccessibleActionCount(),"returns the number of accessible actions available in this object if there are more than one, the first one is considered the ""default"" action of the object."
javax.accessibility.AccessibleAction.getAccessibleActionDescription(int),returns a description of the specified action of the object.
javax.accessibility.AccessibleComponent.addFocusListener(java.awt.event.FocusListener),adds the specified focus listener to receive focus events from this component.
javax.accessibility.AccessibleComponent.contains(java.awt.Point),"checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object."
javax.accessibility.AccessibleComponent.getAccessibleAt(java.awt.Point),"returns the accessible child, if one exists, contained at the local coordinate point."
javax.accessibility.AccessibleComponent.getBackground(),gets the background color of this object.
javax.accessibility.AccessibleComponent.getBounds(),gets the bounds of this object in the form of a rectangle object.
javax.accessibility.AccessibleComponent.getCursor(),gets the cursor of this object.
javax.accessibility.AccessibleComponent.getFont(),gets the font of this object.
javax.accessibility.AccessibleComponent.getFontMetrics(java.awt.Font),gets the fontmetrics of this object.
javax.accessibility.AccessibleComponent.getForeground(),gets the foreground color of this object.
javax.accessibility.AccessibleComponent.getLocation(),gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space.
javax.accessibility.AccessibleComponent.getLocationOnScreen(),returns the location of the object on the screen.
javax.accessibility.AccessibleComponent.getSize(),returns the size of this object in the form of a dimension object.
javax.accessibility.AccessibleComponent.isEnabled(),determines if the object is enabled.
javax.accessibility.AccessibleComponent.isFocusTraversable(),returns whether this object can accept focus or not.
javax.accessibility.AccessibleComponent.isShowing(),determines if the object is showing.
javax.accessibility.AccessibleComponent.isVisible(),determines if the object is visible.
javax.accessibility.AccessibleComponent.removeFocusListener(java.awt.event.FocusListener),removes the specified focus listener so it no longer receives focus events from this component.
javax.accessibility.AccessibleComponent.requestFocus(),requests focus for this object.
javax.accessibility.AccessibleComponent.setBackground(java.awt.Color),sets the background color of this object.
javax.accessibility.AccessibleComponent.setBounds(java.awt.Rectangle),sets the bounds of this object in the form of a rectangle object.
javax.accessibility.AccessibleComponent.setCursor(java.awt.Cursor),sets the cursor of this object.
javax.accessibility.AccessibleComponent.setEnabled(boolean),sets the enabled state of the object.
javax.accessibility.AccessibleComponent.setFont(java.awt.Font),sets the font of this object.
javax.accessibility.AccessibleComponent.setForeground(java.awt.Color),sets the foreground color of this object.
javax.accessibility.AccessibleComponent.setLocation(java.awt.Point),sets the location of the object relative to the parent.
javax.accessibility.AccessibleComponent.setSize(java.awt.Dimension),resizes this object so that it has width and height.
javax.accessibility.AccessibleComponent.setVisible(boolean),sets the visible state of the object.
"javax.accessibility.AccessibleEditableText.cut(int,int)",cuts the text between two indices into the system clipboard.
"javax.accessibility.AccessibleEditableText.delete(int,int)",deletes the text between two indices.
"javax.accessibility.AccessibleEditableText.getTextRange(int,int)",returns the text string between two indices.
"javax.accessibility.AccessibleEditableText.insertTextAtIndex(int,java.lang.String)",inserts the specified string at the given index/.
javax.accessibility.AccessibleEditableText.paste(int),pastes the text from the system clipboard into the text starting at the specified index.
"javax.accessibility.AccessibleEditableText.replaceText(int,int,java.lang.String)",replaces the text between two indices with the specified string.
"javax.accessibility.AccessibleEditableText.selectText(int,int)",selects the text between two indices.
"javax.accessibility.AccessibleEditableText.setAttributes(int,int,javax.swing.text.AttributeSet)",sets attributes for the text between two indices.
javax.accessibility.AccessibleEditableText.setTextContents(java.lang.String),sets the text contents to the specified string.
javax.accessibility.AccessibleExtendedComponent.getAccessibleKeyBinding(),returns key bindings associated with this object.
javax.accessibility.AccessibleExtendedComponent.getTitledBorderText(),returns the titled border text.
javax.accessibility.AccessibleExtendedComponent.getToolTipText(),returns the tool tip text.
javax.accessibility.AccessibleExtendedTable.getAccessibleColumn(int),returns the column number of an index in the table.
"javax.accessibility.AccessibleExtendedTable.getAccessibleIndex(int,int)",returns the index at a row and column in the table.
javax.accessibility.AccessibleExtendedTable.getAccessibleRow(int),returns the row number of an index in the table.
"javax.accessibility.AccessibleExtendedText.getTextBounds(int,int)",returns the bounding rectangle of the text between two indices.
"javax.accessibility.AccessibleExtendedText.getTextRange(int,int)",returns the text between two indices.
"javax.accessibility.AccessibleExtendedText.getTextSequenceAfter(int,int)",returns the accessibletextsequence after a given index.
"javax.accessibility.AccessibleExtendedText.getTextSequenceAt(int,int)",returns the accessibletextsequence at a given index.
"javax.accessibility.AccessibleExtendedText.getTextSequenceBefore(int,int)",returns the accessibletextsequence before a given index.
javax.accessibility.AccessibleHypertext.getLink(int),returns the nth link of this hypertext document.
javax.accessibility.AccessibleHypertext.getLinkCount(),returns the number of links within this hypertext document.
javax.accessibility.AccessibleHypertext.getLinkIndex(int),"returns the index into an array of hyperlinks that is associated with this character index, or -1 if there is no hyperlink associated with this index."
javax.accessibility.AccessibleIcon.getAccessibleIconDescription(),gets the description of the icon.
javax.accessibility.AccessibleIcon.getAccessibleIconHeight(),gets the height of the icon.
javax.accessibility.AccessibleIcon.getAccessibleIconWidth(),gets the width of the icon.
javax.accessibility.AccessibleIcon.setAccessibleIconDescription(java.lang.String),sets the description of the icon.
javax.accessibility.AccessibleKeyBinding.getAccessibleKeyBinding(int),returns a key binding for this object.
javax.accessibility.AccessibleKeyBinding.getAccessibleKeyBindingCount(),returns the number of key bindings for this object.
javax.accessibility.AccessibleSelection.addAccessibleSelection(int),adds the specified accessible child of the object to the object's selection.
javax.accessibility.AccessibleSelection.clearAccessibleSelection(),"clears the selection in the object, so that no children in the object are selected."
javax.accessibility.AccessibleSelection.getAccessibleSelection(int),returns an accessible representing the specified selected child of the object.
javax.accessibility.AccessibleSelection.getAccessibleSelectionCount(),returns the number of accessible children currently selected.
javax.accessibility.AccessibleSelection.isAccessibleChildSelected(int),determines if the current child of this object is selected.
javax.accessibility.AccessibleSelection.removeAccessibleSelection(int),removes the specified child of the object from the object's selection.
javax.accessibility.AccessibleSelection.selectAllAccessibleSelection(),causes every child of the object to be selected if the object supports multiple selections.
javax.accessibility.AccessibleStreamable.getMimeTypes(),returns an array of dataflavor objects for the mime types this object supports.
javax.accessibility.AccessibleStreamable.getStream(java.awt.datatransfer.DataFlavor),returns an inputstream for a dataflavor.
"javax.accessibility.AccessibleTable.getAccessibleAt(int,int)",returns the accessible at a specified row and column in the table.
javax.accessibility.AccessibleTable.getAccessibleCaption(),returns the caption for the table.
javax.accessibility.AccessibleTable.getAccessibleColumnCount(),returns the number of columns in the table.
javax.accessibility.AccessibleTable.getAccessibleColumnDescription(int),returns the description text of the specified column in the table.
"javax.accessibility.AccessibleTable.getAccessibleColumnExtentAt(int,int)",returns the number of columns occupied by the accessible at a specified row and column in the table.
javax.accessibility.AccessibleTable.getAccessibleColumnHeader(),returns the column headers as an accessibletable.
javax.accessibility.AccessibleTable.getAccessibleRowCount(),returns the number of rows in the table.
javax.accessibility.AccessibleTable.getAccessibleRowDescription(int),returns the description of the specified row in the table.
"javax.accessibility.AccessibleTable.getAccessibleRowExtentAt(int,int)",returns the number of rows occupied by the accessible at a specified row and column in the table.
javax.accessibility.AccessibleTable.getAccessibleRowHeader(),returns the row headers as an accessibletable.
javax.accessibility.AccessibleTable.getAccessibleSummary(),returns the summary description of the table.
javax.accessibility.AccessibleTable.getSelectedAccessibleColumns(),returns the selected columns in a table.
javax.accessibility.AccessibleTable.getSelectedAccessibleRows(),returns the selected rows in a table.
javax.accessibility.AccessibleTable.isAccessibleColumnSelected(int),returns a boolean value indicating whether the specified column is selected.
javax.accessibility.AccessibleTable.isAccessibleRowSelected(int),returns a boolean value indicating whether the specified row is selected.
"javax.accessibility.AccessibleTable.isAccessibleSelected(int,int)",returns a boolean value indicating whether the accessible at a specified row and column is selected.
javax.accessibility.AccessibleTable.setAccessibleCaption(javax.accessibility.Accessible),sets the caption for the table.
"javax.accessibility.AccessibleTable.setAccessibleColumnDescription(int,javax.accessibility.Accessible)",sets the description text of the specified column in the table.
javax.accessibility.AccessibleTable.setAccessibleColumnHeader(javax.accessibility.AccessibleTable),sets the column headers.
"javax.accessibility.AccessibleTable.setAccessibleRowDescription(int,javax.accessibility.Accessible)",sets the description text of the specified row of the table.
javax.accessibility.AccessibleTable.setAccessibleRowHeader(javax.accessibility.AccessibleTable),sets the row headers.
javax.accessibility.AccessibleTable.setAccessibleSummary(javax.accessibility.Accessible),sets the summary description of the table.
javax.accessibility.AccessibleTableModelChange.getFirstColumn(),returns the first column that changed.
javax.accessibility.AccessibleTableModelChange.getFirstRow(),returns the first row that changed.
javax.accessibility.AccessibleTableModelChange.getLastColumn(),returns the last column that changed.
javax.accessibility.AccessibleTableModelChange.getLastRow(),returns the last row that changed.
javax.accessibility.AccessibleTableModelChange.getType(),returns the type of event.
"javax.accessibility.AccessibleText.getAfterIndex(int,int)",returns the string after a given index.
"javax.accessibility.AccessibleText.getAtIndex(int,int)",returns the string at a given index.
"javax.accessibility.AccessibleText.getBeforeIndex(int,int)",returns the string before a given index.
javax.accessibility.AccessibleText.getCaretPosition(),returns the zero-based offset of the caret.
javax.accessibility.AccessibleText.getCharacterAttribute(int),returns the attributeset for a given character at a given index.
javax.accessibility.AccessibleText.getCharacterBounds(int),determines the bounding box of the character at the given index into the string.
javax.accessibility.AccessibleText.getCharCount(),returns the number of characters (valid indicies).
javax.accessibility.AccessibleText.getIndexAtPoint(java.awt.Point),"given a point in local coordinates, return the zero-based index of the character under that point."
javax.accessibility.AccessibleText.getSelectedText(),returns the portion of the text that is selected.
javax.accessibility.AccessibleText.getSelectionEnd(),returns the end offset within the selected text.
javax.accessibility.AccessibleText.getSelectionStart(),returns the start offset within the selected text.
javax.accessibility.AccessibleValue.getCurrentAccessibleValue(),get the value of this object as a number.
javax.accessibility.AccessibleValue.getMaximumAccessibleValue(),get the maximum value of this object as a number.
javax.accessibility.AccessibleValue.getMinimumAccessibleValue(),get the minimum value of this object as a number.
javax.accessibility.AccessibleValue.setCurrentAccessibleValue(java.lang.Number),set the value of this object as a number.
"javax.accessibility.AccessibleBundle.toDisplayString(java.lang.String,java.util.Locale)",obtains the key as a localized string.
javax.accessibility.AccessibleBundle.toDisplayString(java.util.Locale),obtains the key as a localized string.
javax.accessibility.AccessibleBundle.toDisplayString(),gets localized string describing the key using the default locale.
javax.accessibility.AccessibleBundle.toString(),gets localized string describing the key using the default locale.
javax.accessibility.AccessibleContext.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
"javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",support for reporting bound property changes.
javax.accessibility.AccessibleContext.getAccessibleAction(),gets the accessibleaction associated with this object that supports one or more actions.
javax.accessibility.AccessibleContext.getAccessibleChild(int),returns the specified accessible child of the object.
javax.accessibility.AccessibleContext.getAccessibleChildrenCount(),returns the number of accessible children of the object.
javax.accessibility.AccessibleContext.getAccessibleComponent(),gets the accessiblecomponent associated with this object that has a graphical representation.
javax.accessibility.AccessibleContext.getAccessibleDescription(),gets the accessibledescription property of this object.
javax.accessibility.AccessibleContext.getAccessibleEditableText(),gets the accessibleeditabletext associated with this object presenting editable text on the display.
javax.accessibility.AccessibleContext.getAccessibleIcon(),gets the accessibleicons associated with an object that has one or more associated icons.
javax.accessibility.AccessibleContext.getAccessibleIndexInParent(),gets the 0-based index of this object in its accessible parent.
javax.accessibility.AccessibleContext.getAccessibleName(),gets the accessiblename property of this object.
javax.accessibility.AccessibleContext.getAccessibleParent(),gets the accessible parent of this object.
javax.accessibility.AccessibleContext.getAccessibleRelationSet(),gets the accessiblerelationset associated with an object.
javax.accessibility.AccessibleContext.getAccessibleRole(),gets the role of this object.
javax.accessibility.AccessibleContext.getAccessibleSelection(),gets the accessibleselection associated with this object which allows its accessible children to be selected.
javax.accessibility.AccessibleContext.getAccessibleStateSet(),gets the state set of this object.
javax.accessibility.AccessibleContext.getAccessibleTable(),gets the accessibletable associated with an object.
javax.accessibility.AccessibleContext.getAccessibleText(),gets the accessibletext associated with this object presenting text on the display.
javax.accessibility.AccessibleContext.getAccessibleValue(),gets the accessiblevalue associated with this object that supports a numerical value.
javax.accessibility.AccessibleContext.getLocale(),gets the locale of the component.
javax.accessibility.AccessibleContext.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychangelistener from the listener list.
javax.accessibility.AccessibleContext.setAccessibleDescription(java.lang.String),sets the accessible description of this object.
javax.accessibility.AccessibleContext.setAccessibleName(java.lang.String),sets the localized accessible name of this object.
javax.accessibility.AccessibleContext.setAccessibleParent(javax.accessibility.Accessible),sets the accessible parent of this object.
javax.accessibility.AccessibleHyperlink.doAccessibleAction(int),performs the specified action on the object.
javax.accessibility.AccessibleHyperlink.getAccessibleActionAnchor(int),"returns an object that represents the link anchor, as appropriate for that link."
javax.accessibility.AccessibleHyperlink.getAccessibleActionCount(),"returns the number of accessible actions available in this link if there are more than one, the first one is not considered the ""default"" action of this link object (e."
javax.accessibility.AccessibleHyperlink.getAccessibleActionDescription(int),returns a string description of this particular link action.
javax.accessibility.AccessibleHyperlink.getAccessibleActionObject(int),"returns an object that represents the link action, as appropriate for that link."
javax.accessibility.AccessibleHyperlink.getEndIndex(),gets the index with the hypertext document at which this link ends.
javax.accessibility.AccessibleHyperlink.getStartIndex(),gets the index with the hypertext document at which this link begins.
javax.accessibility.AccessibleHyperlink.isValid(),"since the document a link is associated with may have changed, this method returns whether or not this link is still valid (with respect to the document it references)."
javax.accessibility.AccessibleRelation.getKey(),returns the key for this relation.
javax.accessibility.AccessibleRelation.getTarget(),returns the target objects for this relation.
javax.accessibility.AccessibleRelation.setTarget(java.lang.Object),sets the target object for this relation.
javax.accessibility.AccessibleRelation.setTarget(java.lang.Object[]),sets the target objects for this relation.
javax.accessibility.AccessibleRelationSet.add(javax.accessibility.AccessibleRelation),adds a new relation to the current relation set.
javax.accessibility.AccessibleRelationSet.addAll(javax.accessibility.AccessibleRelation[]),adds all of the relations to the existing relation set.
javax.accessibility.AccessibleRelationSet.clear(),removes all the relations from the current relation set.
javax.accessibility.AccessibleRelationSet.contains(java.lang.String),returns whether the relation set contains a relation that matches the specified key.
javax.accessibility.AccessibleRelationSet.get(java.lang.String),returns the relation that matches the specified key.
javax.accessibility.AccessibleRelationSet.remove(javax.accessibility.AccessibleRelation),removes a relation from the current relation set.
javax.accessibility.AccessibleRelationSet.size(),returns the number of relations in the relation set.
javax.accessibility.AccessibleRelationSet.toArray(),returns the current relation set as an array of accessiblerelation.
javax.accessibility.AccessibleRelationSet.toString(),creates a localized string representing all the relations in the set using the default locale.
javax.accessibility.AccessibleStateSet.add(javax.accessibility.AccessibleState),adds a new state to the current state set if it is not already present.
javax.accessibility.AccessibleStateSet.addAll(javax.accessibility.AccessibleState[]),adds all of the states to the existing state set.
javax.accessibility.AccessibleStateSet.clear(),removes all the states from the current state set.
javax.accessibility.AccessibleStateSet.contains(javax.accessibility.AccessibleState),checks if the current state is in the state set.
javax.accessibility.AccessibleStateSet.remove(javax.accessibility.AccessibleState),removes a state from the current state set.
javax.accessibility.AccessibleStateSet.toArray(),returns the current state set as an array of accessiblestate.
javax.accessibility.AccessibleStateSet.toString(),creates a localized string representing all the states in the set using the default locale.
"javax.activation.CommandObject.setCommandContext(java.lang.String,javax.activation.DataHandler)",initialize the command with the verb it is requested to handle and the datahandler that describes the data it will operate on.
javax.activation.DataContentHandler.getContent(javax.activation.DataSource),return an object representing the data in its most preferred form.
"javax.activation.DataContentHandler.getTransferData(java.awt.datatransfer.DataFlavor,javax.activation.DataSource)",returns an object which represents the data to be transferred.
javax.activation.DataContentHandler.getTransferDataFlavors(),returns an array of dataflavor objects indicating the flavors the data can be provided in.
"javax.activation.DataContentHandler.writeTo(java.lang.Object,java.lang.String,java.io.OutputStream)",convert the object to a byte stream of the specified mime type and write it to the output stream.
javax.activation.DataContentHandlerFactory.createDataContentHandler(java.lang.String),creates a new datacontenthandler object for the mime type.
javax.activation.DataSource.getContentType(),this method returns the mime type of the data in the form of a string.
javax.activation.DataSource.getInputStream(),this method returns an inputstream representing the data and throws the appropriate exception if it can not do so.
javax.activation.DataSource.getName(),return the name of this object where the name of the object is dependant on the nature of the underlying objects.
javax.activation.DataSource.getOutputStream(),this method returns an outputstream where the data can be written and throws the appropriate exception if it can not do so.
javax.activation.ActivationDataFlavor.equals(java.awt.datatransfer.DataFlavor),compares the dataflavor passed in with this dataflavor; calls the ismimetypeequal method.
javax.activation.ActivationDataFlavor.getHumanPresentableName(),return the human presentable name.
javax.activation.ActivationDataFlavor.getMimeType(),return the mime type for this dataflavor.
javax.activation.ActivationDataFlavor.getRepresentationClass(),return the representation class.
javax.activation.ActivationDataFlavor.isMimeTypeEqual(java.lang.String),is the string representation of the mime type passed in equivalent to the mime type of this dataflavor.
javax.activation.ActivationDataFlavor.setHumanPresentableName(java.lang.String),set the human presentable name.
javax.activation.CommandInfo.getCommandClass(),return the command's class name.
javax.activation.CommandInfo.getCommandName(),return the command verb.
"javax.activation.CommandInfo.getCommandObject(javax.activation.DataHandler,java.lang.ClassLoader)",return the instantiated javabean component.
javax.activation.CommandMap.createDataContentHandler(java.lang.String),locate a datacontenthandler that corresponds to the mime type.
"javax.activation.CommandMap.createDataContentHandler(java.lang.String,javax.activation.DataSource)",locate a datacontenthandler that corresponds to the mime type.
javax.activation.CommandMap.getAllCommands(java.lang.String),get all the available commands for this type.
"javax.activation.CommandMap.getAllCommands(java.lang.String,javax.activation.DataSource)",get all the available commands for this type.
"javax.activation.CommandMap.getCommand(java.lang.String,java.lang.String)",get the default command corresponding to the mime type.
"javax.activation.CommandMap.getCommand(java.lang.String,java.lang.String,javax.activation.DataSource)",get the default command corresponding to the mime type.
javax.activation.CommandMap.getDefaultCommandMap(),get the default commandmap.
javax.activation.CommandMap.getMimeTypes(),get all the mime types known to this command map.
javax.activation.CommandMap.getPreferredCommands(java.lang.String),get the preferred command list from a mime type.
"javax.activation.CommandMap.getPreferredCommands(java.lang.String,javax.activation.DataSource)",get the preferred command list from a mime type.
javax.activation.CommandMap.setDefaultCommandMap(javax.activation.CommandMap),set the default commandmap.
javax.activation.DataHandler.getAllCommands(),return all the commands for this type of data.
javax.activation.DataHandler.getBean(javax.activation.CommandInfo),"a convenience method that takes a commandinfo object and instantiates the corresponding command, usually a javabean component."
javax.activation.DataHandler.getCommand(java.lang.String),get the command cmdname.
javax.activation.DataHandler.getContent(),return the data in its preferred object form.
javax.activation.DataHandler.getContentType(),return the mime type of this object as retrieved from the source object.
javax.activation.DataHandler.getDataSource(),return the datasource associated with this instance of datahandler.
javax.activation.DataHandler.getInputStream(),get the inputstream for this object.
javax.activation.DataHandler.getName(),return the name of the data object.
javax.activation.DataHandler.getOutputStream(),get an outputstream for this datahandler to allow overwriting the underlying data.
javax.activation.DataHandler.getPreferredCommands(),return the preferred commands for this type of data.
javax.activation.DataHandler.getTransferData(java.awt.datatransfer.DataFlavor),returns an object that represents the data to be transferred.
javax.activation.DataHandler.getTransferDataFlavors(),return the dataflavors in which this data is available.
javax.activation.DataHandler.isDataFlavorSupported(java.awt.datatransfer.DataFlavor),returns whether the specified data flavor is supported for this object.
javax.activation.DataHandler.setCommandMap(javax.activation.CommandMap),set the commandmap for use by this datahandler.
javax.activation.DataHandler.setDataContentHandlerFactory(javax.activation.DataContentHandlerFactory),sets the datacontenthandlerfactory.
javax.activation.DataHandler.writeTo(java.io.OutputStream),write the data to an outputstream.
javax.activation.FileDataSource.getContentType(),this method returns the mime type of the data in the form of a string.
javax.activation.FileDataSource.getFile(),return the file object that corresponds to this filedatasource.
javax.activation.FileDataSource.getInputStream(),this method will return an inputstream representing the the data and will throw an ioexception if it can not do so.
javax.activation.FileDataSource.getName(),return the name of this object.
javax.activation.FileDataSource.getOutputStream(),this method will return an outputstream representing the the data and will throw an ioexception if it can not do so.
javax.activation.FileDataSource.setFileTypeMap(javax.activation.FileTypeMap),set the filetypemap to use with this filedatasource.
javax.activation.FileTypeMap.getContentType(java.io.File),return the type of the file object.
javax.activation.FileTypeMap.getContentType(java.lang.String),return the type of the file passed in.
javax.activation.FileTypeMap.getDefaultFileTypeMap(),return the default filetypemap for the system.
javax.activation.FileTypeMap.setDefaultFileTypeMap(javax.activation.FileTypeMap),sets the default filetypemap for the system.
javax.activation.MailcapCommandMap.addMailcap(java.lang.String),add entries to the registry.
javax.activation.MailcapCommandMap.createDataContentHandler(java.lang.String),return the datacontenthandler for the specified mime type.
javax.activation.MailcapCommandMap.getAllCommands(java.lang.String),get all the available commands in all mailcap files known to this instance of mailcapcommandmap for this mime type.
"javax.activation.MailcapCommandMap.getCommand(java.lang.String,java.lang.String)",get the command corresponding to cmdname for the mime type.
javax.activation.MailcapCommandMap.getMimeTypes(),get all the mime types known to this command map.
javax.activation.MailcapCommandMap.getNativeCommands(java.lang.String),get the native commands for the given mime type.
javax.activation.MailcapCommandMap.getPreferredCommands(java.lang.String),get the preferred command list for a mime type.
javax.activation.MimeType.getBaseType(),return a string representation of this object without the parameter list.
javax.activation.MimeType.getParameter(java.lang.String),"retrieve the value associated with the given name, or null if there is no current association."
javax.activation.MimeType.getParameters(),retrieve this object's parameter list.
javax.activation.MimeType.getPrimaryType(),retrieve the primary type of this object.
javax.activation.MimeType.getSubType(),retrieve the subtype of this object.
javax.activation.MimeType.match(javax.activation.MimeType),determine if the primary and sub type of this object is the same as what is in the given type.
javax.activation.MimeType.match(java.lang.String),determine if the primary and sub type of this object is the same as the content type described in rawdata.
javax.activation.MimeType.readExternal(java.io.ObjectInput),"the object implements the readexternal method to restore its contents by calling the methods of datainput for primitive types and readobject for objects, strings and arrays."
javax.activation.MimeType.removeParameter(java.lang.String),remove any value associated with the given name.
"javax.activation.MimeType.setParameter(java.lang.String,java.lang.String)","set the value to be associated with the given name, replacing any previous association."
javax.activation.MimeType.setPrimaryType(java.lang.String),set the primary type for this object to the given string.
javax.activation.MimeType.setSubType(java.lang.String),set the subtype for this object to the given string.
javax.activation.MimeType.toString(),return the string representation of this object.
javax.activation.MimeType.writeExternal(java.io.ObjectOutput),"the object implements the writeexternal method to save its contents by calling the methods of dataoutput for its primitive values or calling the writeobject method of objectoutput for objects, strings and arrays."
javax.activation.MimeTypeParameterList.get(java.lang.String),"retrieve the value associated with the given name, or null if there is no current association."
javax.activation.MimeTypeParameterList.getNames(),retrieve an enumeration of all the names in this list.
javax.activation.MimeTypeParameterList.isEmpty(),determine whether or not this list is empty.
javax.activation.MimeTypeParameterList.parse(java.lang.String),a routine for parsing the parameter list out of a string.
javax.activation.MimeTypeParameterList.remove(java.lang.String),remove any value associated with the given name.
"javax.activation.MimeTypeParameterList.set(java.lang.String,java.lang.String)","set the value to be associated with the given name, replacing any previous association."
javax.activation.MimeTypeParameterList.size(),return the number of name-value pairs in this list.
javax.activation.MimeTypeParameterList.toString(),return a string representation of this object.
javax.activation.MimetypesFileTypeMap.addMimeTypes(java.lang.String),prepend the mime type values to the registry.
javax.activation.MimetypesFileTypeMap.getContentType(java.io.File),return the mime type of the file object.
javax.activation.MimetypesFileTypeMap.getContentType(java.lang.String),return the mime type based on the specified file name.
javax.activation.URLDataSource.getContentType(),returns the value of the url content-type header field.
javax.activation.URLDataSource.getInputStream(),the getinputstream method from the url.
javax.activation.URLDataSource.getName(),calls the getfile method on the url used to instantiate the object.
javax.activation.URLDataSource.getOutputStream(),the getoutputstream method from the url.
javax.activation.URLDataSource.getURL(),return the url used to create this datasource.
javax.annotation.Resource.AuthenticationType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.annotation.Resource.AuthenticationType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.annotation.processing.Completion.getMessage(),returns an informative message about the completion.
javax.annotation.processing.Completion.getValue(),returns the text of the suggested completion.
"javax.annotation.processing.Filer.createClassFile(java.lang.CharSequence,javax.lang.model.element.Element...)","creates a new class file, and returns an object to allow writing to it."
"javax.annotation.processing.Filer.createResource(javax.tools.JavaFileManager.Location,java.lang.CharSequence,java.lang.CharSequence,javax.lang.model.element.Element...)",creates a new auxiliary resource file for writing and returns a file object for it.
"javax.annotation.processing.Filer.createSourceFile(java.lang.CharSequence,javax.lang.model.element.Element...)",creates a new source file and returns an object to allow writing to it.
"javax.annotation.processing.Filer.getResource(javax.tools.JavaFileManager.Location,java.lang.CharSequence,java.lang.CharSequence)",returns an object for reading an existing resource.
"javax.annotation.processing.Messager.printMessage(javax.tools.Diagnostic.Kind,java.lang.CharSequence)",prints a message of the specified kind.
"javax.annotation.processing.Messager.printMessage(javax.tools.Diagnostic.Kind,java.lang.CharSequence,javax.lang.model.element.Element)",prints a message of the specified kind at the location of the element.
"javax.annotation.processing.Messager.printMessage(javax.tools.Diagnostic.Kind,java.lang.CharSequence,javax.lang.model.element.Element,javax.lang.model.element.AnnotationMirror)",prints a message of the specified kind at the location of the annotation mirror of the annotated element.
"javax.annotation.processing.Messager.printMessage(javax.tools.Diagnostic.Kind,java.lang.CharSequence,javax.lang.model.element.Element,javax.lang.model.element.AnnotationMirror,javax.lang.model.element.AnnotationValue)",prints a message of the specified kind at the location of the annotation value inside the annotation mirror of the annotated element.
javax.annotation.processing.ProcessingEnvironment.getElementUtils(),returns an implementation of some utility methods for operating on elements.
javax.annotation.processing.ProcessingEnvironment.getFiler(),"returns the filer used to create new source, class, or auxiliary files."
javax.annotation.processing.ProcessingEnvironment.getLocale(),returns the current locale or null if no locale is in effect.
javax.annotation.processing.ProcessingEnvironment.getMessager(),"returns the messager used to report errors, warnings, and other notices."
javax.annotation.processing.ProcessingEnvironment.getOptions(),returns the processor-specific options passed to the annotation processing tool.
javax.annotation.processing.ProcessingEnvironment.getSourceVersion(),returns the source version that any generated source and class files should conform to.
javax.annotation.processing.ProcessingEnvironment.getTypeUtils(),returns an implementation of some utility methods for operating on types.
"javax.annotation.processing.Processor.getCompletions(javax.lang.model.element.Element,javax.lang.model.element.AnnotationMirror,javax.lang.model.element.ExecutableElement,java.lang.String)",returns to the tool infrastructure an iterable of suggested completions to an annotation.
javax.annotation.processing.Processor.getSupportedAnnotationTypes(),returns the names of the annotation types supported by this processor.
javax.annotation.processing.Processor.getSupportedOptions(),returns the options recognized by this processor.
javax.annotation.processing.Processor.getSupportedSourceVersion(),returns the latest source version supported by this annotation processor.
javax.annotation.processing.Processor.init(javax.annotation.processing.ProcessingEnvironment),initializes the processor with the processing environment.
"javax.annotation.processing.Processor.process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)",processes a set of annotation types on type elements originating from the prior round and returns whether or not these annotation types are claimed by this processor.
javax.annotation.processing.RoundEnvironment.errorRaised(),returns true if an error was raised in the prior round of processing; returns false otherwise.
javax.annotation.processing.RoundEnvironment.getElementsAnnotatedWith(javax.lang.model.element.TypeElement),returns the elements annotated with the given annotation type.
javax.annotation.processing.RoundEnvironment.getElementsAnnotatedWith(java.lang.Class<? extends java.lang.annotation.Annotation>),returns the elements annotated with the given annotation type.
javax.annotation.processing.RoundEnvironment.getRootElements(),returns the root elements for annotation processing generated by the prior round.
javax.annotation.processing.RoundEnvironment.processingOver(),returns true if types generated by this round will not be subject to a subsequent round of annotation processing; returns false otherwise.
"javax.annotation.processing.AbstractProcessor.getCompletions(javax.lang.model.element.Element,javax.lang.model.element.AnnotationMirror,javax.lang.model.element.ExecutableElement,java.lang.String)",returns an empty iterable of completions.
javax.annotation.processing.AbstractProcessor.getSupportedAnnotationTypes(),"if the processor class is annotated with supportedannotationtypes, return an unmodifiable set with the same set of strings as the annotation."
javax.annotation.processing.AbstractProcessor.getSupportedOptions(),"if the processor class is annotated with supportedoptions, return an unmodifiable set with the same set of strings as the annotation."
javax.annotation.processing.AbstractProcessor.getSupportedSourceVersion(),"if the processor class is annotated with supportedsourceversion, return the source version in the annotation."
javax.annotation.processing.AbstractProcessor.init(javax.annotation.processing.ProcessingEnvironment),initializes the processor with the processing environment by setting the processingenv field to the value of the processingenv argument.
javax.annotation.processing.AbstractProcessor.isInitialized(),"returns true if this object has been initialized, false otherwise."
"javax.annotation.processing.AbstractProcessor.process(java.util.Set<? extends javax.lang.model.element.TypeElement>,javax.annotation.processing.RoundEnvironment)",processes a set of annotation types on type elements originating from the prior round and returns whether or not these annotation types are claimed by this processor.
"javax.annotation.processing.Completions.of(java.lang.String,java.lang.String)",returns a completion of the value and message.
javax.annotation.processing.Completions.of(java.lang.String),returns a completion of the value and an empty message.
javax.crypto.Cipher.doFinal(),"finishes a multiple-part encryption or decryption operation, depending on how this cipher was initialized."
"javax.crypto.Cipher.doFinal(byte[],int)","finishes a multiple-part encryption or decryption operation, depending on how this cipher was initialized."
javax.crypto.Cipher.doFinal(byte[]),"encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
"javax.crypto.Cipher.doFinal(byte[],int,int)","encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
"javax.crypto.Cipher.doFinal(byte[],int,int,byte[])","encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
"javax.crypto.Cipher.doFinal(byte[],int,int,byte[],int)","encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
"javax.crypto.Cipher.doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)","encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
javax.crypto.Cipher.getAlgorithm(),returns the algorithm name of this cipher object.
javax.crypto.Cipher.getBlockSize(),returns the block size (in bytes).
javax.crypto.Cipher.getExemptionMechanism(),returns the exemption mechanism object used with this cipher.
javax.crypto.Cipher.getInstance(java.lang.String),returns a cipher object that implements the specified transformation.
"javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String)",returns a cipher object that implements the specified transformation.
"javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider)",returns a cipher object that implements the specified transformation.
javax.crypto.Cipher.getIV(),returns the initialization vector (iv) in a new buffer.
javax.crypto.Cipher.getMaxAllowedKeyLength(java.lang.String),returns the maximum key length for the specified transformation according to the installed jce jurisdiction policy files.
javax.crypto.Cipher.getMaxAllowedParameterSpec(java.lang.String),returns an algorithmparameterspec object which contains the maximum cipher parameter value according to the jurisdiction policy file.
javax.crypto.Cipher.getOutputSize(int),"returns the length in bytes that an output buffer would need to be in order to hold the result of the next update or dofinal operation, given the input length inputlen (in bytes)."
javax.crypto.Cipher.getParameters(),returns the parameters used with this cipher.
javax.crypto.Cipher.getProvider(),returns the provider of this cipher object.
"javax.crypto.Cipher.init(int,java.security.Key)",initializes this cipher with a key.
"javax.crypto.Cipher.init(int,java.security.Key,java.security.SecureRandom)",initializes this cipher with a key and a source of randomness.
"javax.crypto.Cipher.init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)",initializes this cipher with a key and a set of algorithm parameters.
"javax.crypto.Cipher.init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)","initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
"javax.crypto.Cipher.init(int,java.security.Key,java.security.AlgorithmParameters)",initializes this cipher with a key and a set of algorithm parameters.
"javax.crypto.Cipher.init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)","initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
"javax.crypto.Cipher.init(int,java.security.cert.Certificate)",initializes this cipher with the public key from the given certificate.
"javax.crypto.Cipher.init(int,java.security.cert.Certificate,java.security.SecureRandom)",initializes this cipher with the public key from the given certificate and a source of randomness.
"javax.crypto.Cipher.unwrap(byte[],java.lang.String,int)",unwrap a previously wrapped key.
javax.crypto.Cipher.update(byte[]),"continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
"javax.crypto.Cipher.update(byte[],int,int)","continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
"javax.crypto.Cipher.update(byte[],int,int,byte[])","continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
"javax.crypto.Cipher.update(byte[],int,int,byte[],int)","continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
"javax.crypto.Cipher.update(java.nio.ByteBuffer,java.nio.ByteBuffer)","continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
javax.crypto.Cipher.updateAAD(byte[]),continues a multi-part update of the additional authentication data (aad).
"javax.crypto.Cipher.updateAAD(byte[],int,int)","continues a multi-part update of the additional authentication data (aad), using a subset of the provided buffer."
javax.crypto.Cipher.updateAAD(java.nio.ByteBuffer),continues a multi-part update of the additional authentication data (aad).
javax.crypto.Cipher.wrap(java.security.Key),wrap a key.
javax.crypto.CipherInputStream.available(),returns the number of bytes that can be read from this input stream without blocking.
javax.crypto.CipherInputStream.close(),closes this input stream and releases any system resources associated with the stream.
javax.crypto.CipherInputStream.markSupported(),"tests if this input stream supports the mark and reset methods, which it does not."
javax.crypto.CipherInputStream.read(),reads the next byte of data from this input stream.
javax.crypto.CipherInputStream.read(byte[]),reads up to b.
"javax.crypto.CipherInputStream.read(byte[],int,int)",reads up to len bytes of data from this input stream into an array of bytes.
javax.crypto.CipherInputStream.skip(long),skips n bytes of input from the bytes that can be read from this input stream without blocking.
javax.crypto.CipherOutputStream.close(),closes this output stream and releases any system resources associated with this stream.
javax.crypto.CipherOutputStream.flush(),flushes this output stream by forcing any buffered output bytes that have already been processed by the encapsulated cipher object to be written out.
javax.crypto.CipherOutputStream.write(int),writes the specified byte to this output stream.
javax.crypto.CipherOutputStream.write(byte[]),writes b.
"javax.crypto.CipherOutputStream.write(byte[],int,int)",writes len bytes from the specified byte array starting at offset off to this output stream.
"javax.crypto.CipherSpi.engineDoFinal(byte[],int,int)","encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
"javax.crypto.CipherSpi.engineDoFinal(byte[],int,int,byte[],int)","encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
"javax.crypto.CipherSpi.engineDoFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)","encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
javax.crypto.CipherSpi.engineGetBlockSize(),returns the block size (in bytes).
javax.crypto.CipherSpi.engineGetIV(),returns the initialization vector (iv) in a new buffer.
javax.crypto.CipherSpi.engineGetKeySize(java.security.Key),returns the key size of the given key object in bits.
javax.crypto.CipherSpi.engineGetOutputSize(int),"returns the length in bytes that an output buffer would need to be in order to hold the result of the next update or dofinal operation, given the input length inputlen (in bytes)."
javax.crypto.CipherSpi.engineGetParameters(),returns the parameters used with this cipher.
"javax.crypto.CipherSpi.engineInit(int,java.security.Key,java.security.SecureRandom)",initializes this cipher with a key and a source of randomness.
"javax.crypto.CipherSpi.engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)","initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
"javax.crypto.CipherSpi.engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)","initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
javax.crypto.CipherSpi.engineSetMode(java.lang.String),sets the mode of this cipher.
javax.crypto.CipherSpi.engineSetPadding(java.lang.String),sets the padding mechanism of this cipher.
"javax.crypto.CipherSpi.engineUnwrap(byte[],java.lang.String,int)",unwrap a previously wrapped key.
"javax.crypto.CipherSpi.engineUpdate(byte[],int,int)","continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
"javax.crypto.CipherSpi.engineUpdate(byte[],int,int,byte[],int)","continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
"javax.crypto.CipherSpi.engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)","continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
"javax.crypto.CipherSpi.engineUpdateAAD(byte[],int,int)","continues a multi-part update of the additional authentication data (aad), using a subset of the provided buffer."
javax.crypto.CipherSpi.engineUpdateAAD(java.nio.ByteBuffer),continues a multi-part update of the additional authentication data (aad).
javax.crypto.CipherSpi.engineWrap(java.security.Key),wrap a key.
javax.crypto.EncryptedPrivateKeyInfo.getAlgName(),returns the encryption algorithm.
javax.crypto.EncryptedPrivateKeyInfo.getAlgParameters(),returns the algorithm parameters used by the encryption algorithm.
javax.crypto.EncryptedPrivateKeyInfo.getEncoded(),returns the asn.
javax.crypto.EncryptedPrivateKeyInfo.getEncryptedData(),returns the encrypted data.
javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(javax.crypto.Cipher),extract the enclosed pkcs8encodedkeyspec object from the encrypted data and return it.
javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(java.security.Key),extract the enclosed pkcs8encodedkeyspec object from the encrypted data and return it.
"javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(java.security.Key,java.lang.String)",extract the enclosed pkcs8encodedkeyspec object from the encrypted data and return it.
"javax.crypto.EncryptedPrivateKeyInfo.getKeySpec(java.security.Key,java.security.Provider)",extract the enclosed pkcs8encodedkeyspec object from the encrypted data and return it.
javax.crypto.ExemptionMechanism.finalize(),ensures that the key stored away by this exemptionmechanism object will be wiped out when there are no more references to it.
javax.crypto.ExemptionMechanism.genExemptionBlob(),generates the exemption mechanism key blob.
javax.crypto.ExemptionMechanism.genExemptionBlob(byte[]),"generates the exemption mechanism key blob, and stores the result in the output buffer."
"javax.crypto.ExemptionMechanism.genExemptionBlob(byte[],int)","generates the exemption mechanism key blob, and stores the result in the output buffer, starting at outputoffset inclusive."
javax.crypto.ExemptionMechanism.getInstance(java.lang.String),returns an exemptionmechanism object that implements the specified exemption mechanism algorithm.
"javax.crypto.ExemptionMechanism.getInstance(java.lang.String,java.lang.String)",returns an exemptionmechanism object that implements the specified exemption mechanism algorithm.
"javax.crypto.ExemptionMechanism.getInstance(java.lang.String,java.security.Provider)",returns an exemptionmechanism object that implements the specified exemption mechanism algorithm.
javax.crypto.ExemptionMechanism.getName(),returns the exemption mechanism name of this exemptionmechanism object.
javax.crypto.ExemptionMechanism.getOutputSize(int),"returns the length in bytes that an output buffer would need to be in order to hold the result of the next genexemptionblob operation, given the input length inputlen (in bytes)."
javax.crypto.ExemptionMechanism.getProvider(),returns the provider of this exemptionmechanism object.
javax.crypto.ExemptionMechanism.init(java.security.Key),initializes this exemption mechanism with a key.
"javax.crypto.ExemptionMechanism.init(java.security.Key,java.security.spec.AlgorithmParameterSpec)",initializes this exemption mechanism with a key and a set of algorithm parameters.
"javax.crypto.ExemptionMechanism.init(java.security.Key,java.security.AlgorithmParameters)",initializes this exemption mechanism with a key and a set of algorithm parameters.
javax.crypto.ExemptionMechanism.isCryptoAllowed(java.security.Key),returns whether the result blob has been generated successfully by this exemption mechanism.
javax.crypto.ExemptionMechanismSpi.engineGenExemptionBlob(),generates the exemption mechanism key blob.
"javax.crypto.ExemptionMechanismSpi.engineGenExemptionBlob(byte[],int)","generates the exemption mechanism key blob, and stores the result in the output buffer, starting at outputoffset inclusive."
javax.crypto.ExemptionMechanismSpi.engineGetOutputSize(int),"returns the length in bytes that an output buffer would need to be in order to hold the result of the next enginegenexemptionblob operation, given the input length inputlen (in bytes)."
javax.crypto.ExemptionMechanismSpi.engineInit(java.security.Key),initializes this exemption mechanism with a key.
"javax.crypto.ExemptionMechanismSpi.engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",initializes this exemption mechanism with a key and a set of algorithm parameters.
"javax.crypto.ExemptionMechanismSpi.engineInit(java.security.Key,java.security.AlgorithmParameters)",initializes this exemption mechanism with a key and a set of algorithm parameters.
"javax.crypto.KeyAgreement.doPhase(java.security.Key,boolean)",executes the next phase of this key agreement with the given key that was received from one of the other parties involved in this key agreement.
javax.crypto.KeyAgreement.generateSecret(),generates the shared secret and returns it in a new buffer.
"javax.crypto.KeyAgreement.generateSecret(byte[],int)","generates the shared secret, and places it into the buffer sharedsecret, beginning at offset inclusive."
javax.crypto.KeyAgreement.generateSecret(java.lang.String),creates the shared secret and returns it as a secretkey object of the specified algorithm.
javax.crypto.KeyAgreement.getAlgorithm(),returns the algorithm name of this keyagreement object.
javax.crypto.KeyAgreement.getInstance(java.lang.String),returns a keyagreement object that implements the specified key agreement algorithm.
"javax.crypto.KeyAgreement.getInstance(java.lang.String,java.lang.String)",returns a keyagreement object that implements the specified key agreement algorithm.
"javax.crypto.KeyAgreement.getInstance(java.lang.String,java.security.Provider)",returns a keyagreement object that implements the specified key agreement algorithm.
javax.crypto.KeyAgreement.getProvider(),returns the provider of this keyagreement object.
javax.crypto.KeyAgreement.init(java.security.Key),"initializes this key agreement with the given key, which is required to contain all the algorithm parameters required for this key agreement."
"javax.crypto.KeyAgreement.init(java.security.Key,java.security.SecureRandom)",initializes this key agreement with the given key and source of randomness.
"javax.crypto.KeyAgreement.init(java.security.Key,java.security.spec.AlgorithmParameterSpec)",initializes this key agreement with the given key and set of algorithm parameters.
"javax.crypto.KeyAgreement.init(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)","initializes this key agreement with the given key, set of algorithm parameters, and source of randomness."
"javax.crypto.KeyAgreementSpi.engineDoPhase(java.security.Key,boolean)",executes the next phase of this key agreement with the given key that was received from one of the other parties involved in this key agreement.
javax.crypto.KeyAgreementSpi.engineGenerateSecret(),generates the shared secret and returns it in a new buffer.
"javax.crypto.KeyAgreementSpi.engineGenerateSecret(byte[],int)","generates the shared secret, and places it into the buffer sharedsecret, beginning at offset inclusive."
javax.crypto.KeyAgreementSpi.engineGenerateSecret(java.lang.String),creates the shared secret and returns it as a secret key object of the requested algorithm type.
"javax.crypto.KeyAgreementSpi.engineInit(java.security.Key,java.security.SecureRandom)",initializes this key agreement with the given key and source of randomness.
"javax.crypto.KeyAgreementSpi.engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)","initializes this key agreement with the given key, set of algorithm parameters, and source of randomness."
javax.crypto.KeyGenerator.generateKey(),generates a secret key.
javax.crypto.KeyGenerator.getAlgorithm(),returns the algorithm name of this keygenerator object.
javax.crypto.KeyGenerator.getInstance(java.lang.String),returns a keygenerator object that generates secret keys for the specified algorithm.
"javax.crypto.KeyGenerator.getInstance(java.lang.String,java.lang.String)",returns a keygenerator object that generates secret keys for the specified algorithm.
"javax.crypto.KeyGenerator.getInstance(java.lang.String,java.security.Provider)",returns a keygenerator object that generates secret keys for the specified algorithm.
javax.crypto.KeyGenerator.getProvider(),returns the provider of this keygenerator object.
javax.crypto.KeyGenerator.init(java.security.SecureRandom),initializes this key generator.
javax.crypto.KeyGenerator.init(java.security.spec.AlgorithmParameterSpec),initializes this key generator with the specified parameter set.
"javax.crypto.KeyGenerator.init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",initializes this key generator with the specified parameter set and a user-provided source of randomness.
javax.crypto.KeyGenerator.init(int),initializes this key generator for a certain keysize.
"javax.crypto.KeyGenerator.init(int,java.security.SecureRandom)","initializes this key generator for a certain keysize, using a user-provided source of randomness."
javax.crypto.KeyGeneratorSpi.engineGenerateKey(),generates a secret key.
javax.crypto.KeyGeneratorSpi.engineInit(java.security.SecureRandom),initializes the key generator.
"javax.crypto.KeyGeneratorSpi.engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",initializes the key generator with the specified parameter set and a user-provided source of randomness.
"javax.crypto.KeyGeneratorSpi.engineInit(int,java.security.SecureRandom)","initializes this key generator for a certain keysize, using the given source of randomness."
javax.crypto.Mac.clone(),returns a clone if the provider implementation is cloneable.
javax.crypto.Mac.doFinal(),finishes the mac operation.
"javax.crypto.Mac.doFinal(byte[],int)",finishes the mac operation.
javax.crypto.Mac.doFinal(byte[]),processes the given array of bytes and finishes the mac operation.
javax.crypto.Mac.getAlgorithm(),returns the algorithm name of this mac object.
javax.crypto.Mac.getInstance(java.lang.String),returns a mac object that implements the specified mac algorithm.
"javax.crypto.Mac.getInstance(java.lang.String,java.lang.String)",returns a mac object that implements the specified mac algorithm.
"javax.crypto.Mac.getInstance(java.lang.String,java.security.Provider)",returns a mac object that implements the specified mac algorithm.
javax.crypto.Mac.getMacLength(),returns the length of the mac in bytes.
javax.crypto.Mac.getProvider(),returns the provider of this mac object.
javax.crypto.Mac.init(java.security.Key),initializes this mac object with the given key.
"javax.crypto.Mac.init(java.security.Key,java.security.spec.AlgorithmParameterSpec)",initializes this mac object with the given key and algorithm parameters.
javax.crypto.Mac.reset(),resets this mac object.
javax.crypto.Mac.update(byte),processes the given byte.
javax.crypto.Mac.update(byte[]),processes the given array of bytes.
"javax.crypto.Mac.update(byte[],int,int)","processes the first len bytes in input, starting at offset inclusive."
javax.crypto.Mac.update(java.nio.ByteBuffer),processes input.
javax.crypto.MacSpi.clone(),returns a clone if the implementation is cloneable.
javax.crypto.MacSpi.engineDoFinal(),"completes the mac computation and resets the mac for further use, maintaining the secret key that the mac was initialized with."
javax.crypto.MacSpi.engineGetMacLength(),returns the length of the mac in bytes.
"javax.crypto.MacSpi.engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",initializes the mac with the given (secret) key and algorithm parameters.
javax.crypto.MacSpi.engineReset(),"resets the mac for further use, maintaining the secret key that the mac was initialized with."
javax.crypto.MacSpi.engineUpdate(byte),processes the given byte.
"javax.crypto.MacSpi.engineUpdate(byte[],int,int)","processes the first len bytes in input, starting at offset inclusive."
javax.crypto.MacSpi.engineUpdate(java.nio.ByteBuffer),processes input.
javax.crypto.SealedObject.getAlgorithm(),returns the algorithm that was used to seal this object.
javax.crypto.SealedObject.getObject(java.security.Key),retrieves the original (encapsulated) object.
javax.crypto.SealedObject.getObject(javax.crypto.Cipher),retrieves the original (encapsulated) object.
"javax.crypto.SealedObject.getObject(java.security.Key,java.lang.String)",retrieves the original (encapsulated) object.
javax.crypto.SecretKeyFactory.generateSecret(java.security.spec.KeySpec),generates a secretkey object from the provided key specification (key material).
javax.crypto.SecretKeyFactory.getAlgorithm(),returns the algorithm name of this secretkeyfactory object.
javax.crypto.SecretKeyFactory.getInstance(java.lang.String),returns a secretkeyfactory object that converts secret keys of the specified algorithm.
"javax.crypto.SecretKeyFactory.getInstance(java.lang.String,java.lang.String)",returns a secretkeyfactory object that converts secret keys of the specified algorithm.
"javax.crypto.SecretKeyFactory.getInstance(java.lang.String,java.security.Provider)",returns a secretkeyfactory object that converts secret keys of the specified algorithm.
"javax.crypto.SecretKeyFactory.getKeySpec(javax.crypto.SecretKey,java.lang.Class<?>)",returns a specification (key material) of the given key object in the requested format.
javax.crypto.SecretKeyFactory.getProvider(),returns the provider of this secretkeyfactory object.
javax.crypto.SecretKeyFactory.translateKey(javax.crypto.SecretKey),"translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this secret-key factory."
javax.crypto.SecretKeyFactorySpi.engineGenerateSecret(java.security.spec.KeySpec),generates a secretkey object from the provided key specification (key material).
"javax.crypto.SecretKeyFactorySpi.engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class<?>)",returns a specification (key material) of the given key object in the requested format.
javax.crypto.SecretKeyFactorySpi.engineTranslateKey(javax.crypto.SecretKey),"translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this secret-key factory."
javax.crypto.interfaces.DHKey.getParams(),returns the key parameters.
javax.crypto.interfaces.DHPrivateKey.getX(),"returns the private value, x."
javax.crypto.interfaces.DHPublicKey.getY(),"returns the public value, y."
javax.crypto.interfaces.PBEKey.getIterationCount(),returns the iteration count or 0 if not specified.
javax.crypto.interfaces.PBEKey.getPassword(),returns the password.
javax.crypto.interfaces.PBEKey.getSalt(),returns the salt or null if not specified.
javax.crypto.spec.DESedeKeySpec.getKey(),returns the des-ede key.
"javax.crypto.spec.DESedeKeySpec.isParityAdjusted(byte[],int)","checks if the given des-ede key, starting at offset inclusive, is parity-adjusted."
javax.crypto.spec.DESKeySpec.getKey(),returns the des key material.
"javax.crypto.spec.DESKeySpec.isParityAdjusted(byte[],int)","checks if the given des key material, starting at offset inclusive, is parity-adjusted."
"javax.crypto.spec.DESKeySpec.isWeak(byte[],int)",checks if the given des key material is weak or semi-weak.
javax.crypto.spec.DHGenParameterSpec.getExponentSize(),returns the size in bits of the random exponent (private value).
javax.crypto.spec.DHGenParameterSpec.getPrimeSize(),returns the size in bits of the prime modulus.
javax.crypto.spec.DHParameterSpec.getG(),returns the base generator g.
javax.crypto.spec.DHParameterSpec.getL(),"returns the size in bits, l, of the random exponent (private value)."
javax.crypto.spec.DHParameterSpec.getP(),returns the prime modulus p.
javax.crypto.spec.DHPrivateKeySpec.getG(),returns the base generator g.
javax.crypto.spec.DHPrivateKeySpec.getP(),returns the prime modulus p.
javax.crypto.spec.DHPrivateKeySpec.getX(),returns the private value x.
javax.crypto.spec.DHPublicKeySpec.getG(),returns the base generator g.
javax.crypto.spec.DHPublicKeySpec.getP(),returns the prime modulus p.
javax.crypto.spec.DHPublicKeySpec.getY(),returns the public value y.
javax.crypto.spec.GCMParameterSpec.getIV(),returns the initialization vector (iv).
javax.crypto.spec.GCMParameterSpec.getTLen(),returns the authentication tag length.
javax.crypto.spec.IvParameterSpec.getIV(),returns the initialization vector (iv).
javax.crypto.spec.OAEPParameterSpec.getDigestAlgorithm(),returns the message digest algorithm name.
javax.crypto.spec.OAEPParameterSpec.getMGFAlgorithm(),returns the mask generation function algorithm name.
javax.crypto.spec.OAEPParameterSpec.getMGFParameters(),returns the parameters for the mask generation function.
javax.crypto.spec.OAEPParameterSpec.getPSource(),returns the source of encoding input p.
javax.crypto.spec.PBEKeySpec.clearPassword(),clears the internal copy of the password.
javax.crypto.spec.PBEKeySpec.getIterationCount(),returns the iteration count or 0 if not specified.
javax.crypto.spec.PBEKeySpec.getKeyLength(),returns the to-be-derived key length or 0 if not specified.
javax.crypto.spec.PBEKeySpec.getPassword(),returns a copy of the password.
javax.crypto.spec.PBEKeySpec.getSalt(),returns a copy of the salt or null if not specified.
javax.crypto.spec.PBEParameterSpec.getIterationCount(),returns the iteration count.
javax.crypto.spec.PBEParameterSpec.getParameterSpec(),returns the cipher algorithm parameter specification.
javax.crypto.spec.PBEParameterSpec.getSalt(),returns the salt.
javax.crypto.spec.PSource.getAlgorithm(),returns the psource algorithm name.
javax.crypto.spec.PSource.PSpecified.getValue(),returns the value of encoding input p.
javax.crypto.spec.RC2ParameterSpec.equals(java.lang.Object),tests for equality between the specified object and this object.
javax.crypto.spec.RC2ParameterSpec.getEffectiveKeyBits(),returns the effective key size in bits.
javax.crypto.spec.RC2ParameterSpec.getIV(),returns the iv or null if this parameter set does not contain an iv.
javax.crypto.spec.RC2ParameterSpec.hashCode(),calculates a hash code value for the object.
javax.crypto.spec.RC5ParameterSpec.equals(java.lang.Object),tests for equality between the specified object and this object.
javax.crypto.spec.RC5ParameterSpec.getIV(),returns the iv or null if this parameter set does not contain an iv.
javax.crypto.spec.RC5ParameterSpec.getRounds(),returns the number of rounds.
javax.crypto.spec.RC5ParameterSpec.getVersion(),returns the version.
javax.crypto.spec.RC5ParameterSpec.getWordSize(),returns the word size in bits.
javax.crypto.spec.RC5ParameterSpec.hashCode(),calculates a hash code value for the object.
javax.crypto.spec.SecretKeySpec.equals(java.lang.Object),tests for equality between the specified object and this object.
javax.crypto.spec.SecretKeySpec.getAlgorithm(),returns the name of the algorithm associated with this secret key.
javax.crypto.spec.SecretKeySpec.getEncoded(),returns the key material of this secret key.
javax.crypto.spec.SecretKeySpec.getFormat(),returns the name of the encoding format for this secret key.
javax.crypto.spec.SecretKeySpec.hashCode(),calculates a hash code value for the object.
javax.imageio.IIOParamController.activate(javax.imageio.IIOParam),activates the controller.
"javax.imageio.ImageTranscoder.convertImageMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam)",returns an iiometadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding.
"javax.imageio.ImageTranscoder.convertStreamMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageWriteParam)",returns an iiometadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding.
javax.imageio.IIOImage.getMetadata(),"returns a reference to the current iiometadata object, or null is none is set."
javax.imageio.IIOImage.getNumThumbnails(),returns the number of thumbnails stored in this iioimage.
javax.imageio.IIOImage.getRaster(),"returns the currently set raster, or null if only a renderedimage is available."
javax.imageio.IIOImage.getRenderedImage(),"returns the currently set renderedimage, or null if only a raster is available."
javax.imageio.IIOImage.getThumbnail(int),returns a thumbnail associated with the main image.
javax.imageio.IIOImage.getThumbnails(),"returns the current list of thumbnail bufferedimages, or null if none is set."
javax.imageio.IIOImage.hasRaster(),returns true if this iioimage stores a raster rather than a renderedimage.
javax.imageio.IIOImage.setMetadata(javax.imageio.metadata.IIOMetadata),"sets the iiometadata to a new object, or null."
javax.imageio.IIOImage.setRaster(java.awt.image.Raster),sets the current raster.
javax.imageio.IIOImage.setRenderedImage(java.awt.image.RenderedImage),sets the current renderedimage.
javax.imageio.IIOImage.setThumbnails(java.util.List<? extends java.awt.image.BufferedImage>),"sets the list of thumbnails to a new list of bufferedimages, or to null."
javax.imageio.IIOParam.activateController(),activates the installed iioparamcontroller for this iioparam object and returns the resulting value.
javax.imageio.IIOParam.getController(),returns whatever iioparamcontroller is currently installed.
javax.imageio.IIOParam.getDefaultController(),"returns the default iioparamcontroller, if there is one, regardless of the currently installed controller."
javax.imageio.IIOParam.getDestinationOffset(),returns the offset in the destination image at which pixels are to be placed.
javax.imageio.IIOParam.getDestinationType(),"returns the type of image to be returned by the read, if one was set by a call to setdestination(imagetypespecifier), as an imagetypespecifier."
javax.imageio.IIOParam.getSourceBands(),returns the set of of source bands to be used.
javax.imageio.IIOParam.getSourceRegion(),returns the source region to be used.
javax.imageio.IIOParam.getSourceXSubsampling(),returns the number of source columns to advance for each pixel.
javax.imageio.IIOParam.getSourceYSubsampling(),returns the number of rows to advance for each pixel.
javax.imageio.IIOParam.getSubsamplingXOffset(),returns the horizontal offset of the subsampling grid.
javax.imageio.IIOParam.getSubsamplingYOffset(),returns the vertical offset of the subsampling grid.
javax.imageio.IIOParam.hasController(),returns true if there is a controller installed for this iioparam object.
javax.imageio.IIOParam.setController(javax.imageio.IIOParamController),"sets the iioparamcontroller to be used to provide settings for this iioparam object when the activatecontroller method is called, overriding any default controller."
javax.imageio.IIOParam.setDestinationOffset(java.awt.Point),"specifies the offset in the destination image at which future decoded pixels are to be placed, when reading, or where a region will be written, when writing."
javax.imageio.IIOParam.setDestinationType(javax.imageio.ImageTypeSpecifier),"sets the desired image type for the destination image, using an imagetypespecifier."
javax.imageio.IIOParam.setSourceBands(int[]),sets the indices of the source bands to be used.
javax.imageio.IIOParam.setSourceRegion(java.awt.Rectangle),sets the source region of interest.
"javax.imageio.IIOParam.setSourceSubsampling(int,int,int,int)",specifies a decimation subsampling to apply on i/o.
javax.imageio.ImageIO.createImageInputStream(java.lang.Object),returns an imageinputstream that will take its input from the given object.
javax.imageio.ImageIO.createImageOutputStream(java.lang.Object),returns an imageoutputstream that will send its output to the given object.
javax.imageio.ImageIO.getCacheDirectory(),"returns the current value set by setcachedirectory, or null if no explicit setting has been made."
javax.imageio.ImageIO.getImageReader(javax.imageio.ImageWriter),"returns an imagereadercorresponding to the given imagewriter, if there is one, or null if the plug-in for this imagewriter does not specify a corresponding imagereader, or if the given imagewriter is not registered."
javax.imageio.ImageIO.getImageReaders(java.lang.Object),"returns an iterator containing all currently registered imagereaders that claim to be able to decode the supplied object, typically an imageinputstream."
javax.imageio.ImageIO.getImageReadersByFormatName(java.lang.String),returns an iterator containing all currently registered imagereaders that claim to be able to decode the named format.
javax.imageio.ImageIO.getImageReadersByMIMEType(java.lang.String),returns an iterator containing all currently registered imagereaders that claim to be able to decode files with the given mime type.
javax.imageio.ImageIO.getImageReadersBySuffix(java.lang.String),returns an iterator containing all currently registered imagereaders that claim to be able to decode files with the given suffix.
"javax.imageio.ImageIO.getImageTranscoders(javax.imageio.ImageReader,javax.imageio.ImageWriter)",returns an iterator containing all currently registered imagetranscoders that claim to be able to transcode between the metadata of the given imagereader and imagewriter.
javax.imageio.ImageIO.getImageWriter(javax.imageio.ImageReader),"returns an imagewritercorresponding to the given imagereader, if there is one, or null if the plug-in for this imagereader does not specify a corresponding imagewriter, or if the given imagereader is not registered."
"javax.imageio.ImageIO.getImageWriters(javax.imageio.ImageTypeSpecifier,java.lang.String)",returns an iterator containing all currently registered imagewriters that claim to be able to encode images of the given layout (specified using an imagetypespecifier) in the given format.
javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String),returns an iterator containing all currently registered imagewriters that claim to be able to encode the named format.
javax.imageio.ImageIO.getImageWritersByMIMEType(java.lang.String),returns an iterator containing all currently registered imagewriters that claim to be able to encode files with the given mime type.
javax.imageio.ImageIO.getImageWritersBySuffix(java.lang.String),returns an iterator containing all currently registered imagewriters that claim to be able to encode files with the given suffix.
javax.imageio.ImageIO.getReaderFileSuffixes(),returns an array of strings listing all of the file suffixes associated with the formats understood by the current set of registered readers.
javax.imageio.ImageIO.getReaderFormatNames(),returns an array of strings listing all of the informal format names understood by the current set of registered readers.
javax.imageio.ImageIO.getReaderMIMETypes(),returns an array of strings listing all of the mime types understood by the current set of registered readers.
javax.imageio.ImageIO.getUseCache(),"returns the current value set by setusecache, or true if no explicit setting has been made."
javax.imageio.ImageIO.getWriterFileSuffixes(),returns an array of strings listing all of the file suffixes associated with the formats understood by the current set of registered writers.
javax.imageio.ImageIO.getWriterFormatNames(),returns an array of strings listing all of the informal format names understood by the current set of registered writers.
javax.imageio.ImageIO.getWriterMIMETypes(),returns an array of strings listing all of the mime types understood by the current set of registered writers.
javax.imageio.ImageIO.read(java.io.File),returns a bufferedimage as the result of decoding a supplied file with an imagereader chosen automatically from among those currently registered.
javax.imageio.ImageIO.read(java.io.InputStream),returns a bufferedimage as the result of decoding a supplied inputstream with an imagereader chosen automatically from among those currently registered.
javax.imageio.ImageIO.read(java.net.URL),returns a bufferedimage as the result of decoding a supplied url with an imagereader chosen automatically from among those currently registered.
javax.imageio.ImageIO.read(javax.imageio.stream.ImageInputStream),returns a bufferedimage as the result of decoding a supplied imageinputstream with an imagereader chosen automatically from among those currently registered.
javax.imageio.ImageIO.scanForPlugins(),"scans for plug-ins on the application class path, loads their service provider classes, and registers a service provider instance for each one found with the iioregistry."
javax.imageio.ImageIO.setCacheDirectory(java.io.File),sets the directory where cache files are to be created.
javax.imageio.ImageIO.setUseCache(boolean),sets a flag indicating whether a disk-based cache file should be used when creating imageinputstreams and imageoutputstreams.
"javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,javax.imageio.stream.ImageOutputStream)",writes an image using the an arbitrary imagewriter that supports the given format to an imageoutputstream.
"javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)",writes an image using an arbitrary imagewriter that supports the given format to a file.
"javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)",writes an image using an arbitrary imagewriter that supports the given format to an outputstream.
javax.imageio.ImageReader.abort(),requests that any current read operation be aborted.
javax.imageio.ImageReader.abortRequested(),returns true if a request to abort the current read operation has been made since the reader was instantiated or clearabortrequest was called.
javax.imageio.ImageReader.addIIOReadProgressListener(javax.imageio.event.IIOReadProgressListener),adds an iioreadprogresslistener to the list of registered progress listeners.
javax.imageio.ImageReader.addIIOReadUpdateListener(javax.imageio.event.IIOReadUpdateListener),adds an iioreadupdatelistener to the list of registered update listeners.
javax.imageio.ImageReader.addIIOReadWarningListener(javax.imageio.event.IIOReadWarningListener),adds an iioreadwarninglistener to the list of registered warning listeners.
javax.imageio.ImageReader.canReadRaster(),returns true if this plug-in supports reading just a raster of pixel data.
"javax.imageio.ImageReader.checkReadParamBandSettings(javax.imageio.ImageReadParam,int,int)",a utility method that may be used by readers to test the validity of the source and destination band settings of an imagereadparam.
javax.imageio.ImageReader.clearAbortRequest(),clears any previous abort request.
"javax.imageio.ImageReader.computeRegions(javax.imageio.ImageReadParam,int,int,java.awt.image.BufferedImage,java.awt.Rectangle,java.awt.Rectangle)","computes the source region of interest and the destination region of interest, taking the width and height of the source image, an optional destination image, and an optional imagereadparam into account."
javax.imageio.ImageReader.dispose(),allows any resources held by this object to be released.
javax.imageio.ImageReader.getAspectRatio(int),"returns the aspect ratio of the given image (that is, its width divided by its height) as a float."
javax.imageio.ImageReader.getAvailableLocales(),returns an array of locales that may be used to localize warning listeners and compression settings.
javax.imageio.ImageReader.getDefaultReadParam(),returns a default imagereadparam object appropriate for this format.
"javax.imageio.ImageReader.getDestination(javax.imageio.ImageReadParam,java.util.Iterator<javax.imageio.ImageTypeSpecifier>,int,int)",returns the bufferedimage to which decoded pixel data should be written.
javax.imageio.ImageReader.getFormatName(),returns a string identifying the format of the input source.
javax.imageio.ImageReader.getHeight(int),returns the height in pixels of the given image within the input source.
javax.imageio.ImageReader.getImageMetadata(int),"returns an iiometadata object containing metadata associated with the given image, or null if the reader does not support reading metadata, is set to ignore metadata, or if no metadata is available."
"javax.imageio.ImageReader.getImageMetadata(int,java.lang.String,java.util.Set<java.lang.String>)","returns an iiometadata object representing the metadata associated with the given image, or null if the reader does not support reading metadata or none is available."
javax.imageio.ImageReader.getImageTypes(int),"returns an iterator containing possible image types to which the given image may be decoded, in the form of imagetypespecifierss."
javax.imageio.ImageReader.getInput(),returns the imageinputstream or other object previously set as the input source.
javax.imageio.ImageReader.getLocale(),"returns the currently set locale, or null if none has been set."
javax.imageio.ImageReader.getMinIndex(),"returns the lowest valid index for reading an image, thumbnail, or image metadata."
javax.imageio.ImageReader.getNumImages(boolean),"returns the number of images, not including thumbnails, available from the current input source."
javax.imageio.ImageReader.getNumThumbnails(int),returns the number of thumbnail preview images associated with the given image.
javax.imageio.ImageReader.getOriginatingProvider(),returns the imagereaderspi that was passed in on the constructor.
javax.imageio.ImageReader.getRawImageType(int),"returns an imagetypespecifier indicating the samplemodel and colormodel which most closely represents the ""raw"" internal format of the image."
"javax.imageio.ImageReader.getSourceRegion(javax.imageio.ImageReadParam,int,int)","a utility method that may be used by readers to compute the region of the source image that should be read, taking into account any source region and subsampling offset settings in the supplied imagereadparam."
javax.imageio.ImageReader.getStreamMetadata(),returns an iiometadata object representing the metadata associated with the input source as a whole (i.
"javax.imageio.ImageReader.getStreamMetadata(java.lang.String,java.util.Set<java.lang.String>)",returns an iiometadata object representing the metadata associated with the input source as a whole (i.
"javax.imageio.ImageReader.getThumbnailHeight(int,int)","returns the height of the thumbnail preview image indexed by thumbnailindex, associated with the image indexed by imageindex."
"javax.imageio.ImageReader.getThumbnailWidth(int,int)","returns the width of the thumbnail preview image indexed by thumbnailindex, associated with the image indexed by imageindex."
javax.imageio.ImageReader.getTileGridXOffset(int),"returns the x coordinate of the upper-left corner of tile (0, 0) in the given image."
javax.imageio.ImageReader.getTileGridYOffset(int),"returns the y coordinate of the upper-left corner of tile (0, 0) in the given image."
javax.imageio.ImageReader.getTileHeight(int),returns the height of a tile in the given image.
javax.imageio.ImageReader.getTileWidth(int),returns the width of a tile in the given image.
javax.imageio.ImageReader.getWidth(int),returns the width in pixels of the given image within the input source.
javax.imageio.ImageReader.hasThumbnails(int),returns true if the given image has thumbnail preview images associated with it.
javax.imageio.ImageReader.isIgnoringMetadata(),returns true if the current input source has been marked as allowing metadata to be ignored by passing true as the ignoremetadata argument to the setinput method.
javax.imageio.ImageReader.isImageTiled(int),"returns true if the image is organized into tiles, that is, equal-sized non-overlapping rectangles."
javax.imageio.ImageReader.isRandomAccessEasy(int),returns true if the storage format of the given image places no inherent impediment on random access to pixels.
javax.imageio.ImageReader.isSeekForwardOnly(),returns true if the current input source has been marked as seek forward only by passing true as the seekforwardonly argument to the setinput method.
javax.imageio.ImageReader.processImageComplete(),broadcasts the completion of an image read to all registered iioreadprogresslisteners by calling their imagecomplete method.
javax.imageio.ImageReader.processImageProgress(float),broadcasts the current percentage of image completion to all registered iioreadprogresslisteners by calling their imageprogress method.
javax.imageio.ImageReader.processImageStarted(int),broadcasts the start of an image read to all registered iioreadprogresslisteners by calling their imagestarted method.
"javax.imageio.ImageReader.processImageUpdate(java.awt.image.BufferedImage,int,int,int,int,int,int,int[])",broadcasts the update of a set of samples to all registered iioreadupdatelisteners by calling their imageupdate method.
javax.imageio.ImageReader.processPassComplete(java.awt.image.BufferedImage),broadcasts the end of a progressive pass to all registered iioreadupdatelisteners by calling their passcomplete method.
"javax.imageio.ImageReader.processPassStarted(java.awt.image.BufferedImage,int,int,int,int,int,int,int,int[])",broadcasts the beginning of a progressive pass to all registered iioreadupdatelisteners by calling their passstarted method.
javax.imageio.ImageReader.processReadAborted(),broadcasts that the read has been aborted to all registered iioreadprogresslisteners by calling their readaborted method.
javax.imageio.ImageReader.processSequenceComplete(),broadcasts the completion of an sequence of image reads to all registered iioreadprogresslisteners by calling their sequencecomplete method.
javax.imageio.ImageReader.processSequenceStarted(int),broadcasts the start of an sequence of image reads to all registered iioreadprogresslisteners by calling their sequencestarted method.
javax.imageio.ImageReader.processThumbnailComplete(),broadcasts the completion of a thumbnail read to all registered iioreadprogresslisteners by calling their thumbnailcomplete method.
javax.imageio.ImageReader.processThumbnailPassComplete(java.awt.image.BufferedImage),broadcasts the end of a thumbnail progressive pass to all registered iioreadupdatelisteners by calling their thumbnailpasscomplete method.
"javax.imageio.ImageReader.processThumbnailPassStarted(java.awt.image.BufferedImage,int,int,int,int,int,int,int,int[])",broadcasts the beginning of a thumbnail progressive pass to all registered iioreadupdatelisteners by calling their thumbnailpassstarted method.
javax.imageio.ImageReader.processThumbnailProgress(float),broadcasts the current percentage of thumbnail completion to all registered iioreadprogresslisteners by calling their thumbnailprogress method.
"javax.imageio.ImageReader.processThumbnailStarted(int,int)",broadcasts the start of a thumbnail read to all registered iioreadprogresslisteners by calling their thumbnailstarted method.
"javax.imageio.ImageReader.processThumbnailUpdate(java.awt.image.BufferedImage,int,int,int,int,int,int,int[])",broadcasts the update of a set of samples in a thumbnail image to all registered iioreadupdatelisteners by calling their thumbnailupdate method.
javax.imageio.ImageReader.processWarningOccurred(java.lang.String),broadcasts a warning message to all registered iioreadwarninglisteners by calling their warningoccurred method.
"javax.imageio.ImageReader.processWarningOccurred(java.lang.String,java.lang.String)",broadcasts a localized warning message to all registered iioreadwarninglisteners by calling their warningoccurred method with a string taken from a resourcebundle.
javax.imageio.ImageReader.read(int),"reads the image indexed by imageindex and returns it as a complete bufferedimage, using a default imagereadparam."
"javax.imageio.ImageReader.read(int,javax.imageio.ImageReadParam)","reads the image indexed by imageindex and returns it as a complete bufferedimage, using a supplied imagereadparam."
"javax.imageio.ImageReader.readAll(int,javax.imageio.ImageReadParam)","reads the image indexed by imageindex and returns an iioimage containing the image, thumbnails, and associated image metadata, using a supplied imagereadparam."
javax.imageio.ImageReader.readAll(java.util.Iterator<? extends javax.imageio.ImageReadParam>),"returns an iterator containing all the images, thumbnails, and metadata, starting at the index given by getminindex, from the input source in the form of iioimage objects."
"javax.imageio.ImageReader.readAsRenderedImage(int,javax.imageio.ImageReadParam)",returns a renderedimage object that contains the contents of the image indexed by imageindex.
javax.imageio.ImageReader.readerSupportsThumbnails(),returns true if the image format understood by this reader supports thumbnail preview images associated with it.
"javax.imageio.ImageReader.readRaster(int,javax.imageio.ImageReadParam)","returns a new raster object containing the raw pixel data from the image stream, without any color conversion applied."
"javax.imageio.ImageReader.readThumbnail(int,int)","returns the thumbnail preview image indexed by thumbnailindex, associated with the image indexed by imageindex as a bufferedimage."
"javax.imageio.ImageReader.readTile(int,int,int)","reads the tile indicated by the tilex and tiley arguments, returning it as a bufferedimage."
"javax.imageio.ImageReader.readTileRaster(int,int,int)","returns a new raster object containing the raw pixel data from the tile, without any color conversion applied."
javax.imageio.ImageReader.removeAllIIOReadProgressListeners(),removes all currently registered iioreadprogresslistener objects.
javax.imageio.ImageReader.removeAllIIOReadUpdateListeners(),removes all currently registered iioreadupdatelistener objects.
javax.imageio.ImageReader.removeAllIIOReadWarningListeners(),removes all currently registered iioreadwarninglistener objects.
javax.imageio.ImageReader.removeIIOReadProgressListener(javax.imageio.event.IIOReadProgressListener),removes an iioreadprogresslistener from the list of registered progress listeners.
javax.imageio.ImageReader.removeIIOReadUpdateListener(javax.imageio.event.IIOReadUpdateListener),removes an iioreadupdatelistener from the list of registered update listeners.
javax.imageio.ImageReader.removeIIOReadWarningListener(javax.imageio.event.IIOReadWarningListener),removes an iioreadwarninglistener from the list of registered error listeners.
javax.imageio.ImageReader.reset(),restores the imagereader to its initial state.
"javax.imageio.ImageReader.setInput(java.lang.Object,boolean,boolean)",sets the input source to use to the given imageinputstream or other object.
"javax.imageio.ImageReader.setInput(java.lang.Object,boolean)",sets the input source to use to the given imageinputstream or other object.
javax.imageio.ImageReader.setInput(java.lang.Object),sets the input source to use to the given imageinputstream or other object.
javax.imageio.ImageReader.setLocale(java.util.Locale),sets the current locale of this imagereader to the given value.
javax.imageio.ImageReadParam.canSetSourceRenderSize(),"returns true if this reader allows the source image to be rendered at an arbitrary size as part of the decoding process, by means of the setsourcerendersize method."
javax.imageio.ImageReadParam.getDestination(),"returns the bufferedimage currently set by the setdestination method, or null if none is set."
javax.imageio.ImageReadParam.getDestinationBands(),returns the set of band indices where data will be placed.
javax.imageio.ImageReadParam.getSourceMaxProgressivePass(),if getsourcenumprogressivepasses is equal to integer.
javax.imageio.ImageReadParam.getSourceMinProgressivePass(),returns the index of the first progressive pass that will be decoded.
javax.imageio.ImageReadParam.getSourceNumProgressivePasses(),returns the number of the progressive passes that will be decoded.
javax.imageio.ImageReadParam.getSourceRenderSize(),"returns the width and height of the source image as it will be rendered during decoding, if they have been set via the setsourcerendersize method."
javax.imageio.ImageReadParam.setDestination(java.awt.image.BufferedImage),supplies a bufferedimage to be used as the destination for decoded pixel data.
javax.imageio.ImageReadParam.setDestinationBands(int[]),sets the indices of the destination bands where data will be placed.
"javax.imageio.ImageReadParam.setSourceProgressivePasses(int,int)",sets the range of progressive passes that will be decoded.
javax.imageio.ImageReadParam.setSourceRenderSize(java.awt.Dimension),"if the image is able to be rendered at an arbitrary size, sets the source width and height to the supplied values."
"javax.imageio.ImageTypeSpecifier.createBanded(java.awt.color.ColorSpace,int[],int[],int,boolean,boolean)",returns a specifier for a banded image format that will use a componentcolormodel and a bandedsamplemodel to store each channel in a separate array.
"javax.imageio.ImageTypeSpecifier.createBufferedImage(int,int)",creates a bufferedimage with a given width and height according to the specification embodied in this object.
javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int),returns an imagetypespecifier that encodes one of the standard bufferedimage types (other than type_custom).
javax.imageio.ImageTypeSpecifier.createFromRenderedImage(java.awt.image.RenderedImage),returns an imagetypespecifier that encodes the layout of a renderedimage (which may be a bufferedimage).
"javax.imageio.ImageTypeSpecifier.createGrayscale(int,int,boolean)",returns a specifier for a grayscale image format that will pack pixels of the given bit depth into array elements of the specified data type.
"javax.imageio.ImageTypeSpecifier.createGrayscale(int,int,boolean,boolean)",returns a specifier for a grayscale plus alpha image format that will pack pixels of the given bit depth into array elements of the specified data type.
"javax.imageio.ImageTypeSpecifier.createIndexed(byte[],byte[],byte[],byte[],int,int)",returns a specifier for an indexed-color image format that will pack index values of the given bit depth into array elements of the specified data type.
"javax.imageio.ImageTypeSpecifier.createInterleaved(java.awt.color.ColorSpace,int[],int,boolean,boolean)","returns a specifier for an interleaved image format that will use a componentcolormodel and a pixelinterleavedsamplemodel to store each pixel component in a separate byte, short, or int."
"javax.imageio.ImageTypeSpecifier.createPacked(java.awt.color.ColorSpace,int,int,int,int,int,boolean)","returns a specifier for a packed image format that will use a directcolormodel and a packed samplemodel to store each pixel packed into in a single byte, short, or int."
javax.imageio.ImageTypeSpecifier.equals(java.lang.Object),returns true if the given object is an imagetypespecifier and has a samplemodel and colormodel that are equal to those of this object.
javax.imageio.ImageTypeSpecifier.getBitsPerBand(int),return the number of bits used to represent samples of the given band.
javax.imageio.ImageTypeSpecifier.getBufferedImageType(),returns an int containing one of the enumerated constant values describing image formats from bufferedimage.
javax.imageio.ImageTypeSpecifier.getColorModel(),returns the colormodel specified by this object.
javax.imageio.ImageTypeSpecifier.getNumBands(),return the number of bands specified by this object.
javax.imageio.ImageTypeSpecifier.getNumComponents(),return the number of color components specified by this object.
javax.imageio.ImageTypeSpecifier.getSampleModel(),returns a samplemodel based on the settings encapsulated within this object.
"javax.imageio.ImageTypeSpecifier.getSampleModel(int,int)",returns a samplemodel based on the settings encapsulated within this object.
javax.imageio.ImageTypeSpecifier.hashCode(),returns the hash code for this imagetypespecifier.
javax.imageio.ImageWriteParam.canOffsetTiles(),returns true if the writer can perform tiling with non-zero grid offsets while writing.
javax.imageio.ImageWriteParam.canWriteCompressed(),returns true if this writer supports compression.
javax.imageio.ImageWriteParam.canWriteProgressive(),returns true if the writer can write out images as a series of passes of progressively increasing quality.
javax.imageio.ImageWriteParam.canWriteTiles(),returns true if the writer can perform tiling while writing.
javax.imageio.ImageWriteParam.getBitRate(float),returns a float indicating an estimate of the number of bits of output data for each bit of input image data at the given quality level.
javax.imageio.ImageWriteParam.getCompressionMode(),"returns the current compression mode, if compression is supported."
javax.imageio.ImageWriteParam.getCompressionQuality(),returns the current compression quality setting.
javax.imageio.ImageWriteParam.getCompressionQualityDescriptions(),returns an array of strings that may be used along with getcompressionqualityvalues as part of a user interface for setting or displaying the compression quality level.
javax.imageio.ImageWriteParam.getCompressionQualityValues(),returns an array of floats that may be used along with getcompressionqualitydescriptions as part of a user interface for setting or displaying the compression quality level.
javax.imageio.ImageWriteParam.getCompressionType(),"returns the currently set compression type, or null if none has been set."
javax.imageio.ImageWriteParam.getCompressionTypes(),"returns a list of available compression types, as an array or strings, or null if a compression type may not be chosen using these interfaces."
javax.imageio.ImageWriteParam.getLocale(),"returns the currently set locale, or null if only a default locale is supported."
javax.imageio.ImageWriteParam.getLocalizedCompressionTypeName(),"returns a localized version of the name of the current compression type, using the locale returned by getlocale."
javax.imageio.ImageWriteParam.getPreferredTileSizes(),returns an array of dimensions indicating the legal size ranges for tiles as they will be encoded in the output file or stream.
javax.imageio.ImageWriteParam.getProgressiveMode(),returns the current mode for writing the stream in a progressive manner.
javax.imageio.ImageWriteParam.getTileGridXOffset(),returns the horizontal tile grid offset of an image as it will be written to the output stream.
javax.imageio.ImageWriteParam.getTileGridYOffset(),returns the vertical tile grid offset of an image as it will be written to the output stream.
javax.imageio.ImageWriteParam.getTileHeight(),returns the height of each tile in an image as it will be written to the output stream.
javax.imageio.ImageWriteParam.getTileWidth(),returns the width of each tile in an image as it will be written to the output stream.
javax.imageio.ImageWriteParam.getTilingMode(),"returns the current tiling mode, if tiling is supported."
javax.imageio.ImageWriteParam.isCompressionLossless(),returns true if the current compression type provides lossless compression.
javax.imageio.ImageWriteParam.setCompressionMode(int),"specifies whether compression is to be performed, and if so how compression parameters are to be determined."
javax.imageio.ImageWriteParam.setCompressionQuality(float),sets the compression quality to a value between 0 and 1.
javax.imageio.ImageWriteParam.setCompressionType(java.lang.String),sets the compression type to one of the values indicated by getcompressiontypes.
javax.imageio.ImageWriteParam.setProgressiveMode(int),specifies that the writer is to write the image out in a progressive mode such that the stream will contain a series of scans of increasing quality.
"javax.imageio.ImageWriteParam.setTiling(int,int,int,int)",specifies that the image should be tiled in the output stream.
javax.imageio.ImageWriteParam.setTilingMode(int),"determines whether the image will be tiled in the output stream and, if it will, how the tiling parameters will be determined."
javax.imageio.ImageWriteParam.unsetCompression(),removes any previous compression type and quality settings.
javax.imageio.ImageWriteParam.unsetTiling(),removes any previous tile grid parameters specified by calls to settiling.
javax.imageio.ImageWriter.abort(),requests that any current write operation be aborted.
javax.imageio.ImageWriter.abortRequested(),returns true if a request to abort the current write operation has been made since the writer was instantiated or clearabortrequest was called.
javax.imageio.ImageWriter.addIIOWriteProgressListener(javax.imageio.event.IIOWriteProgressListener),adds an iiowriteprogresslistener to the list of registered progress listeners.
javax.imageio.ImageWriter.addIIOWriteWarningListener(javax.imageio.event.IIOWriteWarningListener),adds an iiowritewarninglistener to the list of registered warning listeners.
javax.imageio.ImageWriter.canInsertEmpty(int),"returns true if the writer supports the insertion of a new, empty image at the given index."
javax.imageio.ImageWriter.canInsertImage(int),returns true if the writer supports the insertion of a new image at the given index.
javax.imageio.ImageWriter.canRemoveImage(int),returns true if the writer supports the removal of an existing image at the given index.
javax.imageio.ImageWriter.canReplaceImageMetadata(int),returns true if it is possible to replace the image metadata associated with an existing image with index imageindex.
javax.imageio.ImageWriter.canReplacePixels(int),returns true if the writer allows pixels of the given image to be replaced using the replacepixels methods.
javax.imageio.ImageWriter.canReplaceStreamMetadata(),returns true if it is possible to replace the stream metadata already present in the output.
javax.imageio.ImageWriter.canWriteEmpty(),returns true if the writer supports the writing of a complete image stream consisting of a single image with undefined pixel values and associated metadata and thumbnails to the output.
javax.imageio.ImageWriter.canWriteRasters(),returns true if the methods that take an iioimage parameter are capable of dealing with a raster (as opposed to renderedimage) source image.
javax.imageio.ImageWriter.canWriteSequence(),returns true if the writer is able to append an image to an image stream that already contains header information and possibly prior images.
javax.imageio.ImageWriter.clearAbortRequest(),clears any previous abort request.
javax.imageio.ImageWriter.dispose(),allows any resources held by this object to be released.
javax.imageio.ImageWriter.endInsertEmpty(),completes the insertion of a new image that was begun with a prior call to prepareinsertempty.
javax.imageio.ImageWriter.endReplacePixels(),terminates a sequence of calls to replacepixels.
javax.imageio.ImageWriter.endWriteEmpty(),completes the writing of a new image that was begun with a prior call to preparewriteempty.
javax.imageio.ImageWriter.endWriteSequence(),completes the writing of a sequence of images begun with preparewritesequence.
javax.imageio.ImageWriter.getAvailableLocales(),returns an array of locales that may be used to localize warning listeners and compression settings.
"javax.imageio.ImageWriter.getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam)",returns an iiometadata object containing default values for encoding an image of the given type.
javax.imageio.ImageWriter.getDefaultStreamMetadata(javax.imageio.ImageWriteParam),returns an iiometadata object containing default values for encoding a stream of images.
javax.imageio.ImageWriter.getDefaultWriteParam(),"returns a new imagewriteparam object of the appropriate type for this file format containing default values, that is, those values that would be used if no imagewriteparam object were specified."
javax.imageio.ImageWriter.getLocale(),"returns the currently set locale, or null if none has been set."
"javax.imageio.ImageWriter.getNumThumbnailsSupported(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam,javax.imageio.metadata.IIOMetadata,javax.imageio.metadata.IIOMetadata)","returns the number of thumbnails supported by the format being written, given the image type and any additional write parameters and metadata objects that will be used during encoding."
javax.imageio.ImageWriter.getOriginatingProvider(),"returns the imagewriterspi object that created this imagewriter, or null if this object was not created through the iioregistry."
javax.imageio.ImageWriter.getOutput(),returns the imageoutputstream or other object set by the most recent call to the setoutput method.
"javax.imageio.ImageWriter.getPreferredThumbnailSizes(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam,javax.imageio.metadata.IIOMetadata,javax.imageio.metadata.IIOMetadata)",returns an array of dimensions indicating the legal size ranges for thumbnail images as they will be encoded in the output file or stream.
"javax.imageio.ImageWriter.prepareInsertEmpty(int,javax.imageio.ImageTypeSpecifier,int,int,javax.imageio.metadata.IIOMetadata,java.util.List<? extends java.awt.image.BufferedImage>,javax.imageio.ImageWriteParam)",begins the insertion of a new image with undefined pixel values into an existing image stream.
"javax.imageio.ImageWriter.prepareReplacePixels(int,java.awt.Rectangle)",prepares the writer to handle a series of calls to the replacepixels methods.
"javax.imageio.ImageWriter.prepareWriteEmpty(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,int,int,javax.imageio.metadata.IIOMetadata,java.util.List<? extends java.awt.image.BufferedImage>,javax.imageio.ImageWriteParam)","begins the writing of a complete image stream, consisting of a single image with undefined pixel values and associated metadata and thumbnails, to the output."
javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata),"prepares a stream to accept a series of subsequent writetosequence calls, using the provided stream metadata object."
javax.imageio.ImageWriter.processImageComplete(),broadcasts the completion of an image write to all registered iiowriteprogresslisteners by calling their imagecomplete method.
javax.imageio.ImageWriter.processImageProgress(float),broadcasts the current percentage of image completion to all registered iiowriteprogresslisteners by calling their imageprogress method.
javax.imageio.ImageWriter.processImageStarted(int),broadcasts the start of an image write to all registered iiowriteprogresslisteners by calling their imagestarted method.
javax.imageio.ImageWriter.processThumbnailComplete(),broadcasts the completion of a thumbnail write to all registered iiowriteprogresslisteners by calling their thumbnailcomplete method.
javax.imageio.ImageWriter.processThumbnailProgress(float),broadcasts the current percentage of thumbnail completion to all registered iiowriteprogresslisteners by calling their thumbnailprogress method.
"javax.imageio.ImageWriter.processThumbnailStarted(int,int)",broadcasts the start of a thumbnail write to all registered iiowriteprogresslisteners by calling their thumbnailstarted method.
"javax.imageio.ImageWriter.processWarningOccurred(int,java.lang.String)",broadcasts a warning message to all registered iiowritewarninglisteners by calling their warningoccurred method.
"javax.imageio.ImageWriter.processWarningOccurred(int,java.lang.String,java.lang.String)",broadcasts a localized warning message to all registered iiowritewarninglisteners by calling their warningoccurred method with a string taken from a resourcebundle.
javax.imageio.ImageWriter.processWriteAborted(),broadcasts that the write has been aborted to all registered iiowriteprogresslisteners by calling their writeaborted method.
javax.imageio.ImageWriter.removeAllIIOWriteProgressListeners(),removes all currently registered iiowriteprogresslistener objects.
javax.imageio.ImageWriter.removeAllIIOWriteWarningListeners(),removes all currently registered iiowritewarninglistener objects.
javax.imageio.ImageWriter.removeIIOWriteProgressListener(javax.imageio.event.IIOWriteProgressListener),removes an iiowriteprogresslistener from the list of registered progress listeners.
javax.imageio.ImageWriter.removeIIOWriteWarningListener(javax.imageio.event.IIOWriteWarningListener),removes an iiowritewarninglistener from the list of registered warning listeners.
javax.imageio.ImageWriter.removeImage(int),removes an image from the stream.
"javax.imageio.ImageWriter.replaceImageMetadata(int,javax.imageio.metadata.IIOMetadata)",replaces the image metadata associated with an existing image.
"javax.imageio.ImageWriter.replacePixels(java.awt.image.RenderedImage,javax.imageio.ImageWriteParam)",replaces a portion of an image already present in the output with a portion of the given image.
"javax.imageio.ImageWriter.replacePixels(java.awt.image.Raster,javax.imageio.ImageWriteParam)",replaces a portion of an image already present in the output with a portion of the given raster.
javax.imageio.ImageWriter.replaceStreamMetadata(javax.imageio.metadata.IIOMetadata),replaces the stream metadata in the output with new information.
javax.imageio.ImageWriter.reset(),restores the imagewriter to its initial state.
javax.imageio.ImageWriter.setLocale(java.util.Locale),sets the current locale of this imagewriter to the given value.
javax.imageio.ImageWriter.setOutput(java.lang.Object),sets the destination to the given imageoutputstream or other object.
"javax.imageio.ImageWriter.write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)",appends a complete image stream containing a single image and associated stream and image metadata and thumbnails to the output.
javax.imageio.ImageWriter.write(javax.imageio.IIOImage),appends a complete image stream containing a single image with default metadata and thumbnails to the output.
javax.imageio.ImageWriter.write(java.awt.image.RenderedImage),appends a complete image stream consisting of a single image with default metadata and thumbnails to the output.
"javax.imageio.ImageWriter.writeInsert(int,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)",inserts a new image into an existing image stream.
"javax.imageio.ImageWriter.writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam)","appends a single image and possibly associated metadata and thumbnails, to the output."
javax.imageio.event.IIOReadProgressListener.imageComplete(javax.imageio.ImageReader),reports that the current image read operation has completed.
"javax.imageio.event.IIOReadProgressListener.imageProgress(javax.imageio.ImageReader,float)",reports the approximate degree of completion of the current read call of the associated imagereader.
"javax.imageio.event.IIOReadProgressListener.imageStarted(javax.imageio.ImageReader,int)",reports that an image read operation is beginning.
javax.imageio.event.IIOReadProgressListener.readAborted(javax.imageio.ImageReader),reports that a read has been aborted via the reader's abort method.
javax.imageio.event.IIOReadProgressListener.sequenceComplete(javax.imageio.ImageReader),reports that a sequence of read operations has completed.
"javax.imageio.event.IIOReadProgressListener.sequenceStarted(javax.imageio.ImageReader,int)",reports that a sequence of read operations is beginning.
javax.imageio.event.IIOReadProgressListener.thumbnailComplete(javax.imageio.ImageReader),reports that a thumbnail read operation has completed.
"javax.imageio.event.IIOReadProgressListener.thumbnailProgress(javax.imageio.ImageReader,float)",reports the approximate degree of completion of the current getthumbnail call within the associated imagereader.
"javax.imageio.event.IIOReadProgressListener.thumbnailStarted(javax.imageio.ImageReader,int,int)",reports that a thumbnail read operation is beginning.
"javax.imageio.event.IIOReadUpdateListener.imageUpdate(javax.imageio.ImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int[])",reports that a given region of the image has been updated.
"javax.imageio.event.IIOReadUpdateListener.passComplete(javax.imageio.ImageReader,java.awt.image.BufferedImage)",reports that the current read operation has completed a progressive pass.
"javax.imageio.event.IIOReadUpdateListener.passStarted(javax.imageio.ImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int,int[])",reports that the current read operation is about to begin a progressive pass.
"javax.imageio.event.IIOReadUpdateListener.thumbnailPassComplete(javax.imageio.ImageReader,java.awt.image.BufferedImage)",reports that the current thumbnail read operation has completed a progressive pass.
"javax.imageio.event.IIOReadUpdateListener.thumbnailPassStarted(javax.imageio.ImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int,int[])",reports that the current thumbnail read operation is about to begin a progressive pass.
"javax.imageio.event.IIOReadUpdateListener.thumbnailUpdate(javax.imageio.ImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int[])",reports that a given region of a thumbnail image has been updated.
"javax.imageio.event.IIOReadWarningListener.warningOccurred(javax.imageio.ImageReader,java.lang.String)",reports the occurrence of a non-fatal error in decoding.
javax.imageio.event.IIOWriteProgressListener.imageComplete(javax.imageio.ImageWriter),reports that the image write operation has completed.
"javax.imageio.event.IIOWriteProgressListener.imageProgress(javax.imageio.ImageWriter,float)",reports the approximate degree of completion of the current write call within the associated imagewriter.
"javax.imageio.event.IIOWriteProgressListener.imageStarted(javax.imageio.ImageWriter,int)",reports that an image write operation is beginning.
javax.imageio.event.IIOWriteProgressListener.thumbnailComplete(javax.imageio.ImageWriter),reports that a thumbnail write operation has completed.
"javax.imageio.event.IIOWriteProgressListener.thumbnailProgress(javax.imageio.ImageWriter,float)",reports the approximate degree of completion of the current thumbnail write within the associated imagewriter.
"javax.imageio.event.IIOWriteProgressListener.thumbnailStarted(javax.imageio.ImageWriter,int,int)",reports that a thumbnail write operation is beginning.
javax.imageio.event.IIOWriteProgressListener.writeAborted(javax.imageio.ImageWriter),reports that a write has been aborted via the writer's abort method.
"javax.imageio.event.IIOWriteWarningListener.warningOccurred(javax.imageio.ImageWriter,int,java.lang.String)",reports the occurrence of a non-fatal error in encoding.
javax.imageio.metadata.IIOMetadataController.activate(javax.imageio.metadata.IIOMetadata),activates the controller.
"javax.imageio.metadata.IIOMetadataFormat.canNodeAppear(java.lang.String,javax.imageio.ImageTypeSpecifier)","returns true if the element (and the subtree below it) is allowed to appear in a metadata document for an image of the given type, defined by an imagetypespecifier."
"javax.imageio.metadata.IIOMetadataFormat.getAttributeDataType(java.lang.String,java.lang.String)","returns one of the constants starting with datatype_, indicating the format and interpretation of the value of the given attribute within the named element."
"javax.imageio.metadata.IIOMetadataFormat.getAttributeDefaultValue(java.lang.String,java.lang.String)","returns the default value of the named attribute, if it is not explicitly present within the named element, as a string, or null if no default value is available."
"javax.imageio.metadata.IIOMetadataFormat.getAttributeDescription(java.lang.String,java.lang.String,java.util.Locale)","returns a string containing a description of the named attribute, or null."
"javax.imageio.metadata.IIOMetadataFormat.getAttributeEnumerations(java.lang.String,java.lang.String)",returns an array of strings containing the legal enumerated values for the given attribute within the named element.
"javax.imageio.metadata.IIOMetadataFormat.getAttributeListMaxLength(java.lang.String,java.lang.String)",returns the maximum number of list items that may be used to define this attribute.
"javax.imageio.metadata.IIOMetadataFormat.getAttributeListMinLength(java.lang.String,java.lang.String)",returns the minimum number of list items that may be used to define this attribute.
"javax.imageio.metadata.IIOMetadataFormat.getAttributeMaxValue(java.lang.String,java.lang.String)",returns the maximum legal value for the attribute.
"javax.imageio.metadata.IIOMetadataFormat.getAttributeMinValue(java.lang.String,java.lang.String)",returns the minimum legal value for the attribute.
javax.imageio.metadata.IIOMetadataFormat.getAttributeNames(java.lang.String),returns an array of strings listing the names of the attributes that may be associated with the named element.
"javax.imageio.metadata.IIOMetadataFormat.getAttributeValueType(java.lang.String,java.lang.String)","returns one of the constants starting with value_, indicating whether the values of the given attribute within the named element are arbitrary, constrained to lie within a specified range, constrained to be one of a set of enumerated values, or are a whitespace-separated list of arbitrary values."
javax.imageio.metadata.IIOMetadataFormat.getChildNames(java.lang.String),"returns an array of strings indicating the names of the element which are allowed to be children of the named element, in the order in which they should appear."
javax.imageio.metadata.IIOMetadataFormat.getChildPolicy(java.lang.String),"returns one of the constants starting with child_policy_, indicating the legal pattern of children for the named element."
"javax.imageio.metadata.IIOMetadataFormat.getElementDescription(java.lang.String,java.util.Locale)","returns a string containing a description of the named element, or null."
javax.imageio.metadata.IIOMetadataFormat.getElementMaxChildren(java.lang.String),returns the maximum number of children of the named element with child policy child_policy_repeat.
javax.imageio.metadata.IIOMetadataFormat.getElementMinChildren(java.lang.String),returns the minimum number of children of the named element with child policy child_policy_repeat.
javax.imageio.metadata.IIOMetadataFormat.getObjectArrayMaxLength(java.lang.String),returns the maximum number of array elements that may be used to define the object reference within the named element.
javax.imageio.metadata.IIOMetadataFormat.getObjectArrayMinLength(java.lang.String),returns the minimum number of array elements that may be used to define the object reference within the named element.
javax.imageio.metadata.IIOMetadataFormat.getObjectClass(java.lang.String),returns the class type of the object reference stored within the element.
javax.imageio.metadata.IIOMetadataFormat.getObjectDefaultValue(java.lang.String),returns an objects containing the default value for the object reference within the named element.
javax.imageio.metadata.IIOMetadataFormat.getObjectEnumerations(java.lang.String),returns an array of objects containing the legal enumerated values for the object reference within the named element.
javax.imageio.metadata.IIOMetadataFormat.getObjectMaxValue(java.lang.String),returns the maximum legal value for the object reference within the named element.
javax.imageio.metadata.IIOMetadataFormat.getObjectMinValue(java.lang.String),returns the minimum legal value for the object reference within the named element.
javax.imageio.metadata.IIOMetadataFormat.getObjectValueType(java.lang.String),"returns one of the enumerated values starting with value_, indicating the type of values (enumeration, range, or array) that are allowed for the object reference."
javax.imageio.metadata.IIOMetadataFormat.getRootName(),returns the name of the root element of the format.
"javax.imageio.metadata.IIOMetadataFormat.isAttributeRequired(java.lang.String,java.lang.String)",returns true if the named attribute must be present within the named element.
javax.imageio.metadata.IIOMetadata.activateController(),activates the installed iiometadatacontroller for this iiometadata object and returns the resulting value.
javax.imageio.metadata.IIOMetadata.getAsTree(java.lang.String),returns an xml dom node object that represents the root of a tree of metadata contained within this object according to the conventions defined by a given metadata format.
javax.imageio.metadata.IIOMetadata.getController(),returns whatever iiometadatacontroller is currently installed.
javax.imageio.metadata.IIOMetadata.getDefaultController(),"returns the default iiometadatacontroller, if there is one, regardless of the currently installed controller."
javax.imageio.metadata.IIOMetadata.getExtraMetadataFormatNames(),"returns an array of strings containing the names of additional metadata formats, other than the native and standard formats, recognized by this plug-in's getastree, setfromtree, and mergetree methods."
javax.imageio.metadata.IIOMetadata.getMetadataFormat(java.lang.String),"returns an iiometadataformat object describing the given metadata format, or null if no description is available."
javax.imageio.metadata.IIOMetadata.getMetadataFormatNames(),"returns an array of strings containing the names of all metadata formats, including the native and standard formats, recognized by this plug-in's getastree, setfromtree, and mergetree methods."
javax.imageio.metadata.IIOMetadata.getNativeMetadataFormatName(),"returns the name of the ""native"" metadata format for this plug-in, which typically allows for lossless encoding and transmission of the metadata stored in the format handled by this plug-in."
javax.imageio.metadata.IIOMetadata.getStandardChromaNode(),returns an iiometadatanode representing the chroma information of the standard javax_imageio_1.
javax.imageio.metadata.IIOMetadata.getStandardCompressionNode(),returns an iiometadatanode representing the compression information of the standard javax_imageio_1.
javax.imageio.metadata.IIOMetadata.getStandardDataNode(),returns an iiometadatanode representing the data format information of the standard javax_imageio_1.
javax.imageio.metadata.IIOMetadata.getStandardDimensionNode(),returns an iiometadatanode representing the dimension information of the standard javax_imageio_1.
javax.imageio.metadata.IIOMetadata.getStandardDocumentNode(),returns an iiometadatanode representing the document information of the standard javax_imageio_1.
javax.imageio.metadata.IIOMetadata.getStandardTextNode(),returns an iiometadatanode representing the textual information of the standard javax_imageio_1.
javax.imageio.metadata.IIOMetadata.getStandardTileNode(),returns an iiometadatanode representing the tiling information of the standard javax_imageio_1.
javax.imageio.metadata.IIOMetadata.getStandardTransparencyNode(),returns an iiometadatanode representing the transparency information of the standard javax_imageio_1.
javax.imageio.metadata.IIOMetadata.getStandardTree(),a utility method to return a tree of iiometadatanodes representing the metadata contained within this object according to the conventions of the standard javax_imageio_1.
javax.imageio.metadata.IIOMetadata.hasController(),returns true if there is a controller installed for this iiometadata object.
javax.imageio.metadata.IIOMetadata.isReadOnly(),"returns true if this object does not support the mergetree, setfromtree, and reset methods."
javax.imageio.metadata.IIOMetadata.isStandardMetadataFormatSupported(),"returns true if the standard metadata format is supported by getmetadataformat, getastree, setfromtree, and mergetree."
"javax.imageio.metadata.IIOMetadata.mergeTree(java.lang.String,org.w3c.dom.Node)",alters the internal state of this iiometadata object from a tree of xml dom nodes whose syntax is defined by the given metadata format.
javax.imageio.metadata.IIOMetadata.reset(),"resets all the data stored in this object to default values, usually to the state this object was in immediately after construction, though the precise semantics are plug-in specific."
javax.imageio.metadata.IIOMetadata.setController(javax.imageio.metadata.IIOMetadataController),"sets the iiometadatacontroller to be used to provide settings for this iiometadata object when the activatecontroller method is called, overriding any default controller."
"javax.imageio.metadata.IIOMetadata.setFromTree(java.lang.String,org.w3c.dom.Node)",sets the internal state of this iiometadata object from a tree of xml dom nodes whose syntax is defined by the given metadata format.
"javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(java.lang.String,java.lang.String,int,boolean,java.lang.String)",adds a new attribute to a previously defined element that may be set to an arbitrary value.
"javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(java.lang.String,java.lang.String,int,boolean,java.lang.String,java.util.List<java.lang.String>)",adds a new attribute to a previously defined element that will be defined by a set of enumerated values.
"javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(java.lang.String,java.lang.String,int,boolean,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",adds a new attribute to a previously defined element that will be defined by a range of values.
"javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(java.lang.String,java.lang.String,int,boolean,int,int)",adds a new attribute to a previously defined element that will be defined by a list of values.
"javax.imageio.metadata.IIOMetadataFormatImpl.addBooleanAttribute(java.lang.String,java.lang.String,boolean,boolean)","adds a new attribute to a previously defined element that will be defined by the enumerated values true and false, with a datatype of datatype_boolean."
"javax.imageio.metadata.IIOMetadataFormatImpl.addChildElement(java.lang.String,java.lang.String)",adds an existing element to the list of legal children for a given parent node type.
"javax.imageio.metadata.IIOMetadataFormatImpl.addElement(java.lang.String,java.lang.String,int)",adds a new element type to this metadata document format with a child policy other than child_policy_repeat.
"javax.imageio.metadata.IIOMetadataFormatImpl.addElement(java.lang.String,java.lang.String,int,int)",adds a new element type to this metadata document format with a child policy of child_policy_repeat.
"javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(java.lang.String,java.lang.Class<T>,boolean,T)",allows an object reference of a given class type to be stored in nodes implementing the named element.
"javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(java.lang.String,java.lang.Class<T>,boolean,T,java.util.List<? extends T>)",allows an object reference of a given class type to be stored in nodes implementing the named element.
"javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(java.lang.String,java.lang.Class<T>,T,java.lang.Comparable<? super T>,java.lang.Comparable<? super T>,boolean,boolean)",allows an object reference of a given class type to be stored in nodes implementing the named element.
"javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(java.lang.String,java.lang.Class<?>,int,int)",allows an object reference of a given class type to be stored in nodes implementing the named element.
"javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDescription(java.lang.String,java.lang.String,java.util.Locale)","returns a string containing a description of the named attribute, or null."
"javax.imageio.metadata.IIOMetadataFormatImpl.getElementDescription(java.lang.String,java.util.Locale)","returns a string containing a description of the named element, or null."
javax.imageio.metadata.IIOMetadataFormatImpl.getResourceBaseName(),returns the currently set base name for locating resourcebundles.
javax.imageio.metadata.IIOMetadataFormatImpl.getStandardFormatInstance(),"returns an iiometadataformat object describing the standard, plug-in neutral javax."
"javax.imageio.metadata.IIOMetadataFormatImpl.removeAttribute(java.lang.String,java.lang.String)",removes an attribute from a previously defined element.
javax.imageio.metadata.IIOMetadataFormatImpl.removeElement(java.lang.String),removes an element from the format.
javax.imageio.metadata.IIOMetadataFormatImpl.removeObjectValue(java.lang.String),disallows an object reference from being stored in nodes implementing the named element.
javax.imageio.metadata.IIOMetadataFormatImpl.setResourceBaseName(java.lang.String),sets a new base name for locating resourcebundles containing descriptions of elements and attributes for this format.
javax.imageio.metadata.IIOMetadataNode.appendChild(org.w3c.dom.Node),adds the node newchild to the end of the list of children of this node.
javax.imageio.metadata.IIOMetadataNode.cloneNode(boolean),returns a duplicate of this node.
javax.imageio.metadata.IIOMetadataNode.compareDocumentPosition(org.w3c.dom.Node),this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
javax.imageio.metadata.IIOMetadataNode.getAttribute(java.lang.String),retrieves an attribute value by name.
javax.imageio.metadata.IIOMetadataNode.getAttributes(),returns a namednodemap containing the attributes of this node.
javax.imageio.metadata.IIOMetadataNode.getBaseURI(),this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
javax.imageio.metadata.IIOMetadataNode.getChildNodes(),returns a nodelist that contains all children of this node.
"javax.imageio.metadata.IIOMetadataNode.getFeature(java.lang.String,java.lang.String)",this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
javax.imageio.metadata.IIOMetadataNode.getFirstChild(),"returns the first child of this node, or null if the node has no children."
javax.imageio.metadata.IIOMetadataNode.getLastChild(),"returns the last child of this node, or null if the node has no children."
javax.imageio.metadata.IIOMetadataNode.getNamespaceURI(),"returns null, since namespaces are not supported."
javax.imageio.metadata.IIOMetadataNode.getNextSibling(),"returns the next sibling of this node, or null if the node has no next sibling."
javax.imageio.metadata.IIOMetadataNode.getNodeName(),returns the node name associated with this node.
javax.imageio.metadata.IIOMetadataNode.getNodeType(),"returns the node type, which is always element_node."
javax.imageio.metadata.IIOMetadataNode.getNodeValue(),returns the value associated with this node.
javax.imageio.metadata.IIOMetadataNode.getOwnerDocument(),"returns null, since iiometadatanodes do not belong to any document."
javax.imageio.metadata.IIOMetadataNode.getParentNode(),returns the parent of this node.
javax.imageio.metadata.IIOMetadataNode.getPrefix(),"returns null, since namespaces are not supported."
javax.imageio.metadata.IIOMetadataNode.getPreviousSibling(),"returns the previous sibling of this node, or null if this node has no previous sibling."
javax.imageio.metadata.IIOMetadataNode.getSchemaTypeInfo(),this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
javax.imageio.metadata.IIOMetadataNode.getTextContent(),this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
javax.imageio.metadata.IIOMetadataNode.getUserData(java.lang.String),this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
javax.imageio.metadata.IIOMetadataNode.getUserObject(),returns the object value associated with this node.
javax.imageio.metadata.IIOMetadataNode.hasChildNodes(),returns true if this node has child nodes.
"javax.imageio.metadata.IIOMetadataNode.insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)",inserts the node newchild before the existing child node refchild.
javax.imageio.metadata.IIOMetadataNode.isDefaultNamespace(java.lang.String),this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
javax.imageio.metadata.IIOMetadataNode.isEqualNode(org.w3c.dom.Node),this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
javax.imageio.metadata.IIOMetadataNode.isSameNode(org.w3c.dom.Node),this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
"javax.imageio.metadata.IIOMetadataNode.isSupported(java.lang.String,java.lang.String)",returns false since dom features are not supported.
javax.imageio.metadata.IIOMetadataNode.lookupNamespaceURI(java.lang.String),this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
javax.imageio.metadata.IIOMetadataNode.lookupPrefix(java.lang.String),this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
javax.imageio.metadata.IIOMetadataNode.normalize(),"does nothing, since iiometadatanodes do not contain text children."
javax.imageio.metadata.IIOMetadataNode.removeChild(org.w3c.dom.Node),"removes the child node indicated by oldchild from the list of children, and returns it."
"javax.imageio.metadata.IIOMetadataNode.replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)","replaces the child node oldchild with newchild in the list of children, and returns the oldchild node."
"javax.imageio.metadata.IIOMetadataNode.setIdAttribute(java.lang.String,boolean)",this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
"javax.imageio.metadata.IIOMetadataNode.setIdAttributeNode(org.w3c.dom.Attr,boolean)",this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
"javax.imageio.metadata.IIOMetadataNode.setIdAttributeNS(java.lang.String,java.lang.String,boolean)",this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
javax.imageio.metadata.IIOMetadataNode.setNodeValue(java.lang.String),sets the string value associated with this node.
javax.imageio.metadata.IIOMetadataNode.setPrefix(java.lang.String),"does nothing, since namespaces are not supported."
javax.imageio.metadata.IIOMetadataNode.setTextContent(java.lang.String),this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
"javax.imageio.metadata.IIOMetadataNode.setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)",this dom level 3 method is not supported for iiometadatanode and will throw a domexception.
javax.imageio.metadata.IIOMetadataNode.setUserObject(java.lang.Object),sets the value associated with this node.
javax.imageio.metadata.IIOInvalidTreeException.getOffendingNode(),returns the node that caused the error in parsing.
javax.imageio.plugins.bmp.BMPImageWriteParam.isTopDown(),returns the value of the topdown parameter.
javax.imageio.plugins.bmp.BMPImageWriteParam.setTopDown(boolean),"if set, the data will be written out in a top-down manner, the first scanline being written first."
javax.imageio.plugins.jpeg.JPEGHuffmanTable.getLengths(),returns an array of shorts containing the number of values for each length in the huffman table.
javax.imageio.plugins.jpeg.JPEGHuffmanTable.getValues(),returns an array of shorts containing the values arranged by increasing length of their corresponding codes.
javax.imageio.plugins.jpeg.JPEGHuffmanTable.toString(),returns a string representing this huffman table.
javax.imageio.plugins.jpeg.JPEGImageReadParam.areTablesSet(),returns true if tables are currently set.
javax.imageio.plugins.jpeg.JPEGImageReadParam.getACHuffmanTables(),"returns a copy of the array of ac huffman tables set on the most recent call to setdecodetables, or null if tables are not currently set."
javax.imageio.plugins.jpeg.JPEGImageReadParam.getDCHuffmanTables(),"returns a copy of the array of dc huffman tables set on the most recent call to setdecodetables, or null if tables are not currently set."
javax.imageio.plugins.jpeg.JPEGImageReadParam.getQTables(),"returns a copy of the array of quantization tables set on the most recent call to setdecodetables, or null if tables are not currently set."
"javax.imageio.plugins.jpeg.JPEGImageReadParam.setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[],javax.imageio.plugins.jpeg.JPEGHuffmanTable[],javax.imageio.plugins.jpeg.JPEGHuffmanTable[])",sets the quantization and huffman tables to use in decoding abbreviated streams.
javax.imageio.plugins.jpeg.JPEGImageReadParam.unsetDecodeTables(),removes any quantization and huffman tables that are currently set.
javax.imageio.plugins.jpeg.JPEGImageWriteParam.areTablesSet(),returns true if tables are currently set.
javax.imageio.plugins.jpeg.JPEGImageWriteParam.getACHuffmanTables(),"returns a copy of the array of ac huffman tables set on the most recent call to setencodetables, or null if tables are not currently set."
javax.imageio.plugins.jpeg.JPEGImageWriteParam.getDCHuffmanTables(),"returns a copy of the array of dc huffman tables set on the most recent call to setencodetables, or null if tables are not currently set."
javax.imageio.plugins.jpeg.JPEGImageWriteParam.getOptimizeHuffmanTables(),"returns the value passed into the most recent call to setoptimizehuffmantables, or false if setoptimizehuffmantables has never been called."
javax.imageio.plugins.jpeg.JPEGImageWriteParam.getQTables(),"returns a copy of the array of quantization tables set on the most recent call to setencodetables, or null if tables are not currently set."
javax.imageio.plugins.jpeg.JPEGImageWriteParam.isCompressionLossless(),returns false since the jpeg plug-in only supports lossy compression.
"javax.imageio.plugins.jpeg.JPEGImageWriteParam.setEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable[],javax.imageio.plugins.jpeg.JPEGHuffmanTable[],javax.imageio.plugins.jpeg.JPEGHuffmanTable[])",sets the quantization and huffman tables to use in encoding abbreviated streams.
javax.imageio.plugins.jpeg.JPEGImageWriteParam.setOptimizeHuffmanTables(boolean),tells the writer to generate optimized huffman tables for the image as part of the writing process.
javax.imageio.plugins.jpeg.JPEGImageWriteParam.unsetCompression(),removes any previous compression quality setting.
javax.imageio.plugins.jpeg.JPEGImageWriteParam.unsetEncodeTables(),removes any quantization and huffman tables that are currently set.
"javax.imageio.plugins.jpeg.JPEGQTable.getScaledInstance(float,boolean)",returns a new quantization table where the values are multiplied by scalefactor and then clamped to the range 1.
javax.imageio.plugins.jpeg.JPEGQTable.getTable(),returns a copy of the current quantization table as an array of ints in natural (not zig-zag) order.
javax.imageio.plugins.jpeg.JPEGQTable.toString(),returns a string representing this quantization table.
"javax.imageio.spi.RegisterableService.onDeregistration(javax.imageio.spi.ServiceRegistry,java.lang.Class<?>)",called when an object implementing this interface is removed from the given category of the given registry.
"javax.imageio.spi.RegisterableService.onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class<?>)",called when an object implementing this interface is added to the given category of the given registry.
javax.imageio.spi.ServiceRegistry.Filter.filter(java.lang.Object),returns true if the given provider object matches the criterion defined by this filter.
javax.imageio.spi.IIORegistry.getDefaultInstance(),returns the default iioregistry instance used by the image i/o api.
javax.imageio.spi.IIORegistry.registerApplicationClasspathSpis(),"registers all available service providers found on the application class path, using the default classloader."
javax.imageio.spi.IIOServiceProvider.getDescription(java.util.Locale),"returns a brief, human-readable description of this service provider and its associated implementation."
javax.imageio.spi.IIOServiceProvider.getVendorName(),returns the name of the vendor responsible for creating this service provider and its associated implementation.
javax.imageio.spi.IIOServiceProvider.getVersion(),returns a string describing the version number of this service provider and its associated implementation.
"javax.imageio.spi.IIOServiceProvider.onDeregistration(javax.imageio.spi.ServiceRegistry,java.lang.Class<?>)",a callback that will be whenever the spi class has been deregistered from a serviceregistry.
"javax.imageio.spi.IIOServiceProvider.onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class<?>)",a callback that will be called exactly once after the spi class has been instantiated and registered in a serviceregistry.
javax.imageio.spi.ImageInputStreamSpi.canUseCacheFile(),returns true if the imageinputstream implementation associated with this service provider can optionally make use of a cache file for improved performance and/or memory footrprint.
"javax.imageio.spi.ImageInputStreamSpi.createInputStreamInstance(java.lang.Object,boolean,java.io.File)",returns an instance of the imageinputstream implementation associated with this service provider.
javax.imageio.spi.ImageInputStreamSpi.createInputStreamInstance(java.lang.Object),returns an instance of the imageinputstream implementation associated with this service provider.
javax.imageio.spi.ImageInputStreamSpi.getInputClass(),"returns a class object representing the class or interface type that must be implemented by an input source in order to be ""wrapped"" in an imageinputstream via the createinputstreaminstance method."
javax.imageio.spi.ImageInputStreamSpi.needsCacheFile(),returns true if the imageinputstream implementation associated with this service provider requires the use of a cache file.
javax.imageio.spi.ImageOutputStreamSpi.canUseCacheFile(),returns true if the imageoutputstream implementation associated with this service provider can optionally make use of a cache file for improved performance and/or memory footrprint.
"javax.imageio.spi.ImageOutputStreamSpi.createOutputStreamInstance(java.lang.Object,boolean,java.io.File)",returns an instance of the imageoutputstream implementation associated with this service provider.
javax.imageio.spi.ImageOutputStreamSpi.createOutputStreamInstance(java.lang.Object),returns an instance of the imageoutputstream implementation associated with this service provider.
javax.imageio.spi.ImageOutputStreamSpi.getOutputClass(),"returns a class object representing the class or interface type that must be implemented by an output destination in order to be ""wrapped"" in an imageoutputstream via the createoutputstreaminstance method."
javax.imageio.spi.ImageOutputStreamSpi.needsCacheFile(),returns true if the imageoutputstream implementation associated with this service provider requires the use of a cache file.
javax.imageio.spi.ImageReaderSpi.canDecodeInput(java.lang.Object),returns true if the supplied source object appears to be of the format supported by this reader.
javax.imageio.spi.ImageReaderSpi.createReaderInstance(),returns an instance of the imagereader implementation associated with this service provider.
javax.imageio.spi.ImageReaderSpi.createReaderInstance(java.lang.Object),returns an instance of the imagereader implementation associated with this service provider.
javax.imageio.spi.ImageReaderSpi.getImageWriterSpiNames(),"returns an array of strings containing the fully qualified names of all the imagewriterspi classes that can understand the internal metadata representation used by the imagereader associated with this service provider, or null if there are no such imagewriters specified."
javax.imageio.spi.ImageReaderSpi.getInputTypes(),returns an array of class objects indicating what types of objects may be used as arguments to the reader's setinput method.
javax.imageio.spi.ImageReaderSpi.isOwnReader(javax.imageio.ImageReader),returns true if the imagereader object passed in is an instance of the imagereader associated with this service provider.
javax.imageio.spi.ImageReaderWriterSpi.getExtraImageMetadataFormatNames(),"returns an array of strings containing the names of additional document formats, other than the native and standard formats, recognized by the getastree and setfromtree methods on the image metadata objects produced or consumed by this plug-in."
javax.imageio.spi.ImageReaderWriterSpi.getExtraStreamMetadataFormatNames(),"returns an array of strings containing the names of additional document formats, other than the native and standard formats, recognized by the getastree and setfromtree methods on the stream metadata objects produced or consumed by this plug-in."
javax.imageio.spi.ImageReaderWriterSpi.getFileSuffixes(),returns an array of strings containing a list of file suffixes associated with the formats that are generally usable by the imagereader or imagewriter implementation associated with this service provider.
javax.imageio.spi.ImageReaderWriterSpi.getFormatNames(),returns an array of strings containing human-readable names for the formats that are generally usable by the imagereader or imagewriter implementation associated with this service provider.
javax.imageio.spi.ImageReaderWriterSpi.getImageMetadataFormat(java.lang.String),"returns an iiometadataformat object describing the given image metadata format, or null if no description is available."
javax.imageio.spi.ImageReaderWriterSpi.getMIMETypes(),returns an array of strings containing a list of mime types associated with the formats that are generally usable by the imagereader or imagewriter implementation associated with this service provider.
javax.imageio.spi.ImageReaderWriterSpi.getNativeImageMetadataFormatName(),"returns the name of the ""native"" image metadata format for this plug-in, which typically allows for lossless encoding and transmission of the image metadata stored in the format handled by this plug-in."
javax.imageio.spi.ImageReaderWriterSpi.getNativeStreamMetadataFormatName(),"returns the name of the ""native"" stream metadata format for this plug-in, which typically allows for lossless encoding and transmission of the stream metadata stored in the format handled by this plug-in."
javax.imageio.spi.ImageReaderWriterSpi.getPluginClassName(),returns the fully-qualified class name of the imagereader or imagewriter plug-in associated with this service provider.
javax.imageio.spi.ImageReaderWriterSpi.getStreamMetadataFormat(java.lang.String),"returns an iiometadataformat object describing the given stream metadata format, or null if no description is available."
javax.imageio.spi.ImageReaderWriterSpi.isStandardImageMetadataFormatSupported(),returns true if the standard metadata format is among the document formats recognized by the getastree and setfromtree methods on the image metadata objects produced or consumed by this plug-in.
javax.imageio.spi.ImageReaderWriterSpi.isStandardStreamMetadataFormatSupported(),returns true if the standard metadata format is among the document formats recognized by the getastree and setfromtree methods on the stream metadata objects produced or consumed by this plug-in.
javax.imageio.spi.ImageTranscoderSpi.createTranscoderInstance(),returns an instance of the imagetranscoder implementation associated with this service provider.
javax.imageio.spi.ImageTranscoderSpi.getReaderServiceProviderName(),returns the fully qualified class name of an imagereaderspi class that generates iiometadata objects that may be used as input to this transcoder.
javax.imageio.spi.ImageTranscoderSpi.getWriterServiceProviderName(),returns the fully qualified class name of an imagewriterspi class that generates iiometadata objects that may be used as input to this transcoder.
javax.imageio.spi.ImageWriterSpi.canEncodeImage(javax.imageio.ImageTypeSpecifier),returns true if the imagewriter implementation associated with this service provider is able to encode an image with the given layout.
javax.imageio.spi.ImageWriterSpi.canEncodeImage(java.awt.image.RenderedImage),returns true if the imagewriter implementation associated with this service provider is able to encode the given renderedimage instance.
javax.imageio.spi.ImageWriterSpi.createWriterInstance(),returns an instance of the imagewriter implementation associated with this service provider.
javax.imageio.spi.ImageWriterSpi.createWriterInstance(java.lang.Object),returns an instance of the imagewriter implementation associated with this service provider.
javax.imageio.spi.ImageWriterSpi.getImageReaderSpiNames(),"returns an array of strings containing all the fully qualified names of all the imagereaderspi classes that can understand the internal metadata representation used by the imagewriter associated with this service provider, or null if there are no such imagereaders specified."
javax.imageio.spi.ImageWriterSpi.getOutputTypes(),returns an array of class objects indicating what types of objects may be used as arguments to the writer's setoutput method.
javax.imageio.spi.ImageWriterSpi.isFormatLossless(),returns true if the format that this writer outputs preserves pixel data bit-accurately.
javax.imageio.spi.ImageWriterSpi.isOwnWriter(javax.imageio.ImageWriter),returns true if the imagewriter object passed in is an instance of the imagewriter associated with this service provider.
javax.imageio.spi.ServiceRegistry.contains(java.lang.Object),returns true if provider is currently registered.
javax.imageio.spi.ServiceRegistry.deregisterAll(java.lang.Class<?>),deregisters all service provider object currently registered under the given category.
javax.imageio.spi.ServiceRegistry.deregisterAll(),deregisters all currently registered service providers from all categories.
"javax.imageio.spi.ServiceRegistry.deregisterServiceProvider(T,java.lang.Class<T>)",removes a service provider object from the given category.
javax.imageio.spi.ServiceRegistry.deregisterServiceProvider(java.lang.Object),removes a service provider object from all categories that contain it.
javax.imageio.spi.ServiceRegistry.finalize(),finalizes this object prior to garbage collection.
javax.imageio.spi.ServiceRegistry.getCategories(),returns an iterator of class objects indicating the current set of categories.
javax.imageio.spi.ServiceRegistry.getServiceProviderByClass(java.lang.Class<T>),returns the currently registered service provider object that is of the given class type.
"javax.imageio.spi.ServiceRegistry.getServiceProviders(java.lang.Class<T>,boolean)",returns an iterator containing all registered service providers in the given category.
"javax.imageio.spi.ServiceRegistry.getServiceProviders(java.lang.Class<T>,javax.imageio.spi.ServiceRegistry.Filter,boolean)",returns an iterator containing service provider objects within a given category that satisfy a criterion imposed by the supplied serviceregistry.
"javax.imageio.spi.ServiceRegistry.lookupProviders(java.lang.Class<T>,java.lang.ClassLoader)",searches for implementations of a particular service class using the given class loader.
javax.imageio.spi.ServiceRegistry.lookupProviders(java.lang.Class<T>),locates and incrementally instantiates the available providers of a given service using the context class loader.
"javax.imageio.spi.ServiceRegistry.registerServiceProvider(T,java.lang.Class<T>)",adds a service provider object to the registry.
javax.imageio.spi.ServiceRegistry.registerServiceProvider(java.lang.Object),adds a service provider object to the registry.
javax.imageio.spi.ServiceRegistry.registerServiceProviders(java.util.Iterator<?>),"adds a set of service provider objects, taken from an iterator to the registry."
"javax.imageio.spi.ServiceRegistry.setOrdering(java.lang.Class<T>,T,T)",sets a pairwise ordering between two service provider objects within a given category.
"javax.imageio.spi.ServiceRegistry.unsetOrdering(java.lang.Class<T>,T,T)",sets a pairwise ordering between two service provider objects within a given category.
javax.imageio.stream.ImageInputStream.close(),closes the stream.
javax.imageio.stream.ImageInputStream.flush(),discards the initial position of the stream prior to the current stream position.
javax.imageio.stream.ImageInputStream.flushBefore(long),discards the initial portion of the stream prior to the indicated position.
javax.imageio.stream.ImageInputStream.getBitOffset(),"returns the current bit offset, as an integer between 0 and 7, inclusive."
javax.imageio.stream.ImageInputStream.getByteOrder(),returns the byte order with which data values will be read from this stream as an instance of the java.
javax.imageio.stream.ImageInputStream.getFlushedPosition(),returns the earliest position in the stream to which seeking may be performed.
javax.imageio.stream.ImageInputStream.getStreamPosition(),returns the current byte position of the stream.
javax.imageio.stream.ImageInputStream.isCached(),returns true if this imageinputstream caches data itself in order to allow seeking backwards.
javax.imageio.stream.ImageInputStream.isCachedFile(),"returns true if this imageinputstream caches data itself in order to allow seeking backwards, and the cache is kept in a temporary file."
javax.imageio.stream.ImageInputStream.isCachedMemory(),"returns true if this imageinputstream caches data itself in order to allow seeking backwards, and the cache is kept in main memory."
javax.imageio.stream.ImageInputStream.length(),"returns the total length of the stream, if known."
javax.imageio.stream.ImageInputStream.mark(),marks a position in the stream to be returned to by a subsequent call to reset.
javax.imageio.stream.ImageInputStream.read(),reads a single byte from the stream and returns it as an integer between 0 and 255.
javax.imageio.stream.ImageInputStream.read(byte[]),reads up to b.
"javax.imageio.stream.ImageInputStream.read(byte[],int,int)","reads up to len bytes from the stream, and stores them into b starting at index off."
javax.imageio.stream.ImageInputStream.readBit(),reads a single bit from the stream and returns it as an int with the value 0 or 1.
javax.imageio.stream.ImageInputStream.readBits(int),"reads a bitstring from the stream and returns it as a long, with the first bit read becoming the most significant bit of the output."
javax.imageio.stream.ImageInputStream.readBoolean(),"reads a byte from the stream and returns a boolean value of true if it is nonzero, false if it is zero."
javax.imageio.stream.ImageInputStream.readByte(),reads a byte from the stream and returns it as a byte value.
"javax.imageio.stream.ImageInputStream.readBytes(javax.imageio.stream.IIOByteBuffer,int)","reads up to len bytes from the stream, and modifies the supplied iiobytebuffer to indicate the byte array, offset, and length where the data may be found."
javax.imageio.stream.ImageInputStream.readDouble(),"reads 8 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a double."
javax.imageio.stream.ImageInputStream.readFloat(),"reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a float."
"javax.imageio.stream.ImageInputStream.readFully(byte[],int,int)","reads len bytes from the stream, and stores them into b starting at index off."
javax.imageio.stream.ImageInputStream.readFully(byte[]),reads b.
"javax.imageio.stream.ImageInputStream.readFully(short[],int,int)","reads len shorts (signed 16-bit integers) from the stream according to the current byte order, and stores them into s starting at index off."
"javax.imageio.stream.ImageInputStream.readFully(char[],int,int)","reads len chars (unsigned 16-bit integers) from the stream according to the current byte order, and stores them into c starting at index off."
"javax.imageio.stream.ImageInputStream.readFully(int[],int,int)","reads len ints (signed 32-bit integers) from the stream according to the current byte order, and stores them into i starting at index off."
"javax.imageio.stream.ImageInputStream.readFully(long[],int,int)","reads len longs (signed 64-bit integers) from the stream according to the current byte order, and stores them into l starting at index off."
"javax.imageio.stream.ImageInputStream.readFully(float[],int,int)","reads len floats (32-bit ieee single-precision floats) from the stream according to the current byte order, and stores them into f starting at index off."
"javax.imageio.stream.ImageInputStream.readFully(double[],int,int)","reads len doubles (64-bit ieee double-precision floats) from the stream according to the current byte order, and stores them into d starting at index off."
javax.imageio.stream.ImageInputStream.readInt(),"reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as an int."
javax.imageio.stream.ImageInputStream.readLine(),reads the next line of text from the input stream.
javax.imageio.stream.ImageInputStream.readLong(),"reads 8 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a long."
javax.imageio.stream.ImageInputStream.readShort(),"reads two bytes from the stream, and (conceptually) concatenates them according to the current byte order, and returns the result as a short value."
javax.imageio.stream.ImageInputStream.readUnsignedByte(),"reads a byte from the stream, and (conceptually) converts it to an int, masks it with 0xff in order to strip off any sign-extension bits, and returns it as a byte value."
javax.imageio.stream.ImageInputStream.readUnsignedInt(),"reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order, converts the result to a long, masks it with 0xffffffffl in order to strip off any sign-extension bits, and returns the result as an unsigned long value."
javax.imageio.stream.ImageInputStream.readUnsignedShort(),"reads two bytes from the stream, and (conceptually) concatenates them according to the current byte order, converts the resulting value to an int, masks it with 0xffff in order to strip off any sign-extension buts, and returns the result as an unsigned int value."
javax.imageio.stream.ImageInputStream.readUTF(),reads in a string that has been encoded using a modified utf-8 format.
javax.imageio.stream.ImageInputStream.reset(),"returns the stream pointer to its previous position, including the bit offset, at the time of the most recent unmatched call to mark."
javax.imageio.stream.ImageInputStream.seek(long),sets the current stream position to the desired location.
javax.imageio.stream.ImageInputStream.setBitOffset(int),"sets the bit offset to an integer between 0 and 7, inclusive."
javax.imageio.stream.ImageInputStream.setByteOrder(java.nio.ByteOrder),sets the desired byte order for future reads of data values from this stream.
javax.imageio.stream.ImageInputStream.skipBytes(int),moves the stream position forward by a given number of bytes.
javax.imageio.stream.ImageInputStream.skipBytes(long),moves the stream position forward by a given number of bytes.
javax.imageio.stream.ImageOutputStream.flushBefore(long),"flushes all data prior to the given position to the underlying destination, such as an outputstream or file."
javax.imageio.stream.ImageOutputStream.write(int),writes a single byte to the stream at the current position.
javax.imageio.stream.ImageOutputStream.write(byte[]),writes a sequence of bytes to the stream at the current position.
"javax.imageio.stream.ImageOutputStream.write(byte[],int,int)",writes a sequence of bytes to the stream at the current position.
javax.imageio.stream.ImageOutputStream.writeBit(int),"writes a single bit, given by the least significant bit of the argument, to the stream at the current bit offset within the current byte position."
"javax.imageio.stream.ImageOutputStream.writeBits(long,int)","writes a sequence of bits, given by the numbits least significant bits of the bits argument in left-to-right order, to the stream at the current bit offset within the current byte position."
javax.imageio.stream.ImageOutputStream.writeBoolean(boolean),writes a boolean value to the stream.
javax.imageio.stream.ImageOutputStream.writeByte(int),writes the 8 low-order bits of v to the stream.
javax.imageio.stream.ImageOutputStream.writeBytes(java.lang.String),writes a string to the output stream.
javax.imageio.stream.ImageOutputStream.writeChar(int),this method is a synonym for writeshort.
javax.imageio.stream.ImageOutputStream.writeChars(java.lang.String),writes a string to the output stream.
"javax.imageio.stream.ImageOutputStream.writeChars(char[],int,int)",writes a sequence of chars to the stream at the current position.
javax.imageio.stream.ImageOutputStream.writeDouble(double),"writes a double value, which is comprised of four bytes, to the output stream."
"javax.imageio.stream.ImageOutputStream.writeDoubles(double[],int,int)",writes a sequence of doubles to the stream at the current position.
javax.imageio.stream.ImageOutputStream.writeFloat(float),"writes a float value, which is comprised of four bytes, to the output stream."
"javax.imageio.stream.ImageOutputStream.writeFloats(float[],int,int)",writes a sequence of floats to the stream at the current position.
javax.imageio.stream.ImageOutputStream.writeInt(int),writes the 32 bits of v to the stream.
"javax.imageio.stream.ImageOutputStream.writeInts(int[],int,int)",writes a sequence of ints to the stream at the current position.
javax.imageio.stream.ImageOutputStream.writeLong(long),writes the 64 bits of v to the stream.
"javax.imageio.stream.ImageOutputStream.writeLongs(long[],int,int)",writes a sequence of longs to the stream at the current position.
javax.imageio.stream.ImageOutputStream.writeShort(int),writes the 16 low-order bits of v to the stream.
"javax.imageio.stream.ImageOutputStream.writeShorts(short[],int,int)",writes a sequence of shorts to the stream at the current position.
javax.imageio.stream.ImageOutputStream.writeUTF(java.lang.String),"writes two bytes of length information to the output stream in network byte order, followed by the modified utf-8 representation of every character in the string s."
javax.imageio.stream.FileCacheImageInputStream.close(),"closes this filecacheimageinputstream, closing and removing the cache file."
javax.imageio.stream.FileCacheImageInputStream.finalize(),finalizes this object prior to garbage collection.
javax.imageio.stream.FileCacheImageInputStream.isCached(),returns true since this imageinputstream caches data in order to allow seeking backwards.
javax.imageio.stream.FileCacheImageInputStream.isCachedFile(),returns true since this imageinputstream maintains a file cache.
javax.imageio.stream.FileCacheImageInputStream.isCachedMemory(),returns false since this imageinputstream does not maintain a main memory cache.
javax.imageio.stream.FileCacheImageOutputStream.close(),closes this filecacheimageoutputstream.
javax.imageio.stream.FileCacheImageOutputStream.isCached(),returns true since this imageoutputstream caches data in order to allow seeking backwards.
javax.imageio.stream.FileCacheImageOutputStream.isCachedFile(),returns true since this imageoutputstream maintains a file cache.
javax.imageio.stream.FileCacheImageOutputStream.isCachedMemory(),returns false since this imageoutputstream does not maintain a main memory cache.
javax.imageio.stream.FileCacheImageOutputStream.seek(long),sets the current stream position and resets the bit offset to 0.
javax.imageio.stream.FileImageInputStream.finalize(),finalizes this object prior to garbage collection.
javax.imageio.stream.FileImageInputStream.length(),"returns the length of the underlying file, or -1 if it is unknown."
javax.imageio.stream.FileImageOutputStream.finalize(),finalizes this object prior to garbage collection.
javax.imageio.stream.FileImageOutputStream.seek(long),sets the current stream position and resets the bit offset to 0.
javax.imageio.stream.IIOByteBuffer.getData(),returns a reference to the byte array.
javax.imageio.stream.IIOByteBuffer.getLength(),returns the length of the data of interest within the byte array returned by getdata.
javax.imageio.stream.IIOByteBuffer.getOffset(),returns the offset within the byte array returned by getdata at which the data of interest start.
javax.imageio.stream.IIOByteBuffer.setData(byte[]),updates the array reference that will be returned by subsequent calls to the getdata method.
javax.imageio.stream.IIOByteBuffer.setLength(int),updates the value that will be returned by subsequent calls to the getlength method.
javax.imageio.stream.IIOByteBuffer.setOffset(int),updates the value that will be returned by subsequent calls to the getoffset method.
javax.imageio.stream.ImageInputStreamImpl.checkClosed(),throws an ioexception if the stream has been closed.
javax.imageio.stream.ImageInputStreamImpl.finalize(),finalizes this object prior to garbage collection.
javax.imageio.stream.ImageInputStreamImpl.isCached(),default implementation returns false.
javax.imageio.stream.ImageInputStreamImpl.isCachedFile(),default implementation returns false.
javax.imageio.stream.ImageInputStreamImpl.isCachedMemory(),default implementation returns false.
javax.imageio.stream.ImageInputStreamImpl.length(),returns -1l to indicate that the stream has unknown length.
javax.imageio.stream.ImageInputStreamImpl.mark(),pushes the current stream position onto a stack of marked positions.
javax.imageio.stream.ImageInputStreamImpl.read(),reads a single byte from the stream and returns it as an int between 0 and 255.
javax.imageio.stream.ImageInputStreamImpl.read(byte[]),"a convenience method that calls read(b, 0, b."
"javax.imageio.stream.ImageInputStreamImpl.read(byte[],int,int)","reads up to len bytes from the stream, and stores them into b starting at index off."
javax.imageio.stream.ImageInputStreamImpl.reset(),resets the current stream byte and bit positions from the stack of marked positions.
javax.imageio.stream.ImageInputStreamImpl.skipBytes(int),advances the current stream position by calling seek(getstreamposition() + n).
javax.imageio.stream.ImageInputStreamImpl.skipBytes(long),advances the current stream position by calling seek(getstreamposition() + n).
javax.imageio.stream.ImageOutputStreamImpl.flushBits(),"if the bit offset is non-zero, forces the remaining bits in the current byte to 0 and advances the stream position by one."
javax.imageio.stream.MemoryCacheImageInputStream.close(),"closes this memorycacheimageinputstream, freeing the cache."
javax.imageio.stream.MemoryCacheImageInputStream.finalize(),finalizes this object prior to garbage collection.
javax.imageio.stream.MemoryCacheImageInputStream.isCached(),returns true since this imageinputstream caches data in order to allow seeking backwards.
javax.imageio.stream.MemoryCacheImageInputStream.isCachedFile(),returns false since this imageinputstream does not maintain a file cache.
javax.imageio.stream.MemoryCacheImageInputStream.isCachedMemory(),returns true since this imageinputstream maintains a main memory cache.
javax.imageio.stream.MemoryCacheImageOutputStream.close(),closes this memorycacheimageoutputstream.
javax.imageio.stream.MemoryCacheImageOutputStream.isCached(),returns true since this imageoutputstream caches data in order to allow seeking backwards.
javax.imageio.stream.MemoryCacheImageOutputStream.isCachedFile(),returns false since this imageoutputstream does not maintain a file cache.
javax.imageio.stream.MemoryCacheImageOutputStream.isCachedMemory(),returns true since this imageoutputstream maintains a main memory cache.
javax.jws.WebParam.Mode.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.jws.WebParam.Mode.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.jws.soap.SOAPBinding.ParameterStyle.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.jws.soap.SOAPBinding.ParameterStyle.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.jws.soap.SOAPBinding.Style.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.jws.soap.SOAPBinding.Style.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.jws.soap.SOAPBinding.Use.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.jws.soap.SOAPBinding.Use.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.lang.model.AnnotatedConstruct.getAnnotation(java.lang.Class<A>),"returns this construct's annotation of the specified type if such an annotation is present, else null."
javax.lang.model.AnnotatedConstruct.getAnnotationMirrors(),returns the annotations that are directly present on this construct.
javax.lang.model.AnnotatedConstruct.getAnnotationsByType(java.lang.Class<A>),returns annotations that are associated with this construct.
javax.lang.model.SourceVersion.isIdentifier(java.lang.CharSequence),returns whether or not name is a syntactically valid identifier (simple name) or keyword in the latest source version.
javax.lang.model.SourceVersion.isKeyword(java.lang.CharSequence),returns whether or not s is a keyword or literal in the latest source version.
javax.lang.model.SourceVersion.isName(java.lang.CharSequence),returns whether or not name is a syntactically valid qualified name in the latest source version.
javax.lang.model.SourceVersion.latest(),returns the latest source version that can be modeled.
javax.lang.model.SourceVersion.latestSupported(),returns the latest source version fully supported by the current execution environment.
javax.lang.model.SourceVersion.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.lang.model.SourceVersion.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.lang.model.element.AnnotationMirror.getAnnotationType(),returns the type of this annotation.
javax.lang.model.element.AnnotationMirror.getElementValues(),returns the values of this annotation's elements.
"javax.lang.model.element.AnnotationValue.accept(,P>,P)",applies a visitor to this value.
javax.lang.model.element.AnnotationValue.getValue(),returns the value.
javax.lang.model.element.AnnotationValue.toString(),returns a string representation of this value.
"javax.lang.model.element.AnnotationValueVisitor.visit(javax.lang.model.element.AnnotationValue,javax.lang.model.element.AnnotationValueVisitor)",visits an annotation value.
javax.lang.model.element.AnnotationValueVisitor.visit(javax.lang.model.element.AnnotationValue),a convenience method equivalent to v.
"javax.lang.model.element.AnnotationValueVisitor.visitAnnotation(javax.lang.model.element.AnnotationMirror,javax.lang.model.element.AnnotationValueVisitor)",visits an annotation value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitArray(java.util.List<? extends javax.lang.model.element.AnnotationValue>,javax.lang.model.element.AnnotationValueVisitor)",visits an array value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitBoolean(boolean,javax.lang.model.element.AnnotationValueVisitor)",visits a boolean value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitByte(byte,javax.lang.model.element.AnnotationValueVisitor)",visits a byte value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitChar(char,javax.lang.model.element.AnnotationValueVisitor)",visits a char value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitDouble(double,javax.lang.model.element.AnnotationValueVisitor)",visits a double value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitEnumConstant(javax.lang.model.element.VariableElement,javax.lang.model.element.AnnotationValueVisitor)",visits an enum value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitFloat(float,javax.lang.model.element.AnnotationValueVisitor)",visits a float value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitInt(int,javax.lang.model.element.AnnotationValueVisitor)",visits an int value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitLong(long,javax.lang.model.element.AnnotationValueVisitor)",visits a long value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitShort(short,javax.lang.model.element.AnnotationValueVisitor)",visits a short value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitString(java.lang.String,javax.lang.model.element.AnnotationValueVisitor)",visits a string value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitType(javax.lang.model.type.TypeMirror,javax.lang.model.element.AnnotationValueVisitor)",visits a type value in an annotation.
"javax.lang.model.element.AnnotationValueVisitor.visitUnknown(javax.lang.model.element.AnnotationValue,javax.lang.model.element.AnnotationValueVisitor)",visits an unknown kind of annotation value.
"javax.lang.model.element.Element.accept(,P>,P)",applies a visitor to this element.
javax.lang.model.element.Element.asType(),returns the type defined by this element.
javax.lang.model.element.Element.equals(java.lang.Object),"returns true if the argument represents the same element as this, or false otherwise."
javax.lang.model.element.Element.getAnnotation(java.lang.Class<A>),"returns this construct's annotation of the specified type if such an annotation is present, else null."
javax.lang.model.element.Element.getAnnotationMirrors(),returns the annotations that are directly present on this construct.
javax.lang.model.element.Element.getEnclosedElements(),"returns the elements that are, loosely speaking, directly enclosed by this element."
javax.lang.model.element.Element.getEnclosingElement(),"returns the innermost element within which this element is, loosely speaking, enclosed."
javax.lang.model.element.Element.getKind(),returns the kind of this element.
javax.lang.model.element.Element.getModifiers(),"returns the modifiers of this element, excluding annotations."
javax.lang.model.element.Element.getSimpleName(),returns the simple (unqualified) name of this element.
javax.lang.model.element.Element.hashCode(),obeys the general contract of object.
"javax.lang.model.element.ElementVisitor.visit(javax.lang.model.element.Element,javax.lang.model.element.ElementVisitor)",visits an element.
javax.lang.model.element.ElementVisitor.visit(javax.lang.model.element.Element),a convenience method equivalent to v.
"javax.lang.model.element.ElementVisitor.visitExecutable(javax.lang.model.element.ExecutableElement,javax.lang.model.element.ElementVisitor)",visits an executable element.
"javax.lang.model.element.ElementVisitor.visitPackage(javax.lang.model.element.PackageElement,javax.lang.model.element.ElementVisitor)",visits a package element.
"javax.lang.model.element.ElementVisitor.visitType(javax.lang.model.element.TypeElement,javax.lang.model.element.ElementVisitor)",visits a type element.
"javax.lang.model.element.ElementVisitor.visitTypeParameter(javax.lang.model.element.TypeParameterElement,javax.lang.model.element.ElementVisitor)",visits a type parameter element.
"javax.lang.model.element.ElementVisitor.visitUnknown(javax.lang.model.element.Element,javax.lang.model.element.ElementVisitor)",visits an unknown kind of element.
"javax.lang.model.element.ElementVisitor.visitVariable(javax.lang.model.element.VariableElement,javax.lang.model.element.ElementVisitor)",visits a variable element.
javax.lang.model.element.ExecutableElement.getDefaultValue(),returns the default value if this executable is an annotation type element.
javax.lang.model.element.ExecutableElement.getParameters(),returns the formal parameters of this executable.
javax.lang.model.element.ExecutableElement.getReceiverType(),"returns the receiver type of this executable, or notype with kind none if the executable has no receiver type."
javax.lang.model.element.ExecutableElement.getReturnType(),returns the return type of this executable.
javax.lang.model.element.ExecutableElement.getSimpleName(),"returns the simple name of a constructor, method, or initializer."
javax.lang.model.element.ExecutableElement.getThrownTypes(),returns the exceptions and other throwables listed in this method or constructor's throws clause in declaration order.
javax.lang.model.element.ExecutableElement.getTypeParameters(),returns the formal type parameters of this executable in declaration order.
javax.lang.model.element.ExecutableElement.isDefault(),returns true if this method is a default method and returns false otherwise.
javax.lang.model.element.ExecutableElement.isVarArgs(),returns true if this method or constructor accepts a variable number of arguments and returns false otherwise.
javax.lang.model.element.Name.contentEquals(java.lang.CharSequence),compares this name to the specified charsequence.
javax.lang.model.element.Name.equals(java.lang.Object),"returns true if the argument represents the same name as this, and false otherwise."
javax.lang.model.element.Name.hashCode(),obeys the general contract of object.
javax.lang.model.element.PackageElement.getEnclosedElements(),returns the top-level classes and interfaces within this package.
javax.lang.model.element.PackageElement.getEnclosingElement(),returns null since a package is not enclosed by another element.
javax.lang.model.element.PackageElement.getQualifiedName(),returns the fully qualified name of this package.
javax.lang.model.element.PackageElement.getSimpleName(),returns the simple name of this package.
javax.lang.model.element.PackageElement.isUnnamed(),returns true is this is an unnamed package and false otherwise.
javax.lang.model.element.Parameterizable.getTypeParameters(),returns the formal type parameters of the type element in declaration order.
javax.lang.model.element.QualifiedNameable.getQualifiedName(),returns the fully qualified name of an element.
javax.lang.model.element.TypeElement.getEnclosedElements(),"returns the fields, methods, constructors, and member types that are directly declared in this class or interface."
javax.lang.model.element.TypeElement.getEnclosingElement(),returns the package of a top-level type and returns the immediately lexically enclosing element for a nested type.
javax.lang.model.element.TypeElement.getInterfaces(),returns the interface types directly implemented by this class or extended by this interface.
javax.lang.model.element.TypeElement.getNestingKind(),returns the nesting kind of this type element.
javax.lang.model.element.TypeElement.getQualifiedName(),returns the fully qualified name of this type element.
javax.lang.model.element.TypeElement.getSimpleName(),returns the simple name of this type element.
javax.lang.model.element.TypeElement.getSuperclass(),returns the direct superclass of this type element.
javax.lang.model.element.TypeElement.getTypeParameters(),returns the formal type parameters of this type element in declaration order.
javax.lang.model.element.TypeParameterElement.getBounds(),returns the bounds of this type parameter.
javax.lang.model.element.TypeParameterElement.getEnclosingElement(),returns the generic element of this type parameter.
javax.lang.model.element.TypeParameterElement.getGenericElement(),"returns the generic class, interface, method, or constructor that is parameterized by this type parameter."
javax.lang.model.element.VariableElement.getConstantValue(),returns the value of this variable if this is a final field initialized to a compile-time constant.
javax.lang.model.element.VariableElement.getEnclosingElement(),returns the enclosing element of this variable.
javax.lang.model.element.VariableElement.getSimpleName(),returns the simple name of this variable element.
javax.lang.model.element.ElementKind.isClass(),returns true if this is a kind of class: either class or enum.
javax.lang.model.element.ElementKind.isField(),returns true if this is a kind of field: either field or enum_constant.
javax.lang.model.element.ElementKind.isInterface(),returns true if this is a kind of interface: either interface or annotation_type.
javax.lang.model.element.ElementKind.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.lang.model.element.ElementKind.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.lang.model.element.Modifier.toString(),returns this modifier's name in lowercase.
javax.lang.model.element.Modifier.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.lang.model.element.Modifier.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.lang.model.element.NestingKind.isNested(),does this constant correspond to a nested type element? a nested type element is any that is not top-level.
javax.lang.model.element.NestingKind.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.lang.model.element.NestingKind.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.lang.model.element.UnknownAnnotationValueException.getArgument(),returns the additional argument.
javax.lang.model.element.UnknownAnnotationValueException.getUnknownAnnotationValue(),returns the unknown annotation value.
javax.lang.model.element.UnknownElementException.getArgument(),returns the additional argument.
javax.lang.model.element.UnknownElementException.getUnknownElement(),returns the unknown element.
javax.lang.model.type.ArrayType.getComponentType(),returns the component type of this array type.
javax.lang.model.type.DeclaredType.asElement(),returns the element corresponding to this type.
javax.lang.model.type.DeclaredType.getEnclosingType(),returns the type of the innermost enclosing instance or a notype of kind none if there is no enclosing instance.
javax.lang.model.type.DeclaredType.getTypeArguments(),returns the actual type arguments of this type.
javax.lang.model.type.ExecutableType.getParameterTypes(),returns the types of this executable's formal parameters.
javax.lang.model.type.ExecutableType.getReceiverType(),"returns the receiver type of this executable, or notype with kind none if the executable has no receiver type."
javax.lang.model.type.ExecutableType.getReturnType(),returns the return type of this executable.
javax.lang.model.type.ExecutableType.getThrownTypes(),returns the exceptions and other throwables listed in this executable's throws clause.
javax.lang.model.type.ExecutableType.getTypeVariables(),returns the type variables declared by the formal type parameters of this executable.
javax.lang.model.type.IntersectionType.getBounds(),return the bounds comprising this intersection type.
"javax.lang.model.type.TypeMirror.accept(,P>,P)",applies a visitor to this type.
javax.lang.model.type.TypeMirror.equals(java.lang.Object),obeys the general contract of object.
javax.lang.model.type.TypeMirror.getKind(),returns the kind of this type.
javax.lang.model.type.TypeMirror.hashCode(),obeys the general contract of object.
javax.lang.model.type.TypeMirror.toString(),returns an informative string representation of this type.
javax.lang.model.type.TypeVariable.asElement(),returns the element corresponding to this type variable.
javax.lang.model.type.TypeVariable.getLowerBound(),returns the lower bound of this type variable.
javax.lang.model.type.TypeVariable.getUpperBound(),returns the upper bound of this type variable.
"javax.lang.model.type.TypeVisitor.visit(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeVisitor)",visits a type.
javax.lang.model.type.TypeVisitor.visit(javax.lang.model.type.TypeMirror),a convenience method equivalent to v.
"javax.lang.model.type.TypeVisitor.visitArray(javax.lang.model.type.ArrayType,javax.lang.model.type.TypeVisitor)",visits an array type.
"javax.lang.model.type.TypeVisitor.visitDeclared(javax.lang.model.type.DeclaredType,javax.lang.model.type.TypeVisitor)",visits a declared type.
"javax.lang.model.type.TypeVisitor.visitError(javax.lang.model.type.ErrorType,javax.lang.model.type.TypeVisitor)",visits an error type.
"javax.lang.model.type.TypeVisitor.visitExecutable(javax.lang.model.type.ExecutableType,javax.lang.model.type.TypeVisitor)",visits an executable type.
"javax.lang.model.type.TypeVisitor.visitIntersection(javax.lang.model.type.IntersectionType,javax.lang.model.type.TypeVisitor)",visits an intersection type.
"javax.lang.model.type.TypeVisitor.visitNoType(javax.lang.model.type.NoType,javax.lang.model.type.TypeVisitor)",visits a notype instance.
"javax.lang.model.type.TypeVisitor.visitNull(javax.lang.model.type.NullType,javax.lang.model.type.TypeVisitor)",visits the null type.
"javax.lang.model.type.TypeVisitor.visitPrimitive(javax.lang.model.type.PrimitiveType,javax.lang.model.type.TypeVisitor)",visits a primitive type.
"javax.lang.model.type.TypeVisitor.visitTypeVariable(javax.lang.model.type.TypeVariable,javax.lang.model.type.TypeVisitor)",visits a type variable.
"javax.lang.model.type.TypeVisitor.visitUnion(javax.lang.model.type.UnionType,javax.lang.model.type.TypeVisitor)",visits a union type.
"javax.lang.model.type.TypeVisitor.visitUnknown(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeVisitor)",visits an unknown kind of type.
"javax.lang.model.type.TypeVisitor.visitWildcard(javax.lang.model.type.WildcardType,javax.lang.model.type.TypeVisitor)",visits a wildcard type.
javax.lang.model.type.UnionType.getAlternatives(),return the alternatives comprising this union type.
javax.lang.model.type.WildcardType.getExtendsBound(),returns the upper bound of this wildcard.
javax.lang.model.type.WildcardType.getSuperBound(),returns the lower bound of this wildcard.
javax.lang.model.type.TypeKind.isPrimitive(),returns true if this kind corresponds to a primitive type and false otherwise.
javax.lang.model.type.TypeKind.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.lang.model.type.TypeKind.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.lang.model.type.MirroredTypeException.getTypeMirror(),returns the type mirror corresponding to the type being accessed.
javax.lang.model.type.MirroredTypesException.getTypeMirrors(),returns the type mirrors corresponding to the types being accessed.
javax.lang.model.type.UnknownTypeException.getArgument(),returns the additional argument.
javax.lang.model.type.UnknownTypeException.getUnknownType(),returns the unknown type.
javax.lang.model.util.Elements.getAllAnnotationMirrors(javax.lang.model.element.Element),"returns all annotations present on an element, whether directly present or present via inheritance."
javax.lang.model.util.Elements.getAllMembers(javax.lang.model.element.TypeElement),"returns all members of a type element, whether inherited or declared directly."
javax.lang.model.util.Elements.getBinaryName(javax.lang.model.element.TypeElement),returns the binary name of a type element.
javax.lang.model.util.Elements.getConstantExpression(java.lang.Object),returns the text of a constant expression representing a primitive value or a string.
javax.lang.model.util.Elements.getDocComment(javax.lang.model.element.Element),"returns the text of the documentation (""javadoc"") comment of an element."
javax.lang.model.util.Elements.getElementValuesWithDefaults(javax.lang.model.element.AnnotationMirror),"returns the values of an annotation's elements, including defaults."
javax.lang.model.util.Elements.getName(java.lang.CharSequence),return a name with the same sequence of characters as the argument.
javax.lang.model.util.Elements.getPackageElement(java.lang.CharSequence),returns a package given its fully qualified name.
javax.lang.model.util.Elements.getPackageOf(javax.lang.model.element.Element),returns the package of an element.
javax.lang.model.util.Elements.getTypeElement(java.lang.CharSequence),returns a type element given its canonical name.
"javax.lang.model.util.Elements.hides(javax.lang.model.element.Element,javax.lang.model.element.Element)","tests whether one type, method, or field hides another."
javax.lang.model.util.Elements.isDeprecated(javax.lang.model.element.Element),"returns true if the element is deprecated, false otherwise."
javax.lang.model.util.Elements.isFunctionalInterface(javax.lang.model.element.TypeElement),"returns true if the type element is a functional interface, false otherwise."
"javax.lang.model.util.Elements.overrides(javax.lang.model.element.ExecutableElement,javax.lang.model.element.ExecutableElement,javax.lang.model.element.TypeElement)","tests whether one method, as a member of a given type, overrides another method."
"javax.lang.model.util.Elements.printElements(java.io.Writer,javax.lang.model.element.Element...)",prints a representation of the elements to the given writer in the specified order.
javax.lang.model.util.Types.asElement(javax.lang.model.type.TypeMirror),returns the element corresponding to a type.
"javax.lang.model.util.Types.asMemberOf(javax.lang.model.type.DeclaredType,javax.lang.model.element.Element)","returns the type of an element when that element is viewed as a member of, or otherwise directly contained by, a given type."
javax.lang.model.util.Types.boxedClass(javax.lang.model.type.PrimitiveType),returns the class of a boxed value of a given primitive type.
javax.lang.model.util.Types.capture(javax.lang.model.type.TypeMirror),applies capture conversion to a type.
"javax.lang.model.util.Types.contains(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)",tests whether one type argument contains another.
javax.lang.model.util.Types.directSupertypes(javax.lang.model.type.TypeMirror),returns the direct supertypes of a type.
javax.lang.model.util.Types.erasure(javax.lang.model.type.TypeMirror),returns the erasure of a type.
javax.lang.model.util.Types.getArrayType(javax.lang.model.type.TypeMirror),returns an array type with the specified component type.
"javax.lang.model.util.Types.getDeclaredType(javax.lang.model.element.TypeElement,javax.lang.model.type.TypeMirror...)",returns the type corresponding to a type element and actual type arguments.
"javax.lang.model.util.Types.getDeclaredType(javax.lang.model.type.DeclaredType,javax.lang.model.element.TypeElement,javax.lang.model.type.TypeMirror...)","returns the type corresponding to a type element and actual type arguments, given a containing type of which it is a member."
javax.lang.model.util.Types.getNoType(javax.lang.model.type.TypeKind),returns a pseudo-type used where no actual type is appropriate.
javax.lang.model.util.Types.getNullType(),returns the null type.
javax.lang.model.util.Types.getPrimitiveType(javax.lang.model.type.TypeKind),returns a primitive type.
"javax.lang.model.util.Types.getWildcardType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)",returns a new wildcard type argument.
"javax.lang.model.util.Types.isAssignable(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)",tests whether one type is assignable to another.
"javax.lang.model.util.Types.isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)",tests whether two typemirror objects represent the same type.
"javax.lang.model.util.Types.isSubsignature(javax.lang.model.type.ExecutableType,javax.lang.model.type.ExecutableType)",tests whether the signature of one method is a subsignature of another.
"javax.lang.model.util.Types.isSubtype(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)",tests whether one type is a subtype of another.
javax.lang.model.util.Types.unboxedType(javax.lang.model.type.TypeMirror),returns the type (a primitive type) of unboxed values of a given type.
"javax.lang.model.util.AbstractAnnotationValueVisitor6.visit(javax.lang.model.element.AnnotationValue,javax.lang.model.util.AbstractAnnotationValueVisitor6)",visits an annotation value as if by passing itself to that value's accept.
javax.lang.model.util.AbstractAnnotationValueVisitor6.visit(javax.lang.model.element.AnnotationValue),visits an annotation value as if by passing itself to that value's accept method passing null for the additional parameter.
"javax.lang.model.util.AbstractAnnotationValueVisitor6.visitUnknown(javax.lang.model.element.AnnotationValue,javax.lang.model.util.AbstractAnnotationValueVisitor6)",visits an unknown kind of annotation value.
"javax.lang.model.util.AbstractElementVisitor6.visit(javax.lang.model.element.Element,javax.lang.model.util.AbstractElementVisitor6)",visits any program element as if by passing itself to that element's accept method.
javax.lang.model.util.AbstractElementVisitor6.visit(javax.lang.model.element.Element),visits any program element as if by passing itself to that element's accept method and passing null for the additional parameter.
"javax.lang.model.util.AbstractElementVisitor6.visitUnknown(javax.lang.model.element.Element,javax.lang.model.util.AbstractElementVisitor6)",visits an unknown kind of element.
"javax.lang.model.util.AbstractTypeVisitor6.visit(javax.lang.model.type.TypeMirror,javax.lang.model.util.AbstractTypeVisitor6)",visits any type mirror as if by passing itself to that type mirror's accept method.
javax.lang.model.util.AbstractTypeVisitor6.visit(javax.lang.model.type.TypeMirror),visits any type mirror as if by passing itself to that type mirror's accept method and passing null for the additional parameter.
"javax.lang.model.util.AbstractTypeVisitor6.visitIntersection(javax.lang.model.type.IntersectionType,javax.lang.model.util.AbstractTypeVisitor6)",visits an intersectiontype element by calling visitunknown.
"javax.lang.model.util.AbstractTypeVisitor6.visitUnion(javax.lang.model.type.UnionType,javax.lang.model.util.AbstractTypeVisitor6)",visits a uniontype element by calling visitunknown.
"javax.lang.model.util.AbstractTypeVisitor6.visitUnknown(javax.lang.model.type.TypeMirror,javax.lang.model.util.AbstractTypeVisitor6)",visits an unknown kind of type.
"javax.lang.model.util.AbstractTypeVisitor7.visitUnion(javax.lang.model.type.UnionType,javax.lang.model.util.AbstractTypeVisitor7)",visits a uniontype in a manner defined by a subclass.
"javax.lang.model.util.AbstractTypeVisitor8.visitIntersection(javax.lang.model.type.IntersectionType,javax.lang.model.util.AbstractTypeVisitor8)",visits an intersectiontype in a manner defined by a subclass.
javax.lang.model.util.ElementFilter.constructorsIn(java.lang.Iterable<? extends javax.lang.model.element.Element>),returns a list of constructors in elements.
javax.lang.model.util.ElementFilter.constructorsIn(java.util.Set<? extends javax.lang.model.element.Element>),returns a set of constructors in elements.
javax.lang.model.util.ElementFilter.fieldsIn(java.lang.Iterable<? extends javax.lang.model.element.Element>),returns a list of fields in elements.
javax.lang.model.util.ElementFilter.fieldsIn(java.util.Set<? extends javax.lang.model.element.Element>),returns a set of fields in elements.
javax.lang.model.util.ElementFilter.methodsIn(java.lang.Iterable<? extends javax.lang.model.element.Element>),returns a list of methods in elements.
javax.lang.model.util.ElementFilter.methodsIn(java.util.Set<? extends javax.lang.model.element.Element>),returns a set of methods in elements.
javax.lang.model.util.ElementFilter.packagesIn(java.lang.Iterable<? extends javax.lang.model.element.Element>),returns a list of packages in elements.
javax.lang.model.util.ElementFilter.packagesIn(java.util.Set<? extends javax.lang.model.element.Element>),returns a set of packages in elements.
javax.lang.model.util.ElementFilter.typesIn(java.lang.Iterable<? extends javax.lang.model.element.Element>),returns a list of types in elements.
javax.lang.model.util.ElementFilter.typesIn(java.util.Set<? extends javax.lang.model.element.Element>),returns a set of types in elements.
"javax.lang.model.util.ElementKindVisitor6.visitExecutable(javax.lang.model.element.ExecutableElement,javax.lang.model.util.ElementKindVisitor6)","visits an executable element, dispatching to the visit method for the specific kind of executable, constructor, instance_init, method, or static_init."
"javax.lang.model.util.ElementKindVisitor6.visitExecutableAsConstructor(javax.lang.model.element.ExecutableElement,javax.lang.model.util.ElementKindVisitor6)",visits a constructor executable element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitExecutableAsInstanceInit(javax.lang.model.element.ExecutableElement,javax.lang.model.util.ElementKindVisitor6)",visits an instance_init executable element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitExecutableAsMethod(javax.lang.model.element.ExecutableElement,javax.lang.model.util.ElementKindVisitor6)",visits a method executable element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitExecutableAsStaticInit(javax.lang.model.element.ExecutableElement,javax.lang.model.util.ElementKindVisitor6)",visits a static_init executable element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitPackage(javax.lang.model.element.PackageElement,javax.lang.model.util.ElementKindVisitor6)",visits a package element.
"javax.lang.model.util.ElementKindVisitor6.visitType(javax.lang.model.element.TypeElement,javax.lang.model.util.ElementKindVisitor6)","visits a type element, dispatching to the visit method for the specific kind of type, annotation_type, class, enum, or interface."
"javax.lang.model.util.ElementKindVisitor6.visitTypeAsAnnotationType(javax.lang.model.element.TypeElement,javax.lang.model.util.ElementKindVisitor6)",visits an annotation_type type element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitTypeAsClass(javax.lang.model.element.TypeElement,javax.lang.model.util.ElementKindVisitor6)",visits a class type element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitTypeAsEnum(javax.lang.model.element.TypeElement,javax.lang.model.util.ElementKindVisitor6)",visits an enum type element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitTypeAsInterface(javax.lang.model.element.TypeElement,javax.lang.model.util.ElementKindVisitor6)",visits an interface type element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitTypeParameter(javax.lang.model.element.TypeParameterElement,javax.lang.model.util.ElementKindVisitor6)",visits a type parameter element.
"javax.lang.model.util.ElementKindVisitor6.visitVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)","visits a variable element, dispatching to the visit method for the specific kind of variable, enum_constant, exception_parameter, field, local_variable, parameter, or resource_variable."
"javax.lang.model.util.ElementKindVisitor6.visitVariableAsEnumConstant(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)",visits an enum_constant variable element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitVariableAsExceptionParameter(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)",visits an exception_parameter variable element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitVariableAsField(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)",visits a field variable element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitVariableAsLocalVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)",visits a local_variable variable element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitVariableAsParameter(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)",visits a parameter variable element by calling defaultaction.
"javax.lang.model.util.ElementKindVisitor6.visitVariableAsResourceVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor6)",visits a resource_variable variable element by calling visitunknown.
"javax.lang.model.util.ElementKindVisitor7.visitVariableAsResourceVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementKindVisitor7)",visits a resource_variable variable element by calling defaultaction.
"javax.lang.model.util.ElementScanner6.scan(java.lang.Iterable<? extends javax.lang.model.element.Element>,javax.lang.model.util.ElementScanner6)","iterates over the given elements and calls scan(element, p) on each one."
"javax.lang.model.util.ElementScanner6.scan(javax.lang.model.element.Element,javax.lang.model.util.ElementScanner6)",processes an element by calling e.
javax.lang.model.util.ElementScanner6.scan(javax.lang.model.element.Element),convenience method equivalent to v.
"javax.lang.model.util.ElementScanner6.visitExecutable(javax.lang.model.element.ExecutableElement,javax.lang.model.util.ElementScanner6)",visits an executable element.
"javax.lang.model.util.ElementScanner6.visitPackage(javax.lang.model.element.PackageElement,javax.lang.model.util.ElementScanner6)",visits a package element.
"javax.lang.model.util.ElementScanner6.visitType(javax.lang.model.element.TypeElement,javax.lang.model.util.ElementScanner6)",visits a type element.
"javax.lang.model.util.ElementScanner6.visitTypeParameter(javax.lang.model.element.TypeParameterElement,javax.lang.model.util.ElementScanner6)",visits a type parameter element.
"javax.lang.model.util.ElementScanner6.visitVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementScanner6)",visits a variable element.
"javax.lang.model.util.ElementScanner7.visitVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.ElementScanner7)",this implementation scans the enclosed elements.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.defaultAction(java.lang.Object,javax.lang.model.util.SimpleAnnotationValueVisitor6)",the default action for visit methods.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitAnnotation(javax.lang.model.element.AnnotationMirror,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits an annotation value in an annotation.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitArray(java.util.List<? extends javax.lang.model.element.AnnotationValue>,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits an array value in an annotation.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitBoolean(boolean,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits a boolean value in an annotation.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitByte(byte,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits a byte value in an annotation.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitChar(char,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits a char value in an annotation.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitDouble(double,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits a double value in an annotation.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitEnumConstant(javax.lang.model.element.VariableElement,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits an enum value in an annotation.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitFloat(float,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits a float value in an annotation.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitInt(int,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits an int value in an annotation.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitLong(long,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits a long value in an annotation.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitShort(short,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits a short value in an annotation.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitString(java.lang.String,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits a string value in an annotation.
"javax.lang.model.util.SimpleAnnotationValueVisitor6.visitType(javax.lang.model.type.TypeMirror,javax.lang.model.util.SimpleAnnotationValueVisitor6)",visits a type value in an annotation.
"javax.lang.model.util.SimpleElementVisitor6.defaultAction(javax.lang.model.element.Element,javax.lang.model.util.SimpleElementVisitor6)",the default action for visit methods.
"javax.lang.model.util.SimpleElementVisitor6.visitExecutable(javax.lang.model.element.ExecutableElement,javax.lang.model.util.SimpleElementVisitor6)",visits an executable element.
"javax.lang.model.util.SimpleElementVisitor6.visitPackage(javax.lang.model.element.PackageElement,javax.lang.model.util.SimpleElementVisitor6)",visits a package element.
"javax.lang.model.util.SimpleElementVisitor6.visitType(javax.lang.model.element.TypeElement,javax.lang.model.util.SimpleElementVisitor6)",visits a type element.
"javax.lang.model.util.SimpleElementVisitor6.visitTypeParameter(javax.lang.model.element.TypeParameterElement,javax.lang.model.util.SimpleElementVisitor6)",visits a type parameter element.
"javax.lang.model.util.SimpleElementVisitor6.visitVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.SimpleElementVisitor6)",visits a variable element.
"javax.lang.model.util.SimpleElementVisitor7.visitVariable(javax.lang.model.element.VariableElement,javax.lang.model.util.SimpleElementVisitor7)",this implementation calls defaultaction.
"javax.lang.model.util.SimpleTypeVisitor6.defaultAction(javax.lang.model.type.TypeMirror,javax.lang.model.util.SimpleTypeVisitor6)",the default action for visit methods.
"javax.lang.model.util.SimpleTypeVisitor6.visitArray(javax.lang.model.type.ArrayType,javax.lang.model.util.SimpleTypeVisitor6)",visits an array type.
"javax.lang.model.util.SimpleTypeVisitor6.visitDeclared(javax.lang.model.type.DeclaredType,javax.lang.model.util.SimpleTypeVisitor6)",visits a declared type.
"javax.lang.model.util.SimpleTypeVisitor6.visitError(javax.lang.model.type.ErrorType,javax.lang.model.util.SimpleTypeVisitor6)",visits an error type.
"javax.lang.model.util.SimpleTypeVisitor6.visitExecutable(javax.lang.model.type.ExecutableType,javax.lang.model.util.SimpleTypeVisitor6)",visits an executable type.
"javax.lang.model.util.SimpleTypeVisitor6.visitNoType(javax.lang.model.type.NoType,javax.lang.model.util.SimpleTypeVisitor6)",visits a notype instance.
"javax.lang.model.util.SimpleTypeVisitor6.visitNull(javax.lang.model.type.NullType,javax.lang.model.util.SimpleTypeVisitor6)",visits the null type.
"javax.lang.model.util.SimpleTypeVisitor6.visitPrimitive(javax.lang.model.type.PrimitiveType,javax.lang.model.util.SimpleTypeVisitor6)",visits a primitive type.
"javax.lang.model.util.SimpleTypeVisitor6.visitTypeVariable(javax.lang.model.type.TypeVariable,javax.lang.model.util.SimpleTypeVisitor6)",visits a type variable.
"javax.lang.model.util.SimpleTypeVisitor6.visitWildcard(javax.lang.model.type.WildcardType,javax.lang.model.util.SimpleTypeVisitor6)",visits a wildcard type.
"javax.lang.model.util.SimpleTypeVisitor7.visitUnion(javax.lang.model.type.UnionType,javax.lang.model.util.SimpleTypeVisitor7)",this implementation visits a uniontype by calling defaultaction.
"javax.lang.model.util.SimpleTypeVisitor8.visitIntersection(javax.lang.model.type.IntersectionType,javax.lang.model.util.SimpleTypeVisitor8)",this implementation visits an intersectiontype by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor6.visitNoType(javax.lang.model.type.NoType,javax.lang.model.util.TypeKindVisitor6)","visits a notype instance, dispatching to the visit method for the specific kind of pseudo-type: void, package, or none."
"javax.lang.model.util.TypeKindVisitor6.visitNoTypeAsNone(javax.lang.model.type.NoType,javax.lang.model.util.TypeKindVisitor6)",visits a none pseudo-type by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor6.visitNoTypeAsPackage(javax.lang.model.type.NoType,javax.lang.model.util.TypeKindVisitor6)",visits a package pseudo-type by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor6.visitNoTypeAsVoid(javax.lang.model.type.NoType,javax.lang.model.util.TypeKindVisitor6)",visits a void pseudo-type by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor6.visitPrimitive(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)","visits a primitive type, dispatching to the visit method for the specific kind of primitive type: boolean, byte, etc."
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsBoolean(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)",visits a boolean primitive type by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsByte(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)",visits a byte primitive type by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsChar(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)",visits a char primitive type by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsDouble(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)",visits a double primitive type by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsFloat(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)",visits a float primitive type by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsInt(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)",visits an int primitive type by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsLong(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)",visits a long primitive type by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor6.visitPrimitiveAsShort(javax.lang.model.type.PrimitiveType,javax.lang.model.util.TypeKindVisitor6)",visits a short primitive type by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor7.visitUnion(javax.lang.model.type.UnionType,javax.lang.model.util.TypeKindVisitor7)",this implementation visits a uniontype by calling defaultaction.
"javax.lang.model.util.TypeKindVisitor8.visitIntersection(javax.lang.model.type.IntersectionType,javax.lang.model.util.TypeKindVisitor8)",this implementation visits an intersectiontype by calling defaultaction.
javax.management.Descriptor.clone(),returns a descriptor which is equal to this descriptor.
javax.management.Descriptor.equals(java.lang.Object),compares this descriptor to the given object.
javax.management.Descriptor.getFieldNames(),returns all the field names in the descriptor.
javax.management.Descriptor.getFields(),returns all of the fields contained in this descriptor as a string array.
javax.management.Descriptor.getFieldValue(java.lang.String),"returns the value for a specific field name, or null if no value is present for that name."
javax.management.Descriptor.getFieldValues(java.lang.String...),returns all the field values in the descriptor as an array of objects.
javax.management.Descriptor.hashCode(),returns the hash code value for this descriptor.
javax.management.Descriptor.isValid(),returns true if all of the fields have legal values given their names.
javax.management.Descriptor.removeField(java.lang.String),removes a field from the descriptor.
"javax.management.Descriptor.setField(java.lang.String,java.lang.Object)",sets the value for a specific field name.
"javax.management.Descriptor.setFields(java.lang.String[],java.lang.Object[])",sets all fields in the field names array to the new value with the same index in the field values array.
javax.management.DescriptorAccess.setDescriptor(javax.management.Descriptor),sets descriptor (full replace).
javax.management.DescriptorRead.getDescriptor(),returns a copy of descriptor.
javax.management.DynamicMBean.getAttribute(java.lang.String),obtain the value of a specific attribute of the dynamic mbean.
javax.management.DynamicMBean.getAttributes(java.lang.String[]),get the values of several attributes of the dynamic mbean.
javax.management.DynamicMBean.getMBeanInfo(),provides the exposed attributes and actions of the dynamic mbean using an mbeaninfo object.
"javax.management.DynamicMBean.invoke(java.lang.String,java.lang.Object[],java.lang.String[])",allows an action to be invoked on the dynamic mbean.
javax.management.DynamicMBean.setAttribute(javax.management.Attribute),set the value of a specific attribute of the dynamic mbean.
javax.management.DynamicMBean.setAttributes(javax.management.AttributeList),sets the values of several attributes of the dynamic mbean.
javax.management.MBeanRegistration.postDeregister(),allows the mbean to perform any operations needed after having been unregistered in the mbean server.
javax.management.MBeanRegistration.postRegister(java.lang.Boolean),allows the mbean to perform any operations needed after having been registered in the mbean server or after the registration has failed.
javax.management.MBeanRegistration.preDeregister(),allows the mbean to perform any operations it needs before being unregistered by the mbean server.
"javax.management.MBeanRegistration.preRegister(javax.management.MBeanServer,javax.management.ObjectName)",allows the mbean to perform any operations it needs before being registered in the mbean server.
"javax.management.MBeanServer.addNotificationListener(javax.management.ObjectName,javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)",adds a listener to a registered mbean.
"javax.management.MBeanServer.addNotificationListener(javax.management.ObjectName,javax.management.ObjectName,javax.management.NotificationFilter,java.lang.Object)",adds a listener to a registered mbean.
"javax.management.MBeanServer.createMBean(java.lang.String,javax.management.ObjectName)",instantiates and registers an mbean in the mbean server.
"javax.management.MBeanServer.createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName)",instantiates and registers an mbean in the mbean server.
"javax.management.MBeanServer.createMBean(java.lang.String,javax.management.ObjectName,java.lang.Object[],java.lang.String[])",instantiates and registers an mbean in the mbean server.
"javax.management.MBeanServer.createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName,java.lang.Object[],java.lang.String[])",instantiates and registers an mbean in the mbean server.
javax.management.MBeanServer.getClassLoader(javax.management.ObjectName),return the named classloader.
javax.management.MBeanServer.getClassLoaderFor(javax.management.ObjectName),return the classloader that was used for loading the class of the named mbean.
javax.management.MBeanServer.getClassLoaderRepository(),return the classloaderrepository for this mbeanserver.
javax.management.MBeanServer.getMBeanCount(),returns the number of mbeans registered in the mbean server.
javax.management.MBeanServer.instantiate(java.lang.String),instantiates an object using the list of all class loaders registered in the mbean server's class loader repository.
"javax.management.MBeanServer.instantiate(java.lang.String,javax.management.ObjectName)",instantiates an object using the class loader specified by its objectname.
"javax.management.MBeanServer.instantiate(java.lang.String,java.lang.Object[],java.lang.String[])",instantiates an object using the list of all class loaders registered in the mbean server class loader repository.
"javax.management.MBeanServer.instantiate(java.lang.String,javax.management.ObjectName,java.lang.Object[],java.lang.String[])",instantiates an object.
"javax.management.MBeanServer.queryMBeans(javax.management.ObjectName,javax.management.QueryExp)",gets mbeans controlled by the mbean server.
"javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)",gets the names of mbeans controlled by the mbean server.
"javax.management.MBeanServer.registerMBean(java.lang.Object,javax.management.ObjectName)",registers a pre-existing object as an mbean with the mbean server.
javax.management.MBeanServer.unregisterMBean(javax.management.ObjectName),unregisters an mbean from the mbean server.
"javax.management.MBeanServerConnection.addNotificationListener(javax.management.ObjectName,javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)",adds a listener to a registered mbean.
"javax.management.MBeanServerConnection.addNotificationListener(javax.management.ObjectName,javax.management.ObjectName,javax.management.NotificationFilter,java.lang.Object)",adds a listener to a registered mbean.
"javax.management.MBeanServerConnection.createMBean(java.lang.String,javax.management.ObjectName)",instantiates and registers an mbean in the mbean server.
"javax.management.MBeanServerConnection.createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName)",instantiates and registers an mbean in the mbean server.
"javax.management.MBeanServerConnection.createMBean(java.lang.String,javax.management.ObjectName,java.lang.Object[],java.lang.String[])",instantiates and registers an mbean in the mbean server.
"javax.management.MBeanServerConnection.createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName,java.lang.Object[],java.lang.String[])",instantiates and registers an mbean in the mbean server.
"javax.management.MBeanServerConnection.getAttribute(javax.management.ObjectName,java.lang.String)",gets the value of a specific attribute of a named mbean.
"javax.management.MBeanServerConnection.getAttributes(javax.management.ObjectName,java.lang.String[])",retrieves the values of several attributes of a named mbean.
javax.management.MBeanServerConnection.getDefaultDomain(),returns the default domain used for naming the mbean.
javax.management.MBeanServerConnection.getDomains(),returns the list of domains in which any mbean is currently registered.
javax.management.MBeanServerConnection.getMBeanCount(),returns the number of mbeans registered in the mbean server.
javax.management.MBeanServerConnection.getMBeanInfo(javax.management.ObjectName),this method discovers the attributes and operations that an mbean exposes for management.
javax.management.MBeanServerConnection.getObjectInstance(javax.management.ObjectName),gets the objectinstance for a given mbean registered with the mbean server.
"javax.management.MBeanServerConnection.invoke(javax.management.ObjectName,java.lang.String,java.lang.Object[],java.lang.String[])",invokes an operation on an mbean.
"javax.management.MBeanServerConnection.isInstanceOf(javax.management.ObjectName,java.lang.String)","returns true if the mbean specified is an instance of the specified class, false otherwise."
javax.management.MBeanServerConnection.isRegistered(javax.management.ObjectName),"checks whether an mbean, identified by its object name, is already registered with the mbean server."
"javax.management.MBeanServerConnection.queryMBeans(javax.management.ObjectName,javax.management.QueryExp)",gets mbeans controlled by the mbean server.
"javax.management.MBeanServerConnection.queryNames(javax.management.ObjectName,javax.management.QueryExp)",gets the names of mbeans controlled by the mbean server.
"javax.management.MBeanServerConnection.removeNotificationListener(javax.management.ObjectName,javax.management.ObjectName)",removes a listener from a registered mbean.
"javax.management.MBeanServerConnection.removeNotificationListener(javax.management.ObjectName,javax.management.ObjectName,javax.management.NotificationFilter,java.lang.Object)",removes a listener from a registered mbean.
"javax.management.MBeanServerConnection.removeNotificationListener(javax.management.ObjectName,javax.management.NotificationListener)",removes a listener from a registered mbean.
"javax.management.MBeanServerConnection.removeNotificationListener(javax.management.ObjectName,javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)",removes a listener from a registered mbean.
"javax.management.MBeanServerConnection.setAttribute(javax.management.ObjectName,javax.management.Attribute)",sets the value of a specific attribute of a named mbean.
"javax.management.MBeanServerConnection.setAttributes(javax.management.ObjectName,javax.management.AttributeList)",sets the values of several attributes of a named mbean.
javax.management.MBeanServerConnection.unregisterMBean(javax.management.ObjectName),unregisters an mbean from the mbean server.
javax.management.MBeanServerDelegateMBean.getImplementationName(),returns the jmx implementation name (the name of this product).
javax.management.MBeanServerDelegateMBean.getImplementationVendor(),returns the jmx implementation vendor (the vendor of this product).
javax.management.MBeanServerDelegateMBean.getImplementationVersion(),returns the jmx implementation version (the version of this product).
javax.management.MBeanServerDelegateMBean.getMBeanServerId(),returns the mbean server agent identity.
javax.management.MBeanServerDelegateMBean.getSpecificationName(),returns the full name of the jmx specification implemented by this product.
javax.management.MBeanServerDelegateMBean.getSpecificationVendor(),returns the vendor of the jmx specification implemented by this product.
javax.management.MBeanServerDelegateMBean.getSpecificationVersion(),returns the version of the jmx specification implemented by this product.
"javax.management.NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)",adds a listener to this mbean.
javax.management.NotificationBroadcaster.getNotificationInfo(),"returns an array indicating, for each notification this mbean may send, the name of the java class of the notification and the notification type."
javax.management.NotificationBroadcaster.removeNotificationListener(javax.management.NotificationListener),removes a listener from this mbean.
"javax.management.NotificationEmitter.removeNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)",removes a listener from this mbean.
javax.management.NotificationFilter.isNotificationEnabled(javax.management.Notification),invoked before sending the specified notification to the listener.
"javax.management.NotificationListener.handleNotification(javax.management.Notification,java.lang.Object)",invoked when a jmx notification occurs.
javax.management.PersistentMBean.load(),instantiates thismbean instance with the data found for the mbean in the persistent store.
javax.management.PersistentMBean.store(),captures the current state of this mbean instance and writes it out to the persistent store.
javax.management.QueryExp.apply(javax.management.ObjectName),applies the queryexp on an mbean.
javax.management.QueryExp.setMBeanServer(javax.management.MBeanServer),sets the mbean server on which the query is to be performed.
javax.management.ValueExp.apply(javax.management.ObjectName),applies the valueexp on a mbean.
javax.management.Attribute.equals(java.lang.Object),compares the current attribute object with another attribute object.
javax.management.Attribute.getName(),returns a string containing the name of the attribute.
javax.management.Attribute.getValue(),returns an object that is the value of this attribute.
javax.management.Attribute.hashCode(),returns a hash code value for this attribute.
javax.management.Attribute.toString(),returns a string object representing this attribute's value.
javax.management.AttributeChangeNotification.getAttributeName(),gets the name of the attribute which has changed.
javax.management.AttributeChangeNotification.getAttributeType(),gets the type of the attribute which has changed.
javax.management.AttributeChangeNotification.getNewValue(),gets the new value of the attribute which has changed.
javax.management.AttributeChangeNotification.getOldValue(),gets the old value of the attribute which has changed.
javax.management.AttributeChangeNotificationFilter.disableAllAttributes(),disables all the attribute names.
javax.management.AttributeChangeNotificationFilter.disableAttribute(java.lang.String),disables all the attribute change notifications the attribute name of which equals the specified attribute name to be sent to the listener.
javax.management.AttributeChangeNotificationFilter.enableAttribute(java.lang.String),enables all the attribute change notifications the attribute name of which equals the specified name to be sent to the listener.
javax.management.AttributeChangeNotificationFilter.getEnabledAttributes(),gets all the enabled attribute names for this filter.
javax.management.AttributeChangeNotificationFilter.isNotificationEnabled(javax.management.Notification),invoked before sending the specified notification to the listener.
javax.management.AttributeList.add(javax.management.Attribute),adds the attribute specified as the last element of the list.
"javax.management.AttributeList.add(int,javax.management.Attribute)",inserts the attribute specified as an element at the position specified.
javax.management.AttributeList.add(java.lang.Object),appends the specified element to the end of this list.
"javax.management.AttributeList.add(int,java.lang.Object)",inserts the specified element at the specified position in this list.
javax.management.AttributeList.addAll(javax.management.AttributeList),"appends all the elements in the attributelist specified to the end of the list, in the order in which they are returned by the iterator of the attributelist specified."
"javax.management.AttributeList.addAll(int,javax.management.AttributeList)","inserts all of the elements in the attributelist specified into this list, starting at the specified position, in the order in which they are returned by the iterator of the attributelist specified."
javax.management.AttributeList.addAll(java.util.Collection<?>),"appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator."
"javax.management.AttributeList.addAll(int,java.util.Collection<?>)","inserts all of the elements in the specified collection into this list, starting at the specified position."
javax.management.AttributeList.asList(),return a view of this list as a list<attribute>.
"javax.management.AttributeList.set(int,javax.management.Attribute)",sets the element at the position specified to be the attribute specified.
"javax.management.AttributeList.set(int,java.lang.Object)",replaces the element at the specified position in this list with the specified element.
javax.management.AttributeValueExp.apply(javax.management.ObjectName),applies the attributevalueexp on an mbean.
javax.management.AttributeValueExp.getAttribute(javax.management.ObjectName),return the value of the given attribute in the named mbean.
javax.management.AttributeValueExp.getAttributeName(),returns a string representation of the name of the attribute.
javax.management.AttributeValueExp.toString(),returns the string representing its value.
javax.management.ImmutableDescriptor.clone(),returns a descriptor which is equal to this descriptor.
javax.management.ImmutableDescriptor.equals(java.lang.Object),compares this descriptor to the given object.
javax.management.ImmutableDescriptor.hashCode(),returns the hash code value for this descriptor.
javax.management.ImmutableDescriptor.isValid(),returns true if all of the fields have legal values given their names.
javax.management.ImmutableDescriptor.removeField(java.lang.String),removes a field from the descriptor.
"javax.management.ImmutableDescriptor.setField(java.lang.String,java.lang.Object)",this operation is unsupported since this class is immutable.
"javax.management.ImmutableDescriptor.setFields(java.lang.String[],java.lang.Object[])",this operation is unsupported since this class is immutable.
javax.management.ImmutableDescriptor.union(javax.management.Descriptor...),return an immutabledescriptor whose contents are the union of the given descriptors.
javax.management.JMX.isMXBeanInterface(java.lang.Class<?>),test whether an interface is an mxbean interface.
"javax.management.JMX.newMBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class<T>)",make a proxy for a standard mbean in a local or remote mbean server.
"javax.management.JMX.newMBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class<T>,boolean)",make a proxy for a standard mbean in a local or remote mbean server that may also support the methods of notificationemitter.
"javax.management.JMX.newMXBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class<T>)",make a proxy for an mxbean in a local or remote mbean server.
"javax.management.JMX.newMXBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class<T>,boolean)",make a proxy for an mxbean in a local or remote mbean server that may also support the methods of notificationemitter.
javax.management.MBeanAttributeInfo.clone(),returns a shallow clone of this instance.
javax.management.MBeanAttributeInfo.equals(java.lang.Object),compare this mbeanattributeinfo to another.
javax.management.MBeanAttributeInfo.getType(),returns the class name of the attribute.
javax.management.MBeanAttributeInfo.isIs(),"indicates if this attribute has an ""is"" getter."
javax.management.MBeanAttributeInfo.isReadable(),whether the value of the attribute can be read.
javax.management.MBeanAttributeInfo.isWritable(),whether new values can be written to the attribute.
javax.management.MBeanConstructorInfo.clone(),returns a shallow clone of this instance.
javax.management.MBeanConstructorInfo.equals(java.lang.Object),compare this mbeanconstructorinfo to another.
javax.management.MBeanConstructorInfo.getSignature(),returns the list of parameters for this constructor.
javax.management.MBeanFeatureInfo.equals(java.lang.Object),compare this mbeanfeatureinfo to another.
javax.management.MBeanFeatureInfo.getDescription(),returns the human-readable description of the feature.
javax.management.MBeanFeatureInfo.getDescriptor(),returns the descriptor for the feature.
javax.management.MBeanFeatureInfo.getName(),returns the name of the feature.
javax.management.MBeanInfo.clone(),returns a shallow clone of this instance.
javax.management.MBeanInfo.equals(java.lang.Object),compare this mbeaninfo to another.
javax.management.MBeanInfo.getAttributes(),returns the list of attributes exposed for management.
javax.management.MBeanInfo.getClassName(),returns the name of the java class of the mbean described by this mbeaninfo.
javax.management.MBeanInfo.getConstructors(),returns the list of the public constructors of the mbean.
javax.management.MBeanInfo.getDescription(),returns a human readable description of the mbean.
javax.management.MBeanInfo.getDescriptor(),get the descriptor of this mbeaninfo.
javax.management.MBeanInfo.getNotifications(),returns the list of the notifications emitted by the mbean.
javax.management.MBeanInfo.getOperations(),returns the list of operations of the mbean.
javax.management.MBeanNotificationInfo.clone(),returns a shallow clone of this instance.
javax.management.MBeanNotificationInfo.equals(java.lang.Object),compare this mbeannotificationinfo to another.
javax.management.MBeanNotificationInfo.getNotifTypes(),returns the array of strings (in dot notation) containing the notification types that the mbean may emit.
javax.management.MBeanOperationInfo.clone(),returns a shallow clone of this instance.
javax.management.MBeanOperationInfo.equals(java.lang.Object),compare this mbeanoperationinfo to another.
javax.management.MBeanOperationInfo.getImpact(),"returns the impact of the method, one of info, action, action_info, unknown."
javax.management.MBeanOperationInfo.getReturnType(),returns the type of the method's return value.
javax.management.MBeanOperationInfo.getSignature(),returns the list of parameters for this operation.
javax.management.MBeanParameterInfo.clone(),returns a shallow clone of this instance.
javax.management.MBeanParameterInfo.equals(java.lang.Object),compare this mbeanparameterinfo to another.
javax.management.MBeanParameterInfo.getType(),returns the type or class name of the data.
javax.management.MBeanPermission.equals(java.lang.Object),checks two mbeanpermission objects for equality.
javax.management.MBeanPermission.getActions(),"returns the ""canonical string representation"" of the actions."
javax.management.MBeanPermission.hashCode(),returns the hash code value for this object.
javax.management.MBeanPermission.implies(java.security.Permission),"checks if this mbeanpermission object ""implies"" the specified permission."
"javax.management.MBeanServerBuilder.newMBeanServer(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate)",this method creates a new mbeanserver implementation object.
javax.management.MBeanServerBuilder.newMBeanServerDelegate(),this method creates a new mbeanserverdelegate for a new mbeanserver.
javax.management.MBeanServerDelegate.getImplementationName(),returns the jmx implementation name (the name of this product).
javax.management.MBeanServerDelegate.getImplementationVendor(),returns the jmx implementation vendor (the vendor of this product).
javax.management.MBeanServerDelegate.getImplementationVersion(),returns the jmx implementation version (the version of this product).
javax.management.MBeanServerDelegate.getMBeanServerId(),returns the mbean server agent identity.
javax.management.MBeanServerDelegate.getSpecificationName(),returns the full name of the jmx specification implemented by this product.
javax.management.MBeanServerDelegate.getSpecificationVendor(),returns the vendor of the jmx specification implemented by this product.
javax.management.MBeanServerDelegate.getSpecificationVersion(),returns the version of the jmx specification implemented by this product.
javax.management.MBeanServerDelegate.sendNotification(javax.management.Notification),enables the mbean server to send a notification.
javax.management.MBeanServerFactory.createMBeanServer(),return a new object implementing the mbeanserver interface with a standard default domain name.
javax.management.MBeanServerFactory.createMBeanServer(java.lang.String),return a new object implementing the mbeanserver interface with the specified default domain name.
javax.management.MBeanServerFactory.findMBeanServer(java.lang.String),return a list of registered mbeanserver objects.
javax.management.MBeanServerFactory.getClassLoaderRepository(javax.management.MBeanServer),return the classloaderrepository used by the given mbeanserver.
javax.management.MBeanServerFactory.newMBeanServer(),"return a new object implementing the mbeanserver interface with a standard default domain name, without keeping an internal reference to this new object."
javax.management.MBeanServerFactory.newMBeanServer(java.lang.String),"return a new object implementing the mbeanserver interface with the specified default domain name, without keeping an internal reference to this new object."
javax.management.MBeanServerFactory.releaseMBeanServer(javax.management.MBeanServer),remove internal mbeanserverfactory references to a created mbeanserver.
javax.management.MBeanServerInvocationHandler.getMBeanServerConnection(),the mbean server connection through which the methods of a proxy using this handler are forwarded.
javax.management.MBeanServerInvocationHandler.getObjectName(),the name of the mbean within the mbean server to which methods are forwarded.
javax.management.MBeanServerInvocationHandler.isMXBean(),"if true, the proxy is for an mxbean, and appropriate mappings are applied to method parameters and return values."
"javax.management.MBeanServerInvocationHandler.newProxyInstance(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class<T>,boolean)",return a proxy that implements the given interface by forwarding its methods through the given mbean server to the named mbean.
javax.management.MBeanServerNotification.getMBeanName(),returns the object name of the mbean that caused the notification.
javax.management.MBeanServerPermission.equals(java.lang.Object),checks two mbeanserverpermission objects for equality.
javax.management.MBeanServerPermission.implies(java.security.Permission),"checks if this mbeanserverpermission object ""implies"" the specified permission."
javax.management.Notification.getMessage(),get the notification message.
javax.management.Notification.getSequenceNumber(),get the notification sequence number.
javax.management.Notification.getTimeStamp(),get the notification timestamp.
javax.management.Notification.getType(),get the notification type.
javax.management.Notification.getUserData(),get the user data.
javax.management.Notification.setSequenceNumber(long),set the notification sequence number.
javax.management.Notification.setSource(java.lang.Object),sets the source.
javax.management.Notification.setTimeStamp(long),set the notification timestamp.
javax.management.Notification.setUserData(java.lang.Object),set the user data.
javax.management.Notification.toString(),returns a string representation of this notification.
"javax.management.NotificationBroadcasterSupport.addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)",adds a listener.
"javax.management.NotificationBroadcasterSupport.handleNotification(javax.management.NotificationListener,javax.management.Notification,java.lang.Object)",this method is called by sendnotification for each listener in order to send the notification to that listener.
javax.management.NotificationBroadcasterSupport.sendNotification(javax.management.Notification),sends a notification.
javax.management.NotificationFilterSupport.disableAllTypes(),disables all notification types.
javax.management.NotificationFilterSupport.disableType(java.lang.String),removes the given prefix from the prefix list.
javax.management.NotificationFilterSupport.enableType(java.lang.String),enables all the notifications the type of which starts with the specified prefix to be sent to the listener.
javax.management.NotificationFilterSupport.getEnabledTypes(),gets all the enabled notification types for this filter.
javax.management.NotificationFilterSupport.isNotificationEnabled(javax.management.Notification),invoked before sending the specified notification to the listener.
javax.management.ObjectInstance.equals(java.lang.Object),compares the current object instance with another object instance.
javax.management.ObjectInstance.getClassName(),returns the class part.
javax.management.ObjectInstance.getObjectName(),returns the object name part.
javax.management.ObjectInstance.toString(),returns a string representing this objectinstance object.
javax.management.ObjectName.apply(javax.management.ObjectName),"test whether this objectname, which may be a pattern, matches another objectname."
javax.management.ObjectName.compareTo(javax.management.ObjectName),compares two objectname instances.
javax.management.ObjectName.equals(java.lang.Object),compares the current object name with another object name.
javax.management.ObjectName.getCanonicalKeyPropertyListString(),"returns a string representation of the list of key properties, in which the key properties are sorted in lexical order."
javax.management.ObjectName.getCanonicalName(),"returns the canonical form of the name; that is, a string representation where the properties are sorted in lexical order."
javax.management.ObjectName.getDomain(),returns the domain part.
javax.management.ObjectName.getInstance(java.lang.String),return an instance of objectname that can be used anywhere an object obtained with new objectname(name) can be used.
"javax.management.ObjectName.getInstance(java.lang.String,java.lang.String,java.lang.String)","return an instance of objectname that can be used anywhere an object obtained with new objectname(domain, key, value) can be used."
"javax.management.ObjectName.getInstance(java.lang.String,,java.lang.String>)","return an instance of objectname that can be used anywhere an object obtained with new objectname(domain, table) can be used."
javax.management.ObjectName.getInstance(javax.management.ObjectName),return an instance of objectname that can be used anywhere the given object can be used.
javax.management.ObjectName.getKeyProperty(java.lang.String),obtains the value associated with a key in a key property.
javax.management.ObjectName.getKeyPropertyList(),returns the key properties as a hashtable.
javax.management.ObjectName.getKeyPropertyListString(),returns a string representation of the list of key properties specified at creation time.
javax.management.ObjectName.hashCode(),returns a hash code for this object name.
javax.management.ObjectName.isDomainPattern(),checks whether the object name is a pattern on the domain part.
javax.management.ObjectName.isPattern(),checks whether the object name is a pattern.
javax.management.ObjectName.isPropertyListPattern(),checks whether the object name is a pattern on the key property list.
javax.management.ObjectName.isPropertyPattern(),checks whether the object name is a pattern on the key properties.
javax.management.ObjectName.isPropertyValuePattern(),checks whether the object name is a pattern on the value part of at least one of the key properties.
javax.management.ObjectName.isPropertyValuePattern(java.lang.String),checks whether the value associated with a key in a key property is a pattern.
javax.management.ObjectName.quote(java.lang.String),"returns a quoted form of the given string, suitable for inclusion in an objectname."
javax.management.ObjectName.toString(),returns a string representation of the object name.
javax.management.ObjectName.unquote(java.lang.String),returns an unquoted form of the given string.
"javax.management.Query.and(javax.management.QueryExp,javax.management.QueryExp)",returns a query expression that is the conjunction of two other query expressions.
"javax.management.Query.anySubString(javax.management.AttributeValueExp,javax.management.StringValueExp)",returns a query expression that represents a matching constraint on a string argument.
javax.management.Query.attr(java.lang.String),returns a new attribute expression.
"javax.management.Query.attr(java.lang.String,java.lang.String)",returns a new qualified attribute expression.
"javax.management.Query.between(javax.management.ValueExp,javax.management.ValueExp,javax.management.ValueExp)",returns a query expression that represents the constraint that one value is between two other values.
javax.management.Query.classattr(),returns a new class attribute expression which can be used in any query call that expects a valueexp.
"javax.management.Query.div(javax.management.ValueExp,javax.management.ValueExp)",returns a binary expression representing the quotient of two numeric values.
"javax.management.Query.eq(javax.management.ValueExp,javax.management.ValueExp)",returns a query expression that represents an equality constraint on two values.
"javax.management.Query.finalSubString(javax.management.AttributeValueExp,javax.management.StringValueExp)",returns a query expression that represents a matching constraint on a string argument.
"javax.management.Query.geq(javax.management.ValueExp,javax.management.ValueExp)","returns a query expression that represents a ""greater than or equal to"" constraint on two values."
"javax.management.Query.gt(javax.management.ValueExp,javax.management.ValueExp)","returns a query expression that represents a ""greater than"" constraint on two values."
"javax.management.Query.in(javax.management.ValueExp,javax.management.ValueExp[])",returns an expression constraining a value to be one of an explicit list.
"javax.management.Query.initialSubString(javax.management.AttributeValueExp,javax.management.StringValueExp)",returns a query expression that represents a matching constraint on a string argument.
javax.management.Query.isInstanceOf(javax.management.StringValueExp),returns a query expression that represents an inheritance constraint on an mbean class.
"javax.management.Query.leq(javax.management.ValueExp,javax.management.ValueExp)","returns a query expression that represents a ""less than or equal to"" constraint on two values."
"javax.management.Query.lt(javax.management.ValueExp,javax.management.ValueExp)","returns a query expression that represents a ""less than"" constraint on two values."
"javax.management.Query.match(javax.management.AttributeValueExp,javax.management.StringValueExp)",returns a query expression that represents a matching constraint on a string argument.
"javax.management.Query.minus(javax.management.ValueExp,javax.management.ValueExp)",returns a binary expression representing the difference between two numeric values.
javax.management.Query.not(javax.management.QueryExp),returns a constraint that is the negation of its argument.
"javax.management.Query.or(javax.management.QueryExp,javax.management.QueryExp)",returns a query expression that is the disjunction of two other query expressions.
"javax.management.Query.plus(javax.management.ValueExp,javax.management.ValueExp)","returns a binary expression representing the sum of two numeric values, or the concatenation of two string values."
"javax.management.Query.times(javax.management.ValueExp,javax.management.ValueExp)",returns a binary expression representing the product of two numeric values.
javax.management.Query.value(java.lang.String),returns a new string expression.
javax.management.Query.value(java.lang.Number),returns a numeric value expression that can be used in any query call that expects a valueexp.
javax.management.Query.value(int),returns a numeric value expression that can be used in any query call that expects a valueexp.
javax.management.Query.value(long),returns a numeric value expression that can be used in any query call that expects a valueexp.
javax.management.Query.value(float),returns a numeric value expression that can be used in any query call that expects a valueexp.
javax.management.Query.value(double),returns a numeric value expression that can be used in any query call that expects a valueexp.
javax.management.Query.value(boolean),returns a boolean value expression that can be used in any query call that expects a valueexp.
javax.management.QueryEval.getMBeanServer(),return the mbean server that was most recently given to the setmbeanserver method by this thread.
javax.management.QueryEval.setMBeanServer(javax.management.MBeanServer),sets the mbean server on which the query is to be performed.
javax.management.StandardEmitterMBean.sendNotification(javax.management.Notification),sends a notification.
javax.management.StandardMBean.cacheMBeanInfo(javax.management.MBeanInfo),customization hook: cache the mbeaninfo built for this object.
javax.management.StandardMBean.getCachedMBeanInfo(),customization hook: return the mbeaninfo cached for this object.
javax.management.StandardMBean.getClassName(javax.management.MBeanInfo),customization hook: get the classname that will be used in the mbeaninfo returned by this mbean.
"javax.management.StandardMBean.getConstructors(javax.management.MBeanConstructorInfo[],java.lang.Object)",customization hook: get the mbeanconstructorinfo[] that will be used in the mbeaninfo returned by this mbean.
javax.management.StandardMBean.getDescription(javax.management.MBeanInfo),customization hook: get the description that will be used in the mbeaninfo returned by this mbean.
javax.management.StandardMBean.getDescription(javax.management.MBeanFeatureInfo),customization hook: get the description that will be used in the mbeanfeatureinfo returned by this mbean.
javax.management.StandardMBean.getDescription(javax.management.MBeanAttributeInfo),customization hook: get the description that will be used in the mbeanattributeinfo returned by this mbean.
javax.management.StandardMBean.getDescription(javax.management.MBeanConstructorInfo),customization hook: get the description that will be used in the mbeanconstructorinfo returned by this mbean.
"javax.management.StandardMBean.getDescription(javax.management.MBeanConstructorInfo,javax.management.MBeanParameterInfo,int)",customization hook: get the description that will be used for the sequence mbeanparameterinfo of the mbeanconstructorinfo returned by this mbean.
javax.management.StandardMBean.getDescription(javax.management.MBeanOperationInfo),customization hook: get the description that will be used in the mbeanoperationinfo returned by this mbean.
"javax.management.StandardMBean.getDescription(javax.management.MBeanOperationInfo,javax.management.MBeanParameterInfo,int)",customization hook: get the description that will be used for the sequence mbeanparameterinfo of the mbeanoperationinfo returned by this mbean.
javax.management.StandardMBean.getImpact(javax.management.MBeanOperationInfo),customization hook: get the impact flag of the operation that will be used in the mbeanoperationinfo returned by this mbean.
javax.management.StandardMBean.getImplementation(),get the implementation of this standard mbean (or mxbean).
javax.management.StandardMBean.getImplementationClass(),get the class of the implementation of this standard mbean (or mxbean).
javax.management.StandardMBean.getMBeanInfo(),get the mbeaninfo for this mbean.
javax.management.StandardMBean.getMBeanInterface(),get the management interface of this standard mbean (or mxbean).
"javax.management.StandardMBean.getParameterName(javax.management.MBeanConstructorInfo,javax.management.MBeanParameterInfo,int)",customization hook: get the name that will be used for the sequence mbeanparameterinfo of the mbeanconstructorinfo returned by this mbean.
"javax.management.StandardMBean.getParameterName(javax.management.MBeanOperationInfo,javax.management.MBeanParameterInfo,int)",customization hook: get the name that will be used for the sequence mbeanparameterinfo of the mbeanoperationinfo returned by this mbean.
javax.management.StandardMBean.postDeregister(),allows the mbean to perform any operations needed after having been unregistered in the mbean server.
javax.management.StandardMBean.postRegister(java.lang.Boolean),allows the mbean to perform any operations needed after having been registered in the mbean server or after the registration has failed.
javax.management.StandardMBean.preDeregister(),allows the mbean to perform any operations it needs before being unregistered by the mbean server.
"javax.management.StandardMBean.preRegister(javax.management.MBeanServer,javax.management.ObjectName)",allows the mbean to perform any operations it needs before being registered in the mbean server.
javax.management.StandardMBean.setImplementation(java.lang.Object),replace the implementation object wrapped in this object.
javax.management.StringValueExp.apply(javax.management.ObjectName),applies the valueexp on a mbean.
javax.management.StringValueExp.getValue(),returns the string represented by the stringvalueexp instance.
javax.management.StringValueExp.toString(),returns the string representing the object.
javax.management.BadAttributeValueExpException.toString(),returns the string representing the object.
javax.management.BadBinaryOpValueExpException.getExp(),returns the valueexp that originated the exception.
javax.management.BadBinaryOpValueExpException.toString(),returns the string representing the object.
javax.management.BadStringOperationException.toString(),returns the string representing the object.
javax.management.MBeanException.getCause(),return the actual exception thrown.
javax.management.MBeanException.getTargetException(),return the actual exception thrown.
javax.management.ReflectionException.getCause(),returns the actual exception thrown.
javax.management.ReflectionException.getTargetException(),returns the actual exception thrown.
javax.management.RuntimeErrorException.getCause(),returns the actual error thrown.
javax.management.RuntimeErrorException.getTargetError(),returns the actual error thrown.
javax.management.RuntimeMBeanException.getCause(),returns the actual runtimeexception thrown.
javax.management.RuntimeMBeanException.getTargetException(),returns the actual runtimeexception thrown.
javax.management.RuntimeOperationsException.getCause(),returns the actual runtimeexception thrown.
javax.management.RuntimeOperationsException.getTargetException(),returns the actual runtimeexception thrown.
javax.management.loading.ClassLoaderRepository.loadClass(java.lang.String),load the given class name through the list of class loaders.
"javax.management.loading.ClassLoaderRepository.loadClassBefore(java.lang.ClassLoader,java.lang.String)","load the given class name through the list of class loaders, stopping at the given one."
"javax.management.loading.ClassLoaderRepository.loadClassWithout(java.lang.ClassLoader,java.lang.String)","load the given class name through the list of class loaders, excluding the given one."
javax.management.loading.MLetMBean.addURL(java.net.URL),appends the specified url to the list of urls to search for classes and resources.
javax.management.loading.MLetMBean.addURL(java.lang.String),appends the specified url to the list of urls to search for classes and resources.
javax.management.loading.MLetMBean.getLibraryDirectory(),gets the current directory used by the library loader for storing native libraries before they are loaded into memory.
javax.management.loading.MLetMBean.getMBeansFromURL(java.lang.String),loads a text file containing mlet tags that define the mbeans to be added to the mbean server.
javax.management.loading.MLetMBean.getMBeansFromURL(java.net.URL),loads a text file containing mlet tags that define the mbeans to be added to the mbean server.
javax.management.loading.MLetMBean.getResource(java.lang.String),finds the resource with the given name.
javax.management.loading.MLetMBean.getResourceAsStream(java.lang.String),returns an input stream for reading the specified resource.
javax.management.loading.MLetMBean.getResources(java.lang.String),finds all the resources with the given name.
javax.management.loading.MLetMBean.getURLs(),returns the search path of urls for loading classes and resources.
javax.management.loading.MLetMBean.setLibraryDirectory(java.lang.String),sets the directory used by the library loader for storing native libraries before they are loaded into memory.
javax.management.loading.MLet.addURL(java.net.URL),appends the specified url to the list of urls to search for classes and resources.
javax.management.loading.MLet.addURL(java.lang.String),appends the specified url to the list of urls to search for classes and resources.
"javax.management.loading.MLet.check(java.lang.String,java.net.URL,java.lang.String,javax.management.loading.MLetContent)",this method is to be overridden when extending this service to support caching and versioning.
javax.management.loading.MLet.findClass(java.lang.String),this is the main method for class loaders that is being redefined.
javax.management.loading.MLet.findLibrary(java.lang.String),returns the absolute path name of a native library.
javax.management.loading.MLet.getLibraryDirectory(),gets the current directory used by the library loader for storing native libraries before they are loaded into memory.
javax.management.loading.MLet.getMBeansFromURL(java.net.URL),loads a text file containing mlet tags that define the mbeans to be added to the mbean server.
javax.management.loading.MLet.getMBeansFromURL(java.lang.String),loads a text file containing mlet tags that define the mbeans to be added to the mbean server.
javax.management.loading.MLet.getURLs(),returns the search path of urls for loading classes and resources.
"javax.management.loading.MLet.loadClass(java.lang.String,javax.management.loading.ClassLoaderRepository)","load a class, using the given classloaderrepository if the class is not found in this mlet's urls."
javax.management.loading.MLet.postDeregister(),allows the m-let to perform any operations needed after having been unregistered in the mbean server.
javax.management.loading.MLet.postRegister(java.lang.Boolean),allows the m-let to perform any operations needed after having been registered in the mbean server or after the registration has failed.
javax.management.loading.MLet.preDeregister(),allows the m-let to perform any operations it needs before being unregistered by the mbean server.
"javax.management.loading.MLet.preRegister(javax.management.MBeanServer,javax.management.ObjectName)",allows the m-let to perform any operations it needs before being registered in the mbean server.
javax.management.loading.MLet.readExternal(java.io.ObjectInput),restore this mlet's contents from the given objectinput.
javax.management.loading.MLet.setLibraryDirectory(java.lang.String),sets the directory used by the library loader for storing native libraries before they are loaded into memory.
javax.management.loading.MLet.writeExternal(java.io.ObjectOutput),save this mlet's contents to the given objectoutput.
javax.management.loading.MLetContent.getAttributes(),gets the attributes of the mlet tag.
javax.management.loading.MLetContent.getCode(),gets the value of the code attribute of the mlet tag.
javax.management.loading.MLetContent.getCodeBase(),gets the code base url.
javax.management.loading.MLetContent.getDocumentBase(),gets the mlet text file's base url.
javax.management.loading.MLetContent.getJarFiles(),gets the list of .
javax.management.loading.MLetContent.getName(),gets the value of the name attribute of the mlet tag.
javax.management.loading.MLetContent.getParameterTypes(),gets the list of values of the type attribute in each nested <param> tag within the mlet tag.
javax.management.loading.MLetContent.getParameterValues(),gets the list of values of the value attribute in each nested <param> tag within the mlet tag.
javax.management.loading.MLetContent.getSerializedObject(),gets the value of the object attribute of the mlet tag.
javax.management.loading.MLetContent.getVersion(),gets the value of the version attribute of the mlet tag.
"javax.management.modelmbean.ModelMBean.setManagedResource(java.lang.Object,java.lang.String)",sets the instance handle of the object against which to execute all methods in this modelmbean management interface (mbeaninfo and descriptors).
javax.management.modelmbean.ModelMBean.setModelMBeanInfo(javax.management.modelmbean.ModelMBeanInfo),initializes a modelmbean object using modelmbeaninfo passed in.
javax.management.modelmbean.ModelMBeanInfo.clone(),creates and returns a copy of this object.
javax.management.modelmbean.ModelMBeanInfo.getAttribute(java.lang.String),returns a modelmbeanattributeinfo requested by name.
javax.management.modelmbean.ModelMBeanInfo.getAttributes(),returns the list of attributes exposed for management.
javax.management.modelmbean.ModelMBeanInfo.getClassName(),returns the name of the java class of the mbean described by this mbeaninfo.
javax.management.modelmbean.ModelMBeanInfo.getConstructors(),returns the list of the public constructors of the mbean.
javax.management.modelmbean.ModelMBeanInfo.getDescription(),returns a human readable description of the mbean.
"javax.management.modelmbean.ModelMBeanInfo.getDescriptor(java.lang.String,java.lang.String)",returns a descriptor requested by name and descriptortype.
javax.management.modelmbean.ModelMBeanInfo.getDescriptors(java.lang.String),returns a descriptor array consisting of all descriptors for the modelmbeaninfo of type indescriptortype.
javax.management.modelmbean.ModelMBeanInfo.getMBeanDescriptor(),returns the modelmbean's descriptor which contains mbean wide policies.
javax.management.modelmbean.ModelMBeanInfo.getNotification(java.lang.String),returns a modelmbeannotificationinfo requested by name.
javax.management.modelmbean.ModelMBeanInfo.getNotifications(),returns the list of the notifications emitted by the mbean.
javax.management.modelmbean.ModelMBeanInfo.getOperation(java.lang.String),returns a modelmbeanoperationinfo requested by name.
javax.management.modelmbean.ModelMBeanInfo.getOperations(),returns the list of operations of the mbean.
"javax.management.modelmbean.ModelMBeanInfo.setDescriptor(javax.management.Descriptor,java.lang.String)",sets descriptors in the info array of type indescriptortype for the modelmbean.
javax.management.modelmbean.ModelMBeanInfo.setDescriptors(javax.management.Descriptor[]),adds or replaces descriptors in the modelmbeaninfo.
javax.management.modelmbean.ModelMBeanInfo.setMBeanDescriptor(javax.management.Descriptor),sets the modelmbean's descriptor.
"javax.management.modelmbean.ModelMBeanNotificationBroadcaster.addAttributeChangeNotificationListener(javax.management.NotificationListener,java.lang.String,java.lang.Object)",registers an object which implements the notificationlistener interface as a listener.
"javax.management.modelmbean.ModelMBeanNotificationBroadcaster.removeAttributeChangeNotificationListener(javax.management.NotificationListener,java.lang.String)",removes a listener for attributechangenotifications from the requiredmodelmbean.
javax.management.modelmbean.ModelMBeanNotificationBroadcaster.sendAttributeChangeNotification(javax.management.AttributeChangeNotification),sends an attributechangenotification which is passed in to the registered attributechangenotification listeners on the modelmbean.
"javax.management.modelmbean.ModelMBeanNotificationBroadcaster.sendAttributeChangeNotification(javax.management.Attribute,javax.management.Attribute)",sends an attributechangenotification which contains the old value and new value for the attribute to the registered attributechangenotification listeners on the modelmbean.
javax.management.modelmbean.ModelMBeanNotificationBroadcaster.sendNotification(javax.management.Notification),sends a notification which is passed in to the registered notification listeners on the modelmbean as a jmx.
javax.management.modelmbean.ModelMBeanNotificationBroadcaster.sendNotification(java.lang.String),sends a notification which contains the text string that is passed in to the registered notification listeners on the modelmbean.
javax.management.modelmbean.DescriptorSupport.clone(),returns a new descriptor which is a duplicate of the descriptor.
javax.management.modelmbean.DescriptorSupport.equals(java.lang.Object),compares this descriptor to the given object.
javax.management.modelmbean.DescriptorSupport.hashCode(),returns the hash code value for this descriptor.
javax.management.modelmbean.DescriptorSupport.isValid(),returns true if all of the fields have legal values given their names.
javax.management.modelmbean.DescriptorSupport.toString(),returns a human readable string representing the descriptor.
javax.management.modelmbean.DescriptorSupport.toXMLString(),returns an xml string representing the descriptor.
javax.management.modelmbean.ModelMBeanAttributeInfo.clone(),creates and returns a new modelmbeanattributeinfo which is a duplicate of this modelmbeanattributeinfo.
javax.management.modelmbean.ModelMBeanAttributeInfo.getDescriptor(),gets a copy of the associated descriptor for the modelmbeanattributeinfo.
javax.management.modelmbean.ModelMBeanAttributeInfo.setDescriptor(javax.management.Descriptor),sets associated descriptor (full replace) for the modelmbeanattributedescriptor.
javax.management.modelmbean.ModelMBeanAttributeInfo.toString(),returns a human-readable version of the modelmbeanattributeinfo instance.
javax.management.modelmbean.ModelMBeanConstructorInfo.clone(),creates and returns a new modelmbeanconstructorinfo which is a duplicate of this modelmbeanconstructorinfo.
javax.management.modelmbean.ModelMBeanConstructorInfo.getDescriptor(),returns a copy of the associated descriptor.
javax.management.modelmbean.ModelMBeanConstructorInfo.setDescriptor(javax.management.Descriptor),sets associated descriptor (full replace) of modelmbeanconstructorinfo.
javax.management.modelmbean.ModelMBeanConstructorInfo.toString(),returns a string containing the entire contents of the modelmbeanconstructorinfo in human readable form.
javax.management.modelmbean.ModelMBeanInfoSupport.clone(),returns a shallow clone of this instance.
javax.management.modelmbean.ModelMBeanInfoSupport.getConstructor(java.lang.String),returns the modelmbeanconstructorinfo requested by name.
javax.management.modelmbean.ModelMBeanInfoSupport.getDescriptor(java.lang.String),returns a descriptor requested by name.
javax.management.modelmbean.ModelMBeanNotificationInfo.clone(),creates and returns a new modelmbeannotificationinfo which is a duplicate of this modelmbeannotificationinfo.
javax.management.modelmbean.ModelMBeanNotificationInfo.getDescriptor(),returns a copy of the associated descriptor for the modelmbeannotificationinfo.
javax.management.modelmbean.ModelMBeanNotificationInfo.setDescriptor(javax.management.Descriptor),"sets associated descriptor (full replace) for the modelmbeannotificationinfo if the new descriptor is null, then the associated descriptor reverts to a default descriptor."
javax.management.modelmbean.ModelMBeanNotificationInfo.toString(),returns a human readable string containing modelmbeannotificationinfo.
javax.management.modelmbean.ModelMBeanOperationInfo.clone(),creates and returns a new modelmbeanoperationinfo which is a duplicate of this modelmbeanoperationinfo.
javax.management.modelmbean.ModelMBeanOperationInfo.getDescriptor(),returns a copy of the associated descriptor of the modelmbeanoperationinfo.
javax.management.modelmbean.ModelMBeanOperationInfo.setDescriptor(javax.management.Descriptor),"sets associated descriptor (full replace) for the modelmbeanoperationinfo if the new descriptor is null, then the associated descriptor reverts to a default descriptor."
javax.management.modelmbean.ModelMBeanOperationInfo.toString(),returns a string containing the entire contents of the modelmbeanoperationinfo in human readable form.
"javax.management.modelmbean.RequiredModelMBean.addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)",registers an object which implements the notificationlistener interface as a listener.
javax.management.modelmbean.RequiredModelMBean.getAttribute(java.lang.String),returns the value of a specific attribute defined for this modelmbean.
javax.management.modelmbean.RequiredModelMBean.getAttributes(java.lang.String[]),returns the values of several attributes in the modelmbean.
javax.management.modelmbean.RequiredModelMBean.getClassLoaderRepository(),return the class loader repository used to perform class loading.
javax.management.modelmbean.RequiredModelMBean.getMBeanInfo(),"returns the attributes, operations, constructors and notifications that this requiredmodelmbean exposes for management."
javax.management.modelmbean.RequiredModelMBean.getNotificationInfo(),returns the array of notifications always generated by the requiredmodelmbean.
"javax.management.modelmbean.RequiredModelMBean.invoke(java.lang.String,java.lang.Object[],java.lang.String[])",invokes a method on or through a requiredmodelmbean and returns the result of the method execution.
javax.management.modelmbean.RequiredModelMBean.load(),instantiates this mbean instance with the data found for the mbean in the persistent store.
javax.management.modelmbean.RequiredModelMBean.postDeregister(),allows the mbean to perform any operations needed after having been unregistered in the mbean server.
javax.management.modelmbean.RequiredModelMBean.postRegister(java.lang.Boolean),allows the mbean to perform any operations needed after having been registered in the mbean server or after the registration has failed.
javax.management.modelmbean.RequiredModelMBean.preDeregister(),allows the mbean to perform any operations it needs before being unregistered by the mbean server.
"javax.management.modelmbean.RequiredModelMBean.preRegister(javax.management.MBeanServer,javax.management.ObjectName)",allows the mbean to perform any operations it needs before being registered in the mbean server.
javax.management.modelmbean.RequiredModelMBean.removeNotificationListener(javax.management.NotificationListener),removes a listener for notifications from the requiredmodelmbean.
javax.management.modelmbean.RequiredModelMBean.setAttribute(javax.management.Attribute),sets the value of a specific attribute of a named modelmbean.
javax.management.modelmbean.RequiredModelMBean.setAttributes(javax.management.AttributeList),sets the values of an array of attributes of this modelmbean.
"javax.management.modelmbean.RequiredModelMBean.setManagedResource(java.lang.Object,java.lang.String)",sets the instance handle of the object against which to execute all methods in this modelmbean management interface (mbeaninfo and descriptors).
javax.management.modelmbean.RequiredModelMBean.setModelMBeanInfo(javax.management.modelmbean.ModelMBeanInfo),initializes a modelmbean object using modelmbeaninfo passed in.
javax.management.modelmbean.RequiredModelMBean.store(),captures the current state of this mbean instance and writes it out to the persistent store.
javax.management.monitor.CounterMonitorMBean.getDerivedGauge(javax.management.ObjectName),gets the derived gauge for the specified mbean.
javax.management.monitor.CounterMonitorMBean.getDerivedGaugeTimeStamp(javax.management.ObjectName),gets the derived gauge timestamp for the specified mbean.
javax.management.monitor.CounterMonitorMBean.getDifferenceMode(),gets the difference mode flag value.
javax.management.monitor.CounterMonitorMBean.getInitThreshold(),gets the initial threshold value common to all observed objects.
javax.management.monitor.CounterMonitorMBean.getModulus(),gets the modulus value.
javax.management.monitor.CounterMonitorMBean.getNotify(),gets the notification's on/off switch value.
javax.management.monitor.CounterMonitorMBean.getOffset(),gets the offset value.
javax.management.monitor.CounterMonitorMBean.getThreshold(javax.management.ObjectName),gets the threshold value for the specified mbean.
javax.management.monitor.CounterMonitorMBean.setDifferenceMode(boolean),sets the difference mode flag value.
javax.management.monitor.CounterMonitorMBean.setInitThreshold(java.lang.Number),sets the initial threshold value common to all observed mbeans.
javax.management.monitor.CounterMonitorMBean.setModulus(java.lang.Number),sets the modulus value.
javax.management.monitor.CounterMonitorMBean.setNotify(boolean),sets the notification's on/off switch value.
javax.management.monitor.CounterMonitorMBean.setOffset(java.lang.Number),sets the offset value.
javax.management.monitor.GaugeMonitorMBean.getDerivedGauge(javax.management.ObjectName),gets the derived gauge for the specified mbean.
javax.management.monitor.GaugeMonitorMBean.getDerivedGaugeTimeStamp(javax.management.ObjectName),gets the derived gauge timestamp for the specified mbean.
javax.management.monitor.GaugeMonitorMBean.getDifferenceMode(),gets the difference mode flag value.
javax.management.monitor.GaugeMonitorMBean.getHighThreshold(),gets the high threshold value.
javax.management.monitor.GaugeMonitorMBean.getLowThreshold(),gets the low threshold value.
javax.management.monitor.GaugeMonitorMBean.getNotifyHigh(),gets the high notification's on/off switch value.
javax.management.monitor.GaugeMonitorMBean.getNotifyLow(),gets the low notification's on/off switch value.
javax.management.monitor.GaugeMonitorMBean.setDifferenceMode(boolean),sets the difference mode flag value.
javax.management.monitor.GaugeMonitorMBean.setNotifyHigh(boolean),sets the high notification's on/off switch value.
javax.management.monitor.GaugeMonitorMBean.setNotifyLow(boolean),sets the low notification's on/off switch value.
"javax.management.monitor.GaugeMonitorMBean.setThresholds(java.lang.Number,java.lang.Number)",sets the high and the low threshold values.
javax.management.monitor.MonitorMBean.addObservedObject(javax.management.ObjectName),adds the specified object in the set of observed mbeans.
javax.management.monitor.MonitorMBean.containsObservedObject(javax.management.ObjectName),tests whether the specified object is in the set of observed mbeans.
javax.management.monitor.MonitorMBean.getGranularityPeriod(),gets the granularity period (in milliseconds).
javax.management.monitor.MonitorMBean.getObservedAttribute(),gets the attribute being observed.
javax.management.monitor.MonitorMBean.getObservedObjects(),returns an array containing the objects being observed.
javax.management.monitor.MonitorMBean.isActive(),tests if the monitor mbean is active.
javax.management.monitor.MonitorMBean.removeObservedObject(javax.management.ObjectName),removes the specified object from the set of observed mbeans.
javax.management.monitor.MonitorMBean.setGranularityPeriod(long),sets the granularity period (in milliseconds).
javax.management.monitor.MonitorMBean.setObservedAttribute(java.lang.String),sets the attribute to observe.
javax.management.monitor.MonitorMBean.start(),starts the monitor.
javax.management.monitor.MonitorMBean.stop(),stops the monitor.
javax.management.monitor.StringMonitorMBean.getDerivedGauge(javax.management.ObjectName),gets the derived gauge for the specified mbean.
javax.management.monitor.StringMonitorMBean.getDerivedGaugeTimeStamp(javax.management.ObjectName),gets the derived gauge timestamp for the specified mbean.
javax.management.monitor.StringMonitorMBean.getNotifyDiffer(),gets the differing notification's on/off switch value.
javax.management.monitor.StringMonitorMBean.getNotifyMatch(),gets the matching notification's on/off switch value.
javax.management.monitor.StringMonitorMBean.getStringToCompare(),gets the string to compare with the observed attribute.
javax.management.monitor.StringMonitorMBean.setNotifyDiffer(boolean),sets the differing notification's on/off switch value.
javax.management.monitor.StringMonitorMBean.setNotifyMatch(boolean),sets the matching notification's on/off switch value.
javax.management.monitor.StringMonitorMBean.setStringToCompare(java.lang.String),sets the string to compare with the observed attribute.
javax.management.monitor.CounterMonitor.getDerivedGauge(javax.management.ObjectName),"gets the derived gauge of the specified object, if this object is contained in the set of observed mbeans, or null otherwise."
javax.management.monitor.CounterMonitor.getDerivedGaugeTimeStamp(javax.management.ObjectName),"gets the derived gauge timestamp of the specified object, if this object is contained in the set of observed mbeans, or 0 otherwise."
javax.management.monitor.CounterMonitor.getDifferenceMode(),gets the difference mode flag value common to all observed mbeans.
javax.management.monitor.CounterMonitor.getInitThreshold(),gets the initial threshold value common to all observed objects.
javax.management.monitor.CounterMonitor.getModulus(),gets the modulus value common to all observed mbeans.
javax.management.monitor.CounterMonitor.getNotificationInfo(),returns a notificationinfo object containing the name of the java class of the notification and the notification types sent by the counter monitor.
javax.management.monitor.CounterMonitor.getNotify(),gets the notification's on/off switch value common to all observed mbeans.
javax.management.monitor.CounterMonitor.getOffset(),gets the offset value common to all observed mbeans.
javax.management.monitor.CounterMonitor.getThreshold(javax.management.ObjectName),"gets the current threshold value of the specified object, if this object is contained in the set of observed mbeans, or null otherwise."
javax.management.monitor.CounterMonitor.setDifferenceMode(boolean),sets the difference mode flag value common to all observed mbeans.
javax.management.monitor.CounterMonitor.setInitThreshold(java.lang.Number),sets the initial threshold value common to all observed objects.
javax.management.monitor.CounterMonitor.setModulus(java.lang.Number),sets the modulus value common to all observed mbeans.
javax.management.monitor.CounterMonitor.setNotify(boolean),sets the notification's on/off switch value common to all observed mbeans.
javax.management.monitor.CounterMonitor.setOffset(java.lang.Number),sets the offset value common to all observed mbeans.
javax.management.monitor.CounterMonitor.start(),starts the counter monitor.
javax.management.monitor.CounterMonitor.stop(),stops the counter monitor.
javax.management.monitor.GaugeMonitor.getDerivedGauge(javax.management.ObjectName),"gets the derived gauge of the specified object, if this object is contained in the set of observed mbeans, or null otherwise."
javax.management.monitor.GaugeMonitor.getDerivedGaugeTimeStamp(javax.management.ObjectName),"gets the derived gauge timestamp of the specified object, if this object is contained in the set of observed mbeans, or 0 otherwise."
javax.management.monitor.GaugeMonitor.getDifferenceMode(),gets the difference mode flag value common to all observed mbeans.
javax.management.monitor.GaugeMonitor.getHighThreshold(),gets the high threshold value common to all observed mbeans.
javax.management.monitor.GaugeMonitor.getLowThreshold(),gets the low threshold value common to all observed mbeans.
javax.management.monitor.GaugeMonitor.getNotificationInfo(),returns a notificationinfo object containing the name of the java class of the notification and the notification types sent by the gauge monitor.
javax.management.monitor.GaugeMonitor.getNotifyHigh(),gets the high notification's on/off switch value common to all observed mbeans.
javax.management.monitor.GaugeMonitor.getNotifyLow(),gets the low notification's on/off switch value common to all observed mbeans.
javax.management.monitor.GaugeMonitor.setDifferenceMode(boolean),sets the difference mode flag value common to all observed mbeans.
javax.management.monitor.GaugeMonitor.setNotifyHigh(boolean),sets the high notification's on/off switch value common to all observed mbeans.
javax.management.monitor.GaugeMonitor.setNotifyLow(boolean),sets the low notification's on/off switch value common to all observed mbeans.
"javax.management.monitor.GaugeMonitor.setThresholds(java.lang.Number,java.lang.Number)",sets the high and the low threshold values common to all observed mbeans.
javax.management.monitor.GaugeMonitor.start(),starts the gauge monitor.
javax.management.monitor.GaugeMonitor.stop(),stops the gauge monitor.
javax.management.monitor.Monitor.addObservedObject(javax.management.ObjectName),"adds the specified object in the set of observed mbeans, if this object is not already present."
javax.management.monitor.Monitor.containsObservedObject(javax.management.ObjectName),tests whether the specified object is in the set of observed mbeans.
javax.management.monitor.Monitor.getGranularityPeriod(),gets the granularity period (in milliseconds).
javax.management.monitor.Monitor.getObservedAttribute(),gets the attribute being observed.
javax.management.monitor.Monitor.getObservedObjects(),returns an array containing the objects being observed.
javax.management.monitor.Monitor.isActive(),tests whether the monitor mbean is active.
javax.management.monitor.Monitor.postDeregister(),allows the monitor mbean to perform any operations needed after having been unregistered by the mbean server.
javax.management.monitor.Monitor.postRegister(java.lang.Boolean),allows the monitor mbean to perform any operations needed after having been registered in the mbean server or after the registration has failed.
javax.management.monitor.Monitor.preDeregister(),allows the monitor mbean to perform any operations it needs before being unregistered by the mbean server.
"javax.management.monitor.Monitor.preRegister(javax.management.MBeanServer,javax.management.ObjectName)",allows the monitor mbean to perform any operations it needs before being registered in the mbean server.
javax.management.monitor.Monitor.removeObservedObject(javax.management.ObjectName),removes the specified object from the set of observed mbeans.
javax.management.monitor.Monitor.setGranularityPeriod(long),sets the granularity period (in milliseconds).
javax.management.monitor.Monitor.setObservedAttribute(java.lang.String),sets the attribute to observe.
javax.management.monitor.Monitor.start(),starts the monitor.
javax.management.monitor.Monitor.stop(),stops the monitor.
javax.management.monitor.MonitorNotification.getDerivedGauge(),gets the derived gauge of this monitor notification.
javax.management.monitor.MonitorNotification.getObservedAttribute(),gets the observed attribute of this monitor notification.
javax.management.monitor.MonitorNotification.getObservedObject(),gets the observed object of this monitor notification.
javax.management.monitor.MonitorNotification.getTrigger(),gets the threshold/string (depending on the monitor type) that triggered off this monitor notification.
javax.management.monitor.StringMonitor.getDerivedGauge(javax.management.ObjectName),"gets the derived gauge of the specified object, if this object is contained in the set of observed mbeans, or null otherwise."
javax.management.monitor.StringMonitor.getDerivedGaugeTimeStamp(javax.management.ObjectName),"gets the derived gauge timestamp of the specified object, if this object is contained in the set of observed mbeans, or 0 otherwise."
javax.management.monitor.StringMonitor.getNotificationInfo(),returns a notificationinfo object containing the name of the java class of the notification and the notification types sent by the string monitor.
javax.management.monitor.StringMonitor.getNotifyDiffer(),gets the differing notification's on/off switch value common to all observed mbeans.
javax.management.monitor.StringMonitor.getNotifyMatch(),gets the matching notification's on/off switch value common to all observed mbeans.
javax.management.monitor.StringMonitor.getStringToCompare(),gets the string to compare with the observed attribute common to all observed mbeans.
javax.management.monitor.StringMonitor.setNotifyDiffer(boolean),sets the differing notification's on/off switch value common to all observed mbeans.
javax.management.monitor.StringMonitor.setNotifyMatch(boolean),sets the matching notification's on/off switch value common to all observed mbeans.
javax.management.monitor.StringMonitor.setStringToCompare(java.lang.String),sets the string to compare with the observed attribute common to all observed mbeans.
javax.management.monitor.StringMonitor.start(),starts the string monitor.
javax.management.monitor.StringMonitor.stop(),stops the string monitor.
javax.management.openmbean.CompositeData.containsKey(java.lang.String),returns true if and only if this compositedata instance contains an item whose name is key.
javax.management.openmbean.CompositeData.containsValue(java.lang.Object),returns true if and only if this compositedata instance contains an item whose value is value.
javax.management.openmbean.CompositeData.equals(java.lang.Object),compares the specified obj parameter with this compositedata instance for equality.
javax.management.openmbean.CompositeData.get(java.lang.String),returns the value of the item whose name is key.
javax.management.openmbean.CompositeData.getAll(java.lang.String[]),"returns an array of the values of the items whose names are specified by keys, in the same order as keys."
javax.management.openmbean.CompositeData.getCompositeType(),returns the composite type of this composite data instance.
javax.management.openmbean.CompositeData.hashCode(),returns the hash code value for this compositedata instance.
javax.management.openmbean.CompositeData.toString(),returns a string representation of this compositedata instance.
javax.management.openmbean.CompositeData.values(),returns an unmodifiable collection view of the item values contained in this compositedata instance.
javax.management.openmbean.CompositeDataView.toCompositeData(javax.management.openmbean.CompositeType),return a compositedata corresponding to the values in this object.
javax.management.openmbean.OpenMBeanAttributeInfo.equals(java.lang.Object),compares the specified obj parameter with this openmbeanattributeinfo instance for equality.
javax.management.openmbean.OpenMBeanAttributeInfo.hashCode(),returns the hash code value for this openmbeanattributeinfo instance.
javax.management.openmbean.OpenMBeanAttributeInfo.isIs(),"returns true if the attribute described by this openmbeanattributeinfo instance is accessed through a isxxx getter (applies only to boolean and boolean values), false otherwise."
javax.management.openmbean.OpenMBeanAttributeInfo.isReadable(),"returns true if the attribute described by this openmbeanattributeinfo instance is readable, false otherwise."
javax.management.openmbean.OpenMBeanAttributeInfo.isWritable(),"returns true if the attribute described by this openmbeanattributeinfo instance is writable, false otherwise."
javax.management.openmbean.OpenMBeanAttributeInfo.toString(),returns a string representation of this openmbeanattributeinfo instance.
javax.management.openmbean.OpenMBeanConstructorInfo.equals(java.lang.Object),compares the specified obj parameter with this openmbeanconstructorinfo instance for equality.
javax.management.openmbean.OpenMBeanConstructorInfo.getDescription(),returns a human readable description of the constructor described by this openmbeanconstructorinfo instance.
javax.management.openmbean.OpenMBeanConstructorInfo.getName(),returns the name of the constructor described by this openmbeanconstructorinfo instance.
javax.management.openmbean.OpenMBeanConstructorInfo.getSignature(),returns an array of openmbeanparameterinfo instances describing each parameter in the signature of the constructor described by this openmbeanconstructorinfo instance.
javax.management.openmbean.OpenMBeanConstructorInfo.hashCode(),returns the hash code value for this openmbeanconstructorinfo instance.
javax.management.openmbean.OpenMBeanConstructorInfo.toString(),returns a string representation of this openmbeanconstructorinfo instance.
javax.management.openmbean.OpenMBeanInfo.equals(java.lang.Object),compares the specified obj parameter with this openmbeaninfo instance for equality.
javax.management.openmbean.OpenMBeanInfo.getAttributes(),returns an array of openmbeanattributeinfo instances describing each attribute in the open mbean described by this openmbeaninfo instance.
javax.management.openmbean.OpenMBeanInfo.getClassName(),returns the fully qualified java class name of the open mbean instances this openmbeaninfo describes.
javax.management.openmbean.OpenMBeanInfo.getConstructors(),returns an array of openmbeanconstructorinfo instances describing each constructor in the open mbean described by this openmbeaninfo instance.
javax.management.openmbean.OpenMBeanInfo.getDescription(),returns a human readable description of the type of open mbean instances this openmbeaninfo describes.
javax.management.openmbean.OpenMBeanInfo.getNotifications(),returns an array of mbeannotificationinfo instances describing each notification emitted by the open mbean described by this openmbeaninfo instance.
javax.management.openmbean.OpenMBeanInfo.getOperations(),returns an array of openmbeanoperationinfo instances describing each operation in the open mbean described by this openmbeaninfo instance.
javax.management.openmbean.OpenMBeanInfo.hashCode(),returns the hash code value for this openmbeaninfo instance.
javax.management.openmbean.OpenMBeanInfo.toString(),returns a string representation of this openmbeaninfo instance.
javax.management.openmbean.OpenMBeanOperationInfo.equals(java.lang.Object),compares the specified obj parameter with this openmbeanoperationinfo instance for equality.
javax.management.openmbean.OpenMBeanOperationInfo.getDescription(),returns a human readable description of the operation described by this openmbeanoperationinfo instance.
javax.management.openmbean.OpenMBeanOperationInfo.getImpact(),returns an int constant qualifying the impact of the operation described by this openmbeanoperationinfo instance.
javax.management.openmbean.OpenMBeanOperationInfo.getName(),returns the name of the operation described by this openmbeanoperationinfo instance.
javax.management.openmbean.OpenMBeanOperationInfo.getReturnOpenType(),returns the open type of the values returned by the operation described by this openmbeanoperationinfo instance.
javax.management.openmbean.OpenMBeanOperationInfo.getReturnType(),returns the fully qualified java class name of the values returned by the operation described by this openmbeanoperationinfo instance.
javax.management.openmbean.OpenMBeanOperationInfo.getSignature(),returns an array of openmbeanparameterinfo instances describing each parameter in the signature of the operation described by this openmbeanoperationinfo instance.
javax.management.openmbean.OpenMBeanOperationInfo.hashCode(),returns the hash code value for this openmbeanoperationinfo instance.
javax.management.openmbean.OpenMBeanOperationInfo.toString(),returns a string representation of this openmbeanoperationinfo instance.
javax.management.openmbean.OpenMBeanParameterInfo.equals(java.lang.Object),compares the specified obj parameter with this openmbeanparameterinfo instance for equality.
javax.management.openmbean.OpenMBeanParameterInfo.getDefaultValue(),"returns the default value for this parameter, if it has one, or null otherwise."
javax.management.openmbean.OpenMBeanParameterInfo.getDescription(),returns a human readable description of the parameter described by this openmbeanparameterinfo instance.
javax.management.openmbean.OpenMBeanParameterInfo.getLegalValues(),"returns the set of legal values for this parameter, if it has one, or null otherwise."
javax.management.openmbean.OpenMBeanParameterInfo.getMaxValue(),"returns the maximal value for this parameter, if it has one, or null otherwise."
javax.management.openmbean.OpenMBeanParameterInfo.getMinValue(),"returns the minimal value for this parameter, if it has one, or null otherwise."
javax.management.openmbean.OpenMBeanParameterInfo.getName(),returns the name of the parameter described by this openmbeanparameterinfo instance.
javax.management.openmbean.OpenMBeanParameterInfo.getOpenType(),returns the open type of the values of the parameter described by this openmbeanparameterinfo instance.
javax.management.openmbean.OpenMBeanParameterInfo.hasDefaultValue(),"returns true if this parameter has a specified default value, or false otherwise."
javax.management.openmbean.OpenMBeanParameterInfo.hashCode(),returns the hash code value for this openmbeanparameterinfo instance.
javax.management.openmbean.OpenMBeanParameterInfo.hasLegalValues(),"returns true if this parameter has a specified set of legal values, or false otherwise."
javax.management.openmbean.OpenMBeanParameterInfo.hasMaxValue(),"returns true if this parameter has a specified maximal value, or false otherwise."
javax.management.openmbean.OpenMBeanParameterInfo.hasMinValue(),"returns true if this parameter has a specified minimal value, or false otherwise."
javax.management.openmbean.OpenMBeanParameterInfo.isValue(java.lang.Object),tests whether obj is a valid value for the parameter described by this openmbeanparameterinfo instance.
javax.management.openmbean.OpenMBeanParameterInfo.toString(),returns a string representation of this openmbeanparameterinfo instance.
javax.management.openmbean.TabularData.calculateIndex(javax.management.openmbean.CompositeData),calculates the index that would be used in this tabulardata instance to refer to the specified composite data value parameter if it were added to this instance.
javax.management.openmbean.TabularData.clear(),removes all compositedata values (ie rows) from this tabulardata instance.
javax.management.openmbean.TabularData.containsKey(java.lang.Object[]),returns true if and only if this tabulardata instance contains a compositedata value (ie a row) whose index is the specified key.
javax.management.openmbean.TabularData.containsValue(javax.management.openmbean.CompositeData),returns true if and only if this tabulardata instance contains the specified compositedata value.
javax.management.openmbean.TabularData.equals(java.lang.Object),compares the specified obj parameter with this tabulardata instance for equality.
javax.management.openmbean.TabularData.get(java.lang.Object[]),"returns the compositedata value whose index is key, or null if there is no value mapping to key, in this tabulardata instance."
javax.management.openmbean.TabularData.getTabularType(),returns the tabular type describing this tabulardata instance.
javax.management.openmbean.TabularData.hashCode(),returns the hash code value for this tabulardata instance.
javax.management.openmbean.TabularData.isEmpty(),returns true if the number of compositedata values (ie the number of rows) contained in this tabulardata instance is zero.
javax.management.openmbean.TabularData.keySet(),returns a set view of the keys (ie the index values) of the compositedata values (ie the rows) contained in this tabulardata instance.
javax.management.openmbean.TabularData.put(javax.management.openmbean.CompositeData),adds value to this tabulardata instance.
javax.management.openmbean.TabularData.putAll(javax.management.openmbean.CompositeData[]),add all the elements in values to this tabulardata instance.
javax.management.openmbean.TabularData.remove(java.lang.Object[]),"removes the compositedata value whose index is key from this tabulardata instance, and returns the removed value, or returns null if there is no value whose index is key."
javax.management.openmbean.TabularData.size(),returns the number of compositedata values (ie the number of rows) contained in this tabulardata instance.
javax.management.openmbean.TabularData.toString(),returns a string representation of this tabulardata instance.
javax.management.openmbean.TabularData.values(),returns a collection view of the compositedata values (ie the rows) contained in this tabulardata instance.
javax.management.openmbean.ArrayType.equals(java.lang.Object),compares the specified obj parameter with this arraytype instance for equality.
javax.management.openmbean.ArrayType.getArrayType(javax.management.openmbean.OpenType<E>),create an arraytype instance in a type-safe manner.
javax.management.openmbean.ArrayType.getDimension(),returns the dimension of arrays described by this arraytype instance.
javax.management.openmbean.ArrayType.getElementOpenType(),returns the open type of element values contained in the arrays described by this arraytype instance.
javax.management.openmbean.ArrayType.getPrimitiveArrayType(java.lang.Class<T>),create an arraytype instance in a type-safe manner.
javax.management.openmbean.ArrayType.hashCode(),returns the hash code value for this arraytype instance.
javax.management.openmbean.ArrayType.isPrimitiveArray(),"returns true if the open data values this open type describes are primitive arrays, false otherwise."
javax.management.openmbean.ArrayType.isValue(java.lang.Object),tests whether obj is a value for this arraytype instance.
javax.management.openmbean.ArrayType.toString(),returns a string representation of this arraytype instance.
javax.management.openmbean.CompositeDataInvocationHandler.getCompositeData(),return the compositedata that was supplied to the constructor.
javax.management.openmbean.CompositeDataSupport.containsKey(java.lang.String),returns true if and only if this compositedata instance contains an item whose name is key.
javax.management.openmbean.CompositeDataSupport.containsValue(java.lang.Object),returns true if and only if this compositedata instance contains an item whose value is value.
javax.management.openmbean.CompositeDataSupport.equals(java.lang.Object),compares the specified obj parameter with this compositedatasupport instance for equality.
javax.management.openmbean.CompositeDataSupport.get(java.lang.String),returns the value of the item whose name is key.
javax.management.openmbean.CompositeDataSupport.getAll(java.lang.String[]),"returns an array of the values of the items whose names are specified by keys, in the same order as keys."
javax.management.openmbean.CompositeDataSupport.getCompositeType(),returns the composite type of this composite data instance.
javax.management.openmbean.CompositeDataSupport.hashCode(),returns the hash code value for this compositedatasupport instance.
javax.management.openmbean.CompositeDataSupport.toString(),returns a string representation of this compositedatasupport instance.
javax.management.openmbean.CompositeDataSupport.values(),returns an unmodifiable collection view of the item values contained in this compositedata instance.
javax.management.openmbean.CompositeType.containsKey(java.lang.String),returns true if this compositetype instance defines an item whose name is itemname.
javax.management.openmbean.CompositeType.equals(java.lang.Object),compares the specified obj parameter with this compositetype instance for equality.
javax.management.openmbean.CompositeType.getDescription(java.lang.String),"returns the description of the item whose name is itemname, or null if this compositetype instance does not define any item whose name is itemname."
javax.management.openmbean.CompositeType.getType(java.lang.String),"returns the open type of the item whose name is itemname, or null if this compositetype instance does not define any item whose name is itemname."
javax.management.openmbean.CompositeType.hashCode(),returns the hash code value for this compositetype instance.
javax.management.openmbean.CompositeType.isValue(java.lang.Object),tests whether obj is a value which could be described by this compositetype instance.
javax.management.openmbean.CompositeType.keySet(),returns an unmodifiable set view of all the item names defined by this compositetype instance.
javax.management.openmbean.CompositeType.toString(),returns a string representation of this compositetype instance.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.equals(java.lang.Object),compares the specified obj parameter with this openmbeanattributeinfosupport instance for equality.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.getDefaultValue(),"returns the default value for the attribute described by this openmbeanattributeinfosupport instance, if specified, or null otherwise."
javax.management.openmbean.OpenMBeanAttributeInfoSupport.getLegalValues(),"returns an unmodifiable set of legal values for the attribute described by this openmbeanattributeinfosupport instance, if specified, or null otherwise."
javax.management.openmbean.OpenMBeanAttributeInfoSupport.getMaxValue(),"returns the maximal value for the attribute described by this openmbeanattributeinfosupport instance, if specified, or null otherwise."
javax.management.openmbean.OpenMBeanAttributeInfoSupport.getMinValue(),"returns the minimal value for the attribute described by this openmbeanattributeinfosupport instance, if specified, or null otherwise."
javax.management.openmbean.OpenMBeanAttributeInfoSupport.getOpenType(),returns the open type for the values of the attribute described by this openmbeanattributeinfosupport instance.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.hasDefaultValue(),"returns true if this openmbeanattributeinfosupport instance specifies a non-null default value for the described attribute, false otherwise."
javax.management.openmbean.OpenMBeanAttributeInfoSupport.hashCode(),returns the hash code value for this openmbeanattributeinfosupport instance.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.hasLegalValues(),"returns true if this openmbeanattributeinfosupport instance specifies a non-null set of legal values for the described attribute, false otherwise."
javax.management.openmbean.OpenMBeanAttributeInfoSupport.hasMaxValue(),"returns true if this openmbeanattributeinfosupport instance specifies a non-null maximal value for the described attribute, false otherwise."
javax.management.openmbean.OpenMBeanAttributeInfoSupport.hasMinValue(),"returns true if this openmbeanattributeinfosupport instance specifies a non-null minimal value for the described attribute, false otherwise."
javax.management.openmbean.OpenMBeanAttributeInfoSupport.isValue(java.lang.Object),tests whether obj is a valid value for the attribute described by this openmbeanattributeinfosupport instance.
javax.management.openmbean.OpenMBeanAttributeInfoSupport.toString(),returns a string representation of this openmbeanattributeinfosupport instance.
javax.management.openmbean.OpenMBeanConstructorInfoSupport.equals(java.lang.Object),compares the specified obj parameter with this openmbeanconstructorinfosupport instance for equality.
javax.management.openmbean.OpenMBeanConstructorInfoSupport.hashCode(),returns the hash code value for this openmbeanconstructorinfosupport instance.
javax.management.openmbean.OpenMBeanConstructorInfoSupport.toString(),returns a string representation of this openmbeanconstructorinfosupport instance.
javax.management.openmbean.OpenMBeanInfoSupport.equals(java.lang.Object),compares the specified obj parameter with this openmbeaninfosupport instance for equality.
javax.management.openmbean.OpenMBeanInfoSupport.hashCode(),returns the hash code value for this openmbeaninfosupport instance.
javax.management.openmbean.OpenMBeanInfoSupport.toString(),returns a string representation of this openmbeaninfosupport instance.
javax.management.openmbean.OpenMBeanOperationInfoSupport.equals(java.lang.Object),compares the specified obj parameter with this openmbeanoperationinfosupport instance for equality.
javax.management.openmbean.OpenMBeanOperationInfoSupport.getReturnOpenType(),returns the open type of the values returned by the operation described by this openmbeanoperationinfo instance.
javax.management.openmbean.OpenMBeanOperationInfoSupport.hashCode(),returns the hash code value for this openmbeanoperationinfosupport instance.
javax.management.openmbean.OpenMBeanOperationInfoSupport.toString(),returns a string representation of this openmbeanoperationinfosupport instance.
javax.management.openmbean.OpenMBeanParameterInfoSupport.equals(java.lang.Object),compares the specified obj parameter with this openmbeanparameterinfosupport instance for equality.
javax.management.openmbean.OpenMBeanParameterInfoSupport.getDefaultValue(),"returns the default value for the parameter described by this openmbeanparameterinfosupport instance, if specified, or null otherwise."
javax.management.openmbean.OpenMBeanParameterInfoSupport.getLegalValues(),"returns an unmodifiable set of legal values for the parameter described by this openmbeanparameterinfosupport instance, if specified, or null otherwise."
javax.management.openmbean.OpenMBeanParameterInfoSupport.getMaxValue(),"returns the maximal value for the parameter described by this openmbeanparameterinfosupport instance, if specified, or null otherwise."
javax.management.openmbean.OpenMBeanParameterInfoSupport.getMinValue(),"returns the minimal value for the parameter described by this openmbeanparameterinfosupport instance, if specified, or null otherwise."
javax.management.openmbean.OpenMBeanParameterInfoSupport.getOpenType(),returns the open type for the values of the parameter described by this openmbeanparameterinfosupport instance.
javax.management.openmbean.OpenMBeanParameterInfoSupport.hasDefaultValue(),"returns true if this openmbeanparameterinfosupport instance specifies a non-null default value for the described parameter, false otherwise."
javax.management.openmbean.OpenMBeanParameterInfoSupport.hashCode(),returns the hash code value for this openmbeanparameterinfosupport instance.
javax.management.openmbean.OpenMBeanParameterInfoSupport.hasLegalValues(),"returns true if this openmbeanparameterinfosupport instance specifies a non-null set of legal values for the described parameter, false otherwise."
javax.management.openmbean.OpenMBeanParameterInfoSupport.hasMaxValue(),"returns true if this openmbeanparameterinfosupport instance specifies a non-null maximal value for the described parameter, false otherwise."
javax.management.openmbean.OpenMBeanParameterInfoSupport.hasMinValue(),"returns true if this openmbeanparameterinfosupport instance specifies a non-null minimal value for the described parameter, false otherwise."
javax.management.openmbean.OpenMBeanParameterInfoSupport.isValue(java.lang.Object),tests whether obj is a valid value for the parameter described by this openmbeanparameterinfo instance.
javax.management.openmbean.OpenMBeanParameterInfoSupport.toString(),returns a string representation of this openmbeanparameterinfosupport instance.
javax.management.openmbean.OpenType.equals(java.lang.Object),compares the specified obj parameter with this open type instance for equality.
javax.management.openmbean.OpenType.getClassName(),returns the fully qualified java class name of the open data values this open type describes.
javax.management.openmbean.OpenType.getDescription(),returns the text description of this opentype instance.
javax.management.openmbean.OpenType.getTypeName(),returns the name of this opentype instance.
javax.management.openmbean.OpenType.isArray(),"returns true if the open data values this open type describes are arrays, false otherwise."
javax.management.openmbean.OpenType.isValue(java.lang.Object),tests whether obj is a value for this open type.
javax.management.openmbean.OpenType.toString(),returns a string representation of this open type instance.
javax.management.openmbean.SimpleType.equals(java.lang.Object),compares the specified obj parameter with this simpletype instance for equality.
javax.management.openmbean.SimpleType.hashCode(),returns the hash code value for this simpletype instance.
javax.management.openmbean.SimpleType.isValue(java.lang.Object),tests whether obj is a value for this simpletype instance.
javax.management.openmbean.SimpleType.readResolve(),replace an object read from an objectinputstream with the unique instance for that value.
javax.management.openmbean.SimpleType.toString(),returns a string representation of this simpletype instance.
javax.management.openmbean.TabularDataSupport.calculateIndex(javax.management.openmbean.CompositeData),calculates the index that would be used in this tabulardata instance to refer to the specified composite data value parameter if it were added to this instance.
javax.management.openmbean.TabularDataSupport.clear(),removes all rows from this tabulardatasupport instance.
javax.management.openmbean.TabularDataSupport.clone(),returns a clone of this tabulardatasupport instance: the clone is obtained by calling super.
javax.management.openmbean.TabularDataSupport.containsKey(java.lang.Object),returns true if and only if this tabulardata instance contains a compositedata value (ie a row) whose index is the specified key.
javax.management.openmbean.TabularDataSupport.containsKey(java.lang.Object[]),returns true if and only if this tabulardata instance contains a compositedata value (ie a row) whose index is the specified key.
javax.management.openmbean.TabularDataSupport.containsValue(javax.management.openmbean.CompositeData),returns true if and only if this tabulardata instance contains the specified compositedata value.
javax.management.openmbean.TabularDataSupport.containsValue(java.lang.Object),returns true if and only if this tabulardata instance contains the specified value.
javax.management.openmbean.TabularDataSupport.entrySet(),returns a collection view of the index to row mappings contained in this tabulardatasupport instance.
javax.management.openmbean.TabularDataSupport.equals(java.lang.Object),compares the specified obj parameter with this tabulardatasupport instance for equality.
javax.management.openmbean.TabularDataSupport.get(java.lang.Object),this method simply calls get((object[]) key).
javax.management.openmbean.TabularDataSupport.get(java.lang.Object[]),"returns the compositedata value whose index is key, or null if there is no value mapping to key, in this tabulardata instance."
javax.management.openmbean.TabularDataSupport.getTabularType(),returns the tabular type describing this tabulardata instance.
javax.management.openmbean.TabularDataSupport.hashCode(),returns the hash code value for this tabulardatasupport instance.
javax.management.openmbean.TabularDataSupport.isEmpty(),returns true if this tabulardatasupport instance contains no rows.
javax.management.openmbean.TabularDataSupport.keySet(),returns a set view of the keys contained in the underlying map of this tabulardatasupport instance used to index the rows.
"javax.management.openmbean.TabularDataSupport.put(java.lang.Object,java.lang.Object)",this method simply calls put((compositedata) value) and therefore ignores its key parameter which can be null.
"javax.management.openmbean.TabularDataSupport.putAll(,?>)",add all the values contained in the specified map t to this tabulardata instance.
javax.management.openmbean.TabularDataSupport.putAll(javax.management.openmbean.CompositeData[]),add all the elements in values to this tabulardata instance.
javax.management.openmbean.TabularDataSupport.remove(java.lang.Object),this method simply calls remove((object[]) key).
javax.management.openmbean.TabularDataSupport.remove(java.lang.Object[]),"removes the compositedata value whose index is key from this tabulardata instance, and returns the removed value, or returns null if there is no value whose index is key."
javax.management.openmbean.TabularDataSupport.size(),returns the number of rows in this tabulardatasupport instance.
javax.management.openmbean.TabularDataSupport.toString(),returns a string representation of this tabulardatasupport instance.
javax.management.openmbean.TabularDataSupport.values(),returns a collection view of the rows contained in this tabulardatasupport instance.
javax.management.openmbean.TabularType.equals(java.lang.Object),compares the specified obj parameter with this tabulartype instance for equality.
javax.management.openmbean.TabularType.getIndexNames(),"returns, in the same order as was given to this instance's constructor, an unmodifiable list of the names of the items the values of which are used to uniquely index each row element of tabular data values described by this tabulartype instance."
javax.management.openmbean.TabularType.getRowType(),returns the type of the row elements of tabular data values described by this tabulartype instance.
javax.management.openmbean.TabularType.hashCode(),returns the hash code value for this tabulartype instance.
javax.management.openmbean.TabularType.isValue(java.lang.Object),tests whether obj is a value which could be described by this tabulartype instance.
javax.management.openmbean.TabularType.toString(),returns a string representation of this tabulartype instance.
javax.management.relation.Relation.getAllRoles(),returns all roles present in the relation.
javax.management.relation.Relation.getReferencedMBeans(),retrieves mbeans referenced in the various roles of the relation.
javax.management.relation.Relation.getRelationId(),returns relation identifier (used to uniquely identify the relation inside the relation service).
javax.management.relation.Relation.getRelationServiceName(),returns objectname of the relation service handling the relation.
javax.management.relation.Relation.getRelationTypeName(),returns name of associated relation type.
javax.management.relation.Relation.getRole(java.lang.String),retrieves role value for given role name.
javax.management.relation.Relation.getRoleCardinality(java.lang.String),returns the number of mbeans currently referenced in the given role.
javax.management.relation.Relation.getRoles(java.lang.String[]),retrieves values of roles with given names.
"javax.management.relation.Relation.handleMBeanUnregistration(javax.management.ObjectName,java.lang.String)",callback used by the relation service when a mbean referenced in a role is unregistered.
javax.management.relation.Relation.retrieveAllRoles(),returns all roles in the relation without checking read mode.
javax.management.relation.Relation.setRole(javax.management.relation.Role),sets the given role.
javax.management.relation.Relation.setRoles(javax.management.relation.RoleList),sets the given roles.
javax.management.relation.RelationServiceMBean.addRelation(javax.management.ObjectName),adds an mbean created by the user (and registered by him in the mbean server) as a relation in the relation service.
javax.management.relation.RelationServiceMBean.addRelationType(javax.management.relation.RelationType),adds given object as a relation type.
"javax.management.relation.RelationServiceMBean.checkRoleReading(java.lang.String,java.lang.String)",checks if given role can be read in a relation of the given type.
"javax.management.relation.RelationServiceMBean.checkRoleWriting(javax.management.relation.Role,java.lang.String,java.lang.Boolean)",checks if given role can be set in a relation of given type.
"javax.management.relation.RelationServiceMBean.createRelation(java.lang.String,java.lang.String,javax.management.relation.RoleList)","creates a simple relation (represented by a relationsupport object) of given relation type, and adds it in the relation service."
"javax.management.relation.RelationServiceMBean.createRelationType(java.lang.String,javax.management.relation.RoleInfo[])","creates a relation type (relationtypesupport object) with given role infos (provided by the roleinfo objects), and adds it in the relation service."
"javax.management.relation.RelationServiceMBean.findAssociatedMBeans(javax.management.ObjectName,java.lang.String,java.lang.String)",retrieves the mbeans associated to given one in a relation.
"javax.management.relation.RelationServiceMBean.findReferencingRelations(javax.management.ObjectName,java.lang.String,java.lang.String)",retrieves the relations where a given mbean is referenced.
javax.management.relation.RelationServiceMBean.findRelationsOfType(java.lang.String),returns the relation ids for relations of the given type.
javax.management.relation.RelationServiceMBean.getAllRelationIds(),returns all the relation ids for all the relations handled by the relation service.
javax.management.relation.RelationServiceMBean.getAllRelationTypeNames(),retrieves names of all known relation types.
javax.management.relation.RelationServiceMBean.getAllRoles(java.lang.String),returns all roles present in the relation.
javax.management.relation.RelationServiceMBean.getPurgeFlag(),"returns the flag to indicate if when a notification is received for the unregistration of an mbean referenced in a relation, if an immediate ""purge"" of the relations (look for the relations no longer valid) has to be performed, or if that will be performed only when the purgerelations method is explicitly called."
javax.management.relation.RelationServiceMBean.getReferencedMBeans(java.lang.String),retrieves mbeans referenced in the various roles of the relation.
javax.management.relation.RelationServiceMBean.getRelationTypeName(java.lang.String),returns name of associated relation type for given relation.
"javax.management.relation.RelationServiceMBean.getRole(java.lang.String,java.lang.String)",retrieves role value for given role name in given relation.
"javax.management.relation.RelationServiceMBean.getRoleCardinality(java.lang.String,java.lang.String)",retrieves the number of mbeans currently referenced in the given role.
"javax.management.relation.RelationServiceMBean.getRoleInfo(java.lang.String,java.lang.String)",retrieves role info for given role of a given relation type.
javax.management.relation.RelationServiceMBean.getRoleInfos(java.lang.String),retrieves list of role infos (roleinfo objects) of a given relation type.
"javax.management.relation.RelationServiceMBean.getRoles(java.lang.String,java.lang.String[])",retrieves values of roles with given names in given relation.
javax.management.relation.RelationServiceMBean.hasRelation(java.lang.String),checks if there is a relation identified in relation service with given relation id.
javax.management.relation.RelationServiceMBean.isActive(),checks if the relation service is active.
javax.management.relation.RelationServiceMBean.isRelation(javax.management.ObjectName),returns the relation id associated to the given objectname if the mbean has been added as a relation in the relation service.
javax.management.relation.RelationServiceMBean.isRelationMBean(java.lang.String),"if the relation is represented by an mbean (created by the user and added as a relation in the relation service), returns the objectname of the mbean."
javax.management.relation.RelationServiceMBean.purgeRelations(),purges the relations.
javax.management.relation.RelationServiceMBean.removeRelation(java.lang.String),removes given relation from the relation service.
javax.management.relation.RelationServiceMBean.removeRelationType(java.lang.String),removes given relation type from relation service.
javax.management.relation.RelationServiceMBean.sendRelationCreationNotification(java.lang.String),sends a notification (relationnotification) for a relation creation.
"javax.management.relation.RelationServiceMBean.sendRelationRemovalNotification(java.lang.String,java.util.List<javax.management.ObjectName>)",sends a notification (relationnotification) for a relation removal.
"javax.management.relation.RelationServiceMBean.sendRoleUpdateNotification(java.lang.String,javax.management.relation.Role,java.util.List<javax.management.ObjectName>)",sends a notification (relationnotification) for a role update in the given relation.
javax.management.relation.RelationServiceMBean.setPurgeFlag(boolean),"sets the flag to indicate if when a notification is received for the unregistration of an mbean referenced in a relation, if an immediate ""purge"" of the relations (look for the relations no longer valid) has to be performed, or if that will be performed only when the purgerelations method is explicitly called."
"javax.management.relation.RelationServiceMBean.setRole(java.lang.String,javax.management.relation.Role)",sets the given role in given relation.
"javax.management.relation.RelationServiceMBean.setRoles(java.lang.String,javax.management.relation.RoleList)",sets the given roles in given relation.
"javax.management.relation.RelationServiceMBean.updateRoleMap(java.lang.String,javax.management.relation.Role,java.util.List<javax.management.ObjectName>)",handles update of the relation service role map for the update of given role in given relation.
javax.management.relation.RelationSupportMBean.isInRelationService(),returns an internal flag specifying if the object is still handled by the relation service.
javax.management.relation.RelationSupportMBean.setRelationServiceManagementFlag(java.lang.Boolean),specifies whether this relation is handled by the relation service.
javax.management.relation.RelationType.getRelationTypeName(),returns the relation type name.
javax.management.relation.RelationType.getRoleInfo(java.lang.String),returns the role info (roleinfo object) for the given role info name (null if not found).
javax.management.relation.RelationType.getRoleInfos(),returns the list of role definitions (arraylist of roleinfo objects).
javax.management.relation.MBeanServerNotificationFilter.disableAllObjectNames(),disables any mbeanservernotification (all objectnames are deselected).
javax.management.relation.MBeanServerNotificationFilter.disableObjectName(javax.management.ObjectName),disables mbeanservernotifications concerning given objectname.
javax.management.relation.MBeanServerNotificationFilter.enableAllObjectNames(),enables all mbeanservernotifications (all objectnames are selected).
javax.management.relation.MBeanServerNotificationFilter.enableObjectName(javax.management.ObjectName),enables mbeanservernotifications concerning given objectname.
javax.management.relation.MBeanServerNotificationFilter.getDisabledObjectNames(),gets all the objectnames disabled.
javax.management.relation.MBeanServerNotificationFilter.getEnabledObjectNames(),gets all the objectnames enabled.
javax.management.relation.MBeanServerNotificationFilter.isNotificationEnabled(javax.management.Notification),invoked before sending the specified notification to the listener.
javax.management.relation.RelationNotification.getMBeansToUnregister(),returns the list of objectnames of mbeans expected to be unregistered due to a relation removal (only for relation removal).
javax.management.relation.RelationNotification.getNewRoleValue(),returns new value of updated role (only for role update).
javax.management.relation.RelationNotification.getObjectName(),returns the objectname of the created/removed/updated relation.
javax.management.relation.RelationNotification.getOldRoleValue(),returns old value of updated role (only for role update).
javax.management.relation.RelationNotification.getRelationId(),returns the relation identifier of created/removed/updated relation.
javax.management.relation.RelationNotification.getRelationTypeName(),returns the relation type name of created/removed/updated relation.
javax.management.relation.RelationNotification.getRoleName(),returns name of updated role of updated relation (only for role update).
javax.management.relation.RelationService.addRelation(javax.management.ObjectName),adds an mbean created by the user (and registered by him in the mbean server) as a relation in the relation service.
javax.management.relation.RelationService.addRelationType(javax.management.relation.RelationType),adds given object as a relation type.
"javax.management.relation.RelationService.checkRoleReading(java.lang.String,java.lang.String)",checks if given role can be read in a relation of the given type.
"javax.management.relation.RelationService.checkRoleWriting(javax.management.relation.Role,java.lang.String,java.lang.Boolean)",checks if given role can be set in a relation of given type.
"javax.management.relation.RelationService.createRelation(java.lang.String,java.lang.String,javax.management.relation.RoleList)","creates a simple relation (represented by a relationsupport object) of given relation type, and adds it in the relation service."
"javax.management.relation.RelationService.createRelationType(java.lang.String,javax.management.relation.RoleInfo[])","creates a relation type (a relationtypesupport object) with given role infos (provided by the roleinfo objects), and adds it in the relation service."
"javax.management.relation.RelationService.findAssociatedMBeans(javax.management.ObjectName,java.lang.String,java.lang.String)",retrieves the mbeans associated to given one in a relation.
"javax.management.relation.RelationService.findReferencingRelations(javax.management.ObjectName,java.lang.String,java.lang.String)",retrieves the relations where a given mbean is referenced.
javax.management.relation.RelationService.findRelationsOfType(java.lang.String),returns the relation ids for relations of the given type.
javax.management.relation.RelationService.getAllRelationIds(),returns all the relation ids for all the relations handled by the relation service.
javax.management.relation.RelationService.getAllRelationTypeNames(),retrieves names of all known relation types.
javax.management.relation.RelationService.getAllRoles(java.lang.String),returns all roles present in the relation.
javax.management.relation.RelationService.getNotificationInfo(),returns a notificationinfo object containing the name of the java class of the notification and the notification types sent.
javax.management.relation.RelationService.getPurgeFlag(),"returns the flag to indicate if when a notification is received for the unregistration of an mbean referenced in a relation, if an immediate ""purge"" of the relations (look for the relations no longer valid) has to be performed , or if that will be performed only when the purgerelations method will be explicitly called."
javax.management.relation.RelationService.getReferencedMBeans(java.lang.String),retrieves mbeans referenced in the various roles of the relation.
javax.management.relation.RelationService.getRelationTypeName(java.lang.String),returns name of associated relation type for given relation.
"javax.management.relation.RelationService.getRole(java.lang.String,java.lang.String)",retrieves role value for given role name in given relation.
"javax.management.relation.RelationService.getRoleCardinality(java.lang.String,java.lang.String)",retrieves the number of mbeans currently referenced in the given role.
"javax.management.relation.RelationService.getRoleInfo(java.lang.String,java.lang.String)",retrieves role info for given role name of a given relation type.
javax.management.relation.RelationService.getRoleInfos(java.lang.String),retrieves list of role infos (roleinfo objects) of a given relation type.
"javax.management.relation.RelationService.getRoles(java.lang.String,java.lang.String[])",retrieves values of roles with given names in given relation.
"javax.management.relation.RelationService.handleNotification(javax.management.Notification,java.lang.Object)",invoked when a jmx notification occurs.
javax.management.relation.RelationService.hasRelation(java.lang.String),checks if there is a relation identified in relation service with given relation id.
javax.management.relation.RelationService.isActive(),checks if the relation service is active.
javax.management.relation.RelationService.isRelation(javax.management.ObjectName),returns the relation id associated to the given objectname if the mbean has been added as a relation in the relation service.
javax.management.relation.RelationService.isRelationMBean(java.lang.String),"if the relation is represented by an mbean (created by the user and added as a relation in the relation service), returns the objectname of the mbean."
javax.management.relation.RelationService.purgeRelations(),purges the relations.
javax.management.relation.RelationService.removeRelation(java.lang.String),removes given relation from the relation service.
javax.management.relation.RelationService.removeRelationType(java.lang.String),removes given relation type from relation service.
javax.management.relation.RelationService.sendRelationCreationNotification(java.lang.String),sends a notification (relationnotification) for a relation creation.
"javax.management.relation.RelationService.sendRelationRemovalNotification(java.lang.String,java.util.List<javax.management.ObjectName>)",sends a notification (relationnotification) for a relation removal.
"javax.management.relation.RelationService.sendRoleUpdateNotification(java.lang.String,javax.management.relation.Role,java.util.List<javax.management.ObjectName>)",sends a notification (relationnotification) for a role update in the given relation.
javax.management.relation.RelationService.setPurgeFlag(boolean),"sets the flag to indicate if when a notification is received for the unregistration of an mbean referenced in a relation, if an immediate ""purge"" of the relations (look for the relations no longer valid) has to be performed , or if that will be performed only when the purgerelations method will be explicitly called."
"javax.management.relation.RelationService.setRole(java.lang.String,javax.management.relation.Role)",sets the given role in given relation.
"javax.management.relation.RelationService.setRoles(java.lang.String,javax.management.relation.RoleList)",sets the given roles in given relation.
"javax.management.relation.RelationService.updateRoleMap(java.lang.String,javax.management.relation.Role,java.util.List<javax.management.ObjectName>)",handles update of the relation service role map for the update of given role in given relation.
javax.management.relation.RelationSupport.getAllRoles(),returns all roles present in the relation.
javax.management.relation.RelationSupport.getReferencedMBeans(),retrieves mbeans referenced in the various roles of the relation.
javax.management.relation.RelationSupport.getRelationId(),returns relation identifier (used to uniquely identify the relation inside the relation service).
javax.management.relation.RelationSupport.getRelationServiceName(),returns objectname of the relation service handling the relation.
javax.management.relation.RelationSupport.getRelationTypeName(),returns name of associated relation type.
javax.management.relation.RelationSupport.getRole(java.lang.String),retrieves role value for given role name.
javax.management.relation.RelationSupport.getRoleCardinality(java.lang.String),returns the number of mbeans currently referenced in the given role.
javax.management.relation.RelationSupport.getRoles(java.lang.String[]),retrieves values of roles with given names.
"javax.management.relation.RelationSupport.handleMBeanUnregistration(javax.management.ObjectName,java.lang.String)",callback used by the relation service when a mbean referenced in a role is unregistered.
javax.management.relation.RelationSupport.isInRelationService(),returns an internal flag specifying if the object is still handled by the relation service.
javax.management.relation.RelationSupport.retrieveAllRoles(),returns all roles in the relation without checking read mode.
javax.management.relation.RelationSupport.setRole(javax.management.relation.Role),sets the given role.
javax.management.relation.RelationSupport.setRoles(javax.management.relation.RoleList),sets the given roles.
javax.management.relation.RelationTypeSupport.addRoleInfo(javax.management.relation.RoleInfo),add a role info.
javax.management.relation.RelationTypeSupport.getRelationTypeName(),returns the relation type name.
javax.management.relation.RelationTypeSupport.getRoleInfo(java.lang.String),returns the role info (roleinfo object) for the given role info name (null if not found).
javax.management.relation.RelationTypeSupport.getRoleInfos(),returns the list of role definitions (arraylist of roleinfo objects).
javax.management.relation.Role.clone(),clone the role object.
javax.management.relation.Role.getRoleName(),retrieves role name.
javax.management.relation.Role.getRoleValue(),retrieves role value.
javax.management.relation.Role.roleValueToString(java.util.List<javax.management.ObjectName>),returns a string for the given role value.
javax.management.relation.Role.setRoleName(java.lang.String),sets role name.
javax.management.relation.Role.setRoleValue(java.util.List<javax.management.ObjectName>),sets role value.
javax.management.relation.Role.toString(),returns a string describing the role.
javax.management.relation.RoleInfo.checkMaxDegree(int),"returns true if the value parameter is lower than or equal to the expected maximum degree, false otherwise."
javax.management.relation.RoleInfo.checkMinDegree(int),"returns true if the value parameter is greater than or equal to the expected minimum degree, false otherwise."
javax.management.relation.RoleInfo.getDescription(),returns description text for the role.
javax.management.relation.RoleInfo.getMaxDegree(),returns maximum degree for corresponding role reference.
javax.management.relation.RoleInfo.getMinDegree(),returns minimum degree for corresponding role reference.
javax.management.relation.RoleInfo.getName(),returns the name of the role.
javax.management.relation.RoleInfo.getRefMBeanClassName(),returns name of type of mbean expected to be referenced in corresponding role.
javax.management.relation.RoleInfo.isReadable(),returns read access mode for the role (true if it is readable).
javax.management.relation.RoleInfo.isWritable(),returns write access mode for the role (true if it is writable).
javax.management.relation.RoleInfo.toString(),returns a string describing the role info.
javax.management.relation.RoleList.add(javax.management.relation.Role),adds the role specified as the last element of the list.
"javax.management.relation.RoleList.add(int,javax.management.relation.Role)",inserts the role specified as an element at the position specified.
javax.management.relation.RoleList.addAll(javax.management.relation.RoleList),"appends all the elements in the rolelist specified to the end of the list, in the order in which they are returned by the iterator of the rolelist specified."
"javax.management.relation.RoleList.addAll(int,javax.management.relation.RoleList)","inserts all of the elements in the rolelist specified into this list, starting at the specified position, in the order in which they are returned by the iterator of the rolelist specified."
javax.management.relation.RoleList.asList(),return a view of this list as a list<role>.
"javax.management.relation.RoleList.set(int,javax.management.relation.Role)",sets the element at the position specified to be the role specified.
javax.management.relation.RoleResult.getRoles(),retrieves list of roles successfully accessed.
javax.management.relation.RoleResult.getRolesUnresolved(),retrieves list of roles unsuccessfully accessed.
javax.management.relation.RoleResult.setRoles(javax.management.relation.RoleList),sets list of roles successfully accessed.
javax.management.relation.RoleResult.setRolesUnresolved(javax.management.relation.RoleUnresolvedList),sets list of roles unsuccessfully accessed.
javax.management.relation.RoleStatus.isRoleStatus(int),"returns true if given value corresponds to a known role status, false otherwise."
javax.management.relation.RoleUnresolved.clone(),clone this object.
javax.management.relation.RoleUnresolved.getProblemType(),retrieves problem type.
javax.management.relation.RoleUnresolved.getRoleName(),retrieves role name.
javax.management.relation.RoleUnresolved.getRoleValue(),retrieves role value.
javax.management.relation.RoleUnresolved.setProblemType(int),sets problem type.
javax.management.relation.RoleUnresolved.setRoleName(java.lang.String),sets role name.
javax.management.relation.RoleUnresolved.setRoleValue(java.util.List<javax.management.ObjectName>),sets role value.
javax.management.relation.RoleUnresolved.toString(),return a string describing this object.
javax.management.relation.RoleUnresolvedList.add(javax.management.relation.RoleUnresolved),adds the roleunresolved specified as the last element of the list.
"javax.management.relation.RoleUnresolvedList.add(int,javax.management.relation.RoleUnresolved)",inserts the unresolved role specified as an element at the position specified.
javax.management.relation.RoleUnresolvedList.addAll(javax.management.relation.RoleUnresolvedList),"appends all the elements in the roleunresolvedlist specified to the end of the list, in the order in which they are returned by the iterator of the roleunresolvedlist specified."
"javax.management.relation.RoleUnresolvedList.addAll(int,javax.management.relation.RoleUnresolvedList)","inserts all of the elements in the roleunresolvedlist specified into this list, starting at the specified position, in the order in which they are returned by the iterator of the roleunresolvedlist specified."
javax.management.relation.RoleUnresolvedList.asList(),return a view of this list as a list<roleunresolved>.
"javax.management.relation.RoleUnresolvedList.set(int,javax.management.relation.RoleUnresolved)",sets the element at the position specified to be the unresolved role specified.
javax.management.remote.JMXAddressable.getAddress(),the address of this object.
javax.management.remote.JMXAuthenticator.authenticate(java.lang.Object),authenticates the mbeanserverconnection client with the given client credentials.
"javax.management.remote.JMXConnector.addConnectionNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)",adds a listener to be informed of changes in connection status.
javax.management.remote.JMXConnector.close(),closes the client connection to its server.
javax.management.remote.JMXConnector.connect(),establishes the connection to the connector server.
"javax.management.remote.JMXConnector.connect(,?>)",establishes the connection to the connector server.
javax.management.remote.JMXConnector.getConnectionId(),gets this connection's id from the connector server.
javax.management.remote.JMXConnector.getMBeanServerConnection(),returns an mbeanserverconnection object representing a remote mbean server.
javax.management.remote.JMXConnector.getMBeanServerConnection(javax.security.auth.Subject),returns an mbeanserverconnection object representing a remote mbean server on which operations are performed on behalf of the supplied delegation subject.
javax.management.remote.JMXConnector.removeConnectionNotificationListener(javax.management.NotificationListener),removes a listener from the list to be informed of changes in status.
"javax.management.remote.JMXConnector.removeConnectionNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)",removes a listener from the list to be informed of changes in status.
"javax.management.remote.JMXConnectorProvider.newJMXConnector(javax.management.remote.JMXServiceURL,,?>)",creates a new connector client that is ready to connect to the connector server at the given address.
javax.management.remote.JMXConnectorServerMBean.getAddress(),the address of this connector server.
javax.management.remote.JMXConnectorServerMBean.getAttributes(),the attributes for this connector server.
javax.management.remote.JMXConnectorServerMBean.getConnectionIds(),the list of ids for currently-open connections to this connector server.
javax.management.remote.JMXConnectorServerMBean.isActive(),determines whether the connector server is active.
javax.management.remote.JMXConnectorServerMBean.setMBeanServerForwarder(javax.management.remote.MBeanServerForwarder),inserts an object that intercepts requests for the mbean server that arrive through this connector server.
javax.management.remote.JMXConnectorServerMBean.start(),"activates the connector server, that is, starts listening for client connections."
javax.management.remote.JMXConnectorServerMBean.stop(),"deactivates the connector server, that is, stops listening for client connections."
"javax.management.remote.JMXConnectorServerMBean.toJMXConnector(,?>)",returns a client stub for this connector server.
"javax.management.remote.JMXConnectorServerProvider.newJMXConnectorServer(javax.management.remote.JMXServiceURL,,?>,javax.management.MBeanServer)",creates a new connector server at the given address.
javax.management.remote.MBeanServerForwarder.getMBeanServer(),returns the mbeanserver object to which requests will be forwarded.
javax.management.remote.MBeanServerForwarder.setMBeanServer(javax.management.MBeanServer),sets the mbeanserver object to which requests will be forwarded after treatment by this object.
javax.management.remote.JMXConnectionNotification.getConnectionId(),the connection id to which this notification pertains.
javax.management.remote.JMXConnectorFactory.connect(javax.management.remote.JMXServiceURL),creates a connection to the connector server at the given address.
"javax.management.remote.JMXConnectorFactory.connect(javax.management.remote.JMXServiceURL,,?>)",creates a connection to the connector server at the given address.
"javax.management.remote.JMXConnectorFactory.newJMXConnector(javax.management.remote.JMXServiceURL,,?>)",creates a connector client for the connector server at the given address.
"javax.management.remote.JMXConnectorServer.connectionClosed(java.lang.String,java.lang.String,java.lang.Object)",called by a subclass when a client connection is closed normally.
"javax.management.remote.JMXConnectorServer.connectionFailed(java.lang.String,java.lang.String,java.lang.Object)",called by a subclass when a client connection fails.
"javax.management.remote.JMXConnectorServer.connectionOpened(java.lang.String,java.lang.String,java.lang.Object)",called by a subclass when a new client connection is opened.
javax.management.remote.JMXConnectorServer.getMBeanServer(),returns the mbean server that this connector server is attached to.
javax.management.remote.JMXConnectorServer.getNotificationInfo(),returns an array indicating the notifications that this mbean sends.
javax.management.remote.JMXConnectorServer.preDeregister(),called by an mbean server when this connector server is unregistered from that mbean server.
"javax.management.remote.JMXConnectorServer.preRegister(javax.management.MBeanServer,javax.management.ObjectName)",called by an mbean server when this connector server is registered in that mbean server.
"javax.management.remote.JMXConnectorServer.toJMXConnector(,?>)",returns a client stub for this connector server.
"javax.management.remote.JMXConnectorServerFactory.newJMXConnectorServer(javax.management.remote.JMXServiceURL,,?>,javax.management.MBeanServer)",creates a connector server at the given address.
javax.management.remote.JMXPrincipal.equals(java.lang.Object),compares the specified object with this jmxprincipal for equality.
javax.management.remote.JMXPrincipal.getName(),returns the name of this principal.
javax.management.remote.JMXPrincipal.hashCode(),returns a hash code for this jmxprincipal.
javax.management.remote.JMXPrincipal.toString(),returns a string representation of this jmxprincipal.
javax.management.remote.JMXServiceURL.equals(java.lang.Object),indicates whether some other object is equal to this one.
javax.management.remote.JMXServiceURL.getHost(),the host part of the service url.
javax.management.remote.JMXServiceURL.getPort(),the port of the service url.
javax.management.remote.JMXServiceURL.getProtocol(),the protocol part of the service url.
javax.management.remote.JMXServiceURL.getURLPath(),the url path part of the service url.
javax.management.remote.JMXServiceURL.toString(),the string representation of this service url.
javax.management.remote.NotificationResult.getEarliestSequenceNumber(),returns the sequence number of the earliest notification still in the buffer.
javax.management.remote.NotificationResult.getNextSequenceNumber(),returns the sequence number of the next notification available for querying.
javax.management.remote.NotificationResult.getTargetedNotifications(),"returns the notifications resulting from the query, and the listeners they correspond to."
javax.management.remote.NotificationResult.toString(),returns a string representation of the object.
javax.management.remote.TargetedNotification.getListenerID(),the id of the listener to which the notification is targeted.
javax.management.remote.TargetedNotification.getNotification(),the emitted notification.
javax.management.remote.TargetedNotification.toString(),returns a textual representation of this targeted notification.
"javax.management.remote.rmi.RMIConnection.addNotificationListener(javax.management.ObjectName,javax.management.ObjectName,java.rmi.MarshalledObject,java.rmi.MarshalledObject,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.addNotificationListeners(javax.management.ObjectName[],java.rmi.MarshalledObject[],javax.security.auth.Subject[])",handles the method mbeanserverconnection.
javax.management.remote.rmi.RMIConnection.close(),closes this connection.
"javax.management.remote.rmi.RMIConnection.createMBean(java.lang.String,javax.management.ObjectName,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.createMBean(java.lang.String,javax.management.ObjectName,java.rmi.MarshalledObject,java.lang.String[],javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName,java.rmi.MarshalledObject,java.lang.String[],javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.fetchNotifications(long,int,long)",retrieves notifications from the connector server.
"javax.management.remote.rmi.RMIConnection.getAttribute(javax.management.ObjectName,java.lang.String,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.getAttributes(javax.management.ObjectName,java.lang.String[],javax.security.auth.Subject)",handles the method mbeanserverconnection.
javax.management.remote.rmi.RMIConnection.getConnectionId(),returns the connection id.
javax.management.remote.rmi.RMIConnection.getDefaultDomain(javax.security.auth.Subject),handles the method mbeanserverconnection.
javax.management.remote.rmi.RMIConnection.getDomains(javax.security.auth.Subject),handles the method mbeanserverconnection.
javax.management.remote.rmi.RMIConnection.getMBeanCount(javax.security.auth.Subject),handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.getMBeanInfo(javax.management.ObjectName,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.getObjectInstance(javax.management.ObjectName,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.invoke(javax.management.ObjectName,java.lang.String,java.rmi.MarshalledObject,java.lang.String[],javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.isInstanceOf(javax.management.ObjectName,java.lang.String,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.isRegistered(javax.management.ObjectName,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.queryMBeans(javax.management.ObjectName,java.rmi.MarshalledObject,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.queryNames(javax.management.ObjectName,java.rmi.MarshalledObject,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.removeNotificationListener(javax.management.ObjectName,javax.management.ObjectName,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.removeNotificationListener(javax.management.ObjectName,javax.management.ObjectName,java.rmi.MarshalledObject,java.rmi.MarshalledObject,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.removeNotificationListeners(javax.management.ObjectName,java.lang.Integer[],javax.security.auth.Subject)","handles the removenotificationlistener(objectname, notificationlistener) and removenotificationlistener(objectname, notificationlistener, notificationfilter, object) methods."
"javax.management.remote.rmi.RMIConnection.setAttribute(javax.management.ObjectName,java.rmi.MarshalledObject,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.setAttributes(javax.management.ObjectName,java.rmi.MarshalledObject,javax.security.auth.Subject)",handles the method mbeanserverconnection.
"javax.management.remote.rmi.RMIConnection.unregisterMBean(javax.management.ObjectName,javax.security.auth.Subject)",handles the method mbeanserverconnection.
javax.management.remote.rmi.RMIServer.getVersion(),the version of the rmi connector protocol understood by this connector server.
javax.management.remote.rmi.RMIServer.newClient(java.lang.Object),makes a new connection through this rmi connector.
javax.management.remote.rmi.RMIConnectionImpl.toString(),returns a string representation of this object.
javax.management.remote.rmi.RMIConnector.getAddress(),the address of this connector.
javax.management.remote.rmi.RMIConnector.toString(),returns a string representation of this object.
javax.management.remote.rmi.RMIConnectorServer.start(),"activates the connector server, that is starts listening for client connections."
javax.management.remote.rmi.RMIConnectorServer.stop(),"deactivates the connector server, that is, stops listening for client connections."
"javax.management.remote.rmi.RMIConnectorServer.toJMXConnector(,?>)",returns a client stub for this connector server.
javax.management.remote.rmi.RMIIIOPServerImpl.closeServer(),called by rmiserverimpl.
"javax.management.remote.rmi.RMIIIOPServerImpl.makeClient(java.lang.String,javax.security.auth.Subject)",creates a new client connection as an rmi object exported through iiop.
javax.management.remote.rmi.RMIIIOPServerImpl.toStub(),returns an iiop stub.
javax.management.remote.rmi.RMIJRMPServerImpl.closeServer(),called by rmiserverimpl.
"javax.management.remote.rmi.RMIJRMPServerImpl.makeClient(java.lang.String,javax.security.auth.Subject)",creates a new client connection as an rmi object exported through jrmp.
javax.management.remote.rmi.RMIJRMPServerImpl.toStub(),returns a serializable stub for this rmiserver object.
javax.management.remote.rmi.RMIServerImpl.clientClosed(javax.management.remote.rmi.RMIConnection),method called when a client connection created by makeclient is closed.
javax.management.remote.rmi.RMIServerImpl.close(),closes this connection server.
javax.management.remote.rmi.RMIServerImpl.closeClient(javax.management.remote.rmi.RMIConnection),closes a client connection made by makeclient.
javax.management.remote.rmi.RMIServerImpl.closeServer(),called by close() to close the connector server.
javax.management.remote.rmi.RMIServerImpl.export(),exports this rmi object.
javax.management.remote.rmi.RMIServerImpl.getDefaultClassLoader(),gets the default classloader used by this connector server.
javax.management.remote.rmi.RMIServerImpl.getMBeanServer(),the mbeanserver to which this connector server is attached.
javax.management.remote.rmi.RMIServerImpl.getProtocol(),returns the protocol string for this object.
"javax.management.remote.rmi.RMIServerImpl.makeClient(java.lang.String,javax.security.auth.Subject)",creates a new client connection.
javax.management.remote.rmi.RMIServerImpl.newClient(java.lang.Object),creates a new client connection.
javax.management.remote.rmi.RMIServerImpl.setDefaultClassLoader(java.lang.ClassLoader),sets the default classloader for this connector server.
javax.management.remote.rmi.RMIServerImpl.setMBeanServer(javax.management.MBeanServer),sets the mbeanserver to which this connector server is attached.
javax.management.remote.rmi.RMIServerImpl.toStub(),returns a remotable stub for this server object.
"javax.management.timer.TimerMBean.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long,long,boolean)","creates a new timer notification with the specified type, message and userdata and inserts it into the list of notifications with a given date, period and number of occurrences."
"javax.management.timer.TimerMBean.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long,long)","creates a new timer notification with the specified type, message and userdata and inserts it into the list of notifications with a given date, period and number of occurrences."
"javax.management.timer.TimerMBean.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long)","creates a new timer notification with the specified type, message and userdata and inserts it into the list of notifications with a given date and period and a null number of occurrences."
"javax.management.timer.TimerMBean.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date)","creates a new timer notification with the specified type, message and userdata and inserts it into the list of notifications with a given date and a null period and number of occurrences."
javax.management.timer.TimerMBean.getAllNotificationIDs(),gets all timer notification identifiers registered into the list of notifications.
javax.management.timer.TimerMBean.getDate(java.lang.Integer),gets a copy of the date associated to a timer notification.
javax.management.timer.TimerMBean.getFixedRate(java.lang.Integer),gets a copy of the flag indicating whether a periodic notification is executed at fixed-delay or at fixed-rate.
javax.management.timer.TimerMBean.getNbNotifications(),gets the number of timer notifications registered into the list of notifications.
javax.management.timer.TimerMBean.getNbOccurences(java.lang.Integer),gets a copy of the remaining number of occurrences associated to a timer notification.
javax.management.timer.TimerMBean.getNotificationIDs(java.lang.String),gets all the identifiers of timer notifications corresponding to the specified type.
javax.management.timer.TimerMBean.getNotificationMessage(java.lang.Integer),gets the timer notification detailed message corresponding to the specified identifier.
javax.management.timer.TimerMBean.getNotificationType(java.lang.Integer),gets the timer notification type corresponding to the specified identifier.
javax.management.timer.TimerMBean.getNotificationUserData(java.lang.Integer),gets the timer notification user data object corresponding to the specified identifier.
javax.management.timer.TimerMBean.getPeriod(java.lang.Integer),gets a copy of the period (in milliseconds) associated to a timer notification.
javax.management.timer.TimerMBean.getSendPastNotifications(),gets the flag indicating whether or not the timer sends past notifications.
javax.management.timer.TimerMBean.isActive(),tests whether the timer mbean is active.
javax.management.timer.TimerMBean.isEmpty(),tests whether the list of timer notifications is empty.
javax.management.timer.TimerMBean.removeAllNotifications(),removes all the timer notifications from the list of notifications and resets the counter used to update the timer notification identifiers.
javax.management.timer.TimerMBean.removeNotification(java.lang.Integer),removes the timer notification corresponding to the specified identifier from the list of notifications.
javax.management.timer.TimerMBean.removeNotifications(java.lang.String),removes all the timer notifications corresponding to the specified type from the list of notifications.
javax.management.timer.TimerMBean.setSendPastNotifications(boolean),sets the flag indicating whether the timer sends past notifications or not.
javax.management.timer.TimerMBean.start(),starts the timer.
javax.management.timer.TimerMBean.stop(),stops the timer.
"javax.management.timer.Timer.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long,long,boolean)","creates a new timer notification with the specified type, message and userdata and inserts it into the list of notifications with a given date, period and number of occurrences."
"javax.management.timer.Timer.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long,long)","creates a new timer notification with the specified type, message and userdata and inserts it into the list of notifications with a given date, period and number of occurrences."
"javax.management.timer.Timer.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long)","creates a new timer notification with the specified type, message and userdata and inserts it into the list of notifications with a given date and period and a null number of occurrences."
"javax.management.timer.Timer.addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date)","creates a new timer notification with the specified type, message and userdata and inserts it into the list of notifications with a given date and a null period and number of occurrences."
javax.management.timer.Timer.getAllNotificationIDs(),gets all timer notification identifiers registered into the list of notifications.
javax.management.timer.Timer.getDate(java.lang.Integer),gets a copy of the date associated to a timer notification.
javax.management.timer.Timer.getFixedRate(java.lang.Integer),gets a copy of the flag indicating whether a periodic notification is executed at fixed-delay or at fixed-rate.
javax.management.timer.Timer.getNbNotifications(),gets the number of timer notifications registered into the list of notifications.
javax.management.timer.Timer.getNbOccurences(java.lang.Integer),gets a copy of the remaining number of occurrences associated to a timer notification.
javax.management.timer.Timer.getNotificationIDs(java.lang.String),gets all the identifiers of timer notifications corresponding to the specified type.
javax.management.timer.Timer.getNotificationMessage(java.lang.Integer),gets the timer notification detailed message corresponding to the specified identifier.
javax.management.timer.Timer.getNotificationType(java.lang.Integer),gets the timer notification type corresponding to the specified identifier.
javax.management.timer.Timer.getNotificationUserData(java.lang.Integer),gets the timer notification user data object corresponding to the specified identifier.
javax.management.timer.Timer.getPeriod(java.lang.Integer),gets a copy of the period (in milliseconds) associated to a timer notification.
javax.management.timer.Timer.getSendPastNotifications(),gets the flag indicating whether or not the timer sends past notifications.
javax.management.timer.Timer.isActive(),tests whether the timer mbean is active.
javax.management.timer.Timer.isEmpty(),tests whether the list of timer notifications is empty.
javax.management.timer.Timer.postDeregister(),allows the timer mbean to perform any operations needed after having been unregistered by the mbean server.
javax.management.timer.Timer.postRegister(java.lang.Boolean),allows the timer mbean to perform any operations needed after having been registered in the mbean server or after the registration has failed.
javax.management.timer.Timer.preDeregister(),allows the timer mbean to perform any operations it needs before being unregistered by the mbean server.
"javax.management.timer.Timer.preRegister(javax.management.MBeanServer,javax.management.ObjectName)",allows the timer mbean to perform any operations it needs before being registered in the mbean server.
javax.management.timer.Timer.removeAllNotifications(),removes all the timer notifications from the list of notifications and resets the counter used to update the timer notification identifiers.
javax.management.timer.Timer.removeNotification(java.lang.Integer),removes the timer notification corresponding to the specified identifier from the list of notifications.
javax.management.timer.Timer.removeNotifications(java.lang.String),removes all the timer notifications corresponding to the specified type from the list of notifications.
javax.management.timer.Timer.setSendPastNotifications(boolean),sets the flag indicating whether the timer sends past notifications or not.
javax.management.timer.Timer.start(),starts the timer.
javax.management.timer.Timer.stop(),stops the timer.
javax.management.timer.TimerNotification.getNotificationID(),gets the identifier of this timer notification.
"javax.naming.Context.addToEnvironment(java.lang.String,java.lang.Object)",adds a new environment property to the environment of this context.
"javax.naming.Context.bind(javax.naming.Name,java.lang.Object)",binds a name to an object.
"javax.naming.Context.bind(java.lang.String,java.lang.Object)",binds a name to an object.
javax.naming.Context.close(),closes this context.
"javax.naming.Context.composeName(javax.naming.Name,javax.naming.Name)",composes the name of this context with a name relative to this context.
"javax.naming.Context.composeName(java.lang.String,java.lang.String)",composes the name of this context with a name relative to this context.
javax.naming.Context.createSubcontext(javax.naming.Name),creates and binds a new context.
javax.naming.Context.createSubcontext(java.lang.String),creates and binds a new context.
javax.naming.Context.destroySubcontext(javax.naming.Name),destroys the named context and removes it from the namespace.
javax.naming.Context.destroySubcontext(java.lang.String),destroys the named context and removes it from the namespace.
javax.naming.Context.getEnvironment(),retrieves the environment in effect for this context.
javax.naming.Context.getNameInNamespace(),retrieves the full name of this context within its own namespace.
javax.naming.Context.getNameParser(javax.naming.Name),retrieves the parser associated with the named context.
javax.naming.Context.getNameParser(java.lang.String),retrieves the parser associated with the named context.
javax.naming.Context.list(javax.naming.Name),"enumerates the names bound in the named context, along with the class names of objects bound to them."
javax.naming.Context.list(java.lang.String),"enumerates the names bound in the named context, along with the class names of objects bound to them."
javax.naming.Context.listBindings(javax.naming.Name),"enumerates the names bound in the named context, along with the objects bound to them."
javax.naming.Context.listBindings(java.lang.String),"enumerates the names bound in the named context, along with the objects bound to them."
javax.naming.Context.lookup(javax.naming.Name),retrieves the named object.
javax.naming.Context.lookup(java.lang.String),retrieves the named object.
javax.naming.Context.lookupLink(javax.naming.Name),"retrieves the named object, following links except for the terminal atomic component of the name."
javax.naming.Context.lookupLink(java.lang.String),"retrieves the named object, following links except for the terminal atomic component of the name."
"javax.naming.Context.rebind(javax.naming.Name,java.lang.Object)","binds a name to an object, overwriting any existing binding."
"javax.naming.Context.rebind(java.lang.String,java.lang.Object)","binds a name to an object, overwriting any existing binding."
javax.naming.Context.removeFromEnvironment(java.lang.String),removes an environment property from the environment of this context.
"javax.naming.Context.rename(javax.naming.Name,javax.naming.Name)","binds a new name to the object bound to an old name, and unbinds the old name."
"javax.naming.Context.rename(java.lang.String,java.lang.String)","binds a new name to the object bound to an old name, and unbinds the old name."
javax.naming.Context.unbind(javax.naming.Name),unbinds the named object.
javax.naming.Context.unbind(java.lang.String),unbinds the named object.
javax.naming.Name.add(java.lang.String),adds a single component to the end of this name.
"javax.naming.Name.add(int,java.lang.String)",adds a single component at a specified position within this name.
javax.naming.Name.addAll(javax.naming.Name),adds the components of a name -- in order -- to the end of this name.
"javax.naming.Name.addAll(int,javax.naming.Name)",adds the components of a name -- in order -- at a specified position within this name.
javax.naming.Name.clone(),generates a new copy of this name.
javax.naming.Name.compareTo(java.lang.Object),compares this name with another name for order.
javax.naming.Name.endsWith(javax.naming.Name),determines whether this name ends with a specified suffix.
javax.naming.Name.get(int),retrieves a component of this name.
javax.naming.Name.getAll(),retrieves the components of this name as an enumeration of strings.
javax.naming.Name.getPrefix(int),creates a name whose components consist of a prefix of the components of this name.
javax.naming.Name.getSuffix(int),creates a name whose components consist of a suffix of the components in this name.
javax.naming.Name.isEmpty(),determines whether this name is empty.
javax.naming.Name.remove(int),removes a component from this name.
javax.naming.Name.size(),returns the number of components in this name.
javax.naming.Name.startsWith(javax.naming.Name),determines whether this name starts with a specified prefix.
javax.naming.NameParser.parse(java.lang.String),parses a name into its components.
javax.naming.NamingEnumeration.close(),closes this enumeration.
javax.naming.NamingEnumeration.hasMore(),determines whether there are any more elements in the enumeration.
javax.naming.NamingEnumeration.next(),retrieves the next element in the enumeration.
javax.naming.Referenceable.getReference(),retrieves the reference of this object.
javax.naming.BinaryRefAddr.equals(java.lang.Object),determines whether obj is equal to this address.
javax.naming.BinaryRefAddr.getContent(),retrieves the contents of this address as an object.
javax.naming.BinaryRefAddr.hashCode(),computes the hash code of this address using its address type and contents.
javax.naming.BinaryRefAddr.toString(),generates the string representation of this address.
javax.naming.Binding.getClassName(),retrieves the class name of the object bound to the name of this binding.
javax.naming.Binding.getObject(),retrieves the object bound to the name of this binding.
javax.naming.Binding.setObject(java.lang.Object),sets the object associated with this binding.
javax.naming.Binding.toString(),generates the string representation of this binding.
javax.naming.CompositeName.add(java.lang.String),adds a single component to the end of this composite name.
"javax.naming.CompositeName.add(int,java.lang.String)",adds a single component at a specified position within this composite name.
javax.naming.CompositeName.addAll(javax.naming.Name),adds the components of a composite name -- in order -- to the end of this composite name.
"javax.naming.CompositeName.addAll(int,javax.naming.Name)",adds the components of a composite name -- in order -- at a specified position within this composite name.
javax.naming.CompositeName.clone(),generates a copy of this composite name.
javax.naming.CompositeName.compareTo(java.lang.Object),compares this compositename with the specified object for order.
javax.naming.CompositeName.endsWith(javax.naming.Name),determines whether a composite name is a suffix of this composite name.
javax.naming.CompositeName.equals(java.lang.Object),determines whether two composite names are equal.
javax.naming.CompositeName.get(int),retrieves a component of this composite name.
javax.naming.CompositeName.getAll(),retrieves the components of this composite name as an enumeration of strings.
javax.naming.CompositeName.getPrefix(int),creates a composite name whose components consist of a prefix of the components in this composite name.
javax.naming.CompositeName.getSuffix(int),creates a composite name whose components consist of a suffix of the components in this composite name.
javax.naming.CompositeName.hashCode(),computes the hash code of this composite name.
javax.naming.CompositeName.isEmpty(),determines whether this composite name is empty.
javax.naming.CompositeName.remove(int),deletes a component from this composite name.
javax.naming.CompositeName.size(),retrieves the number of components in this composite name.
javax.naming.CompositeName.startsWith(javax.naming.Name),determines whether a composite name is a prefix of this composite name.
javax.naming.CompositeName.toString(),generates the string representation of this composite name.
javax.naming.CompoundName.add(java.lang.String),adds a single component to the end of this compound name.
"javax.naming.CompoundName.add(int,java.lang.String)",adds a single component at a specified position within this compound name.
javax.naming.CompoundName.addAll(javax.naming.Name),adds the components of a compound name -- in order -- to the end of this compound name.
"javax.naming.CompoundName.addAll(int,javax.naming.Name)",adds the components of a compound name -- in order -- at a specified position within this compound name.
javax.naming.CompoundName.clone(),creates a copy of this compound name.
javax.naming.CompoundName.compareTo(java.lang.Object),compares this compoundname with the specified object for order.
javax.naming.CompoundName.endsWith(javax.naming.Name),determines whether a compound name is a suffix of this compound name.
javax.naming.CompoundName.equals(java.lang.Object),determines whether obj is syntactically equal to this compound name.
javax.naming.CompoundName.get(int),retrieves a component of this compound name.
javax.naming.CompoundName.getAll(),retrieves the components of this compound name as an enumeration of strings.
javax.naming.CompoundName.getPrefix(int),creates a compound name whose components consist of a prefix of the components in this compound name.
javax.naming.CompoundName.getSuffix(int),creates a compound name whose components consist of a suffix of the components in this compound name.
javax.naming.CompoundName.hashCode(),computes the hash code of this compound name.
javax.naming.CompoundName.isEmpty(),determines whether this compound name is empty.
javax.naming.CompoundName.remove(int),deletes a component from this compound name.
javax.naming.CompoundName.size(),retrieves the number of components in this compound name.
javax.naming.CompoundName.startsWith(javax.naming.Name),determines whether a compound name is a prefix of this compound name.
javax.naming.CompoundName.toString(),"generates the string representation of this compound name, using the syntax rules of the compound name."
"javax.naming.InitialContext.composeName(java.lang.String,java.lang.String)",composes the name of this context with a name relative to this context.
"javax.naming.InitialContext.composeName(javax.naming.Name,javax.naming.Name)",composes the name of this context with a name relative to this context.
javax.naming.InitialContext.doLookup(javax.naming.Name),a static method to retrieve the named object.
javax.naming.InitialContext.doLookup(java.lang.String),a static method to retrieve the named object.
javax.naming.InitialContext.getDefaultInitCtx(),retrieves the initial context by calling namingmanager.
javax.naming.InitialContext.getURLOrDefaultInitCtx(java.lang.String),retrieves a context for resolving the string name name.
javax.naming.InitialContext.getURLOrDefaultInitCtx(javax.naming.Name),retrieves a context for resolving name.
"javax.naming.InitialContext.init(,?>)",initializes the initial context using the supplied environment.
javax.naming.LinkRef.getLinkName(),retrieves the name of this link.
javax.naming.NameClassPair.getClassName(),retrieves the class name of the object bound to the name of this binding.
javax.naming.NameClassPair.getName(),retrieves the name of this binding.
javax.naming.NameClassPair.getNameInNamespace(),retrieves the full name of this binding.
javax.naming.NameClassPair.isRelative(),determines whether the name of this binding is relative to the target context (which is named by the first parameter of the list() method).
javax.naming.NameClassPair.setClassName(java.lang.String),sets the class name of this binding.
javax.naming.NameClassPair.setName(java.lang.String),sets the name of this binding.
javax.naming.NameClassPair.setNameInNamespace(java.lang.String),sets the full name of this binding.
javax.naming.NameClassPair.setRelative(boolean),sets whether the name of this binding is relative to the target context (which is named by the first parameter of the list() method).
javax.naming.NameClassPair.toString(),generates the string representation of this name/class pair.
javax.naming.RefAddr.equals(java.lang.Object),determines whether obj is equal to this refaddr.
javax.naming.RefAddr.getContent(),retrieves the contents of this address.
javax.naming.RefAddr.getType(),retrieves the address type of this address.
javax.naming.RefAddr.hashCode(),computes the hash code of this address using its address type and contents.
javax.naming.RefAddr.toString(),generates the string representation of this address.
javax.naming.Reference.add(javax.naming.RefAddr),adds an address to the end of the list of addresses.
"javax.naming.Reference.add(int,javax.naming.RefAddr)",adds an address to the list of addresses at index posn.
javax.naming.Reference.clear(),deletes all addresses from this reference.
javax.naming.Reference.clone(),"makes a copy of this reference using its class name list of addresses, class factory name and class factory location."
javax.naming.Reference.equals(java.lang.Object),determines whether obj is a reference with the same addresses (in same order) as this reference.
javax.naming.Reference.get(java.lang.String),retrieves the first address that has the address type 'addrtype'.
javax.naming.Reference.get(int),retrieves the address at index posn.
javax.naming.Reference.getAll(),retrieves an enumeration of the addresses in this reference.
javax.naming.Reference.getClassName(),retrieves the class name of the object to which this reference refers.
javax.naming.Reference.getFactoryClassLocation(),retrieves the location of the factory of the object to which this reference refers.
javax.naming.Reference.getFactoryClassName(),retrieves the class name of the factory of the object to which this reference refers.
javax.naming.Reference.hashCode(),computes the hash code of this reference.
javax.naming.Reference.remove(int),deletes the address at index posn from the list of addresses.
javax.naming.Reference.size(),retrieves the number of addresses in this reference.
javax.naming.Reference.toString(),generates the string representation of this reference.
javax.naming.StringRefAddr.getContent(),retrieves the contents of this address.
javax.naming.CannotProceedException.getAltName(),retrieves the altname field of this exception.
javax.naming.CannotProceedException.getAltNameCtx(),retrieves the altnamectx field of this exception.
javax.naming.CannotProceedException.getEnvironment(),retrieves the environment that was in effect when this exception was created.
javax.naming.CannotProceedException.getRemainingNewName(),"retrieves the ""remaining new name"" field of this exception, which is used when this exception is thrown during a rename() operation."
javax.naming.CannotProceedException.setAltName(javax.naming.Name),sets the altname field of this exception.
javax.naming.CannotProceedException.setAltNameCtx(javax.naming.Context),sets the altnamectx field of this exception.
"javax.naming.CannotProceedException.setEnvironment(,?>)",sets the environment that will be returned when getenvironment() is called.
javax.naming.CannotProceedException.setRemainingNewName(javax.naming.Name),"sets the ""remaining new name"" field of this exception."
javax.naming.LinkException.getLinkExplanation(),retrieves the explanation associated with the problem encounter when resolving a link.
javax.naming.LinkException.getLinkRemainingName(),retrieves the remaining unresolved portion of the link name.
javax.naming.LinkException.getLinkResolvedName(),retrieves the leading portion of the link name that was resolved successfully.
javax.naming.LinkException.getLinkResolvedObj(),retrieves the object to which resolution was successful.
javax.naming.LinkException.setLinkExplanation(java.lang.String),sets the explanation associated with the problem encounter when resolving a link.
javax.naming.LinkException.setLinkRemainingName(javax.naming.Name),sets the remaining link name field of this exception.
javax.naming.LinkException.setLinkResolvedName(javax.naming.Name),sets the resolved link name field of this exception.
javax.naming.LinkException.setLinkResolvedObj(java.lang.Object),sets the link resolved object field of this exception.
javax.naming.LinkException.toString(),generates the string representation of this exception.
javax.naming.LinkException.toString(boolean),generates the string representation of this exception.
javax.naming.NamingException.appendRemainingComponent(java.lang.String),add name as the last component in remaining name.
javax.naming.NamingException.appendRemainingName(javax.naming.Name),add components from 'name' as the last components in remaining name.
javax.naming.NamingException.getCause(),returns the cause of this exception.
javax.naming.NamingException.getExplanation(),retrieves the explanation associated with this exception.
javax.naming.NamingException.getRemainingName(),retrieves the remaining unresolved portion of the name.
javax.naming.NamingException.getResolvedName(),retrieves the leading portion of the name that was resolved successfully.
javax.naming.NamingException.getResolvedObj(),retrieves the object to which resolution was successful.
javax.naming.NamingException.getRootCause(),"retrieves the root cause of this namingexception, if any."
javax.naming.NamingException.initCause(java.lang.Throwable),initializes the cause of this exception to the specified value.
javax.naming.NamingException.setRemainingName(javax.naming.Name),sets the remaining name field of this exception.
javax.naming.NamingException.setResolvedName(javax.naming.Name),sets the resolved name field of this exception.
javax.naming.NamingException.setResolvedObj(java.lang.Object),sets the resolved object field of this exception.
javax.naming.NamingException.setRootCause(java.lang.Throwable),records the root cause of this namingexception.
javax.naming.NamingException.toString(),generates the string representation of this exception.
javax.naming.NamingException.toString(boolean),generates the string representation in more detail.
javax.naming.ReferralException.getReferralContext(),retrieves the context at which to continue the method.
"javax.naming.ReferralException.getReferralContext(,?>)",retrieves the context at which to continue the method using environment properties.
javax.naming.ReferralException.getReferralInfo(),retrieves information (such as urls) related to this referral.
javax.naming.ReferralException.retryReferral(),retries the referral currently being processed.
javax.naming.ReferralException.skipReferral(),discards the referral about to be processed.
javax.naming.directory.Attribute.add(java.lang.Object),adds a new value to the attribute.
"javax.naming.directory.Attribute.add(int,java.lang.Object)",adds an attribute value to the ordered list of attribute values.
javax.naming.directory.Attribute.clear(),removes all values from this attribute.
javax.naming.directory.Attribute.clone(),makes a copy of the attribute.
javax.naming.directory.Attribute.contains(java.lang.Object),determines whether a value is in the attribute.
javax.naming.directory.Attribute.get(),retrieves one of this attribute's values.
javax.naming.directory.Attribute.get(int),retrieves the attribute value from the ordered list of attribute values.
javax.naming.directory.Attribute.getAll(),retrieves an enumeration of the attribute's values.
javax.naming.directory.Attribute.getAttributeDefinition(),retrieves the attribute's schema definition.
javax.naming.directory.Attribute.getAttributeSyntaxDefinition(),retrieves the syntax definition associated with the attribute.
javax.naming.directory.Attribute.getID(),retrieves the id of this attribute.
javax.naming.directory.Attribute.isOrdered(),determines whether this attribute's values are ordered.
javax.naming.directory.Attribute.remove(java.lang.Object),removes a specified value from the attribute.
javax.naming.directory.Attribute.remove(int),removes an attribute value from the ordered list of attribute values.
"javax.naming.directory.Attribute.set(int,java.lang.Object)",sets an attribute value in the ordered list of attribute values.
javax.naming.directory.Attribute.size(),retrieves the number of values in this attribute.
javax.naming.directory.Attributes.clone(),makes a copy of the attribute set.
javax.naming.directory.Attributes.get(java.lang.String),retrieves the attribute with the given attribute id from the attribute set.
javax.naming.directory.Attributes.getAll(),retrieves an enumeration of the attributes in the attribute set.
javax.naming.directory.Attributes.getIDs(),retrieves an enumeration of the ids of the attributes in the attribute set.
javax.naming.directory.Attributes.isCaseIgnored(),determines whether the attribute set ignores the case of attribute identifiers when retrieving or adding attributes.
"javax.naming.directory.Attributes.put(java.lang.String,java.lang.Object)",adds a new attribute to the attribute set.
javax.naming.directory.Attributes.put(javax.naming.directory.Attribute),adds a new attribute to the attribute set.
javax.naming.directory.Attributes.remove(java.lang.String),removes the attribute with the attribute id 'attrid' from the attribute set.
javax.naming.directory.Attributes.size(),retrieves the number of attributes in the attribute set.
"javax.naming.directory.DirContext.bind(javax.naming.Name,java.lang.Object,javax.naming.directory.Attributes)","binds a name to an object, along with associated attributes."
"javax.naming.directory.DirContext.bind(java.lang.String,java.lang.Object,javax.naming.directory.Attributes)","binds a name to an object, along with associated attributes."
"javax.naming.directory.DirContext.createSubcontext(javax.naming.Name,javax.naming.directory.Attributes)","creates and binds a new context, along with associated attributes."
"javax.naming.directory.DirContext.createSubcontext(java.lang.String,javax.naming.directory.Attributes)","creates and binds a new context, along with associated attributes."
javax.naming.directory.DirContext.getAttributes(javax.naming.Name),retrieves all of the attributes associated with a named object.
javax.naming.directory.DirContext.getAttributes(java.lang.String),retrieves all of the attributes associated with a named object.
"javax.naming.directory.DirContext.getAttributes(javax.naming.Name,java.lang.String[])",retrieves selected attributes associated with a named object.
"javax.naming.directory.DirContext.getAttributes(java.lang.String,java.lang.String[])",retrieves selected attributes associated with a named object.
javax.naming.directory.DirContext.getSchema(javax.naming.Name),retrieves the schema associated with the named object.
javax.naming.directory.DirContext.getSchema(java.lang.String),retrieves the schema associated with the named object.
javax.naming.directory.DirContext.getSchemaClassDefinition(javax.naming.Name),retrieves a context containing the schema objects of the named object's class definitions.
javax.naming.directory.DirContext.getSchemaClassDefinition(java.lang.String),retrieves a context containing the schema objects of the named object's class definitions.
"javax.naming.directory.DirContext.modifyAttributes(javax.naming.Name,int,javax.naming.directory.Attributes)",modifies the attributes associated with a named object.
"javax.naming.directory.DirContext.modifyAttributes(java.lang.String,int,javax.naming.directory.Attributes)",modifies the attributes associated with a named object.
"javax.naming.directory.DirContext.modifyAttributes(javax.naming.Name,javax.naming.directory.ModificationItem[])",modifies the attributes associated with a named object using an ordered list of modifications.
"javax.naming.directory.DirContext.modifyAttributes(java.lang.String,javax.naming.directory.ModificationItem[])",modifies the attributes associated with a named object using an ordered list of modifications.
"javax.naming.directory.DirContext.rebind(javax.naming.Name,java.lang.Object,javax.naming.directory.Attributes)","binds a name to an object, along with associated attributes, overwriting any existing binding."
"javax.naming.directory.DirContext.rebind(java.lang.String,java.lang.Object,javax.naming.directory.Attributes)","binds a name to an object, along with associated attributes, overwriting any existing binding."
"javax.naming.directory.DirContext.search(javax.naming.Name,javax.naming.directory.Attributes,java.lang.String[])","searches in a single context for objects that contain a specified set of attributes, and retrieves selected attributes."
"javax.naming.directory.DirContext.search(java.lang.String,javax.naming.directory.Attributes,java.lang.String[])","searches in a single context for objects that contain a specified set of attributes, and retrieves selected attributes."
"javax.naming.directory.DirContext.search(javax.naming.Name,javax.naming.directory.Attributes)",searches in a single context for objects that contain a specified set of attributes.
"javax.naming.directory.DirContext.search(java.lang.String,javax.naming.directory.Attributes)",searches in a single context for objects that contain a specified set of attributes.
"javax.naming.directory.DirContext.search(javax.naming.Name,java.lang.String,javax.naming.directory.SearchControls)",searches in the named context or object for entries that satisfy the given search filter.
"javax.naming.directory.DirContext.search(java.lang.String,java.lang.String,javax.naming.directory.SearchControls)",searches in the named context or object for entries that satisfy the given search filter.
"javax.naming.directory.DirContext.search(javax.naming.Name,java.lang.String,java.lang.Object[],javax.naming.directory.SearchControls)",searches in the named context or object for entries that satisfy the given search filter.
"javax.naming.directory.DirContext.search(java.lang.String,java.lang.String,java.lang.Object[],javax.naming.directory.SearchControls)",searches in the named context or object for entries that satisfy the given search filter.
javax.naming.directory.BasicAttribute.add(java.lang.Object),adds a new value to this attribute.
javax.naming.directory.BasicAttribute.contains(java.lang.Object),determines whether a value is in this attribute.
javax.naming.directory.BasicAttribute.equals(java.lang.Object),determines whether obj is equal to this attribute.
javax.naming.directory.BasicAttribute.get(),retrieves one of this attribute's values.
javax.naming.directory.BasicAttribute.getAll(),retrieves an enumeration of this attribute's values.
javax.naming.directory.BasicAttribute.getAttributeDefinition(),retrieves this attribute's schema definition.
javax.naming.directory.BasicAttribute.getAttributeSyntaxDefinition(),retrieves the syntax definition associated with this attribute.
javax.naming.directory.BasicAttribute.hashCode(),calculates the hash code of this attribute.
javax.naming.directory.BasicAttribute.remove(java.lang.Object),removes a specified value from this attribute.
javax.naming.directory.BasicAttribute.toString(),generates the string representation of this attribute.
javax.naming.directory.BasicAttributes.equals(java.lang.Object),"determines whether this basicattributes is equal to another attributes two attributes are equal if they are both instances of attributes, treat the case of attribute ids the same way, and contain the same attributes."
javax.naming.directory.BasicAttributes.hashCode(),calculates the hash code of this basicattributes.
javax.naming.directory.BasicAttributes.toString(),generates the string representation of this attribute set.
javax.naming.directory.ModificationItem.getAttribute(),retrieves the attribute associated with this modification item.
javax.naming.directory.ModificationItem.getModificationOp(),retrieves the modification code of this modification item.
javax.naming.directory.ModificationItem.toString(),"generates the string representation of this modification item, which consists of the modification operation and its related attribute."
javax.naming.directory.SearchControls.getCountLimit(),retrieves the maximum number of entries that will be returned as a result of the search.
javax.naming.directory.SearchControls.getDerefLinkFlag(),determines whether links will be dereferenced during the search.
javax.naming.directory.SearchControls.getReturningAttributes(),retrieves the attributes that will be returned as part of the search.
javax.naming.directory.SearchControls.getReturningObjFlag(),determines whether objects will be returned as part of the result.
javax.naming.directory.SearchControls.getSearchScope(),retrieves the search scope of these searchcontrols.
javax.naming.directory.SearchControls.getTimeLimit(),retrieves the time limit of these searchcontrols in milliseconds.
javax.naming.directory.SearchControls.setCountLimit(long),sets the maximum number of entries to be returned as a result of the search.
javax.naming.directory.SearchControls.setDerefLinkFlag(boolean),enables/disables link dereferencing during the search.
javax.naming.directory.SearchControls.setReturningAttributes(java.lang.String[]),specifies the attributes that will be returned as part of the search.
javax.naming.directory.SearchControls.setReturningObjFlag(boolean),enables/disables returning objects returned as part of the result.
javax.naming.directory.SearchControls.setSearchScope(int),"sets the search scope to one of: object_scope, onelevel_scope, subtree_scope."
javax.naming.directory.SearchControls.setTimeLimit(int),sets the time limit of these searchcontrols in milliseconds.
javax.naming.directory.SearchResult.getAttributes(),retrieves the attributes in this search result.
javax.naming.directory.SearchResult.setAttributes(javax.naming.directory.Attributes),sets the attributes of this search result to attrs.
javax.naming.directory.SearchResult.toString(),generates the string representation of this searchresult.
javax.naming.directory.AttributeModificationException.getUnexecutedModifications(),retrieves the unexecuted modification list.
javax.naming.directory.AttributeModificationException.setUnexecutedModifications(javax.naming.directory.ModificationItem[]),sets the unexecuted modification list to be e.
javax.naming.directory.AttributeModificationException.toString(),"the string representation of this exception consists of information about where the error occurred, and the first unexecuted modification."
"javax.naming.event.EventContext.addNamingListener(javax.naming.Name,int,javax.naming.event.NamingListener)",adds a listener for receiving naming events fired when the object(s) identified by a target and scope changes.
"javax.naming.event.EventContext.addNamingListener(java.lang.String,int,javax.naming.event.NamingListener)",adds a listener for receiving naming events fired when the object named by the string target name and scope changes.
javax.naming.event.EventContext.removeNamingListener(javax.naming.event.NamingListener),removes a listener from receiving naming events fired by this eventcontext.
javax.naming.event.EventContext.targetMustExist(),determines whether a listener can register interest in a target that does not exist.
"javax.naming.event.EventDirContext.addNamingListener(javax.naming.Name,java.lang.String,javax.naming.directory.SearchControls,javax.naming.event.NamingListener)",adds a listener for receiving naming events fired when objects identified by the search filter filter at the object named by target are modified.
"javax.naming.event.EventDirContext.addNamingListener(java.lang.String,java.lang.String,javax.naming.directory.SearchControls,javax.naming.event.NamingListener)",adds a listener for receiving naming events fired when objects identified by the search filter filter at the object named by the string target name are modified.
"javax.naming.event.EventDirContext.addNamingListener(javax.naming.Name,java.lang.String,java.lang.Object[],javax.naming.directory.SearchControls,javax.naming.event.NamingListener)",adds a listener for receiving naming events fired when objects identified by the search filter filter and filter arguments at the object named by the target are modified.
"javax.naming.event.EventDirContext.addNamingListener(java.lang.String,java.lang.String,java.lang.Object[],javax.naming.directory.SearchControls,javax.naming.event.NamingListener)",adds a listener for receiving naming events fired when objects identified by the search filter filter and filter arguments at the object named by the string target name are modified.
javax.naming.event.NamespaceChangeListener.objectAdded(javax.naming.event.NamingEvent),called when an object has been added.
javax.naming.event.NamespaceChangeListener.objectRemoved(javax.naming.event.NamingEvent),called when an object has been removed.
javax.naming.event.NamespaceChangeListener.objectRenamed(javax.naming.event.NamingEvent),called when an object has been renamed.
javax.naming.event.NamingListener.namingExceptionThrown(javax.naming.event.NamingExceptionEvent),called when a naming exception is thrown while attempting to fire a namingevent.
javax.naming.event.ObjectChangeListener.objectChanged(javax.naming.event.NamingEvent),called when an object has been changed.
javax.naming.event.NamingEvent.dispatch(javax.naming.event.NamingListener),invokes the appropriate listener method on this event.
javax.naming.event.NamingEvent.getChangeInfo(),retrieves the change information for this event.
javax.naming.event.NamingEvent.getEventContext(),retrieves the event source that fired this event.
javax.naming.event.NamingEvent.getNewBinding(),retrieves the binding of the object after the change.
javax.naming.event.NamingEvent.getOldBinding(),retrieves the binding of the object before the change.
javax.naming.event.NamingEvent.getType(),returns the type of this event.
javax.naming.event.NamingExceptionEvent.dispatch(javax.naming.event.NamingListener),invokes the namingexceptionthrown() method on a listener using this event.
javax.naming.event.NamingExceptionEvent.getEventContext(),retrieves the eventcontext that fired this event.
javax.naming.event.NamingExceptionEvent.getException(),retrieves the exception that was thrown.
javax.naming.ldap.Control.getEncodedValue(),retrieves the asn.
javax.naming.ldap.Control.getID(),retrieves the object identifier assigned for the ldap control.
javax.naming.ldap.Control.isCritical(),determines the criticality of the ldap control.
"javax.naming.ldap.ExtendedRequest.createExtendedResponse(java.lang.String,byte[],int,int)",creates the response object that corresponds to this request.
javax.naming.ldap.ExtendedRequest.getEncodedValue(),retrieves the asn.
javax.naming.ldap.ExtendedRequest.getID(),retrieves the object identifier of the request.
javax.naming.ldap.ExtendedResponse.getEncodedValue(),retrieves the asn.
javax.naming.ldap.ExtendedResponse.getID(),retrieves the object identifier of the response.
javax.naming.ldap.HasControls.getControls(),retrieves an array of controls from the object that implements this interface.
javax.naming.ldap.LdapContext.extendedOperation(javax.naming.ldap.ExtendedRequest),performs an extended operation.
javax.naming.ldap.LdapContext.getConnectControls(),retrieves the connection request controls in effect for this context.
javax.naming.ldap.LdapContext.getRequestControls(),retrieves the request controls in effect for this context.
javax.naming.ldap.LdapContext.getResponseControls(),retrieves the response controls produced as a result of the last method invoked on this context.
javax.naming.ldap.LdapContext.newInstance(javax.naming.ldap.Control[]),creates a new instance of this context initialized using request controls.
javax.naming.ldap.LdapContext.reconnect(javax.naming.ldap.Control[]),reconnects to the ldap server using the supplied controls and this context's environment.
javax.naming.ldap.LdapContext.setRequestControls(javax.naming.ldap.Control[]),sets the request controls for methods subsequently invoked on this context.
javax.naming.ldap.UnsolicitedNotification.getException(),retrieves the exception as constructed using information sent by the server.
javax.naming.ldap.UnsolicitedNotification.getReferrals(),retrieves the referral(s) sent by the server.
javax.naming.ldap.UnsolicitedNotificationListener.notificationReceived(javax.naming.ldap.UnsolicitedNotificationEvent),called when an unsolicited notification has been received.
javax.naming.ldap.BasicControl.getEncodedValue(),retrieves the control's asn.
javax.naming.ldap.BasicControl.getID(),retrieves the control's object identifier string.
javax.naming.ldap.BasicControl.isCritical(),determines the control's criticality.
javax.naming.ldap.ControlFactory.getControlInstance(javax.naming.ldap.Control),creates a control using this control factory.
"javax.naming.ldap.ControlFactory.getControlInstance(javax.naming.ldap.Control,javax.naming.Context,,?>)",creates a control using known control factories.
javax.naming.ldap.LdapName.add(java.lang.String),adds a single component to the end of this ldap name.
javax.naming.ldap.LdapName.add(javax.naming.ldap.Rdn),adds a single rdn to the end of this ldap name.
"javax.naming.ldap.LdapName.add(int,java.lang.String)",adds a single component at a specified position within this ldap name.
"javax.naming.ldap.LdapName.add(int,javax.naming.ldap.Rdn)",adds a single rdn at a specified position within this ldap name.
javax.naming.ldap.LdapName.addAll(javax.naming.Name),adds the components of a name -- in order -- to the end of this name.
javax.naming.ldap.LdapName.addAll(java.util.List<javax.naming.ldap.Rdn>),adds the rdns of a name -- in order -- to the end of this name.
"javax.naming.ldap.LdapName.addAll(int,javax.naming.Name)",adds the components of a name -- in order -- at a specified position within this name.
"javax.naming.ldap.LdapName.addAll(int,java.util.List<javax.naming.ldap.Rdn>)",adds the rdns of a name -- in order -- at a specified position within this name.
javax.naming.ldap.LdapName.clone(),generates a new copy of this name.
javax.naming.ldap.LdapName.compareTo(java.lang.Object),compares this ldapname with the specified object for order.
javax.naming.ldap.LdapName.endsWith(javax.naming.Name),determines whether this ldap name ends with a specified ldap name suffix.
javax.naming.ldap.LdapName.endsWith(java.util.List<javax.naming.ldap.Rdn>),determines whether the specified rdn sequence forms a suffix of this ldap name.
javax.naming.ldap.LdapName.equals(java.lang.Object),determines whether two ldap names are equal.
javax.naming.ldap.LdapName.get(int),retrieves a component of this ldap name as a string.
javax.naming.ldap.LdapName.getAll(),retrieves the components of this name as an enumeration of strings.
javax.naming.ldap.LdapName.getPrefix(int),creates a name whose components consist of a prefix of the components of this ldap name.
javax.naming.ldap.LdapName.getRdn(int),retrieves an rdn of this ldap name as an rdn.
javax.naming.ldap.LdapName.getRdns(),retrieves the list of relative distinguished names.
javax.naming.ldap.LdapName.getSuffix(int),creates a name whose components consist of a suffix of the components in this ldap name.
javax.naming.ldap.LdapName.hashCode(),computes the hash code of this ldap name.
javax.naming.ldap.LdapName.isEmpty(),determines whether this ldap name is empty.
javax.naming.ldap.LdapName.remove(int),removes a component from this ldap name.
javax.naming.ldap.LdapName.size(),retrieves the number of components in this ldap name.
javax.naming.ldap.LdapName.startsWith(javax.naming.Name),determines whether this ldap name starts with a specified ldap name prefix.
javax.naming.ldap.LdapName.startsWith(java.util.List<javax.naming.ldap.Rdn>),determines whether the specified rdn sequence forms a prefix of this ldap name.
javax.naming.ldap.LdapName.toString(),returns a string representation of this ldap name in a format defined by rfc 2253 and described in the class description.
javax.naming.ldap.PagedResultsResponseControl.getCookie(),retrieves the server-generated cookie.
javax.naming.ldap.PagedResultsResponseControl.getResultSize(),retrieves (an estimate of) the number of entries in the search result.
javax.naming.ldap.Rdn.compareTo(java.lang.Object),compares this rdn with the specified object for order.
javax.naming.ldap.Rdn.equals(java.lang.Object),compares the specified object with this rdn for equality.
javax.naming.ldap.Rdn.escapeValue(java.lang.Object),"given the value of an attribute, returns a string escaped according to the rules specified in rfc 2253."
javax.naming.ldap.Rdn.getType(),retrieves one of this rdn's type.
javax.naming.ldap.Rdn.getValue(),retrieves one of this rdn's value.
javax.naming.ldap.Rdn.hashCode(),returns the hash code of this rdn.
javax.naming.ldap.Rdn.size(),retrieves the number of attribute type/value pairs in this rdn.
javax.naming.ldap.Rdn.toAttributes(),retrieves the attributes view of the type/value mappings contained in this rdn.
javax.naming.ldap.Rdn.toString(),returns this rdn as a string represented in a format defined by rfc 2253 and described in the class description for ldapname.
javax.naming.ldap.Rdn.unescapeValue(java.lang.String),"given an attribute value string formated according to the rules specified in rfc 2253, returns the unformated value."
javax.naming.ldap.SortKey.getAttributeID(),retrieves the attribute id of the sort key.
javax.naming.ldap.SortKey.getMatchingRuleID(),retrieves the matching rule id used to order the attribute values.
javax.naming.ldap.SortKey.isAscending(),determines the sort order.
javax.naming.ldap.SortResponseControl.getAttributeID(),retrieves the id of the attribute that caused the sort to fail.
javax.naming.ldap.SortResponseControl.getException(),retrieves the namingexception appropriate for the result code.
javax.naming.ldap.SortResponseControl.getResultCode(),retrieves the ldap result code of the sort operation.
javax.naming.ldap.SortResponseControl.isSorted(),determines if the search results have been successfully sorted.
"javax.naming.ldap.StartTlsRequest.createExtendedResponse(java.lang.String,byte[],int,int)",creates an extended response object that corresponds to the ldap starttls extended request.
javax.naming.ldap.StartTlsRequest.getEncodedValue(),retrieves the starttls request's asn.
javax.naming.ldap.StartTlsRequest.getID(),retrieves the starttls request's object identifier string.
javax.naming.ldap.StartTlsResponse.close(),closes the tls connection gracefully and reverts back to the underlying connection.
javax.naming.ldap.StartTlsResponse.getEncodedValue(),retrieves the starttls response's asn.
javax.naming.ldap.StartTlsResponse.getID(),retrieves the starttls response's object identifier string.
javax.naming.ldap.StartTlsResponse.negotiate(),negotiates a tls session using the default ssl socket factory.
javax.naming.ldap.StartTlsResponse.negotiate(javax.net.ssl.SSLSocketFactory),negotiates a tls session using an ssl socket factory.
javax.naming.ldap.StartTlsResponse.setHostnameVerifier(javax.net.ssl.HostnameVerifier),sets the hostname verifier used by negotiate() after the tls handshake has completed and the default hostname verification has failed.
javax.naming.ldap.UnsolicitedNotificationEvent.dispatch(javax.naming.ldap.UnsolicitedNotificationListener),invokes the notificationreceived() method on a listener using this event.
javax.naming.ldap.UnsolicitedNotificationEvent.getNotification(),returns the unsolicited notification.
javax.naming.ldap.LdapReferralException.getReferralContext(),retrieves the context at which to continue the method using the context's environment and no controls.
"javax.naming.ldap.LdapReferralException.getReferralContext(,?>)",retrieves the context at which to continue the method using environment properties and no controls.
"javax.naming.ldap.LdapReferralException.getReferralContext(,?>,javax.naming.ldap.Control[])",retrieves the context at which to continue the method using request controls and environment properties.
"javax.naming.spi.DirObjectFactory.getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>,javax.naming.directory.Attributes)","creates an object using the location or reference information, and attributes specified."
"javax.naming.spi.DirStateFactory.getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>,javax.naming.directory.Attributes)",retrieves the state of an object for binding given the object and attributes to be transformed.
"javax.naming.spi.InitialContextFactory.getInitialContext(,?>)",creates an initial context for beginning name resolution.
"javax.naming.spi.InitialContextFactoryBuilder.createInitialContextFactory(,?>)",creates an initial context factory using the specified environment.
"javax.naming.spi.ObjectFactory.getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>)",creates an object using the location or reference information specified.
"javax.naming.spi.ObjectFactoryBuilder.createObjectFactory(java.lang.Object,,?>)",creates a new object factory using the environment supplied.
"javax.naming.spi.Resolver.resolveToClass(javax.naming.Name,java.lang.Class<? extends javax.naming.Context>)",partially resolves a name.
"javax.naming.spi.Resolver.resolveToClass(java.lang.String,java.lang.Class<? extends javax.naming.Context>)",partially resolves a name.
"javax.naming.spi.StateFactory.getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>)",retrieves the state of an object for binding.
javax.naming.spi.DirectoryManager.getContinuationDirContext(javax.naming.CannotProceedException),creates a context in which to continue a dircontext operation.
"javax.naming.spi.DirectoryManager.getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>,javax.naming.directory.Attributes)","creates an instance of an object for the specified object, attributes, and environment."
"javax.naming.spi.DirectoryManager.getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>,javax.naming.directory.Attributes)",retrieves the state of an object for binding when given the original object and its attributes.
javax.naming.spi.DirStateFactory.Result.getAttributes(),retrieves the attributes to be bound.
javax.naming.spi.DirStateFactory.Result.getObject(),retrieves the object to be bound.
javax.naming.spi.NamingManager.getContinuationContext(javax.naming.CannotProceedException),creates a context in which to continue a context operation.
"javax.naming.spi.NamingManager.getInitialContext(,?>)",creates an initial context using the specified environment properties.
"javax.naming.spi.NamingManager.getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>)",creates an instance of an object for the specified object and environment.
"javax.naming.spi.NamingManager.getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,,?>)",retrieves the state of an object for binding.
"javax.naming.spi.NamingManager.getURLContext(java.lang.String,,?>)",creates a context for the given url scheme id.
javax.naming.spi.NamingManager.hasInitialContextFactoryBuilder(),determines whether an initial context factory builder has been set.
javax.naming.spi.NamingManager.setInitialContextFactoryBuilder(javax.naming.spi.InitialContextFactoryBuilder),sets the initialcontextfactory builder to be builder.
javax.naming.spi.NamingManager.setObjectFactoryBuilder(javax.naming.spi.ObjectFactoryBuilder),the objectfactorybuilder determines the policy used when trying to load object factories.
javax.naming.spi.ResolveResult.appendRemainingComponent(java.lang.String),adds a single component to the end of remaining name.
javax.naming.spi.ResolveResult.appendRemainingName(javax.naming.Name),adds components to the end of remaining name.
javax.naming.spi.ResolveResult.getRemainingName(),retrieves the remaining unresolved portion of the name.
javax.naming.spi.ResolveResult.getResolvedObj(),retrieves the object to which resolution was successful.
javax.naming.spi.ResolveResult.setRemainingName(javax.naming.Name),sets the remaining name field of this result to name.
javax.naming.spi.ResolveResult.setResolvedObj(java.lang.Object),sets the resolved object field of this result to obj.
javax.net.ServerSocketFactory.createServerSocket(),returns an unbound server socket.
javax.net.ServerSocketFactory.createServerSocket(int),returns a server socket bound to the specified port.
"javax.net.ServerSocketFactory.createServerSocket(int,int)","returns a server socket bound to the specified port, and uses the specified connection backlog."
"javax.net.ServerSocketFactory.createServerSocket(int,int,java.net.InetAddress)","returns a server socket bound to the specified port, with a specified listen backlog and local ip."
javax.net.ServerSocketFactory.getDefault(),returns a copy of the environment's default socket factory.
javax.net.SocketFactory.createSocket(),creates an unconnected socket.
"javax.net.SocketFactory.createSocket(java.lang.String,int)",creates a socket and connects it to the specified remote host at the specified remote port.
"javax.net.SocketFactory.createSocket(java.lang.String,int,java.net.InetAddress,int)",creates a socket and connects it to the specified remote host on the specified remote port.
"javax.net.SocketFactory.createSocket(java.net.InetAddress,int)",creates a socket and connects it to the specified port number at the specified address.
"javax.net.SocketFactory.createSocket(java.net.InetAddress,int,java.net.InetAddress,int)",creates a socket and connect it to the specified remote address on the specified remote port.
javax.net.SocketFactory.getDefault(),returns a copy of the environment's default socket factory.
javax.net.ssl.HandshakeCompletedListener.handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent),this method is invoked on registered objects when a ssl handshake is completed.
"javax.net.ssl.HostnameVerifier.verify(java.lang.String,javax.net.ssl.SSLSession)",verify that the host name is an acceptable match with the server's authentication scheme.
javax.net.ssl.SSLSession.getApplicationBufferSize(),gets the current size of the largest application data that is expected when using this session.
javax.net.ssl.SSLSession.getCipherSuite(),returns the name of the ssl cipher suite which is used for all connections in the session.
javax.net.ssl.SSLSession.getCreationTime(),"returns the time at which this session representation was created, in milliseconds since midnight, january 1, 1970 utc."
javax.net.ssl.SSLSession.getId(),returns the identifier assigned to this session.
javax.net.ssl.SSLSession.getLastAccessedTime(),"returns the last time this session representation was accessed by the session level infrastructure, in milliseconds since midnight, january 1, 1970 utc."
javax.net.ssl.SSLSession.getLocalCertificates(),returns the certificate(s) that were sent to the peer during handshaking.
javax.net.ssl.SSLSession.getLocalPrincipal(),returns the principal that was sent to the peer during handshaking.
javax.net.ssl.SSLSession.getPacketBufferSize(),gets the current size of the largest ssl/tls packet that is expected when using this session.
javax.net.ssl.SSLSession.getPeerCertificateChain(),returns the identity of the peer which was identified as part of defining the session.
javax.net.ssl.SSLSession.getPeerCertificates(),returns the identity of the peer which was established as part of defining the session.
javax.net.ssl.SSLSession.getPeerHost(),returns the host name of the peer in this session.
javax.net.ssl.SSLSession.getPeerPort(),returns the port number of the peer in this session.
javax.net.ssl.SSLSession.getPeerPrincipal(),returns the identity of the peer which was established as part of defining the session.
javax.net.ssl.SSLSession.getProtocol(),returns the standard name of the protocol used for all connections in the session.
javax.net.ssl.SSLSession.getSessionContext(),returns the context in which this session is bound.
javax.net.ssl.SSLSession.getValue(java.lang.String),returns the object bound to the given name in the session's application layer data.
javax.net.ssl.SSLSession.getValueNames(),returns an array of the names of all the application layer data objects bound into the session.
javax.net.ssl.SSLSession.invalidate(),invalidates the session.
javax.net.ssl.SSLSession.isValid(),returns whether this session is valid and available for resuming or joining.
"javax.net.ssl.SSLSession.putValue(java.lang.String,java.lang.Object)",binds the specified value object into the session's application layer data with the given name.
javax.net.ssl.SSLSession.removeValue(java.lang.String),removes the object bound to the given name in the session's application layer data.
javax.net.ssl.SSLSessionBindingListener.valueBound(javax.net.ssl.SSLSessionBindingEvent),this is called to notify the listener that it is being bound into an sslsession.
javax.net.ssl.SSLSessionBindingListener.valueUnbound(javax.net.ssl.SSLSessionBindingEvent),this is called to notify the listener that it is being unbound from a sslsession.
javax.net.ssl.SSLSessionContext.getIds(),returns an enumeration of all session id's grouped under this sslsessioncontext.
javax.net.ssl.SSLSessionContext.getSession(byte[]),returns the sslsession bound to the specified session id.
javax.net.ssl.SSLSessionContext.getSessionCacheSize(),returns the size of the cache used for storing sslsession objects grouped under this sslsessioncontext.
javax.net.ssl.SSLSessionContext.getSessionTimeout(),returns the timeout limit of sslsession objects grouped under this sslsessioncontext.
javax.net.ssl.SSLSessionContext.setSessionCacheSize(int),sets the size of the cache used for storing sslsession objects grouped under this sslsessioncontext.
javax.net.ssl.SSLSessionContext.setSessionTimeout(int),sets the timeout limit for sslsession objects grouped under this sslsessioncontext.
"javax.net.ssl.X509KeyManager.chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)",choose an alias to authenticate the client side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
"javax.net.ssl.X509KeyManager.chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)",choose an alias to authenticate the server side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
javax.net.ssl.X509KeyManager.getCertificateChain(java.lang.String),returns the certificate chain associated with the given alias.
"javax.net.ssl.X509KeyManager.getClientAliases(java.lang.String,java.security.Principal[])",get the matching aliases for authenticating the client side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
javax.net.ssl.X509KeyManager.getPrivateKey(java.lang.String),returns the key associated with the given alias.
"javax.net.ssl.X509KeyManager.getServerAliases(java.lang.String,java.security.Principal[])",get the matching aliases for authenticating the server side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
"javax.net.ssl.X509TrustManager.checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)","given the partial or complete certificate chain provided by the peer, build a certificate path to a trusted root and return if it can be validated and is trusted for client ssl authentication based on the authentication type."
"javax.net.ssl.X509TrustManager.checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)","given the partial or complete certificate chain provided by the peer, build a certificate path to a trusted root and return if it can be validated and is trusted for server ssl authentication based on the authentication type."
javax.net.ssl.X509TrustManager.getAcceptedIssuers(),return an array of certificate authority certificates which are trusted for authenticating peers.
javax.net.ssl.CertPathTrustManagerParameters.getParameters(),return a clone of the certpathparameters encapsulated by this class.
javax.net.ssl.ExtendedSSLSession.getLocalSupportedSignatureAlgorithms(),obtains an array of supported signature algorithms that the local side is willing to use.
javax.net.ssl.ExtendedSSLSession.getPeerSupportedSignatureAlgorithms(),obtains an array of supported signature algorithms that the peer is able to use.
javax.net.ssl.ExtendedSSLSession.getRequestedServerNames(),obtains a list containing all sniservernames of the requested server name indication (sni) extension.
javax.net.ssl.HandshakeCompletedEvent.getCipherSuite(),returns the cipher suite in use by the session which was produced by the handshake.
javax.net.ssl.HandshakeCompletedEvent.getLocalCertificates(),returns the certificate(s) that were sent to the peer during handshaking.
javax.net.ssl.HandshakeCompletedEvent.getLocalPrincipal(),returns the principal that was sent to the peer during handshaking.
javax.net.ssl.HandshakeCompletedEvent.getPeerCertificateChain(),returns the identity of the peer which was identified as part of defining the session.
javax.net.ssl.HandshakeCompletedEvent.getPeerCertificates(),returns the identity of the peer which was established as part of defining the session.
javax.net.ssl.HandshakeCompletedEvent.getPeerPrincipal(),returns the identity of the peer which was established as part of defining the session.
javax.net.ssl.HandshakeCompletedEvent.getSession(),returns the session that triggered this event.
javax.net.ssl.HandshakeCompletedEvent.getSocket(),returns the socket which is the source of this event.
javax.net.ssl.HttpsURLConnection.getCipherSuite(),returns the cipher suite in use on this connection.
javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier(),gets the default hostnameverifier that is inherited by new instances of this class.
javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory(),gets the default static sslsocketfactory that is inherited by new instances of this class.
javax.net.ssl.HttpsURLConnection.getHostnameVerifier(),gets the hostnameverifier in place on this instance.
javax.net.ssl.HttpsURLConnection.getLocalCertificates(),returns the certificate(s) that were sent to the server during handshaking.
javax.net.ssl.HttpsURLConnection.getLocalPrincipal(),returns the principal that was sent to the server during handshaking.
javax.net.ssl.HttpsURLConnection.getPeerPrincipal(),returns the server's principal which was established as part of defining the session.
javax.net.ssl.HttpsURLConnection.getServerCertificates(),returns the server's certificate chain which was established as part of defining the session.
javax.net.ssl.HttpsURLConnection.getSSLSocketFactory(),gets the ssl socket factory to be used when creating sockets for secure https url connections.
javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier),sets the default hostnameverifier inherited by a new instance of this class.
javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory),sets the default sslsocketfactory inherited by new instances of this class.
javax.net.ssl.HttpsURLConnection.setHostnameVerifier(javax.net.ssl.HostnameVerifier),sets the hostnameverifier for this instance.
javax.net.ssl.HttpsURLConnection.setSSLSocketFactory(javax.net.ssl.SSLSocketFactory),sets the sslsocketfactory to be used when this instance creates sockets for secure https url connections.
javax.net.ssl.KeyManagerFactory.getAlgorithm(),returns the algorithm name of this keymanagerfactory object.
javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm(),obtains the default keymanagerfactory algorithm name.
javax.net.ssl.KeyManagerFactory.getInstance(java.lang.String),returns a keymanagerfactory object that acts as a factory for key managers.
"javax.net.ssl.KeyManagerFactory.getInstance(java.lang.String,java.lang.String)",returns a keymanagerfactory object that acts as a factory for key managers.
"javax.net.ssl.KeyManagerFactory.getInstance(java.lang.String,java.security.Provider)",returns a keymanagerfactory object that acts as a factory for key managers.
javax.net.ssl.KeyManagerFactory.getKeyManagers(),returns one key manager for each type of key material.
javax.net.ssl.KeyManagerFactory.getProvider(),returns the provider of this keymanagerfactory object.
"javax.net.ssl.KeyManagerFactory.init(java.security.KeyStore,char[])",initializes this factory with a source of key material.
javax.net.ssl.KeyManagerFactory.init(javax.net.ssl.ManagerFactoryParameters),initializes this factory with a source of provider-specific key material.
javax.net.ssl.KeyManagerFactorySpi.engineGetKeyManagers(),returns one key manager for each type of key material.
"javax.net.ssl.KeyManagerFactorySpi.engineInit(java.security.KeyStore,char[])",initializes this factory with a source of key material.
javax.net.ssl.KeyManagerFactorySpi.engineInit(javax.net.ssl.ManagerFactoryParameters),initializes this factory with a source of key material.
javax.net.ssl.KeyStoreBuilderParameters.getParameters(),return the unmodifiable list of the keystore.
javax.net.ssl.SNIHostName.createSNIMatcher(java.lang.String),creates an snimatcher object for snihostnames.
javax.net.ssl.SNIHostName.equals(java.lang.Object),compares this server name to the specified object.
javax.net.ssl.SNIHostName.getAsciiName(),returns the standardcharsets.
javax.net.ssl.SNIHostName.hashCode(),returns a hash code value for this snihostname.
javax.net.ssl.SNIHostName.toString(),"returns a string representation of the object, including the dns hostname in this snihostname object."
javax.net.ssl.SNIMatcher.getType(),returns the server name type of this snimatcher object.
javax.net.ssl.SNIMatcher.matches(javax.net.ssl.SNIServerName),attempts to match the given sniservername.
javax.net.ssl.SNIServerName.equals(java.lang.Object),"indicates whether some other object is ""equal to"" this server name."
javax.net.ssl.SNIServerName.getEncoded(),returns a copy of the encoded server name value of this server name.
javax.net.ssl.SNIServerName.getType(),returns the name type of this server name.
javax.net.ssl.SNIServerName.hashCode(),returns a hash code value for this server name.
javax.net.ssl.SNIServerName.toString(),"returns a string representation of this server name, including the server name type and the encoded server name value in this sniservername object."
javax.net.ssl.SSLContext.createSSLEngine(),creates a new sslengine using this context.
"javax.net.ssl.SSLContext.createSSLEngine(java.lang.String,int)",creates a new sslengine using this context using advisory peer information.
javax.net.ssl.SSLContext.getClientSessionContext(),"returns the client session context, which represents the set of ssl sessions available for use during the handshake phase of client-side ssl sockets."
javax.net.ssl.SSLContext.getDefault(),returns the default ssl context.
javax.net.ssl.SSLContext.getDefaultSSLParameters(),returns a copy of the sslparameters indicating the default settings for this ssl context.
javax.net.ssl.SSLContext.getInstance(java.lang.String),returns a sslcontext object that implements the specified secure socket protocol.
"javax.net.ssl.SSLContext.getInstance(java.lang.String,java.lang.String)",returns a sslcontext object that implements the specified secure socket protocol.
"javax.net.ssl.SSLContext.getInstance(java.lang.String,java.security.Provider)",returns a sslcontext object that implements the specified secure socket protocol.
javax.net.ssl.SSLContext.getProtocol(),returns the protocol name of this sslcontext object.
javax.net.ssl.SSLContext.getProvider(),returns the provider of this sslcontext object.
javax.net.ssl.SSLContext.getServerSessionContext(),"returns the server session context, which represents the set of ssl sessions available for use during the handshake phase of server-side ssl sockets."
javax.net.ssl.SSLContext.getServerSocketFactory(),returns a serversocketfactory object for this context.
javax.net.ssl.SSLContext.getSocketFactory(),returns a socketfactory object for this context.
javax.net.ssl.SSLContext.getSupportedSSLParameters(),returns a copy of the sslparameters indicating the supported settings for this ssl context.
"javax.net.ssl.SSLContext.init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)",initializes this context.
javax.net.ssl.SSLContext.setDefault(javax.net.ssl.SSLContext),sets the default ssl context.
javax.net.ssl.SSLContextSpi.engineCreateSSLEngine(),creates a new sslengine using this context.
"javax.net.ssl.SSLContextSpi.engineCreateSSLEngine(java.lang.String,int)",creates a sslengine using this context.
javax.net.ssl.SSLContextSpi.engineGetClientSessionContext(),returns a client sslsessioncontext object for this context.
javax.net.ssl.SSLContextSpi.engineGetDefaultSSLParameters(),returns a copy of the sslparameters indicating the default settings for this ssl context.
javax.net.ssl.SSLContextSpi.engineGetServerSessionContext(),returns a server sslsessioncontext object for this context.
javax.net.ssl.SSLContextSpi.engineGetServerSocketFactory(),returns a serversocketfactory object for this context.
javax.net.ssl.SSLContextSpi.engineGetSocketFactory(),returns a socketfactory object for this context.
javax.net.ssl.SSLContextSpi.engineGetSupportedSSLParameters(),returns a copy of the sslparameters indicating the maximum supported settings for this ssl context.
"javax.net.ssl.SSLContextSpi.engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)",initializes this context.
javax.net.ssl.SSLEngine.beginHandshake(),initiates handshaking (initial or renegotiation) on this sslengine.
javax.net.ssl.SSLEngine.closeInbound(),signals that no more inbound network data will be sent to this sslengine.
javax.net.ssl.SSLEngine.closeOutbound(),signals that no more outbound application data will be sent on this sslengine.
javax.net.ssl.SSLEngine.getDelegatedTask(),returns a delegated runnable task for this sslengine.
javax.net.ssl.SSLEngine.getEnabledCipherSuites(),returns the names of the ssl cipher suites which are currently enabled for use on this engine.
javax.net.ssl.SSLEngine.getEnabledProtocols(),returns the names of the protocol versions which are currently enabled for use with this sslengine.
javax.net.ssl.SSLEngine.getEnableSessionCreation(),returns true if new ssl sessions may be established by this engine.
javax.net.ssl.SSLEngine.getHandshakeSession(),returns the sslsession being constructed during a ssl/tls handshake.
javax.net.ssl.SSLEngine.getHandshakeStatus(),returns the current handshake status for this sslengine.
javax.net.ssl.SSLEngine.getNeedClientAuth(),returns true if the engine will require client authentication.
javax.net.ssl.SSLEngine.getPeerHost(),returns the host name of the peer.
javax.net.ssl.SSLEngine.getPeerPort(),returns the port number of the peer.
javax.net.ssl.SSLEngine.getSession(),returns the sslsession in use in this sslengine.
javax.net.ssl.SSLEngine.getSSLParameters(),returns the sslparameters in effect for this sslengine.
javax.net.ssl.SSLEngine.getSupportedCipherSuites(),returns the names of the cipher suites which could be enabled for use on this engine.
javax.net.ssl.SSLEngine.getSupportedProtocols(),returns the names of the protocols which could be enabled for use with this sslengine.
javax.net.ssl.SSLEngine.getUseClientMode(),returns true if the engine is set to use client mode when handshaking.
javax.net.ssl.SSLEngine.getWantClientAuth(),returns true if the engine will request client authentication.
javax.net.ssl.SSLEngine.isInboundDone(),"returns whether unwrap(bytebuffer, bytebuffer) will accept any more inbound data messages."
javax.net.ssl.SSLEngine.isOutboundDone(),"returns whether wrap(bytebuffer, bytebuffer) will produce any more outbound data messages."
javax.net.ssl.SSLEngine.setEnabledCipherSuites(java.lang.String[]),sets the cipher suites enabled for use on this engine.
javax.net.ssl.SSLEngine.setEnabledProtocols(java.lang.String[]),set the protocol versions enabled for use on this engine.
javax.net.ssl.SSLEngine.setEnableSessionCreation(boolean),controls whether new ssl sessions may be established by this engine.
javax.net.ssl.SSLEngine.setNeedClientAuth(boolean),configures the engine to require client authentication.
javax.net.ssl.SSLEngine.setSSLParameters(javax.net.ssl.SSLParameters),applies sslparameters to this engine.
javax.net.ssl.SSLEngine.setUseClientMode(boolean),configures the engine to use client (or server) mode when handshaking.
javax.net.ssl.SSLEngine.setWantClientAuth(boolean),configures the engine to request client authentication.
"javax.net.ssl.SSLEngine.unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)",attempts to decode ssl/tls network data into a plaintext application data buffer.
"javax.net.ssl.SSLEngine.unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])",attempts to decode ssl/tls network data into a sequence of plaintext application data buffers.
"javax.net.ssl.SSLEngine.unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)",attempts to decode ssl/tls network data into a subsequence of plaintext application data buffers.
"javax.net.ssl.SSLEngine.wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)",attempts to encode a buffer of plaintext application data into ssl/tls network data.
"javax.net.ssl.SSLEngine.wrap(java.nio.ByteBuffer[],java.nio.ByteBuffer)",attempts to encode plaintext bytes from a sequence of data buffers into ssl/tls network data.
"javax.net.ssl.SSLEngine.wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)",attempts to encode plaintext bytes from a subsequence of data buffers into ssl/tls network data.
javax.net.ssl.SSLEngineResult.bytesConsumed(),returns the number of bytes consumed from the input buffer.
javax.net.ssl.SSLEngineResult.bytesProduced(),returns the number of bytes written to the output buffer.
javax.net.ssl.SSLEngineResult.getHandshakeStatus(),gets the handshake status of this sslengine operation.
javax.net.ssl.SSLEngineResult.getStatus(),gets the return value of this sslengine operation.
javax.net.ssl.SSLEngineResult.toString(),returns a string representation of this object.
javax.net.ssl.SSLParameters.getAlgorithmConstraints(),returns the cryptographic algorithm constraints.
javax.net.ssl.SSLParameters.getCipherSuites(),returns a copy of the array of ciphersuites or null if none have been set.
javax.net.ssl.SSLParameters.getEndpointIdentificationAlgorithm(),gets the endpoint identification algorithm.
javax.net.ssl.SSLParameters.getNeedClientAuth(),returns whether client authentication should be required.
javax.net.ssl.SSLParameters.getProtocols(),returns a copy of the array of protocols or null if none have been set.
javax.net.ssl.SSLParameters.getServerNames(),"returns a list containing all sniservernames of the server name indication (sni) parameter, or null if none has been set."
javax.net.ssl.SSLParameters.getSNIMatchers(),"returns a collection containing all snimatchers of the server name indication (sni) parameter, or null if none has been set."
javax.net.ssl.SSLParameters.getUseCipherSuitesOrder(),returns whether the local cipher suites preference should be honored.
javax.net.ssl.SSLParameters.getWantClientAuth(),returns whether client authentication should be requested.
javax.net.ssl.SSLParameters.setAlgorithmConstraints(java.security.AlgorithmConstraints),"sets the cryptographic algorithm constraints, which will be used in addition to any configured by the runtime environment."
javax.net.ssl.SSLParameters.setCipherSuites(java.lang.String[]),sets the array of ciphersuites.
javax.net.ssl.SSLParameters.setEndpointIdentificationAlgorithm(java.lang.String),sets the endpoint identification algorithm.
javax.net.ssl.SSLParameters.setNeedClientAuth(boolean),sets whether client authentication should be required.
javax.net.ssl.SSLParameters.setProtocols(java.lang.String[]),sets the array of protocols.
javax.net.ssl.SSLParameters.setServerNames(java.util.List<javax.net.ssl.SNIServerName>),sets the desired sniservernames of the server name indication (sni) parameter.
javax.net.ssl.SSLParameters.setSNIMatchers(java.util.Collection<javax.net.ssl.SNIMatcher>),sets the snimatchers of the server name indication (sni) parameter.
javax.net.ssl.SSLParameters.setUseCipherSuitesOrder(boolean),sets whether the local cipher suites preference should be honored.
javax.net.ssl.SSLParameters.setWantClientAuth(boolean),sets whether client authentication should be requested.
javax.net.ssl.SSLServerSocket.getEnabledCipherSuites(),returns the list of cipher suites which are currently enabled for use by newly accepted connections.
javax.net.ssl.SSLServerSocket.getEnabledProtocols(),returns the names of the protocols which are currently enabled for use by the newly accepted connections.
javax.net.ssl.SSLServerSocket.getEnableSessionCreation(),returns true if new ssl sessions may be established by the sockets which are created from this server socket.
javax.net.ssl.SSLServerSocket.getNeedClientAuth(),returns true if client authentication will be required on newly accepted server-mode sslsockets.
javax.net.ssl.SSLServerSocket.getSSLParameters(),returns the sslparameters in effect for newly accepted connections.
javax.net.ssl.SSLServerSocket.getSupportedCipherSuites(),returns the names of the cipher suites which could be enabled for use on an ssl connection.
javax.net.ssl.SSLServerSocket.getSupportedProtocols(),returns the names of the protocols which could be enabled for use.
javax.net.ssl.SSLServerSocket.getUseClientMode(),returns true if accepted connections will be in ssl client mode.
javax.net.ssl.SSLServerSocket.getWantClientAuth(),returns true if client authentication will be requested on newly accepted server-mode connections.
javax.net.ssl.SSLServerSocket.setEnabledCipherSuites(java.lang.String[]),sets the cipher suites enabled for use by accepted connections.
javax.net.ssl.SSLServerSocket.setEnabledProtocols(java.lang.String[]),controls which particular protocols are enabled for use by accepted connections.
javax.net.ssl.SSLServerSocket.setEnableSessionCreation(boolean),controls whether new ssl sessions may be established by the sockets which are created from this server socket.
javax.net.ssl.SSLServerSocket.setNeedClientAuth(boolean),controls whether accepted server-mode sslsockets will be initially configured to require client authentication.
javax.net.ssl.SSLServerSocket.setSSLParameters(javax.net.ssl.SSLParameters),applies sslparameters to newly accepted connections.
javax.net.ssl.SSLServerSocket.setUseClientMode(boolean),"controls whether accepted connections are in the (default) ssl server mode, or the ssl client mode."
javax.net.ssl.SSLServerSocket.setWantClientAuth(boolean),controls whether accepted server-mode sslsockets will be initially configured to request client authentication.
javax.net.ssl.SSLServerSocketFactory.getDefault(),returns the default ssl server socket factory.
javax.net.ssl.SSLServerSocketFactory.getDefaultCipherSuites(),returns the list of cipher suites which are enabled by default.
javax.net.ssl.SSLServerSocketFactory.getSupportedCipherSuites(),returns the names of the cipher suites which could be enabled for use on an ssl connection created by this factory.
javax.net.ssl.SSLSessionBindingEvent.getName(),"returns the name to which the object is being bound, or the name from which the object is being unbound."
javax.net.ssl.SSLSessionBindingEvent.getSession(),returns the sslsession into which the listener is being bound or from which the listener is being unbound.
javax.net.ssl.SSLSocket.addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener),registers an event listener to receive notifications that an ssl handshake has completed on this connection.
javax.net.ssl.SSLSocket.getEnabledCipherSuites(),returns the names of the ssl cipher suites which are currently enabled for use on this connection.
javax.net.ssl.SSLSocket.getEnabledProtocols(),returns the names of the protocol versions which are currently enabled for use on this connection.
javax.net.ssl.SSLSocket.getEnableSessionCreation(),returns true if new ssl sessions may be established by this socket.
javax.net.ssl.SSLSocket.getHandshakeSession(),returns the sslsession being constructed during a ssl/tls handshake.
javax.net.ssl.SSLSocket.getNeedClientAuth(),returns true if the socket will require client authentication.
javax.net.ssl.SSLSocket.getSession(),returns the ssl session in use by this connection.
javax.net.ssl.SSLSocket.getSSLParameters(),returns the sslparameters in effect for this sslsocket.
javax.net.ssl.SSLSocket.getSupportedCipherSuites(),returns the names of the cipher suites which could be enabled for use on this connection.
javax.net.ssl.SSLSocket.getSupportedProtocols(),returns the names of the protocols which could be enabled for use on an ssl connection.
javax.net.ssl.SSLSocket.getUseClientMode(),returns true if the socket is set to use client mode when handshaking.
javax.net.ssl.SSLSocket.getWantClientAuth(),returns true if the socket will request client authentication.
javax.net.ssl.SSLSocket.removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener),removes a previously registered handshake completion listener.
javax.net.ssl.SSLSocket.setEnabledCipherSuites(java.lang.String[]),sets the cipher suites enabled for use on this connection.
javax.net.ssl.SSLSocket.setEnabledProtocols(java.lang.String[]),sets the protocol versions enabled for use on this connection.
javax.net.ssl.SSLSocket.setEnableSessionCreation(boolean),controls whether new ssl sessions may be established by this socket.
javax.net.ssl.SSLSocket.setNeedClientAuth(boolean),configures the socket to require client authentication.
javax.net.ssl.SSLSocket.setSSLParameters(javax.net.ssl.SSLParameters),applies sslparameters to this socket.
javax.net.ssl.SSLSocket.setUseClientMode(boolean),configures the socket to use client (or server) mode when handshaking.
javax.net.ssl.SSLSocket.setWantClientAuth(boolean),configures the socket to request client authentication.
javax.net.ssl.SSLSocket.startHandshake(),starts an ssl handshake on this connection.
"javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket,java.lang.String,int,boolean)","returns a socket layered over an existing socket connected to the named host, at the given port."
"javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket,java.io.InputStream,boolean)","creates a server mode socket layered over an existing connected socket, and is able to read data which has already been consumed/removed from the socket's underlying inputstream."
javax.net.ssl.SSLSocketFactory.getDefault(),returns the default ssl socket factory.
javax.net.ssl.SSLSocketFactory.getDefaultCipherSuites(),returns the list of cipher suites which are enabled by default.
javax.net.ssl.SSLSocketFactory.getSupportedCipherSuites(),returns the names of the cipher suites which could be enabled for use on an ssl connection.
javax.net.ssl.TrustManagerFactory.getAlgorithm(),returns the algorithm name of this trustmanagerfactory object.
javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm(),obtains the default trustmanagerfactory algorithm name.
javax.net.ssl.TrustManagerFactory.getInstance(java.lang.String),returns a trustmanagerfactory object that acts as a factory for trust managers.
"javax.net.ssl.TrustManagerFactory.getInstance(java.lang.String,java.lang.String)",returns a trustmanagerfactory object that acts as a factory for trust managers.
"javax.net.ssl.TrustManagerFactory.getInstance(java.lang.String,java.security.Provider)",returns a trustmanagerfactory object that acts as a factory for trust managers.
javax.net.ssl.TrustManagerFactory.getProvider(),returns the provider of this trustmanagerfactory object.
javax.net.ssl.TrustManagerFactory.getTrustManagers(),returns one trust manager for each type of trust material.
javax.net.ssl.TrustManagerFactory.init(java.security.KeyStore),initializes this factory with a source of certificate authorities and related trust material.
javax.net.ssl.TrustManagerFactory.init(javax.net.ssl.ManagerFactoryParameters),initializes this factory with a source of provider-specific trust material.
javax.net.ssl.TrustManagerFactorySpi.engineGetTrustManagers(),returns one trust manager for each type of trust material.
javax.net.ssl.TrustManagerFactorySpi.engineInit(java.security.KeyStore),initializes this factory with a source of certificate authorities and related trust material.
javax.net.ssl.TrustManagerFactorySpi.engineInit(javax.net.ssl.ManagerFactoryParameters),initializes this factory with a source of provider-specific key material.
"javax.net.ssl.X509ExtendedKeyManager.chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)",choose an alias to authenticate the client side of an sslengine connection given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
"javax.net.ssl.X509ExtendedKeyManager.chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)",choose an alias to authenticate the server side of an sslengine connection given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
"javax.net.ssl.X509ExtendedTrustManager.checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)","given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
"javax.net.ssl.X509ExtendedTrustManager.checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)","given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
"javax.net.ssl.X509ExtendedTrustManager.checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)","given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
"javax.net.ssl.X509ExtendedTrustManager.checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)","given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
javax.net.ssl.SSLEngineResult.HandshakeStatus.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.net.ssl.SSLEngineResult.HandshakeStatus.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.net.ssl.SSLEngineResult.Status.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.net.ssl.SSLEngineResult.Status.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.print.AttributeException.getUnsupportedAttributes(),"returns the array of printing attribute classes for which the print service instance does not support the attribute at all, or null if there are no such attributes."
javax.print.AttributeException.getUnsupportedValues(),"returns the array of printing attributes for which the print service instance supports the attribute but does not support that particular value of the attribute, or null if there are no such attribute values."
javax.print.CancelablePrintJob.cancel(),stops further processing of a print job.
javax.print.Doc.getAttributes(),obtains the set of printing attributes for this doc object.
javax.print.Doc.getDocFlavor(),determines the doc flavor in which this doc object will supply its piece of print data.
javax.print.Doc.getPrintData(),obtains the print data representation object that contains this doc object's piece of print data in the format corresponding to the supported doc flavor.
javax.print.Doc.getReaderForText(),obtains a reader for extracting character print data from this doc.
javax.print.Doc.getStreamForBytes(),obtains an input stream for extracting byte print data from this doc.
"javax.print.DocPrintJob.addPrintJobAttributeListener(javax.print.event.PrintJobAttributeListener,javax.print.attribute.PrintJobAttributeSet)",registers a listener for changes in the specified attributes.
javax.print.DocPrintJob.addPrintJobListener(javax.print.event.PrintJobListener),registers a listener for event occurring during this print job.
javax.print.DocPrintJob.getAttributes(),obtains this print job's set of printing attributes.
javax.print.DocPrintJob.getPrintService(),determines the printservice object to which this print job object is bound.
"javax.print.DocPrintJob.print(javax.print.Doc,javax.print.attribute.PrintRequestAttributeSet)",prints a document with the specified job attributes.
javax.print.DocPrintJob.removePrintJobAttributeListener(javax.print.event.PrintJobAttributeListener),removes an attribute listener from this print job.
javax.print.DocPrintJob.removePrintJobListener(javax.print.event.PrintJobListener),removes a listener from this print job.
javax.print.FlavorException.getUnsupportedFlavors(),returns the unsupported flavors.
javax.print.MultiDoc.getDoc(),obtain the current doc object.
javax.print.MultiDoc.next(),go to the multidoc object that contains the next doc object in the sequence of doc objects.
"javax.print.MultiDocPrintJob.print(javax.print.MultiDoc,javax.print.attribute.PrintRequestAttributeSet)",print a multidoc with the specified job attributes.
javax.print.MultiDocPrintService.createMultiDocPrintJob(),create a job which can print a multidoc.
javax.print.PrintService.addPrintServiceAttributeListener(javax.print.event.PrintServiceAttributeListener),registers a listener for events on this printservice.
javax.print.PrintService.createPrintJob(),creates and returns a printjob capable of handling data from any of the supported document flavors.
javax.print.PrintService.equals(java.lang.Object),determines if two services are referring to the same underlying service.
javax.print.PrintService.getAttribute(java.lang.Class<T>),gets the value of the single specified service attribute.
javax.print.PrintService.getAttributes(),obtains this print service's set of printer description attributes giving this print service's status.
javax.print.PrintService.getDefaultAttributeValue(java.lang.Class<? extends javax.print.attribute.Attribute>),determines this print service's default printing attribute value in the given category.
javax.print.PrintService.getName(),returns a string name for this print service which may be used by applications to request a particular print service.
javax.print.PrintService.getServiceUIFactory(),returns a factory for ui components which allow users to interact with the service in various roles.
javax.print.PrintService.getSupportedAttributeCategories(),determines the printing attribute categories a client can specify when setting up a job for this print service.
"javax.print.PrintService.getSupportedAttributeValues(java.lang.Class<? extends javax.print.attribute.Attribute>,javax.print.DocFlavor,javax.print.attribute.AttributeSet)",determines the printing attribute values a client can specify in the given category when setting up a job for this print service.
javax.print.PrintService.getSupportedDocFlavors(),determines the print data formats a client can specify when setting up a job for this printservice.
"javax.print.PrintService.getUnsupportedAttributes(javax.print.DocFlavor,javax.print.attribute.AttributeSet)",identifies the attributes that are unsupported for a print request in the context of a particular docflavor.
javax.print.PrintService.hashCode(),this method should be implemented consistently with equals(object).
javax.print.PrintService.isAttributeCategorySupported(java.lang.Class<? extends javax.print.attribute.Attribute>),determines whether a client can specify the given printing attribute category when setting up a job for this print service.
"javax.print.PrintService.isAttributeValueSupported(javax.print.attribute.Attribute,javax.print.DocFlavor,javax.print.attribute.AttributeSet)",determines whether a client can specify the given printing attribute value when setting up a job for this print service.
javax.print.PrintService.isDocFlavorSupported(javax.print.DocFlavor),determines if this print service supports a specific docflavor.
javax.print.PrintService.removePrintServiceAttributeListener(javax.print.event.PrintServiceAttributeListener),removes the print-service listener from this print service.
javax.print.URIException.getReason(),return the reason for the event.
javax.print.URIException.getUnsupportedURI(),return the uri.
javax.print.DocFlavor.equals(java.lang.Object),determines if this doc flavor object is equal to the given object.
javax.print.DocFlavor.getMediaSubtype(),returns this doc flavor object's media subtype (from the mime type).
javax.print.DocFlavor.getMediaType(),returns this doc flavor object's media type (from the mime type).
javax.print.DocFlavor.getMimeType(),returns this doc flavor object's mime type string based on the canonical form.
javax.print.DocFlavor.getParameter(java.lang.String),returns a string representing a mime parameter.
javax.print.DocFlavor.getRepresentationClassName(),returns the name of this doc flavor object's representation class.
javax.print.DocFlavor.hashCode(),returns a hash code for this doc flavor object.
javax.print.DocFlavor.toString(),converts this docflavor to a string.
javax.print.PrintServiceLookup.getDefaultPrintService(),not called directly by applications.
"javax.print.PrintServiceLookup.getMultiDocPrintServices(javax.print.DocFlavor[],javax.print.attribute.AttributeSet)",not called directly by applications.
"javax.print.PrintServiceLookup.getPrintServices(javax.print.DocFlavor,javax.print.attribute.AttributeSet)",locates services that can be positively confirmed to support the combination of attributes and docflavors specified.
javax.print.PrintServiceLookup.getPrintServices(),not called directly by applications.
javax.print.PrintServiceLookup.lookupDefaultPrintService(),locates the default print service for this environment.
"javax.print.PrintServiceLookup.lookupMultiDocPrintServices(javax.print.DocFlavor[],javax.print.attribute.AttributeSet)",locates multidoc print services capable of printing multidocs containing all the specified doc flavors.
"javax.print.PrintServiceLookup.lookupPrintServices(javax.print.DocFlavor,javax.print.attribute.AttributeSet)",locates print services capable of printing the specified docflavor.
javax.print.PrintServiceLookup.registerService(javax.print.PrintService),allows an application to directly register an instance of a class which implements a print service.
javax.print.PrintServiceLookup.registerServiceProvider(javax.print.PrintServiceLookup),allows an application to explicitly register a class that implements lookup services.
"javax.print.ServiceUI.printDialog(java.awt.GraphicsConfiguration,int,int,javax.print.PrintService[],javax.print.PrintService,javax.print.DocFlavor,javax.print.attribute.PrintRequestAttributeSet)",presents a dialog to the user for selecting a print service (printer).
"javax.print.ServiceUIFactory.getUI(int,java.lang.String)",get a ui object which may be cast to the requested ui type by the application and used in its user interface.
javax.print.ServiceUIFactory.getUIClassNamesForRole(int),given a ui role obtained from this factory obtain the ui types available from this factory which implement this role.
javax.print.SimpleDoc.getAttributes(),obtains the set of printing attributes for this doc object.
javax.print.SimpleDoc.getDocFlavor(),determines the doc flavor in which this doc object will supply its piece of print data.
javax.print.SimpleDoc.getReaderForText(),obtains a reader for extracting character print data from this doc.
javax.print.SimpleDoc.getStreamForBytes(),obtains an input stream for extracting byte print data from this doc.
javax.print.StreamPrintService.dispose(),disposes this streamprintservice.
javax.print.StreamPrintService.getOutputFormat(),returns the document format emitted by this print service.
javax.print.StreamPrintService.getOutputStream(),gets the output stream.
javax.print.StreamPrintService.isDisposed(),returns a boolean indicating whether or not this streamprintservice has been disposed.
javax.print.StreamPrintServiceFactory.getOutputFormat(),queries the factory for the document format that is emitted by printers obtained from this factory.
javax.print.StreamPrintServiceFactory.getPrintService(java.io.OutputStream),returns a streamprintservice that can print to the specified output stream.
javax.print.StreamPrintServiceFactory.getSupportedDocFlavors(),queries the factory for the document flavors that can be accepted by printers obtained from this factory.
"javax.print.StreamPrintServiceFactory.lookupStreamPrintServiceFactories(javax.print.DocFlavor,java.lang.String)",locates factories for print services that can be used with a print job to output a stream of data in the format specified by outputmimetype.
javax.print.attribute.Attribute.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value when it is added to an attribute set."
javax.print.attribute.Attribute.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.AttributeSet.add(javax.print.attribute.Attribute),"adds the specified attribute to this attribute set if it is not already present, first removing any existing value in the same attribute category as the specified attribute value."
javax.print.attribute.AttributeSet.addAll(javax.print.attribute.AttributeSet),adds all of the elements in the specified set to this attribute.
javax.print.attribute.AttributeSet.clear(),removes all attributes from this attribute set.
javax.print.attribute.AttributeSet.containsKey(java.lang.Class<?>),returns true if this attribute set contains an attribute for the specified category.
javax.print.attribute.AttributeSet.containsValue(javax.print.attribute.Attribute),returns true if this attribute set contains the given attribute value.
javax.print.attribute.AttributeSet.equals(java.lang.Object),compares the specified object with this attribute set for equality.
javax.print.attribute.AttributeSet.get(java.lang.Class<?>),returns the attribute value which this attribute set contains in the given attribute category.
javax.print.attribute.AttributeSet.hashCode(),returns the hash code value for this attribute set.
javax.print.attribute.AttributeSet.isEmpty(),returns true if this attribute set contains no attributes.
javax.print.attribute.AttributeSet.remove(java.lang.Class<?>),removes any attribute for this category from this attribute set if present.
javax.print.attribute.AttributeSet.remove(javax.print.attribute.Attribute),removes the specified attribute from this attribute set if present.
javax.print.attribute.AttributeSet.size(),returns the number of attributes in this attribute set.
javax.print.attribute.AttributeSet.toArray(),returns an array of the attributes contained in this set.
javax.print.attribute.DocAttributeSet.add(javax.print.attribute.Attribute),"adds the specified attribute value to this attribute set if it is not already present, first removing any existing value in the same attribute category as the specified attribute value (optional operation)."
javax.print.attribute.DocAttributeSet.addAll(javax.print.attribute.AttributeSet),adds all of the elements in the specified set to this attribute.
javax.print.attribute.PrintJobAttributeSet.add(javax.print.attribute.Attribute),"adds the specified attribute value to this attribute set if it is not already present, first removing any existing value in the same attribute category as the specified attribute value (optional operation)."
javax.print.attribute.PrintJobAttributeSet.addAll(javax.print.attribute.AttributeSet),adds all of the elements in the specified set to this attribute.
javax.print.attribute.PrintRequestAttributeSet.add(javax.print.attribute.Attribute),"adds the specified attribute value to this attribute set if it is not already present, first removing any existing value in the same attribute category as the specified attribute value (optional operation)."
javax.print.attribute.PrintRequestAttributeSet.addAll(javax.print.attribute.AttributeSet),adds all of the elements in the specified set to this attribute.
javax.print.attribute.PrintServiceAttributeSet.add(javax.print.attribute.Attribute),"adds the specified attribute value to this attribute set if it is not already present, first removing any existing value in the same attribute category as the specified attribute value (optional operation)."
javax.print.attribute.PrintServiceAttributeSet.addAll(javax.print.attribute.AttributeSet),adds all of the elements in the specified set to this attribute.
javax.print.attribute.AttributeSetUtilities.synchronizedView(javax.print.attribute.AttributeSet),creates a synchronized view of the given attribute set.
javax.print.attribute.AttributeSetUtilities.synchronizedView(javax.print.attribute.DocAttributeSet),creates a synchronized view of the given doc attribute set.
javax.print.attribute.AttributeSetUtilities.synchronizedView(javax.print.attribute.PrintRequestAttributeSet),creates a synchronized view of the given print request attribute set.
javax.print.attribute.AttributeSetUtilities.synchronizedView(javax.print.attribute.PrintJobAttributeSet),creates a synchronized view of the given print job attribute set.
javax.print.attribute.AttributeSetUtilities.synchronizedView(javax.print.attribute.PrintServiceAttributeSet),creates a synchronized view of the given print service attribute set.
javax.print.attribute.AttributeSetUtilities.unmodifiableView(javax.print.attribute.AttributeSet),creates an unmodifiable view of the given attribute set.
javax.print.attribute.AttributeSetUtilities.unmodifiableView(javax.print.attribute.DocAttributeSet),creates an unmodifiable view of the given doc attribute set.
javax.print.attribute.AttributeSetUtilities.unmodifiableView(javax.print.attribute.PrintRequestAttributeSet),creates an unmodifiable view of the given print request attribute set.
javax.print.attribute.AttributeSetUtilities.unmodifiableView(javax.print.attribute.PrintJobAttributeSet),creates an unmodifiable view of the given print job attribute set.
javax.print.attribute.AttributeSetUtilities.unmodifiableView(javax.print.attribute.PrintServiceAttributeSet),creates an unmodifiable view of the given print service attribute set.
"javax.print.attribute.AttributeSetUtilities.verifyAttributeCategory(java.lang.Object,java.lang.Class<?>)","verify that the given object is a class that implements the given interface, which is assumed to be interface attribute or a subinterface thereof."
"javax.print.attribute.AttributeSetUtilities.verifyAttributeValue(java.lang.Object,java.lang.Class<?>)","verify that the given object is an instance of the given interface, which is assumed to be interface attribute or a subinterface thereof."
"javax.print.attribute.AttributeSetUtilities.verifyCategoryForValue(java.lang.Class<?>,javax.print.attribute.Attribute)",verify that the given attribute category object is equal to the category of the given attribute value object.
javax.print.attribute.DateTimeSyntax.equals(java.lang.Object),returns whether this date-time attribute is equivalent to the passed in object.
javax.print.attribute.DateTimeSyntax.getValue(),returns this date-time attribute's java.
javax.print.attribute.DateTimeSyntax.hashCode(),returns a hash code value for this date-time attribute.
javax.print.attribute.DateTimeSyntax.toString(),returns a string value corresponding to this date-time attribute.
javax.print.attribute.EnumSyntax.clone(),"returns a clone of this enumeration value, which to preserve the semantics of enumeration values is the same object as this enumeration value."
javax.print.attribute.EnumSyntax.getEnumValueTable(),returns the enumeration value table for this enumeration value's enumeration class.
javax.print.attribute.EnumSyntax.getOffset(),returns the lowest integer value used by this enumeration value's enumeration class.
javax.print.attribute.EnumSyntax.getStringTable(),returns the string table for this enumeration value's enumeration class.
javax.print.attribute.EnumSyntax.getValue(),returns this enumeration value's integer value.
javax.print.attribute.EnumSyntax.hashCode(),returns a hash code value for this enumeration value.
javax.print.attribute.EnumSyntax.readResolve(),"during object input, convert this deserialized enumeration instance to the proper enumeration value defined in the enumeration attribute class."
javax.print.attribute.EnumSyntax.toString(),returns a string value corresponding to this enumeration value.
javax.print.attribute.HashAttributeSet.add(javax.print.attribute.Attribute),"adds the specified attribute to this attribute set if it is not already present, first removing any existing in the same attribute category as the specified attribute value."
javax.print.attribute.HashAttributeSet.addAll(javax.print.attribute.AttributeSet),adds all of the elements in the specified set to this attribute.
javax.print.attribute.HashAttributeSet.clear(),removes all attributes from this attribute set.
javax.print.attribute.HashAttributeSet.containsKey(java.lang.Class<?>),returns true if this attribute set contains an attribute for the specified category.
javax.print.attribute.HashAttributeSet.containsValue(javax.print.attribute.Attribute),returns true if this attribute set contains the given attribute.
javax.print.attribute.HashAttributeSet.equals(java.lang.Object),compares the specified object with this attribute set for equality.
javax.print.attribute.HashAttributeSet.get(java.lang.Class<?>),returns the attribute value which this attribute set contains in the given attribute category.
javax.print.attribute.HashAttributeSet.hashCode(),returns the hash code value for this attribute set.
javax.print.attribute.HashAttributeSet.isEmpty(),returns true if this attribute set contains no attributes.
javax.print.attribute.HashAttributeSet.remove(java.lang.Class<?>),removes any attribute for this category from this attribute set if present.
javax.print.attribute.HashAttributeSet.remove(javax.print.attribute.Attribute),removes the specified attribute from this attribute set if present.
javax.print.attribute.HashAttributeSet.size(),returns the number of attributes in this attribute set.
javax.print.attribute.IntegerSyntax.equals(java.lang.Object),returns whether this integer attribute is equivalent to the passed in object.
javax.print.attribute.IntegerSyntax.getValue(),returns this integer attribute's integer value.
javax.print.attribute.IntegerSyntax.hashCode(),returns a hash code value for this integer attribute.
javax.print.attribute.IntegerSyntax.toString(),returns a string value corresponding to this integer attribute.
javax.print.attribute.ResolutionSyntax.equals(java.lang.Object),returns whether this resolution attribute is equivalent to the passed in object.
javax.print.attribute.ResolutionSyntax.getCrossFeedResolution(int),returns this resolution attribute's cross feed direction resolution in the given units.
javax.print.attribute.ResolutionSyntax.getCrossFeedResolutionDphi(),returns this resolution attribute's cross feed direction resolution in units of dphi.
javax.print.attribute.ResolutionSyntax.getFeedResolution(int),returns this resolution attribute's feed direction resolution in the given units.
javax.print.attribute.ResolutionSyntax.getFeedResolutionDphi(),returns this resolution attribute's feed direction resolution in units of dphi.
javax.print.attribute.ResolutionSyntax.getResolution(int),get this resolution attribute's resolution values in the given units.
javax.print.attribute.ResolutionSyntax.hashCode(),returns a hash code value for this resolution attribute.
javax.print.attribute.ResolutionSyntax.lessThanOrEquals(javax.print.attribute.ResolutionSyntax),determine whether this resolution attribute's value is less than or equal to the given resolution attribute's value.
"javax.print.attribute.ResolutionSyntax.toString(int,java.lang.String)",returns a string version of this resolution attribute in the given units.
javax.print.attribute.ResolutionSyntax.toString(),returns a string version of this resolution attribute.
javax.print.attribute.SetOfIntegerSyntax.contains(int),determine if this set-of-integer attribute contains the given value.
javax.print.attribute.SetOfIntegerSyntax.contains(javax.print.attribute.IntegerSyntax),determine if this set-of-integer attribute contains the given integer attribute's value.
javax.print.attribute.SetOfIntegerSyntax.equals(java.lang.Object),returns whether this set-of-integer attribute is equivalent to the passed in object.
javax.print.attribute.SetOfIntegerSyntax.getMembers(),obtain this set-of-integer attribute's members in canonical array form.
javax.print.attribute.SetOfIntegerSyntax.hashCode(),returns a hash code value for this set-of-integer attribute.
javax.print.attribute.SetOfIntegerSyntax.next(int),determine the smallest integer in this set-of-integer attribute that is greater than the given value.
javax.print.attribute.SetOfIntegerSyntax.toString(),returns a string value corresponding to this set-of-integer attribute.
javax.print.attribute.Size2DSyntax.equals(java.lang.Object),returns whether this two-dimensional size attribute is equivalent to the passed in object.
javax.print.attribute.Size2DSyntax.getSize(int),get this two-dimensional size attribute's dimensions in the given units as floating-point values.
javax.print.attribute.Size2DSyntax.getX(int),returns this two-dimensional size attribute's x dimension in the given units as a floating-point value.
javax.print.attribute.Size2DSyntax.getXMicrometers(),returns this two-dimensional size attribute's x dimension in units of micrometers (µm).
javax.print.attribute.Size2DSyntax.getY(int),returns this two-dimensional size attribute's y dimension in the given units as a floating-point value.
javax.print.attribute.Size2DSyntax.getYMicrometers(),returns this two-dimensional size attribute's y dimension in units of micrometers (µm).
javax.print.attribute.Size2DSyntax.hashCode(),returns a hash code value for this two-dimensional size attribute.
"javax.print.attribute.Size2DSyntax.toString(int,java.lang.String)",returns a string version of this two-dimensional size attribute in the given units.
javax.print.attribute.Size2DSyntax.toString(),returns a string version of this two-dimensional size attribute.
javax.print.attribute.TextSyntax.equals(java.lang.Object),returns whether this text attribute is equivalent to the passed in object.
javax.print.attribute.TextSyntax.getLocale(),returns this text attribute's text string's natural language (locale).
javax.print.attribute.TextSyntax.getValue(),returns this text attribute's text string.
javax.print.attribute.TextSyntax.hashCode(),returns a hashcode for this text attribute.
javax.print.attribute.TextSyntax.toString(),returns a string identifying this text attribute.
javax.print.attribute.URISyntax.equals(java.lang.Object),returns whether this uri attribute is equivalent to the passed in object.
javax.print.attribute.URISyntax.getURI(),returns this uri attribute's uri value.
javax.print.attribute.URISyntax.hashCode(),returns a hashcode for this uri attribute.
javax.print.attribute.URISyntax.toString(),returns a string identifying this uri attribute.
javax.print.attribute.standard.Chromaticity.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.Chromaticity.getEnumValueTable(),returns the enumeration value table for class chromaticity.
javax.print.attribute.standard.Chromaticity.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.Chromaticity.getStringTable(),returns the string table for class chromaticity.
javax.print.attribute.standard.ColorSupported.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.ColorSupported.getEnumValueTable(),returns the enumeration value table for class colorsupported.
javax.print.attribute.standard.ColorSupported.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.ColorSupported.getStringTable(),returns the string table for class colorsupported.
javax.print.attribute.standard.Compression.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.Compression.getEnumValueTable(),returns the enumeration value table for class compression.
javax.print.attribute.standard.Compression.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.Compression.getStringTable(),returns the string table for class compression.
javax.print.attribute.standard.Copies.equals(java.lang.Object),returns whether this copies attribute is equivalent to the passed in object.
javax.print.attribute.standard.Copies.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.Copies.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.CopiesSupported.equals(java.lang.Object),returns whether this copies supported attribute is equivalent to the passed in object.
javax.print.attribute.standard.CopiesSupported.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.CopiesSupported.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.DateTimeAtCompleted.equals(java.lang.Object),returns whether this date-time at completed attribute is equivalent to the passed in object.
javax.print.attribute.standard.DateTimeAtCompleted.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.DateTimeAtCompleted.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.DateTimeAtCreation.equals(java.lang.Object),returns whether this date-time at creation attribute is equivalent to the passed in object.
javax.print.attribute.standard.DateTimeAtCreation.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.DateTimeAtCreation.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.DateTimeAtProcessing.equals(java.lang.Object),returns whether this date-time at processing attribute is equivalent to the passed in object.
javax.print.attribute.standard.DateTimeAtProcessing.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.DateTimeAtProcessing.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.Destination.equals(java.lang.Object),returns whether this destination attribute is equivalent to the passed in object.
javax.print.attribute.standard.Destination.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.Destination.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.DialogTypeSelection.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.DialogTypeSelection.getEnumValueTable(),returns the enumeration value table for class dialogtypeselection.
javax.print.attribute.standard.DialogTypeSelection.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.DialogTypeSelection.getStringTable(),returns the string table for class dialogtypeselection.
javax.print.attribute.standard.DocumentName.equals(java.lang.Object),returns whether this document name attribute is equivalent to the passed in object.
javax.print.attribute.standard.DocumentName.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.DocumentName.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.Fidelity.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.Fidelity.getEnumValueTable(),returns the enumeration value table for class fidelity.
javax.print.attribute.standard.Fidelity.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.Fidelity.getStringTable(),returns the string table for class fidelity.
javax.print.attribute.standard.Finishings.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.Finishings.getEnumValueTable(),returns the enumeration value table for class finishings.
javax.print.attribute.standard.Finishings.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.Finishings.getOffset(),returns the lowest integer value used by class finishings.
javax.print.attribute.standard.Finishings.getStringTable(),returns the string table for class finishings.
javax.print.attribute.standard.JobHoldUntil.equals(java.lang.Object),returns whether this job hold until attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobHoldUntil.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobHoldUntil.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobImpressions.equals(java.lang.Object),returns whether this job impressions attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobImpressions.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobImpressions.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobImpressionsCompleted.equals(java.lang.Object),returns whether this job impressions completed attribute is equivalent tp the passed in object.
javax.print.attribute.standard.JobImpressionsCompleted.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobImpressionsCompleted.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobImpressionsSupported.equals(java.lang.Object),returns whether this job impressions supported attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobImpressionsSupported.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobImpressionsSupported.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobKOctets.equals(java.lang.Object),returns whether this job k octets attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobKOctets.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobKOctets.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobKOctetsProcessed.equals(java.lang.Object),returns whether this job k octets processed attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobKOctetsProcessed.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobKOctetsProcessed.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobKOctetsSupported.equals(java.lang.Object),returns whether this job k octets supported attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobKOctetsSupported.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobKOctetsSupported.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobMediaSheets.equals(java.lang.Object),returns whether this job media sheets attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobMediaSheets.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobMediaSheets.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobMediaSheetsCompleted.equals(java.lang.Object),returns whether this job media sheets completed attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobMediaSheetsCompleted.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobMediaSheetsCompleted.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobMediaSheetsSupported.equals(java.lang.Object),returns whether this job media sheets supported attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobMediaSheetsSupported.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobMediaSheetsSupported.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobMessageFromOperator.equals(java.lang.Object),returns whether this job message from operator attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobMessageFromOperator.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobMessageFromOperator.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobName.equals(java.lang.Object),returns whether this job name attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobName.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobName.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobOriginatingUserName.equals(java.lang.Object),returns whether this job originating user name attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobOriginatingUserName.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobOriginatingUserName.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobPriority.equals(java.lang.Object),returns whether this job priority attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobPriority.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobPriority.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobPrioritySupported.equals(java.lang.Object),returns whether this job priority supported attribute is equivalent to the passed in object.
javax.print.attribute.standard.JobPrioritySupported.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobPrioritySupported.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobSheets.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobSheets.getEnumValueTable(),returns the enumeration value table for class jobsheets.
javax.print.attribute.standard.JobSheets.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobSheets.getStringTable(),returns the string table for class jobsheets.
javax.print.attribute.standard.JobState.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobState.getEnumValueTable(),returns the enumeration value table for class jobstate.
javax.print.attribute.standard.JobState.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobState.getStringTable(),returns the string table for class jobstate.
javax.print.attribute.standard.JobStateReason.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobStateReason.getEnumValueTable(),returns the enumeration value table for class jobstatereason.
javax.print.attribute.standard.JobStateReason.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.JobStateReason.getStringTable(),returns the string table for class jobstatereason.
javax.print.attribute.standard.JobStateReasons.add(javax.print.attribute.standard.JobStateReason),adds the specified element to this job state reasons attribute if it is not already present.
javax.print.attribute.standard.JobStateReasons.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.JobStateReasons.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.Media.equals(java.lang.Object),returns whether this media attribute is equivalent to the passed in object.
javax.print.attribute.standard.Media.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.Media.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.MediaName.getEnumValueTable(),returns the enumeration value table for class mediatray.
javax.print.attribute.standard.MediaName.getStringTable(),returns the string table for class mediatray.
javax.print.attribute.standard.MediaPrintableArea.equals(java.lang.Object),returns whether this media margins attribute is equivalent to the passed in object.
javax.print.attribute.standard.MediaPrintableArea.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.MediaPrintableArea.getHeight(int),get the height of the printable area in the specified units.
javax.print.attribute.standard.MediaPrintableArea.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.MediaPrintableArea.getPrintableArea(int),"get the printable area as an array of 4 values in the order x, y, w, h."
javax.print.attribute.standard.MediaPrintableArea.getWidth(int),get the width of the printable area in the specified units.
javax.print.attribute.standard.MediaPrintableArea.getX(int),get the x location of the origin of the printable area in the specified units.
javax.print.attribute.standard.MediaPrintableArea.getY(int),get the y location of the origin of the printable area in the specified units.
javax.print.attribute.standard.MediaPrintableArea.hashCode(),returns a hash code value for this attribute.
"javax.print.attribute.standard.MediaPrintableArea.toString(int,java.lang.String)",returns a string version of this rectangular size attribute in the given units.
javax.print.attribute.standard.MediaPrintableArea.toString(),returns a string version of this rectangular size attribute in mm.
javax.print.attribute.standard.MediaSize.equals(java.lang.Object),returns whether this media size attribute is equivalent to the passed in object.
"javax.print.attribute.standard.MediaSize.findMedia(float,float,int)",the specified dimensions are used to locate a matching mediasize instance from amongst all the standard mediasize instances.
javax.print.attribute.standard.MediaSize.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.MediaSize.getMediaSizeForName(javax.print.attribute.standard.MediaSizeName),get the mediasize for the specified named media.
javax.print.attribute.standard.MediaSize.getMediaSizeName(),"get the media name, if any, for this size."
javax.print.attribute.standard.MediaSize.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.MediaSizeName.getEnumValueTable(),returns the enumeration value table for class mediasizename.
javax.print.attribute.standard.MediaSizeName.getStringTable(),returns the string table for class mediasizename.
javax.print.attribute.standard.MediaTray.getEnumValueTable(),returns the enumeration value table for class mediatray.
javax.print.attribute.standard.MediaTray.getStringTable(),returns the string table for class mediatray.
javax.print.attribute.standard.MultipleDocumentHandling.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.MultipleDocumentHandling.getEnumValueTable(),returns the enumeration value table for class multipledocumenthandling.
javax.print.attribute.standard.MultipleDocumentHandling.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.MultipleDocumentHandling.getStringTable(),returns the string table for class multipledocumenthandling.
javax.print.attribute.standard.NumberOfDocuments.equals(java.lang.Object),returns whether this number of documents attribute is equivalent to the passed in object.
javax.print.attribute.standard.NumberOfDocuments.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.NumberOfDocuments.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.NumberOfInterveningJobs.equals(java.lang.Object),returns whether this number of intervening jobs attribute is equivalent to the passed in object.
javax.print.attribute.standard.NumberOfInterveningJobs.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.NumberOfInterveningJobs.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.NumberUp.equals(java.lang.Object),returns whether this number up attribute is equivalent to the passed in object.
javax.print.attribute.standard.NumberUp.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.NumberUp.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.NumberUpSupported.equals(java.lang.Object),returns whether this number up supported attribute is equivalent to the passed in object.
javax.print.attribute.standard.NumberUpSupported.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.NumberUpSupported.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.OrientationRequested.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.OrientationRequested.getEnumValueTable(),returns the enumeration value table for class orientationrequested.
javax.print.attribute.standard.OrientationRequested.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.OrientationRequested.getOffset(),returns the lowest integer value used by class orientationrequested.
javax.print.attribute.standard.OrientationRequested.getStringTable(),returns the string table for class orientationrequested.
javax.print.attribute.standard.OutputDeviceAssigned.equals(java.lang.Object),returns whether this output device assigned attribute is equivalent to the passed in object.
javax.print.attribute.standard.OutputDeviceAssigned.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.OutputDeviceAssigned.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PageRanges.equals(java.lang.Object),returns whether this page ranges attribute is equivalent to the passed in object.
javax.print.attribute.standard.PageRanges.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PageRanges.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PagesPerMinute.equals(java.lang.Object),returns whether this pages per minute attribute is equivalent to the passed in object.
javax.print.attribute.standard.PagesPerMinute.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PagesPerMinute.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PagesPerMinuteColor.equals(java.lang.Object),returns whether this pages per minute color attribute is equivalent to the passed in object.
javax.print.attribute.standard.PagesPerMinuteColor.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PagesPerMinuteColor.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PDLOverrideSupported.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PDLOverrideSupported.getEnumValueTable(),returns the enumeration value table for class pdloverridesupported.
javax.print.attribute.standard.PDLOverrideSupported.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PDLOverrideSupported.getStringTable(),returns the string table for class pdloverridesupported.
javax.print.attribute.standard.PresentationDirection.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PresentationDirection.getEnumValueTable(),returns the enumeration value table for class presentationdirection.
javax.print.attribute.standard.PresentationDirection.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PresentationDirection.getStringTable(),returns the string table for class presentationdirection.
javax.print.attribute.standard.PrinterInfo.equals(java.lang.Object),returns whether this printer info attribute is equivalent to the passed in object.
javax.print.attribute.standard.PrinterInfo.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterInfo.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrinterIsAcceptingJobs.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterIsAcceptingJobs.getEnumValueTable(),returns the enumeration value table for class printerisacceptingjobs.
javax.print.attribute.standard.PrinterIsAcceptingJobs.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrinterIsAcceptingJobs.getStringTable(),returns the string table for class printerisacceptingjobs.
javax.print.attribute.standard.PrinterLocation.equals(java.lang.Object),returns whether this printer location attribute is equivalent to the passed in object.
javax.print.attribute.standard.PrinterLocation.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterLocation.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrinterMakeAndModel.equals(java.lang.Object),returns whether this printer make and model attribute is equivalent to the passed in object.
javax.print.attribute.standard.PrinterMakeAndModel.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterMakeAndModel.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrinterMessageFromOperator.equals(java.lang.Object),returns whether this printer message from operator attribute is equivalent to the passed in object.
javax.print.attribute.standard.PrinterMessageFromOperator.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterMessageFromOperator.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrinterMoreInfo.equals(java.lang.Object),returns whether this printer more info attribute is equivalent to the passed in object.
javax.print.attribute.standard.PrinterMoreInfo.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterMoreInfo.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrinterMoreInfoManufacturer.equals(java.lang.Object),returns whether this printer more info manufacturer attribute is equivalent to the passed in object.
javax.print.attribute.standard.PrinterMoreInfoManufacturer.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterMoreInfoManufacturer.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrinterName.equals(java.lang.Object),returns whether this printer name attribute is equivalent to the passed in object.
javax.print.attribute.standard.PrinterName.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterName.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrinterResolution.equals(java.lang.Object),returns whether this printer resolution attribute is equivalent to the passed in object.
javax.print.attribute.standard.PrinterResolution.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterResolution.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrinterState.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterState.getEnumValueTable(),returns the enumeration value table for class printerstate.
javax.print.attribute.standard.PrinterState.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrinterState.getStringTable(),returns the string table for class printerstate.
javax.print.attribute.standard.PrinterStateReason.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterStateReason.getEnumValueTable(),returns the enumeration value table for class printerstatereason.
javax.print.attribute.standard.PrinterStateReason.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrinterStateReason.getStringTable(),returns the string table for class printerstatereason.
javax.print.attribute.standard.PrinterStateReasons.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterStateReasons.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrinterStateReasons.printerStateReasonSet(javax.print.attribute.standard.Severity),obtain an unmodifiable set view of the individual printer state reason attributes at the given severity level in this printerstatereasons attribute.
"javax.print.attribute.standard.PrinterStateReasons.put(javax.print.attribute.standard.PrinterStateReason,javax.print.attribute.standard.Severity)","adds the given printer state reason to this printer state reasons attribute, associating it with the given severity level."
javax.print.attribute.standard.PrinterURI.equals(java.lang.Object),returns whether this printer name attribute is equivalent to the passed in object.
javax.print.attribute.standard.PrinterURI.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrinterURI.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrintQuality.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.PrintQuality.getEnumValueTable(),returns the enumeration value table for class printquality.
javax.print.attribute.standard.PrintQuality.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.PrintQuality.getOffset(),returns the lowest integer value used by class printquality.
javax.print.attribute.standard.PrintQuality.getStringTable(),returns the string table for class printquality.
javax.print.attribute.standard.QueuedJobCount.equals(java.lang.Object),returns whether this queued job count attribute is equivalent to the passed in object.
javax.print.attribute.standard.QueuedJobCount.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.QueuedJobCount.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.ReferenceUriSchemesSupported.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.ReferenceUriSchemesSupported.getEnumValueTable(),returns the enumeration value table for class referenceurischemessupported.
javax.print.attribute.standard.ReferenceUriSchemesSupported.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.ReferenceUriSchemesSupported.getStringTable(),returns the string table for class referenceurischemessupported.
javax.print.attribute.standard.RequestingUserName.equals(java.lang.Object),returns whether this requesting user name attribute is equivalent to the passed in object.
javax.print.attribute.standard.RequestingUserName.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.RequestingUserName.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.Severity.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.Severity.getEnumValueTable(),returns the enumeration value table for class severity.
javax.print.attribute.standard.Severity.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.Severity.getStringTable(),returns the string table for class severity.
javax.print.attribute.standard.SheetCollate.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.SheetCollate.getEnumValueTable(),returns the enumeration value table for class sheetcollate.
javax.print.attribute.standard.SheetCollate.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.SheetCollate.getStringTable(),returns the string table for class sheetcollate.
javax.print.attribute.standard.Sides.getCategory(),"get the printing attribute class which is to be used as the ""category"" for this printing attribute value."
javax.print.attribute.standard.Sides.getEnumValueTable(),returns the enumeration value table for class sides.
javax.print.attribute.standard.Sides.getName(),get the name of the category of which this attribute value is an instance.
javax.print.attribute.standard.Sides.getStringTable(),returns the string table for class sides.
javax.print.event.PrintJobAttributeListener.attributeUpdate(javax.print.event.PrintJobAttributeEvent),notifies the listener of a change in some print job attributes.
javax.print.event.PrintJobListener.printDataTransferCompleted(javax.print.event.PrintJobEvent),"called to notify the client that data has been successfully transferred to the print service, and the client may free local resources allocated for that data."
javax.print.event.PrintJobListener.printJobCanceled(javax.print.event.PrintJobEvent),called to notify the client that the job was canceled by a user or a program.
javax.print.event.PrintJobListener.printJobCompleted(javax.print.event.PrintJobEvent),called to notify the client that the job completed successfully.
javax.print.event.PrintJobListener.printJobFailed(javax.print.event.PrintJobEvent),called to notify the client that the job failed to complete successfully and will have to be resubmitted.
javax.print.event.PrintJobListener.printJobNoMoreEvents(javax.print.event.PrintJobEvent),called to notify the client that no more events will be delivered.
javax.print.event.PrintJobListener.printJobRequiresAttention(javax.print.event.PrintJobEvent),called to notify the client that an error has occurred that the user might be able to fix.
javax.print.event.PrintServiceAttributeListener.attributeUpdate(javax.print.event.PrintServiceAttributeEvent),called to notify a listener of an event in the print service.
javax.print.event.PrintJobAdapter.printDataTransferCompleted(javax.print.event.PrintJobEvent),"called to notify the client that data has been successfully transferred to the print service, and the client may free local resources allocated for that data."
javax.print.event.PrintJobAdapter.printJobCanceled(javax.print.event.PrintJobEvent),called to notify the client that the job was canceled by user or program.
javax.print.event.PrintJobAdapter.printJobCompleted(javax.print.event.PrintJobEvent),called to notify the client that the job completed successfully.
javax.print.event.PrintJobAdapter.printJobFailed(javax.print.event.PrintJobEvent),called to notify the client that the job failed to complete successfully and will have to be resubmitted.
javax.print.event.PrintJobAdapter.printJobNoMoreEvents(javax.print.event.PrintJobEvent),called to notify the client that no more events will be delivered.
javax.print.event.PrintJobAdapter.printJobRequiresAttention(javax.print.event.PrintJobEvent),called to notify the client that some possibly user rectifiable problem occurs (eg printer out of paper).
javax.print.event.PrintJobAttributeEvent.getAttributes(),determine the printing attributes that changed and their new values.
javax.print.event.PrintJobAttributeEvent.getPrintJob(),determine the print job to which this print job event pertains.
javax.print.event.PrintJobEvent.getPrintEventType(),gets the reason for this event.
javax.print.event.PrintJobEvent.getPrintJob(),determines the docprintjob to which this print job event pertains.
javax.print.event.PrintServiceAttributeEvent.getAttributes(),determine the printing service attributes that changed and their new values.
javax.print.event.PrintServiceAttributeEvent.getPrintService(),returns the print service.
"javax.rmi.PortableRemoteObject.connect(java.rmi.Remote,java.rmi.Remote)",makes a remote object ready for remote communication.
javax.rmi.PortableRemoteObject.exportObject(java.rmi.Remote),makes a server object ready to receive remote calls.
"javax.rmi.PortableRemoteObject.narrow(java.lang.Object,java.lang.Class)",checks to ensure that an object of a remote or abstract interface type can be cast to a desired type.
javax.rmi.PortableRemoteObject.toStub(java.rmi.Remote),returns a stub for the given server object.
javax.rmi.PortableRemoteObject.unexportObject(java.rmi.Remote),"deregisters a server object from the runtime, allowing the object to become available for garbage collection."
"javax.rmi.CORBA.PortableRemoteObjectDelegate.connect(java.rmi.Remote,java.rmi.Remote)",delegation call for portableremoteobject.
javax.rmi.CORBA.PortableRemoteObjectDelegate.exportObject(java.rmi.Remote),delegation call for portableremoteobject.
"javax.rmi.CORBA.PortableRemoteObjectDelegate.narrow(java.lang.Object,java.lang.Class)",delegation call for portableremoteobject.
javax.rmi.CORBA.PortableRemoteObjectDelegate.toStub(java.rmi.Remote),delegation call for portableremoteobject.
javax.rmi.CORBA.PortableRemoteObjectDelegate.unexportObject(java.rmi.Remote),delegation call for portableremoteobject.
"javax.rmi.CORBA.StubDelegate.connect(javax.rmi.CORBA.Stub,org.omg.CORBA.ORB)",delegation call for stub.
"javax.rmi.CORBA.StubDelegate.equals(javax.rmi.CORBA.Stub,java.lang.Object)",delegation call for stub.
javax.rmi.CORBA.StubDelegate.hashCode(javax.rmi.CORBA.Stub),delegation call for stub.
"javax.rmi.CORBA.StubDelegate.readObject(javax.rmi.CORBA.Stub,java.io.ObjectInputStream)",delegation call for stub.
javax.rmi.CORBA.StubDelegate.toString(javax.rmi.CORBA.Stub),delegation call for stub.
"javax.rmi.CORBA.StubDelegate.writeObject(javax.rmi.CORBA.Stub,java.io.ObjectOutputStream)",delegation call for stub.
javax.rmi.CORBA.Tie.deactivate(),deactivates the target object represented by this tie.
javax.rmi.CORBA.Tie.getTarget(),returns the target for this tie.
javax.rmi.CORBA.Tie.orb(),returns the orb for this tie.
javax.rmi.CORBA.Tie.orb(org.omg.CORBA.ORB),sets the orb for this tie.
javax.rmi.CORBA.Tie.setTarget(java.rmi.Remote),called by util.
javax.rmi.CORBA.Tie.thisObject(),returns an object reference for the target object represented by this tie.
"javax.rmi.CORBA.UtilDelegate.copyObject(java.lang.Object,org.omg.CORBA.ORB)",delegation call for util.
"javax.rmi.CORBA.UtilDelegate.copyObjects(java.lang.Object[],org.omg.CORBA.ORB)",delegation call for util.
javax.rmi.CORBA.UtilDelegate.createValueHandler(),delegation call for util.
javax.rmi.CORBA.UtilDelegate.getCodebase(java.lang.Class),delegation call for util.
javax.rmi.CORBA.UtilDelegate.getTie(java.rmi.Remote),delegation call for util.
javax.rmi.CORBA.UtilDelegate.isLocal(javax.rmi.CORBA.Stub),delegation call for util.
"javax.rmi.CORBA.UtilDelegate.loadClass(java.lang.String,java.lang.String,java.lang.ClassLoader)",delegation call for util.
javax.rmi.CORBA.UtilDelegate.mapSystemException(org.omg.CORBA.SystemException),delegation call for util.
javax.rmi.CORBA.UtilDelegate.readAny(org.omg.CORBA.portable.InputStream),delegation call for util.
"javax.rmi.CORBA.UtilDelegate.registerTarget(javax.rmi.CORBA.Tie,java.rmi.Remote)",delegation call for util.
javax.rmi.CORBA.UtilDelegate.unexportObject(java.rmi.Remote),delegation call for util.
javax.rmi.CORBA.UtilDelegate.wrapException(java.lang.Throwable),delegation call for util.
"javax.rmi.CORBA.UtilDelegate.writeAbstractObject(org.omg.CORBA.portable.OutputStream,java.lang.Object)",delegation call for util.
"javax.rmi.CORBA.UtilDelegate.writeAny(org.omg.CORBA.portable.OutputStream,java.lang.Object)",delegation call for util.
"javax.rmi.CORBA.UtilDelegate.writeRemoteObject(org.omg.CORBA.portable.OutputStream,java.lang.Object)",delegation call for util.
javax.rmi.CORBA.ValueHandler.getRMIRepositoryID(java.lang.Class),returns the corba repositoryid for the given java class.
javax.rmi.CORBA.ValueHandler.getRunTimeCodeBase(),returns the codebase for this valuehandler.
javax.rmi.CORBA.ValueHandler.isCustomMarshaled(java.lang.Class),indicates whether the given class performs custom or default marshaling.
"javax.rmi.CORBA.ValueHandler.readValue(org.omg.CORBA.portable.InputStream,int,java.lang.Class,java.lang.String,org.omg.SendingContext.RunTime)",reads a value from the stream using java semantics.
javax.rmi.CORBA.ValueHandler.writeReplace(java.io.Serializable),if the value contains a writereplace method then the result is returned.
"javax.rmi.CORBA.ValueHandler.writeValue(org.omg.CORBA.portable.OutputStream,java.io.Serializable)",writes a value to the stream using java semantics.
javax.rmi.CORBA.ValueHandlerMultiFormat.getMaximumStreamFormatVersion(),returns the maximum stream format version for rmi/idl custom value types that is supported by this valuehandler object.
"javax.rmi.CORBA.ValueHandlerMultiFormat.writeValue(org.omg.CORBA.portable.OutputStream,java.io.Serializable,byte)",allows the orb to pass the stream format version for rmi/idl custom value types.
javax.rmi.CORBA.Stub.connect(org.omg.CORBA.ORB),connects this stub to an orb.
javax.rmi.CORBA.Stub.equals(java.lang.Object),compares two stubs for equality.
javax.rmi.CORBA.Stub.hashCode(),returns a hash code value for the object which is the same for all stubs that represent the same remote object.
javax.rmi.CORBA.Stub.toString(),returns a string representation of this stub.
"javax.rmi.CORBA.Util.copyObject(java.lang.Object,org.omg.CORBA.ORB)",copies or connects an object.
"javax.rmi.CORBA.Util.copyObjects(java.lang.Object[],org.omg.CORBA.ORB)",copies or connects an array of objects.
javax.rmi.CORBA.Util.createValueHandler(),returns a singleton instance of a class that implements the valuehandler interface.
javax.rmi.CORBA.Util.getCodebase(java.lang.Class),"returns the codebase, if any, for the given class."
javax.rmi.CORBA.Util.getTie(java.rmi.Remote),returns the tie (if any) for a given target object.
javax.rmi.CORBA.Util.isLocal(javax.rmi.CORBA.Stub),the islocal method has the same semantics as the objectimpl.
"javax.rmi.CORBA.Util.loadClass(java.lang.String,java.lang.String,java.lang.ClassLoader)",returns a class instance for the specified class.
javax.rmi.CORBA.Util.mapSystemException(org.omg.CORBA.SystemException),maps a systemexception to a remoteexception.
javax.rmi.CORBA.Util.readAny(org.omg.CORBA.portable.InputStream),reads a java.
"javax.rmi.CORBA.Util.registerTarget(javax.rmi.CORBA.Tie,java.rmi.Remote)",registers a target for a tie.
javax.rmi.CORBA.Util.unexportObject(java.rmi.Remote),removes the associated tie from an internal table and calls tie.
javax.rmi.CORBA.Util.wrapException(java.lang.Throwable),wraps an exception thrown by an implementation method.
"javax.rmi.CORBA.Util.writeAbstractObject(org.omg.CORBA.portable.OutputStream,java.lang.Object)",writes a java.
"javax.rmi.CORBA.Util.writeAny(org.omg.CORBA.portable.OutputStream,java.lang.Object)",writes any java.
"javax.rmi.CORBA.Util.writeRemoteObject(org.omg.CORBA.portable.OutputStream,java.lang.Object)",writes a java.
"javax.rmi.ssl.SslRMIClientSocketFactory.createSocket(java.lang.String,int)",creates an ssl socket.
javax.rmi.ssl.SslRMIClientSocketFactory.equals(java.lang.Object),"indicates whether some other object is ""equal to"" this one."
javax.rmi.ssl.SslRMIClientSocketFactory.hashCode(),returns a hash code value for this sslrmiclientsocketfactory.
javax.rmi.ssl.SslRMIServerSocketFactory.createServerSocket(int),creates a server socket that accepts ssl connections configured according to this factory's ssl socket configuration parameters.
javax.rmi.ssl.SslRMIServerSocketFactory.equals(java.lang.Object),"indicates whether some other object is ""equal to"" this one."
javax.rmi.ssl.SslRMIServerSocketFactory.getEnabledCipherSuites(),"returns the names of the cipher suites enabled on ssl connections accepted by server sockets created by this factory, or null if this factory uses the cipher suites that are enabled by default."
javax.rmi.ssl.SslRMIServerSocketFactory.getEnabledProtocols(),"returns the names of the protocol versions enabled on ssl connections accepted by server sockets created by this factory, or null if this factory uses the protocol versions that are enabled by default."
javax.rmi.ssl.SslRMIServerSocketFactory.getNeedClientAuth(),returns true if client authentication is required on ssl connections accepted by server sockets created by this factory.
javax.rmi.ssl.SslRMIServerSocketFactory.hashCode(),returns a hash code value for this sslrmiserversocketfactory.
javax.script.Bindings.containsKey(java.lang.Object),returns true if this map contains a mapping for the specified key.
javax.script.Bindings.get(java.lang.Object),returns the value to which this map maps the specified key.
"javax.script.Bindings.put(java.lang.String,java.lang.Object)",set a named value.
"javax.script.Bindings.putAll(java.util.Map<? extends,? extends java.lang.Object>)",adds all the mappings in a given map to this bindings.
javax.script.Bindings.remove(java.lang.Object),removes the mapping for this key from this map if it is present (optional operation).
javax.script.Compilable.compile(java.lang.String),compiles the script (source represented as a string) for later execution.
javax.script.Compilable.compile(java.io.Reader),compiles the script (source read from reader) for later execution.
javax.script.Invocable.getInterface(java.lang.Class<T>),returns an implementation of an interface using functions compiled in the interpreter.
"javax.script.Invocable.getInterface(java.lang.Object,java.lang.Class<T>)",returns an implementation of an interface using member functions of a scripting object compiled in the interpreter.
"javax.script.Invocable.invokeFunction(java.lang.String,java.lang.Object...)",used to call top-level procedures and functions defined in scripts.
"javax.script.Invocable.invokeMethod(java.lang.Object,java.lang.String,java.lang.Object...)","calls a method on a script object compiled during a previous script execution, which is retained in the state of the scriptengine."
"javax.script.ScriptContext.getAttribute(java.lang.String,int)",gets the value of an attribute in a given scope.
javax.script.ScriptContext.getAttribute(java.lang.String),retrieves the value of the attribute with the given name in the scope occurring earliest in the search order.
javax.script.ScriptContext.getAttributesScope(java.lang.String),get the lowest scope in which an attribute is defined.
javax.script.ScriptContext.getBindings(int),gets the bindings associated with the given scope in this scriptcontext.
javax.script.ScriptContext.getErrorWriter(),returns the writer used to display error output.
javax.script.ScriptContext.getReader(),returns a reader to be used by the script to read input.
javax.script.ScriptContext.getScopes(),returns immutable list of all the valid values for scope in the scriptcontext.
javax.script.ScriptContext.getWriter(),returns the writer for scripts to use when displaying output.
"javax.script.ScriptContext.removeAttribute(java.lang.String,int)",remove an attribute in a given scope.
"javax.script.ScriptContext.setAttribute(java.lang.String,java.lang.Object,int)",sets the value of an attribute in a given scope.
"javax.script.ScriptContext.setBindings(javax.script.Bindings,int)",associates a bindings instance with a particular scope in this scriptcontext.
javax.script.ScriptContext.setErrorWriter(java.io.Writer),sets the writer used to display error output.
javax.script.ScriptContext.setReader(java.io.Reader),sets the reader for scripts to read input .
javax.script.ScriptContext.setWriter(java.io.Writer),sets the writer for scripts to use when displaying output.
javax.script.ScriptEngine.createBindings(),returns an uninitialized bindings.
"javax.script.ScriptEngine.eval(java.lang.String,javax.script.ScriptContext)",causes the immediate execution of the script whose source is the string passed as the first argument.
javax.script.ScriptEngine.eval(java.lang.String),executes the specified script.
"javax.script.ScriptEngine.eval(java.lang.String,javax.script.Bindings)",executes the script using the bindings argument as the engine_scope bindings of the scriptengine during the script execution.
javax.script.ScriptEngine.get(java.lang.String),retrieves a value set in the state of this engine.
javax.script.ScriptEngine.getBindings(int),returns a scope of named values.
javax.script.ScriptEngine.getContext(),"returns the default scriptcontext of the scriptengine whose bindings, reader and writers are used for script executions when no scriptcontext is specified."
javax.script.ScriptEngine.getFactory(),returns a scriptenginefactory for the class to which this scriptengine belongs.
"javax.script.ScriptEngine.put(java.lang.String,java.lang.Object)","sets a key/value pair in the state of the scriptengine that may either create a java language binding to be used in the execution of scripts or be used in some other way, depending on whether the key is reserved."
"javax.script.ScriptEngine.setBindings(javax.script.Bindings,int)",sets a scope of named values to be used by scripts.
javax.script.ScriptEngine.setContext(javax.script.ScriptContext),"sets the default scriptcontext of the scriptengine whose bindings, reader and writers are used for script executions when no scriptcontext is specified."
javax.script.ScriptEngineFactory.getEngineName(),returns the full name of the scriptengine.
javax.script.ScriptEngineFactory.getEngineVersion(),returns the version of the scriptengine.
javax.script.ScriptEngineFactory.getExtensions(),"returns an immutable list of filename extensions, which generally identify scripts written in the language supported by this scriptengine."
javax.script.ScriptEngineFactory.getLanguageName(),returns the name of the scripting language supported by this scriptengine.
javax.script.ScriptEngineFactory.getLanguageVersion(),returns the version of the scripting language supported by this scriptengine.
"javax.script.ScriptEngineFactory.getMethodCallSyntax(java.lang.String,java.lang.String,java.lang.String...)",returns a string which can be used to invoke a method of a java object using the syntax of the supported scripting language.
javax.script.ScriptEngineFactory.getMimeTypes(),"returns an immutable list of mimetypes, associated with scripts that can be executed by the engine."
javax.script.ScriptEngineFactory.getNames(),"returns an immutable list of short names for the scriptengine, which may be used to identify the scriptengine by the scriptenginemanager."
javax.script.ScriptEngineFactory.getOutputStatement(java.lang.String),returns a string that can be used as a statement to display the specified string using the syntax of the supported scripting language.
javax.script.ScriptEngineFactory.getParameter(java.lang.String),returns the value of an attribute whose meaning may be implementation-specific.
javax.script.ScriptEngineFactory.getProgram(java.lang.String...),returns a valid scripting language executable program with given statements.
javax.script.ScriptEngineFactory.getScriptEngine(),returns an instance of the scriptengine associated with this scriptenginefactory.
"javax.script.AbstractScriptEngine.eval(java.io.Reader,javax.script.Bindings)","eval(reader, bindings) calls the abstract eval(reader, scriptcontext) method, passing it a scriptcontext whose reader, writers and bindings for scopes other that engine_scope are identical to those members of the protected context field."
javax.script.AbstractScriptEngine.eval(java.io.Reader),"eval(reader) calls the abstract eval(reader, scriptcontext) passing the value of the context field."
javax.script.AbstractScriptEngine.get(java.lang.String),gets the value for the specified key in the engine_scope of the protected context field.
javax.script.AbstractScriptEngine.getBindings(int),returns the bindings with the specified scope value in the protected context field.
javax.script.AbstractScriptEngine.getContext(),returns the value of the protected context field.
javax.script.AbstractScriptEngine.getScriptContext(javax.script.Bindings),returns a simplescriptcontext.
"javax.script.AbstractScriptEngine.put(java.lang.String,java.lang.Object)",sets the specified value with the specified key in the engine_scope bindings of the protected context field.
"javax.script.AbstractScriptEngine.setBindings(javax.script.Bindings,int)",sets the bindings with the corresponding scope value in the context field.
javax.script.AbstractScriptEngine.setContext(javax.script.ScriptContext),sets the value of the protected context field to the specified scriptcontext.
javax.script.CompiledScript.eval(javax.script.ScriptContext),executes the program stored in this compiledscript object.
javax.script.CompiledScript.eval(javax.script.Bindings),executes the program stored in the compiledscript object using the supplied bindings of attributes as the engine_scope of the associated scriptengine during script execution.
javax.script.CompiledScript.eval(),executes the program stored in the compiledscript object.
javax.script.CompiledScript.getEngine(),returns the scriptengine whose compile method created this compiledscript.
javax.script.ScriptEngineManager.get(java.lang.String),gets the value for the specified key in the global scope.
javax.script.ScriptEngineManager.getBindings(),getbindings returns the value of the globalscope field.
javax.script.ScriptEngineManager.getEngineByExtension(java.lang.String),look up and create a scriptengine for a given extension.
javax.script.ScriptEngineManager.getEngineByMimeType(java.lang.String),look up and create a scriptengine for a given mime type.
javax.script.ScriptEngineManager.getEngineByName(java.lang.String),looks up and creates a scriptengine for a given name.
javax.script.ScriptEngineManager.getEngineFactories(),returns a list whose elements are instances of all the scriptenginefactory classes found by the discovery mechanism.
"javax.script.ScriptEngineManager.put(java.lang.String,java.lang.Object)",sets the specified key/value pair in the global scope.
"javax.script.ScriptEngineManager.registerEngineExtension(java.lang.String,javax.script.ScriptEngineFactory)",registers a scriptenginefactory to handle an extension.
"javax.script.ScriptEngineManager.registerEngineMimeType(java.lang.String,javax.script.ScriptEngineFactory)",registers a scriptenginefactory to handle a mime type.
"javax.script.ScriptEngineManager.registerEngineName(java.lang.String,javax.script.ScriptEngineFactory)",registers a scriptenginefactory to handle a language name.
javax.script.ScriptEngineManager.setBindings(javax.script.Bindings),setbindings stores the specified bindings in the globalscope field.
javax.script.SimpleBindings.clear(),removes all of the mappings from this map (optional operation).
javax.script.SimpleBindings.containsKey(java.lang.Object),returns true if this map contains a mapping for the specified key.
javax.script.SimpleBindings.containsValue(java.lang.Object),returns true if this map maps one or more keys to the specified value.
javax.script.SimpleBindings.entrySet(),returns a set view of the mappings contained in this map.
javax.script.SimpleBindings.get(java.lang.Object),returns the value to which this map maps the specified key.
javax.script.SimpleBindings.isEmpty(),returns true if this map contains no key-value mappings.
javax.script.SimpleBindings.keySet(),returns a set view of the keys contained in this map.
"javax.script.SimpleBindings.put(java.lang.String,java.lang.Object)",sets the specified key/value in the underlying map field.
"javax.script.SimpleBindings.putAll(java.util.Map<? extends,? extends java.lang.Object>)",putall is implemented using map.
javax.script.SimpleBindings.remove(java.lang.Object),removes the mapping for this key from this map if it is present (optional operation).
javax.script.SimpleBindings.size(),returns the number of key-value mappings in this map.
javax.script.SimpleBindings.values(),returns a collection view of the values contained in this map.
javax.script.SimpleScriptContext.getAttribute(java.lang.String),retrieves the value of the attribute with the given name in the scope occurring earliest in the search order.
"javax.script.SimpleScriptContext.getAttribute(java.lang.String,int)",gets the value of an attribute in a given scope.
javax.script.SimpleScriptContext.getAttributesScope(java.lang.String),get the lowest scope in which an attribute is defined.
javax.script.SimpleScriptContext.getBindings(int),returns the value of the enginescope field if specified scope is engine_scope.
javax.script.SimpleScriptContext.getErrorWriter(),returns the writer used to display error output.
javax.script.SimpleScriptContext.getReader(),returns a reader to be used by the script to read input.
javax.script.SimpleScriptContext.getScopes(),returns immutable list of all the valid values for scope in the scriptcontext.
javax.script.SimpleScriptContext.getWriter(),returns the writer for scripts to use when displaying output.
"javax.script.SimpleScriptContext.removeAttribute(java.lang.String,int)",remove an attribute in a given scope.
"javax.script.SimpleScriptContext.setAttribute(java.lang.String,java.lang.Object,int)",sets the value of an attribute in a given scope.
"javax.script.SimpleScriptContext.setBindings(javax.script.Bindings,int)",sets a bindings of attributes for the given scope.
javax.script.SimpleScriptContext.setErrorWriter(java.io.Writer),sets the writer used to display error output.
javax.script.SimpleScriptContext.setReader(java.io.Reader),sets the reader for scripts to read input .
javax.script.SimpleScriptContext.setWriter(java.io.Writer),sets the writer for scripts to use when displaying output.
javax.script.ScriptException.getColumnNumber(),get the column number on which an error occurred.
javax.script.ScriptException.getFileName(),get the source of the script causing the error.
javax.script.ScriptException.getLineNumber(),get the line number on which an error occurred.
javax.script.ScriptException.getMessage(),returns a message containing the string passed to a constructor as well as line and column numbers and filename if any of these are known.
javax.security.auth.Destroyable.destroy(),destroy this object.
javax.security.auth.Destroyable.isDestroyed(),determine if this object has been destroyed.
javax.security.auth.Refreshable.isCurrent(),determine if this object is current.
javax.security.auth.Refreshable.refresh(),update or extend the validity period for this object.
javax.security.auth.PrivateCredentialPermission.equals(java.lang.Object),checks two privatecredentialpermission objects for equality.
javax.security.auth.PrivateCredentialPermission.getActions(),"returns the ""canonical string representation"" of the actions."
javax.security.auth.PrivateCredentialPermission.getCredentialClass(),returns the class name of the credential associated with this privatecredentialpermission.
javax.security.auth.PrivateCredentialPermission.getPrincipals(),returns the principal classes and names associated with this privatecredentialpermission.
javax.security.auth.PrivateCredentialPermission.hashCode(),returns the hash code value for this object.
javax.security.auth.PrivateCredentialPermission.implies(java.security.Permission),checks if this privatecredentialpermission implies the specified permission.
javax.security.auth.PrivateCredentialPermission.newPermissionCollection(),return a homogeneous collection of privatecredentialpermissions in a permissioncollection.
"javax.security.auth.Subject.doAs(javax.security.auth.Subject,java.security.PrivilegedAction<T>)",perform work as a particular subject.
"javax.security.auth.Subject.doAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction<T>)",perform work as a particular subject.
"javax.security.auth.Subject.doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedAction<T>,java.security.AccessControlContext)",perform privileged work as a particular subject.
"javax.security.auth.Subject.doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedExceptionAction<T>,java.security.AccessControlContext)",perform privileged work as a particular subject.
javax.security.auth.Subject.equals(java.lang.Object),compares the specified object with this subject for equality.
javax.security.auth.Subject.getPrincipals(),return the set of principals associated with this subject.
javax.security.auth.Subject.getPrincipals(java.lang.Class<T>),return a set of principals associated with this subject that are instances or subclasses of the specified class.
javax.security.auth.Subject.getPrivateCredentials(),return the set of private credentials held by this subject.
javax.security.auth.Subject.getPrivateCredentials(java.lang.Class<T>),return a set of private credentials associated with this subject that are instances or subclasses of the specified class.
javax.security.auth.Subject.getPublicCredentials(),return the set of public credentials held by this subject.
javax.security.auth.Subject.getPublicCredentials(java.lang.Class<T>),return a set of public credentials associated with this subject that are instances or subclasses of the specified class.
javax.security.auth.Subject.getSubject(java.security.AccessControlContext),get the subject associated with the provided accesscontrolcontext.
javax.security.auth.Subject.hashCode(),returns a hashcode for this subject.
javax.security.auth.Subject.isReadOnly(),query whether this subject is read-only.
javax.security.auth.Subject.setReadOnly(),set this subject to be read-only.
javax.security.auth.Subject.toString(),return the string representation of this subject.
"javax.security.auth.SubjectDomainCombiner.combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])",update the relevant protectiondomains with the principals from the subject associated with this subjectdomaincombiner.
javax.security.auth.SubjectDomainCombiner.getSubject(),get the subject associated with this subjectdomaincombiner.
javax.security.auth.callback.CallbackHandler.handle(javax.security.auth.callback.Callback[]),retrieve or display the information requested in the provided callbacks.
javax.security.auth.callback.ChoiceCallback.allowMultipleSelections(),get the boolean determining whether multiple selections from the choices list are allowed.
javax.security.auth.callback.ChoiceCallback.getChoices(),get the list of choices.
javax.security.auth.callback.ChoiceCallback.getDefaultChoice(),get the defaultchoice.
javax.security.auth.callback.ChoiceCallback.getPrompt(),get the prompt.
javax.security.auth.callback.ChoiceCallback.getSelectedIndexes(),get the selected choices.
javax.security.auth.callback.ChoiceCallback.setSelectedIndex(int),set the selected choice.
javax.security.auth.callback.ChoiceCallback.setSelectedIndexes(int[]),set the selected choices.
javax.security.auth.callback.ConfirmationCallback.getDefaultOption(),get the default option.
javax.security.auth.callback.ConfirmationCallback.getMessageType(),get the message type.
javax.security.auth.callback.ConfirmationCallback.getOptions(),get the confirmation options.
javax.security.auth.callback.ConfirmationCallback.getOptionType(),get the option type.
javax.security.auth.callback.ConfirmationCallback.getPrompt(),get the prompt.
javax.security.auth.callback.ConfirmationCallback.getSelectedIndex(),get the selected confirmation option.
javax.security.auth.callback.ConfirmationCallback.setSelectedIndex(int),set the selected confirmation option.
javax.security.auth.callback.LanguageCallback.getLocale(),get the retrieved locale.
javax.security.auth.callback.LanguageCallback.setLocale(java.util.Locale),set the retrieved locale.
javax.security.auth.callback.NameCallback.getDefaultName(),get the default name.
javax.security.auth.callback.NameCallback.getName(),get the retrieved name.
javax.security.auth.callback.NameCallback.getPrompt(),get the prompt.
javax.security.auth.callback.NameCallback.setName(java.lang.String),set the retrieved name.
javax.security.auth.callback.PasswordCallback.clearPassword(),clear the retrieved password.
javax.security.auth.callback.PasswordCallback.getPassword(),get the retrieved password.
javax.security.auth.callback.PasswordCallback.getPrompt(),get the prompt.
javax.security.auth.callback.PasswordCallback.isEchoOn(),return whether the password should be displayed as it is being typed.
javax.security.auth.callback.PasswordCallback.setPassword(char[]),set the retrieved password.
javax.security.auth.callback.TextInputCallback.getDefaultText(),get the default text.
javax.security.auth.callback.TextInputCallback.getPrompt(),get the prompt.
javax.security.auth.callback.TextInputCallback.getText(),get the retrieved text.
javax.security.auth.callback.TextInputCallback.setText(java.lang.String),set the retrieved text.
javax.security.auth.callback.TextOutputCallback.getMessage(),get the message to be displayed.
javax.security.auth.callback.TextOutputCallback.getMessageType(),get the message type.
javax.security.auth.callback.UnsupportedCallbackException.getCallback(),get the unrecognized callback.
javax.security.auth.kerberos.DelegationPermission.equals(java.lang.Object),checks two delegationpermission objects for equality.
javax.security.auth.kerberos.DelegationPermission.hashCode(),returns the hash code value for this object.
javax.security.auth.kerberos.DelegationPermission.implies(java.security.Permission),"checks if this kerberos delegation permission object ""implies"" the specified permission."
javax.security.auth.kerberos.DelegationPermission.newPermissionCollection(),returns a permissioncollection object for storing delegationpermission objects.
javax.security.auth.kerberos.KerberosKey.destroy(),destroys this key.
javax.security.auth.kerberos.KerberosKey.equals(java.lang.Object),compares the specified object with this kerberoskey for equality.
javax.security.auth.kerberos.KerberosKey.getAlgorithm(),returns the standard algorithm name for this key.
javax.security.auth.kerberos.KerberosKey.getEncoded(),returns the key material of this secret key.
javax.security.auth.kerberos.KerberosKey.getFormat(),returns the name of the encoding format for this secret key.
javax.security.auth.kerberos.KerberosKey.getKeyType(),returns the key type for this long-term key.
javax.security.auth.kerberos.KerberosKey.getPrincipal(),returns the principal that this key belongs to.
javax.security.auth.kerberos.KerberosKey.getVersionNumber(),returns the key version number.
javax.security.auth.kerberos.KerberosKey.hashCode(),returns a hashcode for this kerberoskey.
javax.security.auth.kerberos.KerberosKey.isDestroyed(),determines if this key has been destroyed.
javax.security.auth.kerberos.KerberosPrincipal.equals(java.lang.Object),compares the specified object with this principal for equality.
javax.security.auth.kerberos.KerberosPrincipal.getName(),the returned string corresponds to the single-string representation of a kerberos principal name as specified in section 2.
javax.security.auth.kerberos.KerberosPrincipal.getNameType(),returns the name type of the kerberosprincipal.
javax.security.auth.kerberos.KerberosPrincipal.getRealm(),returns the realm component of this kerberos principal.
javax.security.auth.kerberos.KerberosPrincipal.hashCode(),returns a hashcode for this principal.
javax.security.auth.kerberos.KerberosTicket.destroy(),destroys the ticket and destroys any sensitive information stored in it.
javax.security.auth.kerberos.KerberosTicket.equals(java.lang.Object),compares the specified object with this kerberosticket for equality.
javax.security.auth.kerberos.KerberosTicket.getAuthTime(),returns the time that the client was authenticated.
javax.security.auth.kerberos.KerberosTicket.getClient(),returns the client principal associated with this ticket.
javax.security.auth.kerberos.KerberosTicket.getClientAddresses(),returns a list of addresses from where the ticket can be used.
javax.security.auth.kerberos.KerberosTicket.getEncoded(),returns an asn.
javax.security.auth.kerberos.KerberosTicket.getEndTime(),returns the expiration time for this ticket's validity period.
javax.security.auth.kerberos.KerberosTicket.getFlags(),returns the flags associated with this ticket.
javax.security.auth.kerberos.KerberosTicket.getRenewTill(),"returns the latest expiration time for this ticket, including all renewals."
javax.security.auth.kerberos.KerberosTicket.getServer(),returns the service principal associated with this ticket.
javax.security.auth.kerberos.KerberosTicket.getSessionKey(),returns the session key associated with this ticket.
javax.security.auth.kerberos.KerberosTicket.getSessionKeyType(),returns the key type of the session key associated with this ticket as defined by the kerberos protocol specification.
javax.security.auth.kerberos.KerberosTicket.getStartTime(),returns the start time for this ticket's validity period.
javax.security.auth.kerberos.KerberosTicket.hashCode(),returns a hashcode for this kerberosticket.
javax.security.auth.kerberos.KerberosTicket.isCurrent(),determines if this ticket is still current.
javax.security.auth.kerberos.KerberosTicket.isDestroyed(),determines if this ticket has been destroyed.
javax.security.auth.kerberos.KerberosTicket.isForwardable(),determines if this ticket is forwardable.
javax.security.auth.kerberos.KerberosTicket.isForwarded(),determines if this ticket had been forwarded or was issued based on authentication involving a forwarded ticket-granting ticket.
javax.security.auth.kerberos.KerberosTicket.isInitial(),"determines if this ticket was issued using the kerberos as-exchange protocol, and not issued based on some ticket-granting ticket."
javax.security.auth.kerberos.KerberosTicket.isPostdated(),determines is this ticket is post-dated.
javax.security.auth.kerberos.KerberosTicket.isProxiable(),determines if this ticket is proxiable.
javax.security.auth.kerberos.KerberosTicket.isProxy(),determines is this ticket is a proxy-ticket.
javax.security.auth.kerberos.KerberosTicket.isRenewable(),determines is this ticket is renewable.
javax.security.auth.kerberos.KerberosTicket.refresh(),extends the validity period of this ticket.
javax.security.auth.kerberos.KeyTab.equals(java.lang.Object),compares the specified object with this keytab for equality.
javax.security.auth.kerberos.KeyTab.exists(),checks if the keytab file exists.
javax.security.auth.kerberos.KeyTab.getInstance(java.io.File),returns a keytab instance from a file object that is bound to an unknown service principal.
"javax.security.auth.kerberos.KeyTab.getInstance(javax.security.auth.kerberos.KerberosPrincipal,java.io.File)",returns a keytab instance from a file object that is bound to the specified service principal.
javax.security.auth.kerberos.KeyTab.getInstance(),returns the default keytab instance that is bound to an unknown service principal.
javax.security.auth.kerberos.KeyTab.getInstance(javax.security.auth.kerberos.KerberosPrincipal),returns the default keytab instance that is bound to the specified service principal.
javax.security.auth.kerberos.KeyTab.getKeys(javax.security.auth.kerberos.KerberosPrincipal),returns fresh keys for the given kerberos principal.
javax.security.auth.kerberos.KeyTab.getPrincipal(),returns the service principal this keytab object is bound to.
javax.security.auth.kerberos.KeyTab.getUnboundInstance(java.io.File),returns an unbound keytab instance from a file object.
javax.security.auth.kerberos.KeyTab.getUnboundInstance(),returns the default unbound keytab instance.
javax.security.auth.kerberos.KeyTab.hashCode(),returns a hashcode for this keytab.
javax.security.auth.kerberos.KeyTab.isBound(),returns if the keytab is bound to a principal.
javax.security.auth.kerberos.ServicePermission.equals(java.lang.Object),checks two servicepermission objects for equality.
javax.security.auth.kerberos.ServicePermission.getActions(),returns the canonical string representation of the actions.
javax.security.auth.kerberos.ServicePermission.hashCode(),returns the hash code value for this object.
javax.security.auth.kerberos.ServicePermission.implies(java.security.Permission),"checks if this kerberos service permission object ""implies"" the specified permission."
javax.security.auth.kerberos.ServicePermission.newPermissionCollection(),returns a permissioncollection object for storing servicepermission objects.
javax.security.auth.login.AppConfigurationEntry.getControlFlag(),"return the controlflag (either required, requisite, sufficient, or optional) for this loginmodule."
javax.security.auth.login.AppConfigurationEntry.getLoginModuleName(),get the class name of the configured loginmodule.
javax.security.auth.login.AppConfigurationEntry.getOptions(),get the options configured for this loginmodule.
javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag.toString(),return a string representation of this controlflag.
javax.security.auth.login.Configuration.getAppConfigurationEntry(java.lang.String),retrieve the appconfigurationentries for the specified name from this configuration.
javax.security.auth.login.Configuration.getConfiguration(),get the installed login configuration.
"javax.security.auth.login.Configuration.getInstance(java.lang.String,javax.security.auth.login.Configuration.Parameters)",returns a configuration object of the specified type.
"javax.security.auth.login.Configuration.getInstance(java.lang.String,javax.security.auth.login.Configuration.Parameters,java.lang.String)",returns a configuration object of the specified type.
"javax.security.auth.login.Configuration.getInstance(java.lang.String,javax.security.auth.login.Configuration.Parameters,java.security.Provider)",returns a configuration object of the specified type.
javax.security.auth.login.Configuration.getParameters(),return configuration parameters.
javax.security.auth.login.Configuration.getProvider(),return the provider of this configuration.
javax.security.auth.login.Configuration.getType(),return the type of this configuration.
javax.security.auth.login.Configuration.refresh(),refresh and reload the configuration.
javax.security.auth.login.Configuration.setConfiguration(javax.security.auth.login.Configuration),set the login configuration.
javax.security.auth.login.ConfigurationSpi.engineGetAppConfigurationEntry(java.lang.String),retrieve the appconfigurationentries for the specified name.
javax.security.auth.login.ConfigurationSpi.engineRefresh(),refresh and reload the configuration.
javax.security.auth.login.LoginContext.getSubject(),return the authenticated subject.
javax.security.auth.login.LoginContext.login(),perform the authentication.
javax.security.auth.login.LoginContext.logout(),logout the subject.
javax.security.auth.spi.LoginModule.abort(),method to abort the authentication process (phase 2).
javax.security.auth.spi.LoginModule.commit(),method to commit the authentication process (phase 2).
"javax.security.auth.spi.LoginModule.initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,,?>,,?>)",initialize this loginmodule.
javax.security.auth.spi.LoginModule.login(),method to authenticate a subject (phase 1).
javax.security.auth.spi.LoginModule.logout(),method which logs out a subject.
javax.security.auth.x500.X500Principal.equals(java.lang.Object),compares the specified object with this x500principal for equality.
javax.security.auth.x500.X500Principal.getEncoded(),returns the distinguished name in asn.
javax.security.auth.x500.X500Principal.getName(),returns a string representation of the x.
javax.security.auth.x500.X500Principal.getName(java.lang.String),returns a string representation of the x.
"javax.security.auth.x500.X500Principal.getName(java.lang.String,,java.lang.String>)",returns a string representation of the x.
javax.security.auth.x500.X500Principal.hashCode(),return a hash code for this x500principal.
javax.security.auth.x500.X500Principal.toString(),return a user-friendly string representation of this x500principal.
javax.security.auth.x500.X500PrivateCredential.destroy(),clears the references to the x.
javax.security.auth.x500.X500PrivateCredential.getAlias(),returns the keystore alias.
javax.security.auth.x500.X500PrivateCredential.getCertificate(),returns the x.
javax.security.auth.x500.X500PrivateCredential.getPrivateKey(),returns the privatekey.
javax.security.auth.x500.X500PrivateCredential.isDestroyed(),determines if the references to the x.
javax.security.cert.Certificate.equals(java.lang.Object),compares this certificate for equality with the specified object.
javax.security.cert.Certificate.getEncoded(),returns the encoded form of this certificate.
javax.security.cert.Certificate.getPublicKey(),gets the public key from this certificate.
javax.security.cert.Certificate.hashCode(),returns a hashcode value for this certificate from its encoded form.
javax.security.cert.Certificate.toString(),returns a string representation of this certificate.
javax.security.cert.Certificate.verify(java.security.PublicKey),verifies that this certificate was signed using the private key that corresponds to the specified public key.
"javax.security.cert.Certificate.verify(java.security.PublicKey,java.lang.String)",verifies that this certificate was signed using the private key that corresponds to the specified public key.
javax.security.cert.X509Certificate.checkValidity(),checks that the certificate is currently valid.
javax.security.cert.X509Certificate.checkValidity(java.util.Date),checks that the specified date is within the certificate's validity period.
javax.security.cert.X509Certificate.getInstance(java.io.InputStream),"instantiates an x509certificate object, and initializes it with the data read from the input stream instream."
javax.security.cert.X509Certificate.getInstance(byte[]),"instantiates an x509certificate object, and initializes it with the specified byte array."
javax.security.cert.X509Certificate.getIssuerDN(),gets the issuer (issuer distinguished name) value from the certificate.
javax.security.cert.X509Certificate.getNotAfter(),gets the notafter date from the validity period of the certificate.
javax.security.cert.X509Certificate.getNotBefore(),gets the notbefore date from the validity period of the certificate.
javax.security.cert.X509Certificate.getSerialNumber(),gets the serialnumber value from the certificate.
javax.security.cert.X509Certificate.getSigAlgName(),gets the signature algorithm name for the certificate signature algorithm.
javax.security.cert.X509Certificate.getSigAlgOID(),gets the signature algorithm oid string from the certificate.
javax.security.cert.X509Certificate.getSigAlgParams(),gets the der-encoded signature algorithm parameters from this certificate's signature algorithm.
javax.security.cert.X509Certificate.getSubjectDN(),gets the subject (subject distinguished name) value from the certificate.
javax.security.cert.X509Certificate.getVersion(),gets the version (version number) value from the certificate.
javax.security.sasl.SaslClient.dispose(),disposes of any system resources or security-sensitive information the saslclient might be using.
javax.security.sasl.SaslClient.evaluateChallenge(byte[]),evaluates the challenge data and generates a response.
javax.security.sasl.SaslClient.getMechanismName(),returns the iana-registered mechanism name of this sasl client.
javax.security.sasl.SaslClient.getNegotiatedProperty(java.lang.String),retrieves the negotiated property.
javax.security.sasl.SaslClient.hasInitialResponse(),determines whether this mechanism has an optional initial response.
javax.security.sasl.SaslClient.isComplete(),determines whether the authentication exchange has completed.
"javax.security.sasl.SaslClient.unwrap(byte[],int,int)",unwraps a byte array received from the server.
"javax.security.sasl.SaslClient.wrap(byte[],int,int)",wraps a byte array to be sent to the server.
"javax.security.sasl.SaslClientFactory.createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,,?>,javax.security.auth.callback.CallbackHandler)",creates a saslclient using the parameters supplied.
"javax.security.sasl.SaslClientFactory.getMechanismNames(,?>)",returns an array of names of mechanisms that match the specified mechanism selection policies.
javax.security.sasl.SaslServer.dispose(),disposes of any system resources or security-sensitive information the saslserver might be using.
javax.security.sasl.SaslServer.evaluateResponse(byte[]),evaluates the response data and generates a challenge.
javax.security.sasl.SaslServer.getAuthorizationID(),reports the authorization id in effect for the client of this session.
javax.security.sasl.SaslServer.getMechanismName(),returns the iana-registered mechanism name of this sasl server.
javax.security.sasl.SaslServer.getNegotiatedProperty(java.lang.String),retrieves the negotiated property.
javax.security.sasl.SaslServer.isComplete(),determines whether the authentication exchange has completed.
"javax.security.sasl.SaslServer.unwrap(byte[],int,int)",unwraps a byte array received from the client.
"javax.security.sasl.SaslServer.wrap(byte[],int,int)",wraps a byte array to be sent to the client.
"javax.security.sasl.SaslServerFactory.createSaslServer(java.lang.String,java.lang.String,java.lang.String,,?>,javax.security.auth.callback.CallbackHandler)",creates a saslserver using the parameters supplied.
"javax.security.sasl.SaslServerFactory.getMechanismNames(,?>)",returns an array of names of mechanisms that match the specified mechanism selection policies.
javax.security.sasl.AuthorizeCallback.getAuthenticationID(),returns the authentication id to check.
javax.security.sasl.AuthorizeCallback.getAuthorizationID(),returns the authorization id to check.
javax.security.sasl.AuthorizeCallback.getAuthorizedID(),returns the id of the authorized user.
javax.security.sasl.AuthorizeCallback.isAuthorized(),determines whether the authentication id is allowed to act on behalf of the authorization id.
javax.security.sasl.AuthorizeCallback.setAuthorized(boolean),sets whether the authorization is allowed.
javax.security.sasl.AuthorizeCallback.setAuthorizedID(java.lang.String),sets the id of the authorized entity.
"javax.security.sasl.Sasl.createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,,?>,javax.security.auth.callback.CallbackHandler)",creates a saslclient using the parameters supplied.
"javax.security.sasl.Sasl.createSaslServer(java.lang.String,java.lang.String,java.lang.String,,?>,javax.security.auth.callback.CallbackHandler)",creates a saslserver for the specified mechanism.
javax.security.sasl.Sasl.getSaslClientFactories(),gets an enumeration of known factories for producing saslclient.
javax.security.sasl.Sasl.getSaslServerFactories(),gets an enumeration of known factories for producing saslserver.
javax.security.sasl.SaslException.toString(),returns the string representation of this exception.
javax.sound.midi.ControllerEventListener.controlChange(javax.sound.midi.ShortMessage),invoked when a sequencer has encountered and processed a control-change event of interest to this listener.
javax.sound.midi.MetaEventListener.meta(javax.sound.midi.MetaMessage),invoked when a sequencer has encountered and processed a metamessage in the sequence it is processing.
javax.sound.midi.MidiChannel.allNotesOff(),turns off all notes that are currently sounding on this channel.
javax.sound.midi.MidiChannel.allSoundOff(),"immediately turns off all sounding notes on this channel, ignoring the state of the hold pedal and the internal decay rate of the current instrument."
"javax.sound.midi.MidiChannel.controlChange(int,int)",reacts to a change in the specified controller's value.
javax.sound.midi.MidiChannel.getChannelPressure(),obtains the channel's keyboard pressure.
javax.sound.midi.MidiChannel.getController(int),obtains the current value of the specified controller.
javax.sound.midi.MidiChannel.getMono(),obtains the current mono/poly mode.
javax.sound.midi.MidiChannel.getMute(),obtains the current mute state for this channel.
javax.sound.midi.MidiChannel.getOmni(),obtains the current omni mode.
javax.sound.midi.MidiChannel.getPitchBend(),obtains the upward or downward pitch offset for this channel.
javax.sound.midi.MidiChannel.getPolyPressure(int),obtains the pressure with which the specified key is being depressed.
javax.sound.midi.MidiChannel.getProgram(),obtains the current program number for this channel.
javax.sound.midi.MidiChannel.getSolo(),obtains the current solo state for this channel.
javax.sound.midi.MidiChannel.localControl(boolean),turns local control on or off.
"javax.sound.midi.MidiChannel.noteOff(int,int)",turns the specified note off.
javax.sound.midi.MidiChannel.noteOff(int),turns the specified note off.
"javax.sound.midi.MidiChannel.noteOn(int,int)",starts the specified note sounding.
javax.sound.midi.MidiChannel.programChange(int),changes a program (patch).
"javax.sound.midi.MidiChannel.programChange(int,int)",changes the program using bank and program (patch) numbers.
javax.sound.midi.MidiChannel.resetAllControllers(),resets all the implemented controllers to their default values.
javax.sound.midi.MidiChannel.setChannelPressure(int),reacts to a change in the keyboard pressure.
javax.sound.midi.MidiChannel.setMono(boolean),turns mono mode on or off.
javax.sound.midi.MidiChannel.setMute(boolean),sets the mute state for this channel.
javax.sound.midi.MidiChannel.setOmni(boolean),turns omni mode on or off.
javax.sound.midi.MidiChannel.setPitchBend(int),changes the pitch offset for all notes on this channel.
"javax.sound.midi.MidiChannel.setPolyPressure(int,int)",reacts to a change in the specified note's key pressure.
javax.sound.midi.MidiChannel.setSolo(boolean),sets the solo state for this channel.
javax.sound.midi.MidiDevice.close(),"closes the device, indicating that the device should now release any system resources it is using."
javax.sound.midi.MidiDevice.getDeviceInfo(),"obtains information about the device, including its java class and strings containing its name, vendor, and description."
javax.sound.midi.MidiDevice.getMaxReceivers(),obtains the maximum number of midi in connections available on this midi device for receiving midi data.
javax.sound.midi.MidiDevice.getMaxTransmitters(),obtains the maximum number of midi out connections available on this midi device for transmitting midi data.
javax.sound.midi.MidiDevice.getMicrosecondPosition(),"obtains the current time-stamp of the device, in microseconds."
javax.sound.midi.MidiDevice.getReceiver(),obtains a midi in receiver through which the midi device may receive midi data.
javax.sound.midi.MidiDevice.getReceivers(),"returns all currently active, non-closed receivers connected with this mididevice."
javax.sound.midi.MidiDevice.getTransmitter(),obtains a midi out connection from which the midi device will transmit midi data the returned transmitter must be closed when the application has finished using it.
javax.sound.midi.MidiDevice.getTransmitters(),"returns all currently active, non-closed transmitters connected with this mididevice."
javax.sound.midi.MidiDevice.isOpen(),reports whether the device is open.
javax.sound.midi.MidiDevice.open(),"opens the device, indicating that it should now acquire any system resources it requires and become operational."
javax.sound.midi.MidiDeviceReceiver.getMidiDevice(),obtains a mididevice object which is an owner of this receiver.
javax.sound.midi.MidiDeviceTransmitter.getMidiDevice(),obtains a mididevice object which is an owner of this transmitter.
javax.sound.midi.Receiver.close(),"indicates that the application has finished using the receiver, and that limited resources it requires may be released or made available."
"javax.sound.midi.Receiver.send(javax.sound.midi.MidiMessage,long)",sends a midi message and time-stamp to this receiver.
"javax.sound.midi.Sequencer.addControllerEventListener(javax.sound.midi.ControllerEventListener,int[])",registers a controller event listener to receive notification whenever the sequencer processes a control-change event of the requested type or types.
javax.sound.midi.Sequencer.addMetaEventListener(javax.sound.midi.MetaEventListener),registers a meta-event listener to receive notification whenever a meta-event is encountered in the sequence and processed by the sequencer.
javax.sound.midi.Sequencer.getLoopCount(),obtains the number of repetitions for playback.
javax.sound.midi.Sequencer.getLoopEndPoint(),"obtains the end position of the loop, in midi ticks."
javax.sound.midi.Sequencer.getLoopStartPoint(),"obtains the start position of the loop, in midi ticks."
javax.sound.midi.Sequencer.getMasterSyncMode(),obtains the current master synchronization mode for this sequencer.
javax.sound.midi.Sequencer.getMasterSyncModes(),obtains the set of master synchronization modes supported by this sequencer.
javax.sound.midi.Sequencer.getMicrosecondLength(),"obtains the length of the current sequence, expressed in microseconds, or 0 if no sequence is set."
javax.sound.midi.Sequencer.getMicrosecondPosition(),"obtains the current position in the sequence, expressed in microseconds."
javax.sound.midi.Sequencer.getSequence(),obtains the sequence on which the sequencer is currently operating.
javax.sound.midi.Sequencer.getSlaveSyncMode(),obtains the current slave synchronization mode for this sequencer.
javax.sound.midi.Sequencer.getSlaveSyncModes(),obtains the set of slave synchronization modes supported by the sequencer.
javax.sound.midi.Sequencer.getTempoFactor(),returns the current tempo factor for the sequencer.
javax.sound.midi.Sequencer.getTempoInBPM(),"obtains the current tempo, expressed in beats per minute."
javax.sound.midi.Sequencer.getTempoInMPQ(),"obtains the current tempo, expressed in microseconds per quarter note."
javax.sound.midi.Sequencer.getTickLength(),"obtains the length of the current sequence, expressed in midi ticks, or 0 if no sequence is set."
javax.sound.midi.Sequencer.getTickPosition(),"obtains the current position in the sequence, expressed in midi ticks."
javax.sound.midi.Sequencer.getTrackMute(int),obtains the current mute state for a track.
javax.sound.midi.Sequencer.getTrackSolo(int),obtains the current solo state for a track.
javax.sound.midi.Sequencer.isRecording(),indicates whether the sequencer is currently recording.
javax.sound.midi.Sequencer.isRunning(),indicates whether the sequencer is currently running.
javax.sound.midi.Sequencer.recordDisable(javax.sound.midi.Track),disables recording to the specified track.
"javax.sound.midi.Sequencer.recordEnable(javax.sound.midi.Track,int)",prepares the specified track for recording events received on a particular channel.
"javax.sound.midi.Sequencer.removeControllerEventListener(javax.sound.midi.ControllerEventListener,int[])",removes a controller event listener's interest in one or more types of controller event.
javax.sound.midi.Sequencer.removeMetaEventListener(javax.sound.midi.MetaEventListener),"removes the specified meta-event listener from this sequencer's list of registered listeners, if in fact the listener is registered."
javax.sound.midi.Sequencer.setLoopCount(int),sets the number of repetitions of the loop for playback.
javax.sound.midi.Sequencer.setLoopEndPoint(long),sets the last midi tick that will be played in the loop.
javax.sound.midi.Sequencer.setLoopStartPoint(long),sets the first midi tick that will be played in the loop.
javax.sound.midi.Sequencer.setMasterSyncMode(javax.sound.midi.Sequencer.SyncMode),sets the source of timing information used by this sequencer.
javax.sound.midi.Sequencer.setMicrosecondPosition(long),"sets the current position in the sequence, expressed in microseconds."
javax.sound.midi.Sequencer.setSequence(javax.sound.midi.Sequence),sets the current sequence on which the sequencer operates.
javax.sound.midi.Sequencer.setSequence(java.io.InputStream),sets the current sequence on which the sequencer operates.
javax.sound.midi.Sequencer.setSlaveSyncMode(javax.sound.midi.Sequencer.SyncMode),sets the slave synchronization mode for the sequencer.
javax.sound.midi.Sequencer.setTempoFactor(float),scales the sequencer's actual playback tempo by the factor provided.
javax.sound.midi.Sequencer.setTempoInBPM(float),sets the tempo in beats per minute.
javax.sound.midi.Sequencer.setTempoInMPQ(float),sets the tempo in microseconds per quarter note.
javax.sound.midi.Sequencer.setTickPosition(long),sets the current sequencer position in midi ticks.
"javax.sound.midi.Sequencer.setTrackMute(int,boolean)",sets the mute state for a track.
"javax.sound.midi.Sequencer.setTrackSolo(int,boolean)",sets the solo state for a track.
javax.sound.midi.Sequencer.start(),starts playback of the midi data in the currently loaded sequence.
javax.sound.midi.Sequencer.startRecording(),starts recording and playback of midi data.
javax.sound.midi.Sequencer.stop(),"stops recording, if active, and playback of the currently loaded sequence, if any."
javax.sound.midi.Sequencer.stopRecording(),"stops recording, if active."
javax.sound.midi.Soundbank.getDescription(),"obtains a textual description of the sound bank, suitable for display."
javax.sound.midi.Soundbank.getInstrument(javax.sound.midi.Patch),obtains an instrument from the given patch.
javax.sound.midi.Soundbank.getInstruments(),obtains a list of instruments contained in this sound bank.
javax.sound.midi.Soundbank.getName(),obtains the name of the sound bank.
javax.sound.midi.Soundbank.getResources(),extracts a list of non-instrument resources contained in the sound bank.
javax.sound.midi.Soundbank.getVendor(),obtains a string naming the company that provides the sound bank.
javax.sound.midi.Soundbank.getVersion(),obtains the version string for the sound bank.
javax.sound.midi.Synthesizer.getAvailableInstruments(),obtains a list of instruments that come with the synthesizer.
javax.sound.midi.Synthesizer.getChannels(),obtains the set of midi channels controlled by this synthesizer.
javax.sound.midi.Synthesizer.getDefaultSoundbank(),"obtains the default soundbank for the synthesizer, if one exists."
javax.sound.midi.Synthesizer.getLatency(),"obtains the processing latency incurred by this synthesizer, expressed in microseconds."
javax.sound.midi.Synthesizer.getLoadedInstruments(),obtains a list of the instruments that are currently loaded onto this synthesizer.
javax.sound.midi.Synthesizer.getMaxPolyphony(),obtains the maximum number of notes that this synthesizer can sound simultaneously.
javax.sound.midi.Synthesizer.getVoiceStatus(),obtains the current status of the voices produced by this synthesizer.
javax.sound.midi.Synthesizer.isSoundbankSupported(javax.sound.midi.Soundbank),informs the caller whether this synthesizer is capable of loading instruments from the specified soundbank.
javax.sound.midi.Synthesizer.loadAllInstruments(javax.sound.midi.Soundbank),loads onto the synthesizer all instruments contained in the specified soundbank.
javax.sound.midi.Synthesizer.loadInstrument(javax.sound.midi.Instrument),makes a particular instrument available for synthesis.
"javax.sound.midi.Synthesizer.loadInstruments(javax.sound.midi.Soundbank,javax.sound.midi.Patch[])","loads the instruments referenced by the specified patches, from the specified soundbank."
"javax.sound.midi.Synthesizer.remapInstrument(javax.sound.midi.Instrument,javax.sound.midi.Instrument)",remaps an instrument.
javax.sound.midi.Synthesizer.unloadAllInstruments(javax.sound.midi.Soundbank),unloads all instruments contained in the specified soundbank.
javax.sound.midi.Synthesizer.unloadInstrument(javax.sound.midi.Instrument),unloads a particular instrument.
"javax.sound.midi.Synthesizer.unloadInstruments(javax.sound.midi.Soundbank,javax.sound.midi.Patch[])","unloads the instruments referenced by the specified patches, from the midi sound bank specified."
javax.sound.midi.Transmitter.close(),"indicates that the application has finished using the transmitter, and that limited resources it requires may be released or made available."
javax.sound.midi.Transmitter.getReceiver(),obtains the current receiver to which this transmitter will deliver midi messages.
javax.sound.midi.Transmitter.setReceiver(javax.sound.midi.Receiver),sets the receiver to which this transmitter will deliver midi messages.
javax.sound.midi.Instrument.getPatch(),obtains the patch object that indicates the bank and program numbers where this instrument is to be stored in the synthesizer.
javax.sound.midi.MetaMessage.clone(),creates a new object of the same class and with the same contents as this object.
javax.sound.midi.MetaMessage.getData(),obtains a copy of the data for the meta message.
javax.sound.midi.MetaMessage.getType(),obtains the type of the metamessage.
"javax.sound.midi.MetaMessage.setMessage(int,byte[],int)",sets the message parameters for a metamessage.
javax.sound.midi.MidiDevice.Info.equals(java.lang.Object),reports whether two objects are equal.
javax.sound.midi.MidiDevice.Info.getDescription(),obtains the description of the device.
javax.sound.midi.MidiDevice.Info.getName(),obtains the name of the device.
javax.sound.midi.MidiDevice.Info.getVendor(),obtains the name of the company who supplies the device.
javax.sound.midi.MidiDevice.Info.getVersion(),obtains the version of the device.
javax.sound.midi.MidiDevice.Info.hashCode(),finalizes the hashcode method.
javax.sound.midi.MidiDevice.Info.toString(),provides a string representation of the device information.
javax.sound.midi.MidiEvent.getMessage(),obtains the midi message contained in the event.
javax.sound.midi.MidiEvent.getTick(),"obtains the time-stamp for the event, in midi ticks."
javax.sound.midi.MidiEvent.setTick(long),"sets the time-stamp for the event, in midi ticks."
javax.sound.midi.MidiFileFormat.getByteLength(),"obtains the length of the midi file, expressed in 8-bit bytes."
javax.sound.midi.MidiFileFormat.getDivisionType(),obtains the timing division type for the midi file.
javax.sound.midi.MidiFileFormat.getMicrosecondLength(),"obtains the length of the midi file, expressed in microseconds."
javax.sound.midi.MidiFileFormat.getProperty(java.lang.String),obtain the property value specified by the key.
javax.sound.midi.MidiFileFormat.getResolution(),obtains the timing resolution for the midi file.
javax.sound.midi.MidiFileFormat.getType(),obtains the midi file type.
javax.sound.midi.MidiFileFormat.properties(),obtain an unmodifiable map of properties.
javax.sound.midi.MidiMessage.clone(),creates a new object of the same class and with the same contents as this object.
javax.sound.midi.MidiMessage.getLength(),obtains the total length of the midi message in bytes.
javax.sound.midi.MidiMessage.getMessage(),obtains the midi message data.
javax.sound.midi.MidiMessage.getStatus(),obtains the status byte for the midi message.
"javax.sound.midi.MidiMessage.setMessage(byte[],int)",sets the data for the midi message.
javax.sound.midi.MidiSystem.getMidiDevice(javax.sound.midi.MidiDevice.Info),obtains the requested midi device.
javax.sound.midi.MidiSystem.getMidiDeviceInfo(),obtains an array of information objects representing the set of all midi devices available on the system.
javax.sound.midi.MidiSystem.getMidiFileFormat(java.io.InputStream),obtains the midi file format of the data in the specified input stream.
javax.sound.midi.MidiSystem.getMidiFileFormat(java.net.URL),obtains the midi file format of the data in the specified url.
javax.sound.midi.MidiSystem.getMidiFileFormat(java.io.File),obtains the midi file format of the specified file.
javax.sound.midi.MidiSystem.getMidiFileTypes(),obtains the set of midi file types for which file writing support is provided by the system.
javax.sound.midi.MidiSystem.getMidiFileTypes(javax.sound.midi.Sequence),obtains the set of midi file types that the system can write from the sequence specified.
javax.sound.midi.MidiSystem.getReceiver(),obtains a midi receiver from an external midi port or other default device.
javax.sound.midi.MidiSystem.getSequence(java.io.InputStream),obtains a midi sequence from the specified input stream.
javax.sound.midi.MidiSystem.getSequence(java.net.URL),obtains a midi sequence from the specified url.
javax.sound.midi.MidiSystem.getSequence(java.io.File),obtains a midi sequence from the specified file.
javax.sound.midi.MidiSystem.getSequencer(),"obtains the default sequencer, connected to a default device."
javax.sound.midi.MidiSystem.getSequencer(boolean),"obtains the default sequencer, optionally connected to a default device."
javax.sound.midi.MidiSystem.getSoundbank(java.io.InputStream),constructs a midi sound bank by reading it from the specified stream.
javax.sound.midi.MidiSystem.getSoundbank(java.net.URL),constructs a soundbank by reading it from the specified url.
javax.sound.midi.MidiSystem.getSoundbank(java.io.File),constructs a soundbank by reading it from the specified file.
javax.sound.midi.MidiSystem.getSynthesizer(),obtains the default synthesizer.
javax.sound.midi.MidiSystem.getTransmitter(),obtains a midi transmitter from an external midi port or other default source.
javax.sound.midi.MidiSystem.isFileTypeSupported(int),indicates whether file writing support for the specified midi file type is provided by the system.
"javax.sound.midi.MidiSystem.isFileTypeSupported(int,javax.sound.midi.Sequence)",indicates whether a midi file of the file type specified can be written from the sequence indicated.
"javax.sound.midi.MidiSystem.write(javax.sound.midi.Sequence,int,java.io.OutputStream)",writes a stream of bytes representing a file of the midi file type indicated to the output stream provided.
"javax.sound.midi.MidiSystem.write(javax.sound.midi.Sequence,int,java.io.File)",writes a stream of bytes representing a file of the midi file type indicated to the external file provided.
javax.sound.midi.Patch.getBank(),returns the number of the bank that contains the instrument whose location this patch specifies.
javax.sound.midi.Patch.getProgram(),"returns the index, within a bank, of the instrument whose location this patch specifies."
javax.sound.midi.Sequence.createTrack(),"creates a new, initially empty track as part of this sequence."
javax.sound.midi.Sequence.deleteTrack(javax.sound.midi.Track),removes the specified track from the sequence.
javax.sound.midi.Sequence.getDivisionType(),obtains the timing division type for this sequence.
javax.sound.midi.Sequence.getMicrosecondLength(),"obtains the duration of this sequence, expressed in microseconds."
javax.sound.midi.Sequence.getPatchList(),obtains a list of patches referenced in this sequence.
javax.sound.midi.Sequence.getResolution(),obtains the timing resolution for this sequence.
javax.sound.midi.Sequence.getTickLength(),"obtains the duration of this sequence, expressed in midi ticks."
javax.sound.midi.Sequence.getTracks(),obtains an array containing all the tracks in this sequence.
javax.sound.midi.Sequencer.SyncMode.equals(java.lang.Object),determines whether two objects are equal.
javax.sound.midi.Sequencer.SyncMode.hashCode(),finalizes the hashcode method.
javax.sound.midi.Sequencer.SyncMode.toString(),provides this synchronization mode's name as the string representation of the mode.
javax.sound.midi.ShortMessage.clone(),creates a new object of the same class and with the same contents as this object.
javax.sound.midi.ShortMessage.getChannel(),obtains the midi channel associated with this event.
javax.sound.midi.ShortMessage.getCommand(),obtains the midi command associated with this event.
javax.sound.midi.ShortMessage.getData1(),obtains the first data byte in the message.
javax.sound.midi.ShortMessage.getData2(),obtains the second data byte in the message.
javax.sound.midi.ShortMessage.getDataLength(int),retrieves the number of data bytes associated with a particular status byte value.
javax.sound.midi.ShortMessage.setMessage(int),sets the parameters for a midi message that takes no data bytes.
"javax.sound.midi.ShortMessage.setMessage(int,int,int)",sets the parameters for a midi message that takes one or two data bytes.
"javax.sound.midi.ShortMessage.setMessage(int,int,int,int)",sets the short message parameters for a channel message which takes up to two data bytes.
javax.sound.midi.SoundbankResource.getData(),obtains the sampled audio that is stored in this soundbankresource.
javax.sound.midi.SoundbankResource.getDataClass(),obtains the class used by this sample to represent its data.
javax.sound.midi.SoundbankResource.getName(),obtains the name of the resource.
javax.sound.midi.SoundbankResource.getSoundbank(),obtains the sound bank that contains this soundbankresource.
javax.sound.midi.SysexMessage.clone(),creates a new object of the same class and with the same contents as this object.
javax.sound.midi.SysexMessage.getData(),obtains a copy of the data for the system exclusive message.
"javax.sound.midi.SysexMessage.setMessage(byte[],int)",sets the data for the system exclusive message.
"javax.sound.midi.SysexMessage.setMessage(int,byte[],int)",sets the data for the system exclusive message.
javax.sound.midi.Track.add(javax.sound.midi.MidiEvent),adds a new event to the track.
javax.sound.midi.Track.get(int),obtains the event at the specified index.
javax.sound.midi.Track.remove(javax.sound.midi.MidiEvent),removes the specified event from the track.
javax.sound.midi.Track.size(),obtains the number of events in this track.
javax.sound.midi.Track.ticks(),"obtains the length of the track, expressed in midi ticks."
javax.sound.midi.spi.MidiDeviceProvider.getDevice(javax.sound.midi.MidiDevice.Info),obtains an instance of the device represented by the info object.
javax.sound.midi.spi.MidiDeviceProvider.getDeviceInfo(),obtains the set of info objects representing the device or devices provided by this midideviceprovider.
javax.sound.midi.spi.MidiDeviceProvider.isDeviceSupported(javax.sound.midi.MidiDevice.Info),indicates whether the device provider supports the device represented by the specified device info object.
javax.sound.midi.spi.MidiFileReader.getMidiFileFormat(java.io.InputStream),obtains the midi file format of the input stream provided.
javax.sound.midi.spi.MidiFileReader.getMidiFileFormat(java.net.URL),obtains the midi file format of the url provided.
javax.sound.midi.spi.MidiFileReader.getMidiFileFormat(java.io.File),obtains the midi file format of the file provided.
javax.sound.midi.spi.MidiFileReader.getSequence(java.io.InputStream),obtains a midi sequence from the input stream provided.
javax.sound.midi.spi.MidiFileReader.getSequence(java.net.URL),obtains a midi sequence from the url provided.
javax.sound.midi.spi.MidiFileReader.getSequence(java.io.File),obtains a midi sequence from the file provided.
javax.sound.midi.spi.MidiFileWriter.getMidiFileTypes(),obtains the set of midi file types for which file writing support is provided by this file writer.
javax.sound.midi.spi.MidiFileWriter.getMidiFileTypes(javax.sound.midi.Sequence),obtains the file types that this file writer can write from the sequence specified.
javax.sound.midi.spi.MidiFileWriter.isFileTypeSupported(int),indicates whether file writing support for the specified midi file type is provided by this file writer.
"javax.sound.midi.spi.MidiFileWriter.isFileTypeSupported(int,javax.sound.midi.Sequence)",indicates whether a midi file of the file type specified can be written from the sequence indicated.
"javax.sound.midi.spi.MidiFileWriter.write(javax.sound.midi.Sequence,int,java.io.OutputStream)",writes a stream of bytes representing a midi file of the file type indicated to the output stream provided.
"javax.sound.midi.spi.MidiFileWriter.write(javax.sound.midi.Sequence,int,java.io.File)",writes a stream of bytes representing a midi file of the file type indicated to the external file provided.
javax.sound.midi.spi.SoundbankReader.getSoundbank(java.net.URL),obtains a soundbank object from the url provided.
javax.sound.midi.spi.SoundbankReader.getSoundbank(java.io.InputStream),obtains a soundbank object from the inputstream provided.
javax.sound.midi.spi.SoundbankReader.getSoundbank(java.io.File),obtains a soundbank object from the file provided.
javax.sound.sampled.Clip.getFrameLength(),obtains the media length in sample frames.
javax.sound.sampled.Clip.getMicrosecondLength(),obtains the media duration in microseconds.
javax.sound.sampled.Clip.loop(int),starts looping playback from the current position.
"javax.sound.sampled.Clip.open(javax.sound.sampled.AudioFormat,byte[],int,int)","opens the clip, meaning that it should acquire any required system resources and become operational."
javax.sound.sampled.Clip.open(javax.sound.sampled.AudioInputStream),opens the clip with the format and audio data present in the provided audio input stream.
javax.sound.sampled.Clip.setFramePosition(int),sets the media position in sample frames.
"javax.sound.sampled.Clip.setLoopPoints(int,int)",sets the first and last sample frames that will be played in the loop.
javax.sound.sampled.Clip.setMicrosecondPosition(long),sets the media position in microseconds.
javax.sound.sampled.DataLine.available(),obtains the number of bytes of data currently available to the application for processing in the data line's internal buffer.
javax.sound.sampled.DataLine.drain(),drains queued data from the line by continuing data i/o until the data line's internal buffer has been emptied.
javax.sound.sampled.DataLine.flush(),flushes queued data from the line.
javax.sound.sampled.DataLine.getBufferSize(),obtains the maximum number of bytes of data that will fit in the data line's internal buffer.
javax.sound.sampled.DataLine.getFormat(),"obtains the current format (encoding, sample rate, number of channels, etc."
javax.sound.sampled.DataLine.getFramePosition(),"obtains the current position in the audio data, in sample frames."
javax.sound.sampled.DataLine.getLevel(),obtains the current volume level for the line.
javax.sound.sampled.DataLine.getLongFramePosition(),"obtains the current position in the audio data, in sample frames."
javax.sound.sampled.DataLine.getMicrosecondPosition(),"obtains the current position in the audio data, in microseconds."
javax.sound.sampled.DataLine.isActive(),indicates whether the line is engaging in active i/o (such as playback or capture).
javax.sound.sampled.DataLine.isRunning(),indicates whether the line is running.
javax.sound.sampled.DataLine.start(),allows a line to engage in data i/o.
javax.sound.sampled.DataLine.stop(),stops the line.
javax.sound.sampled.Line.addLineListener(javax.sound.sampled.LineListener),adds a listener to this line.
javax.sound.sampled.Line.close(),"closes the line, indicating that any system resources in use by the line can be released."
javax.sound.sampled.Line.getControl(javax.sound.sampled.Control.Type),"obtains a control of the specified type, if there is any."
javax.sound.sampled.Line.getControls(),obtains the set of controls associated with this line.
javax.sound.sampled.Line.getLineInfo(),obtains the line.
javax.sound.sampled.Line.isControlSupported(javax.sound.sampled.Control.Type),indicates whether the line supports a control of the specified type.
javax.sound.sampled.Line.isOpen(),"indicates whether the line is open, meaning that it has reserved system resources and is operational, although it might not currently be playing or capturing sound."
javax.sound.sampled.Line.open(),"opens the line, indicating that it should acquire any required system resources and become operational."
javax.sound.sampled.Line.removeLineListener(javax.sound.sampled.LineListener),removes the specified listener from this line's list of listeners.
javax.sound.sampled.LineListener.update(javax.sound.sampled.LineEvent),informs the listener that a line's state has changed.
javax.sound.sampled.Mixer.getLine(javax.sound.sampled.Line.Info),obtains a line that is available for use and that matches the description in the specified line.
javax.sound.sampled.Mixer.getMaxLines(javax.sound.sampled.Line.Info),obtains the approximate maximum number of lines of the requested type that can be open simultaneously on the mixer.
javax.sound.sampled.Mixer.getMixerInfo(),"obtains information about this mixer, including the product's name, version, vendor, etc."
javax.sound.sampled.Mixer.getSourceLineInfo(),obtains information about the set of source lines supported by this mixer.
javax.sound.sampled.Mixer.getSourceLineInfo(javax.sound.sampled.Line.Info),obtains information about source lines of a particular type supported by the mixer.
javax.sound.sampled.Mixer.getSourceLines(),obtains the set of all source lines currently open to this mixer.
javax.sound.sampled.Mixer.getTargetLineInfo(),obtains information about the set of target lines supported by this mixer.
javax.sound.sampled.Mixer.getTargetLineInfo(javax.sound.sampled.Line.Info),obtains information about target lines of a particular type supported by the mixer.
javax.sound.sampled.Mixer.getTargetLines(),obtains the set of all target lines currently open from this mixer.
javax.sound.sampled.Mixer.isLineSupported(javax.sound.sampled.Line.Info),indicates whether the mixer supports a line (or lines) that match the specified line.
"javax.sound.sampled.Mixer.isSynchronizationSupported(javax.sound.sampled.Line[],boolean)",reports whether this mixer supports synchronization of the specified set of lines.
"javax.sound.sampled.Mixer.synchronize(javax.sound.sampled.Line[],boolean)",synchronizes two or more lines.
javax.sound.sampled.Mixer.unsynchronize(javax.sound.sampled.Line[]),releases synchronization for the specified lines.
"javax.sound.sampled.SourceDataLine.open(javax.sound.sampled.AudioFormat,int)","opens the line with the specified format and suggested buffer size, causing the line to acquire any required system resources and become operational."
javax.sound.sampled.SourceDataLine.open(javax.sound.sampled.AudioFormat),"opens the line with the specified format, causing the line to acquire any required system resources and become operational."
"javax.sound.sampled.SourceDataLine.write(byte[],int,int)",writes audio data to the mixer via this source data line.
"javax.sound.sampled.TargetDataLine.open(javax.sound.sampled.AudioFormat,int)","opens the line with the specified format and requested buffer size, causing the line to acquire any required system resources and become operational."
javax.sound.sampled.TargetDataLine.open(javax.sound.sampled.AudioFormat),"opens the line with the specified format, causing the line to acquire any required system resources and become operational."
"javax.sound.sampled.TargetDataLine.read(byte[],int,int)",reads audio data from the data line's input buffer.
javax.sound.sampled.AudioFileFormat.getByteLength(),obtains the size in bytes of the entire audio file (not just its audio data).
javax.sound.sampled.AudioFileFormat.getFormat(),obtains the format of the audio data contained in the audio file.
javax.sound.sampled.AudioFileFormat.getFrameLength(),"obtains the length of the audio data contained in the file, expressed in sample frames."
javax.sound.sampled.AudioFileFormat.getProperty(java.lang.String),obtain the property value specified by the key.
javax.sound.sampled.AudioFileFormat.getType(),"obtains the audio file type, such as wave or au."
javax.sound.sampled.AudioFileFormat.properties(),obtain an unmodifiable map of properties.
javax.sound.sampled.AudioFileFormat.toString(),provides a string representation of the file format.
javax.sound.sampled.AudioFileFormat.Type.equals(java.lang.Object),finalizes the equals method.
javax.sound.sampled.AudioFileFormat.Type.getExtension(),obtains the common file name extension for this file type.
javax.sound.sampled.AudioFileFormat.Type.hashCode(),finalizes the hashcode method.
javax.sound.sampled.AudioFileFormat.Type.toString(),provides the file type's name as the string representation of the file type.
javax.sound.sampled.AudioFormat.getChannels(),obtains the number of channels.
javax.sound.sampled.AudioFormat.getEncoding(),obtains the type of encoding for sounds in this format.
javax.sound.sampled.AudioFormat.getFrameRate(),obtains the frame rate in frames per second.
javax.sound.sampled.AudioFormat.getFrameSize(),obtains the frame size in bytes.
javax.sound.sampled.AudioFormat.getProperty(java.lang.String),obtain the property value specified by the key.
javax.sound.sampled.AudioFormat.getSampleRate(),obtains the sample rate.
javax.sound.sampled.AudioFormat.getSampleSizeInBits(),obtains the size of a sample.
javax.sound.sampled.AudioFormat.isBigEndian(),indicates whether the audio data is stored in big-endian or little-endian byte order.
javax.sound.sampled.AudioFormat.matches(javax.sound.sampled.AudioFormat),indicates whether this format matches the one specified.
javax.sound.sampled.AudioFormat.properties(),obtain an unmodifiable map of properties.
javax.sound.sampled.AudioFormat.toString(),"returns a string that describes the format, such as: ""pcm signed 22050 hz 16 bit mono big-endian""."
javax.sound.sampled.AudioFormat.Encoding.equals(java.lang.Object),finalizes the equals method.
javax.sound.sampled.AudioFormat.Encoding.hashCode(),finalizes the hashcode method.
javax.sound.sampled.AudioFormat.Encoding.toString(),provides the string representation of the encoding.
javax.sound.sampled.AudioInputStream.available(),returns the maximum number of bytes that can be read (or skipped over) from this audio input stream without blocking.
javax.sound.sampled.AudioInputStream.close(),closes this audio input stream and releases any system resources associated with the stream.
javax.sound.sampled.AudioInputStream.getFormat(),obtains the audio format of the sound data in this audio input stream.
javax.sound.sampled.AudioInputStream.getFrameLength(),"obtains the length of the stream, expressed in sample frames rather than bytes."
javax.sound.sampled.AudioInputStream.mark(int),marks the current position in this audio input stream.
javax.sound.sampled.AudioInputStream.markSupported(),tests whether this audio input stream supports the mark and reset methods.
javax.sound.sampled.AudioInputStream.read(),reads the next byte of data from the audio input stream.
javax.sound.sampled.AudioInputStream.read(byte[]),reads some number of bytes from the audio input stream and stores them into the buffer array b.
"javax.sound.sampled.AudioInputStream.read(byte[],int,int)","reads up to a specified maximum number of bytes of data from the audio stream, putting them into the given byte array."
javax.sound.sampled.AudioInputStream.reset(),repositions this audio input stream to the position it had at the time its mark method was last invoked.
javax.sound.sampled.AudioInputStream.skip(long),skips over and discards a specified number of bytes from this audio input stream.
javax.sound.sampled.AudioSystem.getAudioFileFormat(java.io.InputStream),obtains the audio file format of the provided input stream.
javax.sound.sampled.AudioSystem.getAudioFileFormat(java.net.URL),obtains the audio file format of the specified url.
javax.sound.sampled.AudioSystem.getAudioFileFormat(java.io.File),obtains the audio file format of the specified file.
javax.sound.sampled.AudioSystem.getAudioFileTypes(),obtains the file types for which file writing support is provided by the system.
javax.sound.sampled.AudioSystem.getAudioFileTypes(javax.sound.sampled.AudioInputStream),obtains the file types that the system can write from the audio input stream specified.
"javax.sound.sampled.AudioSystem.getAudioInputStream(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioInputStream)","obtains an audio input stream of the indicated encoding, by converting the provided audio input stream."
"javax.sound.sampled.AudioSystem.getAudioInputStream(javax.sound.sampled.AudioFormat,javax.sound.sampled.AudioInputStream)","obtains an audio input stream of the indicated format, by converting the provided audio input stream."
javax.sound.sampled.AudioSystem.getAudioInputStream(java.io.InputStream),obtains an audio input stream from the provided input stream.
javax.sound.sampled.AudioSystem.getAudioInputStream(java.net.URL),obtains an audio input stream from the url provided.
javax.sound.sampled.AudioSystem.getAudioInputStream(java.io.File),obtains an audio input stream from the provided file.
javax.sound.sampled.AudioSystem.getClip(),obtains a clip that can be used for playing back an audio file or an audio stream.
javax.sound.sampled.AudioSystem.getClip(javax.sound.sampled.Mixer.Info),obtains a clip from the specified mixer that can be used for playing back an audio file or an audio stream.
javax.sound.sampled.AudioSystem.getLine(javax.sound.sampled.Line.Info),obtains a line that matches the description in the specified line.
javax.sound.sampled.AudioSystem.getMixer(javax.sound.sampled.Mixer.Info),obtains the requested audio mixer.
javax.sound.sampled.AudioSystem.getMixerInfo(),obtains an array of mixer info objects that represents the set of audio mixers that are currently installed on the system.
javax.sound.sampled.AudioSystem.getSourceDataLine(javax.sound.sampled.AudioFormat),obtains a source data line that can be used for playing back audio data in the format specified by the audioformat object.
"javax.sound.sampled.AudioSystem.getSourceDataLine(javax.sound.sampled.AudioFormat,javax.sound.sampled.Mixer.Info)","obtains a source data line that can be used for playing back audio data in the format specified by the audioformat object, provided by the mixer specified by the mixer."
javax.sound.sampled.AudioSystem.getSourceLineInfo(javax.sound.sampled.Line.Info),obtains information about all source lines of a particular type that are supported by the installed mixers.
javax.sound.sampled.AudioSystem.getTargetDataLine(javax.sound.sampled.AudioFormat),obtains a target data line that can be used for recording audio data in the format specified by the audioformat object.
"javax.sound.sampled.AudioSystem.getTargetDataLine(javax.sound.sampled.AudioFormat,javax.sound.sampled.Mixer.Info)","obtains a target data line that can be used for recording audio data in the format specified by the audioformat object, provided by the mixer specified by the mixer."
javax.sound.sampled.AudioSystem.getTargetEncodings(javax.sound.sampled.AudioFormat.Encoding),obtains the encodings that the system can obtain from an audio input stream with the specified encoding using the set of installed format converters.
javax.sound.sampled.AudioSystem.getTargetEncodings(javax.sound.sampled.AudioFormat),obtains the encodings that the system can obtain from an audio input stream with the specified format using the set of installed format converters.
"javax.sound.sampled.AudioSystem.getTargetFormats(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioFormat)",obtains the formats that have a particular encoding and that the system can obtain from a stream of the specified format using the set of installed format converters.
javax.sound.sampled.AudioSystem.getTargetLineInfo(javax.sound.sampled.Line.Info),obtains information about all target lines of a particular type that are supported by the installed mixers.
"javax.sound.sampled.AudioSystem.isConversionSupported(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioFormat)",indicates whether an audio input stream of the specified encoding can be obtained from an audio input stream that has the specified format.
"javax.sound.sampled.AudioSystem.isConversionSupported(javax.sound.sampled.AudioFormat,javax.sound.sampled.AudioFormat)",indicates whether an audio input stream of a specified format can be obtained from an audio input stream of another specified format.
javax.sound.sampled.AudioSystem.isFileTypeSupported(javax.sound.sampled.AudioFileFormat.Type),indicates whether file writing support for the specified file type is provided by the system.
"javax.sound.sampled.AudioSystem.isFileTypeSupported(javax.sound.sampled.AudioFileFormat.Type,javax.sound.sampled.AudioInputStream)",indicates whether an audio file of the specified file type can be written from the indicated audio input stream.
javax.sound.sampled.AudioSystem.isLineSupported(javax.sound.sampled.Line.Info),indicates whether the system supports any lines that match the specified line.
"javax.sound.sampled.AudioSystem.write(javax.sound.sampled.AudioInputStream,javax.sound.sampled.AudioFileFormat.Type,java.io.OutputStream)",writes a stream of bytes representing an audio file of the specified file type to the output stream provided.
"javax.sound.sampled.AudioSystem.write(javax.sound.sampled.AudioInputStream,javax.sound.sampled.AudioFileFormat.Type,java.io.File)",writes a stream of bytes representing an audio file of the specified file type to the external file provided.
javax.sound.sampled.BooleanControl.getStateLabel(boolean),obtains the label for the specified state.
javax.sound.sampled.BooleanControl.getValue(),obtains this control's current value.
javax.sound.sampled.BooleanControl.setValue(boolean),sets the current value for the control.
javax.sound.sampled.BooleanControl.toString(),provides a string representation of the control.
javax.sound.sampled.CompoundControl.getMemberControls(),returns the set of member controls that comprise the compound control.
javax.sound.sampled.CompoundControl.toString(),provides a string representation of the control.
javax.sound.sampled.Control.getType(),obtains the control's type.
javax.sound.sampled.Control.toString(),obtains a string describing the control type and its current state.
javax.sound.sampled.Control.Type.equals(java.lang.Object),finalizes the equals method.
javax.sound.sampled.Control.Type.hashCode(),finalizes the hashcode method.
javax.sound.sampled.Control.Type.toString(),provides the string representation of the control type.
javax.sound.sampled.DataLine.Info.getFormats(),obtains a set of audio formats supported by the data line.
javax.sound.sampled.DataLine.Info.getMaxBufferSize(),obtains the maximum buffer size supported by the data line.
javax.sound.sampled.DataLine.Info.getMinBufferSize(),obtains the minimum buffer size supported by the data line.
javax.sound.sampled.DataLine.Info.isFormatSupported(javax.sound.sampled.AudioFormat),indicates whether this data line supports a particular audio format.
javax.sound.sampled.DataLine.Info.matches(javax.sound.sampled.Line.Info),determines whether the specified info object matches this one.
javax.sound.sampled.DataLine.Info.toString(),obtains a textual description of the data line info.
javax.sound.sampled.EnumControl.getValue(),obtains this control's current value.
javax.sound.sampled.EnumControl.getValues(),returns the set of possible values for this control.
javax.sound.sampled.EnumControl.setValue(java.lang.Object),sets the current value for the control.
javax.sound.sampled.EnumControl.toString(),provides a string representation of the control.
javax.sound.sampled.FloatControl.getMaximum(),obtains the maximum value permitted.
javax.sound.sampled.FloatControl.getMaxLabel(),"obtains the label for the maximum value, such as ""right"" or ""full."
javax.sound.sampled.FloatControl.getMidLabel(),"obtains the label for the mid-point value, such as ""center"" or ""default."
javax.sound.sampled.FloatControl.getMinimum(),obtains the minimum value permitted.
javax.sound.sampled.FloatControl.getMinLabel(),"obtains the label for the minimum value, such as ""left"" or ""off."
javax.sound.sampled.FloatControl.getPrecision(),"obtains the resolution or granularity of the control, in the units that the control measures."
javax.sound.sampled.FloatControl.getUnits(),"obtains the label for the units in which the control's values are expressed, such as ""db"" or ""frames per second."
javax.sound.sampled.FloatControl.getUpdatePeriod(),"obtains the smallest time interval, in microseconds, over which the control's value can change during a shift."
javax.sound.sampled.FloatControl.getValue(),obtains this control's current value.
javax.sound.sampled.FloatControl.setValue(float),sets the current value for the control.
"javax.sound.sampled.FloatControl.shift(float,float,int)","changes the control value from the initial value to the final value linearly over the specified time period, specified in microseconds."
javax.sound.sampled.FloatControl.toString(),provides a string representation of the control.
javax.sound.sampled.Line.Info.getLineClass(),obtains the class of the line that this line.
javax.sound.sampled.Line.Info.matches(javax.sound.sampled.Line.Info),indicates whether the specified info object matches this one.
javax.sound.sampled.Line.Info.toString(),obtains a textual description of the line info.
javax.sound.sampled.LineEvent.getFramePosition(),"obtains the position in the line's audio data when the event occurred, expressed in sample frames."
javax.sound.sampled.LineEvent.getLine(),obtains the audio line that is the source of this event.
javax.sound.sampled.LineEvent.getType(),obtains the event's type.
javax.sound.sampled.LineEvent.toString(),obtains a string representation of the event.
javax.sound.sampled.LineEvent.Type.equals(java.lang.Object),"indicates whether the specified object is equal to this event type, returning true if the objects are identical."
javax.sound.sampled.LineEvent.Type.hashCode(),finalizes the hashcode method.
javax.sound.sampled.LineEvent.Type.toString(),returns the type name as the string representation.
javax.sound.sampled.Mixer.Info.equals(java.lang.Object),"indicates whether two info objects are equal, returning true if they are identical."
javax.sound.sampled.Mixer.Info.getDescription(),obtains the description of the mixer.
javax.sound.sampled.Mixer.Info.getName(),obtains the name of the mixer.
javax.sound.sampled.Mixer.Info.getVendor(),obtains the vendor of the mixer.
javax.sound.sampled.Mixer.Info.getVersion(),obtains the version of the mixer.
javax.sound.sampled.Mixer.Info.hashCode(),finalizes the hashcode method.
javax.sound.sampled.Mixer.Info.toString(),provides a string representation of the mixer info.
javax.sound.sampled.Port.Info.equals(java.lang.Object),finalizes the equals method.
javax.sound.sampled.Port.Info.getName(),obtains the name of the port.
javax.sound.sampled.Port.Info.hashCode(),finalizes the hashcode method.
javax.sound.sampled.Port.Info.isSource(),indicates whether the port is a source or a target for its mixer.
javax.sound.sampled.Port.Info.matches(javax.sound.sampled.Line.Info),indicates whether this info object specified matches this one.
javax.sound.sampled.Port.Info.toString(),provides a string representation of the port.
javax.sound.sampled.ReverbType.equals(java.lang.Object),"indicates whether the specified object is equal to this reverb type, returning true if the objects are identical."
javax.sound.sampled.ReverbType.getDecayTime(),"obtains the decay time, which is the amount of time over which the late reflections attenuate to effective zero."
javax.sound.sampled.ReverbType.getEarlyReflectionDelay(),returns the early reflection delay time in microseconds.
javax.sound.sampled.ReverbType.getEarlyReflectionIntensity(),returns the early reflection intensity in decibels.
javax.sound.sampled.ReverbType.getLateReflectionDelay(),returns the late reflection delay time in microseconds.
javax.sound.sampled.ReverbType.getLateReflectionIntensity(),returns the late reflection intensity in decibels.
javax.sound.sampled.ReverbType.getName(),obtains the name of this reverb type.
javax.sound.sampled.ReverbType.hashCode(),finalizes the hashcode method.
javax.sound.sampled.ReverbType.toString(),"provides a string representation of the reverb type, including its name and its parameter settings."
javax.sound.sampled.spi.AudioFileReader.getAudioFileFormat(java.io.InputStream),obtains the audio file format of the input stream provided.
javax.sound.sampled.spi.AudioFileReader.getAudioFileFormat(java.net.URL),obtains the audio file format of the url provided.
javax.sound.sampled.spi.AudioFileReader.getAudioFileFormat(java.io.File),obtains the audio file format of the file provided.
javax.sound.sampled.spi.AudioFileReader.getAudioInputStream(java.io.InputStream),obtains an audio input stream from the input stream provided.
javax.sound.sampled.spi.AudioFileReader.getAudioInputStream(java.net.URL),obtains an audio input stream from the url provided.
javax.sound.sampled.spi.AudioFileReader.getAudioInputStream(java.io.File),obtains an audio input stream from the file provided.
javax.sound.sampled.spi.AudioFileWriter.getAudioFileTypes(),obtains the file types for which file writing support is provided by this audio file writer.
javax.sound.sampled.spi.AudioFileWriter.getAudioFileTypes(javax.sound.sampled.AudioInputStream),obtains the file types that this audio file writer can write from the audio input stream specified.
javax.sound.sampled.spi.AudioFileWriter.isFileTypeSupported(javax.sound.sampled.AudioFileFormat.Type),indicates whether file writing support for the specified file type is provided by this audio file writer.
"javax.sound.sampled.spi.AudioFileWriter.isFileTypeSupported(javax.sound.sampled.AudioFileFormat.Type,javax.sound.sampled.AudioInputStream)",indicates whether an audio file of the type specified can be written from the audio input stream indicated.
"javax.sound.sampled.spi.AudioFileWriter.write(javax.sound.sampled.AudioInputStream,javax.sound.sampled.AudioFileFormat.Type,java.io.OutputStream)",writes a stream of bytes representing an audio file of the file type indicated to the output stream provided.
"javax.sound.sampled.spi.AudioFileWriter.write(javax.sound.sampled.AudioInputStream,javax.sound.sampled.AudioFileFormat.Type,java.io.File)",writes a stream of bytes representing an audio file of the file format indicated to the external file provided.
"javax.sound.sampled.spi.FormatConversionProvider.getAudioInputStream(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioInputStream)",obtains an audio input stream with the specified encoding from the given audio input stream.
"javax.sound.sampled.spi.FormatConversionProvider.getAudioInputStream(javax.sound.sampled.AudioFormat,javax.sound.sampled.AudioInputStream)",obtains an audio input stream with the specified format from the given audio input stream.
javax.sound.sampled.spi.FormatConversionProvider.getSourceEncodings(),obtains the set of source format encodings from which format conversion services are provided by this provider.
javax.sound.sampled.spi.FormatConversionProvider.getTargetEncodings(),obtains the set of target format encodings to which format conversion services are provided by this provider.
javax.sound.sampled.spi.FormatConversionProvider.getTargetEncodings(javax.sound.sampled.AudioFormat),obtains the set of target format encodings supported by the format converter given a particular source format.
"javax.sound.sampled.spi.FormatConversionProvider.getTargetFormats(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioFormat)","obtains the set of target formats with the encoding specified supported by the format converter if no target formats with the specified encoding are supported for this source format, an array of length 0 is returned."
"javax.sound.sampled.spi.FormatConversionProvider.isConversionSupported(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioFormat)",indicates whether the format converter supports conversion to a particular encoding from a particular format.
"javax.sound.sampled.spi.FormatConversionProvider.isConversionSupported(javax.sound.sampled.AudioFormat,javax.sound.sampled.AudioFormat)",indicates whether the format converter supports conversion to one particular format from another.
javax.sound.sampled.spi.FormatConversionProvider.isSourceEncodingSupported(javax.sound.sampled.AudioFormat.Encoding),indicates whether the format converter supports conversion from the specified source format encoding.
javax.sound.sampled.spi.FormatConversionProvider.isTargetEncodingSupported(javax.sound.sampled.AudioFormat.Encoding),indicates whether the format converter supports conversion to the specified target format encoding.
javax.sound.sampled.spi.MixerProvider.getMixer(javax.sound.sampled.Mixer.Info),obtains an instance of the mixer represented by the info object.
javax.sound.sampled.spi.MixerProvider.getMixerInfo(),obtains the set of info objects representing the mixer or mixers provided by this mixerprovider.
javax.sound.sampled.spi.MixerProvider.isMixerSupported(javax.sound.sampled.Mixer.Info),indicates whether the mixer provider supports the mixer represented by the specified mixer info object.
javax.sql.CommonDataSource.getLoginTimeout(),gets the maximum time in seconds that this data source can wait while attempting to connect to a database.
javax.sql.CommonDataSource.getLogWriter(),retrieves the log writer for this datasource object.
javax.sql.CommonDataSource.getParentLogger(),return the parent logger of all the loggers used by this data source.
javax.sql.CommonDataSource.setLoginTimeout(int),sets the maximum time in seconds that this data source will wait while attempting to connect to a database.
javax.sql.CommonDataSource.setLogWriter(java.io.PrintWriter),sets the log writer for this datasource object to the given java.
javax.sql.ConnectionEventListener.connectionClosed(javax.sql.ConnectionEvent),notifies this connectioneventlistener that the application has called the method close on its representation of a pooled connection.
javax.sql.ConnectionEventListener.connectionErrorOccurred(javax.sql.ConnectionEvent),notifies this connectioneventlistener that a fatal error has occurred and the pooled connection can no longer be used.
javax.sql.ConnectionPoolDataSource.getPooledConnection(),attempts to establish a physical database connection that can be used as a pooled connection.
"javax.sql.ConnectionPoolDataSource.getPooledConnection(java.lang.String,java.lang.String)",attempts to establish a physical database connection that can be used as a pooled connection.
javax.sql.DataSource.getConnection(),attempts to establish a connection with the data source that this datasource object represents.
"javax.sql.DataSource.getConnection(java.lang.String,java.lang.String)",attempts to establish a connection with the data source that this datasource object represents.
javax.sql.PooledConnection.addConnectionEventListener(javax.sql.ConnectionEventListener),registers the given event listener so that it will be notified when an event occurs on this pooledconnection object.
javax.sql.PooledConnection.addStatementEventListener(javax.sql.StatementEventListener),registers a statementeventlistener with this pooledconnection object.
javax.sql.PooledConnection.close(),closes the physical connection that this pooledconnection object represents.
javax.sql.PooledConnection.getConnection(),creates and returns a connection object that is a handle for the physical connection that this pooledconnection object represents.
javax.sql.PooledConnection.removeConnectionEventListener(javax.sql.ConnectionEventListener),removes the given event listener from the list of components that will be notified when an event occurs on this pooledconnection object.
javax.sql.PooledConnection.removeStatementEventListener(javax.sql.StatementEventListener),removes the specified statementeventlistener from the list of components that will be notified when the driver detects that a preparedstatement has been closed or is invalid.
javax.sql.RowSet.addRowSetListener(javax.sql.RowSetListener),registers the given listener so that it will be notified of events that occur on this rowset object.
javax.sql.RowSet.clearParameters(),clears the parameters set for this rowset object's command.
javax.sql.RowSet.execute(),fills this rowset object with data.
javax.sql.RowSet.getCommand(),retrieves this rowset object's command property.
javax.sql.RowSet.getDataSourceName(),retrieves the logical name that identifies the data source for this rowset object.
javax.sql.RowSet.getEscapeProcessing(),retrieves whether escape processing is enabled for this rowset object.
javax.sql.RowSet.getMaxFieldSize(),retrieves the maximum number of bytes that may be returned for certain column values.
javax.sql.RowSet.getMaxRows(),retrieves the maximum number of rows that this rowset object can contain.
javax.sql.RowSet.getPassword(),retrieves the password used to create a database connection.
javax.sql.RowSet.getQueryTimeout(),retrieves the maximum number of seconds the driver will wait for a statement to execute.
javax.sql.RowSet.getTransactionIsolation(),retrieves the transaction isolation level set for this rowset object.
javax.sql.RowSet.getTypeMap(),"retrieves the map object associated with this rowset object, which specifies the custom mapping of sql user-defined types, if any."
javax.sql.RowSet.getUrl(),retrieves the url property this rowset object will use to create a connection if it uses the drivermanager instead of a datasource object to establish the connection.
javax.sql.RowSet.getUsername(),retrieves the username used to create a database connection for this rowset object.
javax.sql.RowSet.isReadOnly(),retrieves whether this rowset object is read-only.
javax.sql.RowSet.removeRowSetListener(javax.sql.RowSetListener),removes the specified listener from the list of components that will be notified when an event occurs on this rowset object.
"javax.sql.RowSet.setArray(int,java.sql.Array)",sets the designated parameter in this rowset object's command with the given array value.
"javax.sql.RowSet.setAsciiStream(int,java.io.InputStream,int)",sets the designated parameter in this rowset object's command to the given java.
"javax.sql.RowSet.setAsciiStream(java.lang.String,java.io.InputStream,int)","sets the designated parameter to the given input stream, which will have the specified number of bytes."
"javax.sql.RowSet.setAsciiStream(int,java.io.InputStream)",sets the designated parameter in this rowset object's command to the given input stream.
"javax.sql.RowSet.setAsciiStream(java.lang.String,java.io.InputStream)",sets the designated parameter to the given input stream.
"javax.sql.RowSet.setBigDecimal(int,java.math.BigDecimal)",sets the designated parameter in this rowset object's command to the given java.
"javax.sql.RowSet.setBigDecimal(java.lang.String,java.math.BigDecimal)",sets the designated parameter to the given java.
"javax.sql.RowSet.setBinaryStream(int,java.io.InputStream,int)",sets the designated parameter in this rowset object's command to the given java.
"javax.sql.RowSet.setBinaryStream(java.lang.String,java.io.InputStream,int)","sets the designated parameter to the given input stream, which will have the specified number of bytes."
"javax.sql.RowSet.setBinaryStream(int,java.io.InputStream)",sets the designated parameter in this rowset object's command to the given input stream.
"javax.sql.RowSet.setBinaryStream(java.lang.String,java.io.InputStream)",sets the designated parameter to the given input stream.
"javax.sql.RowSet.setBlob(int,java.sql.Blob)",sets the designated parameter in this rowset object's command with the given blob value.
"javax.sql.RowSet.setBlob(int,java.io.InputStream,long)",sets the designated parameter to a inputstream object.
"javax.sql.RowSet.setBlob(int,java.io.InputStream)",sets the designated parameter to a inputstream object.
"javax.sql.RowSet.setBlob(java.lang.String,java.io.InputStream,long)",sets the designated parameter to a inputstream object.
"javax.sql.RowSet.setBlob(java.lang.String,java.sql.Blob)",sets the designated parameter to the given java.
"javax.sql.RowSet.setBlob(java.lang.String,java.io.InputStream)",sets the designated parameter to a inputstream object.
"javax.sql.RowSet.setBoolean(int,boolean)",sets the designated parameter in this rowset object's command to the given java boolean value.
"javax.sql.RowSet.setBoolean(java.lang.String,boolean)",sets the designated parameter to the given java boolean value.
"javax.sql.RowSet.setByte(int,byte)",sets the designated parameter in this rowset object's command to the given java byte value.
"javax.sql.RowSet.setByte(java.lang.String,byte)",sets the designated parameter to the given java byte value.
"javax.sql.RowSet.setBytes(int,byte[])",sets the designated parameter in this rowset object's command to the given java array of byte values.
"javax.sql.RowSet.setBytes(java.lang.String,byte[])",sets the designated parameter to the given java array of bytes.
"javax.sql.RowSet.setCharacterStream(int,java.io.Reader,int)",sets the designated parameter in this rowset object's command to the given java.
"javax.sql.RowSet.setCharacterStream(java.lang.String,java.io.Reader,int)","sets the designated parameter to the given reader object, which is the given number of characters long."
"javax.sql.RowSet.setCharacterStream(int,java.io.Reader)",sets the designated parameter in this rowset object's command to the given reader object.
"javax.sql.RowSet.setCharacterStream(java.lang.String,java.io.Reader)",sets the designated parameter to the given reader object.
"javax.sql.RowSet.setClob(int,java.sql.Clob)",sets the designated parameter in this rowset object's command with the given clob value.
"javax.sql.RowSet.setClob(int,java.io.Reader,long)",sets the designated parameter to a reader object.
"javax.sql.RowSet.setClob(int,java.io.Reader)",sets the designated parameter to a reader object.
"javax.sql.RowSet.setClob(java.lang.String,java.io.Reader,long)",sets the designated parameter to a reader object.
"javax.sql.RowSet.setClob(java.lang.String,java.sql.Clob)",sets the designated parameter to the given java.
"javax.sql.RowSet.setClob(java.lang.String,java.io.Reader)",sets the designated parameter to a reader object.
javax.sql.RowSet.setCommand(java.lang.String),sets this rowset object's command property to the given sql query.
javax.sql.RowSet.setConcurrency(int),sets the concurrency of this rowset object to the given concurrency level.
javax.sql.RowSet.setDataSourceName(java.lang.String),sets the data source name property for this rowset object to the given string.
"javax.sql.RowSet.setDate(int,java.sql.Date)",sets the designated parameter in this rowset object's command to the given java.
"javax.sql.RowSet.setDate(int,java.sql.Date,java.util.Calendar)",sets the designated parameter in this rowset object's command with the given java.
"javax.sql.RowSet.setDate(java.lang.String,java.sql.Date)",sets the designated parameter to the given java.
"javax.sql.RowSet.setDate(java.lang.String,java.sql.Date,java.util.Calendar)",sets the designated parameter to the given java.
"javax.sql.RowSet.setDouble(int,double)",sets the designated parameter in this rowset object's command to the given java double value.
"javax.sql.RowSet.setDouble(java.lang.String,double)",sets the designated parameter to the given java double value.
javax.sql.RowSet.setEscapeProcessing(boolean),sets escape processing for this rowset object on or off.
"javax.sql.RowSet.setFloat(int,float)",sets the designated parameter in this rowset object's command to the given java float value.
"javax.sql.RowSet.setFloat(java.lang.String,float)",sets the designated parameter to the given java float value.
"javax.sql.RowSet.setInt(int,int)",sets the designated parameter in this rowset object's command to the given java int value.
"javax.sql.RowSet.setInt(java.lang.String,int)",sets the designated parameter to the given java int value.
"javax.sql.RowSet.setLong(int,long)",sets the designated parameter in this rowset object's command to the given java long value.
"javax.sql.RowSet.setLong(java.lang.String,long)",sets the designated parameter to the given java long value.
javax.sql.RowSet.setMaxFieldSize(int),sets the maximum number of bytes that can be returned for a column value to the given number of bytes.
javax.sql.RowSet.setMaxRows(int),sets the maximum number of rows that this rowset object can contain to the specified number.
"javax.sql.RowSet.setNCharacterStream(int,java.io.Reader)",sets the designated parameter in this rowset object's command to a reader object.
"javax.sql.RowSet.setNCharacterStream(int,java.io.Reader,long)",sets the designated parameter to a reader object.
"javax.sql.RowSet.setNCharacterStream(java.lang.String,java.io.Reader,long)",sets the designated parameter to a reader object.
"javax.sql.RowSet.setNCharacterStream(java.lang.String,java.io.Reader)",sets the designated parameter to a reader object.
"javax.sql.RowSet.setNClob(java.lang.String,java.sql.NClob)",sets the designated parameter to a java.
"javax.sql.RowSet.setNClob(java.lang.String,java.io.Reader,long)",sets the designated parameter to a reader object.
"javax.sql.RowSet.setNClob(java.lang.String,java.io.Reader)",sets the designated parameter to a reader object.
"javax.sql.RowSet.setNClob(int,java.io.Reader,long)",sets the designated parameter to a reader object.
"javax.sql.RowSet.setNClob(int,java.sql.NClob)",sets the designated parameter to a java.
"javax.sql.RowSet.setNClob(int,java.io.Reader)",sets the designated parameter to a reader object.
"javax.sql.RowSet.setNString(int,java.lang.String)",sets the designated parameter to the given string object.
"javax.sql.RowSet.setNString(java.lang.String,java.lang.String)",sets the designated parameter to the given string object.
"javax.sql.RowSet.setNull(int,int)",sets the designated parameter in this rowset object's sql command to sql null.
"javax.sql.RowSet.setNull(java.lang.String,int)",sets the designated parameter to sql null.
"javax.sql.RowSet.setNull(int,int,java.lang.String)",sets the designated parameter in this rowset object's sql command to sql null.
"javax.sql.RowSet.setNull(java.lang.String,int,java.lang.String)",sets the designated parameter to sql null.
"javax.sql.RowSet.setObject(int,java.lang.Object,int,int)",sets the designated parameter in this rowset object's command with the given java object.
"javax.sql.RowSet.setObject(java.lang.String,java.lang.Object,int,int)",sets the value of the designated parameter with the given object.
"javax.sql.RowSet.setObject(int,java.lang.Object,int)",sets the designated parameter in this rowset object's command with a java object.
"javax.sql.RowSet.setObject(java.lang.String,java.lang.Object,int)",sets the value of the designated parameter with the given object.
"javax.sql.RowSet.setObject(java.lang.String,java.lang.Object)",sets the value of the designated parameter with the given object.
"javax.sql.RowSet.setObject(int,java.lang.Object)",sets the designated parameter in this rowset object's command with a java object.
javax.sql.RowSet.setPassword(java.lang.String),sets the database password for this rowset object to the given string.
javax.sql.RowSet.setQueryTimeout(int),sets the maximum time the driver will wait for a statement to execute to the given number of seconds.
javax.sql.RowSet.setReadOnly(boolean),sets whether this rowset object is read-only to the given boolean.
"javax.sql.RowSet.setRef(int,java.sql.Ref)",sets the designated parameter in this rowset object's command with the given ref value.
"javax.sql.RowSet.setRowId(int,java.sql.RowId)",sets the designated parameter to the given java.
"javax.sql.RowSet.setRowId(java.lang.String,java.sql.RowId)",sets the designated parameter to the given java.
"javax.sql.RowSet.setShort(int,short)",sets the designated parameter in this rowset object's command to the given java short value.
"javax.sql.RowSet.setShort(java.lang.String,short)",sets the designated parameter to the given java short value.
"javax.sql.RowSet.setSQLXML(int,java.sql.SQLXML)",sets the designated parameter to the given java.
"javax.sql.RowSet.setSQLXML(java.lang.String,java.sql.SQLXML)",sets the designated parameter to the given java.
"javax.sql.RowSet.setString(int,java.lang.String)",sets the designated parameter in this rowset object's command to the given java string value.
"javax.sql.RowSet.setString(java.lang.String,java.lang.String)",sets the designated parameter to the given java string value.
"javax.sql.RowSet.setTime(int,java.sql.Time)",sets the designated parameter in this rowset object's command to the given java.
"javax.sql.RowSet.setTime(int,java.sql.Time,java.util.Calendar)",sets the designated parameter in this rowset object's command with the given java.
"javax.sql.RowSet.setTime(java.lang.String,java.sql.Time)",sets the designated parameter to the given java.
"javax.sql.RowSet.setTime(java.lang.String,java.sql.Time,java.util.Calendar)",sets the designated parameter to the given java.
"javax.sql.RowSet.setTimestamp(int,java.sql.Timestamp)",sets the designated parameter in this rowset object's command to the given java.
"javax.sql.RowSet.setTimestamp(java.lang.String,java.sql.Timestamp)",sets the designated parameter to the given java.
"javax.sql.RowSet.setTimestamp(int,java.sql.Timestamp,java.util.Calendar)",sets the designated parameter in this rowset object's command with the given java.
"javax.sql.RowSet.setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)",sets the designated parameter to the given java.
javax.sql.RowSet.setTransactionIsolation(int),sets the transaction isolation level for this rowset object.
javax.sql.RowSet.setType(int),sets the type of this rowset object to the given type.
"javax.sql.RowSet.setTypeMap(,java.lang.Class<?>>)",installs the given java.
javax.sql.RowSet.setURL(java.lang.String),sets the url this rowset object will use when it uses the drivermanager to create a connection.
"javax.sql.RowSet.setUrl(int,java.net.URL)",sets the designated parameter to the given java.
javax.sql.RowSet.setUsername(java.lang.String),sets the username property for this rowset object to the given string.
javax.sql.RowSetInternal.getConnection(),retrieves the connection object that was passed to this rowset object.
javax.sql.RowSetInternal.getOriginal(),retrieves a resultset object containing the original value of this rowset object.
javax.sql.RowSetInternal.getOriginalRow(),retrieves a resultset object containing the original value of the current row only.
javax.sql.RowSetInternal.getParams(),retrieves the parameters that have been set for this rowset object's command.
javax.sql.RowSetInternal.setMetaData(javax.sql.RowSetMetaData),sets the given rowsetmetadata object as the rowsetmetadata object for this rowset object.
javax.sql.RowSetListener.cursorMoved(javax.sql.RowSetEvent),notifies registered listeners that a rowset object's cursor has moved.
javax.sql.RowSetListener.rowChanged(javax.sql.RowSetEvent),notifies registered listeners that a rowset object has had a change in one of its rows.
javax.sql.RowSetListener.rowSetChanged(javax.sql.RowSetEvent),notifies registered listeners that a rowset object in the given rowsetevent object has changed its entire contents.
"javax.sql.RowSetMetaData.setAutoIncrement(int,boolean)","sets whether the designated column is automatically numbered, the default is for a rowset object's columns not to be automatically numbered."
"javax.sql.RowSetMetaData.setCaseSensitive(int,boolean)",sets whether the designated column is case sensitive.
"javax.sql.RowSetMetaData.setCatalogName(int,java.lang.String)","sets the designated column's table's catalog name, if any, to the given string."
javax.sql.RowSetMetaData.setColumnCount(int),sets the number of columns in the rowset object to the given number.
"javax.sql.RowSetMetaData.setColumnDisplaySize(int,int)",sets the designated column's normal maximum width in chars to the given int.
"javax.sql.RowSetMetaData.setColumnLabel(int,java.lang.String)","sets the suggested column title for use in printouts and displays, if any, to the given string."
"javax.sql.RowSetMetaData.setColumnName(int,java.lang.String)",sets the name of the designated column to the given string.
"javax.sql.RowSetMetaData.setColumnType(int,int)",sets the designated column's sql type to the one given.
"javax.sql.RowSetMetaData.setColumnTypeName(int,java.lang.String)","sets the designated column's type name that is specific to the data source, if any, to the given string."
"javax.sql.RowSetMetaData.setCurrency(int,boolean)",sets whether the designated column is a cash value.
"javax.sql.RowSetMetaData.setNullable(int,int)",sets whether the designated column's value can be set to null.
"javax.sql.RowSetMetaData.setPrecision(int,int)",sets the designated column's number of decimal digits to the given int.
"javax.sql.RowSetMetaData.setScale(int,int)",sets the designated column's number of digits to the right of the decimal point to the given int.
"javax.sql.RowSetMetaData.setSchemaName(int,java.lang.String)","sets the name of the designated column's table's schema, if any, to the given string."
"javax.sql.RowSetMetaData.setSearchable(int,boolean)",sets whether the designated column can be used in a where clause.
"javax.sql.RowSetMetaData.setSigned(int,boolean)",sets whether the designated column is a signed number.
"javax.sql.RowSetMetaData.setTableName(int,java.lang.String)","sets the designated column's table name, if any, to the given string."
javax.sql.RowSetReader.readData(javax.sql.RowSetInternal),reads the new contents of the calling rowset object.
javax.sql.RowSetWriter.writeData(javax.sql.RowSetInternal),writes the changes in this rowsetwriter object's rowset back to the data source from which it got its data.
javax.sql.StatementEventListener.statementClosed(javax.sql.StatementEvent),the driver calls this method on all statementeventlisteners registered on the connection when it detects that a preparedstatement is closed.
javax.sql.StatementEventListener.statementErrorOccurred(javax.sql.StatementEvent),the driver calls this method on all statementeventlisteners registered on the connection when it detects that a preparedstatement is invalid.
javax.sql.XAConnection.getXAResource(),retrieves an xaresource object that the transaction manager will use to manage this xaconnection object's participation in a distributed transaction.
javax.sql.XADataSource.getXAConnection(),attempts to establish a physical database connection that can be used in a distributed transaction.
"javax.sql.XADataSource.getXAConnection(java.lang.String,java.lang.String)","attempts to establish a physical database connection, using the given user name and password."
javax.sql.ConnectionEvent.getSQLException(),retrieves the sqlexception for this connectionevent object.
javax.sql.StatementEvent.getSQLException(),returns the sqlexception the driver is about to throw.
javax.sql.StatementEvent.getStatement(),returns the preparedstatement that is being closed or is invalid.
javax.sql.rowset.CachedRowSet.acceptChanges(),"propagates row update, insert and delete changes made to this cachedrowset object to the underlying data source."
javax.sql.rowset.CachedRowSet.acceptChanges(java.sql.Connection),"propagates all row update, insert and delete changes to the data source backing this cachedrowset object using the specified connection object to establish a connection to the data source."
javax.sql.rowset.CachedRowSet.columnUpdated(int),indicates whether the designated column in the current row of this cachedrowset object has been updated.
javax.sql.rowset.CachedRowSet.columnUpdated(java.lang.String),indicates whether the designated column in the current row of this cachedrowset object has been updated.
javax.sql.rowset.CachedRowSet.commit(),each cachedrowset object's syncprovider contains a connection object from the resultset or jdbc properties passed to it's constructors.
javax.sql.rowset.CachedRowSet.createCopy(),creates a rowset object that is a deep copy of the data in this cachedrowset object.
javax.sql.rowset.CachedRowSet.createCopyNoConstraints(),creates a cachedrowset object that is a deep copy of this cachedrowset object's data but is independent of it.
javax.sql.rowset.CachedRowSet.createCopySchema(),creates a cachedrowset object that is an empty copy of this cachedrowset object.
javax.sql.rowset.CachedRowSet.createShared(),returns a new rowset object backed by the same data as that of this cachedrowset object.
javax.sql.rowset.CachedRowSet.execute(java.sql.Connection),"populates this cachedrowset object with data, using the given connection to produce the result set from which the data will be read."
javax.sql.rowset.CachedRowSet.getKeyColumns(),returns an array containing one or more column numbers indicating the columns that form a key that uniquely identifies a row in this cachedrowset object.
javax.sql.rowset.CachedRowSet.getOriginal(),returns a resultset object containing the original value of this cachedrowset object.
javax.sql.rowset.CachedRowSet.getOriginalRow(),returns a resultset object containing the original value for the current row only of this cachedrowset object.
javax.sql.rowset.CachedRowSet.getPageSize(),returns the page-size for the cachedrowset object.
javax.sql.rowset.CachedRowSet.getRowSetWarnings(),retrieves the first warning reported by calls on this rowset object.
javax.sql.rowset.CachedRowSet.getShowDeleted(),retrieves a boolean indicating whether rows marked for deletion appear in the set of current rows.
javax.sql.rowset.CachedRowSet.getSyncProvider(),retrieves the syncprovider implementation for this cachedrowset object.
javax.sql.rowset.CachedRowSet.getTableName(),returns an identifier for the object (table) that was used to create this cachedrowset object.
javax.sql.rowset.CachedRowSet.nextPage(),increments the current page of the cachedrowset.
javax.sql.rowset.CachedRowSet.populate(java.sql.ResultSet),populates this cachedrowset object with data from the given resultset object.
"javax.sql.rowset.CachedRowSet.populate(java.sql.ResultSet,int)",populates this cachedrowset object with data from the given resultset object.
javax.sql.rowset.CachedRowSet.previousPage(),decrements the current page of the cachedrowset.
javax.sql.rowset.CachedRowSet.release(),releases the current contents of this cachedrowset object and sends a rowsetchanged event to all registered listeners.
javax.sql.rowset.CachedRowSet.restoreOriginal(),"restores this cachedrowset object to its original value, that is, its value before the last set of changes."
javax.sql.rowset.CachedRowSet.rollback(),each cachedrowset object's syncprovider contains a connection object from the original resultset or jdbc properties passed to it.
javax.sql.rowset.CachedRowSet.rollback(java.sql.Savepoint),each cachedrowset object's syncprovider contains a connection object from the original resultset or jdbc properties passed to it.
"javax.sql.rowset.CachedRowSet.rowSetPopulated(javax.sql.RowSetEvent,int)",notifies registered listeners that a rowset object in the given rowsetevent object has populated a number of additional rows.
javax.sql.rowset.CachedRowSet.setKeyColumns(int[]),"sets this cachedrowset object's keycols field with the given array of column numbers, which forms a key for uniquely identifying a row in this cachedrowset object."
javax.sql.rowset.CachedRowSet.setMetaData(javax.sql.RowSetMetaData),sets the metadata for this cachedrowset object with the given rowsetmetadata object.
javax.sql.rowset.CachedRowSet.setOriginalRow(),sets the current row in this cachedrowset object as the original row.
javax.sql.rowset.CachedRowSet.setPageSize(int),sets the cachedrowset object's page-size.
javax.sql.rowset.CachedRowSet.setShowDeleted(boolean),"sets the property showdeleted to the given boolean value, which determines whether rows marked for deletion appear in the set of current rows."
javax.sql.rowset.CachedRowSet.setSyncProvider(java.lang.String),sets the syncprovider object for this cachedrowset object to the one specified.
javax.sql.rowset.CachedRowSet.setTableName(java.lang.String),sets the identifier for the table from which this cachedrowset object was derived to the given table name.
javax.sql.rowset.CachedRowSet.size(),returns the number of rows in this cachedrowset object.
javax.sql.rowset.CachedRowSet.toCollection(),converts this cachedrowset object to a collection object that contains all of this cachedrowset object's data.
javax.sql.rowset.CachedRowSet.toCollection(int),converts the designated column in this cachedrowset object to a collection object.
javax.sql.rowset.CachedRowSet.toCollection(java.lang.String),converts the designated column in this cachedrowset object to a collection object.
javax.sql.rowset.CachedRowSet.undoDelete(),cancels the deletion of the current row and notifies listeners that a row has changed.
javax.sql.rowset.CachedRowSet.undoInsert(),"immediately removes the current row from this cachedrowset object if the row has been inserted, and also notifies listeners that a row has changed."
javax.sql.rowset.CachedRowSet.undoUpdate(),immediately reverses the last update operation if the row has been modified.
javax.sql.rowset.FilteredRowSet.getFilter(),retrieves the active filter for this filteredrowset object.
javax.sql.rowset.FilteredRowSet.setFilter(javax.sql.rowset.Predicate),applies the given predicate object to this filteredrowset object.
javax.sql.rowset.JdbcRowSet.commit(),each jdbcrowset contains a connection object from the resultset or jdbc properties passed to it's constructors.
javax.sql.rowset.JdbcRowSet.getAutoCommit(),each jdbcrowset contains a connection object from the original resultset or jdbc properties passed to it.
javax.sql.rowset.JdbcRowSet.getRowSetWarnings(),retrieves the first warning reported by calls on this jdbcrowset object.
javax.sql.rowset.JdbcRowSet.getShowDeleted(),retrieves a boolean indicating whether rows marked for deletion appear in the set of current rows.
javax.sql.rowset.JdbcRowSet.rollback(),each jdbcrowset contains a connection object from the original resultset or jdbc properties passed to it.
javax.sql.rowset.JdbcRowSet.rollback(java.sql.Savepoint),each jdbcrowset contains a connection object from the original resultset or jdbc properties passed to it.
javax.sql.rowset.JdbcRowSet.setAutoCommit(boolean),each jdbcrowset contains a connection object from the original resultset or jdbc properties passed to it.
javax.sql.rowset.JdbcRowSet.setShowDeleted(boolean),sets the property showdeleted to the given boolean value.
javax.sql.rowset.Joinable.getMatchColumnIndexes(),retrieves the indexes of the match columns that were set for this rowset object with the method setmatchcolumn(int[] columnidxes).
javax.sql.rowset.Joinable.getMatchColumnNames(),retrieves the names of the match columns that were set for this rowset object with the method setmatchcolumn(string [] columnnames).
javax.sql.rowset.Joinable.setMatchColumn(int),sets the designated column as the match column for this rowset object.
javax.sql.rowset.Joinable.setMatchColumn(int[]),sets the designated columns as the match column for this rowset object.
javax.sql.rowset.Joinable.setMatchColumn(java.lang.String),sets the designated column as the match column for this rowset object.
javax.sql.rowset.Joinable.setMatchColumn(java.lang.String[]),sets the designated columns as the match column for this rowset object.
javax.sql.rowset.Joinable.unsetMatchColumn(int),unsets the designated column as the match column for this rowset object.
javax.sql.rowset.Joinable.unsetMatchColumn(int[]),unsets the designated columns as the match column for this rowset object.
javax.sql.rowset.Joinable.unsetMatchColumn(java.lang.String),unsets the designated column as the match column for this rowset object.
javax.sql.rowset.Joinable.unsetMatchColumn(java.lang.String[]),unsets the designated columns as the match columns for this rowset object.
javax.sql.rowset.JoinRowSet.addRowSet(javax.sql.rowset.Joinable),adds the given rowset object to this joinrowset object.
"javax.sql.rowset.JoinRowSet.addRowSet(javax.sql.RowSet,int)",adds the given rowset object to this joinrowset object and sets the designated column as the match column for the rowset object.
"javax.sql.rowset.JoinRowSet.addRowSet(javax.sql.RowSet,java.lang.String)",adds rowset to this joinrowset object and sets the designated column as the match column.
"javax.sql.rowset.JoinRowSet.addRowSet(javax.sql.RowSet[],int[])",adds one or more rowset objects contained in the given array of rowset objects to this joinrowset object and sets the match column for each of the rowset objects to the match columns in the given array of column indexes.
"javax.sql.rowset.JoinRowSet.addRowSet(javax.sql.RowSet[],java.lang.String[])",adds one or more rowset objects contained in the given array of rowset objects to this joinrowset object and sets the match column for each of the rowset objects to the match columns in the given array of column names.
javax.sql.rowset.JoinRowSet.getJoinType(),returns a int describing the set sql join type governing this joinrowset instance.
javax.sql.rowset.JoinRowSet.getRowSetNames(),returns a string array containing the names of the rowset objects added to this joinrowset object.
javax.sql.rowset.JoinRowSet.getRowSets(),returns a collection object containing the rowset objects that have been added to this joinrowset object.
javax.sql.rowset.JoinRowSet.getWhereClause(),return a sql-like description of the where clause being used in a joinrowset object.
javax.sql.rowset.JoinRowSet.setJoinType(int),allow the application to adjust the type of join imposed on tables contained within the joinrowset object instance.
javax.sql.rowset.JoinRowSet.supportsCrossJoin(),indicates if cross_join is supported by a joinrowset implementation.
javax.sql.rowset.JoinRowSet.supportsFullJoin(),indicates if full_join is supported by a joinrowset implementation.
javax.sql.rowset.JoinRowSet.supportsInnerJoin(),indicates if inner_join is supported by a joinrowset implementation.
javax.sql.rowset.JoinRowSet.supportsLeftOuterJoin(),indicates if left_outer_join is supported by a joinrowset implementation.
javax.sql.rowset.JoinRowSet.supportsRightOuterJoin(),indicates if right_outer_join is supported by a joinrowset implementation.
javax.sql.rowset.JoinRowSet.toCachedRowSet(),"creates a new cachedrowset object containing the data in this joinrowset object, which can be saved to a data source using the syncprovider object for the cachedrowset object."
javax.sql.rowset.Predicate.evaluate(javax.sql.RowSet),this method is typically called a filteredrowset object internal methods (not public) that control the rowset object's cursor moving from row to the next.
"javax.sql.rowset.Predicate.evaluate(java.lang.Object,int)",this method is called by a filteredrowset object to check whether the value lies between the filtering criterion (or criteria if multiple constraints exist) set using the setfilter() method.
"javax.sql.rowset.Predicate.evaluate(java.lang.Object,java.lang.String)",this method is called by the filteredrowset object to check whether the value lies between the filtering criteria set using the setfilter method.
javax.sql.rowset.RowSetFactory.createCachedRowSet(),creates a new instance of a cachedrowset.
javax.sql.rowset.RowSetFactory.createFilteredRowSet(),creates a new instance of a filteredrowset.
javax.sql.rowset.RowSetFactory.createJdbcRowSet(),creates a new instance of a jdbcrowset.
javax.sql.rowset.RowSetFactory.createJoinRowSet(),creates a new instance of a joinrowset.
javax.sql.rowset.RowSetFactory.createWebRowSet(),creates a new instance of a webrowset.
javax.sql.rowset.WebRowSet.readXml(java.io.Reader),reads a webrowset object in its xml format from the given reader object.
javax.sql.rowset.WebRowSet.readXml(java.io.InputStream),reads a stream based xml input to populate this webrowset object.
"javax.sql.rowset.WebRowSet.writeXml(java.sql.ResultSet,java.io.Writer)","populates this webrowset object with the contents of the given resultset object and writes its data, properties, and metadata to the given writer object in xml format."
"javax.sql.rowset.WebRowSet.writeXml(java.sql.ResultSet,java.io.OutputStream)","populates this webrowset object with the contents of the given resultset object and writes its data, properties, and metadata to the given outputstream object in xml format."
javax.sql.rowset.WebRowSet.writeXml(java.io.Writer),"writes the data, properties, and metadata for this webrowset object to the given writer object in xml format."
javax.sql.rowset.WebRowSet.writeXml(java.io.OutputStream),"writes the data, properties, and metadata for this webrowset object to the given outputstream object in xml format."
javax.sql.rowset.BaseRowSet.addRowSetListener(javax.sql.RowSetListener),the listener will be notified whenever an event occurs on this rowset object.
javax.sql.rowset.BaseRowSet.clearParameters(),clears all of the current parameter values in this rowset object's internal representation of the parameters to be set in this rowset object's command when it is executed.
javax.sql.rowset.BaseRowSet.getCommand(),retrieves the sql query that is the command for this rowset object.
javax.sql.rowset.BaseRowSet.getConcurrency(),returns the concurrency for this rowset object.
javax.sql.rowset.BaseRowSet.getDataSourceName(),"returns the logical name that when supplied to a naming service that uses the java naming and directory interface (jndi) api, will retrieve a javax."
javax.sql.rowset.BaseRowSet.getEscapeProcessing(),ascertains whether escape processing is enabled for this rowset object.
javax.sql.rowset.BaseRowSet.getFetchDirection(),retrieves this rowset object's current setting for the fetch direction.
javax.sql.rowset.BaseRowSet.getFetchSize(),returns the fetch size for this rowset object.
javax.sql.rowset.BaseRowSet.getMaxFieldSize(),retrieves the maximum number of bytes that can be used for a column value in this rowset object.
javax.sql.rowset.BaseRowSet.getMaxRows(),retrieves the maximum number of rows that this rowset object may contain.
javax.sql.rowset.BaseRowSet.getParams(),retrieves an array containing the parameter values (both objects and primitives) that have been set for this rowset object's command and throws an sqlexception object if all parameters have not been set.
javax.sql.rowset.BaseRowSet.getPassword(),returns the password used to create a database connection for this rowset object.
javax.sql.rowset.BaseRowSet.getQueryTimeout(),retrieves the maximum number of seconds the driver will wait for a query to execute.
javax.sql.rowset.BaseRowSet.getShowDeleted(),retrieves a boolean indicating whether rows marked for deletion appear in the set of current rows.
javax.sql.rowset.BaseRowSet.getTransactionIsolation(),returns the transaction isolation property for this rowset object's connection.
javax.sql.rowset.BaseRowSet.getType(),returns the type of this rowset object.
javax.sql.rowset.BaseRowSet.getTypeMap(),retrieves the type map associated with the connection object for this rowset object.
javax.sql.rowset.BaseRowSet.getUrl(),retrieves the jdbc url that this rowset object's javax.
javax.sql.rowset.BaseRowSet.getUsername(),returns the user name used to create a database connection.
javax.sql.rowset.BaseRowSet.initParams(),performs the necessary internal configurations and initializations to allow any jdbc rowset implementation to start using the standard facilities provided by a baserowset instance.
javax.sql.rowset.BaseRowSet.isReadOnly(),returns a boolean indicating whether this rowset object is read-only.
javax.sql.rowset.BaseRowSet.notifyCursorMoved(),notifies all of the listeners registered with this rowset object that its cursor has moved.
javax.sql.rowset.BaseRowSet.notifyRowChanged(),notifies all of the listeners registered with this rowset object that one of its rows has changed.
javax.sql.rowset.BaseRowSet.notifyRowSetChanged(),notifies all of the listeners registered with this rowset object that its entire contents have changed.
javax.sql.rowset.BaseRowSet.removeRowSetListener(javax.sql.RowSetListener),removes the designated object from this rowset object's list of listeners.
"javax.sql.rowset.BaseRowSet.setArray(int,java.sql.Array)",sets the designated parameter to an array object in the java programming language.
"javax.sql.rowset.BaseRowSet.setAsciiStream(int,java.io.InputStream,int)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setAsciiStream(int,java.io.InputStream)",sets the designated parameter in this rowset object's command to the given input stream.
"javax.sql.rowset.BaseRowSet.setAsciiStream(java.lang.String,java.io.InputStream,int)","sets the designated parameter to the given input stream, which will have the specified number of bytes."
"javax.sql.rowset.BaseRowSet.setAsciiStream(java.lang.String,java.io.InputStream)",sets the designated parameter to the given input stream.
"javax.sql.rowset.BaseRowSet.setBigDecimal(int,java.math.BigDecimal)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setBigDecimal(java.lang.String,java.math.BigDecimal)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setBinaryStream(int,java.io.InputStream,int)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setBinaryStream(int,java.io.InputStream)",sets the designated parameter in this rowset object's command to the given input stream.
"javax.sql.rowset.BaseRowSet.setBinaryStream(java.lang.String,java.io.InputStream,int)","sets the designated parameter to the given input stream, which will have the specified number of bytes."
"javax.sql.rowset.BaseRowSet.setBinaryStream(java.lang.String,java.io.InputStream)",sets the designated parameter to the given input stream.
"javax.sql.rowset.BaseRowSet.setBlob(int,java.sql.Blob)",sets the designated parameter to the given blob object in the java programming language.
"javax.sql.rowset.BaseRowSet.setBlob(int,java.io.InputStream,long)",sets the designated parameter to a inputstream object.
"javax.sql.rowset.BaseRowSet.setBlob(int,java.io.InputStream)",sets the designated parameter to a inputstream object.
"javax.sql.rowset.BaseRowSet.setBlob(java.lang.String,java.io.InputStream,long)",sets the designated parameter to a inputstream object.
"javax.sql.rowset.BaseRowSet.setBlob(java.lang.String,java.sql.Blob)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setBlob(java.lang.String,java.io.InputStream)",sets the designated parameter to a inputstream object.
"javax.sql.rowset.BaseRowSet.setBoolean(int,boolean)",sets the designated parameter to the given boolean in the java programming language.
"javax.sql.rowset.BaseRowSet.setBoolean(java.lang.String,boolean)",sets the designated parameter to the given java boolean value.
"javax.sql.rowset.BaseRowSet.setByte(int,byte)",sets the designated parameter to the given byte in the java programming language.
"javax.sql.rowset.BaseRowSet.setByte(java.lang.String,byte)",sets the designated parameter to the given java byte value.
"javax.sql.rowset.BaseRowSet.setBytes(int,byte[])",sets the designated parameter to the given array of bytes.
"javax.sql.rowset.BaseRowSet.setBytes(java.lang.String,byte[])",sets the designated parameter to the given java array of bytes.
"javax.sql.rowset.BaseRowSet.setCharacterStream(int,java.io.Reader,int)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setCharacterStream(int,java.io.Reader)",sets the designated parameter in this rowset object's command to the given reader object.
"javax.sql.rowset.BaseRowSet.setCharacterStream(java.lang.String,java.io.Reader,int)","sets the designated parameter to the given reader object, which is the given number of characters long."
"javax.sql.rowset.BaseRowSet.setCharacterStream(java.lang.String,java.io.Reader)",sets the designated parameter to the given reader object.
"javax.sql.rowset.BaseRowSet.setClob(int,java.sql.Clob)",sets the designated parameter to the given clob object in the java programming language.
"javax.sql.rowset.BaseRowSet.setClob(int,java.io.Reader,long)",sets the designated parameter to a reader object.
"javax.sql.rowset.BaseRowSet.setClob(int,java.io.Reader)",sets the designated parameter to a reader object.
"javax.sql.rowset.BaseRowSet.setClob(java.lang.String,java.io.Reader,long)",sets the designated parameter to a reader object.
"javax.sql.rowset.BaseRowSet.setClob(java.lang.String,java.sql.Clob)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setClob(java.lang.String,java.io.Reader)",sets the designated parameter to a reader object.
javax.sql.rowset.BaseRowSet.setCommand(java.lang.String),"sets this rowset object's command property to the given string object and clears the parameters, if any, that were set for the previous command."
javax.sql.rowset.BaseRowSet.setConcurrency(int),sets the concurrency for this rowset object to the specified concurrency.
javax.sql.rowset.BaseRowSet.setDataSourceName(java.lang.String),sets the datasource name property for this rowset object to the given logical name and sets this rowset object's url property to null.
"javax.sql.rowset.BaseRowSet.setDate(int,java.sql.Date)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setDate(int,java.sql.Date,java.util.Calendar)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setDate(java.lang.String,java.sql.Date)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setDate(java.lang.String,java.sql.Date,java.util.Calendar)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setDouble(int,double)",sets the designated parameter to the given double in the java programming language.
"javax.sql.rowset.BaseRowSet.setDouble(java.lang.String,double)",sets the designated parameter to the given java double value.
javax.sql.rowset.BaseRowSet.setEscapeProcessing(boolean),sets to the given boolean whether or not the driver will scan for escape syntax and do escape substitution before sending sql statements to the database.
javax.sql.rowset.BaseRowSet.setFetchDirection(int),gives the driver a performance hint as to the direction in which the rows in this rowset object will be processed.
javax.sql.rowset.BaseRowSet.setFetchSize(int),sets the fetch size for this rowset object to the given number of rows.
"javax.sql.rowset.BaseRowSet.setFloat(int,float)",sets the designated parameter to the given float in the java programming language.
"javax.sql.rowset.BaseRowSet.setFloat(java.lang.String,float)",sets the designated parameter to the given java float value.
"javax.sql.rowset.BaseRowSet.setInt(int,int)",sets the designated parameter to an int in the java programming language.
"javax.sql.rowset.BaseRowSet.setInt(java.lang.String,int)",sets the designated parameter to the given java int value.
"javax.sql.rowset.BaseRowSet.setLong(int,long)",sets the designated parameter to the given long in the java programming language.
"javax.sql.rowset.BaseRowSet.setLong(java.lang.String,long)",sets the designated parameter to the given java long value.
javax.sql.rowset.BaseRowSet.setMaxFieldSize(int),sets the maximum number of bytes that can be used for a column value in this rowset object to the given number.
javax.sql.rowset.BaseRowSet.setMaxRows(int),sets the maximum number of rows that this rowset object may contain to the given number.
"javax.sql.rowset.BaseRowSet.setNCharacterStream(int,java.io.Reader)",sets the designated parameter in this rowset object's command to a reader object.
"javax.sql.rowset.BaseRowSet.setNCharacterStream(int,java.io.Reader,long)",sets the designated parameter to a reader object.
"javax.sql.rowset.BaseRowSet.setNCharacterStream(java.lang.String,java.io.Reader,long)",sets the designated parameter to a reader object.
"javax.sql.rowset.BaseRowSet.setNCharacterStream(java.lang.String,java.io.Reader)",sets the designated parameter to a reader object.
"javax.sql.rowset.BaseRowSet.setNClob(java.lang.String,java.sql.NClob)",sets the designated parameter to a java.
"javax.sql.rowset.BaseRowSet.setNClob(java.lang.String,java.io.Reader,long)",sets the designated parameter to a reader object.
"javax.sql.rowset.BaseRowSet.setNClob(java.lang.String,java.io.Reader)",sets the designated parameter to a reader object.
"javax.sql.rowset.BaseRowSet.setNClob(int,java.io.Reader,long)",sets the designated parameter to a reader object.
"javax.sql.rowset.BaseRowSet.setNClob(int,java.sql.NClob)",sets the designated parameter to a java.
"javax.sql.rowset.BaseRowSet.setNClob(int,java.io.Reader)",sets the designated parameter to a reader object.
"javax.sql.rowset.BaseRowSet.setNString(int,java.lang.String)",sets the designated parameter to the given string object.
"javax.sql.rowset.BaseRowSet.setNString(java.lang.String,java.lang.String)",sets the designated parameter to the given string object.
"javax.sql.rowset.BaseRowSet.setNull(int,int)",sets the designated parameter to sql null.
"javax.sql.rowset.BaseRowSet.setNull(int,int,java.lang.String)",sets the designated parameter to sql null.
"javax.sql.rowset.BaseRowSet.setNull(java.lang.String,int)",sets the designated parameter to sql null.
"javax.sql.rowset.BaseRowSet.setNull(java.lang.String,int,java.lang.String)",sets the designated parameter to sql null.
"javax.sql.rowset.BaseRowSet.setObject(int,java.lang.Object,int,int)",sets the designated parameter to an object in the java programming language.
"javax.sql.rowset.BaseRowSet.setObject(int,java.lang.Object,int)",sets the value of the designated parameter with the given object value.
"javax.sql.rowset.BaseRowSet.setObject(int,java.lang.Object)",sets the designated parameter to an object in the java programming language.
"javax.sql.rowset.BaseRowSet.setObject(java.lang.String,java.lang.Object,int,int)",sets the value of the designated parameter with the given object.
"javax.sql.rowset.BaseRowSet.setObject(java.lang.String,java.lang.Object,int)",sets the value of the designated parameter with the given object.
"javax.sql.rowset.BaseRowSet.setObject(java.lang.String,java.lang.Object)",sets the value of the designated parameter with the given object.
javax.sql.rowset.BaseRowSet.setPassword(java.lang.String),sets the password used to create a database connection for this rowset object to the given string object.
javax.sql.rowset.BaseRowSet.setQueryTimeout(int),sets to the given number the maximum number of seconds the driver will wait for a query to execute.
javax.sql.rowset.BaseRowSet.setReadOnly(boolean),sets this rowset object's readonly property to the given boolean.
"javax.sql.rowset.BaseRowSet.setRef(int,java.sql.Ref)",sets the designated parameter to the given ref object in the java programming language.
"javax.sql.rowset.BaseRowSet.setRowId(int,java.sql.RowId)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setRowId(java.lang.String,java.sql.RowId)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setShort(int,short)",sets the designated parameter to the given short in the java programming language.
"javax.sql.rowset.BaseRowSet.setShort(java.lang.String,short)",sets the designated parameter to the given java short value.
javax.sql.rowset.BaseRowSet.setShowDeleted(boolean),"sets the property showdeleted to the given boolean value, which determines whether rows marked for deletion appear in the set of current rows."
"javax.sql.rowset.BaseRowSet.setSQLXML(int,java.sql.SQLXML)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setSQLXML(java.lang.String,java.sql.SQLXML)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setString(int,java.lang.String)",sets the designated parameter to the given string value.
"javax.sql.rowset.BaseRowSet.setString(java.lang.String,java.lang.String)",sets the designated parameter to the given java string value.
"javax.sql.rowset.BaseRowSet.setTime(int,java.sql.Time)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setTime(int,java.sql.Time,java.util.Calendar)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setTime(java.lang.String,java.sql.Time)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setTime(java.lang.String,java.sql.Time,java.util.Calendar)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setTimestamp(int,java.sql.Timestamp)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setTimestamp(int,java.sql.Timestamp,java.util.Calendar)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setTimestamp(java.lang.String,java.sql.Timestamp)",sets the designated parameter to the given java.
"javax.sql.rowset.BaseRowSet.setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)",sets the designated parameter to the given java.
javax.sql.rowset.BaseRowSet.setTransactionIsolation(int),sets the transaction isolation property for this jdbc rowset object to the given constant.
javax.sql.rowset.BaseRowSet.setType(int),sets the type for this rowset object to the specified type.
"javax.sql.rowset.BaseRowSet.setTypeMap(,java.lang.Class<?>>)",installs the given java.
javax.sql.rowset.BaseRowSet.setURL(java.lang.String),sets the url property for this rowset object to the given string object and sets the datasource name property to null.
"javax.sql.rowset.BaseRowSet.setUrl(int,java.net.URL)",sets the designated parameter to the given java.
javax.sql.rowset.BaseRowSet.setUsername(java.lang.String),sets the username property for this rowset object to the given user name.
javax.sql.rowset.RowSetMetaDataImpl.getCatalogName(int),retrieves the catalog name of the table from which the value in the designated column was derived.
javax.sql.rowset.RowSetMetaDataImpl.getColumnClassName(int),retrieves the fully-qualified name of the class in the java programming language to which a value in the designated column will be mapped.
javax.sql.rowset.RowSetMetaDataImpl.getColumnCount(),retrieves the number of columns in the rowset object for which this rowsetmetadataimpl object was created.
javax.sql.rowset.RowSetMetaDataImpl.getColumnDisplaySize(int),retrieves the normal maximum width in chars of the designated column.
javax.sql.rowset.RowSetMetaDataImpl.getColumnLabel(int),retrieves the suggested column title for the designated column for use in printouts and displays.
javax.sql.rowset.RowSetMetaDataImpl.getColumnName(int),retrieves the name of the designated column.
javax.sql.rowset.RowSetMetaDataImpl.getColumnType(int),retrieves the type code (one of the java.
javax.sql.rowset.RowSetMetaDataImpl.getColumnTypeName(int),retrieves the dbms-specific type name for values stored in the designated column.
javax.sql.rowset.RowSetMetaDataImpl.getPrecision(int),retrieves the total number of digits for values stored in the designated column.
javax.sql.rowset.RowSetMetaDataImpl.getScale(int),retrieves the number of digits to the right of the decimal point for values stored in the designated column.
javax.sql.rowset.RowSetMetaDataImpl.getSchemaName(int),retrieves the schema name of the table from which the value in the designated column was derived.
javax.sql.rowset.RowSetMetaDataImpl.getTableName(int),retrieves the name of the table from which the value in the designated column was derived.
javax.sql.rowset.RowSetMetaDataImpl.isAutoIncrement(int),"retrieves whether a value stored in the designated column is automatically numbered, and thus readonly."
javax.sql.rowset.RowSetMetaDataImpl.isCaseSensitive(int),indicates whether the case of the designated column's name matters.
javax.sql.rowset.RowSetMetaDataImpl.isCurrency(int),indicates whether a value stored in the designated column is a cash value.
javax.sql.rowset.RowSetMetaDataImpl.isDefinitelyWritable(int),indicates whether a write operation on the designated column will definitely succeed.
javax.sql.rowset.RowSetMetaDataImpl.isNullable(int),retrieves a constant indicating whether it is possible to store a null value in the designated column.
javax.sql.rowset.RowSetMetaDataImpl.isReadOnly(int),"indicates whether the designated column is definitely not writable, thus readonly."
javax.sql.rowset.RowSetMetaDataImpl.isSearchable(int),indicates whether a value stored in the designated column can be used in a where clause.
javax.sql.rowset.RowSetMetaDataImpl.isSigned(int),indicates whether a value stored in the designated column is a signed number.
javax.sql.rowset.RowSetMetaDataImpl.isWrapperFor(java.lang.Class<?>),returns true if this either implements the interface argument or is directly or indirectly a wrapper for an object that does.
javax.sql.rowset.RowSetMetaDataImpl.isWritable(int),indicates whether it is possible for a write operation on the designated column to succeed.
"javax.sql.rowset.RowSetMetaDataImpl.setAutoIncrement(int,boolean)","sets whether the designated column is automatically numbered, thus read-only, to the given boolean value."
"javax.sql.rowset.RowSetMetaDataImpl.setCaseSensitive(int,boolean)",sets whether the name of the designated column is case sensitive to the given boolean.
"javax.sql.rowset.RowSetMetaDataImpl.setCatalogName(int,java.lang.String)",sets the catalog name of the table from which the designated column was derived to catalogname.
javax.sql.rowset.RowSetMetaDataImpl.setColumnCount(int),sets to the given number the number of columns in the rowset object for which this rowsetmetadataimpl object was created.
"javax.sql.rowset.RowSetMetaDataImpl.setColumnDisplaySize(int,int)",sets the normal maximum number of chars in the designated column to the given number.
"javax.sql.rowset.RowSetMetaDataImpl.setColumnLabel(int,java.lang.String)","sets the suggested column label for use in printouts and displays, if any, to label."
"javax.sql.rowset.RowSetMetaDataImpl.setColumnName(int,java.lang.String)",sets the column name of the designated column to the given name.
"javax.sql.rowset.RowSetMetaDataImpl.setColumnType(int,int)",sets the sql type code for values stored in the designated column to the given type code from the class java.
"javax.sql.rowset.RowSetMetaDataImpl.setColumnTypeName(int,java.lang.String)",sets the type name used by the data source for values stored in the designated column to the given type name.
"javax.sql.rowset.RowSetMetaDataImpl.setCurrency(int,boolean)",sets whether a value stored in the designated column is a cash value to the given boolean.
"javax.sql.rowset.RowSetMetaDataImpl.setNullable(int,int)",sets whether a value stored in the designated column can be set to null to the given constant from the interface resultsetmetadata.
"javax.sql.rowset.RowSetMetaDataImpl.setPrecision(int,int)",sets the total number of decimal digits in a value stored in the designated column to the given number.
"javax.sql.rowset.RowSetMetaDataImpl.setScale(int,int)",sets the number of digits to the right of the decimal point in a value stored in the designated column to the given number.
"javax.sql.rowset.RowSetMetaDataImpl.setSchemaName(int,java.lang.String)","sets the designated column's table's schema name, if any, to schemaname."
"javax.sql.rowset.RowSetMetaDataImpl.setSearchable(int,boolean)",sets whether a value stored in the designated column can be used in a where clause to the given boolean value.
"javax.sql.rowset.RowSetMetaDataImpl.setSigned(int,boolean)",sets whether a value stored in the designated column is a signed number to the given boolean.
"javax.sql.rowset.RowSetMetaDataImpl.setTableName(int,java.lang.String)",sets the name of the table from which the designated column was derived to the given table name.
javax.sql.rowset.RowSetMetaDataImpl.unwrap(java.lang.Class<T>),"returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy."
javax.sql.rowset.RowSetProvider.newFactory(),creates a new instance of a rowsetfactory implementation.
"javax.sql.rowset.RowSetProvider.newFactory(java.lang.String,java.lang.ClassLoader)",creates a new instance of a rowsetfactory from the specified factory class name.
javax.sql.rowset.RowSetWarning.getNextWarning(),retrieves the warning chained to this rowsetwarning object.
javax.sql.rowset.RowSetWarning.setNextWarning(javax.sql.rowset.RowSetWarning),"sets warning as the next warning, that is, the warning chained to this rowsetwarning object."
javax.sql.rowset.serial.SerialArray.clone(),returns a clone of this serialarray.
javax.sql.rowset.serial.SerialArray.equals(java.lang.Object),compares this serialarray to the specified object.
javax.sql.rowset.serial.SerialArray.free(),this method frees the seriablearray object and releases the resources that it holds.
javax.sql.rowset.serial.SerialArray.getArray(),returns a new array that is a copy of this serialarray object.
"javax.sql.rowset.serial.SerialArray.getArray(,java.lang.Class<?>>)","returns a new array that is a copy of this serialarray object, using the given type map for the custom mapping of each element when the elements are sql udts."
"javax.sql.rowset.serial.SerialArray.getArray(long,int)","returns a new array that is a copy of a slice of this serialarray object, starting with the element at the given index and containing the given number of consecutive elements."
"javax.sql.rowset.serial.SerialArray.getArray(long,int,,java.lang.Class<?>>)","returns a new array that is a copy of a slice of this serialarray object, starting with the element at the given index and containing the given number of consecutive elements."
javax.sql.rowset.serial.SerialArray.getBaseType(),retrieves the sql type of the elements in this serialarray object.
javax.sql.rowset.serial.SerialArray.getBaseTypeName(),retrieves the dbms-specific type name for the elements in this serialarray object.
"javax.sql.rowset.serial.SerialArray.getResultSet(long,int)",retrieves a resultset object holding the elements of the subarray that starts at index index and contains up to count successive elements.
"javax.sql.rowset.serial.SerialArray.getResultSet(,java.lang.Class<?>>)",retrieves a resultset object that contains all of the elements of the sql array value represented by this serialarray object.
javax.sql.rowset.serial.SerialArray.getResultSet(),retrieves a resultset object that contains all of the elements in the array value that this serialarray object represents.
"javax.sql.rowset.serial.SerialArray.getResultSet(long,int,,java.lang.Class<?>>)","retrieves a result set holding the elements of the subarray that starts at retrieves a resultset object that contains a subarray of the elements in this serialarray object, starting at index index and containing up to count successive elements."
javax.sql.rowset.serial.SerialArray.hashCode(),returns a hash code for this serialarray.
javax.sql.rowset.serial.SerialBlob.clone(),returns a clone of this serialblob.
javax.sql.rowset.serial.SerialBlob.equals(java.lang.Object),compares this serialblob to the specified object.
javax.sql.rowset.serial.SerialBlob.free(),this method frees the seriableblob object and releases the resources that it holds.
javax.sql.rowset.serial.SerialBlob.getBinaryStream(),returns this serialblob object as an input stream.
"javax.sql.rowset.serial.SerialBlob.getBinaryStream(long,long)","returns an inputstream object that contains a partial blob value, starting with the byte specified by pos, which is length bytes in length."
"javax.sql.rowset.serial.SerialBlob.getBytes(long,int)","copies the specified number of bytes, starting at the given position, from this serialblob object to another array of bytes."
javax.sql.rowset.serial.SerialBlob.hashCode(),returns a hash code for this serialblob.
javax.sql.rowset.serial.SerialBlob.length(),retrieves the number of bytes in this serialblob object's array of bytes.
"javax.sql.rowset.serial.SerialBlob.position(byte[],long)","returns the position in this serialblob object where the given pattern of bytes begins, starting the search at the specified position."
"javax.sql.rowset.serial.SerialBlob.position(java.sql.Blob,long)","returns the position in this serialblob object where the given blob object begins, starting the search at the specified position."
javax.sql.rowset.serial.SerialBlob.setBinaryStream(long),retrieves a stream that can be used to write to the blob value that this blob object represents.
"javax.sql.rowset.serial.SerialBlob.setBytes(long,byte[])","writes the given array of bytes to the blob value that this blob object represents, starting at position pos, and returns the number of bytes written."
"javax.sql.rowset.serial.SerialBlob.setBytes(long,byte[],int,int)",writes all or part of the given byte array to the blob value that this blob object represents and returns the number of bytes written.
javax.sql.rowset.serial.SerialBlob.truncate(long),truncates the blob value that this blob object represents to be len bytes in length.
javax.sql.rowset.serial.SerialClob.clone(),returns a clone of this serialclob.
javax.sql.rowset.serial.SerialClob.equals(java.lang.Object),compares this serialclob to the specified object.
javax.sql.rowset.serial.SerialClob.free(),this method frees the seriableclob object and releases the resources that it holds.
javax.sql.rowset.serial.SerialClob.getAsciiStream(),retrieves the clob value designated by this serialclob object as an ascii stream.
javax.sql.rowset.serial.SerialClob.getCharacterStream(),returns this serialclob object's data as a stream of unicode characters.
"javax.sql.rowset.serial.SerialClob.getCharacterStream(long,long)","returns a reader object that contains a partial serialclob value, starting with the character specified by pos, which is length characters in length."
"javax.sql.rowset.serial.SerialClob.getSubString(long,int)","returns a copy of the substring contained in this serialclob object, starting at the given position and continuing for the specified number or characters."
javax.sql.rowset.serial.SerialClob.hashCode(),returns a hash code for this serialclob.
javax.sql.rowset.serial.SerialClob.length(),retrieves the number of characters in this serialclob object's array of characters.
"javax.sql.rowset.serial.SerialClob.position(java.lang.String,long)","returns the position in this serialclob object where the given string object begins, starting the search at the specified position."
"javax.sql.rowset.serial.SerialClob.position(java.sql.Clob,long)","returns the position in this serialclob object where the given clob signature begins, starting the search at the specified position."
javax.sql.rowset.serial.SerialClob.setAsciiStream(long),"retrieves a stream to be used to write ascii characters to the clob value that this serialclob object represents, starting at position pos."
javax.sql.rowset.serial.SerialClob.setCharacterStream(long),"retrieves a stream to be used to write a stream of unicode characters to the clob value that this serialclob object represents, at position pos."
"javax.sql.rowset.serial.SerialClob.setString(long,java.lang.String)","writes the given java string to the clob value that this serialclob object represents, at the position pos."
"javax.sql.rowset.serial.SerialClob.setString(long,java.lang.String,int,int)","writes len characters of str, starting at character offset, to the clob value that this clob represents."
javax.sql.rowset.serial.SerialClob.truncate(long),truncates the clob value that this serialclob object represents so that it has a length of len characters.
javax.sql.rowset.serial.SerialDatalink.clone(),returns a clone of this serialdatalink.
javax.sql.rowset.serial.SerialDatalink.equals(java.lang.Object),compares this serialdatalink to the specified object.
javax.sql.rowset.serial.SerialDatalink.getDatalink(),returns a new url that is a copy of this serialdatalink object.
javax.sql.rowset.serial.SerialDatalink.hashCode(),returns a hash code for this serialdatalink.
javax.sql.rowset.serial.SerialJavaObject.clone(),returns a clone of this serialjavaobject.
javax.sql.rowset.serial.SerialJavaObject.equals(java.lang.Object),compares this serialjavaobject to the specified object.
javax.sql.rowset.serial.SerialJavaObject.getFields(),returns an array of field objects that contains each field of the object that this helper class is serializing.
javax.sql.rowset.serial.SerialJavaObject.getObject(),returns an object that is a copy of this serialjavaobject object.
javax.sql.rowset.serial.SerialJavaObject.hashCode(),returns a hash code for this serialjavaobject.
javax.sql.rowset.serial.SerialRef.clone(),returns a clone of this serialref.
javax.sql.rowset.serial.SerialRef.equals(java.lang.Object),compares this serialref to the specified object.
javax.sql.rowset.serial.SerialRef.getBaseTypeName(),returns a string describing the base type name of the ref.
"javax.sql.rowset.serial.SerialRef.getObject(,java.lang.Class<?>>)",returns an object representing the sql structured type to which this serialref object refers.
javax.sql.rowset.serial.SerialRef.getObject(),returns an object representing the sql structured type to which this serialref object refers.
javax.sql.rowset.serial.SerialRef.hashCode(),returns a hash code for this serialref.
javax.sql.rowset.serial.SerialRef.setObject(java.lang.Object),sets the sql structured type that this serialref object references to the given object object.
javax.sql.rowset.serial.SerialStruct.clone(),returns a clone of this serialstruct.
javax.sql.rowset.serial.SerialStruct.equals(java.lang.Object),compares this serialstruct to the specified object.
javax.sql.rowset.serial.SerialStruct.getAttributes(),retrieves an array of object values containing the attributes of the sql structured type that this serialstruct object represents.
"javax.sql.rowset.serial.SerialStruct.getAttributes(,java.lang.Class<?>>)","retrieves the attributes for the sql structured type that this serialstruct represents as an array of object values, using the given type map for custom mapping if appropriate."
javax.sql.rowset.serial.SerialStruct.getSQLTypeName(),retrieves the sql type name for this serialstruct object.
javax.sql.rowset.serial.SerialStruct.hashCode(),returns a hash code for this serialstruct.
javax.sql.rowset.serial.SQLInputImpl.readArray(),reads an sql array value from the stream and returns it as an array object in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readAsciiStream(),returns the next attribute in this sqlinputimpl object as a stream of ascii characters.
javax.sql.rowset.serial.SQLInputImpl.readBigDecimal(),retrieves the next attribute in this sqlinputimpl object as a java.
javax.sql.rowset.serial.SQLInputImpl.readBinaryStream(),returns the next attribute in this sqlinputimpl object as a stream of uninterpreted bytes.
javax.sql.rowset.serial.SQLInputImpl.readBlob(),retrieves the blob value at the head of this sqlinputimpl object as a blob object in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readBoolean(),retrieves the next attribute in this sqlinputimpl object as a boolean in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readByte(),retrieves the next attribute in this sqlinputimpl object as a byte in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readBytes(),retrieves the next attribute in this sqlinputimpl object as an array of bytes.
javax.sql.rowset.serial.SQLInputImpl.readCharacterStream(),retrieves the next attribute in this sqlinputimpl object as a stream of unicode characters.
javax.sql.rowset.serial.SQLInputImpl.readClob(),retrieves the clob value at the head of this sqlinputimpl object as a clob object in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readDate(),retrieves the next attribute in this sqlinputimpl as a java.
javax.sql.rowset.serial.SQLInputImpl.readDouble(),retrieves the next attribute in this sqlinputimpl object as a double in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readFloat(),retrieves the next attribute in this sqlinputimpl object as a float in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readInt(),retrieves the next attribute in this sqlinputimpl object as an int in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readLong(),retrieves the next attribute in this sqlinputimpl object as a long in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readNClob(),reads an sql nclob value from the stream and returns it as a clob object in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readNString(),reads the next attribute in the stream and returns it as a string in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readObject(),retrieves the value at the head of this sqlinputimpl object as an object in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readRef(),retrieves the value at the head of this sqlinputimpl object as a ref object in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readRowId(),reads an sql rowid value from the stream and returns it as a rowid object in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readShort(),retrieves the next attribute in this sqlinputimpl object as a short in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readSQLXML(),reads an sql xml value from the stream and returns it as a sqlxml object in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readString(),retrieves the next attribute in this sqlinputimpl object as a string in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.readTime(),retrieves the next attribute in this sqlinputimpl object as a java.
javax.sql.rowset.serial.SQLInputImpl.readTimestamp(),retrieves the next attribute in this sqlinputimpl object as a java.
javax.sql.rowset.serial.SQLInputImpl.readURL(),reads an sql datalink value from the stream and returns it as an url object in the java programming language.
javax.sql.rowset.serial.SQLInputImpl.wasNull(),ascertains whether the last value read from this sqlinputimpl object was null.
javax.sql.rowset.serial.SQLOutputImpl.writeArray(java.sql.Array),writes an array object in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeAsciiStream(java.io.InputStream),writes a stream of ascii characters to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeBigDecimal(java.math.BigDecimal),writes a java.
javax.sql.rowset.serial.SQLOutputImpl.writeBinaryStream(java.io.InputStream),writes a stream of uninterpreted bytes to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeBlob(java.sql.Blob),writes a blob object in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeBoolean(boolean),writes a boolean in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeByte(byte),writes a byte in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeBytes(byte[]),writes an array of bytes in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeCharacterStream(java.io.Reader),writes a stream of unicode characters to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeClob(java.sql.Clob),writes a clob object in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeDate(java.sql.Date),writes a java.
javax.sql.rowset.serial.SQLOutputImpl.writeDouble(double),writes a double in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeFloat(float),writes a float in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeInt(int),writes an int in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeLong(long),writes a long in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeNClob(java.sql.NClob),writes an sql nclob value to the stream.
javax.sql.rowset.serial.SQLOutputImpl.writeNString(java.lang.String),writes the next attribute to the stream as a string in the java programming language.
javax.sql.rowset.serial.SQLOutputImpl.writeObject(java.sql.SQLData),writes to the stream the data contained in the given sqldata object.
javax.sql.rowset.serial.SQLOutputImpl.writeRef(java.sql.Ref),writes a ref object in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeRowId(java.sql.RowId),writes an sql rowid value to the stream.
javax.sql.rowset.serial.SQLOutputImpl.writeShort(short),writes a short in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeSQLXML(java.sql.SQLXML),writes an sql xml value to the stream.
javax.sql.rowset.serial.SQLOutputImpl.writeString(java.lang.String),writes a string in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeStruct(java.sql.Struct),writes a struct object in the java programming language to this sqloutputimpl object.
javax.sql.rowset.serial.SQLOutputImpl.writeTime(java.sql.Time),writes a java.
javax.sql.rowset.serial.SQLOutputImpl.writeTimestamp(java.sql.Timestamp),writes a java.
javax.sql.rowset.serial.SQLOutputImpl.writeURL(java.net.URL),writes an java.
javax.sql.rowset.spi.SyncResolver.getConflictValue(int),"retrieves the value in the designated column in the current row of this syncresolver object, which is the value in the data source that caused a conflict."
javax.sql.rowset.spi.SyncResolver.getConflictValue(java.lang.String),"retrieves the value in the designated column in the current row of this syncresolver object, which is the value in the data source that caused a conflict."
javax.sql.rowset.spi.SyncResolver.getStatus(),"retrieves the conflict status of the current row of this syncresolver, which indicates the operation the rowset object was attempting when the conflict occurred."
javax.sql.rowset.spi.SyncResolver.nextConflict(),moves the cursor down from its current position to the next row that contains a conflict value.
javax.sql.rowset.spi.SyncResolver.previousConflict(),moves the cursor up from its current position to the previous conflict row in this syncresolver object.
"javax.sql.rowset.spi.SyncResolver.setResolvedValue(int,java.lang.Object)",sets obj as the value in column index in the current row of the rowset object that is being synchronized.
"javax.sql.rowset.spi.SyncResolver.setResolvedValue(java.lang.String,java.lang.Object)",sets obj as the value in column columnname in the current row of the rowset object that is being synchronized.
javax.sql.rowset.spi.TransactionalWriter.commit(),makes permanent all changes that have been performed by the acceptchanges method since the last call to either the commit or rollback methods.
javax.sql.rowset.spi.TransactionalWriter.rollback(),undoes all changes made in the current transaction.
javax.sql.rowset.spi.TransactionalWriter.rollback(java.sql.Savepoint),undoes all changes made in the current transaction made prior to the given savepoint object.
"javax.sql.rowset.spi.XmlReader.readXML(javax.sql.rowset.WebRowSet,java.io.Reader)",reads and parses the given webrowset object from the given input stream in xml format.
"javax.sql.rowset.spi.XmlWriter.writeXML(javax.sql.rowset.WebRowSet,java.io.Writer)",writes the given webrowset object to the specified java.
javax.sql.rowset.spi.SyncFactory.getInstance(java.lang.String),returns the syncprovider instance identified by providerid.
javax.sql.rowset.spi.SyncFactory.getLogger(),returns the logging object for applications to retrieve synchronization events posted by syncprovider implementations.
javax.sql.rowset.spi.SyncFactory.getRegisteredProviders(),returns an enumeration of currently registered synchronization providers.
javax.sql.rowset.spi.SyncFactory.getSyncFactory(),returns the syncfactory singleton.
javax.sql.rowset.spi.SyncFactory.registerProvider(java.lang.String),adds the the given synchronization provider to the factory register.
javax.sql.rowset.spi.SyncFactory.setJNDIContext(javax.naming.Context),"sets the initial jndi context from which syncprovider implementations can be retrieved from a jndi namespace
this method checks to see that there is an sqlpermission object which grants the permission setsyncfactory before allowing the method to succeed."
javax.sql.rowset.spi.SyncFactory.setLogger(java.util.logging.Logger),sets the logging object to be used by the syncprovider implementation provided by the syncfactory.
"javax.sql.rowset.spi.SyncFactory.setLogger(java.util.logging.Logger,java.util.logging.Level)",sets the logging object that is used by syncprovider implementations provided by the syncfactory spi.
javax.sql.rowset.spi.SyncFactory.unregisterProvider(java.lang.String),removes the designated currently registered synchronization provider from the factory spi register.
javax.sql.rowset.spi.SyncProvider.getDataSourceLock(),returns the current data source lock severity level active in this syncprovider implementation.
javax.sql.rowset.spi.SyncProvider.getProviderGrade(),returns a constant indicating the grade of synchronization a rowset object can expect from this syncprovider object.
javax.sql.rowset.spi.SyncProvider.getProviderID(),returns the unique identifier for this syncprovider object.
javax.sql.rowset.spi.SyncProvider.getRowSetReader(),returns a javax.
javax.sql.rowset.spi.SyncProvider.getRowSetWriter(),returns a javax.
javax.sql.rowset.spi.SyncProvider.getVendor(),returns the vendor name of this syncprovider instance.
javax.sql.rowset.spi.SyncProvider.getVersion(),returns the release version of this syncprovider instance.
javax.sql.rowset.spi.SyncProvider.setDataSourceLock(int),sets a lock on the underlying data source at the level indicated by datasource_lock.
javax.sql.rowset.spi.SyncProvider.supportsUpdatableView(),returns whether this syncprovider implementation can perform synchronization between a rowset object and the sql view in the data source from which the rowset object got its data.
javax.sql.rowset.spi.SyncProviderException.getSyncResolver(),"retrieves the syncresolver object that has been set for this syncproviderexception object, or if none has been set, an instance of the default syncresolver implementation included in the reference implementation."
javax.sql.rowset.spi.SyncProviderException.setSyncResolver(javax.sql.rowset.spi.SyncResolver),sets the syncresolver object for this syncproviderexception object to the one supplied.
javax.swing.Action.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychange listener.
javax.swing.Action.getValue(java.lang.String),gets one of this object's properties using the associated key.
javax.swing.Action.isEnabled(),returns the enabled state of the action.
"javax.swing.Action.putValue(java.lang.String,java.lang.Object)",sets one of this object's properties using the associated key.
javax.swing.Action.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychange listener.
javax.swing.Action.setEnabled(boolean),sets the enabled state of the action.
javax.swing.BoundedRangeModel.addChangeListener(javax.swing.event.ChangeListener),adds a changelistener to the model's listener list.
javax.swing.BoundedRangeModel.getExtent(),"returns the model's extent, the length of the inner range that begins at the model's value."
javax.swing.BoundedRangeModel.getMaximum(),returns the model's maximum.
javax.swing.BoundedRangeModel.getMinimum(),returns the minimum acceptable value.
javax.swing.BoundedRangeModel.getValue(),returns the model's current value.
javax.swing.BoundedRangeModel.getValueIsAdjusting(),returns true if the current changes to the value property are part of a series of changes.
javax.swing.BoundedRangeModel.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from the model's listener list.
javax.swing.BoundedRangeModel.setExtent(int),sets the model's extent.
javax.swing.BoundedRangeModel.setMaximum(int),sets the model's maximum to newmaximum.
javax.swing.BoundedRangeModel.setMinimum(int),sets the model's minimum to newminimum.
"javax.swing.BoundedRangeModel.setRangeProperties(int,int,int,int,boolean)",this method sets all of the model's data with a single method call.
javax.swing.BoundedRangeModel.setValue(int),sets the model's current value to newvalue if newvalue satisfies the model's constraints.
javax.swing.BoundedRangeModel.setValueIsAdjusting(boolean),this attribute indicates that any upcoming changes to the value of the model should be considered a single event.
javax.swing.ButtonModel.addActionListener(java.awt.event.ActionListener),adds an actionlistener to the model.
javax.swing.ButtonModel.addChangeListener(javax.swing.event.ChangeListener),adds a changelistener to the model.
javax.swing.ButtonModel.addItemListener(java.awt.event.ItemListener),adds an itemlistener to the model.
javax.swing.ButtonModel.getActionCommand(),returns the action command string for the button.
javax.swing.ButtonModel.getMnemonic(),gets the keyboard mnemonic for the button.
javax.swing.ButtonModel.isArmed(),indicates partial commitment towards triggering the button.
javax.swing.ButtonModel.isEnabled(),"indicates if the button can be selected or triggered by an input device, such as a mouse pointer."
javax.swing.ButtonModel.isPressed(),indicates if the button is pressed.
javax.swing.ButtonModel.isRollover(),indicates that the mouse is over the button.
javax.swing.ButtonModel.isSelected(),indicates if the button has been selected.
javax.swing.ButtonModel.removeActionListener(java.awt.event.ActionListener),removes an actionlistener from the model.
javax.swing.ButtonModel.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from the model.
javax.swing.ButtonModel.removeItemListener(java.awt.event.ItemListener),removes an itemlistener from the model.
javax.swing.ButtonModel.setActionCommand(java.lang.String),sets the action command string that gets sent as part of the actionevent when the button is triggered.
javax.swing.ButtonModel.setArmed(boolean),marks the button as armed or unarmed.
javax.swing.ButtonModel.setEnabled(boolean),enables or disables the button.
javax.swing.ButtonModel.setGroup(javax.swing.ButtonGroup),"identifies the group the button belongs to -- needed for radio buttons, which are mutually exclusive within their group."
javax.swing.ButtonModel.setMnemonic(int),sets the keyboard mnemonic (shortcut key or accelerator key) for the button.
javax.swing.ButtonModel.setPressed(boolean),sets the button to pressed or unpressed.
javax.swing.ButtonModel.setRollover(boolean),sets or clears the button's rollover state.
javax.swing.ButtonModel.setSelected(boolean),selects or deselects the button.
javax.swing.CellEditor.addCellEditorListener(javax.swing.event.CellEditorListener),"adds a listener to the list that's notified when the editor stops, or cancels editing."
javax.swing.CellEditor.cancelCellEditing(),tells the editor to cancel editing and not accept any partially edited value.
javax.swing.CellEditor.getCellEditorValue(),returns the value contained in the editor.
javax.swing.CellEditor.isCellEditable(java.util.EventObject),asks the editor if it can start editing using anevent.
javax.swing.CellEditor.removeCellEditorListener(javax.swing.event.CellEditorListener),removes a listener from the list that's notified.
javax.swing.CellEditor.shouldSelectCell(java.util.EventObject),"returns true if the editing cell should be selected, false otherwise."
javax.swing.CellEditor.stopCellEditing(),tells the editor to stop editing and accept any partially edited value as the value of the editor.
javax.swing.ComboBoxEditor.addActionListener(java.awt.event.ActionListener),add an actionlistener.
javax.swing.ComboBoxEditor.getEditorComponent(),return the component that should be added to the tree hierarchy for this editor.
javax.swing.ComboBoxEditor.getItem(),return the edited item.
javax.swing.ComboBoxEditor.removeActionListener(java.awt.event.ActionListener),remove an actionlistener.
javax.swing.ComboBoxEditor.selectAll(),ask the editor to start editing and to select everything.
javax.swing.ComboBoxEditor.setItem(java.lang.Object),set the item that should be edited.
javax.swing.ComboBoxModel.getSelectedItem(),returns the selected item.
javax.swing.ComboBoxModel.setSelectedItem(java.lang.Object),set the selected item.
javax.swing.DesktopManager.activateFrame(javax.swing.JInternalFrame),"generally, indicate that this frame has focus."
javax.swing.DesktopManager.beginDraggingFrame(javax.swing.JComponent),this method is normally called when the user has indicated that they will begin dragging a component around.
"javax.swing.DesktopManager.beginResizingFrame(javax.swing.JComponent,int)",this methods is normally called when the user has indicated that they will begin resizing the frame.
javax.swing.DesktopManager.closeFrame(javax.swing.JInternalFrame),"generally, this call should remove the frame from it's parent."
javax.swing.DesktopManager.deactivateFrame(javax.swing.JInternalFrame),"generally, indicate that this frame has lost focus."
javax.swing.DesktopManager.deiconifyFrame(javax.swing.JInternalFrame),"generally, remove any iconic representation that is present and restore the frame to it's original size and location."
"javax.swing.DesktopManager.dragFrame(javax.swing.JComponent,int,int)",the user has moved the frame.
javax.swing.DesktopManager.endDraggingFrame(javax.swing.JComponent),this method signals the end of the dragging session.
javax.swing.DesktopManager.endResizingFrame(javax.swing.JComponent),this method signals the end of the resize session.
javax.swing.DesktopManager.iconifyFrame(javax.swing.JInternalFrame),"generally, remove this frame from it's parent and add an iconic representation."
javax.swing.DesktopManager.maximizeFrame(javax.swing.JInternalFrame),"generally, the frame should be resized to match it's parents bounds."
javax.swing.DesktopManager.minimizeFrame(javax.swing.JInternalFrame),"generally, this indicates that the frame should be restored to it's size and position prior to a maximizeframe() call."
javax.swing.DesktopManager.openFrame(javax.swing.JInternalFrame),"if possible, display this frame in an appropriate location."
"javax.swing.DesktopManager.resizeFrame(javax.swing.JComponent,int,int,int,int)",the user has resized the component.
"javax.swing.DesktopManager.setBoundsForFrame(javax.swing.JComponent,int,int,int,int)",this is a primitive reshape method.
javax.swing.Icon.getIconHeight(),returns the icon's height.
javax.swing.Icon.getIconWidth(),returns the icon's width.
"javax.swing.Icon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)",draw the icon at the specified location.
"javax.swing.JComboBox.KeySelectionManager.selectionForKey(char,javax.swing.ComboBoxModel)","given akey and the model, returns the row that should become selected."
"javax.swing.ListCellRenderer.getListCellRendererComponent(javax.swing.JList<? extends javax.swing.ListCellRenderer>,javax.swing.ListCellRenderer,int,boolean,boolean)",return a component that has been configured to display the specified value.
javax.swing.ListModel.addListDataListener(javax.swing.event.ListDataListener),adds a listener to the list that's notified each time a change to the data model occurs.
javax.swing.ListModel.getElementAt(int),returns the value at the specified index.
javax.swing.ListModel.getSize(),returns the length of the list.
javax.swing.ListModel.removeListDataListener(javax.swing.event.ListDataListener),removes a listener from the list that's notified each time a change to the data model occurs.
javax.swing.ListSelectionModel.addListSelectionListener(javax.swing.event.ListSelectionListener),add a listener to the list that's notified each time a change to the selection occurs.
"javax.swing.ListSelectionModel.addSelectionInterval(int,int)",changes the selection to be the set union of the current selection and the indices between index0 and index1 inclusive.
javax.swing.ListSelectionModel.clearSelection(),change the selection to the empty set.
javax.swing.ListSelectionModel.getAnchorSelectionIndex(),"return the first index argument from the most recent call to setselectioninterval(), addselectioninterval() or removeselectioninterval()."
javax.swing.ListSelectionModel.getLeadSelectionIndex(),"return the second index argument from the most recent call to setselectioninterval(), addselectioninterval() or removeselectioninterval()."
javax.swing.ListSelectionModel.getMaxSelectionIndex(),returns the last selected index or -1 if the selection is empty.
javax.swing.ListSelectionModel.getMinSelectionIndex(),returns the first selected index or -1 if the selection is empty.
javax.swing.ListSelectionModel.getSelectionMode(),returns the current selection mode.
javax.swing.ListSelectionModel.getValueIsAdjusting(),returns true if the selection is undergoing a series of changes.
"javax.swing.ListSelectionModel.insertIndexInterval(int,int,boolean)",insert length indices beginning before/after index.
javax.swing.ListSelectionModel.isSelectedIndex(int),returns true if the specified index is selected.
javax.swing.ListSelectionModel.isSelectionEmpty(),returns true if no indices are selected.
"javax.swing.ListSelectionModel.removeIndexInterval(int,int)","remove the indices in the interval index0,index1 (inclusive) from the selection model."
javax.swing.ListSelectionModel.removeListSelectionListener(javax.swing.event.ListSelectionListener),remove a listener from the list that's notified each time a change to the selection occurs.
"javax.swing.ListSelectionModel.removeSelectionInterval(int,int)",changes the selection to be the set difference of the current selection and the indices between index0 and index1 inclusive.
javax.swing.ListSelectionModel.setAnchorSelectionIndex(int),set the anchor selection index.
javax.swing.ListSelectionModel.setLeadSelectionIndex(int),set the lead selection index.
"javax.swing.ListSelectionModel.setSelectionInterval(int,int)",changes the selection to be between index0 and index1 inclusive.
javax.swing.ListSelectionModel.setSelectionMode(int),sets the selection mode.
javax.swing.ListSelectionModel.setValueIsAdjusting(boolean),"sets the valueisadjusting property, which indicates whether or not upcoming selection changes should be considered part of a single change."
javax.swing.MenuElement.getComponent(),this method should return the java.
javax.swing.MenuElement.getSubElements(),this method should return an array containing the sub-elements for the receiving menu element.
javax.swing.MenuElement.menuSelectionChanged(boolean),call by the menuselectionmanager when the menuelement is added or remove from the menu selection.
"javax.swing.MenuElement.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)",process a key event.
"javax.swing.MenuElement.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)",processes a mouse event.
javax.swing.MutableComboBoxModel.addElement(javax.swing.MutableComboBoxModel),adds an item at the end of the model.
"javax.swing.MutableComboBoxModel.insertElementAt(javax.swing.MutableComboBoxModel,int)",adds an item at a specific index.
javax.swing.MutableComboBoxModel.removeElement(java.lang.Object),removes an item from the model.
javax.swing.MutableComboBoxModel.removeElementAt(int),removes an item at a specific index.
"javax.swing.Painter.paint(java.awt.Graphics2D,javax.swing.Painter,int,int)",renders to the given graphics2d object.
javax.swing.Renderer.getComponent(),returns the component used to render the value.
"javax.swing.Renderer.setValue(java.lang.Object,boolean)","specifies the value to display and whether or not the value should be portrayed as ""currently selected""."
javax.swing.RootPaneContainer.getContentPane(),returns the contentpane.
javax.swing.RootPaneContainer.getGlassPane(),returns the glasspane.
javax.swing.RootPaneContainer.getLayeredPane(),returns the layeredpane.
javax.swing.RootPaneContainer.getRootPane(),return this component's single jrootpane child.
javax.swing.RootPaneContainer.setContentPane(java.awt.Container),"the ""contentpane"" is the primary container for application specific components."
javax.swing.RootPaneContainer.setGlassPane(java.awt.Component),the glasspane is always the first child of the rootpane and the rootpanes layout manager ensures that it's always as big as the rootpane.
javax.swing.RootPaneContainer.setLayeredPane(javax.swing.JLayeredPane),a container that manages the contentpane and in some cases a menu bar.
javax.swing.Scrollable.getPreferredScrollableViewportSize(),returns the preferred size of the viewport for a view component.
"javax.swing.Scrollable.getScrollableBlockIncrement(java.awt.Rectangle,int,int)","components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation."
javax.swing.Scrollable.getScrollableTracksViewportHeight(),return true if a viewport should always force the height of this scrollable to match the height of the viewport.
javax.swing.Scrollable.getScrollableTracksViewportWidth(),return true if a viewport should always force the width of this scrollable to match the width of the viewport.
"javax.swing.Scrollable.getScrollableUnitIncrement(java.awt.Rectangle,int,int)","components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation."
javax.swing.SingleSelectionModel.addChangeListener(javax.swing.event.ChangeListener),adds listener as a listener to changes in the model.
javax.swing.SingleSelectionModel.clearSelection(),clears the selection (to -1).
javax.swing.SingleSelectionModel.getSelectedIndex(),returns the model's selection.
javax.swing.SingleSelectionModel.isSelected(),returns true if the selection model currently has a selected value.
javax.swing.SingleSelectionModel.removeChangeListener(javax.swing.event.ChangeListener),removes listener as a listener to changes in the model.
javax.swing.SingleSelectionModel.setSelectedIndex(int),sets the model's selected index to index.
javax.swing.SpinnerModel.addChangeListener(javax.swing.event.ChangeListener),adds a changelistener to the model's listener list.
javax.swing.SpinnerModel.getNextValue(),return the object in the sequence that comes after the object returned by getvalue().
javax.swing.SpinnerModel.getPreviousValue(),return the object in the sequence that comes before the object returned by getvalue().
javax.swing.SpinnerModel.getValue(),the current element of the sequence.
javax.swing.SpinnerModel.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from the model's listener list.
javax.swing.SpinnerModel.setValue(java.lang.Object),"changes current value of the model, typically this value is displayed by the editor part of a jspinner."
javax.swing.UIDefaults.ActiveValue.createValue(javax.swing.UIDefaults),creates the value retrieved from the uidefaults table.
javax.swing.UIDefaults.LazyValue.createValue(javax.swing.UIDefaults),creates the actual value retrieved from the uidefaults table.
javax.swing.AbstractAction.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
javax.swing.AbstractAction.clone(),clones the abstract action.
"javax.swing.AbstractAction.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",supports reporting bound property changes.
javax.swing.AbstractAction.getKeys(),"returns an array of objects which are keys for which values have been set for this abstractaction, or null if no keys have values set."
javax.swing.AbstractAction.getPropertyChangeListeners(),returns an array of all the propertychangelisteners added to this abstractaction with addpropertychangelistener().
javax.swing.AbstractAction.getValue(java.lang.String),gets the object associated with the specified key.
javax.swing.AbstractAction.isEnabled(),returns true if the action is enabled.
"javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)",sets the value associated with the specified key.
javax.swing.AbstractAction.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychangelistener from the listener list.
javax.swing.AbstractAction.setEnabled(boolean),sets whether the action is enabled.
"javax.swing.AbstractButton.actionPropertyChanged(javax.swing.Action,java.lang.String)",updates the button's state in response to property changes in the associated action.
javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener),adds an actionlistener to the button.
javax.swing.AbstractButton.addChangeListener(javax.swing.event.ChangeListener),adds a changelistener to the button.
"javax.swing.AbstractButton.addImpl(java.awt.Component,java.lang.Object,int)","adds the specified component to this container at the specified index, refer to container."
javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener),adds an itemlistener to the checkbox.
"javax.swing.AbstractButton.checkHorizontalKey(int,java.lang.String)",verify that the key argument is a legal value for the horizontalalignment and horizontaltextposition properties.
"javax.swing.AbstractButton.checkVerticalKey(int,java.lang.String)",verify that the key argument is a legal value for the vertical properties.
javax.swing.AbstractButton.configurePropertiesFromAction(javax.swing.Action),sets the properties on this button to match those in the specified action.
javax.swing.AbstractButton.createActionPropertyChangeListener(javax.swing.Action),creates and returns a propertychangelistener that is responsible for listening for changes from the specified action and updating the appropriate properties.
javax.swing.AbstractButton.createChangeListener(),subclasses that want to handle changeevents differently can override this to return another changelistener implementation.
javax.swing.AbstractButton.doClick(),"programmatically perform a ""click""."
javax.swing.AbstractButton.doClick(int),"programmatically perform a ""click""."
javax.swing.AbstractButton.fireActionPerformed(java.awt.event.ActionEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.AbstractButton.fireItemStateChanged(java.awt.event.ItemEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.AbstractButton.fireStateChanged(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.AbstractButton.getAction(),"returns the currently set action for this actionevent source, or null if no action is set."
javax.swing.AbstractButton.getActionCommand(),returns the action command for this button.
javax.swing.AbstractButton.getActionListeners(),returns an array of all the actionlisteners added to this abstractbutton with addactionlistener().
javax.swing.AbstractButton.getChangeListeners(),returns an array of all the changelisteners added to this abstractbutton with addchangelistener().
javax.swing.AbstractButton.getDisabledIcon(),returns the icon used by the button when it's disabled.
javax.swing.AbstractButton.getDisabledSelectedIcon(),returns the icon used by the button when it's disabled and selected.
javax.swing.AbstractButton.getDisplayedMnemonicIndex(),"returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character."
javax.swing.AbstractButton.getHideActionText(),"returns the value of the hideactiontext property, which determines whether the button displays text from the action."
javax.swing.AbstractButton.getHorizontalAlignment(),returns the horizontal alignment of the icon and text.
javax.swing.AbstractButton.getHorizontalTextPosition(),returns the horizontal position of the text relative to the icon.
javax.swing.AbstractButton.getIcon(),returns the default icon.
javax.swing.AbstractButton.getIconTextGap(),returns the amount of space between the text and the icon displayed in this button.
javax.swing.AbstractButton.getItemListeners(),returns an array of all the itemlisteners added to this abstractbutton with additemlistener().
javax.swing.AbstractButton.getMargin(),returns the margin between the button's border and the label.
javax.swing.AbstractButton.getMnemonic(),returns the keyboard mnemonic from the the current model.
javax.swing.AbstractButton.getModel(),returns the model that this button represents.
javax.swing.AbstractButton.getMultiClickThreshhold(),gets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events.
javax.swing.AbstractButton.getPressedIcon(),returns the pressed icon for the button.
javax.swing.AbstractButton.getRolloverIcon(),returns the rollover icon for the button.
javax.swing.AbstractButton.getRolloverSelectedIcon(),returns the rollover selection icon for the button.
javax.swing.AbstractButton.getSelectedIcon(),returns the selected icon for the button.
javax.swing.AbstractButton.getSelectedObjects(),returns an array (length 1) containing the label or null if the button is not selected.
javax.swing.AbstractButton.getText(),returns the button's text.
javax.swing.AbstractButton.getUI(),returns the l&f object that renders this component.
javax.swing.AbstractButton.getVerticalAlignment(),returns the vertical alignment of the text and icon.
javax.swing.AbstractButton.getVerticalTextPosition(),returns the vertical position of the text relative to the icon.
"javax.swing.AbstractButton.imageUpdate(java.awt.Image,int,int,int,int,int)",this is overridden to return false if the current icon's image is not equal to the passed in image img.
javax.swing.AbstractButton.isBorderPainted(),gets the borderpainted property.
javax.swing.AbstractButton.isContentAreaFilled(),gets the contentareafilled property.
javax.swing.AbstractButton.isFocusPainted(),gets the paintfocus property.
javax.swing.AbstractButton.isRolloverEnabled(),gets the rolloverenabled property.
javax.swing.AbstractButton.isSelected(),returns the state of the button.
javax.swing.AbstractButton.paintBorder(java.awt.Graphics),paint the button's border if borderpainted property is true and the button has a border.
javax.swing.AbstractButton.paramString(),returns a string representation of this abstractbutton.
javax.swing.AbstractButton.removeActionListener(java.awt.event.ActionListener),removes an actionlistener from the button.
javax.swing.AbstractButton.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from the button.
javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener),removes an itemlistener from the button.
javax.swing.AbstractButton.removeNotify(),notifies this component that it no longer has a parent component.
javax.swing.AbstractButton.setAction(javax.swing.Action),sets the action.
javax.swing.AbstractButton.setActionCommand(java.lang.String),sets the action command for this button.
javax.swing.AbstractButton.setBorderPainted(boolean),sets the borderpainted property.
javax.swing.AbstractButton.setContentAreaFilled(boolean),sets the contentareafilled property.
javax.swing.AbstractButton.setDisabledIcon(javax.swing.Icon),sets the disabled icon for the button.
javax.swing.AbstractButton.setDisabledSelectedIcon(javax.swing.Icon),sets the disabled selection icon for the button.
javax.swing.AbstractButton.setDisplayedMnemonicIndex(int),provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic.
javax.swing.AbstractButton.setEnabled(boolean),enables (or disables) the button.
javax.swing.AbstractButton.setFocusPainted(boolean),"sets the paintfocus property, which must be true for the focus state to be painted."
javax.swing.AbstractButton.setHideActionText(boolean),"sets the hideactiontext property, which determines whether the button displays text from the action."
javax.swing.AbstractButton.setHorizontalAlignment(int),sets the horizontal alignment of the icon and text.
javax.swing.AbstractButton.setHorizontalTextPosition(int),sets the horizontal position of the text relative to the icon.
javax.swing.AbstractButton.setIcon(javax.swing.Icon),sets the button's default icon.
javax.swing.AbstractButton.setIconTextGap(int),"if both the icon and text properties are set, this property defines the space between them."
javax.swing.AbstractButton.setLayout(java.awt.LayoutManager),"sets the layout manager for this container, refer to container."
javax.swing.AbstractButton.setMargin(java.awt.Insets),sets space for margin between the button's border and the label.
javax.swing.AbstractButton.setMnemonic(int),sets the keyboard mnemonic on the current model.
javax.swing.AbstractButton.setMnemonic(char),"this method is now obsolete, please use setmnemonic(int) to set the mnemonic for a button."
javax.swing.AbstractButton.setModel(javax.swing.ButtonModel),sets the model that this button represents.
javax.swing.AbstractButton.setMultiClickThreshhold(long),sets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events.
javax.swing.AbstractButton.setPressedIcon(javax.swing.Icon),sets the pressed icon for the button.
javax.swing.AbstractButton.setRolloverEnabled(boolean),"sets the rolloverenabled property, which must be true for rollover effects to occur."
javax.swing.AbstractButton.setRolloverIcon(javax.swing.Icon),sets the rollover icon for the button.
javax.swing.AbstractButton.setRolloverSelectedIcon(javax.swing.Icon),sets the rollover selected icon for the button.
javax.swing.AbstractButton.setSelected(boolean),sets the state of the button.
javax.swing.AbstractButton.setSelectedIcon(javax.swing.Icon),sets the selected icon for the button.
javax.swing.AbstractButton.setText(java.lang.String),sets the button's text.
javax.swing.AbstractButton.setUI(javax.swing.plaf.ButtonUI),sets the l&f object that renders this component.
javax.swing.AbstractButton.setVerticalAlignment(int),sets the vertical alignment of the icon and text.
javax.swing.AbstractButton.setVerticalTextPosition(int),sets the vertical position of the text relative to the icon.
javax.swing.AbstractButton.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.AbstractCellEditor.addCellEditorListener(javax.swing.event.CellEditorListener),adds a celleditorlistener to the listener list.
javax.swing.AbstractCellEditor.cancelCellEditing(),calls fireeditingcanceled.
javax.swing.AbstractCellEditor.fireEditingCanceled(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.AbstractCellEditor.fireEditingStopped(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.AbstractCellEditor.getCellEditorListeners(),returns an array of all the celleditorlisteners added to this abstractcelleditor with addcelleditorlistener().
javax.swing.AbstractCellEditor.isCellEditable(java.util.EventObject),returns true.
javax.swing.AbstractCellEditor.removeCellEditorListener(javax.swing.event.CellEditorListener),removes a celleditorlistener from the listener list.
javax.swing.AbstractCellEditor.shouldSelectCell(java.util.EventObject),returns true.
javax.swing.AbstractCellEditor.stopCellEditing(),calls fireeditingstopped and returns true.
javax.swing.AbstractListModel.addListDataListener(javax.swing.event.ListDataListener),adds a listener to the list that's notified each time a change to the data model occurs.
"javax.swing.AbstractListModel.fireContentsChanged(java.lang.Object,int,int)",abstractlistmodel subclasses must call this method after one or more elements of the list change.
"javax.swing.AbstractListModel.fireIntervalAdded(java.lang.Object,int,int)",abstractlistmodel subclasses must call this method after one or more elements are added to the model.
"javax.swing.AbstractListModel.fireIntervalRemoved(java.lang.Object,int,int)",abstractlistmodel subclasses must call this method after one or more elements are removed from the model.
javax.swing.AbstractListModel.getListDataListeners(),returns an array of all the list data listeners registered on this abstractlistmodel.
javax.swing.AbstractListModel.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this model.
javax.swing.AbstractListModel.removeListDataListener(javax.swing.event.ListDataListener),removes a listener from the list that's notified each time a change to the data model occurs.
javax.swing.AbstractSpinnerModel.addChangeListener(javax.swing.event.ChangeListener),adds a changelistener to the model's listener list.
javax.swing.AbstractSpinnerModel.fireStateChanged(),run each changelisteners statechanged() method.
javax.swing.AbstractSpinnerModel.getChangeListeners(),returns an array of all the changelisteners added to this abstractspinnermodel with addchangelistener().
javax.swing.AbstractSpinnerModel.getListeners(java.lang.Class<T>),return an array of all the listeners of the given type that were added to this model.
javax.swing.AbstractSpinnerModel.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from the model's listener list.
javax.swing.ActionMap.allKeys(),returns an array of the keys defined in this actionmap and its parent.
javax.swing.ActionMap.clear(),removes all the mappings from this actionmap.
javax.swing.ActionMap.get(java.lang.Object),"returns the binding for key, messaging the parent actionmap if the binding is not locally defined."
javax.swing.ActionMap.getParent(),returns this actionmap's parent.
javax.swing.ActionMap.keys(),returns the action names that are bound in this actionmap.
"javax.swing.ActionMap.put(java.lang.Object,javax.swing.Action)",adds a binding for key to action.
javax.swing.ActionMap.remove(java.lang.Object),removes the binding for key from this actionmap.
javax.swing.ActionMap.setParent(javax.swing.ActionMap),sets this actionmap's parent.
javax.swing.ActionMap.size(),returns the number of bindings in this actionmap.
javax.swing.BorderFactory.createBevelBorder(int),"creates a beveled border of the specified type, using brighter shades of the component's current background color for highlighting, and darker shading for shadows."
"javax.swing.BorderFactory.createBevelBorder(int,java.awt.Color,java.awt.Color)","creates a beveled border of the specified type, using the specified highlighting and shadowing."
"javax.swing.BorderFactory.createBevelBorder(int,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color)","creates a beveled border of the specified type, using the specified colors for the inner and outer highlight and shadow areas."
javax.swing.BorderFactory.createCompoundBorder(),creates a compound border with a null inside edge and a null outside edge.
"javax.swing.BorderFactory.createCompoundBorder(javax.swing.border.Border,javax.swing.border.Border)",creates a compound border specifying the border objects to use for the outside and inside edges.
javax.swing.BorderFactory.createDashedBorder(java.awt.Paint),creates a dashed border of the specified paint.
"javax.swing.BorderFactory.createDashedBorder(java.awt.Paint,float,float)","creates a dashed border of the specified paint, relative length, and relative spacing."
"javax.swing.BorderFactory.createDashedBorder(java.awt.Paint,float,float,float,boolean)","creates a dashed border of the specified paint, thickness, line shape, relative length, and relative spacing."
javax.swing.BorderFactory.createEmptyBorder(),creates an empty border that takes up no space.
"javax.swing.BorderFactory.createEmptyBorder(int,int,int,int)","creates an empty border that takes up space but which does no drawing, specifying the width of the top, left, bottom, and right sides."
javax.swing.BorderFactory.createEtchedBorder(),"creates a border with an ""etched"" look using the component's current background color for highlighting and shading."
"javax.swing.BorderFactory.createEtchedBorder(java.awt.Color,java.awt.Color)","creates a border with an ""etched"" look using the specified highlighting and shading colors."
javax.swing.BorderFactory.createEtchedBorder(int),"creates a border with an ""etched"" look using the component's current background color for highlighting and shading."
"javax.swing.BorderFactory.createEtchedBorder(int,java.awt.Color,java.awt.Color)","creates a border with an ""etched"" look using the specified highlighting and shading colors."
javax.swing.BorderFactory.createLineBorder(java.awt.Color),creates a line border withe the specified color.
"javax.swing.BorderFactory.createLineBorder(java.awt.Color,int)",creates a line border with the specified color and width.
"javax.swing.BorderFactory.createLineBorder(java.awt.Color,int,boolean)","creates a line border with the specified color, thickness, and corner shape."
javax.swing.BorderFactory.createLoweredBevelBorder(),"creates a border with a lowered beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows."
javax.swing.BorderFactory.createLoweredSoftBevelBorder(),"creates a beveled border with a lowered edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows."
"javax.swing.BorderFactory.createMatteBorder(int,int,int,int,java.awt.Color)",creates a matte-look border using a solid color.
"javax.swing.BorderFactory.createMatteBorder(int,int,int,int,javax.swing.Icon)",creates a matte-look border that consists of multiple tiles of a specified icon.
javax.swing.BorderFactory.createRaisedBevelBorder(),"creates a border with a raised beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows."
javax.swing.BorderFactory.createRaisedSoftBevelBorder(),"creates a beveled border with a raised edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows."
javax.swing.BorderFactory.createSoftBevelBorder(int),"creates a beveled border of the specified type with softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows."
"javax.swing.BorderFactory.createSoftBevelBorder(int,java.awt.Color,java.awt.Color)","creates a beveled border of the specified type with softened corners, using the specified highlighting and shadowing."
"javax.swing.BorderFactory.createSoftBevelBorder(int,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color)","creates a beveled border of the specified type with softened corners, using the specified colors for the inner and outer edges of the highlight and the shadow areas."
javax.swing.BorderFactory.createStrokeBorder(java.awt.BasicStroke),creates a border of the specified stroke.
"javax.swing.BorderFactory.createStrokeBorder(java.awt.BasicStroke,java.awt.Paint)",creates a border of the specified stroke and paint.
javax.swing.BorderFactory.createTitledBorder(java.lang.String),"creates a new titled border with the specified title, the default border type (determined by the current look and feel), the default text position (determined by the current look and feel), the default justification (leading), and the default font and text color (determined by the current look and feel)."
javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border),"creates a new titled border with an empty title, the specified border object, the default text position (determined by the current look and feel), the default justification (leading), and the default font and text color (determined by the current look and feel)."
"javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border,java.lang.String)","adds a title to an existing border, with default positioning (determined by the current look and feel), default justification (leading) and the default font and text color (determined by the current look and feel)."
"javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border,java.lang.String,int,int)","adds a title to an existing border, with the specified positioning and using the default font and text color (determined by the current look and feel)."
"javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border,java.lang.String,int,int,java.awt.Font)","adds a title to an existing border, with the specified positioning and font, and using the default text color (determined by the current look and feel)."
"javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border,java.lang.String,int,int,java.awt.Font,java.awt.Color)","adds a title to an existing border, with the specified positioning, font and color."
javax.swing.Box.createGlue(),"creates an invisible ""glue"" component that can be useful in a box whose visible components have a maximum width (for a horizontal box) or height (for a vertical box)."
javax.swing.Box.createHorizontalBox(),creates a box that displays its components from left to right.
javax.swing.Box.createHorizontalGlue(),creates a horizontal glue component.
javax.swing.Box.createHorizontalStrut(int),"creates an invisible, fixed-width component."
javax.swing.Box.createRigidArea(java.awt.Dimension),creates an invisible component that's always the specified size.
javax.swing.Box.createVerticalBox(),creates a box that displays its components from top to bottom.
javax.swing.Box.createVerticalGlue(),creates a vertical glue component.
javax.swing.Box.createVerticalStrut(int),"creates an invisible, fixed-height component."
javax.swing.Box.getAccessibleContext(),gets the accessiblecontext associated with this box.
javax.swing.Box.paintComponent(java.awt.Graphics),paints this box.
javax.swing.Box.setLayout(java.awt.LayoutManager),"throws an awterror, since a box can use only a boxlayout."
"javax.swing.Box.Filler.changeShape(java.awt.Dimension,java.awt.Dimension,java.awt.Dimension)",change the size requests for this shape.
javax.swing.Box.Filler.getAccessibleContext(),gets the accessiblecontext associated with this box.
javax.swing.Box.Filler.paintComponent(java.awt.Graphics),paints this filler.
"javax.swing.BoxLayout.addLayoutComponent(java.lang.String,java.awt.Component)",not used by this class.
"javax.swing.BoxLayout.addLayoutComponent(java.awt.Component,java.lang.Object)",not used by this class.
javax.swing.BoxLayout.getAxis(),returns the axis that was used to lay out components.
javax.swing.BoxLayout.getLayoutAlignmentX(java.awt.Container),returns the alignment along the x axis for the container.
javax.swing.BoxLayout.getLayoutAlignmentY(java.awt.Container),returns the alignment along the y axis for the container.
javax.swing.BoxLayout.getTarget(),returns the container that uses this layout manager.
javax.swing.BoxLayout.invalidateLayout(java.awt.Container),"indicates that a child has changed its layout related information, and thus any cached calculations should be flushed."
javax.swing.BoxLayout.layoutContainer(java.awt.Container),called by the awt when the specified container needs to be laid out.
javax.swing.BoxLayout.maximumLayoutSize(java.awt.Container),returns the maximum dimensions the target container can use to lay out the components it contains.
javax.swing.BoxLayout.minimumLayoutSize(java.awt.Container),returns the minimum dimensions needed to lay out the components contained in the specified target container.
javax.swing.BoxLayout.preferredLayoutSize(java.awt.Container),"returns the preferred dimensions for this layout, given the components in the specified target container."
javax.swing.BoxLayout.removeLayoutComponent(java.awt.Component),not used by this class.
javax.swing.ButtonGroup.add(javax.swing.AbstractButton),adds the button to the group.
javax.swing.ButtonGroup.clearSelection(),clears the selection such that none of the buttons in the buttongroup are selected.
javax.swing.ButtonGroup.getButtonCount(),returns the number of buttons in the group.
javax.swing.ButtonGroup.getElements(),returns all the buttons that are participating in this group.
javax.swing.ButtonGroup.getSelection(),returns the model of the selected button.
javax.swing.ButtonGroup.isSelected(javax.swing.ButtonModel),returns whether a buttonmodel is selected.
javax.swing.ButtonGroup.remove(javax.swing.AbstractButton),removes the button from the group.
"javax.swing.ButtonGroup.setSelected(javax.swing.ButtonModel,boolean)",sets the selected value for the buttonmodel.
"javax.swing.CellRendererPane.addImpl(java.awt.Component,java.lang.Object,int)",if the specified component is already a child of this then we don't bother doing anything - stacking order doesn't matter for cell renderer components (cellrendererpane doesn't paint anyway).
javax.swing.CellRendererPane.getAccessibleContext(),gets the accessiblecontext associated with this cellrendererpane.
javax.swing.CellRendererPane.invalidate(),overridden to avoid propagating a invalidate up the tree when the cell renderer child is configured.
javax.swing.CellRendererPane.paint(java.awt.Graphics),shouldn't be called.
"javax.swing.CellRendererPane.paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,int,int,int,int,boolean)",paint a cell renderer component c on graphics object g.
"javax.swing.CellRendererPane.paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,int,int,int,int)",calls this.
"javax.swing.CellRendererPane.paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,java.awt.Rectangle)",calls this.
javax.swing.CellRendererPane.update(java.awt.Graphics),shouldn't be called.
javax.swing.ComponentInputMap.clear(),removes all the mappings from this object.
javax.swing.ComponentInputMap.getComponent(),returns the component the inputmap was created for.
"javax.swing.ComponentInputMap.put(javax.swing.KeyStroke,java.lang.Object)",adds a binding for keystroke to actionmapkey.
javax.swing.ComponentInputMap.remove(javax.swing.KeyStroke),removes the binding for key from this object.
javax.swing.ComponentInputMap.setParent(javax.swing.InputMap),"sets the parent, which must be a componentinputmap associated with the same component as this componentinputmap."
javax.swing.DebugGraphics.flashColor(),returns the color used to flash drawing operations.
javax.swing.DebugGraphics.flashCount(),returns the number of times that drawing operations will flash.
javax.swing.DebugGraphics.flashTime(),returns the time delay of drawing operation flashing.
javax.swing.DebugGraphics.getColor(),returns the color used for text drawing operations.
javax.swing.DebugGraphics.getDebugOptions(),returns the current debugging options for this debuggraphics.
javax.swing.DebugGraphics.getFont(),returns the font used for text drawing operations.
javax.swing.DebugGraphics.isDrawingBuffer(),returns the drawingbuffer value.
javax.swing.DebugGraphics.logStream(),returns the stream to which the debuggraphics logs drawing operations.
javax.swing.DebugGraphics.setColor(java.awt.Color),sets the color to be used for drawing and filling lines and shapes.
javax.swing.DebugGraphics.setDebugOptions(int),enables/disables diagnostic information about every graphics operation.
javax.swing.DebugGraphics.setFlashColor(java.awt.Color),sets the color used to flash drawing operations.
javax.swing.DebugGraphics.setFlashCount(int),sets the number of times that drawing operations will flash.
javax.swing.DebugGraphics.setFlashTime(int),sets the time delay of drawing operation flashing.
javax.swing.DebugGraphics.setFont(java.awt.Font),sets the font used for text drawing operations.
javax.swing.DebugGraphics.setLogStream(java.io.PrintStream),sets the stream to which the debuggraphics logs drawing operations.
javax.swing.DefaultBoundedRangeModel.addChangeListener(javax.swing.event.ChangeListener),adds a changelistener.
javax.swing.DefaultBoundedRangeModel.fireStateChanged(),runs each changelistener's statechanged method.
javax.swing.DefaultBoundedRangeModel.getChangeListeners(),returns an array of all the change listeners registered on this defaultboundedrangemodel.
javax.swing.DefaultBoundedRangeModel.getExtent(),returns the model's extent.
javax.swing.DefaultBoundedRangeModel.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this model.
javax.swing.DefaultBoundedRangeModel.getMaximum(),returns the model's maximum.
javax.swing.DefaultBoundedRangeModel.getMinimum(),returns the model's minimum.
javax.swing.DefaultBoundedRangeModel.getValue(),returns the model's current value.
javax.swing.DefaultBoundedRangeModel.getValueIsAdjusting(),returns true if the value is in the process of changing as a result of actions being taken by the user.
javax.swing.DefaultBoundedRangeModel.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener.
javax.swing.DefaultBoundedRangeModel.setExtent(int),"sets the extent to n after ensuring that n is greater than or equal to zero and falls within the model's constraints:
minimum <= value <= value+extent <= maximum ."
javax.swing.DefaultBoundedRangeModel.setMaximum(int),"sets the maximum to n after ensuring that n that the other three properties obey the model's constraints:
minimum <= value <= value+extent <= maximum ."
javax.swing.DefaultBoundedRangeModel.setMinimum(int),"sets the minimum to n after ensuring that n that the other three properties obey the model's constraints:
minimum <= value <= value+extent <= maximum ."
"javax.swing.DefaultBoundedRangeModel.setRangeProperties(int,int,int,int,boolean)","sets all of the boundedrangemodel properties after forcing the arguments to obey the usual constraints:
minimum <= value <= value+extent <= maximum ."
javax.swing.DefaultBoundedRangeModel.setValue(int),sets the current value of the model.
javax.swing.DefaultBoundedRangeModel.setValueIsAdjusting(boolean),sets the valueisadjusting property.
javax.swing.DefaultBoundedRangeModel.toString(),returns a string that displays all of the boundedrangemodel properties.
javax.swing.DefaultButtonModel.addActionListener(java.awt.event.ActionListener),adds an actionlistener to the model.
javax.swing.DefaultButtonModel.addChangeListener(javax.swing.event.ChangeListener),adds a changelistener to the model.
javax.swing.DefaultButtonModel.addItemListener(java.awt.event.ItemListener),adds an itemlistener to the model.
javax.swing.DefaultButtonModel.fireActionPerformed(java.awt.event.ActionEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.DefaultButtonModel.fireItemStateChanged(java.awt.event.ItemEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.DefaultButtonModel.fireStateChanged(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.DefaultButtonModel.getActionCommand(),returns the action command string for the button.
javax.swing.DefaultButtonModel.getActionListeners(),returns an array of all the action listeners registered on this defaultbuttonmodel.
javax.swing.DefaultButtonModel.getChangeListeners(),returns an array of all the change listeners registered on this defaultbuttonmodel.
javax.swing.DefaultButtonModel.getGroup(),returns the group that the button belongs to.
javax.swing.DefaultButtonModel.getItemListeners(),returns an array of all the item listeners registered on this defaultbuttonmodel.
javax.swing.DefaultButtonModel.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this model.
javax.swing.DefaultButtonModel.getMnemonic(),gets the keyboard mnemonic for the button.
javax.swing.DefaultButtonModel.getSelectedObjects(),overridden to return null.
javax.swing.DefaultButtonModel.isArmed(),indicates partial commitment towards triggering the button.
javax.swing.DefaultButtonModel.isEnabled(),"indicates if the button can be selected or triggered by an input device, such as a mouse pointer."
javax.swing.DefaultButtonModel.isPressed(),indicates if the button is pressed.
javax.swing.DefaultButtonModel.isRollover(),indicates that the mouse is over the button.
javax.swing.DefaultButtonModel.isSelected(),indicates if the button has been selected.
javax.swing.DefaultButtonModel.removeActionListener(java.awt.event.ActionListener),removes an actionlistener from the model.
javax.swing.DefaultButtonModel.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from the model.
javax.swing.DefaultButtonModel.removeItemListener(java.awt.event.ItemListener),removes an itemlistener from the model.
javax.swing.DefaultButtonModel.setActionCommand(java.lang.String),sets the action command string that gets sent as part of the actionevent when the button is triggered.
javax.swing.DefaultButtonModel.setArmed(boolean),marks the button as armed or unarmed.
javax.swing.DefaultButtonModel.setEnabled(boolean),enables or disables the button.
javax.swing.DefaultButtonModel.setGroup(javax.swing.ButtonGroup),"identifies the group the button belongs to -- needed for radio buttons, which are mutually exclusive within their group."
javax.swing.DefaultButtonModel.setMnemonic(int),sets the keyboard mnemonic (shortcut key or accelerator key) for the button.
javax.swing.DefaultButtonModel.setPressed(boolean),sets the button to pressed or unpressed.
javax.swing.DefaultButtonModel.setRollover(boolean),sets or clears the button's rollover state.
javax.swing.DefaultButtonModel.setSelected(boolean),selects or deselects the button.
javax.swing.DefaultCellEditor.cancelCellEditing(),forwards the message from the celleditor to the delegate.
javax.swing.DefaultCellEditor.getCellEditorValue(),forwards the message from the celleditor to the delegate.
javax.swing.DefaultCellEditor.getClickCountToStart(),returns the number of clicks needed to start editing.
javax.swing.DefaultCellEditor.getComponent(),returns a reference to the editor component.
"javax.swing.DefaultCellEditor.getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)",implements the tablecelleditor interface.
"javax.swing.DefaultCellEditor.getTreeCellEditorComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int)",implements the treecelleditor interface.
javax.swing.DefaultCellEditor.isCellEditable(java.util.EventObject),forwards the message from the celleditor to the delegate.
javax.swing.DefaultCellEditor.setClickCountToStart(int),specifies the number of clicks needed to start editing.
javax.swing.DefaultCellEditor.shouldSelectCell(java.util.EventObject),forwards the message from the celleditor to the delegate.
javax.swing.DefaultCellEditor.stopCellEditing(),forwards the message from the celleditor to the delegate.
javax.swing.DefaultComboBoxModel.getIndexOf(java.lang.Object),returns the index-position of the specified object in the list.
javax.swing.DefaultComboBoxModel.removeAllElements(),empties the list.
javax.swing.DefaultComboBoxModel.setSelectedItem(java.lang.Object),set the value of the selected item.
javax.swing.DefaultDesktopManager.activateFrame(javax.swing.JInternalFrame),this will activate f moving it to the front.
javax.swing.DefaultDesktopManager.closeFrame(javax.swing.JInternalFrame),"removes the frame, and, if necessary, the desktopicon, from its parent."
javax.swing.DefaultDesktopManager.deiconifyFrame(javax.swing.JInternalFrame),removes the desktopicon from its parent and adds its frame to the parent.
"javax.swing.DefaultDesktopManager.dragFrame(javax.swing.JComponent,int,int)",moves the visible location of the frame being dragged to the location specified.
javax.swing.DefaultDesktopManager.getBoundsForIconOf(javax.swing.JInternalFrame),the iconifyframe() code calls this to determine the proper bounds for the desktopicon.
javax.swing.DefaultDesktopManager.getPreviousBounds(javax.swing.JInternalFrame),gets the normal bounds of the component prior to the component being maximized.
javax.swing.DefaultDesktopManager.iconifyFrame(javax.swing.JInternalFrame),removes the frame from its parent and adds its desktopicon to the parent.
javax.swing.DefaultDesktopManager.maximizeFrame(javax.swing.JInternalFrame),resizes the frame to fill its parents bounds.
javax.swing.DefaultDesktopManager.minimizeFrame(javax.swing.JInternalFrame),restores the frame back to its size and position prior to a maximizeframe call.
javax.swing.DefaultDesktopManager.openFrame(javax.swing.JInternalFrame),normally this method will not be called.
javax.swing.DefaultDesktopManager.removeIconFor(javax.swing.JInternalFrame),convenience method to remove the desktopicon of f is necessary.
"javax.swing.DefaultDesktopManager.resizeFrame(javax.swing.JComponent,int,int,int,int)",calls setboundsforframe with the new values.
"javax.swing.DefaultDesktopManager.setBoundsForFrame(javax.swing.JComponent,int,int,int,int)",this moves the jcomponent and repaints the damaged areas.
"javax.swing.DefaultDesktopManager.setPreviousBounds(javax.swing.JInternalFrame,java.awt.Rectangle)",stores the bounds of the component just before a maximize call.
"javax.swing.DefaultDesktopManager.setWasIcon(javax.swing.JInternalFrame,java.lang.Boolean)",sets that the component has been iconized and the bounds of the desktopicon are valid.
javax.swing.DefaultDesktopManager.wasIcon(javax.swing.JInternalFrame),"returns true if the component has been iconized and the bounds of the desktopicon are valid, otherwise returns false."
"javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",overridden for performance reasons.
"javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,byte,byte)",overridden for performance reasons.
"javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,char,char)",overridden for performance reasons.
"javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,short,short)",overridden for performance reasons.
"javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,int,int)",overridden for performance reasons.
"javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,long,long)",overridden for performance reasons.
"javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,float,float)",overridden for performance reasons.
"javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,double,double)",overridden for performance reasons.
"javax.swing.DefaultListCellRenderer.firePropertyChange(java.lang.String,boolean,boolean)",overridden for performance reasons.
javax.swing.DefaultListCellRenderer.invalidate(),overridden for performance reasons.
javax.swing.DefaultListCellRenderer.isOpaque(),overridden for performance reasons.
javax.swing.DefaultListCellRenderer.repaint(),overridden for performance reasons.
"javax.swing.DefaultListCellRenderer.repaint(long,int,int,int,int)",overridden for performance reasons.
javax.swing.DefaultListCellRenderer.repaint(java.awt.Rectangle),overridden for performance reasons.
javax.swing.DefaultListCellRenderer.revalidate(),overridden for performance reasons.
javax.swing.DefaultListCellRenderer.validate(),overridden for performance reasons.
"javax.swing.DefaultListModel.add(int,javax.swing.DefaultListModel)",inserts the specified element at the specified position in this list.
javax.swing.DefaultListModel.addElement(javax.swing.DefaultListModel),adds the specified component to the end of this list.
javax.swing.DefaultListModel.capacity(),returns the current capacity of this list.
javax.swing.DefaultListModel.clear(),removes all of the elements from this list.
javax.swing.DefaultListModel.contains(java.lang.Object),tests whether the specified object is a component in this list.
javax.swing.DefaultListModel.copyInto(java.lang.Object[]),copies the components of this list into the specified array.
javax.swing.DefaultListModel.elementAt(int),returns the component at the specified index.
javax.swing.DefaultListModel.elements(),returns an enumeration of the components of this list.
javax.swing.DefaultListModel.ensureCapacity(int),"increases the capacity of this list, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument."
javax.swing.DefaultListModel.firstElement(),returns the first component of this list.
javax.swing.DefaultListModel.get(int),returns the element at the specified position in this list.
javax.swing.DefaultListModel.getElementAt(int),returns the component at the specified index.
javax.swing.DefaultListModel.getSize(),returns the number of components in this list.
javax.swing.DefaultListModel.indexOf(java.lang.Object),searches for the first occurrence of elem.
"javax.swing.DefaultListModel.indexOf(java.lang.Object,int)","searches for the first occurrence of elem, beginning the search at index."
"javax.swing.DefaultListModel.insertElementAt(javax.swing.DefaultListModel,int)",inserts the specified element as a component in this list at the specified index.
javax.swing.DefaultListModel.isEmpty(),tests whether this list has any components.
javax.swing.DefaultListModel.lastElement(),returns the last component of the list.
javax.swing.DefaultListModel.lastIndexOf(java.lang.Object),returns the index of the last occurrence of elem.
"javax.swing.DefaultListModel.lastIndexOf(java.lang.Object,int)","searches backwards for elem, starting from the specified index, and returns an index to it."
javax.swing.DefaultListModel.remove(int),removes the element at the specified position in this list.
javax.swing.DefaultListModel.removeAllElements(),removes all components from this list and sets its size to zero.
javax.swing.DefaultListModel.removeElement(java.lang.Object),removes the first (lowest-indexed) occurrence of the argument from this list.
javax.swing.DefaultListModel.removeElementAt(int),deletes the component at the specified index.
"javax.swing.DefaultListModel.removeRange(int,int)",deletes the components at the specified range of indexes.
"javax.swing.DefaultListModel.set(int,javax.swing.DefaultListModel)",replaces the element at the specified position in this list with the specified element.
"javax.swing.DefaultListModel.setElementAt(javax.swing.DefaultListModel,int)",sets the component at the specified index of this list to be the specified element.
javax.swing.DefaultListModel.setSize(int),sets the size of this list.
javax.swing.DefaultListModel.size(),returns the number of components in this list.
javax.swing.DefaultListModel.toArray(),returns an array containing all of the elements in this list in the correct order.
javax.swing.DefaultListModel.toString(),returns a string that displays and identifies this object's properties.
javax.swing.DefaultListModel.trimToSize(),trims the capacity of this list to be the list's current size.
javax.swing.DefaultListSelectionModel.addListSelectionListener(javax.swing.event.ListSelectionListener),add a listener to the list that's notified each time a change to the selection occurs.
"javax.swing.DefaultListSelectionModel.addSelectionInterval(int,int)",changes the selection to be the set union of the current selection and the indices between index0 and index1 inclusive.
javax.swing.DefaultListSelectionModel.clearSelection(),change the selection to the empty set.
javax.swing.DefaultListSelectionModel.clone(),returns a clone of this selection model with the same selection.
javax.swing.DefaultListSelectionModel.fireValueChanged(boolean),notifies listeners that we have ended a series of adjustments.
"javax.swing.DefaultListSelectionModel.fireValueChanged(int,int)","notifies listselectionlisteners that the value of the selection, in the closed interval firstindex, lastindex, has changed."
javax.swing.DefaultListSelectionModel.getAnchorSelectionIndex(),"return the first index argument from the most recent call to setselectioninterval(), addselectioninterval() or removeselectioninterval()."
javax.swing.DefaultListSelectionModel.getLeadSelectionIndex(),"return the second index argument from the most recent call to setselectioninterval(), addselectioninterval() or removeselectioninterval()."
javax.swing.DefaultListSelectionModel.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this model.
javax.swing.DefaultListSelectionModel.getListSelectionListeners(),returns an array of all the list selection listeners registered on this defaultlistselectionmodel.
javax.swing.DefaultListSelectionModel.getMaxSelectionIndex(),returns the last selected index or -1 if the selection is empty.
javax.swing.DefaultListSelectionModel.getMinSelectionIndex(),returns the first selected index or -1 if the selection is empty.
javax.swing.DefaultListSelectionModel.getSelectionMode(),returns the current selection mode.
javax.swing.DefaultListSelectionModel.getValueIsAdjusting(),returns true if the selection is undergoing a series of changes.
"javax.swing.DefaultListSelectionModel.insertIndexInterval(int,int,boolean)",insert length indices beginning before/after index.
javax.swing.DefaultListSelectionModel.isLeadAnchorNotificationEnabled(),returns the value of the leadanchornotificationenabled flag.
javax.swing.DefaultListSelectionModel.isSelectedIndex(int),returns true if the specified index is selected.
javax.swing.DefaultListSelectionModel.isSelectionEmpty(),returns true if no indices are selected.
javax.swing.DefaultListSelectionModel.moveLeadSelectionIndex(int),"set the lead selection index, leaving all selection values unchanged."
"javax.swing.DefaultListSelectionModel.removeIndexInterval(int,int)","remove the indices in the interval index0,index1 (inclusive) from the selection model."
javax.swing.DefaultListSelectionModel.removeListSelectionListener(javax.swing.event.ListSelectionListener),remove a listener from the list that's notified each time a change to the selection occurs.
"javax.swing.DefaultListSelectionModel.removeSelectionInterval(int,int)",changes the selection to be the set difference of the current selection and the indices between index0 and index1 inclusive.
javax.swing.DefaultListSelectionModel.setAnchorSelectionIndex(int),"set the anchor selection index, leaving all selection values unchanged."
javax.swing.DefaultListSelectionModel.setLeadAnchorNotificationEnabled(boolean),sets the value of the leadanchornotificationenabled flag.
javax.swing.DefaultListSelectionModel.setLeadSelectionIndex(int),"sets the lead selection index, ensuring that values between the anchor and the new lead are either all selected or all deselected."
"javax.swing.DefaultListSelectionModel.setSelectionInterval(int,int)",changes the selection to be between index0 and index1 inclusive.
javax.swing.DefaultListSelectionModel.setSelectionMode(int),sets the selection mode.
javax.swing.DefaultListSelectionModel.setValueIsAdjusting(boolean),"sets the valueisadjusting property, which indicates whether or not upcoming selection changes should be considered part of a single change."
javax.swing.DefaultListSelectionModel.toString(),returns a string that displays and identifies this object's properties.
javax.swing.DefaultRowSorter.allRowsChanged(),invoked when the contents of the underlying model have completely changed.
javax.swing.DefaultRowSorter.convertRowIndexToModel(int),returns the location of index in terms of the underlying model.
javax.swing.DefaultRowSorter.convertRowIndexToView(int),returns the location of index in terms of the view.
javax.swing.DefaultRowSorter.getComparator(int),returns the comparator for the specified column.
javax.swing.DefaultRowSorter.getMaxSortKeys(),returns the maximum number of sort keys.
javax.swing.DefaultRowSorter.getModel(),returns the underlying model.
javax.swing.DefaultRowSorter.getModelRowCount(),returns the number of rows in the underlying model.
javax.swing.DefaultRowSorter.getModelWrapper(),returns the model wrapper providing the data that is being sorted and filtered.
javax.swing.DefaultRowSorter.getRowFilter(),"returns the filter that determines which rows, if any, should be hidden from view."
javax.swing.DefaultRowSorter.getSortKeys(),returns the current sort keys.
javax.swing.DefaultRowSorter.getSortsOnUpdates(),"returns true if a sort should happen when the underlying model is updated; otherwise, returns false."
javax.swing.DefaultRowSorter.getViewRowCount(),returns the number of rows in the view.
javax.swing.DefaultRowSorter.isSortable(int),"returns true if the specified column is sortable; otherwise, false."
javax.swing.DefaultRowSorter.modelStructureChanged(),invoked when the underlying model structure has completely changed.
"javax.swing.DefaultRowSorter.rowsDeleted(int,int)",invoked when rows have been deleted from the underlying model in the specified range (inclusive).
"javax.swing.DefaultRowSorter.rowsInserted(int,int)",invoked when rows have been inserted into the underlying model in the specified range (inclusive).
"javax.swing.DefaultRowSorter.rowsUpdated(int,int)",invoked when rows have been changed in the underlying model between the specified range (inclusive).
"javax.swing.DefaultRowSorter.rowsUpdated(int,int,int)",invoked when the column in the rows have been updated in the underlying model between the specified range.
"javax.swing.DefaultRowSorter.setComparator(int,java.util.Comparator<?>)",sets the comparator to use when sorting the specified column.
javax.swing.DefaultRowSorter.setMaxSortKeys(int),sets the maximum number of sort keys.
"javax.swing.DefaultRowSorter.setModelWrapper(,javax.swing.DefaultRowSorter>)",sets the model wrapper providing the data that is being sorted and filtered.
"javax.swing.DefaultRowSorter.setRowFilter(javax.swing.RowFilter<? super,? super javax.swing.DefaultRowSorter>)","sets the filter that determines which rows, if any, should be hidden from the view."
"javax.swing.DefaultRowSorter.setSortable(int,boolean)",sets whether or not the specified column is sortable.
javax.swing.DefaultRowSorter.setSortKeys(java.util.List<? extends javax.swing.RowSorter.SortKey>),sets the sort keys.
javax.swing.DefaultRowSorter.setSortsOnUpdates(boolean),"if true, specifies that a sort should happen when the underlying model is updated (rowsupdated is invoked)."
javax.swing.DefaultRowSorter.sort(),"sorts and filters the rows in the view based on the sort keys of the columns currently being sorted and the filter, if any, associated with this sorter."
javax.swing.DefaultRowSorter.toggleSortOrder(int),"reverses the sort order from ascending to descending (or descending to ascending) if the specified column is already the primary sorted column; otherwise, makes the specified column the primary sorted column, with an ascending sort order."
javax.swing.DefaultRowSorter.useToString(int),returns whether or not to convert the value to a string before doing comparisons when sorting.
javax.swing.DefaultRowSorter.ModelWrapper.getColumnCount(),returns the number of columns in the model.
javax.swing.DefaultRowSorter.ModelWrapper.getIdentifier(int),returns the identifier for the specified row.
javax.swing.DefaultRowSorter.ModelWrapper.getModel(),returns the underlying model that this model is wrapping.
javax.swing.DefaultRowSorter.ModelWrapper.getRowCount(),returns the number of rows in the model.
"javax.swing.DefaultRowSorter.ModelWrapper.getStringValueAt(int,int)",returns the value as a string at the specified index.
"javax.swing.DefaultRowSorter.ModelWrapper.getValueAt(int,int)",returns the value at the specified index.
javax.swing.DefaultSingleSelectionModel.addChangeListener(javax.swing.event.ChangeListener),adds a changelistener to the button.
javax.swing.DefaultSingleSelectionModel.fireStateChanged(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.DefaultSingleSelectionModel.getChangeListeners(),returns an array of all the change listeners registered on this defaultsingleselectionmodel.
javax.swing.DefaultSingleSelectionModel.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this model.
javax.swing.DefaultSingleSelectionModel.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from the button.
javax.swing.FocusManager.getCurrentManager(),returns the current keyboardfocusmanager instance for the calling thread's context.
javax.swing.FocusManager.setCurrentManager(javax.swing.FocusManager),sets the current keyboardfocusmanager instance for the calling thread's context.
javax.swing.GrayFilter.createDisabledImage(java.awt.Image),creates a disabled image.
"javax.swing.GroupLayout.addLayoutComponent(java.lang.String,java.awt.Component)",notification that a component has been added to the parent container.
"javax.swing.GroupLayout.addLayoutComponent(java.awt.Component,java.lang.Object)",notification that a component has been added to the parent container.
"javax.swing.GroupLayout.createBaselineGroup(boolean,boolean)",creates and returns a parallelgroup that aligns it's elements along the baseline.
javax.swing.GroupLayout.createParallelGroup(),creates and returns a parallelgroup with an alignment of alignment.
javax.swing.GroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment),creates and returns a parallelgroup with the specified alignment.
"javax.swing.GroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment,boolean)",creates and returns a parallelgroup with the specified alignment and resize behavior.
javax.swing.GroupLayout.createSequentialGroup(),creates and returns a sequentialgroup.
javax.swing.GroupLayout.getAutoCreateContainerGaps(),returns true if gaps between the container and components that border the container are automatically created.
javax.swing.GroupLayout.getAutoCreateGaps(),returns true if gaps between components are automatically created.
javax.swing.GroupLayout.getHonorsVisibility(),returns whether component visibility is considered when sizing and positioning components.
javax.swing.GroupLayout.getLayoutAlignmentX(java.awt.Container),returns the alignment along the x axis.
javax.swing.GroupLayout.getLayoutAlignmentY(java.awt.Container),returns the alignment along the y axis.
javax.swing.GroupLayout.getLayoutStyle(),returns the layoutstyle used for calculating the preferred gap between components.
javax.swing.GroupLayout.invalidateLayout(java.awt.Container),"invalidates the layout, indicating that if the layout manager has cached information it should be discarded."
javax.swing.GroupLayout.layoutContainer(java.awt.Container),lays out the specified container.
javax.swing.GroupLayout.linkSize(java.awt.Component...),"forces the specified components to have the same size regardless of their preferred, minimum or maximum sizes."
"javax.swing.GroupLayout.linkSize(int,java.awt.Component...)","forces the specified components to have the same size along the specified axis regardless of their preferred, minimum or maximum sizes."
javax.swing.GroupLayout.maximumLayoutSize(java.awt.Container),returns the maximum size for the specified container.
javax.swing.GroupLayout.minimumLayoutSize(java.awt.Container),returns the minimum size for the specified container.
javax.swing.GroupLayout.preferredLayoutSize(java.awt.Container),returns the preferred size for the specified container.
javax.swing.GroupLayout.removeLayoutComponent(java.awt.Component),notification that a component has been removed from the parent container.
"javax.swing.GroupLayout.replace(java.awt.Component,java.awt.Component)",replaces an existing component with a new one.
javax.swing.GroupLayout.setAutoCreateContainerGaps(boolean),sets whether a gap between the container and components that touch the border of the container should automatically be created.
javax.swing.GroupLayout.setAutoCreateGaps(boolean),sets whether a gap between components should automatically be created.
javax.swing.GroupLayout.setHonorsVisibility(boolean),sets whether component visibility is considered when sizing and positioning components.
"javax.swing.GroupLayout.setHonorsVisibility(java.awt.Component,java.lang.Boolean)",sets whether the component's visibility is considered for sizing and positioning.
javax.swing.GroupLayout.setHorizontalGroup(javax.swing.GroupLayout.Group),sets the group that positions and sizes components along the horizontal axis.
javax.swing.GroupLayout.setLayoutStyle(javax.swing.LayoutStyle),sets the layoutstyle used to calculate the preferred gaps between components.
javax.swing.GroupLayout.setVerticalGroup(javax.swing.GroupLayout.Group),sets the group that positions and sizes components along the vertical axis.
javax.swing.GroupLayout.toString(),returns a string representation of this grouplayout.
javax.swing.ImageIcon.getAccessibleContext(),gets the accessiblecontext associated with this imageicon.
javax.swing.ImageIcon.getDescription(),gets the description of the image.
javax.swing.ImageIcon.getIconHeight(),gets the height of the icon.
javax.swing.ImageIcon.getIconWidth(),gets the width of the icon.
javax.swing.ImageIcon.getImage(),returns this icon's image.
javax.swing.ImageIcon.getImageLoadStatus(),returns the status of the image loading operation.
javax.swing.ImageIcon.getImageObserver(),returns the image observer for the image.
javax.swing.ImageIcon.loadImage(java.awt.Image),"loads the image, returning only when the image is loaded."
"javax.swing.ImageIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)",paints the icon.
javax.swing.ImageIcon.setDescription(java.lang.String),sets the description of the image.
javax.swing.ImageIcon.setImage(java.awt.Image),sets the image displayed by this icon.
javax.swing.ImageIcon.setImageObserver(java.awt.image.ImageObserver),sets the image observer for the image.
javax.swing.ImageIcon.toString(),returns a string representation of this image.
javax.swing.InputMap.allKeys(),returns an array of the keystrokes defined in this inputmap and its parent.
javax.swing.InputMap.clear(),removes all the mappings from this inputmap.
javax.swing.InputMap.get(javax.swing.KeyStroke),"returns the binding for keystroke, messaging the parent inputmap if the binding is not locally defined."
javax.swing.InputMap.getParent(),gets this inputmap's parent.
javax.swing.InputMap.keys(),returns the keystrokes that are bound in this inputmap.
"javax.swing.InputMap.put(javax.swing.KeyStroke,java.lang.Object)",adds a binding for keystroke to actionmapkey.
javax.swing.InputMap.remove(javax.swing.KeyStroke),removes the binding for key from this inputmap.
javax.swing.InputMap.setParent(javax.swing.InputMap),sets this inputmap's parent.
javax.swing.InputMap.size(),returns the number of keystroke bindings.
javax.swing.InputVerifier.shouldYieldFocus(javax.swing.JComponent),calls verify(input) to ensure that the input is valid.
javax.swing.InputVerifier.verify(javax.swing.JComponent),checks whether the jcomponent's input is valid.
javax.swing.InternalFrameFocusTraversalPolicy.getInitialComponent(javax.swing.JInternalFrame),returns the component that should receive the focus when a jinternalframe is selected for the first time.
"javax.swing.JApplet.addImpl(java.awt.Component,java.lang.Object,int)",adds the specified child component.
javax.swing.JApplet.createRootPane(),called by the constructor methods to create the default rootpane.
javax.swing.JApplet.getAccessibleContext(),gets the accessiblecontext associated with this japplet.
javax.swing.JApplet.getContentPane(),returns the contentpane object for this applet.
javax.swing.JApplet.getGlassPane(),returns the glasspane object for this applet.
javax.swing.JApplet.getGraphics(),creates a graphics context for this component.
javax.swing.JApplet.getJMenuBar(),returns the menubar set on this applet.
javax.swing.JApplet.getLayeredPane(),returns the layeredpane object for this applet.
javax.swing.JApplet.getRootPane(),returns the rootpane object for this applet.
javax.swing.JApplet.getTransferHandler(),gets the transferhandler property.
javax.swing.JApplet.isRootPaneCheckingEnabled(),returns whether calls to add and setlayout are forwarded to the contentpane.
javax.swing.JApplet.paramString(),returns a string representation of this japplet.
javax.swing.JApplet.remove(java.awt.Component),removes the specified component from the container.
"javax.swing.JApplet.repaint(long,int,int,int,int)",repaints the specified rectangle of this component within time milliseconds.
javax.swing.JApplet.setContentPane(java.awt.Container),sets the contentpane property.
javax.swing.JApplet.setGlassPane(java.awt.Component),sets the glasspane property.
javax.swing.JApplet.setJMenuBar(javax.swing.JMenuBar),sets the menubar for this applet.
javax.swing.JApplet.setLayeredPane(javax.swing.JLayeredPane),sets the layeredpane property.
javax.swing.JApplet.setLayout(java.awt.LayoutManager),sets the layoutmanager.
javax.swing.JApplet.setRootPane(javax.swing.JRootPane),sets the rootpane property.
javax.swing.JApplet.setRootPaneCheckingEnabled(boolean),sets whether calls to add and setlayout are forwarded to the contentpane.
javax.swing.JApplet.setTransferHandler(javax.swing.TransferHandler),"sets the transferhandler property, which is a mechanism to support transfer of data into this component."
javax.swing.JApplet.update(java.awt.Graphics),just calls paint(g).
javax.swing.JButton.getAccessibleContext(),gets the accessiblecontext associated with this jbutton.
javax.swing.JButton.getUIClassID(),returns a string that specifies the name of the l&f class that renders this component.
javax.swing.JButton.isDefaultButton(),"gets the value of the defaultbutton property, which if true means that this button is the current default button for its jrootpane."
javax.swing.JButton.isDefaultCapable(),gets the value of the defaultcapable property.
javax.swing.JButton.paramString(),returns a string representation of this jbutton.
javax.swing.JButton.setDefaultCapable(boolean),"sets the defaultcapable property, which determines whether this button can be made the default button for its root pane."
javax.swing.JButton.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.JCheckBox.getAccessibleContext(),gets the accessiblecontext associated with this jcheckbox.
javax.swing.JCheckBox.getUIClassID(),returns a string that specifies the name of the l&f class that renders this component.
javax.swing.JCheckBox.isBorderPaintedFlat(),gets the value of the borderpaintedflat property.
javax.swing.JCheckBox.paramString(),returns a string representation of this jcheckbox.
javax.swing.JCheckBox.setBorderPaintedFlat(boolean),"sets the borderpaintedflat property, which gives a hint to the look and feel as to the appearance of the check box border."
javax.swing.JCheckBox.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.JCheckBoxMenuItem.getAccessibleContext(),gets the accessiblecontext associated with this jcheckboxmenuitem.
javax.swing.JCheckBoxMenuItem.getSelectedObjects(),returns an array (length 1) containing the check box menu item label or null if the check box is not selected.
javax.swing.JCheckBoxMenuItem.getState(),returns the selected-state of the item.
javax.swing.JCheckBoxMenuItem.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JCheckBoxMenuItem.paramString(),returns a string representation of this jcheckboxmenuitem.
javax.swing.JCheckBoxMenuItem.setState(boolean),sets the selected-state of the item.
javax.swing.JColorChooser.addChooserPanel(javax.swing.colorchooser.AbstractColorChooserPanel),adds a color chooser panel to the color chooser.
"javax.swing.JColorChooser.createDialog(java.awt.Component,java.lang.String,boolean,javax.swing.JColorChooser,java.awt.event.ActionListener,java.awt.event.ActionListener)","creates and returns a new dialog containing the specified colorchooser pane along with ""ok"", ""cancel"", and ""reset"" buttons."
javax.swing.JColorChooser.getAccessibleContext(),gets the accessiblecontext associated with this jcolorchooser.
javax.swing.JColorChooser.getChooserPanels(),returns the specified color panels.
javax.swing.JColorChooser.getColor(),gets the current color value from the color chooser.
javax.swing.JColorChooser.getDragEnabled(),gets the value of the dragenabled property.
javax.swing.JColorChooser.getPreviewPanel(),returns the preview panel that shows a chosen color.
javax.swing.JColorChooser.getSelectionModel(),returns the data model that handles color selections.
javax.swing.JColorChooser.getUI(),returns the l&f object that renders this component.
javax.swing.JColorChooser.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JColorChooser.paramString(),returns a string representation of this jcolorchooser.
javax.swing.JColorChooser.removeChooserPanel(javax.swing.colorchooser.AbstractColorChooserPanel),removes the color panel specified.
javax.swing.JColorChooser.setChooserPanels(javax.swing.colorchooser.AbstractColorChooserPanel[]),specifies the color panels used to choose a color value.
javax.swing.JColorChooser.setColor(java.awt.Color),sets the current color of the color chooser to the specified color.
"javax.swing.JColorChooser.setColor(int,int,int)",sets the current color of the color chooser to the specified rgb color.
javax.swing.JColorChooser.setColor(int),sets the current color of the color chooser to the specified color.
javax.swing.JColorChooser.setDragEnabled(boolean),"sets the dragenabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component."
javax.swing.JColorChooser.setPreviewPanel(javax.swing.JComponent),sets the current preview panel.
javax.swing.JColorChooser.setSelectionModel(javax.swing.colorchooser.ColorSelectionModel),sets the model containing the selected color.
javax.swing.JColorChooser.setUI(javax.swing.plaf.ColorChooserUI),sets the l&f object that renders this component.
"javax.swing.JColorChooser.showDialog(java.awt.Component,java.lang.String,java.awt.Color)",shows a modal color-chooser dialog and blocks until the dialog is hidden.
javax.swing.JColorChooser.updateUI(),notification from the uimanager that the l&f has changed.
javax.swing.JComboBox.actionPerformed(java.awt.event.ActionEvent),this method is public as an implementation side effect.
"javax.swing.JComboBox.actionPropertyChanged(javax.swing.Action,java.lang.String)",updates the combobox's state in response to property changes in associated action.
javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener),adds an actionlistener.
javax.swing.JComboBox.addItem(javax.swing.JComboBox),adds an item to the item list.
javax.swing.JComboBox.addItemListener(java.awt.event.ItemListener),adds an itemlistener.
javax.swing.JComboBox.addPopupMenuListener(javax.swing.event.PopupMenuListener),adds a popupmenu listener which will listen to notification messages from the popup portion of the combo box.
"javax.swing.JComboBox.configureEditor(javax.swing.ComboBoxEditor,java.lang.Object)",initializes the editor with the specified item.
javax.swing.JComboBox.configurePropertiesFromAction(javax.swing.Action),sets the properties on this combobox to match those in the specified action.
javax.swing.JComboBox.contentsChanged(javax.swing.event.ListDataEvent),this method is public as an implementation side effect.
javax.swing.JComboBox.createActionPropertyChangeListener(javax.swing.Action),creates and returns a propertychangelistener that is responsible for listening for changes from the specified action and updating the appropriate properties.
javax.swing.JComboBox.createDefaultKeySelectionManager(),returns an instance of the default key-selection manager.
javax.swing.JComboBox.fireActionEvent(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JComboBox.fireItemStateChanged(java.awt.event.ItemEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JComboBox.firePopupMenuCanceled(),notifies popupmenulisteners that the popup portion of the combo box has been canceled.
javax.swing.JComboBox.firePopupMenuWillBecomeInvisible(),notifies popupmenulisteners that the popup portion of the combo box has become invisible.
javax.swing.JComboBox.firePopupMenuWillBecomeVisible(),notifies popupmenulisteners that the popup portion of the combo box will become visible.
javax.swing.JComboBox.getAccessibleContext(),gets the accessiblecontext associated with this jcombobox.
javax.swing.JComboBox.getAction(),"returns the currently set action for this actionevent source, or null if no action is set."
javax.swing.JComboBox.getActionCommand(),returns the action command that is included in the event sent to action listeners.
javax.swing.JComboBox.getActionListeners(),returns an array of all the actionlisteners added to this jcombobox with addactionlistener().
javax.swing.JComboBox.getEditor(),returns the editor used to paint and edit the selected item in the jcombobox field.
javax.swing.JComboBox.getItemAt(int),returns the list item at the specified index.
javax.swing.JComboBox.getItemCount(),returns the number of items in the list.
javax.swing.JComboBox.getItemListeners(),returns an array of all the itemlisteners added to this jcombobox with additemlistener().
javax.swing.JComboBox.getKeySelectionManager(),returns the list's key-selection manager.
javax.swing.JComboBox.getMaximumRowCount(),returns the maximum number of items the combo box can display without a scrollbar.
javax.swing.JComboBox.getModel(),returns the data model currently used by the jcombobox.
javax.swing.JComboBox.getPopupMenuListeners(),returns an array of all the popupmenulisteners added to this jcombobox with addpopupmenulistener().
javax.swing.JComboBox.getPrototypeDisplayValue(),"returns the ""prototypical display"" value - an object used for the calculation of the display height and width."
javax.swing.JComboBox.getRenderer(),returns the renderer used to display the selected item in the jcombobox field.
javax.swing.JComboBox.getSelectedIndex(),returns the first item in the list that matches the given item.
javax.swing.JComboBox.getSelectedItem(),returns the current selected item.
javax.swing.JComboBox.getSelectedObjects(),returns an array containing the selected item.
javax.swing.JComboBox.getUI(),returns the l&f object that renders this component.
javax.swing.JComboBox.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JComboBox.hidePopup(),causes the combo box to close its popup window.
"javax.swing.JComboBox.insertItemAt(javax.swing.JComboBox,int)",inserts an item into the item list at a given index.
javax.swing.JComboBox.intervalAdded(javax.swing.event.ListDataEvent),this method is public as an implementation side effect.
javax.swing.JComboBox.intervalRemoved(javax.swing.event.ListDataEvent),this method is public as an implementation side effect.
javax.swing.JComboBox.isEditable(),returns true if the jcombobox is editable.
javax.swing.JComboBox.isLightWeightPopupEnabled(),gets the value of the lightweightpopupenabled property.
javax.swing.JComboBox.isPopupVisible(),determines the visibility of the popup.
javax.swing.JComboBox.paramString(),returns a string representation of this jcombobox.
"javax.swing.JComboBox.processKeyBinding(javax.swing.KeyStroke,java.awt.event.KeyEvent,int,boolean)",invoked to process the key bindings for ks as the result of the keyevent e.
javax.swing.JComboBox.processKeyEvent(java.awt.event.KeyEvent),"handles keyevents, looking for the tab key."
javax.swing.JComboBox.removeActionListener(java.awt.event.ActionListener),removes an actionlistener.
javax.swing.JComboBox.removeAllItems(),removes all items from the item list.
javax.swing.JComboBox.removeItem(java.lang.Object),removes an item from the item list.
javax.swing.JComboBox.removeItemAt(int),removes the item at anindex this method works only if the jcombobox uses a mutable data model.
javax.swing.JComboBox.removeItemListener(java.awt.event.ItemListener),removes an itemlistener.
javax.swing.JComboBox.removePopupMenuListener(javax.swing.event.PopupMenuListener),removes a popupmenulistener.
javax.swing.JComboBox.selectedItemChanged(),this protected method is implementation specific.
javax.swing.JComboBox.selectWithKeyChar(char),"selects the list item that corresponds to the specified keyboard character and returns true, if there is an item corresponding to that character."
javax.swing.JComboBox.setAction(javax.swing.Action),sets the action for the actionevent source.
javax.swing.JComboBox.setActionCommand(java.lang.String),sets the action command that should be included in the event sent to action listeners.
javax.swing.JComboBox.setEditable(boolean),determines whether the jcombobox field is editable.
javax.swing.JComboBox.setEditor(javax.swing.ComboBoxEditor),sets the editor used to paint and edit the selected item in the jcombobox field.
javax.swing.JComboBox.setEnabled(boolean),enables the combo box so that items can be selected.
javax.swing.JComboBox.setKeySelectionManager(javax.swing.JComboBox.KeySelectionManager),sets the object that translates a keyboard character into a list selection.
javax.swing.JComboBox.setLightWeightPopupEnabled(boolean),"sets the lightweightpopupenabled property, which provides a hint as to whether or not a lightweight component should be used to contain the jcombobox, versus a heavyweight component such as a panel or a window."
javax.swing.JComboBox.setMaximumRowCount(int),sets the maximum number of rows the jcombobox displays.
javax.swing.JComboBox.setModel(javax.swing.ComboBoxModel<javax.swing.JComboBox>),sets the data model that the jcombobox uses to obtain the list of items.
javax.swing.JComboBox.setPopupVisible(boolean),sets the visibility of the popup.
javax.swing.JComboBox.setPrototypeDisplayValue(javax.swing.JComboBox),sets the prototype display value used to calculate the size of the display for the ui portion.
javax.swing.JComboBox.setRenderer(javax.swing.ListCellRenderer<? super javax.swing.JComboBox>),sets the renderer that paints the list items and the item selected from the list in the jcombobox field.
javax.swing.JComboBox.setSelectedIndex(int),selects the item at index anindex.
javax.swing.JComboBox.setSelectedItem(java.lang.Object),sets the selected item in the combo box display area to the object in the argument.
javax.swing.JComboBox.setUI(javax.swing.plaf.ComboBoxUI),sets the l&f object that renders this component.
javax.swing.JComboBox.showPopup(),causes the combo box to display its popup window.
javax.swing.JComboBox.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener),registers listener so that it will receive ancestorevents when it or any of its ancestors move or are made visible or invisible.
javax.swing.JComponent.addNotify(),notifies this component that it now has a parent component.
javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener),adds a vetoablechangelistener to the listener list.
javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle),"returns the component's ""visible rect rectangle"" - the intersection of the visible rectangles for this component and all of its ancestors."
"javax.swing.JComponent.contains(int,int)",gives the ui delegate an opportunity to define the precise shape of this component for the sake of mouse processing.
javax.swing.JComponent.createToolTip(),returns the instance of jtooltip that should be used to display the tooltip.
"javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",support for reporting bound property changes for boolean properties.
"javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)",support for reporting bound property changes for integer properties.
"javax.swing.JComponent.fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)",supports reporting constrained property changes.
javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke),returns the object that will perform the action registered for a given keystroke.
javax.swing.JComponent.getActionMap(),returns the actionmap used to determine what action to fire for particular keystroke binding.
javax.swing.JComponent.getAncestorListeners(),returns an array of all the ancestor listeners registered on this component.
javax.swing.JComponent.getAutoscrolls(),gets the autoscrolls property.
"javax.swing.JComponent.getBaseline(int,int)",returns the baseline.
javax.swing.JComponent.getBaselineResizeBehavior(),returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.JComponent.getBorder(),returns the border of this component or null if no border is currently set.
javax.swing.JComponent.getBounds(java.awt.Rectangle),"stores the bounds of this component into ""return value"" rv and returns rv."
javax.swing.JComponent.getClientProperty(java.lang.Object),returns the value of the property with the specified key.
javax.swing.JComponent.getComponentGraphics(java.awt.Graphics),returns the graphics object used to paint this component.
javax.swing.JComponent.getComponentPopupMenu(),returns jpopupmenu that assigned for this component.
javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke),returns the condition that determines whether a registered action occurs in response to the specified keystroke.
javax.swing.JComponent.getDebugGraphicsOptions(),returns the state of graphics debugging.
javax.swing.JComponent.getDefaultLocale(),returns the default locale used to initialize each jcomponent's locale property upon creation.
javax.swing.JComponent.getFontMetrics(java.awt.Font),gets the fontmetrics for the specified font.
javax.swing.JComponent.getGraphics(),"returns this component's graphics context, which lets you draw on a component."
javax.swing.JComponent.getHeight(),returns the current height of this component.
javax.swing.JComponent.getInheritsPopupMenu(),returns true if the jpopupmenu should be inherited from the parent.
javax.swing.JComponent.getInputMap(int),returns the inputmap that is used during condition.
javax.swing.JComponent.getInputMap(),returns the inputmap that is used when the component has focus.
javax.swing.JComponent.getInputVerifier(),returns the input verifier for this component.
javax.swing.JComponent.getInsets(),"if a border has been set on this component, returns the border's insets; otherwise calls super."
javax.swing.JComponent.getInsets(java.awt.Insets),returns an insets object containing this component's inset values.
javax.swing.JComponent.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this jcomponent.
javax.swing.JComponent.getLocation(java.awt.Point),"stores the x,y origin of this component into ""return value"" rv and returns rv."
javax.swing.JComponent.getMaximumSize(),if the maximum size has been set to a non-null value just returns it.
javax.swing.JComponent.getMinimumSize(),if the minimum size has been set to a non-null value just returns it.
javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent),returns the preferred location to display the popup menu in this component's coordinate system.
javax.swing.JComponent.getPreferredSize(),if the preferredsize has been set to a non-null value just returns it.
javax.swing.JComponent.getRegisteredKeyStrokes(),returns the keystrokes that will initiate registered actions.
javax.swing.JComponent.getRootPane(),returns the jrootpane ancestor for this component.
javax.swing.JComponent.getSize(java.awt.Dimension),"stores the width/height of this component into ""return value"" rv and returns rv."
javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent),returns the tooltip location in this component's coordinate system.
javax.swing.JComponent.getToolTipText(),returns the tooltip string that has been set with settooltiptext.
javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent),returns the string to be used as the tooltip for event.
javax.swing.JComponent.getTopLevelAncestor(),"returns the top-level ancestor of this component (either the containing window or applet), or null if this component has not been added to any container."
javax.swing.JComponent.getTransferHandler(),gets the transferhandler property.
javax.swing.JComponent.getUIClassID(),returns the uidefaults key used to look up the name of the swing.
javax.swing.JComponent.getVerifyInputWhenFocusTarget(),returns the value that indicates whether the input verifier for the current focus owner will be called before this component requests focus.
javax.swing.JComponent.getVetoableChangeListeners(),returns an array of all the vetoable change listeners registered on this component.
javax.swing.JComponent.getVisibleRect(),"returns the component's ""visible rectangle"" - the intersection of this component's visible rectangle, new rectangle(0, 0, getwidth(), getheight()), and all of its ancestors' visible rectangles."
javax.swing.JComponent.getWidth(),returns the current width of this component.
javax.swing.JComponent.getX(),returns the current x coordinate of the component's origin.
javax.swing.JComponent.getY(),returns the current y coordinate of the component's origin.
javax.swing.JComponent.grabFocus(),"requests that this component get the input focus, and that this component's top-level ancestor become the focused window."
javax.swing.JComponent.isDoubleBuffered(),returns whether this component should use a buffer to paint.
javax.swing.JComponent.isLightweightComponent(java.awt.Component),"returns true if this component is lightweight, that is, if it doesn't have a native window system peer."
javax.swing.JComponent.isOpaque(),returns true if this component is completely opaque.
javax.swing.JComponent.isOptimizedDrawingEnabled(),"returns true if this component tiles its children -- that is, if it can guarantee that the children will not overlap."
javax.swing.JComponent.isPaintingForPrint(),returns true if the current painting operation on this component is part of a print operation.
javax.swing.JComponent.isPaintingOrigin(),"returns true if a paint triggered on a child component should cause painting to originate from this component, or one of its ancestors."
javax.swing.JComponent.isPaintingTile(),returns true if the component is currently painting a tile.
javax.swing.JComponent.isRequestFocusEnabled(),returns true if this jcomponent should get focus; otherwise returns false.
javax.swing.JComponent.isValidateRoot(),"if this method returns true, revalidate calls by descendants of this component will cause the entire tree beginning with this root to be validated."
javax.swing.JComponent.paint(java.awt.Graphics),invoked by swing to draw components.
javax.swing.JComponent.paintBorder(java.awt.Graphics),paints the component's border.
javax.swing.JComponent.paintChildren(java.awt.Graphics),paints this component's children.
javax.swing.JComponent.paintComponent(java.awt.Graphics),"calls the ui delegate's paint method, if the ui delegate is non-null."
"javax.swing.JComponent.paintImmediately(int,int,int,int)","paints the specified region in this component and all of its descendants that overlap the region, immediately."
javax.swing.JComponent.paintImmediately(java.awt.Rectangle),paints the specified region now.
javax.swing.JComponent.paramString(),returns a string representation of this jcomponent.
javax.swing.JComponent.print(java.awt.Graphics),invoke this method to print the component to the specified graphics.
javax.swing.JComponent.printAll(java.awt.Graphics),invoke this method to print the component.
javax.swing.JComponent.printBorder(java.awt.Graphics),prints the component's border.
javax.swing.JComponent.printChildren(java.awt.Graphics),prints this component's children.
javax.swing.JComponent.printComponent(java.awt.Graphics),this is invoked during a printing operation.
javax.swing.JComponent.processComponentKeyEvent(java.awt.event.KeyEvent),processes any key events that the component itself recognizes.
"javax.swing.JComponent.processKeyBinding(javax.swing.KeyStroke,java.awt.event.KeyEvent,int,boolean)",invoked to process the key bindings for ks as the result of the keyevent e.
javax.swing.JComponent.processMouseEvent(java.awt.event.MouseEvent),"processes mouse events occurring on this component by dispatching them to any registered mouselistener objects, refer to component."
javax.swing.JComponent.processMouseMotionEvent(java.awt.event.MouseEvent),"processes mouse motion events, such as mouseevent."
"javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)","adds an arbitrary key/value ""client property"" to this component."
"javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)","this method is now obsolete, please use a combination of getactionmap() and getinputmap() for similar behavior."
"javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)","this method is now obsolete, please use a combination of getactionmap() and getinputmap() for similar behavior."
javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener),unregisters listener so that it will no longer receive ancestorevents.
javax.swing.JComponent.removeNotify(),notifies this component that it no longer has a parent component.
javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener),removes a vetoablechangelistener from the listener list.
"javax.swing.JComponent.repaint(long,int,int,int,int)",adds the specified region to the dirty region list if the component is showing.
javax.swing.JComponent.repaint(java.awt.Rectangle),adds the specified region to the dirty region list if the component is showing.
javax.swing.JComponent.requestFocus(),requests that this component gets the input focus.
javax.swing.JComponent.requestFocus(boolean),requests that this component gets the input focus.
javax.swing.JComponent.requestFocusInWindow(),requests that this component gets the input focus.
javax.swing.JComponent.requestFocusInWindow(boolean),requests that this component gets the input focus.
javax.swing.JComponent.resetKeyboardActions(),unregisters all the bindings in the first tier inputmaps and actionmap.
javax.swing.JComponent.revalidate(),supports deferred automatic layout.
javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle),forwards the scrollrecttovisible() message to the jcomponent's parent.
javax.swing.JComponent.setActionMap(javax.swing.ActionMap),sets the actionmap to am.
javax.swing.JComponent.setAlignmentX(float),sets the the vertical alignment.
javax.swing.JComponent.setAlignmentY(float),sets the the horizontal alignment.
javax.swing.JComponent.setAutoscrolls(boolean),sets the autoscrolls property.
javax.swing.JComponent.setBackground(java.awt.Color),sets the background color of this component.
javax.swing.JComponent.setBorder(javax.swing.border.Border),sets the border of this component.
javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu),sets the jpopupmenu for this jcomponent.
javax.swing.JComponent.setDebugGraphicsOptions(int),enables or disables diagnostic information about every graphics operation performed within the component or one of its children.
javax.swing.JComponent.setDefaultLocale(java.util.Locale),sets the default locale used to initialize each jcomponent's locale property upon creation.
javax.swing.JComponent.setDoubleBuffered(boolean),sets whether this component should use a buffer to paint.
javax.swing.JComponent.setEnabled(boolean),sets whether or not this component is enabled.
"javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)",sets the focus traversal keys for a given traversal operation for this component.
javax.swing.JComponent.setFont(java.awt.Font),sets the font for this component.
javax.swing.JComponent.setForeground(java.awt.Color),sets the foreground color of this component.
javax.swing.JComponent.setInheritsPopupMenu(boolean),sets whether or not getcomponentpopupmenu should delegate to the parent if this component does not have a jpopupmenu assigned to it.
"javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)",sets the inputmap to use under the condition condition to map.
javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier),sets the input verifier for this component.
javax.swing.JComponent.setMaximumSize(java.awt.Dimension),sets the maximum size of this component to a constant value.
javax.swing.JComponent.setMinimumSize(java.awt.Dimension),sets the minimum size of this component to a constant value.
javax.swing.JComponent.setOpaque(boolean),if true the component paints every pixel within its bounds.
javax.swing.JComponent.setPreferredSize(java.awt.Dimension),sets the preferred size of this component.
javax.swing.JComponent.setRequestFocusEnabled(boolean),provides a hint as to whether or not this jcomponent should get focus.
javax.swing.JComponent.setToolTipText(java.lang.String),registers the text to display in a tool tip.
javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler),"sets the transferhandler, which provides support for transfer of data into and out of this component via cut/copy/paste and drag and drop."
javax.swing.JComponent.setUI(javax.swing.plaf.ComponentUI),sets the look and feel delegate for this component.
javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean),sets the value to indicate whether input verifier for the current focus owner will be called before this component requests focus.
javax.swing.JComponent.setVisible(boolean),makes the component visible or invisible.
javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke),this method is now obsolete.
javax.swing.JComponent.update(java.awt.Graphics),calls paint.
javax.swing.JComponent.updateUI(),resets the ui property to a value from the current look and feel.
"javax.swing.JDesktopPane.addImpl(java.awt.Component,java.lang.Object,int)",adds the specified component to this container at the specified index.
javax.swing.JDesktopPane.getAccessibleContext(),gets the accessiblecontext associated with this jdesktoppane.
javax.swing.JDesktopPane.getAllFrames(),returns all jinternalframes currently displayed in the desktop.
javax.swing.JDesktopPane.getAllFramesInLayer(int),returns all jinternalframes currently displayed in the specified layer of the desktop.
javax.swing.JDesktopPane.getDesktopManager(),returns the desktopmanger that handles desktop-specific ui actions.
javax.swing.JDesktopPane.getDragMode(),"gets the current ""dragging style"" used by the desktop pane."
javax.swing.JDesktopPane.getSelectedFrame(),"returns the currently active jinternalframe in this jdesktoppane, or null if no jinternalframe is currently active."
javax.swing.JDesktopPane.getUI(),returns the l&f object that renders this component.
javax.swing.JDesktopPane.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JDesktopPane.paramString(),returns a string representation of this jdesktoppane.
javax.swing.JDesktopPane.remove(java.awt.Component),removes the specified component from this container.
javax.swing.JDesktopPane.remove(int),remove the indexed component from this pane.
javax.swing.JDesktopPane.removeAll(),removes all the components from this container.
javax.swing.JDesktopPane.selectFrame(boolean),selects the next jinternalframe in this desktop pane.
"javax.swing.JDesktopPane.setComponentZOrder(java.awt.Component,int)",moves the specified component to the specified z-order index in the container.
javax.swing.JDesktopPane.setDesktopManager(javax.swing.DesktopManager),sets the desktopmanger that will handle desktop-specific ui actions.
javax.swing.JDesktopPane.setDragMode(int),"sets the ""dragging style"" used by the desktop pane."
javax.swing.JDesktopPane.setSelectedFrame(javax.swing.JInternalFrame),sets the currently active jinternalframe in this jdesktoppane.
javax.swing.JDesktopPane.setUI(javax.swing.plaf.DesktopPaneUI),sets the l&f object that renders this component.
javax.swing.JDesktopPane.updateUI(),notification from the uimanager that the l&f has changed.
"javax.swing.JDialog.addImpl(java.awt.Component,java.lang.Object,int)",adds the specified child component.
javax.swing.JDialog.createRootPane(),called by the constructor methods to create the default rootpane.
javax.swing.JDialog.dialogInit(),called by the constructors to init the jdialog properly.
javax.swing.JDialog.getAccessibleContext(),gets the accessiblecontext associated with this jdialog.
javax.swing.JDialog.getContentPane(),returns the contentpane object for this dialog.
javax.swing.JDialog.getDefaultCloseOperation(),"returns the operation which occurs when the user initiates a ""close"" on this dialog."
javax.swing.JDialog.getGlassPane(),returns the glasspane object for this dialog.
javax.swing.JDialog.getGraphics(),creates a graphics context for this component.
javax.swing.JDialog.getJMenuBar(),returns the menubar set on this dialog.
javax.swing.JDialog.getLayeredPane(),returns the layeredpane object for this dialog.
javax.swing.JDialog.getRootPane(),returns the rootpane object for this dialog.
javax.swing.JDialog.getTransferHandler(),gets the transferhandler property.
javax.swing.JDialog.isDefaultLookAndFeelDecorated(),returns true if newly created jdialogs should have their window decorations provided by the current look and feel.
javax.swing.JDialog.isRootPaneCheckingEnabled(),returns whether calls to add and setlayout are forwarded to the contentpane.
javax.swing.JDialog.paramString(),returns a string representation of this jdialog.
javax.swing.JDialog.processWindowEvent(java.awt.event.WindowEvent),handles window events depending on the state of the defaultcloseoperation property.
javax.swing.JDialog.remove(java.awt.Component),removes the specified component from the container.
"javax.swing.JDialog.repaint(long,int,int,int,int)",repaints the specified rectangle of this component within time milliseconds.
javax.swing.JDialog.setContentPane(java.awt.Container),sets the contentpane property.
javax.swing.JDialog.setDefaultCloseOperation(int),"sets the operation that will happen by default when the user initiates a ""close"" on this dialog."
javax.swing.JDialog.setDefaultLookAndFeelDecorated(boolean),"provides a hint as to whether or not newly created jdialogs should have their window decorations (such as borders, widgets to close the window, title."
javax.swing.JDialog.setGlassPane(java.awt.Component),sets the glasspane property.
javax.swing.JDialog.setJMenuBar(javax.swing.JMenuBar),sets the menubar for this dialog.
javax.swing.JDialog.setLayeredPane(javax.swing.JLayeredPane),sets the layeredpane property.
javax.swing.JDialog.setLayout(java.awt.LayoutManager),sets the layoutmanager.
javax.swing.JDialog.setRootPane(javax.swing.JRootPane),sets the rootpane property.
javax.swing.JDialog.setRootPaneCheckingEnabled(boolean),sets whether calls to add and setlayout are forwarded to the contentpane.
javax.swing.JDialog.setTransferHandler(javax.swing.TransferHandler),"sets the transferhandler property, which is a mechanism to support transfer of data into this component."
javax.swing.JDialog.update(java.awt.Graphics),calls paint(g).
javax.swing.JEditorPane.addHyperlinkListener(javax.swing.event.HyperlinkListener),"adds a hyperlink listener for notification of any changes, for example when a link is selected and entered."
javax.swing.JEditorPane.createDefaultEditorKit(),creates the default editor kit (plaineditorkit) for when the component is first created.
javax.swing.JEditorPane.createEditorKitForContentType(java.lang.String),creates a handler for the given type from the default registry of editor kits.
javax.swing.JEditorPane.fireHyperlinkUpdate(javax.swing.event.HyperlinkEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JEditorPane.getAccessibleContext(),gets the accessiblecontext associated with this jeditorpane.
javax.swing.JEditorPane.getContentType(),gets the type of content that this editor is currently set to deal with.
javax.swing.JEditorPane.getEditorKit(),fetches the currently installed kit for handling content.
javax.swing.JEditorPane.getEditorKitClassNameForContentType(java.lang.String),returns the currently registered editorkit class name for the type type.
javax.swing.JEditorPane.getEditorKitForContentType(java.lang.String),fetches the editor kit to use for the given type of content.
javax.swing.JEditorPane.getHyperlinkListeners(),returns an array of all the hyperlinklisteners added to this jeditorpane with addhyperlinklistener().
javax.swing.JEditorPane.getPage(),gets the current url being displayed.
javax.swing.JEditorPane.getPreferredSize(),returns the preferred size for the jeditorpane.
javax.swing.JEditorPane.getScrollableTracksViewportHeight(),returns true if a viewport should always force the height of this scrollable to match the height of the viewport.
javax.swing.JEditorPane.getScrollableTracksViewportWidth(),returns true if a viewport should always force the width of this scrollable to match the width of the viewport.
javax.swing.JEditorPane.getStream(java.net.URL),"fetches a stream for the given url, which is about to be loaded by the setpage method."
javax.swing.JEditorPane.getText(),returns the text contained in this textcomponent in terms of the content type of this editor.
javax.swing.JEditorPane.getUIClassID(),gets the class id for the ui.
javax.swing.JEditorPane.paramString(),returns a string representation of this jeditorpane.
"javax.swing.JEditorPane.read(java.io.InputStream,java.lang.Object)",this method initializes from a stream.
"javax.swing.JEditorPane.registerEditorKitForContentType(java.lang.String,java.lang.String)",establishes the default bindings of type to classname.
"javax.swing.JEditorPane.registerEditorKitForContentType(java.lang.String,java.lang.String,java.lang.ClassLoader)",establishes the default bindings of type to classname.
javax.swing.JEditorPane.removeHyperlinkListener(javax.swing.event.HyperlinkListener),removes a hyperlink listener.
javax.swing.JEditorPane.replaceSelection(java.lang.String),replaces the currently selected content with new content represented by the given string.
javax.swing.JEditorPane.scrollToReference(java.lang.String),"scrolls the view to the given reference location (that is, the value returned by the ul."
javax.swing.JEditorPane.setContentType(java.lang.String),sets the type of content that this editor handles.
javax.swing.JEditorPane.setEditorKit(javax.swing.text.EditorKit),sets the currently installed kit for handling content.
"javax.swing.JEditorPane.setEditorKitForContentType(java.lang.String,javax.swing.text.EditorKit)",directly sets the editor kit to use for the given type.
javax.swing.JEditorPane.setPage(java.net.URL),sets the current url being displayed.
javax.swing.JEditorPane.setPage(java.lang.String),sets the current url being displayed.
javax.swing.JEditorPane.setText(java.lang.String),"sets the text of this textcomponent to the specified content, which is expected to be in the format of the content type of this editor."
javax.swing.JFileChooser.accept(java.io.File),returns true if the file should be displayed.
javax.swing.JFileChooser.addActionListener(java.awt.event.ActionListener),adds an actionlistener to the file chooser.
javax.swing.JFileChooser.addChoosableFileFilter(javax.swing.filechooser.FileFilter),adds a filter to the list of user choosable file filters.
javax.swing.JFileChooser.approveSelection(),"called by the ui when the user hits the approve button (labeled ""open"" or ""save"", by default)."
javax.swing.JFileChooser.cancelSelection(),called by the ui when the user chooses the cancel button.
javax.swing.JFileChooser.changeToParentDirectory(),changes the directory to be set to the parent of the current directory.
javax.swing.JFileChooser.createDialog(java.awt.Component),creates and returns a new jdialog wrapping this centered on the parent in the parent's frame.
javax.swing.JFileChooser.ensureFileIsVisible(java.io.File),"makes sure that the specified file is viewable, and not hidden."
javax.swing.JFileChooser.fireActionPerformed(java.lang.String),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JFileChooser.getAcceptAllFileFilter(),returns the acceptall file filter.
javax.swing.JFileChooser.getAccessibleContext(),gets the accessiblecontext associated with this jfilechooser.
javax.swing.JFileChooser.getAccessory(),returns the accessory component.
javax.swing.JFileChooser.getActionListeners(),returns an array of all the action listeners registered on this file chooser.
javax.swing.JFileChooser.getApproveButtonMnemonic(),returns the approve button's mnemonic.
javax.swing.JFileChooser.getApproveButtonText(),returns the text used in the approvebutton in the filechooserui.
javax.swing.JFileChooser.getApproveButtonToolTipText(),returns the tooltip text used in the approvebutton.
javax.swing.JFileChooser.getChoosableFileFilters(),gets the list of user choosable file filters.
javax.swing.JFileChooser.getControlButtonsAreShown(),returns the value of the controlbuttonsareshown property.
javax.swing.JFileChooser.getCurrentDirectory(),returns the current directory.
javax.swing.JFileChooser.getDescription(java.io.File),returns the file description.
javax.swing.JFileChooser.getDialogTitle(),gets the string that goes in the jfilechooser's titlebar.
javax.swing.JFileChooser.getDialogType(),returns the type of this dialog.
javax.swing.JFileChooser.getDragEnabled(),gets the value of the dragenabled property.
javax.swing.JFileChooser.getFileFilter(),returns the currently selected file filter.
javax.swing.JFileChooser.getFileSelectionMode(),returns the current file-selection mode.
javax.swing.JFileChooser.getFileSystemView(),returns the file system view.
javax.swing.JFileChooser.getFileView(),returns the current file view.
javax.swing.JFileChooser.getIcon(java.io.File),"returns the icon for this file or type of file, depending on the system."
javax.swing.JFileChooser.getName(java.io.File),returns the filename.
javax.swing.JFileChooser.getSelectedFile(),returns the selected file.
javax.swing.JFileChooser.getSelectedFiles(),returns a list of selected files if the file chooser is set to allow multiple selection.
javax.swing.JFileChooser.getTypeDescription(java.io.File),returns the file type.
javax.swing.JFileChooser.getUI(),gets the ui object which implements the l&f for this component.
javax.swing.JFileChooser.getUIClassID(),returns a string that specifies the name of the l&f class that renders this component.
javax.swing.JFileChooser.isAcceptAllFileFilterUsed(),returns whether the acceptall filefilter is used.
javax.swing.JFileChooser.isDirectorySelectionEnabled(),convenience call that determines if directories are selectable based on the current file selection mode.
javax.swing.JFileChooser.isFileHidingEnabled(),"returns true if hidden files are not shown in the file chooser; otherwise, returns false."
javax.swing.JFileChooser.isFileSelectionEnabled(),convenience call that determines if files are selectable based on the current file selection mode.
javax.swing.JFileChooser.isMultiSelectionEnabled(),returns true if multiple files can be selected.
javax.swing.JFileChooser.isTraversable(java.io.File),returns true if the file (directory) can be visited.
javax.swing.JFileChooser.paramString(),returns a string representation of this jfilechooser.
javax.swing.JFileChooser.removeActionListener(java.awt.event.ActionListener),removes an actionlistener from the file chooser.
javax.swing.JFileChooser.removeChoosableFileFilter(javax.swing.filechooser.FileFilter),removes a filter from the list of user choosable file filters.
javax.swing.JFileChooser.rescanCurrentDirectory(),tells the ui to rescan its files list from the current directory.
javax.swing.JFileChooser.resetChoosableFileFilters(),resets the choosable file filter list to its starting state.
javax.swing.JFileChooser.setAcceptAllFileFilterUsed(boolean),determines whether the acceptall filefilter is used as an available choice in the choosable filter list.
javax.swing.JFileChooser.setAccessory(javax.swing.JComponent),sets the accessory component.
javax.swing.JFileChooser.setApproveButtonMnemonic(int),sets the approve button's mnemonic using a numeric keycode.
javax.swing.JFileChooser.setApproveButtonMnemonic(char),sets the approve button's mnemonic using a character.
javax.swing.JFileChooser.setApproveButtonText(java.lang.String),sets the text used in the approvebutton in the filechooserui.
javax.swing.JFileChooser.setApproveButtonToolTipText(java.lang.String),sets the tooltip text used in the approvebutton.
javax.swing.JFileChooser.setControlButtonsAreShown(boolean),sets the property that indicates whether the approve and cancel buttons are shown in the file chooser.
javax.swing.JFileChooser.setCurrentDirectory(java.io.File),sets the current directory.
javax.swing.JFileChooser.setDialogTitle(java.lang.String),sets the string that goes in the jfilechooser window's title bar.
javax.swing.JFileChooser.setDialogType(int),sets the type of this dialog.
javax.swing.JFileChooser.setDragEnabled(boolean),"sets the dragenabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component."
javax.swing.JFileChooser.setFileFilter(javax.swing.filechooser.FileFilter),sets the current file filter.
javax.swing.JFileChooser.setFileHidingEnabled(boolean),sets file hiding on or off.
javax.swing.JFileChooser.setFileSelectionMode(int),"sets the jfilechooser to allow the user to just select files, just select directories, or select both files and directories."
javax.swing.JFileChooser.setFileSystemView(javax.swing.filechooser.FileSystemView),"sets the file system view that the jfilechooser uses for accessing and creating file system resources, such as finding the floppy drive and getting a list of root drives."
javax.swing.JFileChooser.setFileView(javax.swing.filechooser.FileView),"sets the file view to used to retrieve ui information, such as the icon that represents a file or the type description of a file."
javax.swing.JFileChooser.setMultiSelectionEnabled(boolean),sets the file chooser to allow multiple file selections.
javax.swing.JFileChooser.setSelectedFile(java.io.File),sets the selected file.
javax.swing.JFileChooser.setSelectedFiles(java.io.File[]),sets the list of selected files if the file chooser is set to allow multiple selection.
javax.swing.JFileChooser.setup(javax.swing.filechooser.FileSystemView),performs common constructor initialization and setup.
"javax.swing.JFileChooser.showDialog(java.awt.Component,java.lang.String)",pops a custom file chooser dialog with a custom approve button.
javax.swing.JFileChooser.showOpenDialog(java.awt.Component),"pops up an ""open file"" file chooser dialog."
javax.swing.JFileChooser.showSaveDialog(java.awt.Component),"pops up a ""save file"" file chooser dialog."
javax.swing.JFileChooser.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.JFormattedTextField.commitEdit(),forces the current value to be taken from the abstractformatter and set as the current value.
javax.swing.JFormattedTextField.getActions(),fetches the command list for the editor.
javax.swing.JFormattedTextField.getFocusLostBehavior(),returns the behavior when focus is lost.
javax.swing.JFormattedTextField.getFormatter(),returns the abstractformatter that is used to format and parse the current value.
javax.swing.JFormattedTextField.getFormatterFactory(),returns the current abstractformatterfactory.
javax.swing.JFormattedTextField.getUIClassID(),gets the class id for a ui.
javax.swing.JFormattedTextField.getValue(),returns the last valid value.
javax.swing.JFormattedTextField.invalidEdit(),invoked when the user inputs an invalid value.
javax.swing.JFormattedTextField.isEditValid(),returns true if the current value being edited is valid.
javax.swing.JFormattedTextField.processFocusEvent(java.awt.event.FocusEvent),"processes any focus events, such as focusevent."
javax.swing.JFormattedTextField.processInputMethodEvent(java.awt.event.InputMethodEvent),"processes any input method events, such as inputmethodevent."
javax.swing.JFormattedTextField.setDocument(javax.swing.text.Document),associates the editor with a text document.
javax.swing.JFormattedTextField.setFocusLostBehavior(int),sets the behavior when focus is lost.
javax.swing.JFormattedTextField.setFormatter(javax.swing.JFormattedTextField.AbstractFormatter),sets the current abstractformatter.
javax.swing.JFormattedTextField.setFormatterFactory(javax.swing.JFormattedTextField.AbstractFormatterFactory),sets the abstractformatterfactory.
javax.swing.JFormattedTextField.setValue(java.lang.Object),sets the value that will be formatted by an abstractformatter obtained from the current abstractformatterfactory.
javax.swing.JFormattedTextField.AbstractFormatter.clone(),clones the abstractformatter.
javax.swing.JFormattedTextField.AbstractFormatter.getActions(),subclass and override if you wish to provide a custom set of actions.
javax.swing.JFormattedTextField.AbstractFormatter.getDocumentFilter(),subclass and override if you wish to provide a documentfilter to restrict what can be input.
javax.swing.JFormattedTextField.AbstractFormatter.getFormattedTextField(),returns the current jformattedtextfield the abstractformatter is installed on.
javax.swing.JFormattedTextField.AbstractFormatter.getNavigationFilter(),subclass and override if you wish to provide a filter to restrict where the user can navigate to.
javax.swing.JFormattedTextField.AbstractFormatter.install(javax.swing.JFormattedTextField),installs the abstractformatter onto a particular jformattedtextfield.
javax.swing.JFormattedTextField.AbstractFormatter.invalidEdit(),this should be invoked when the user types an invalid character.
javax.swing.JFormattedTextField.AbstractFormatter.setEditValid(boolean),invoke this to update the editvalid property of the jformattedtextfield.
javax.swing.JFormattedTextField.AbstractFormatter.stringToValue(java.lang.String),parses text returning an arbitrary object.
javax.swing.JFormattedTextField.AbstractFormatter.uninstall(),uninstalls any state the abstractformatter may have installed on the jformattedtextfield.
javax.swing.JFormattedTextField.AbstractFormatter.valueToString(java.lang.Object),returns the string value to display for value.
javax.swing.JFormattedTextField.AbstractFormatterFactory.getFormatter(javax.swing.JFormattedTextField),returns an abstractformatter that can handle formatting of the passed in jformattedtextfield.
"javax.swing.JFrame.addImpl(java.awt.Component,java.lang.Object,int)",adds the specified child component.
javax.swing.JFrame.createRootPane(),called by the constructor methods to create the default rootpane.
javax.swing.JFrame.frameInit(),called by the constructors to init the jframe properly.
javax.swing.JFrame.getAccessibleContext(),gets the accessiblecontext associated with this jframe.
javax.swing.JFrame.getContentPane(),returns the contentpane object for this frame.
javax.swing.JFrame.getDefaultCloseOperation(),"returns the operation that occurs when the user initiates a ""close"" on this frame."
javax.swing.JFrame.getGlassPane(),returns the glasspane object for this frame.
javax.swing.JFrame.getGraphics(),creates a graphics context for this component.
javax.swing.JFrame.getJMenuBar(),returns the menubar set on this frame.
javax.swing.JFrame.getLayeredPane(),returns the layeredpane object for this frame.
javax.swing.JFrame.getRootPane(),returns the rootpane object for this frame.
javax.swing.JFrame.getTransferHandler(),gets the transferhandler property.
javax.swing.JFrame.isDefaultLookAndFeelDecorated(),returns true if newly created jframes should have their window decorations provided by the current look and feel.
javax.swing.JFrame.isRootPaneCheckingEnabled(),returns whether calls to add and setlayout are forwarded to the contentpane.
javax.swing.JFrame.paramString(),returns a string representation of this jframe.
javax.swing.JFrame.processWindowEvent(java.awt.event.WindowEvent),processes window events occurring on this component.
javax.swing.JFrame.remove(java.awt.Component),removes the specified component from the container.
"javax.swing.JFrame.repaint(long,int,int,int,int)",repaints the specified rectangle of this component within time milliseconds.
javax.swing.JFrame.setContentPane(java.awt.Container),sets the contentpane property.
javax.swing.JFrame.setDefaultCloseOperation(int),"sets the operation that will happen by default when the user initiates a ""close"" on this frame."
javax.swing.JFrame.setDefaultLookAndFeelDecorated(boolean),"provides a hint as to whether or not newly created jframes should have their window decorations (such as borders, widgets to close the window, title."
javax.swing.JFrame.setGlassPane(java.awt.Component),sets the glasspane property.
javax.swing.JFrame.setIconImage(java.awt.Image),sets the image to be displayed as the icon for this window.
javax.swing.JFrame.setJMenuBar(javax.swing.JMenuBar),sets the menubar for this frame.
javax.swing.JFrame.setLayeredPane(javax.swing.JLayeredPane),sets the layeredpane property.
javax.swing.JFrame.setLayout(java.awt.LayoutManager),sets the layoutmanager.
javax.swing.JFrame.setRootPane(javax.swing.JRootPane),sets the rootpane property.
javax.swing.JFrame.setRootPaneCheckingEnabled(boolean),sets whether calls to add and setlayout are forwarded to the contentpane.
javax.swing.JFrame.setTransferHandler(javax.swing.TransferHandler),"sets the transferhandler property, which is a mechanism to support transfer of data into this component."
javax.swing.JFrame.update(java.awt.Graphics),just calls paint(g).
"javax.swing.JInternalFrame.addImpl(java.awt.Component,java.lang.Object,int)",adds the specified child component.
javax.swing.JInternalFrame.addInternalFrameListener(javax.swing.event.InternalFrameListener),adds the specified listener to receive internal frame events from this internal frame.
javax.swing.JInternalFrame.createRootPane(),called by the constructor to set up the jrootpane.
javax.swing.JInternalFrame.dispose(),"makes this internal frame invisible, unselected, and closed."
javax.swing.JInternalFrame.doDefaultCloseAction(),fires an internal_frame_closing event and then performs the action specified by the internal frame's default close operation.
javax.swing.JInternalFrame.fireInternalFrameEvent(int),fires an internal frame event.
javax.swing.JInternalFrame.getAccessibleContext(),gets the accessiblecontext associated with this jinternalframe.
javax.swing.JInternalFrame.getContentPane(),returns the content pane for this internal frame.
javax.swing.JInternalFrame.getDefaultCloseOperation(),"returns the default operation that occurs when the user initiates a ""close"" on this internal frame."
javax.swing.JInternalFrame.getDesktopIcon(),returns the jdesktopicon used when this jinternalframe is iconified.
javax.swing.JInternalFrame.getDesktopPane(),convenience method that searches the ancestor hierarchy for a jdesktop instance.
javax.swing.JInternalFrame.getFocusCycleRootAncestor(),always returns null because jinternalframes must always be roots of a focus traversal cycle.
javax.swing.JInternalFrame.getFocusOwner(),"if this jinternalframe is active, returns the child that has focus."
javax.swing.JInternalFrame.getFrameIcon(),returns the image displayed in the title bar of this internal frame (usually in the top-left corner).
javax.swing.JInternalFrame.getGlassPane(),returns the glass pane for this internal frame.
javax.swing.JInternalFrame.getInternalFrameListeners(),returns an array of all the internalframelisteners added to this jinternalframe with addinternalframelistener.
javax.swing.JInternalFrame.getJMenuBar(),"returns the current jmenubar for this jinternalframe, or null if no menu bar has been set."
javax.swing.JInternalFrame.getLastCursor(),returns the last cursor that was set by the setcursor method that is not a resizable cursor.
javax.swing.JInternalFrame.getLayer(),convenience method for getting the layer attribute of this component.
javax.swing.JInternalFrame.getLayeredPane(),returns the layered pane for this internal frame.
javax.swing.JInternalFrame.getMostRecentFocusOwner(),returns the child component of this jinternalframe that will receive the focus when this jinternalframe is selected.
javax.swing.JInternalFrame.getNormalBounds(),"if the jinternalframe is not in maximized state, returns getbounds(); otherwise, returns the bounds that the jinternalframe would be restored to."
javax.swing.JInternalFrame.getRootPane(),returns the rootpane object for this internal frame.
javax.swing.JInternalFrame.getTitle(),returns the title of the jinternalframe.
javax.swing.JInternalFrame.getUI(),returns the look-and-feel object that renders this component.
javax.swing.JInternalFrame.getUIClassID(),returns the name of the look-and-feel class that renders this component.
javax.swing.JInternalFrame.getWarningString(),gets the warning string that is displayed with this internal frame.
javax.swing.JInternalFrame.isClosable(),returns whether this jinternalframe can be closed by some user action.
javax.swing.JInternalFrame.isClosed(),returns whether this jinternalframe is currently closed.
javax.swing.JInternalFrame.isFocusCycleRoot(),always returns true because all jinternalframes must be roots of a focus traversal cycle.
javax.swing.JInternalFrame.isIcon(),returns whether the jinternalframe is currently iconified.
javax.swing.JInternalFrame.isIconifiable(),"gets the iconable property, which by default is false."
javax.swing.JInternalFrame.isMaximizable(),gets the value of the maximizable property.
javax.swing.JInternalFrame.isMaximum(),returns whether the jinternalframe is currently maximized.
javax.swing.JInternalFrame.isResizable(),returns whether the jinternalframe can be resized by some user action.
javax.swing.JInternalFrame.isRootPaneCheckingEnabled(),returns whether calls to add and setlayout are forwarded to the contentpane.
javax.swing.JInternalFrame.isSelected(),"returns whether the jinternalframe is the currently ""selected"" or active frame."
javax.swing.JInternalFrame.moveToBack(),convenience method that moves this component to position -1 if its parent is a jlayeredpane.
javax.swing.JInternalFrame.moveToFront(),convenience method that moves this component to position 0 if its parent is a jlayeredpane.
javax.swing.JInternalFrame.pack(),causes subcomponents of this jinternalframe to be laid out at their preferred size.
javax.swing.JInternalFrame.paintComponent(java.awt.Graphics),overridden to allow optimized painting when the internal frame is being dragged.
javax.swing.JInternalFrame.paramString(),returns a string representation of this jinternalframe.
javax.swing.JInternalFrame.remove(java.awt.Component),removes the specified component from the container.
javax.swing.JInternalFrame.removeInternalFrameListener(javax.swing.event.InternalFrameListener),removes the specified internal frame listener so that it no longer receives internal frame events from this internal frame.
"javax.swing.JInternalFrame.reshape(int,int,int,int)",moves and resizes this component.
javax.swing.JInternalFrame.restoreSubcomponentFocus(),requests the internal frame to restore focus to the last subcomponent that had focus.
javax.swing.JInternalFrame.setClosable(boolean),sets whether this jinternalframe can be closed by some user action.
javax.swing.JInternalFrame.setClosed(boolean),closes this internal frame if the argument is true.
javax.swing.JInternalFrame.setContentPane(java.awt.Container),sets this jinternalframe's contentpane property.
javax.swing.JInternalFrame.setCursor(java.awt.Cursor),sets the cursor image to the specified cursor.
javax.swing.JInternalFrame.setDefaultCloseOperation(int),"sets the operation that will happen by default when the user initiates a ""close"" on this internal frame."
javax.swing.JInternalFrame.setDesktopIcon(javax.swing.JInternalFrame.JDesktopIcon),sets the jdesktopicon associated with this jinternalframe.
javax.swing.JInternalFrame.setFocusCycleRoot(boolean),does nothing because jinternalframes must always be roots of a focus traversal cycle.
javax.swing.JInternalFrame.setFrameIcon(javax.swing.Icon),sets an image to be displayed in the titlebar of this internal frame (usually in the top-left corner).
javax.swing.JInternalFrame.setGlassPane(java.awt.Component),sets this jinternalframe's glasspane property.
javax.swing.JInternalFrame.setIcon(boolean),"iconifies or de-iconifies this internal frame, if the look and feel supports iconification."
javax.swing.JInternalFrame.setIconifiable(boolean),"sets the iconable property, which must be true for the user to be able to make the jinternalframe an icon."
javax.swing.JInternalFrame.setJMenuBar(javax.swing.JMenuBar),sets the menubar property for this jinternalframe.
javax.swing.JInternalFrame.setLayer(java.lang.Integer),convenience method for setting the layer attribute of this component.
javax.swing.JInternalFrame.setLayer(int),convenience method for setting the layer attribute of this component.
javax.swing.JInternalFrame.setLayeredPane(javax.swing.JLayeredPane),sets this jinternalframe's layeredpane property.
javax.swing.JInternalFrame.setLayout(java.awt.LayoutManager),"ensures that, by default, the layout of this component cannot be set."
javax.swing.JInternalFrame.setMaximizable(boolean),"sets the maximizable property, which determines whether the jinternalframe can be maximized by some user action."
javax.swing.JInternalFrame.setMaximum(boolean),maximizes and restores this internal frame.
javax.swing.JInternalFrame.setNormalBounds(java.awt.Rectangle),"sets the normal bounds for this internal frame, the bounds that this internal frame would be restored to from its maximized state."
javax.swing.JInternalFrame.setResizable(boolean),sets whether the jinternalframe can be resized by some user action.
javax.swing.JInternalFrame.setRootPane(javax.swing.JRootPane),sets the rootpane property for this jinternalframe.
javax.swing.JInternalFrame.setRootPaneCheckingEnabled(boolean),sets whether calls to add and setlayout are forwarded to the contentpane.
javax.swing.JInternalFrame.setSelected(boolean),selects or deselects the internal frame if it's showing.
javax.swing.JInternalFrame.setTitle(java.lang.String),sets the jinternalframe title.
javax.swing.JInternalFrame.setUI(javax.swing.plaf.InternalFrameUI),sets the ui delegate for this jinternalframe.
javax.swing.JInternalFrame.show(),"if the internal frame is not visible, brings the internal frame to the front, makes it visible, and attempts to select it."
javax.swing.JInternalFrame.toBack(),sends this internal frame to the back.
javax.swing.JInternalFrame.toFront(),brings this internal frame to the front.
javax.swing.JInternalFrame.updateUI(),notification from the uimanager that the look and feel has changed.
javax.swing.JInternalFrame.JDesktopIcon.getAccessibleContext(),gets the accessiblecontext associated with this jdesktopicon.
javax.swing.JInternalFrame.JDesktopIcon.getDesktopPane(),convenience method to ask the icon for the desktop object it belongs to.
javax.swing.JInternalFrame.JDesktopIcon.getInternalFrame(),returns the jinternalframe that this desktopicon is associated with.
javax.swing.JInternalFrame.JDesktopIcon.getUI(),returns the look-and-feel object that renders this component.
javax.swing.JInternalFrame.JDesktopIcon.getUIClassID(),returns the name of the look-and-feel class that renders this component.
javax.swing.JInternalFrame.JDesktopIcon.setInternalFrame(javax.swing.JInternalFrame),sets the jinternalframe with which this desktopicon is associated.
javax.swing.JInternalFrame.JDesktopIcon.setUI(javax.swing.plaf.DesktopIconUI),sets the look-and-feel object that renders this component.
javax.swing.JInternalFrame.JDesktopIcon.updateUI(),notification from the uimanager that the look and feel has changed.
"javax.swing.JLabel.checkHorizontalKey(int,java.lang.String)",verify that key is a legal value for the horizontalalignment properties.
"javax.swing.JLabel.checkVerticalKey(int,java.lang.String)",verify that key is a legal value for the verticalalignment or verticaltextposition properties.
javax.swing.JLabel.getAccessibleContext(),get the accessiblecontext of this object.
javax.swing.JLabel.getDisabledIcon(),returns the icon used by the label when it's disabled.
javax.swing.JLabel.getDisplayedMnemonic(),return the keycode that indicates a mnemonic key.
javax.swing.JLabel.getDisplayedMnemonicIndex(),"returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character."
javax.swing.JLabel.getHorizontalAlignment(),returns the alignment of the label's contents along the x axis.
javax.swing.JLabel.getHorizontalTextPosition(),"returns the horizontal position of the label's text, relative to its image."
javax.swing.JLabel.getIcon(),"returns the graphic image (glyph, icon) that the label displays."
javax.swing.JLabel.getIconTextGap(),returns the amount of space between the text and the icon displayed in this label.
javax.swing.JLabel.getLabelFor(),get the component this is labelling.
javax.swing.JLabel.getText(),returns the text string that the label displays.
javax.swing.JLabel.getUI(),returns the l&f object that renders this component.
javax.swing.JLabel.getUIClassID(),returns a string that specifies the name of the l&f class that renders this component.
javax.swing.JLabel.getVerticalAlignment(),returns the alignment of the label's contents along the y axis.
javax.swing.JLabel.getVerticalTextPosition(),"returns the vertical position of the label's text, relative to its image."
"javax.swing.JLabel.imageUpdate(java.awt.Image,int,int,int,int,int)",this is overridden to return false if the current icon's image is not equal to the passed in image img.
javax.swing.JLabel.paramString(),returns a string representation of this jlabel.
javax.swing.JLabel.setDisabledIcon(javax.swing.Icon),"set the icon to be displayed if this jlabel is ""disabled"" (jlabel."
javax.swing.JLabel.setDisplayedMnemonic(int),specify a keycode that indicates a mnemonic key.
javax.swing.JLabel.setDisplayedMnemonic(char),specifies the displayedmnemonic as a char value.
javax.swing.JLabel.setDisplayedMnemonicIndex(int),provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic.
javax.swing.JLabel.setHorizontalAlignment(int),sets the alignment of the label's contents along the x axis.
javax.swing.JLabel.setHorizontalTextPosition(int),"sets the horizontal position of the label's text, relative to its image."
javax.swing.JLabel.setIcon(javax.swing.Icon),defines the icon this component will display.
javax.swing.JLabel.setIconTextGap(int),"if both the icon and text properties are set, this property defines the space between them."
javax.swing.JLabel.setLabelFor(java.awt.Component),set the component this is labelling.
javax.swing.JLabel.setText(java.lang.String),defines the single line of text this component will display.
javax.swing.JLabel.setUI(javax.swing.plaf.LabelUI),sets the l&f object that renders this component.
javax.swing.JLabel.setVerticalAlignment(int),sets the alignment of the label's contents along the y axis.
javax.swing.JLabel.setVerticalTextPosition(int),"sets the vertical position of the label's text, relative to its image."
javax.swing.JLabel.updateUI(),resets the ui property to a value from the current look and feel.
"javax.swing.JLayer.addImpl(java.awt.Component,java.lang.Object,int)",this method is not supported by jlayer and always throws unsupportedoperationexception.
javax.swing.JLayer.addNotify(),notifies this component that it now has a parent component.
javax.swing.JLayer.createGlassPane(),called by the constructor methods to create a default glasspane.
javax.swing.JLayer.doLayout(),delegates its functionality to the layerui.
javax.swing.JLayer.getAccessibleContext(),gets the accessiblecontext associated with this jlayer.
javax.swing.JLayer.getGlassPane(),returns the jlayer's glasspane component or null.
javax.swing.JLayer.getLayerEventMask(),returns the bitmap of event mask to receive by this jlayer and its layerui.
javax.swing.JLayer.getPreferredScrollableViewportSize(),returns the preferred size of the viewport for a view component.
"javax.swing.JLayer.getScrollableBlockIncrement(java.awt.Rectangle,int,int)","returns a scroll increment, which is required for components that display logical rows or columns in order to completely expose one block of rows or columns, depending on the value of orientation."
javax.swing.JLayer.getScrollableTracksViewportHeight(),"returns false to indicate that the height of the viewport does not determine the height of the layer, unless the preferred height of the layer is smaller than the height of the viewport."
javax.swing.JLayer.getScrollableTracksViewportWidth(),"returns false to indicate that the width of the viewport does not determine the width of the layer, unless the preferred width of the layer is smaller than the width of the viewport."
"javax.swing.JLayer.getScrollableUnitIncrement(java.awt.Rectangle,int,int)","returns a scroll increment, which is required for components that display logical rows or columns in order to completely expose one new row or column, depending on the value of orientation."
javax.swing.JLayer.getUI(),returns the layerui for this jlayer.
javax.swing.JLayer.getView(),returns the jlayer's view component or null.
javax.swing.JLayer.isOptimizedDrawingEnabled(),the jlayer overrides the default implementation of this method (in jcomponent) to return false.
javax.swing.JLayer.isPaintingOrigin(),"always returns true to cause painting to originate from jlayer, or one of its ancestors."
javax.swing.JLayer.paint(java.awt.Graphics),delegates all painting to the layerui object.
javax.swing.JLayer.paintComponent(java.awt.Graphics),"this method is empty, because all painting is done by paint(graphics) and componentui."
"javax.swing.JLayer.paintImmediately(int,int,int,int)",delegates its functionality to the layerui.
javax.swing.JLayer.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.JLayer.remove(java.awt.Component),removes the specified component from this container.
javax.swing.JLayer.removeAll(),removes all the components from this container.
javax.swing.JLayer.removeNotify(),notifies this component that it no longer has a parent component.
javax.swing.JLayer.setBorder(javax.swing.border.Border),"a non-null border, or non-zero insets, isn't supported, to prevent the geometry of this component from becoming complex enough to inhibit subclassing of layerui class."
javax.swing.JLayer.setGlassPane(javax.swing.JPanel),"sets the jlayer's glasspane component, which can be null."
javax.swing.JLayer.setLayerEventMask(long),enables the events from jlayer and all its descendants defined by the specified event mask parameter to be delivered to the layerui.
javax.swing.JLayer.setLayout(java.awt.LayoutManager),sets the layout manager for this container.
javax.swing.JLayer.setUI(javax.swing.plaf.LayerUI<? super javax.swing.JLayer>),sets the layerui which will perform painting and receive input events for this jlayer.
javax.swing.JLayer.setView(javax.swing.JLayer),"sets the jlayer's view component, which can be null."
javax.swing.JLayer.updateUI(),delegates its functionality to the layerui.
javax.swing.JLayeredPane.getAccessibleContext(),gets the accessiblecontext associated with this jlayeredpane.
javax.swing.JLayeredPane.getComponentCountInLayer(int),returns the number of children currently in the specified layer.
javax.swing.JLayeredPane.getComponentsInLayer(int),returns an array of the components in the specified layer.
javax.swing.JLayeredPane.getComponentToLayer(),returns the hashtable that maps components to layers.
javax.swing.JLayeredPane.getIndexOf(java.awt.Component),returns the index of the specified component.
javax.swing.JLayeredPane.getLayer(javax.swing.JComponent),"gets the layer property for a jcomponent, it does not cause any side effects like setlayer()."
javax.swing.JLayeredPane.getLayer(java.awt.Component),returns the layer attribute for the specified component.
javax.swing.JLayeredPane.getLayeredPaneAbove(java.awt.Component),convenience method that returns the first jlayeredpane which contains the specified component.
javax.swing.JLayeredPane.getObjectForLayer(int),returns the integer object associated with a specified layer.
javax.swing.JLayeredPane.getPosition(java.awt.Component),get the relative position of the component within its layer.
javax.swing.JLayeredPane.highestLayer(),returns the highest layer value from all current children.
"javax.swing.JLayeredPane.insertIndexForLayer(int,int)",primitive method that determines the proper location to insert a new child based on layer and position requests.
javax.swing.JLayeredPane.isOptimizedDrawingEnabled(),"returns false if components in the pane can overlap, which makes optimized drawing impossible."
javax.swing.JLayeredPane.lowestLayer(),returns the lowest layer value from all current children.
javax.swing.JLayeredPane.moveToBack(java.awt.Component),moves the component to the bottom of the components in its current layer (position -1).
javax.swing.JLayeredPane.moveToFront(java.awt.Component),moves the component to the top of the components in its current layer (position 0).
javax.swing.JLayeredPane.paint(java.awt.Graphics),paints this jlayeredpane within the specified graphics context.
javax.swing.JLayeredPane.paramString(),returns a string representation of this jlayeredpane.
"javax.swing.JLayeredPane.putLayer(javax.swing.JComponent,int)",sets the layer property on a jcomponent.
javax.swing.JLayeredPane.remove(int),remove the indexed component from this pane.
javax.swing.JLayeredPane.removeAll(),removes all the components from this container.
"javax.swing.JLayeredPane.setLayer(java.awt.Component,int)","sets the layer attribute on the specified component, making it the bottommost component in that layer."
"javax.swing.JLayeredPane.setLayer(java.awt.Component,int,int)",sets the layer attribute for the specified component and also sets its position within that layer.
"javax.swing.JLayeredPane.setPosition(java.awt.Component,int)","moves the component to position within its current layer, where 0 is the topmost position within the layer and -1 is the bottommost position."
javax.swing.JList.addListSelectionListener(javax.swing.event.ListSelectionListener),"adds a listener to the list, to be notified each time a change to the selection occurs; the preferred way of listening for selection state changes."
"javax.swing.JList.addSelectionInterval(int,int)",sets the selection to be the union of the specified interval with current selection.
javax.swing.JList.clearSelection(),"clears the selection; after calling this method, isselectionempty will return true."
javax.swing.JList.createSelectionModel(),returns an instance of defaultlistselectionmodel; called during construction to initialize the list's selection model property.
javax.swing.JList.ensureIndexIsVisible(int),scrolls the list within an enclosing viewport to make the specified cell completely visible.
"javax.swing.JList.fireSelectionValueChanged(int,int,boolean)",notifies listselectionlisteners added directly to the list of selection changes made to the selection model.
javax.swing.JList.getAccessibleContext(),gets the accessiblecontext associated with this jlist.
javax.swing.JList.getAnchorSelectionIndex(),returns the anchor selection index.
"javax.swing.JList.getCellBounds(int,int)","returns the bounding rectangle, in the list's coordinate system, for the range of cells specified by the two indices."
javax.swing.JList.getCellRenderer(),returns the object responsible for painting list items.
javax.swing.JList.getDragEnabled(),returns whether or not automatic drag handling is enabled.
javax.swing.JList.getDropLocation(),"returns the location that this component should visually indicate as the drop location during a dnd operation over the component, or null if no location is to currently be shown."
javax.swing.JList.getDropMode(),returns the drop mode for this component.
javax.swing.JList.getFirstVisibleIndex(),returns the smallest list index that is currently visible.
javax.swing.JList.getFixedCellHeight(),returns the value of the fixedcellheight property.
javax.swing.JList.getFixedCellWidth(),returns the value of the fixedcellwidth property.
javax.swing.JList.getLastVisibleIndex(),returns the largest list index that is currently visible.
javax.swing.JList.getLayoutOrientation(),"returns the layout orientation property for the list: vertical if the layout is a single column of cells, vertical_wrap if the layout is ""newspaper style"" with the content flowing vertically then horizontally, or horizontal_wrap if the layout is ""newspaper style"" with the content flowing horizontally then vertically."
javax.swing.JList.getLeadSelectionIndex(),returns the lead selection index.
javax.swing.JList.getListSelectionListeners(),returns an array of all the listselectionlisteners added to this jlist by way of addlistselectionlistener.
javax.swing.JList.getMaxSelectionIndex(),"returns the largest selected cell index, or -1 if the selection is empty."
javax.swing.JList.getMinSelectionIndex(),"returns the smallest selected cell index, or -1 if the selection is empty."
javax.swing.JList.getModel(),returns the data model that holds the list of items displayed by the jlist component.
"javax.swing.JList.getNextMatch(java.lang.String,int,javax.swing.text.Position.Bias)",returns the next list element whose tostring value starts with the given prefix.
javax.swing.JList.getPreferredScrollableViewportSize(),computes the size of viewport needed to display visiblerowcount rows.
javax.swing.JList.getPrototypeCellValue(),"returns the ""prototypical"" cell value -- a value used to calculate a fixed width and height for cells."
"javax.swing.JList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)",returns the distance to scroll to expose the next or previous block.
javax.swing.JList.getScrollableTracksViewportHeight(),"returns true if this jlist is displayed in a jviewport and the viewport is taller than the list's preferred height, or if the layout orientation is vertical_wrap and visiblerowcount <= 0; otherwise returns false."
javax.swing.JList.getScrollableTracksViewportWidth(),"returns true if this jlist is displayed in a jviewport and the viewport is wider than the list's preferred width, or if the layout orientation is horizontal_wrap and visiblerowcount <= 0; otherwise returns false."
"javax.swing.JList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)",returns the distance to scroll to expose the next or previous row (for vertical scrolling) or column (for horizontal scrolling).
javax.swing.JList.getSelectedIndex(),returns the smallest selected cell index; the selection when only a single item is selected in the list.
javax.swing.JList.getSelectedIndices(),"returns an array of all of the selected indices, in increasing order."
javax.swing.JList.getSelectedValue(),returns the value for the smallest selected cell index; the selected value when only a single item is selected in the list.
javax.swing.JList.getSelectedValuesList(),"returns a list of all the selected items, in increasing order based on their indices in the list."
javax.swing.JList.getSelectionBackground(),returns the color used to draw the background of selected items.
javax.swing.JList.getSelectionForeground(),returns the color used to draw the foreground of selected items.
javax.swing.JList.getSelectionMode(),returns the current selection mode for the list.
javax.swing.JList.getSelectionModel(),returns the current selection model.
javax.swing.JList.getToolTipText(java.awt.event.MouseEvent),returns the tooltip text to be used for the given event.
javax.swing.JList.getUI(),"returns the listui, the look and feel object that renders this component."
javax.swing.JList.getUIClassID(),"returns ""listui"", the uidefaults key used to look up the name of the javax."
javax.swing.JList.getValueIsAdjusting(),returns the value of the selection model's isadjusting property.
javax.swing.JList.getVisibleRowCount(),returns the value of the visiblerowcount property.
javax.swing.JList.indexToLocation(int),returns the origin of the specified item in the list's coordinate system.
javax.swing.JList.isSelectedIndex(int),"returns true if the specified index is selected, else false."
javax.swing.JList.isSelectionEmpty(),"returns true if nothing is selected, else false."
javax.swing.JList.locationToIndex(java.awt.Point),returns the cell index closest to the given location in the list's coordinate system.
javax.swing.JList.paramString(),returns a string representation of this jlist.
javax.swing.JList.removeListSelectionListener(javax.swing.event.ListSelectionListener),removes a selection listener from the list.
"javax.swing.JList.removeSelectionInterval(int,int)",sets the selection to be the set difference of the specified interval and the current selection.
javax.swing.JList.setCellRenderer(javax.swing.ListCellRenderer<? super javax.swing.JList>),sets the delegate that is used to paint each cell in the list.
javax.swing.JList.setDragEnabled(boolean),turns on or off automatic drag handling.
javax.swing.JList.setDropMode(javax.swing.DropMode),sets the drop mode for this component.
javax.swing.JList.setFixedCellHeight(int),sets a fixed value to be used for the height of every cell in the list.
javax.swing.JList.setFixedCellWidth(int),sets a fixed value to be used for the width of every cell in the list.
javax.swing.JList.setLayoutOrientation(int),defines the way list cells are layed out.
javax.swing.JList.setListData(javax.swing.JList[]),"constructs a read-only listmodel from an array of items, and calls setmodel with this model."
javax.swing.JList.setListData(java.util.Vector<? extends javax.swing.JList>),constructs a read-only listmodel from a vector and calls setmodel with this model.
javax.swing.JList.setModel(javax.swing.ListModel<javax.swing.JList>),"sets the model that represents the contents or ""value"" of the list, notifies property change listeners, and then clears the list's selection."
javax.swing.JList.setPrototypeCellValue(javax.swing.JList),"sets the prototypecellvalue property, and then (if the new value is non-null), computes the fixedcellwidth and fixedcellheight properties by requesting the cell renderer component for the given value (and index 0) from the cell renderer, and using that component's preferred size."
javax.swing.JList.setSelectedIndex(int),selects a single cell.
javax.swing.JList.setSelectedIndices(int[]),changes the selection to be the set of indices specified by the given array.
"javax.swing.JList.setSelectedValue(java.lang.Object,boolean)",selects the specified object from the list.
javax.swing.JList.setSelectionBackground(java.awt.Color),"sets the color used to draw the background of selected items, which cell renderers can use fill selected cells."
javax.swing.JList.setSelectionForeground(java.awt.Color),"sets the color used to draw the foreground of selected items, which cell renderers can use to render text and graphics."
"javax.swing.JList.setSelectionInterval(int,int)",selects the specified interval.
javax.swing.JList.setSelectionMode(int),sets the selection mode for the list.
javax.swing.JList.setSelectionModel(javax.swing.ListSelectionModel),sets the selectionmodel for the list to a non-null listselectionmodel implementation.
javax.swing.JList.setUI(javax.swing.plaf.ListUI),"sets the listui, the look and feel object that renders this component."
javax.swing.JList.setValueIsAdjusting(boolean),sets the selection model's valueisadjusting property.
javax.swing.JList.setVisibleRowCount(int),"sets the visiblerowcount property, which has different meanings depending on the layout orientation: for a vertical layout orientation, this sets the preferred number of rows to display without requiring scrolling; for other orientations, it affects the wrapping of cells."
javax.swing.JList.updateUI(),resets the listui property by setting it to the value provided by the current look and feel.
javax.swing.JList.DropLocation.getIndex(),returns the index where dropped data should be placed in the list.
javax.swing.JList.DropLocation.isInsert(),returns whether or not this location represents an insert location.
javax.swing.JList.DropLocation.toString(),returns a string representation of this drop location.
javax.swing.JMenu.add(javax.swing.JMenuItem),appends a menu item to the end of this menu.
javax.swing.JMenu.add(java.awt.Component),appends a component to the end of this menu.
"javax.swing.JMenu.add(java.awt.Component,int)",adds the specified component to this container at the given position.
javax.swing.JMenu.add(java.lang.String),creates a new menu item with the specified text and appends it to the end of this menu.
javax.swing.JMenu.add(javax.swing.Action),creates a new menu item attached to the specified action object and appends it to the end of this menu.
javax.swing.JMenu.addMenuListener(javax.swing.event.MenuListener),adds a listener for menu events.
javax.swing.JMenu.addSeparator(),appends a new separator to the end of the menu.
javax.swing.JMenu.applyComponentOrientation(java.awt.ComponentOrientation),sets the componentorientation property of this menu and all components contained within it.
javax.swing.JMenu.createActionChangeListener(javax.swing.JMenuItem),returns a properly configured propertychangelistener which updates the control as changes to the action occur.
javax.swing.JMenu.createActionComponent(javax.swing.Action),factory method which creates the jmenuitem for actions added to the jmenu.
javax.swing.JMenu.createWinListener(javax.swing.JPopupMenu),creates a window-closing listener for the popup.
javax.swing.JMenu.doClick(int),"programmatically performs a ""click""."
javax.swing.JMenu.fireMenuCanceled(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenu.fireMenuDeselected(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenu.fireMenuSelected(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenu.getAccessibleContext(),gets the accessiblecontext associated with this jmenu.
javax.swing.JMenu.getComponent(),returns the java.
javax.swing.JMenu.getDelay(),"returns the suggested delay, in milliseconds, before submenus are popped up or down."
javax.swing.JMenu.getItem(int),returns the jmenuitem at the specified position.
javax.swing.JMenu.getItemCount(),"returns the number of items on the menu, including separators."
javax.swing.JMenu.getMenuComponent(int),returns the component at position n.
javax.swing.JMenu.getMenuComponentCount(),returns the number of components on the menu.
javax.swing.JMenu.getMenuComponents(),returns an array of components of the menu's subcomponents.
javax.swing.JMenu.getMenuListeners(),returns an array of all the menulisteners added to this jmenu with addmenulistener().
javax.swing.JMenu.getPopupMenu(),returns the popupmenu associated with this menu.
javax.swing.JMenu.getPopupMenuOrigin(),computes the origin for the jmenu's popup menu.
javax.swing.JMenu.getSubElements(),returns an array of menuelements containing the submenu for this menu component.
javax.swing.JMenu.getUIClassID(),returns the name of the l&f class that renders this component.
"javax.swing.JMenu.insert(java.lang.String,int)",inserts a new menu item with the specified text at a given position.
"javax.swing.JMenu.insert(javax.swing.JMenuItem,int)",inserts the specified jmenuitem at a given position.
"javax.swing.JMenu.insert(javax.swing.Action,int)",inserts a new menu item attached to the specified action object at a given position.
javax.swing.JMenu.insertSeparator(int),inserts a separator at the specified position.
javax.swing.JMenu.isMenuComponent(java.awt.Component),returns true if the specified component exists in the submenu hierarchy.
javax.swing.JMenu.isPopupMenuVisible(),returns true if the menu's popup window is visible.
javax.swing.JMenu.isSelected(),returns true if the menu is currently selected (highlighted).
javax.swing.JMenu.isTearOff(),returns true if the menu can be torn off.
javax.swing.JMenu.isTopLevelMenu(),"returns true if the menu is a 'top-level menu', that is, if it is the direct child of a menubar."
javax.swing.JMenu.menuSelectionChanged(boolean),messaged when the menubar selection changes to activate or deactivate this menu.
javax.swing.JMenu.paramString(),returns a string representation of this jmenu.
javax.swing.JMenu.processKeyEvent(java.awt.event.KeyEvent),processes key stroke events such as mnemonics and accelerators.
javax.swing.JMenu.remove(javax.swing.JMenuItem),removes the specified menu item from this menu.
javax.swing.JMenu.remove(int),removes the menu item at the specified index from this menu.
javax.swing.JMenu.remove(java.awt.Component),removes the component c from this menu.
javax.swing.JMenu.removeAll(),removes all menu items from this menu.
javax.swing.JMenu.removeMenuListener(javax.swing.event.MenuListener),removes a listener for menu events.
javax.swing.JMenu.setAccelerator(javax.swing.KeyStroke),setaccelerator is not defined for jmenu.
javax.swing.JMenu.setDelay(int),sets the suggested delay before the menu's popupmenu is popped up or down.
"javax.swing.JMenu.setMenuLocation(int,int)",sets the location of the popup component.
javax.swing.JMenu.setModel(javax.swing.ButtonModel),"sets the data model for the ""menu button"" -- the label that the user clicks to open or close the menu."
javax.swing.JMenu.setPopupMenuVisible(boolean),sets the visibility of the menu's popup.
javax.swing.JMenu.setSelected(boolean),sets the selection status of the menu.
javax.swing.JMenu.updateUI(),resets the ui property with a value from the current look and feel.
javax.swing.JMenuBar.add(javax.swing.JMenu),appends the specified menu to the end of the menu bar.
javax.swing.JMenuBar.getAccessibleContext(),gets the accessiblecontext associated with this jmenubar.
javax.swing.JMenuBar.getComponent(),implemented to be a menuelement.
javax.swing.JMenuBar.getComponentIndex(java.awt.Component),returns the index of the specified component.
javax.swing.JMenuBar.getHelpMenu(),gets the help menu for the menu bar.
javax.swing.JMenuBar.getMargin(),returns the margin between the menubar's border and its menus.
javax.swing.JMenuBar.getMenu(int),returns the menu at the specified position in the menu bar.
javax.swing.JMenuBar.getMenuCount(),returns the number of items in the menu bar.
javax.swing.JMenuBar.getSelectionModel(),returns the model object that handles single selections.
javax.swing.JMenuBar.getSubElements(),implemented to be a menuelement -- returns the menus in this menu bar.
javax.swing.JMenuBar.getUI(),returns the menubar's current ui.
javax.swing.JMenuBar.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JMenuBar.isBorderPainted(),returns true if the menu bars border should be painted.
javax.swing.JMenuBar.isSelected(),returns true if the menu bar currently has a component selected.
javax.swing.JMenuBar.menuSelectionChanged(boolean),implemented to be a menuelement -- does nothing.
javax.swing.JMenuBar.paintBorder(java.awt.Graphics),paints the menubar's border if borderpainted property is true.
javax.swing.JMenuBar.paramString(),returns a string representation of this jmenubar.
"javax.swing.JMenuBar.processKeyBinding(javax.swing.KeyStroke,java.awt.event.KeyEvent,int,boolean)",subclassed to check all the child menus.
"javax.swing.JMenuBar.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)",implemented to be a menuelement -- does nothing.
"javax.swing.JMenuBar.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)",implemented to be a menuelement -- does nothing.
javax.swing.JMenuBar.setBorderPainted(boolean),sets whether the border should be painted.
javax.swing.JMenuBar.setHelpMenu(javax.swing.JMenu),"sets the help menu that appears when the user selects the ""help"" option in the menu bar."
javax.swing.JMenuBar.setMargin(java.awt.Insets),sets the margin between the menubar's border and its menus.
javax.swing.JMenuBar.setSelected(java.awt.Component),"sets the currently selected component, producing a a change to the selection model."
javax.swing.JMenuBar.setSelectionModel(javax.swing.SingleSelectionModel),sets the model object to handle single selections.
javax.swing.JMenuBar.setUI(javax.swing.plaf.MenuBarUI),sets the l&f object that renders this component.
javax.swing.JMenuBar.updateUI(),resets the ui property with a value from the current look and feel.
"javax.swing.JMenuItem.actionPropertyChanged(javax.swing.Action,java.lang.String)",updates the button's state in response to property changes in the associated action.
javax.swing.JMenuItem.addMenuDragMouseListener(javax.swing.event.MenuDragMouseListener),adds a menudragmouselistener to the menu item.
javax.swing.JMenuItem.addMenuKeyListener(javax.swing.event.MenuKeyListener),adds a menukeylistener to the menu item.
javax.swing.JMenuItem.configurePropertiesFromAction(javax.swing.Action),sets the properties on this button to match those in the specified action.
javax.swing.JMenuItem.fireMenuDragMouseDragged(javax.swing.event.MenuDragMouseEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem.fireMenuDragMouseEntered(javax.swing.event.MenuDragMouseEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem.fireMenuDragMouseExited(javax.swing.event.MenuDragMouseEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem.fireMenuDragMouseReleased(javax.swing.event.MenuDragMouseEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem.fireMenuKeyPressed(javax.swing.event.MenuKeyEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem.fireMenuKeyReleased(javax.swing.event.MenuKeyEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem.fireMenuKeyTyped(javax.swing.event.MenuKeyEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem.getAccelerator(),returns the keystroke which serves as an accelerator for the menu item.
javax.swing.JMenuItem.getAccessibleContext(),returns the accessiblecontext associated with this jmenuitem.
javax.swing.JMenuItem.getComponent(),returns the java.
javax.swing.JMenuItem.getMenuDragMouseListeners(),returns an array of all the menudragmouselisteners added to this jmenuitem with addmenudragmouselistener().
javax.swing.JMenuItem.getMenuKeyListeners(),returns an array of all the menukeylisteners added to this jmenuitem with addmenukeylistener().
javax.swing.JMenuItem.getSubElements(),this method returns an array containing the sub-menu components for this menu component.
javax.swing.JMenuItem.getUIClassID(),returns the suffix used to construct the name of the l&f class used to render this component.
"javax.swing.JMenuItem.init(java.lang.String,javax.swing.Icon)",initializes the menu item with the specified text and icon.
javax.swing.JMenuItem.isArmed(),"returns whether the menu item is ""armed""."
javax.swing.JMenuItem.menuSelectionChanged(boolean),called by the menuselectionmanager when the menuelement is selected or unselected.
javax.swing.JMenuItem.paramString(),returns a string representation of this jmenuitem.
"javax.swing.JMenuItem.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)","processes a key event forwarded from the menuselectionmanager and changes the menu selection, if necessary, by using menuselectionmanager's api."
javax.swing.JMenuItem.processMenuDragMouseEvent(javax.swing.event.MenuDragMouseEvent),handles mouse drag in a menu.
javax.swing.JMenuItem.processMenuKeyEvent(javax.swing.event.MenuKeyEvent),handles a keystroke in a menu.
"javax.swing.JMenuItem.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)","processes a mouse event forwarded from the menuselectionmanager and changes the menu selection, if necessary, by using the menuselectionmanager's api."
javax.swing.JMenuItem.removeMenuDragMouseListener(javax.swing.event.MenuDragMouseListener),removes a menudragmouselistener from the menu item.
javax.swing.JMenuItem.removeMenuKeyListener(javax.swing.event.MenuKeyListener),removes a menukeylistener from the menu item.
javax.swing.JMenuItem.setAccelerator(javax.swing.KeyStroke),sets the key combination which invokes the menu item's action listeners without navigating the menu hierarchy.
javax.swing.JMenuItem.setArmed(boolean),"identifies the menu item as ""armed""."
javax.swing.JMenuItem.setEnabled(boolean),enables or disables the menu item.
javax.swing.JMenuItem.setModel(javax.swing.ButtonModel),sets the model that this button represents.
javax.swing.JMenuItem.setUI(javax.swing.plaf.MenuItemUI),sets the look and feel object that renders this component.
javax.swing.JMenuItem.updateUI(),resets the ui property with a value from the current look and feel.
"javax.swing.JOptionPane.createDialog(java.awt.Component,java.lang.String)",creates and returns a new jdialog wrapping this centered on the parentcomponent in the parentcomponent's frame.
javax.swing.JOptionPane.createDialog(java.lang.String),creates and returns a new parentless jdialog with the specified title.
"javax.swing.JOptionPane.createInternalFrame(java.awt.Component,java.lang.String)",creates and returns an instance of jinternalframe.
javax.swing.JOptionPane.getAccessibleContext(),returns the accessiblecontext associated with this joptionpane.
javax.swing.JOptionPane.getDesktopPaneForComponent(java.awt.Component),returns the specified component's desktop pane.
javax.swing.JOptionPane.getFrameForComponent(java.awt.Component),returns the specified component's frame.
javax.swing.JOptionPane.getIcon(),returns the icon this pane displays.
javax.swing.JOptionPane.getInitialSelectionValue(),returns the input value that is displayed as initially selected to the user.
javax.swing.JOptionPane.getInitialValue(),returns the initial value.
javax.swing.JOptionPane.getInputValue(),"returns the value the user has input, if wantsinput is true."
javax.swing.JOptionPane.getMaxCharactersPerLineCount(),returns the maximum number of characters to place on a line in a message.
javax.swing.JOptionPane.getMessage(),returns the message-object this pane displays.
javax.swing.JOptionPane.getMessageType(),returns the message type.
javax.swing.JOptionPane.getOptions(),returns the choices the user can make.
javax.swing.JOptionPane.getOptionType(),returns the type of options that are displayed.
javax.swing.JOptionPane.getRootFrame(),returns the frame to use for the class methods in which a frame is not provided.
javax.swing.JOptionPane.getSelectionValues(),returns the input selection values.
javax.swing.JOptionPane.getUI(),returns the ui object which implements the l&f for this component.
javax.swing.JOptionPane.getUIClassID(),returns the name of the ui class that implements the l&f for this component.
javax.swing.JOptionPane.getValue(),returns the value the user has selected.
javax.swing.JOptionPane.getWantsInput(),returns the value of the wantsinput property.
javax.swing.JOptionPane.paramString(),returns a string representation of this joptionpane.
javax.swing.JOptionPane.selectInitialValue(),"requests that the initial value be selected, which will set focus to the initial value."
javax.swing.JOptionPane.setIcon(javax.swing.Icon),sets the icon to display.
javax.swing.JOptionPane.setInitialSelectionValue(java.lang.Object),sets the input value that is initially displayed as selected to the user.
javax.swing.JOptionPane.setInitialValue(java.lang.Object),sets the initial value that is to be enabled -- the component that has the focus when the pane is initially displayed.
javax.swing.JOptionPane.setInputValue(java.lang.Object),sets the input value that was selected or input by the user.
javax.swing.JOptionPane.setMessage(java.lang.Object),sets the option pane's message-object.
javax.swing.JOptionPane.setMessageType(int),sets the option pane's message type.
javax.swing.JOptionPane.setOptions(java.lang.Object[]),sets the options this pane displays.
javax.swing.JOptionPane.setOptionType(int),sets the options to display.
javax.swing.JOptionPane.setRootFrame(java.awt.Frame),sets the frame to use for class methods in which a frame is not provided.
javax.swing.JOptionPane.setSelectionValues(java.lang.Object[]),sets the input selection values for a pane that provides the user with a list of items to choose from.
javax.swing.JOptionPane.setUI(javax.swing.plaf.OptionPaneUI),sets the ui object which implements the l&f for this component.
javax.swing.JOptionPane.setValue(java.lang.Object),sets the value the user has chosen.
javax.swing.JOptionPane.setWantsInput(boolean),sets the wantsinput property.
"javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object)","brings up a dialog with the options yes, no and cancel; with the title, select an option."
"javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",brings up a dialog where the number of choices is determined by the optiontype parameter.
"javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)","brings up a dialog where the number of choices is determined by the optiontype parameter, where the messagetype parameter determines the icon to display."
"javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon)","brings up a dialog with a specified icon, where the number of choices is determined by the optiontype parameter."
javax.swing.JOptionPane.showInputDialog(java.lang.Object),shows a question-message dialog requesting input from the user.
"javax.swing.JOptionPane.showInputDialog(java.lang.Object,java.lang.Object)","shows a question-message dialog requesting input from the user, with the input value initialized to initialselectionvalue."
"javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object)",shows a question-message dialog requesting input from the user parented to parentcomponent.
"javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",shows a question-message dialog requesting input from the user and parented to parentcomponent.
"javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",shows a dialog requesting input from the user parented to parentcomponent with the dialog having the title title and message type messagetype.
"javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)","prompts the user for input in a blocking dialog where the initial selection, possible selections, and all other options can be specified."
"javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object)","brings up an internal dialog panel with the options yes, no and cancel; with the title, select an option."
"javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",brings up a internal dialog panel where the number of choices is determined by the optiontype parameter.
"javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)","brings up an internal dialog panel where the number of choices is determined by the optiontype parameter, where the messagetype parameter determines the icon to display."
"javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon)","brings up an internal dialog panel with a specified icon, where the number of choices is determined by the optiontype parameter."
"javax.swing.JOptionPane.showInternalInputDialog(java.awt.Component,java.lang.Object)",shows an internal question-message dialog requesting input from the user parented to parentcomponent.
"javax.swing.JOptionPane.showInternalInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",shows an internal dialog requesting input from the user parented to parentcomponent with the dialog having the title title and message type messagetype.
"javax.swing.JOptionPane.showInternalInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)","prompts the user for input in a blocking internal dialog where the initial selection, possible selections, and all other options can be specified."
"javax.swing.JOptionPane.showInternalMessageDialog(java.awt.Component,java.lang.Object)",brings up an internal confirmation dialog panel.
"javax.swing.JOptionPane.showInternalMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",brings up an internal dialog panel that displays a message using a default icon determined by the messagetype parameter.
"javax.swing.JOptionPane.showInternalMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon)","brings up an internal dialog panel displaying a message, specifying all parameters."
"javax.swing.JOptionPane.showInternalOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)","brings up an internal dialog panel with a specified icon, where the initial choice is determined by the initialvalue parameter and the number of choices is determined by the optiontype parameter."
"javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)","brings up an information-message dialog titled ""message""."
"javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",brings up a dialog that displays a message using a default icon determined by the messagetype parameter.
"javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon)","brings up a dialog displaying a message, specifying all parameters."
"javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)","brings up a dialog with a specified icon, where the initial choice is determined by the initialvalue parameter and the number of choices is determined by the optiontype parameter."
javax.swing.JOptionPane.updateUI(),notification from the uimanager that the l&f has changed.
javax.swing.JPanel.getAccessibleContext(),gets the accessiblecontext associated with this jpanel.
javax.swing.JPanel.getUI(),returns the look and feel (l&amp;f) object that renders this component.
javax.swing.JPanel.getUIClassID(),returns a string that specifies the name of the l&f class that renders this component.
javax.swing.JPanel.paramString(),returns a string representation of this jpanel.
javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI),sets the look and feel (l&f) object that renders this component.
javax.swing.JPanel.updateUI(),resets the ui property with a value from the current look and feel.
javax.swing.JPasswordField.copy(),"invokes provideerrorfeedback on the current look and feel, which typically initiates an error beep."
javax.swing.JPasswordField.cut(),"invokes provideerrorfeedback on the current look and feel, which typically initiates an error beep."
javax.swing.JPasswordField.echoCharIsSet(),returns true if this jpasswordfield has a character set for echoing.
javax.swing.JPasswordField.getAccessibleContext(),returns the accessiblecontext associated with this jpasswordfield.
javax.swing.JPasswordField.getEchoChar(),returns the character to be used for echoing.
javax.swing.JPasswordField.getPassword(),returns the text contained in this textcomponent.
javax.swing.JPasswordField.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JPasswordField.paramString(),returns a string representation of this jpasswordfield.
javax.swing.JPasswordField.setEchoChar(char),sets the echo character for this jpasswordfield.
javax.swing.JPasswordField.updateUI(),reloads the pluggable ui.
javax.swing.JPopupMenu.add(javax.swing.JMenuItem),appends the specified menu item to the end of this menu.
javax.swing.JPopupMenu.add(java.lang.String),creates a new menu item with the specified text and appends it to the end of this menu.
javax.swing.JPopupMenu.add(javax.swing.Action),appends a new menu item to the end of the menu which dispatches the specified action object.
javax.swing.JPopupMenu.addMenuKeyListener(javax.swing.event.MenuKeyListener),adds a menukeylistener to the popup menu.
javax.swing.JPopupMenu.addPopupMenuListener(javax.swing.event.PopupMenuListener),adds a popupmenu listener.
javax.swing.JPopupMenu.addSeparator(),appends a new separator at the end of the menu.
javax.swing.JPopupMenu.createActionChangeListener(javax.swing.JMenuItem),returns a properly configured propertychangelistener which updates the control as changes to the action occur.
javax.swing.JPopupMenu.createActionComponent(javax.swing.Action),factory method which creates the jmenuitem for actions added to the jpopupmenu.
javax.swing.JPopupMenu.firePopupMenuCanceled(),notifies popupmenulisteners that this popup menu is cancelled.
javax.swing.JPopupMenu.firePopupMenuWillBecomeInvisible(),notifies popupmenulisteners that this popup menu will become invisible.
javax.swing.JPopupMenu.firePopupMenuWillBecomeVisible(),notifies popupmenulisteners that this popup menu will become visible.
javax.swing.JPopupMenu.getAccessibleContext(),gets the accessiblecontext associated with this jpopupmenu.
javax.swing.JPopupMenu.getComponent(),returns this jpopupmenu component.
javax.swing.JPopupMenu.getComponentIndex(java.awt.Component),returns the index of the specified component.
javax.swing.JPopupMenu.getDefaultLightWeightPopupEnabled(),"gets the defaultlightweightpopupenabled property, which by default is true."
javax.swing.JPopupMenu.getInvoker(),returns the component which is the 'invoker' of this popup menu.
javax.swing.JPopupMenu.getLabel(),returns the popup menu's label.
javax.swing.JPopupMenu.getMargin(),"returns the margin, in pixels, between the popup menu's border and its containers."
javax.swing.JPopupMenu.getMenuKeyListeners(),returns an array of all the menukeylisteners added to this jpopupmenu with addmenukeylistener().
javax.swing.JPopupMenu.getPopupMenuListeners(),returns an array of all the popupmenulisteners added to this jmenuitem with addpopupmenulistener().
javax.swing.JPopupMenu.getSelectionModel(),returns the model object that handles single selections.
javax.swing.JPopupMenu.getSubElements(),returns an array of menuelements containing the submenu for this menu component.
javax.swing.JPopupMenu.getUI(),returns the look and feel (l&f) object that renders this component.
javax.swing.JPopupMenu.getUIClassID(),returns the name of the l&f class that renders this component.
"javax.swing.JPopupMenu.insert(javax.swing.Action,int)",inserts a menu item for the specified action object at a given position.
"javax.swing.JPopupMenu.insert(java.awt.Component,int)",inserts the specified component into the menu at a given position.
javax.swing.JPopupMenu.isBorderPainted(),checks whether the border should be painted.
javax.swing.JPopupMenu.isLightWeightPopupEnabled(),gets the lightweightpopupenabled property.
javax.swing.JPopupMenu.isPopupTrigger(java.awt.event.MouseEvent),returns true if the mouseevent is considered a popup trigger by the jpopupmenu's currently installed ui.
javax.swing.JPopupMenu.isVisible(),returns true if the popup menu is visible (currently being displayed).
javax.swing.JPopupMenu.menuSelectionChanged(boolean),messaged when the menubar selection changes to activate or deactivate this menu.
javax.swing.JPopupMenu.pack(),lays out the container so that it uses the minimum space needed to display its contents.
javax.swing.JPopupMenu.paintBorder(java.awt.Graphics),paints the popup menu's border if the borderpainted property is true.
javax.swing.JPopupMenu.paramString(),returns a string representation of this jpopupmenu.
javax.swing.JPopupMenu.processKeyEvent(java.awt.event.KeyEvent),processes key stroke events such as mnemonics and accelerators.
"javax.swing.JPopupMenu.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)","processes a key event forwarded from the menuselectionmanager and changes the menu selection, if necessary, by using menuselectionmanager's api."
"javax.swing.JPopupMenu.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)","this method is required to conform to the menuelement interface, but it not implemented."
javax.swing.JPopupMenu.remove(int),removes the component at the specified index from this popup menu.
javax.swing.JPopupMenu.removeMenuKeyListener(javax.swing.event.MenuKeyListener),removes a menukeylistener from the popup menu.
javax.swing.JPopupMenu.removePopupMenuListener(javax.swing.event.PopupMenuListener),removes a popupmenu listener.
javax.swing.JPopupMenu.setBorderPainted(boolean),sets whether the border should be painted.
javax.swing.JPopupMenu.setDefaultLightWeightPopupEnabled(boolean),sets the default value of the lightweightpopupenabled property.
javax.swing.JPopupMenu.setInvoker(java.awt.Component),sets the invoker of this popup menu -- the component in which the popup menu menu is to be displayed.
javax.swing.JPopupMenu.setLabel(java.lang.String),sets the popup menu's label.
javax.swing.JPopupMenu.setLightWeightPopupEnabled(boolean),"sets the value of the lightweightpopupenabled property, which by default is true."
"javax.swing.JPopupMenu.setLocation(int,int)","sets the location of the upper left corner of the popup menu using x, y coordinates."
javax.swing.JPopupMenu.setPopupSize(java.awt.Dimension),sets the size of the popup window using a dimension object.
"javax.swing.JPopupMenu.setPopupSize(int,int)",sets the size of the popup window to the specified width and height.
javax.swing.JPopupMenu.setSelected(java.awt.Component),"sets the currently selected component, this will result in a change to the selection model."
javax.swing.JPopupMenu.setSelectionModel(javax.swing.SingleSelectionModel),sets the model object to handle single selections.
javax.swing.JPopupMenu.setUI(javax.swing.plaf.PopupMenuUI),sets the l&f object that renders this component.
javax.swing.JPopupMenu.setVisible(boolean),sets the visibility of the popup menu.
"javax.swing.JPopupMenu.show(java.awt.Component,int,int)","displays the popup menu at the position x,y in the coordinate space of the component invoker."
javax.swing.JPopupMenu.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.JPopupMenu.Separator.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JProgressBar.addChangeListener(javax.swing.event.ChangeListener),adds the specified changelistener to the progress bar.
javax.swing.JProgressBar.createChangeListener(),subclasses that want to handle change events from the model differently can override this to return an instance of a custom changelistener implementation.
javax.swing.JProgressBar.fireStateChanged(),"send a changeevent, whose source is this jprogressbar, to all changelisteners that have registered interest in changeevents."
javax.swing.JProgressBar.getAccessibleContext(),gets the accessiblecontext associated with this jprogressbar.
javax.swing.JProgressBar.getChangeListeners(),returns an array of all the changelisteners added to this progress bar with addchangelistener.
javax.swing.JProgressBar.getMaximum(),returns the progress bar's maximum value from the boundedrangemodel.
javax.swing.JProgressBar.getMinimum(),returns the progress bar's minimum value from the boundedrangemodel.
javax.swing.JProgressBar.getModel(),returns the data model used by this progress bar.
javax.swing.JProgressBar.getOrientation(),returns swingconstants.
javax.swing.JProgressBar.getPercentComplete(),returns the percent complete for the progress bar.
javax.swing.JProgressBar.getString(),returns a string representation of the current progress.
javax.swing.JProgressBar.getUI(),returns the look-and-feel object that renders this component.
javax.swing.JProgressBar.getUIClassID(),returns the name of the look-and-feel class that renders this component.
javax.swing.JProgressBar.getValue(),returns the progress bar's current value from the boundedrangemodel.
javax.swing.JProgressBar.isBorderPainted(),returns the borderpainted property.
javax.swing.JProgressBar.isIndeterminate(),returns the value of the indeterminate property.
javax.swing.JProgressBar.isStringPainted(),returns the value of the stringpainted property.
javax.swing.JProgressBar.paintBorder(java.awt.Graphics),paints the progress bar's border if the borderpainted property is true.
javax.swing.JProgressBar.paramString(),returns a string representation of this jprogressbar.
javax.swing.JProgressBar.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from the progress bar.
javax.swing.JProgressBar.setBorderPainted(boolean),"sets the borderpainted property, which is true if the progress bar should paint its border."
javax.swing.JProgressBar.setIndeterminate(boolean),"sets the indeterminate property of the progress bar, which determines whether the progress bar is in determinate or indeterminate mode."
javax.swing.JProgressBar.setMaximum(int),sets the progress bar's maximum value (stored in the progress bar's data model) to n.
javax.swing.JProgressBar.setMinimum(int),sets the progress bar's minimum value (stored in the progress bar's data model) to n.
javax.swing.JProgressBar.setModel(javax.swing.BoundedRangeModel),sets the data model used by the jprogressbar.
javax.swing.JProgressBar.setOrientation(int),"sets the progress bar's orientation to neworientation, which must be swingconstants."
javax.swing.JProgressBar.setString(java.lang.String),sets the value of the progress string.
javax.swing.JProgressBar.setStringPainted(boolean),"sets the value of the stringpainted property, which determines whether the progress bar should render a progress string."
javax.swing.JProgressBar.setUI(javax.swing.plaf.ProgressBarUI),sets the look-and-feel object that renders this component.
javax.swing.JProgressBar.setValue(int),sets the progress bar's current value to n.
javax.swing.JProgressBar.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.JRadioButton.getAccessibleContext(),gets the accessiblecontext associated with this jradiobutton.
javax.swing.JRadioButton.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JRadioButton.paramString(),returns a string representation of this jradiobutton.
javax.swing.JRadioButton.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.JRadioButtonMenuItem.getAccessibleContext(),gets the accessiblecontext associated with this jradiobuttonmenuitem.
javax.swing.JRadioButtonMenuItem.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JRadioButtonMenuItem.paramString(),returns a string representation of this jradiobuttonmenuitem.
"javax.swing.JRootPane.addImpl(java.awt.Component,java.lang.Object,int)",overridden to enforce the position of the glass component as the zero child.
javax.swing.JRootPane.addNotify(),notifies this component that it now has a parent component.
javax.swing.JRootPane.createContentPane(),called by the constructor methods to create the default contentpane.
javax.swing.JRootPane.createGlassPane(),called by the constructor methods to create the default glasspane.
javax.swing.JRootPane.createLayeredPane(),called by the constructor methods to create the default layeredpane.
javax.swing.JRootPane.createRootLayout(),called by the constructor methods to create the default layoutmanager.
javax.swing.JRootPane.getAccessibleContext(),gets the accessiblecontext associated with this jrootpane.
javax.swing.JRootPane.getContentPane(),returns the content pane -- the container that holds the components parented by the root pane.
javax.swing.JRootPane.getDefaultButton(),returns the value of the defaultbutton property.
javax.swing.JRootPane.getGlassPane(),returns the current glass pane for this jrootpane.
javax.swing.JRootPane.getJMenuBar(),returns the menu bar from the layered pane.
javax.swing.JRootPane.getLayeredPane(),gets the layered pane used by the root pane.
javax.swing.JRootPane.getUI(),returns the l&f object that renders this component.
javax.swing.JRootPane.getUIClassID(),returns a string that specifies the name of the l&f class that renders this component.
javax.swing.JRootPane.getWindowDecorationStyle(),returns a constant identifying the type of window decorations the jrootpane is providing.
javax.swing.JRootPane.isOptimizedDrawingEnabled(),"the glasspane and contentpane have the same bounds, which means jrootpane does not tiles its children and this should return false."
javax.swing.JRootPane.isValidateRoot(),"if a descendant of this jrootpane calls revalidate, validate from here on down."
javax.swing.JRootPane.paramString(),returns a string representation of this jrootpane.
javax.swing.JRootPane.removeNotify(),notifies this component that it no longer has a parent component.
javax.swing.JRootPane.setContentPane(java.awt.Container),sets the content pane -- the container that holds the components parented by the root pane.
javax.swing.JRootPane.setDefaultButton(javax.swing.JButton),"sets the defaultbutton property, which determines the current default button for this jrootpane."
javax.swing.JRootPane.setDoubleBuffered(boolean),sets whether this component should use a buffer to paint.
javax.swing.JRootPane.setGlassPane(java.awt.Component),sets a specified component to be the glass pane for this root pane.
javax.swing.JRootPane.setJMenuBar(javax.swing.JMenuBar),adds or changes the menu bar used in the layered pane.
javax.swing.JRootPane.setLayeredPane(javax.swing.JLayeredPane),sets the layered pane for the root pane.
javax.swing.JRootPane.setUI(javax.swing.plaf.RootPaneUI),sets the l&f object that renders this component.
javax.swing.JRootPane.setWindowDecorationStyle(int),"sets the type of window decorations (such as borders, widgets for closing a window, title ."
javax.swing.JRootPane.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.JScrollBar.addAdjustmentListener(java.awt.event.AdjustmentListener),adds an adjustmentlistener.
"javax.swing.JScrollBar.fireAdjustmentValueChanged(int,int,int)",notify listeners that the scrollbar's model has changed.
javax.swing.JScrollBar.getAccessibleContext(),gets the accessiblecontext associated with this jscrollbar.
javax.swing.JScrollBar.getAdjustmentListeners(),returns an array of all the adjustmentlisteners added to this jscrollbar with addadjustmentlistener().
javax.swing.JScrollBar.getBlockIncrement(int),"returns the amount to change the scrollbar's value by, given a block (usually ""page"") up/down request."
javax.swing.JScrollBar.getBlockIncrement(),for backwards compatibility with java.
javax.swing.JScrollBar.getMaximum(),the maximum value of the scrollbar is maximum - extent.
javax.swing.JScrollBar.getMaximumSize(),the scrollbar is flexible along it's scrolling axis and rigid along the other axis.
javax.swing.JScrollBar.getMinimum(),returns the minimum value supported by the scrollbar (usually zero).
javax.swing.JScrollBar.getMinimumSize(),the scrollbar is flexible along it's scrolling axis and rigid along the other axis.
javax.swing.JScrollBar.getModel(),"returns data model that handles the scrollbar's four fundamental properties: minimum, maximum, value, extent."
javax.swing.JScrollBar.getOrientation(),returns the component's orientation (horizontal or vertical).
javax.swing.JScrollBar.getUI(),returns the delegate that implements the look and feel for this component.
javax.swing.JScrollBar.getUIClassID(),returns the name of the lookandfeel class for this component.
javax.swing.JScrollBar.getUnitIncrement(int),"returns the amount to change the scrollbar's value by, given a unit up/down request."
javax.swing.JScrollBar.getUnitIncrement(),for backwards compatibility with java.
javax.swing.JScrollBar.getValue(),returns the scrollbar's value.
javax.swing.JScrollBar.getValueIsAdjusting(),true if the scrollbar knob is being dragged.
javax.swing.JScrollBar.getVisibleAmount(),"returns the scrollbar's extent, aka its ""visibleamount""."
javax.swing.JScrollBar.paramString(),returns a string representation of this jscrollbar.
javax.swing.JScrollBar.removeAdjustmentListener(java.awt.event.AdjustmentListener),removes an adjustmentevent listener.
javax.swing.JScrollBar.setBlockIncrement(int),sets the blockincrement property.
javax.swing.JScrollBar.setEnabled(boolean),enables the component so that the knob position can be changed.
javax.swing.JScrollBar.setMaximum(int),sets the model's maximum property.
javax.swing.JScrollBar.setMinimum(int),sets the model's minimum property.
javax.swing.JScrollBar.setModel(javax.swing.BoundedRangeModel),"sets the model that handles the scrollbar's four fundamental properties: minimum, maximum, value, extent."
javax.swing.JScrollBar.setOrientation(int),set the scrollbar's orientation to either vertical or horizontal.
javax.swing.JScrollBar.setUI(javax.swing.plaf.ScrollBarUI),sets the l&f object that renders this component.
javax.swing.JScrollBar.setUnitIncrement(int),sets the unitincrement property.
javax.swing.JScrollBar.setValue(int),sets the scrollbar's value.
javax.swing.JScrollBar.setValueIsAdjusting(boolean),sets the model's valueisadjusting property.
"javax.swing.JScrollBar.setValues(int,int,int,int)","sets the four boundedrangemodel properties after forcing the arguments to obey the usual constraints:
minimum ≤ value ≤ value+extent ≤ maximum ."
javax.swing.JScrollBar.setVisibleAmount(int),set the model's extent property.
javax.swing.JScrollPane.createHorizontalScrollBar(),returns a jscrollpane.
javax.swing.JScrollPane.createVerticalScrollBar(),returns a jscrollpane.
javax.swing.JScrollPane.createViewport(),returns a new jviewport by default.
javax.swing.JScrollPane.getAccessibleContext(),gets the accessiblecontext associated with this jscrollpane.
javax.swing.JScrollPane.getColumnHeader(),returns the column header.
javax.swing.JScrollPane.getCorner(java.lang.String),returns the component at the specified corner.
javax.swing.JScrollPane.getHorizontalScrollBar(),returns the horizontal scroll bar that controls the viewport's horizontal view position.
javax.swing.JScrollPane.getHorizontalScrollBarPolicy(),returns the horizontal scroll bar policy value.
javax.swing.JScrollPane.getRowHeader(),returns the row header.
javax.swing.JScrollPane.getUI(),returns the look and feel (l&f) object that renders this component.
javax.swing.JScrollPane.getUIClassID(),returns the suffix used to construct the name of the l&f class used to render this component.
javax.swing.JScrollPane.getVerticalScrollBar(),returns the vertical scroll bar that controls the viewports vertical view position.
javax.swing.JScrollPane.getVerticalScrollBarPolicy(),returns the vertical scroll bar policy value.
javax.swing.JScrollPane.getViewport(),returns the current jviewport.
javax.swing.JScrollPane.getViewportBorder(),returns the border object that surrounds the viewport.
javax.swing.JScrollPane.getViewportBorderBounds(),returns the bounds of the viewport's border.
javax.swing.JScrollPane.isValidateRoot(),overridden to return true so that any calls to revalidate on any descendants of this jscrollpane will cause the entire tree beginning with this jscrollpane to be validated.
javax.swing.JScrollPane.isWheelScrollingEnabled(),indicates whether or not scrolling will take place in response to the mouse wheel.
javax.swing.JScrollPane.paramString(),returns a string representation of this jscrollpane.
javax.swing.JScrollPane.setColumnHeader(javax.swing.JViewport),"removes the old columnheader, if it exists; if the new columnheader isn't null, syncs the x coordinate of its viewposition with the viewport (if there is one) and then adds it to the scroll pane."
javax.swing.JScrollPane.setColumnHeaderView(java.awt.Component),"creates a column-header viewport if necessary, sets its view, and then adds the column-header viewport to the scrollpane."
javax.swing.JScrollPane.setComponentOrientation(java.awt.ComponentOrientation),sets the orientation for the vertical and horizontal scrollbars as determined by the componentorientation argument.
"javax.swing.JScrollPane.setCorner(java.lang.String,java.awt.Component)","adds a child that will appear in one of the scroll panes corners, if there's room."
javax.swing.JScrollPane.setHorizontalScrollBar(javax.swing.JScrollBar),adds the scrollbar that controls the viewport's horizontal view position to the scrollpane.
javax.swing.JScrollPane.setHorizontalScrollBarPolicy(int),determines when the horizontal scrollbar appears in the scrollpane.
javax.swing.JScrollPane.setLayout(java.awt.LayoutManager),sets the layout manager for this jscrollpane.
javax.swing.JScrollPane.setRowHeader(javax.swing.JViewport),"removes the old rowheader, if it exists; if the new rowheader isn't null, syncs the y coordinate of its viewposition with the viewport (if there is one) and then adds it to the scroll pane."
javax.swing.JScrollPane.setRowHeaderView(java.awt.Component),"creates a row-header viewport if necessary, sets its view and then adds the row-header viewport to the scrollpane."
javax.swing.JScrollPane.setUI(javax.swing.plaf.ScrollPaneUI),sets the scrollpaneui object that provides the look and feel (l&f) for this component.
javax.swing.JScrollPane.setVerticalScrollBar(javax.swing.JScrollBar),adds the scrollbar that controls the viewports vertical view position to the scrollpane.
javax.swing.JScrollPane.setVerticalScrollBarPolicy(int),determines when the vertical scrollbar appears in the scrollpane.
javax.swing.JScrollPane.setViewport(javax.swing.JViewport),"removes the old viewport (if there is one); forces the viewposition of the new viewport to be in the +x,+y quadrant; syncs up the row and column headers (if there are any) with the new viewport; and finally syncs the scrollbars and headers with the new viewport."
javax.swing.JScrollPane.setViewportBorder(javax.swing.border.Border),adds a border around the viewport.
javax.swing.JScrollPane.setViewportView(java.awt.Component),creates a viewport if necessary and then sets its view.
javax.swing.JScrollPane.setWheelScrollingEnabled(boolean),enables/disables scrolling in response to movement of the mouse wheel.
javax.swing.JScrollPane.updateUI(),replaces the current scrollpaneui object with a version from the current default look and feel.
javax.swing.JSeparator.getAccessibleContext(),gets the accessiblecontext associated with this jseparator.
javax.swing.JSeparator.getOrientation(),returns the orientation of this separator.
javax.swing.JSeparator.getUI(),returns the l&f object that renders this component.
javax.swing.JSeparator.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JSeparator.paramString(),returns a string representation of this jseparator.
javax.swing.JSeparator.setOrientation(int),sets the orientation of the separator.
javax.swing.JSeparator.setUI(javax.swing.plaf.SeparatorUI),sets the l&f object that renders this component.
javax.swing.JSeparator.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.JSlider.addChangeListener(javax.swing.event.ChangeListener),adds a changelistener to the slider.
javax.swing.JSlider.createChangeListener(),subclasses that want to handle changeevents from the model differently can override this to return an instance of a custom changelistener implementation.
javax.swing.JSlider.createStandardLabels(int),"creates a hashtable of numerical text labels, starting at the slider minimum, and using the increment specified."
"javax.swing.JSlider.createStandardLabels(int,int)","creates a hashtable of numerical text labels, starting at the starting point specified, and using the increment specified."
javax.swing.JSlider.fireStateChanged(),"send a changeevent, whose source is this jslider, to all changelisteners that have registered interest in changeevents."
javax.swing.JSlider.getAccessibleContext(),gets the accessiblecontext associated with this jslider.
javax.swing.JSlider.getChangeListeners(),returns an array of all the changelisteners added to this jslider with addchangelistener().
javax.swing.JSlider.getExtent(),"returns the ""extent"" from the boundedrangemodel."
javax.swing.JSlider.getInverted(),"returns true if the value-range shown for the slider is reversed,."
javax.swing.JSlider.getLabelTable(),returns the dictionary of what labels to draw at which values.
javax.swing.JSlider.getMajorTickSpacing(),this method returns the major tick spacing.
javax.swing.JSlider.getMaximum(),returns the maximum value supported by the slider from the boundedrangemodel.
javax.swing.JSlider.getMinimum(),returns the minimum value supported by the slider from the boundedrangemodel.
javax.swing.JSlider.getMinorTickSpacing(),this method returns the minor tick spacing.
javax.swing.JSlider.getModel(),"returns the boundedrangemodel that handles the slider's three fundamental properties: minimum, maximum, value."
javax.swing.JSlider.getOrientation(),return this slider's vertical or horizontal orientation.
javax.swing.JSlider.getPaintLabels(),tells if labels are to be painted.
javax.swing.JSlider.getPaintTicks(),tells if tick marks are to be painted.
javax.swing.JSlider.getPaintTrack(),tells if the track (area the slider slides in) is to be painted.
javax.swing.JSlider.getSnapToTicks(),returns true if the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob.
javax.swing.JSlider.getUI(),gets the ui object which implements the l&f for this component.
javax.swing.JSlider.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JSlider.getValue(),returns the slider's current value from the boundedrangemodel.
javax.swing.JSlider.getValueIsAdjusting(),returns the valueisadjusting property from the model.
"javax.swing.JSlider.imageUpdate(java.awt.Image,int,int,int,int,int)",repaints the component when the image has changed.
javax.swing.JSlider.paramString(),returns a string representation of this jslider.
javax.swing.JSlider.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from the slider.
javax.swing.JSlider.setExtent(int),"sets the size of the range ""covered"" by the knob."
javax.swing.JSlider.setFont(java.awt.Font),sets the font for this component.
javax.swing.JSlider.setInverted(boolean),specify true to reverse the value-range shown for the slider and false to put the value range in the normal order.
javax.swing.JSlider.setLabelTable(java.util.Dictionary),used to specify what label will be drawn at any given value.
javax.swing.JSlider.setMajorTickSpacing(int),this method sets the major tick spacing.
javax.swing.JSlider.setMaximum(int),sets the slider's maximum value to maximum.
javax.swing.JSlider.setMinimum(int),sets the slider's minimum value to minimum.
javax.swing.JSlider.setMinorTickSpacing(int),this method sets the minor tick spacing.
javax.swing.JSlider.setModel(javax.swing.BoundedRangeModel),"sets the boundedrangemodel that handles the slider's three fundamental properties: minimum, maximum, value."
javax.swing.JSlider.setOrientation(int),set the slider's orientation to either swingconstants.
javax.swing.JSlider.setPaintLabels(boolean),determines whether labels are painted on the slider.
javax.swing.JSlider.setPaintTicks(boolean),determines whether tick marks are painted on the slider.
javax.swing.JSlider.setPaintTrack(boolean),determines whether the track is painted on the slider.
javax.swing.JSlider.setSnapToTicks(boolean),specifying true makes the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob.
javax.swing.JSlider.setUI(javax.swing.plaf.SliderUI),sets the ui object which implements the l&f for this component.
javax.swing.JSlider.setValue(int),sets the slider's current value to n.
javax.swing.JSlider.setValueIsAdjusting(boolean),sets the model's valueisadjusting property.
javax.swing.JSlider.updateLabelUIs(),updates the uis for the labels in the label table by calling updateui on each label.
javax.swing.JSlider.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.JSpinner.addChangeListener(javax.swing.event.ChangeListener),adds a listener to the list that is notified each time a change to the model occurs.
javax.swing.JSpinner.commitEdit(),commits the currently edited value to the spinnermodel.
javax.swing.JSpinner.createEditor(javax.swing.SpinnerModel),this method is called by the constructors to create the jcomponent that displays the current value of the sequence.
javax.swing.JSpinner.fireStateChanged(),"sends a changeevent, whose source is this jspinner, to each changelistener."
javax.swing.JSpinner.getAccessibleContext(),gets the accessiblecontext for the jspinner.
javax.swing.JSpinner.getChangeListeners(),returns an array of all the changelisteners added to this jspinner with addchangelistener().
javax.swing.JSpinner.getEditor(),returns the component that displays and potentially changes the model's value.
javax.swing.JSpinner.getModel(),returns the spinnermodel that defines this spinners sequence of values.
javax.swing.JSpinner.getNextValue(),returns the object in the sequence that comes after the object returned by getvalue().
javax.swing.JSpinner.getPreviousValue(),returns the object in the sequence that comes before the object returned by getvalue().
javax.swing.JSpinner.getUI(),returns the look and feel (l&f) object that renders this component.
javax.swing.JSpinner.getUIClassID(),returns the suffix used to construct the name of the look and feel (l&f) class used to render this component.
javax.swing.JSpinner.getValue(),"returns the current value of the model, typically this value is displayed by the editor."
javax.swing.JSpinner.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from this spinner.
javax.swing.JSpinner.setEditor(javax.swing.JComponent),changes the jcomponent that displays the current value of the spinnermodel.
javax.swing.JSpinner.setModel(javax.swing.SpinnerModel),changes the model that represents the value of this spinner.
javax.swing.JSpinner.setUI(javax.swing.plaf.SpinnerUI),sets the look and feel (l&f) object that renders this component.
javax.swing.JSpinner.setValue(java.lang.Object),"changes current value of the model, typically this value is displayed by the editor."
javax.swing.JSpinner.updateUI(),resets the ui property with the value from the current look and feel.
javax.swing.JSpinner.DateEditor.getFormat(),returns the java.
javax.swing.JSpinner.DateEditor.getModel(),return our spinner ancestor's spinnerdatemodel.
"javax.swing.JSpinner.DefaultEditor.addLayoutComponent(java.lang.String,java.awt.Component)",this layoutmanager method does nothing.
javax.swing.JSpinner.DefaultEditor.commitEdit(),pushes the currently edited value to the spinnermodel.
javax.swing.JSpinner.DefaultEditor.dismiss(javax.swing.JSpinner),disconnect this editor from the specified jspinner.
"javax.swing.JSpinner.DefaultEditor.getBaseline(int,int)",returns the baseline.
javax.swing.JSpinner.DefaultEditor.getBaselineResizeBehavior(),returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.JSpinner.DefaultEditor.getSpinner(),returns the jspinner ancestor of this editor or null if none of the ancestors are a jspinner.
javax.swing.JSpinner.DefaultEditor.getTextField(),returns the jformattedtextfield child of this editor.
javax.swing.JSpinner.DefaultEditor.layoutContainer(java.awt.Container),resize the one (and only) child to completely fill the area within the parents insets.
javax.swing.JSpinner.DefaultEditor.minimumLayoutSize(java.awt.Container),returns the minimum size of first (and only) child plus the size of the parents insets.
javax.swing.JSpinner.DefaultEditor.preferredLayoutSize(java.awt.Container),returns the preferred size of first (and only) child plus the size of the parents insets.
javax.swing.JSpinner.DefaultEditor.propertyChange(java.beans.PropertyChangeEvent),called by the jformattedtextfield propertychangelistener.
javax.swing.JSpinner.DefaultEditor.removeLayoutComponent(java.awt.Component),this layoutmanager method does nothing.
javax.swing.JSpinner.DefaultEditor.stateChanged(javax.swing.event.ChangeEvent),this method is called when the spinner's model's state changes.
javax.swing.JSpinner.ListEditor.getModel(),return our spinner ancestor's spinnernumbermodel.
javax.swing.JSpinner.NumberEditor.getFormat(),returns the java.
javax.swing.JSpinner.NumberEditor.getModel(),return our spinner ancestor's spinnernumbermodel.
"javax.swing.JSplitPane.addImpl(java.awt.Component,java.lang.Object,int)",adds the specified component to this split pane.
javax.swing.JSplitPane.getAccessibleContext(),gets the accessiblecontext associated with this jsplitpane.
javax.swing.JSplitPane.getBottomComponent(),"returns the component below, or to the right of the divider."
javax.swing.JSplitPane.getDividerLocation(),returns the last value passed to setdividerlocation.
javax.swing.JSplitPane.getDividerSize(),returns the size of the divider.
javax.swing.JSplitPane.getLastDividerLocation(),returns the last location the divider was at.
javax.swing.JSplitPane.getLeftComponent(),returns the component to the left (or above) the divider.
javax.swing.JSplitPane.getMaximumDividerLocation(),returns the maximum location of the divider from the look and feel implementation.
javax.swing.JSplitPane.getMinimumDividerLocation(),returns the minimum location of the divider from the look and feel implementation.
javax.swing.JSplitPane.getOrientation(),returns the orientation.
javax.swing.JSplitPane.getResizeWeight(),returns the number that determines how extra space is distributed.
javax.swing.JSplitPane.getRightComponent(),returns the component to the right (or below) the divider.
javax.swing.JSplitPane.getTopComponent(),"returns the component above, or to the left of the divider."
javax.swing.JSplitPane.getUI(),returns the splitpaneui that is providing the current look and feel.
javax.swing.JSplitPane.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JSplitPane.isContinuousLayout(),gets the continuouslayout property.
javax.swing.JSplitPane.isOneTouchExpandable(),gets the onetouchexpandable property.
javax.swing.JSplitPane.isValidateRoot(),"returns true, so that calls to revalidate on any descendant of this jsplitpane will cause a request to be queued that will validate the jsplitpane and all its descendants."
javax.swing.JSplitPane.paintChildren(java.awt.Graphics),"subclassed to message the ui with finishedpaintingchildren after super has been messaged, as well as painting the border."
javax.swing.JSplitPane.paramString(),returns a string representation of this jsplitpane.
javax.swing.JSplitPane.remove(java.awt.Component),"removes the child component, component from the pane."
javax.swing.JSplitPane.remove(int),removes the component at the specified index.
javax.swing.JSplitPane.removeAll(),removes all the child components from the split pane.
javax.swing.JSplitPane.resetToPreferredSizes(),lays out the jsplitpane layout based on the preferred size of the children components.
javax.swing.JSplitPane.setBottomComponent(java.awt.Component),"sets the component below, or to the right of the divider."
javax.swing.JSplitPane.setContinuousLayout(boolean),"sets the value of the continuouslayout property, which must be true for the child components to be continuously redisplayed and laid out during user intervention."
javax.swing.JSplitPane.setDividerLocation(double),sets the divider location as a percentage of the jsplitpane's size.
javax.swing.JSplitPane.setDividerLocation(int),sets the location of the divider.
javax.swing.JSplitPane.setDividerSize(int),sets the size of the divider.
javax.swing.JSplitPane.setLastDividerLocation(int),sets the last location the divider was at to newlastlocation.
javax.swing.JSplitPane.setLeftComponent(java.awt.Component),sets the component to the left (or above) the divider.
javax.swing.JSplitPane.setOneTouchExpandable(boolean),"sets the value of the onetouchexpandable property, which must be true for the jsplitpane to provide a ui widget on the divider to quickly expand/collapse the divider."
javax.swing.JSplitPane.setOrientation(int),"sets the orientation, or how the splitter is divided."
javax.swing.JSplitPane.setResizeWeight(double),specifies how to distribute extra space when the size of the split pane changes.
javax.swing.JSplitPane.setRightComponent(java.awt.Component),sets the component to the right (or below) the divider.
javax.swing.JSplitPane.setTopComponent(java.awt.Component),"sets the component above, or to the left of the divider."
javax.swing.JSplitPane.setUI(javax.swing.plaf.SplitPaneUI),sets the l&f object that renders this component.
javax.swing.JSplitPane.updateUI(),notification from the uimanager that the l&f has changed.
javax.swing.JTabbedPane.add(java.awt.Component),adds a component with a tab title defaulting to the name of the component which is the result of calling component.
"javax.swing.JTabbedPane.add(java.lang.String,java.awt.Component)",adds a component with the specified tab title.
"javax.swing.JTabbedPane.add(java.awt.Component,int)",adds a component at the specified tab index with a tab title defaulting to the name of the component.
"javax.swing.JTabbedPane.add(java.awt.Component,java.lang.Object)",adds a component to the tabbed pane.
"javax.swing.JTabbedPane.add(java.awt.Component,java.lang.Object,int)",adds a component at the specified tab index.
javax.swing.JTabbedPane.addChangeListener(javax.swing.event.ChangeListener),adds a changelistener to this tabbedpane.
"javax.swing.JTabbedPane.addTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String)","adds a component and tip represented by a title and/or icon, either of which can be null."
"javax.swing.JTabbedPane.addTab(java.lang.String,javax.swing.Icon,java.awt.Component)","adds a component represented by a title and/or icon, either of which can be null."
"javax.swing.JTabbedPane.addTab(java.lang.String,java.awt.Component)",adds a component represented by a title and no icon.
javax.swing.JTabbedPane.createChangeListener(),subclasses that want to handle changeevents differently can override this to return a subclass of modellistener or another changelistener implementation.
javax.swing.JTabbedPane.fireStateChanged(),"sends a changeevent, with this jtabbedpane as the source, to each registered listener."
javax.swing.JTabbedPane.getAccessibleContext(),gets the accessiblecontext associated with this jtabbedpane.
javax.swing.JTabbedPane.getBackgroundAt(int),returns the tab background color at index.
javax.swing.JTabbedPane.getBoundsAt(int),returns the tab bounds at index.
javax.swing.JTabbedPane.getChangeListeners(),returns an array of all the changelisteners added to this jtabbedpane with addchangelistener.
javax.swing.JTabbedPane.getComponentAt(int),returns the component at index.
javax.swing.JTabbedPane.getDisabledIconAt(int),returns the tab disabled icon at index.
javax.swing.JTabbedPane.getDisplayedMnemonicIndexAt(int),"returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character."
javax.swing.JTabbedPane.getForegroundAt(int),returns the tab foreground color at index.
javax.swing.JTabbedPane.getIconAt(int),returns the tab icon at index.
javax.swing.JTabbedPane.getMnemonicAt(int),returns the keyboard mnemonic for accessing the specified tab.
javax.swing.JTabbedPane.getModel(),returns the model associated with this tabbedpane.
javax.swing.JTabbedPane.getSelectedComponent(),returns the currently selected component for this tabbedpane.
javax.swing.JTabbedPane.getSelectedIndex(),returns the currently selected index for this tabbedpane.
javax.swing.JTabbedPane.getTabComponentAt(int),returns the tab component at index.
javax.swing.JTabbedPane.getTabCount(),returns the number of tabs in this tabbedpane.
javax.swing.JTabbedPane.getTabLayoutPolicy(),returns the policy used by the tabbedpane to layout the tabs when all the tabs will not fit within a single run.
javax.swing.JTabbedPane.getTabPlacement(),returns the placement of the tabs for this tabbedpane.
javax.swing.JTabbedPane.getTabRunCount(),returns the number of tab runs currently used to display the tabs.
javax.swing.JTabbedPane.getTitleAt(int),returns the tab title at index.
javax.swing.JTabbedPane.getToolTipText(java.awt.event.MouseEvent),returns the tooltip text for the component determined by the mouse event location.
javax.swing.JTabbedPane.getToolTipTextAt(int),returns the tab tooltip text at index.
javax.swing.JTabbedPane.getUI(),returns the ui object which implements the l&f for this component.
javax.swing.JTabbedPane.getUIClassID(),returns the name of the ui class that implements the l&f for this component.
"javax.swing.JTabbedPane.indexAtLocation(int,int)",returns the tab index corresponding to the tab whose bounds intersect the specified location.
javax.swing.JTabbedPane.indexOfComponent(java.awt.Component),returns the index of the tab for the specified component.
javax.swing.JTabbedPane.indexOfTab(java.lang.String),"returns the first tab index with a given title, or -1 if no tab has this title."
javax.swing.JTabbedPane.indexOfTab(javax.swing.Icon),"returns the first tab index with a given icon, or -1 if no tab has this icon."
javax.swing.JTabbedPane.indexOfTabComponent(java.awt.Component),returns the index of the tab for the specified tab component.
"javax.swing.JTabbedPane.insertTab(java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String,int)","inserts a new tab for the given component, at the given index, represented by the given title and/or icon, either of which may be null."
javax.swing.JTabbedPane.isEnabledAt(int),returns whether or not the tab at index is currently enabled.
javax.swing.JTabbedPane.paramString(),returns a string representation of this jtabbedpane.
javax.swing.JTabbedPane.remove(java.awt.Component),removes the specified component from the jtabbedpane.
javax.swing.JTabbedPane.remove(int),removes the tab and component which corresponds to the specified index.
javax.swing.JTabbedPane.removeAll(),removes all the tabs and their corresponding components from the tabbedpane.
javax.swing.JTabbedPane.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from this tabbedpane.
javax.swing.JTabbedPane.removeTabAt(int),removes the tab at index.
"javax.swing.JTabbedPane.setBackgroundAt(int,java.awt.Color)","sets the background color at index to background which can be null, in which case the tab's background color will default to the background color of the tabbedpane."
"javax.swing.JTabbedPane.setComponentAt(int,java.awt.Component)",sets the component at index to component.
"javax.swing.JTabbedPane.setDisabledIconAt(int,javax.swing.Icon)",sets the disabled icon at index to icon which can be null.
"javax.swing.JTabbedPane.setDisplayedMnemonicIndexAt(int,int)",provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic.
"javax.swing.JTabbedPane.setEnabledAt(int,boolean)",sets whether or not the tab at index is enabled.
"javax.swing.JTabbedPane.setForegroundAt(int,java.awt.Color)","sets the foreground color at index to foreground which can be null, in which case the tab's foreground color will default to the foreground color of this tabbedpane."
"javax.swing.JTabbedPane.setIconAt(int,javax.swing.Icon)",sets the icon at index to icon which can be null.
"javax.swing.JTabbedPane.setMnemonicAt(int,int)",sets the keyboard mnemonic for accessing the specified tab.
javax.swing.JTabbedPane.setModel(javax.swing.SingleSelectionModel),sets the model to be used with this tabbedpane.
javax.swing.JTabbedPane.setSelectedComponent(java.awt.Component),sets the selected component for this tabbedpane.
javax.swing.JTabbedPane.setSelectedIndex(int),sets the selected index for this tabbedpane.
"javax.swing.JTabbedPane.setTabComponentAt(int,java.awt.Component)",sets the component that is responsible for rendering the title for the specified tab.
javax.swing.JTabbedPane.setTabLayoutPolicy(int),sets the policy which the tabbedpane will use in laying out the tabs when all the tabs will not fit within a single run.
javax.swing.JTabbedPane.setTabPlacement(int),sets the tab placement for this tabbedpane.
"javax.swing.JTabbedPane.setTitleAt(int,java.lang.String)",sets the title at index to title which can be null.
"javax.swing.JTabbedPane.setToolTipTextAt(int,java.lang.String)",sets the tooltip text at index to tooltiptext which can be null.
javax.swing.JTabbedPane.setUI(javax.swing.plaf.TabbedPaneUI),sets the ui object which implements the l&f for this component.
javax.swing.JTabbedPane.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.JTable.addColumn(javax.swing.table.TableColumn),appends acolumn to the end of the array of columns held by this jtable's column model.
"javax.swing.JTable.addColumnSelectionInterval(int,int)","adds the columns from index0 to index1, inclusive, to the current selection."
javax.swing.JTable.addNotify(),calls the configureenclosingscrollpane method.
"javax.swing.JTable.addRowSelectionInterval(int,int)","adds the rows from index0 to index1, inclusive, to the current selection."
"javax.swing.JTable.changeSelection(int,int,boolean,boolean)","updates the selection models of the table, depending on the state of the two flags: toggle and extend."
javax.swing.JTable.clearSelection(),deselects all selected columns and rows.
javax.swing.JTable.columnAdded(javax.swing.event.TableColumnModelEvent),invoked when a column is added to the table column model.
javax.swing.JTable.columnAtPoint(java.awt.Point),"returns the index of the column that point lies in, or -1 if the result is not in the range [0, getcolumncount()-1]."
javax.swing.JTable.columnMarginChanged(javax.swing.event.ChangeEvent),invoked when a column is moved due to a margin change.
javax.swing.JTable.columnMoved(javax.swing.event.TableColumnModelEvent),invoked when a column is repositioned.
javax.swing.JTable.columnRemoved(javax.swing.event.TableColumnModelEvent),invoked when a column is removed from the table column model.
javax.swing.JTable.columnSelectionChanged(javax.swing.event.ListSelectionEvent),invoked when the selection model of the tablecolumnmodel is changed.
javax.swing.JTable.configureEnclosingScrollPane(),"if this jtable is the viewportview of an enclosing jscrollpane (the usual situation), configure this scrollpane by, amongst other things, installing the table's tableheader as the columnheaderview of the scroll pane."
javax.swing.JTable.convertColumnIndexToModel(int),maps the index of the column in the view at viewcolumnindex to the index of the column in the table model.
javax.swing.JTable.convertColumnIndexToView(int),maps the index of the column in the table model at modelcolumnindex to the index of the column in the view.
javax.swing.JTable.convertRowIndexToModel(int),maps the index of the row in terms of the view to the underlying tablemodel.
javax.swing.JTable.convertRowIndexToView(int),maps the index of the row in terms of the tablemodel to the view.
javax.swing.JTable.createDefaultColumnModel(),"returns the default column model object, which is a defaulttablecolumnmodel."
javax.swing.JTable.createDefaultColumnsFromModel(),creates default columns for the table from the data model using the getcolumncount method defined in the tablemodel interface.
javax.swing.JTable.createDefaultDataModel(),"returns the default table model object, which is a defaulttablemodel."
javax.swing.JTable.createDefaultEditors(),"creates default cell editors for objects, numbers, and boolean values."
javax.swing.JTable.createDefaultRenderers(),"creates default cell renderers for objects, numbers, doubles, dates, booleans, and icons."
javax.swing.JTable.createDefaultSelectionModel(),"returns the default selection model object, which is a defaultlistselectionmodel."
javax.swing.JTable.createDefaultTableHeader(),"returns the default table header object, which is a jtableheader."
javax.swing.JTable.doLayout(),causes this table to lay out its rows and columns.
"javax.swing.JTable.editCellAt(int,int)","programmatically starts editing the cell at row and column, if those indices are in the valid range, and the cell at those indices is editable."
"javax.swing.JTable.editCellAt(int,int,java.util.EventObject)","programmatically starts editing the cell at row and column, if those indices are in the valid range, and the cell at those indices is editable."
javax.swing.JTable.editingCanceled(javax.swing.event.ChangeEvent),invoked when editing is canceled.
javax.swing.JTable.editingStopped(javax.swing.event.ChangeEvent),invoked when editing is finished.
javax.swing.JTable.getAccessibleContext(),gets the accessiblecontext associated with this jtable.
javax.swing.JTable.getAutoCreateColumnsFromModel(),determines whether the table will create default columns from the model.
javax.swing.JTable.getAutoCreateRowSorter(),"returns true if whenever the model changes, a new rowsorter should be created and installed as the table's sorter; otherwise, returns false."
javax.swing.JTable.getAutoResizeMode(),returns the auto resize mode of the table.
javax.swing.JTable.getCellEditor(),"returns the active cell editor, which is null if the table is not currently editing."
"javax.swing.JTable.getCellEditor(int,int)",returns an appropriate editor for the cell specified by row and column.
"javax.swing.JTable.getCellRect(int,int,boolean)",returns a rectangle for the cell that lies at the intersection of row and column.
"javax.swing.JTable.getCellRenderer(int,int)",returns an appropriate renderer for the cell specified by this row and column.
javax.swing.JTable.getCellSelectionEnabled(),returns true if both row and column selection models are enabled.
javax.swing.JTable.getColumn(java.lang.Object),"returns the tablecolumn object for the column in the table whose identifier is equal to identifier, when compared using equals."
javax.swing.JTable.getColumnClass(int),returns the type of the column appearing in the view at column position column.
javax.swing.JTable.getColumnCount(),returns the number of columns in the column model.
javax.swing.JTable.getColumnModel(),returns the tablecolumnmodel that contains all column information of this table.
javax.swing.JTable.getColumnName(int),returns the name of the column appearing in the view at column position column.
javax.swing.JTable.getColumnSelectionAllowed(),returns true if columns can be selected.
javax.swing.JTable.getDefaultEditor(java.lang.Class<?>),returns the editor to be used when no editor has been set in a tablecolumn.
javax.swing.JTable.getDefaultRenderer(java.lang.Class<?>),returns the cell renderer to be used when no renderer has been set in a tablecolumn.
javax.swing.JTable.getDragEnabled(),returns whether or not automatic drag handling is enabled.
javax.swing.JTable.getDropLocation(),"returns the location that this component should visually indicate as the drop location during a dnd operation over the component, or null if no location is to currently be shown."
javax.swing.JTable.getDropMode(),returns the drop mode for this component.
javax.swing.JTable.getEditingColumn(),returns the index of the column that contains the cell currently being edited.
javax.swing.JTable.getEditingRow(),returns the index of the row that contains the cell currently being edited.
javax.swing.JTable.getEditorComponent(),returns the component that is handling the editing session.
javax.swing.JTable.getFillsViewportHeight(),returns whether or not this table is always made large enough to fill the height of an enclosing viewport.
javax.swing.JTable.getGridColor(),returns the color used to draw grid lines.
javax.swing.JTable.getIntercellSpacing(),returns the horizontal and vertical space between cells.
javax.swing.JTable.getModel(),returns the tablemodel that provides the data displayed by this jtable.
javax.swing.JTable.getPreferredScrollableViewportSize(),returns the preferred size of the viewport for this table.
"javax.swing.JTable.getPrintable(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat)",return a printable for use in printing this jtable.
javax.swing.JTable.getRowCount(),"returns the number of rows that can be shown in the jtable, given unlimited space."
javax.swing.JTable.getRowHeight(),"returns the height of a table row, in pixels."
javax.swing.JTable.getRowHeight(int),"returns the height, in pixels, of the cells in row."
javax.swing.JTable.getRowMargin(),"gets the amount of empty space, in pixels, between cells."
javax.swing.JTable.getRowSelectionAllowed(),returns true if rows can be selected.
javax.swing.JTable.getRowSorter(),returns the object responsible for sorting.
"javax.swing.JTable.getScrollableBlockIncrement(java.awt.Rectangle,int,int)",returns visiblerect.
javax.swing.JTable.getScrollableTracksViewportHeight(),"returns false to indicate that the height of the viewport does not determine the height of the table, unless getfillsviewportheight is true and the preferred height of the table is smaller than the viewport's height."
javax.swing.JTable.getScrollableTracksViewportWidth(),"returns false if autoresizemode is set to auto_resize_off, which indicates that the width of the viewport does not determine the width of the table."
"javax.swing.JTable.getScrollableUnitIncrement(java.awt.Rectangle,int,int)",returns the scroll increment (in pixels) that completely exposes one new row or column (depending on the orientation).
javax.swing.JTable.getSelectedColumn(),"returns the index of the first selected column, -1 if no column is selected."
javax.swing.JTable.getSelectedColumnCount(),returns the number of selected columns.
javax.swing.JTable.getSelectedColumns(),returns the indices of all selected columns.
javax.swing.JTable.getSelectedRow(),"returns the index of the first selected row, -1 if no row is selected."
javax.swing.JTable.getSelectedRowCount(),returns the number of selected rows.
javax.swing.JTable.getSelectedRows(),returns the indices of all selected rows.
javax.swing.JTable.getSelectionBackground(),returns the background color for selected cells.
javax.swing.JTable.getSelectionForeground(),returns the foreground color for selected cells.
javax.swing.JTable.getSelectionModel(),returns the listselectionmodel that is used to maintain row selection state.
javax.swing.JTable.getShowHorizontalLines(),"returns true if the table draws horizontal lines between cells, false if it doesn't."
javax.swing.JTable.getShowVerticalLines(),"returns true if the table draws vertical lines between cells, false if it doesn't."
javax.swing.JTable.getSurrendersFocusOnKeystroke(),returns true if the editor should get the focus when keystrokes cause the editor to be activated.
javax.swing.JTable.getTableHeader(),returns the tableheader used by this jtable.
javax.swing.JTable.getUI(),returns the l&f object that renders this component.
javax.swing.JTable.getUIClassID(),returns the suffix used to construct the name of the l&f class used to render this component.
javax.swing.JTable.getUpdateSelectionOnSort(),returns true if the selection should be updated after sorting.
"javax.swing.JTable.getValueAt(int,int)",returns the cell value at row and column.
javax.swing.JTable.initializeLocalVars(),initializes table properties to their default values.
"javax.swing.JTable.isCellEditable(int,int)",returns true if the cell at row and column is editable.
"javax.swing.JTable.isCellSelected(int,int)",returns true if the specified indices are in the valid range of rows and columns and the cell at the specified position is selected.
javax.swing.JTable.isColumnSelected(int),"returns true if the specified index is in the valid range of columns, and the column at that index is selected."
javax.swing.JTable.isEditing(),returns true if a cell is being edited.
javax.swing.JTable.isRowSelected(int),"returns true if the specified index is in the valid range of rows, and the row at that index is selected."
"javax.swing.JTable.moveColumn(int,int)",moves the column column to the position currently occupied by the column targetcolumn in the view.
javax.swing.JTable.paramString(),returns a string representation of this table.
"javax.swing.JTable.prepareEditor(javax.swing.table.TableCellEditor,int,int)","prepares the editor by querying the data model for the value and selection state of the cell at row, column."
"javax.swing.JTable.prepareRenderer(javax.swing.table.TableCellRenderer,int,int)","prepares the renderer by querying the data model for the value and selection state of the cell at row, column."
javax.swing.JTable.print(),"a convenience method that displays a printing dialog, and then prints this jtable in mode printmode."
javax.swing.JTable.print(javax.swing.JTable.PrintMode),"a convenience method that displays a printing dialog, and then prints this jtable in the given printing mode, with no header or footer text."
"javax.swing.JTable.print(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat)","a convenience method that displays a printing dialog, and then prints this jtable in the given printing mode, with the specified header and footer text."
"javax.swing.JTable.print(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat,boolean,javax.print.attribute.PrintRequestAttributeSet,boolean)","prints this table, as specified by the fully featured print method, with the default printer specified as the print service."
"javax.swing.JTable.print(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat,boolean,javax.print.attribute.PrintRequestAttributeSet,boolean,javax.print.PrintService)",prints this jtable.
javax.swing.JTable.removeColumn(javax.swing.table.TableColumn),removes acolumn from this jtable's array of columns.
"javax.swing.JTable.removeColumnSelectionInterval(int,int)","deselects the columns from index0 to index1, inclusive."
javax.swing.JTable.removeEditor(),discards the editor object and frees the real estate it used for cell rendering.
javax.swing.JTable.removeNotify(),calls the unconfigureenclosingscrollpane method.
"javax.swing.JTable.removeRowSelectionInterval(int,int)","deselects the rows from index0 to index1, inclusive."
javax.swing.JTable.rowAtPoint(java.awt.Point),"returns the index of the row that point lies in, or -1 if the result is not in the range [0, getrowcount()-1]."
javax.swing.JTable.selectAll(),"selects all rows, columns, and cells in the table."
javax.swing.JTable.setAutoCreateColumnsFromModel(boolean),sets this table's autocreatecolumnsfrommodel flag.
javax.swing.JTable.setAutoCreateRowSorter(boolean),specifies whether a rowsorter should be created for the table whenever its model changes.
javax.swing.JTable.setAutoResizeMode(int),sets the table's auto resize mode when the table is resized.
javax.swing.JTable.setCellEditor(javax.swing.table.TableCellEditor),sets the active cell editor.
javax.swing.JTable.setCellSelectionEnabled(boolean),sets whether this table allows both a column selection and a row selection to exist simultaneously.
javax.swing.JTable.setColumnModel(javax.swing.table.TableColumnModel),sets the column model for this table to newmodel and registers for listener notifications from the new column model.
javax.swing.JTable.setColumnSelectionAllowed(boolean),sets whether the columns in this model can be selected.
"javax.swing.JTable.setColumnSelectionInterval(int,int)","selects the columns from index0 to index1, inclusive."
"javax.swing.JTable.setDefaultEditor(java.lang.Class<?>,javax.swing.table.TableCellEditor)",sets a default cell editor to be used if no editor has been set in a tablecolumn.
"javax.swing.JTable.setDefaultRenderer(java.lang.Class<?>,javax.swing.table.TableCellRenderer)",sets a default cell renderer to be used if no renderer has been set in a tablecolumn.
javax.swing.JTable.setDragEnabled(boolean),turns on or off automatic drag handling.
javax.swing.JTable.setDropMode(javax.swing.DropMode),sets the drop mode for this component.
javax.swing.JTable.setEditingColumn(int),sets the editingcolumn variable.
javax.swing.JTable.setEditingRow(int),sets the editingrow variable.
javax.swing.JTable.setFillsViewportHeight(boolean),sets whether or not this table is always made large enough to fill the height of an enclosing viewport.
javax.swing.JTable.setGridColor(java.awt.Color),sets the color used to draw grid lines to gridcolor and redisplays.
javax.swing.JTable.setIntercellSpacing(java.awt.Dimension),sets the rowmargin and the columnmargin -- the height and width of the space between cells -- to intercellspacing.
javax.swing.JTable.setModel(javax.swing.table.TableModel),sets the data model for this table to newmodel and registers with it for listener notifications from the new data model.
javax.swing.JTable.setPreferredScrollableViewportSize(java.awt.Dimension),sets the preferred size of the viewport for this table.
javax.swing.JTable.setRowHeight(int),"sets the height, in pixels, of all cells to rowheight, revalidates, and repaints."
"javax.swing.JTable.setRowHeight(int,int)","sets the height for row to rowheight, revalidates, and repaints."
javax.swing.JTable.setRowMargin(int),sets the amount of empty space between cells in adjacent rows.
javax.swing.JTable.setRowSelectionAllowed(boolean),sets whether the rows in this model can be selected.
"javax.swing.JTable.setRowSelectionInterval(int,int)","selects the rows from index0 to index1, inclusive."
javax.swing.JTable.setRowSorter(javax.swing.RowSorter<? extends javax.swing.table.TableModel>),sets the rowsorter.
javax.swing.JTable.setSelectionBackground(java.awt.Color),sets the background color for selected cells.
javax.swing.JTable.setSelectionForeground(java.awt.Color),sets the foreground color for selected cells.
javax.swing.JTable.setSelectionMode(int),"sets the table's selection mode to allow only single selections, a single contiguous interval, or multiple intervals."
javax.swing.JTable.setSelectionModel(javax.swing.ListSelectionModel),sets the row selection model for this table to newmodel and registers for listener notifications from the new selection model.
javax.swing.JTable.setShowGrid(boolean),sets whether the table draws grid lines around cells.
javax.swing.JTable.setShowHorizontalLines(boolean),sets whether the table draws horizontal lines between cells.
javax.swing.JTable.setShowVerticalLines(boolean),sets whether the table draws vertical lines between cells.
javax.swing.JTable.setSurrendersFocusOnKeystroke(boolean),sets whether editors in this jtable get the keyboard focus when an editor is activated as a result of the jtable forwarding keyboard events for a cell.
javax.swing.JTable.setTableHeader(javax.swing.table.JTableHeader),sets the tableheader working with this jtable to newheader.
javax.swing.JTable.setUI(javax.swing.plaf.TableUI),sets the l&f object that renders this component and repaints.
javax.swing.JTable.setUpdateSelectionOnSort(boolean),specifies whether the selection should be updated after sorting.
"javax.swing.JTable.setValueAt(java.lang.Object,int,int)",sets the value for the cell in the table model at row and column.
javax.swing.JTable.sizeColumnsToFit(int),obsolete as of java 2 platform v1.
javax.swing.JTable.sorterChanged(javax.swing.event.RowSorterEvent),rowsorterlistener notification that the rowsorter has changed in some way.
javax.swing.JTable.tableChanged(javax.swing.event.TableModelEvent),invoked when this table's tablemodel generates a tablemodelevent.
javax.swing.JTable.unconfigureEnclosingScrollPane(),reverses the effect of configureenclosingscrollpane by replacing the columnheaderview of the enclosing scroll pane with null.
javax.swing.JTable.updateUI(),notification from the uimanager that the l&f has changed.
javax.swing.JTable.valueChanged(javax.swing.event.ListSelectionEvent),invoked when the row selection changes -- repaints to show the new selection.
javax.swing.JTable.DropLocation.getColumn(),returns the column index where a dropped item should be placed in the table.
javax.swing.JTable.DropLocation.getRow(),returns the row index where a dropped item should be placed in the table.
javax.swing.JTable.DropLocation.isInsertColumn(),returns whether or not this location represents an insert of a column.
javax.swing.JTable.DropLocation.isInsertRow(),returns whether or not this location represents an insert of a row.
javax.swing.JTable.DropLocation.toString(),returns a string representation of this drop location.
javax.swing.JTextArea.append(java.lang.String),appends the given text to the end of the document.
javax.swing.JTextArea.createDefaultModel(),creates the default implementation of the model to be used at construction if one isn't explicitly given.
javax.swing.JTextArea.getAccessibleContext(),gets the accessiblecontext associated with this jtextarea.
javax.swing.JTextArea.getColumns(),returns the number of columns in the textarea.
javax.swing.JTextArea.getColumnWidth(),gets column width.
javax.swing.JTextArea.getLineCount(),determines the number of lines contained in the area.
javax.swing.JTextArea.getLineEndOffset(int),determines the offset of the end of the given line.
javax.swing.JTextArea.getLineOfOffset(int),translates an offset into the components text to a line number.
javax.swing.JTextArea.getLineStartOffset(int),determines the offset of the start of the given line.
javax.swing.JTextArea.getLineWrap(),gets the line-wrapping policy of the text area.
javax.swing.JTextArea.getPreferredScrollableViewportSize(),returns the preferred size of the viewport if this component is embedded in a jscrollpane.
javax.swing.JTextArea.getPreferredSize(),returns the preferred size of the textarea.
javax.swing.JTextArea.getRowHeight(),defines the meaning of the height of a row.
javax.swing.JTextArea.getRows(),returns the number of rows in the textarea.
javax.swing.JTextArea.getScrollableTracksViewportWidth(),returns true if a viewport should always force the width of this scrollable to match the width of the viewport.
"javax.swing.JTextArea.getScrollableUnitIncrement(java.awt.Rectangle,int,int)","components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation."
javax.swing.JTextArea.getTabSize(),gets the number of characters used to expand tabs.
javax.swing.JTextArea.getUIClassID(),returns the class id for the ui.
javax.swing.JTextArea.getWrapStyleWord(),gets the style of wrapping used if the text area is wrapping lines.
"javax.swing.JTextArea.insert(java.lang.String,int)",inserts the specified text at the specified position.
javax.swing.JTextArea.paramString(),returns a string representation of this jtextarea.
"javax.swing.JTextArea.replaceRange(java.lang.String,int,int)",replaces text from the indicated start to end position with the new text specified.
javax.swing.JTextArea.setColumns(int),sets the number of columns for this textarea.
javax.swing.JTextArea.setFont(java.awt.Font),sets the current font.
javax.swing.JTextArea.setLineWrap(boolean),sets the line-wrapping policy of the text area.
javax.swing.JTextArea.setRows(int),sets the number of rows for this textarea.
javax.swing.JTextArea.setTabSize(int),sets the number of characters to expand tabs to.
javax.swing.JTextArea.setWrapStyleWord(boolean),sets the style of wrapping used if the text area is wrapping lines.
"javax.swing.JTextField.actionPropertyChanged(javax.swing.Action,java.lang.String)",updates the textfield's state in response to property changes in associated action.
javax.swing.JTextField.addActionListener(java.awt.event.ActionListener),adds the specified action listener to receive action events from this textfield.
javax.swing.JTextField.configurePropertiesFromAction(javax.swing.Action),sets the properties on this textfield to match those in the specified action.
javax.swing.JTextField.createActionPropertyChangeListener(javax.swing.Action),creates and returns a propertychangelistener that is responsible for listening for changes from the specified action and updating the appropriate properties.
javax.swing.JTextField.createDefaultModel(),creates the default implementation of the model to be used at construction if one isn't explicitly given.
javax.swing.JTextField.fireActionPerformed(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JTextField.getAccessibleContext(),gets the accessiblecontext associated with this jtextfield.
javax.swing.JTextField.getAction(),"returns the currently set action for this actionevent source, or null if no action is set."
javax.swing.JTextField.getActionListeners(),returns an array of all the actionlisteners added to this jtextfield with addactionlistener().
javax.swing.JTextField.getActions(),fetches the command list for the editor.
javax.swing.JTextField.getColumns(),returns the number of columns in this textfield.
javax.swing.JTextField.getColumnWidth(),returns the column width.
javax.swing.JTextField.getHorizontalAlignment(),returns the horizontal alignment of the text.
javax.swing.JTextField.getHorizontalVisibility(),gets the visibility of the text field.
javax.swing.JTextField.getPreferredSize(),returns the preferred size dimensions needed for this textfield.
javax.swing.JTextField.getScrollOffset(),"gets the scroll offset, in pixels."
javax.swing.JTextField.getUIClassID(),gets the class id for a ui.
javax.swing.JTextField.isValidateRoot(),"calls to revalidate that come from within the textfield itself will be handled by validating the textfield, unless the textfield is contained within a jviewport, in which case this returns false."
javax.swing.JTextField.paramString(),returns a string representation of this jtextfield.
javax.swing.JTextField.postActionEvent(),processes action events occurring on this textfield by dispatching them to any registered actionlistener objects.
javax.swing.JTextField.removeActionListener(java.awt.event.ActionListener),removes the specified action listener so that it no longer receives action events from this textfield.
javax.swing.JTextField.scrollRectToVisible(java.awt.Rectangle),scrolls the field left or right.
javax.swing.JTextField.setAction(javax.swing.Action),sets the action for the actionevent source.
javax.swing.JTextField.setActionCommand(java.lang.String),sets the command string used for action events.
javax.swing.JTextField.setColumns(int),"sets the number of columns in this textfield, and then invalidate the layout."
javax.swing.JTextField.setDocument(javax.swing.text.Document),associates the editor with a text document.
javax.swing.JTextField.setFont(java.awt.Font),sets the current font.
javax.swing.JTextField.setHorizontalAlignment(int),sets the horizontal alignment of the text.
javax.swing.JTextField.setScrollOffset(int),"sets the scroll offset, in pixels."
"javax.swing.JTextPane.addStyle(java.lang.String,javax.swing.text.Style)",adds a new style into the logical style hierarchy.
javax.swing.JTextPane.createDefaultEditorKit(),creates the editorkit to use by default.
javax.swing.JTextPane.getCharacterAttributes(),"fetches the character attributes in effect at the current location of the caret, or null."
javax.swing.JTextPane.getInputAttributes(),gets the input attributes for the pane.
javax.swing.JTextPane.getLogicalStyle(),"fetches the logical style assigned to the paragraph represented by the current position of the caret, or null."
javax.swing.JTextPane.getParagraphAttributes(),"fetches the current paragraph attributes in effect at the location of the caret, or null if none."
javax.swing.JTextPane.getStyle(java.lang.String),fetches a named non-null style previously added.
javax.swing.JTextPane.getStyledDocument(),fetches the model associated with the editor.
javax.swing.JTextPane.getStyledEditorKit(),gets the editor kit.
javax.swing.JTextPane.getUIClassID(),returns the class id for the ui.
javax.swing.JTextPane.insertComponent(java.awt.Component),inserts a component into the document as a replacement for the currently selected content.
javax.swing.JTextPane.insertIcon(javax.swing.Icon),inserts an icon into the document as a replacement for the currently selected content.
javax.swing.JTextPane.paramString(),returns a string representation of this jtextpane.
javax.swing.JTextPane.removeStyle(java.lang.String),removes a named non-null style previously added to the document.
javax.swing.JTextPane.replaceSelection(java.lang.String),replaces the currently selected content with new content represented by the given string.
"javax.swing.JTextPane.setCharacterAttributes(javax.swing.text.AttributeSet,boolean)",applies the given attributes to character content.
javax.swing.JTextPane.setDocument(javax.swing.text.Document),associates the editor with a text document.
javax.swing.JTextPane.setEditorKit(javax.swing.text.EditorKit),sets the currently installed kit for handling content.
javax.swing.JTextPane.setLogicalStyle(javax.swing.text.Style),sets the logical style to use for the paragraph at the current caret position.
"javax.swing.JTextPane.setParagraphAttributes(javax.swing.text.AttributeSet,boolean)",applies the given attributes to paragraphs.
javax.swing.JTextPane.setStyledDocument(javax.swing.text.StyledDocument),associates the editor with a text document.
javax.swing.JToggleButton.getAccessibleContext(),gets the accessiblecontext associated with this jtogglebutton.
javax.swing.JToggleButton.getUIClassID(),returns a string that specifies the name of the l&f class that renders this component.
javax.swing.JToggleButton.paramString(),returns a string representation of this jtogglebutton.
javax.swing.JToggleButton.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.JToggleButton.ToggleButtonModel.isSelected(),checks if the button is selected.
javax.swing.JToggleButton.ToggleButtonModel.setPressed(boolean),sets the pressed state of the toggle button.
javax.swing.JToggleButton.ToggleButtonModel.setSelected(boolean),sets the selected state of the button.
javax.swing.JToolBar.add(javax.swing.Action),adds a new jbutton which dispatches the action.
"javax.swing.JToolBar.addImpl(java.awt.Component,java.lang.Object,int)","if a jbutton is being added, it is initially set to be disabled."
javax.swing.JToolBar.addSeparator(),appends a separator of default size to the end of the tool bar.
javax.swing.JToolBar.addSeparator(java.awt.Dimension),appends a separator of a specified size to the end of the tool bar.
javax.swing.JToolBar.createActionChangeListener(javax.swing.JButton),"returns a properly configured propertychangelistener which updates the control as changes to the action occur, or null if the default property change listener for the control is desired."
javax.swing.JToolBar.createActionComponent(javax.swing.Action),factory method which creates the jbutton for actions added to the jtoolbar.
javax.swing.JToolBar.getAccessibleContext(),gets the accessiblecontext associated with this jtoolbar.
javax.swing.JToolBar.getComponentAtIndex(int),returns the component at the specified index.
javax.swing.JToolBar.getComponentIndex(java.awt.Component),returns the index of the specified component.
javax.swing.JToolBar.getMargin(),returns the margin between the tool bar's border and its buttons.
javax.swing.JToolBar.getOrientation(),returns the current orientation of the tool bar.
javax.swing.JToolBar.getUI(),returns the tool bar's current ui.
javax.swing.JToolBar.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JToolBar.isBorderPainted(),gets the borderpainted property.
javax.swing.JToolBar.isFloatable(),gets the floatable property.
javax.swing.JToolBar.isRollover(),returns the rollover state.
javax.swing.JToolBar.paintBorder(java.awt.Graphics),paints the tool bar's border if the borderpainted property is true.
javax.swing.JToolBar.paramString(),returns a string representation of this jtoolbar.
javax.swing.JToolBar.setBorderPainted(boolean),"sets the borderpainted property, which is true if the border should be painted."
javax.swing.JToolBar.setFloatable(boolean),"sets the floatable property, which must be true for the user to move the tool bar."
javax.swing.JToolBar.setMargin(java.awt.Insets),sets the margin between the tool bar's border and its buttons.
javax.swing.JToolBar.setOrientation(int),sets the orientation of the tool bar.
javax.swing.JToolBar.setRollover(boolean),sets the rollover state of this toolbar.
javax.swing.JToolBar.setUI(javax.swing.plaf.ToolBarUI),sets the l&f object that renders this component.
javax.swing.JToolBar.updateUI(),notification from the uifactory that the l&f has changed.
javax.swing.JToolBar.Separator.getMaximumSize(),returns the maximum size for the separator.
javax.swing.JToolBar.Separator.getMinimumSize(),returns the minimum size for the separator.
javax.swing.JToolBar.Separator.getPreferredSize(),returns the preferred size for the separator.
javax.swing.JToolBar.Separator.getSeparatorSize(),returns the size of the separator.
javax.swing.JToolBar.Separator.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JToolBar.Separator.setSeparatorSize(java.awt.Dimension),sets the size of the separator.
javax.swing.JToolTip.getAccessibleContext(),gets the accessiblecontext associated with this jtooltip.
javax.swing.JToolTip.getComponent(),returns the component the tooltip applies to.
javax.swing.JToolTip.getTipText(),returns the text that is shown when the tool tip is displayed.
javax.swing.JToolTip.getUI(),returns the l&f object that renders this component.
javax.swing.JToolTip.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JToolTip.paramString(),returns a string representation of this jtooltip.
javax.swing.JToolTip.setComponent(javax.swing.JComponent),specifies the component that the tooltip describes.
javax.swing.JToolTip.setTipText(java.lang.String),sets the text to show when the tool tip is displayed.
javax.swing.JToolTip.updateUI(),resets the ui property to a value from the current look and feel.
"javax.swing.JTree.addSelectionInterval(int,int)",adds the specified rows (inclusive) to the selection.
javax.swing.JTree.addSelectionPath(javax.swing.tree.TreePath),adds the node identified by the specified treepath to the current selection.
javax.swing.JTree.addSelectionPaths(javax.swing.tree.TreePath[]),adds each path in the array of paths to the current selection.
javax.swing.JTree.addSelectionRow(int),adds the path at the specified row to the current selection.
javax.swing.JTree.addSelectionRows(int[]),adds the paths at each of the specified rows to the current selection.
javax.swing.JTree.addTreeExpansionListener(javax.swing.event.TreeExpansionListener),adds a listener for treeexpansion events.
javax.swing.JTree.addTreeSelectionListener(javax.swing.event.TreeSelectionListener),adds a listener for treeselection events.
javax.swing.JTree.addTreeWillExpandListener(javax.swing.event.TreeWillExpandListener),adds a listener for treewillexpand events.
javax.swing.JTree.cancelEditing(),cancels the current editing session.
javax.swing.JTree.clearSelection(),clears the selection.
javax.swing.JTree.clearToggledPaths(),clears the cache of toggled tree paths.
javax.swing.JTree.collapsePath(javax.swing.tree.TreePath),ensures that the node identified by the specified path is collapsed and viewable.
javax.swing.JTree.collapseRow(int),ensures that the node in the specified row is collapsed.
"javax.swing.JTree.convertValueToText(java.lang.Object,boolean,boolean,boolean,int,boolean)",called by the renderers to convert the specified value to text.
javax.swing.JTree.createTreeModel(java.lang.Object),returns a treemodel wrapping the specified object.
javax.swing.JTree.createTreeModelListener(),creates and returns an instance of treemodelhandler.
javax.swing.JTree.expandPath(javax.swing.tree.TreePath),ensures that the node identified by the specified path is expanded and viewable.
javax.swing.JTree.expandRow(int),ensures that the node in the specified row is expanded and viewable.
javax.swing.JTree.fireTreeCollapsed(javax.swing.tree.TreePath),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JTree.fireTreeExpanded(javax.swing.tree.TreePath),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JTree.fireTreeWillCollapse(javax.swing.tree.TreePath),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JTree.fireTreeWillExpand(javax.swing.tree.TreePath),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JTree.fireValueChanged(javax.swing.event.TreeSelectionEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.JTree.getAccessibleContext(),gets the accessiblecontext associated with this jtree.
javax.swing.JTree.getAnchorSelectionPath(),returns the path identified as the anchor.
javax.swing.JTree.getCellEditor(),returns the editor used to edit entries in the tree.
javax.swing.JTree.getCellRenderer(),returns the current treecellrenderer that is rendering each cell.
"javax.swing.JTree.getClosestPathForLocation(int,int)","returns the path to the node that is closest to x,y."
"javax.swing.JTree.getClosestRowForLocation(int,int)","returns the row to the node that is closest to x,y."
javax.swing.JTree.getDefaultTreeModel(),creates and returns a sample treemodel.
javax.swing.JTree.getDescendantToggledPaths(javax.swing.tree.TreePath),returns an enumeration of treepaths that have been expanded that are descendants of parent.
javax.swing.JTree.getDragEnabled(),returns whether or not automatic drag handling is enabled.
javax.swing.JTree.getDropLocation(),"returns the location that this component should visually indicate as the drop location during a dnd operation over the component, or null if no location is to currently be shown."
javax.swing.JTree.getDropMode(),returns the drop mode for this component.
javax.swing.JTree.getEditingPath(),returns the path to the element that is currently being edited.
javax.swing.JTree.getExpandedDescendants(javax.swing.tree.TreePath),returns an enumeration of the descendants of the path parent that are currently expanded.
javax.swing.JTree.getExpandsSelectedPaths(),returns the expandsselectedpaths property.
javax.swing.JTree.getInvokesStopCellEditing(),returns the indicator that tells what happens when editing is interrupted.
javax.swing.JTree.getLastSelectedPathComponent(),returns the last path component of the selected path.
javax.swing.JTree.getLeadSelectionPath(),returns the path identified as the lead.
javax.swing.JTree.getLeadSelectionRow(),returns the row index corresponding to the lead path.
javax.swing.JTree.getMaxSelectionRow(),returns the largest selected row.
javax.swing.JTree.getMinSelectionRow(),returns the smallest selected row.
javax.swing.JTree.getModel(),returns the treemodel that is providing the data.
"javax.swing.JTree.getNextMatch(java.lang.String,int,javax.swing.text.Position.Bias)",returns the treepath to the next tree element that begins with a prefix.
"javax.swing.JTree.getPathBetweenRows(int,int)",returns the paths (inclusive) between the specified rows.
javax.swing.JTree.getPathBounds(javax.swing.tree.TreePath),returns the rectangle that the specified node will be drawn into.
"javax.swing.JTree.getPathForLocation(int,int)",returns the path for the node at the specified location.
javax.swing.JTree.getPathForRow(int),returns the path for the specified row.
javax.swing.JTree.getPreferredScrollableViewportSize(),returns the preferred display size of a jtree.
javax.swing.JTree.getRowBounds(int),returns the rectangle that the node at the specified row is drawn in.
javax.swing.JTree.getRowCount(),returns the number of viewable nodes.
"javax.swing.JTree.getRowForLocation(int,int)",returns the row for the specified location.
javax.swing.JTree.getRowForPath(javax.swing.tree.TreePath),returns the row that displays the node identified by the specified path.
javax.swing.JTree.getRowHeight(),returns the height of each row.
"javax.swing.JTree.getScrollableBlockIncrement(java.awt.Rectangle,int,int)","returns the amount for a block increment, which is the height or width of visiblerect, based on orientation."
javax.swing.JTree.getScrollableTracksViewportHeight(),"returns false to indicate that the height of the viewport does not determine the height of the table, unless the preferred height of the tree is smaller than the viewports height."
javax.swing.JTree.getScrollableTracksViewportWidth(),"returns false to indicate that the width of the viewport does not determine the width of the table, unless the preferred width of the tree is smaller than the viewports width."
"javax.swing.JTree.getScrollableUnitIncrement(java.awt.Rectangle,int,int)",returns the amount to increment when scrolling.
javax.swing.JTree.getScrollsOnExpand(),returns the value of the scrollsonexpand property.
javax.swing.JTree.getSelectionCount(),returns the number of nodes selected.
javax.swing.JTree.getSelectionModel(),returns the model for selections.
javax.swing.JTree.getSelectionPath(),returns the path to the first selected node.
javax.swing.JTree.getSelectionPaths(),returns the paths of all selected values.
javax.swing.JTree.getSelectionRows(),returns all of the currently selected rows.
javax.swing.JTree.getShowsRootHandles(),returns the value of the showsroothandles property.
javax.swing.JTree.getToggleClickCount(),returns the number of mouse clicks needed to expand or close a node.
javax.swing.JTree.getTreeExpansionListeners(),returns an array of all the treeexpansionlisteners added to this jtree with addtreeexpansionlistener().
javax.swing.JTree.getTreeSelectionListeners(),returns an array of all the treeselectionlisteners added to this jtree with addtreeselectionlistener().
javax.swing.JTree.getTreeWillExpandListeners(),returns an array of all the treewillexpandlisteners added to this jtree with addtreewillexpandlistener().
javax.swing.JTree.getUI(),returns the l&f object that renders this component.
javax.swing.JTree.getUIClassID(),returns the name of the l&f class that renders this component.
javax.swing.JTree.getVisibleRowCount(),returns the number of rows that are displayed in the display area.
javax.swing.JTree.hasBeenExpanded(javax.swing.tree.TreePath),returns true if the node identified by the path has ever been expanded.
javax.swing.JTree.isCollapsed(javax.swing.tree.TreePath),"returns true if the value identified by path is currently collapsed, this will return false if any of the values in path are currently not being displayed."
javax.swing.JTree.isCollapsed(int),returns true if the node at the specified display row is collapsed.
javax.swing.JTree.isEditable(),returns true if the tree is editable.
javax.swing.JTree.isEditing(),returns true if the tree is being edited.
javax.swing.JTree.isExpanded(javax.swing.tree.TreePath),"returns true if the node identified by the path is currently expanded,."
javax.swing.JTree.isExpanded(int),returns true if the node at the specified display row is currently expanded.
javax.swing.JTree.isFixedRowHeight(),returns true if the height of each display row is a fixed size.
javax.swing.JTree.isLargeModel(),returns true if the tree is configured for a large model.
javax.swing.JTree.isPathEditable(javax.swing.tree.TreePath),returns iseditable.
javax.swing.JTree.isPathSelected(javax.swing.tree.TreePath),returns true if the item identified by the path is currently selected.
javax.swing.JTree.isRootVisible(),returns true if the root node of the tree is displayed.
javax.swing.JTree.isRowSelected(int),returns true if the node identified by row is selected.
javax.swing.JTree.isSelectionEmpty(),returns true if the selection is currently empty.
javax.swing.JTree.isVisible(javax.swing.tree.TreePath),"returns true if the value identified by path is currently viewable, which means it is either the root or all of its parents are expanded."
javax.swing.JTree.makeVisible(javax.swing.tree.TreePath),ensures that the node identified by path is currently viewable.
javax.swing.JTree.paramString(),returns a string representation of this jtree.
"javax.swing.JTree.removeDescendantSelectedPaths(javax.swing.tree.TreePath,boolean)",removes any paths in the selection that are descendants of path.
javax.swing.JTree.removeDescendantToggledPaths(java.util.Enumeration<javax.swing.tree.TreePath>),removes any descendants of the treepaths in toremove that have been expanded.
"javax.swing.JTree.removeSelectionInterval(int,int)",removes the specified rows (inclusive) from the selection.
javax.swing.JTree.removeSelectionPath(javax.swing.tree.TreePath),removes the node identified by the specified path from the current selection.
javax.swing.JTree.removeSelectionPaths(javax.swing.tree.TreePath[]),removes the nodes identified by the specified paths from the current selection.
javax.swing.JTree.removeSelectionRow(int),removes the row at the index row from the current selection.
javax.swing.JTree.removeSelectionRows(int[]),removes the rows that are selected at each of the specified rows.
javax.swing.JTree.removeTreeExpansionListener(javax.swing.event.TreeExpansionListener),removes a listener for treeexpansion events.
javax.swing.JTree.removeTreeSelectionListener(javax.swing.event.TreeSelectionListener),removes a treeselection listener.
javax.swing.JTree.removeTreeWillExpandListener(javax.swing.event.TreeWillExpandListener),removes a listener for treewillexpand events.
javax.swing.JTree.scrollPathToVisible(javax.swing.tree.TreePath),makes sure all the path components in path are expanded (except for the last path component) and scrolls so that the node identified by the path is displayed.
javax.swing.JTree.scrollRowToVisible(int),scrolls the item identified by row until it is displayed.
javax.swing.JTree.setAnchorSelectionPath(javax.swing.tree.TreePath),sets the path identified as the anchor.
javax.swing.JTree.setCellEditor(javax.swing.tree.TreeCellEditor),sets the cell editor.
javax.swing.JTree.setCellRenderer(javax.swing.tree.TreeCellRenderer),sets the treecellrenderer that will be used to draw each cell.
javax.swing.JTree.setDragEnabled(boolean),turns on or off automatic drag handling.
javax.swing.JTree.setDropMode(javax.swing.DropMode),sets the drop mode for this component.
javax.swing.JTree.setEditable(boolean),determines whether the tree is editable.
"javax.swing.JTree.setExpandedState(javax.swing.tree.TreePath,boolean)",sets the expanded state of this jtree.
javax.swing.JTree.setExpandsSelectedPaths(boolean),configures the expandsselectedpaths property.
javax.swing.JTree.setInvokesStopCellEditing(boolean),"determines what happens when editing is interrupted by selecting another node in the tree, a change in the tree's data, or by some other means."
javax.swing.JTree.setLargeModel(boolean),specifies whether the ui should use a large model.
javax.swing.JTree.setLeadSelectionPath(javax.swing.tree.TreePath),sets the path identifies as the lead.
javax.swing.JTree.setModel(javax.swing.tree.TreeModel),sets the treemodel that will provide the data.
javax.swing.JTree.setRootVisible(boolean),determines whether or not the root node from the treemodel is visible.
javax.swing.JTree.setRowHeight(int),"sets the height of each cell, in pixels."
javax.swing.JTree.setScrollsOnExpand(boolean),"sets the scrollsonexpand property, which determines whether the tree might scroll to show previously hidden children."
"javax.swing.JTree.setSelectionInterval(int,int)",selects the rows in the specified interval (inclusive).
javax.swing.JTree.setSelectionModel(javax.swing.tree.TreeSelectionModel),sets the tree's selection model.
javax.swing.JTree.setSelectionPath(javax.swing.tree.TreePath),selects the node identified by the specified path.
javax.swing.JTree.setSelectionPaths(javax.swing.tree.TreePath[]),selects the nodes identified by the specified array of paths.
javax.swing.JTree.setSelectionRow(int),selects the node at the specified row in the display.
javax.swing.JTree.setSelectionRows(int[]),selects the nodes corresponding to each of the specified rows in the display.
javax.swing.JTree.setShowsRootHandles(boolean),"sets the value of the showsroothandles property, which specifies whether the node handles should be displayed."
javax.swing.JTree.setToggleClickCount(int),sets the number of mouse clicks before a node will expand or close.
javax.swing.JTree.setUI(javax.swing.plaf.TreeUI),sets the l&f object that renders this component.
javax.swing.JTree.setVisibleRowCount(int),sets the number of rows that are to be displayed.
javax.swing.JTree.startEditingAtPath(javax.swing.tree.TreePath),selects the node identified by the specified path and initiates editing.
javax.swing.JTree.stopEditing(),ends the current editing session.
javax.swing.JTree.treeDidChange(),"sent when the tree has changed enough that we need to resize the bounds, but not enough that we need to remove the expanded node set (e."
javax.swing.JTree.updateUI(),notification from the uimanager that the l&f has changed.
javax.swing.JTree.DropLocation.getChildIndex(),returns the index where the dropped data should be inserted with respect to the path returned by getpath().
javax.swing.JTree.DropLocation.getPath(),returns the path where dropped data should be placed in the tree.
javax.swing.JTree.DropLocation.toString(),returns a string representation of this drop location.
javax.swing.JTree.DynamicUtilTreeNode.children(),"subclassed to load the children, if necessary."
"javax.swing.JTree.DynamicUtilTreeNode.createChildren(javax.swing.tree.DefaultMutableTreeNode,java.lang.Object)",adds to parent all the children in children.
javax.swing.JTree.DynamicUtilTreeNode.getChildAt(int),"subclassed to load the children, if necessary."
javax.swing.JTree.DynamicUtilTreeNode.getChildCount(),returns the number of child nodes.
javax.swing.JTree.DynamicUtilTreeNode.isLeaf(),returns true if this node allows children.
javax.swing.JTree.DynamicUtilTreeNode.loadChildren(),loads the children based on childvalue.
javax.swing.JTree.EmptySelectionModel.addPropertyChangeListener(java.beans.PropertyChangeListener),this is overriden to do nothing; emptyselectionmodel does not allow a selection.
javax.swing.JTree.EmptySelectionModel.addSelectionPaths(javax.swing.tree.TreePath[]),this is overriden to do nothing; emptyselectionmodel does not allow a selection.
javax.swing.JTree.EmptySelectionModel.addTreeSelectionListener(javax.swing.event.TreeSelectionListener),this is overriden to do nothing; emptyselectionmodel does not allow a selection.
javax.swing.JTree.EmptySelectionModel.removePropertyChangeListener(java.beans.PropertyChangeListener),this is overriden to do nothing; emptyselectionmodel does not allow a selection.
javax.swing.JTree.EmptySelectionModel.removeSelectionPaths(javax.swing.tree.TreePath[]),this is overriden to do nothing; emptyselectionmodel does not allow a selection.
javax.swing.JTree.EmptySelectionModel.removeTreeSelectionListener(javax.swing.event.TreeSelectionListener),this is overriden to do nothing; emptyselectionmodel does not allow a selection.
javax.swing.JTree.EmptySelectionModel.setRowMapper(javax.swing.tree.RowMapper),this is overriden to do nothing; emptyselectionmodel does not allow a selection.
javax.swing.JTree.EmptySelectionModel.setSelectionMode(int),this is overriden to do nothing; emptyselectionmodel does not allow a selection.
javax.swing.JTree.EmptySelectionModel.setSelectionPaths(javax.swing.tree.TreePath[]),this is overriden to do nothing; emptyselectionmodel does not allow a selection.
javax.swing.JTree.EmptySelectionModel.sharedInstance(),returns the single instance of emptyselectionmodel.
javax.swing.JViewport.addChangeListener(javax.swing.event.ChangeListener),"adds a changelistener to the list that is notified each time the view's size, position, or the viewport's extent size has changed."
"javax.swing.JViewport.addImpl(java.awt.Component,java.lang.Object,int)","sets the jviewport's one lightweight child, which can be null."
"javax.swing.JViewport.computeBlit(int,int,java.awt.Point,java.awt.Point,java.awt.Dimension,java.awt.Rectangle)",computes the parameters for a blit where the backing store image currently contains oldloc in the upper left hand corner and we're scrolling to newloc.
javax.swing.JViewport.createLayoutManager(),subclassers can override this to install a different layout manager (or null) in the constructor.
javax.swing.JViewport.createViewListener(),creates a listener for the view.
"javax.swing.JViewport.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",notifies listeners of a property change.
javax.swing.JViewport.fireStateChanged(),"notifies all changelisteners when the views size, position, or the viewports extent size has changed."
javax.swing.JViewport.getAccessibleContext(),gets the accessiblecontext associated with this jviewport.
javax.swing.JViewport.getChangeListeners(),returns an array of all the changelisteners added to this jviewport with addchangelistener().
javax.swing.JViewport.getExtentSize(),returns the size of the visible part of the view in view coordinates.
javax.swing.JViewport.getInsets(),"returns the insets (border) dimensions as (0,0,0,0), since borders are not supported on a jviewport."
javax.swing.JViewport.getInsets(java.awt.Insets),returns an insets object containing this jviewports inset values.
javax.swing.JViewport.getScrollMode(),returns the current scrolling mode.
javax.swing.JViewport.getUI(),returns the l&f object that renders this component.
javax.swing.JViewport.getUIClassID(),returns a string that specifies the name of the l&f class that renders this component.
javax.swing.JViewport.getView(),returns the jviewport's one child or null.
javax.swing.JViewport.getViewPosition(),"returns the view coordinates that appear in the upper left hand corner of the viewport, or 0,0 if there's no view."
javax.swing.JViewport.getViewRect(),returns a rectangle whose origin is getviewposition and size is getextentsize.
javax.swing.JViewport.getViewSize(),"if the view's size hasn't been explicitly set, return the preferred size, otherwise return the view's current size."
javax.swing.JViewport.isOptimizedDrawingEnabled(),the jviewport overrides the default implementation of this method (in jcomponent) to return false.
javax.swing.JViewport.isPaintingOrigin(),"returns true if scroll mode is a backingstore_scroll_mode to cause painting to originate from jviewport, or one of its ancestors."
javax.swing.JViewport.paint(java.awt.Graphics),"depending on whether the backingstore is enabled, either paint the image through the backing store or paint just the recently exposed part, using the backing store to ""blit"" the remainder."
javax.swing.JViewport.paramString(),returns a string representation of this jviewport.
javax.swing.JViewport.remove(java.awt.Component),removes the viewports one lightweight child.
javax.swing.JViewport.removeChangeListener(javax.swing.event.ChangeListener),"removes a changelistener from the list that's notified each time the views size, position, or the viewports extent size has changed."
"javax.swing.JViewport.repaint(long,int,int,int,int)",always repaint in the parents coordinate system to make sure only one paint is performed by the repaintmanager.
"javax.swing.JViewport.reshape(int,int,int,int)",sets the bounds of this viewport.
javax.swing.JViewport.scrollRectToVisible(java.awt.Rectangle),scrolls the view so that rectangle within the view becomes visible.
javax.swing.JViewport.setBorder(javax.swing.border.Border),"the viewport ""scrolls"" its child (called the ""view"") by the normal parent/child clipping (typically the view is moved in the opposite direction of the scroll)."
javax.swing.JViewport.setExtentSize(java.awt.Dimension),sets the size of the visible part of the view using view coordinates.
javax.swing.JViewport.setScrollMode(int),used to control the method of scrolling the viewport contents.
javax.swing.JViewport.setUI(javax.swing.plaf.ViewportUI),sets the l&f object that renders this component.
javax.swing.JViewport.setView(java.awt.Component),"sets the jviewport's one lightweight child (view), which can be null."
javax.swing.JViewport.setViewPosition(java.awt.Point),"sets the view coordinates that appear in the upper left hand corner of the viewport, does nothing if there's no view."
javax.swing.JViewport.setViewSize(java.awt.Dimension),sets the size of the view.
javax.swing.JViewport.toViewCoordinates(java.awt.Dimension),converts a size in pixel coordinates to view coordinates.
javax.swing.JViewport.toViewCoordinates(java.awt.Point),converts a point in pixel coordinates to view coordinates.
javax.swing.JViewport.updateUI(),resets the ui property to a value from the current look and feel.
"javax.swing.JWindow.addImpl(java.awt.Component,java.lang.Object,int)",adds the specified child component.
javax.swing.JWindow.createRootPane(),called by the constructor methods to create the default rootpane.
javax.swing.JWindow.getAccessibleContext(),gets the accessiblecontext associated with this jwindow.
javax.swing.JWindow.getContentPane(),returns the container which is the contentpane for this window.
javax.swing.JWindow.getGlassPane(),returns the glasspane component for this window.
javax.swing.JWindow.getGraphics(),creates a graphics context for this component.
javax.swing.JWindow.getLayeredPane(),returns the layeredpane object for this window.
javax.swing.JWindow.getRootPane(),returns the rootpane object for this window.
javax.swing.JWindow.getTransferHandler(),gets the transferhandler property.
javax.swing.JWindow.isRootPaneCheckingEnabled(),returns whether calls to add and setlayout are forwarded to the contentpane.
javax.swing.JWindow.paramString(),returns a string representation of this jwindow.
javax.swing.JWindow.remove(java.awt.Component),removes the specified component from the container.
"javax.swing.JWindow.repaint(long,int,int,int,int)",repaints the specified rectangle of this component within time milliseconds.
javax.swing.JWindow.setContentPane(java.awt.Container),sets the contentpane property for this window.
javax.swing.JWindow.setGlassPane(java.awt.Component),sets the glasspane property.
javax.swing.JWindow.setLayeredPane(javax.swing.JLayeredPane),sets the layeredpane property.
javax.swing.JWindow.setLayout(java.awt.LayoutManager),sets the layoutmanager.
javax.swing.JWindow.setRootPane(javax.swing.JRootPane),sets the new rootpane object for this window.
javax.swing.JWindow.setRootPaneCheckingEnabled(boolean),sets whether calls to add and setlayout are forwarded to the contentpane.
javax.swing.JWindow.setTransferHandler(javax.swing.TransferHandler),"sets the transferhandler property, which is a mechanism to support transfer of data into this component."
javax.swing.JWindow.update(java.awt.Graphics),calls paint(g).
javax.swing.JWindow.windowInit(),called by the constructors to init the jwindow properly.
javax.swing.KeyStroke.getKeyStroke(char),returns a shared instance of a keystroke that represents a key_typed event for the specified character.
"javax.swing.KeyStroke.getKeyStroke(java.lang.Character,int)",returns a shared instance of a keystroke that represents a key_typed event for the specified character object and a set of modifiers.
"javax.swing.KeyStroke.getKeyStroke(int,int,boolean)","returns a shared instance of a keystroke, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released."
"javax.swing.KeyStroke.getKeyStroke(int,int)","returns a shared instance of a keystroke, given a numeric key code and a set of modifiers."
javax.swing.KeyStroke.getKeyStroke(java.lang.String),parses a string and returns a keystroke.
javax.swing.KeyStroke.getKeyStrokeForEvent(java.awt.event.KeyEvent),returns a keystroke which represents the stroke which generated a given keyevent.
javax.swing.LayoutFocusTraversalPolicy.accept(java.awt.Component),determines whether the specified component is an acceptable choice as the new focus owner.
"javax.swing.LayoutFocusTraversalPolicy.getComponentAfter(java.awt.Container,java.awt.Component)",returns the component that should receive the focus after acomponent.
"javax.swing.LayoutFocusTraversalPolicy.getComponentBefore(java.awt.Container,java.awt.Component)",returns the component that should receive the focus before acomponent.
javax.swing.LayoutFocusTraversalPolicy.getFirstComponent(java.awt.Container),returns the first component in the traversal cycle.
javax.swing.LayoutFocusTraversalPolicy.getLastComponent(java.awt.Container),returns the last component in the traversal cycle.
"javax.swing.LayoutStyle.getContainerGap(javax.swing.JComponent,int,java.awt.Container)",returns the amount of space to place between the component and specified edge of its parent.
javax.swing.LayoutStyle.getInstance(),returns the shared instance of layoutstyle.
"javax.swing.LayoutStyle.getPreferredGap(javax.swing.JComponent,javax.swing.JComponent,javax.swing.LayoutStyle.ComponentPlacement,int,java.awt.Container)",returns the amount of space to use between two components.
javax.swing.LayoutStyle.setInstance(javax.swing.LayoutStyle),sets the shared instance of layoutstyle.
javax.swing.LookAndFeel.getDefaults(),returns the look and feel defaults.
javax.swing.LookAndFeel.getDescription(),"return a one line description of this look and feel implementation, e."
"javax.swing.LookAndFeel.getDesktopPropertyValue(java.lang.String,java.lang.Object)",returns the value of the specified system desktop property by invoking toolkit.
"javax.swing.LookAndFeel.getDisabledIcon(javax.swing.JComponent,javax.swing.Icon)",returns an icon with a disabled appearance.
"javax.swing.LookAndFeel.getDisabledSelectedIcon(javax.swing.JComponent,javax.swing.Icon)",returns an icon for use by disabled components that are also selected.
javax.swing.LookAndFeel.getID(),return a string that identifies this look and feel.
javax.swing.LookAndFeel.getLayoutStyle(),returns the layoutstyle for this look and feel.
javax.swing.LookAndFeel.getName(),"return a short string that identifies this look and feel, e."
javax.swing.LookAndFeel.getSupportsWindowDecorations(),returns true if the lookandfeel returned rootpaneui instances support providing window decorations in a jrootpane.
javax.swing.LookAndFeel.initialize(),initializes the look and feel.
"javax.swing.LookAndFeel.installBorder(javax.swing.JComponent,java.lang.String)",convenience method for setting a component's border property with a value from the defaults.
"javax.swing.LookAndFeel.installColors(javax.swing.JComponent,java.lang.String,java.lang.String)",convenience method for setting a component's foreground and background color properties with values from the defaults.
"javax.swing.LookAndFeel.installColorsAndFont(javax.swing.JComponent,java.lang.String,java.lang.String,java.lang.String)","convenience method for setting a component's foreground, background and font properties with values from the defaults."
"javax.swing.LookAndFeel.installProperty(javax.swing.JComponent,java.lang.String,java.lang.Object)",convenience method for installing a property with the specified name and value on a component if that property has not already been set by the developer.
javax.swing.LookAndFeel.isNativeLookAndFeel(),"if the underlying platform has a ""native"" look and feel, and this is an implementation of it, return true."
javax.swing.LookAndFeel.isSupportedLookAndFeel(),return true if the underlying platform supports and or permits this look and feel.
"javax.swing.LookAndFeel.loadKeyBindings(javax.swing.InputMap,java.lang.Object[])",populates an inputmap with the specified bindings.
"javax.swing.LookAndFeel.makeComponentInputMap(javax.swing.JComponent,java.lang.Object[])",creates a componentinputmapuiresource from keys.
"javax.swing.LookAndFeel.makeIcon(java.lang.Class<?>,java.lang.String)",creates and returns a uidefault.
javax.swing.LookAndFeel.makeInputMap(java.lang.Object[]),creates a inputmapuiresource from keys.
javax.swing.LookAndFeel.makeKeyBindings(java.lang.Object[]),convenience method for building an array of keybindings.
javax.swing.LookAndFeel.provideErrorFeedback(java.awt.Component),"invoked when the user attempts an invalid operation, such as pasting into an uneditable jtextfield that has focus."
javax.swing.LookAndFeel.toString(),returns a string that displays and identifies this object's properties.
javax.swing.LookAndFeel.uninitialize(),uninitializes the look and feel.
javax.swing.LookAndFeel.uninstallBorder(javax.swing.JComponent),convenience method for uninstalling a border.
javax.swing.MenuSelectionManager.addChangeListener(javax.swing.event.ChangeListener),adds a changelistener to the button.
javax.swing.MenuSelectionManager.clearSelectedPath(),tell the menu selection to close and unselect all the menu components.
"javax.swing.MenuSelectionManager.componentForPoint(java.awt.Component,java.awt.Point)",returns the component in the currently selected path which contains sourcepoint.
javax.swing.MenuSelectionManager.defaultManager(),returns the default menu selection manager.
javax.swing.MenuSelectionManager.fireStateChanged(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.MenuSelectionManager.getChangeListeners(),returns an array of all the changelisteners added to this menuselectionmanager with addchangelistener().
javax.swing.MenuSelectionManager.getSelectedPath(),returns the path to the currently selected menu item.
javax.swing.MenuSelectionManager.isComponentPartOfCurrentMenu(java.awt.Component),return true if c is part of the currently used menu.
javax.swing.MenuSelectionManager.processKeyEvent(java.awt.event.KeyEvent),"when a menuelement receives an event from a keylistener, it should never process the event directly."
javax.swing.MenuSelectionManager.processMouseEvent(java.awt.event.MouseEvent),"when a menuelement receives an event from a mouselistener, it should never process the event directly."
javax.swing.MenuSelectionManager.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from the button.
javax.swing.MenuSelectionManager.setSelectedPath(javax.swing.MenuElement[]),changes the selection in the menu hierarchy.
"javax.swing.OverlayLayout.addLayoutComponent(java.lang.String,java.awt.Component)",adds the specified component to the layout.
"javax.swing.OverlayLayout.addLayoutComponent(java.awt.Component,java.lang.Object)","adds the specified component to the layout, using the specified constraint object."
javax.swing.OverlayLayout.getLayoutAlignmentX(java.awt.Container),returns the alignment along the x axis for the container.
javax.swing.OverlayLayout.getLayoutAlignmentY(java.awt.Container),returns the alignment along the y axis for the container.
javax.swing.OverlayLayout.getTarget(),returns the container that uses this layout manager.
javax.swing.OverlayLayout.invalidateLayout(java.awt.Container),"indicates a child has changed its layout related information, which causes any cached calculations to be flushed."
javax.swing.OverlayLayout.layoutContainer(java.awt.Container),called by the awt when the specified container needs to be laid out.
javax.swing.OverlayLayout.maximumLayoutSize(java.awt.Container),returns the maximum dimensions needed to lay out the components contained in the specified target container.
javax.swing.OverlayLayout.minimumLayoutSize(java.awt.Container),returns the minimum dimensions needed to lay out the components contained in the specified target container.
javax.swing.OverlayLayout.preferredLayoutSize(java.awt.Container),returns the preferred dimensions for this layout given the components in the specified target container.
javax.swing.OverlayLayout.removeLayoutComponent(java.awt.Component),removes the specified component from the layout.
javax.swing.Popup.hide(),hides and disposes of the popup.
javax.swing.Popup.show(),makes the popup visible.
"javax.swing.PopupFactory.getPopup(java.awt.Component,java.awt.Component,int,int)",creates a popup for the component owner containing the component contents.
javax.swing.PopupFactory.getSharedInstance(),returns the shared popupfactory which can be used to obtain popups.
javax.swing.PopupFactory.setSharedInstance(javax.swing.PopupFactory),sets the popupfactory that will be used to obtain popups.
javax.swing.ProgressMonitor.close(),indicate that the operation is complete.
javax.swing.ProgressMonitor.getAccessibleContext(),gets the accessiblecontext for the progressmonitor.
javax.swing.ProgressMonitor.getMaximum(),returns the maximum value -- the higher end of the progress value.
javax.swing.ProgressMonitor.getMillisToDecideToPopup(),returns the amount of time this object waits before deciding whether or not to popup a progress monitor.
javax.swing.ProgressMonitor.getMillisToPopup(),returns the amount of time it will take for the popup to appear.
javax.swing.ProgressMonitor.getMinimum(),returns the minimum value -- the lower end of the progress value.
javax.swing.ProgressMonitor.getNote(),specifies the additional note that is displayed along with the progress message.
javax.swing.ProgressMonitor.isCanceled(),returns true if the user hits the cancel button in the progress dialog.
javax.swing.ProgressMonitor.setMaximum(int),specifies the maximum value.
javax.swing.ProgressMonitor.setMillisToDecideToPopup(int),specifies the amount of time to wait before deciding whether or not to popup a progress monitor.
javax.swing.ProgressMonitor.setMillisToPopup(int),specifies the amount of time it will take for the popup to appear.
javax.swing.ProgressMonitor.setMinimum(int),specifies the minimum value.
javax.swing.ProgressMonitor.setNote(java.lang.String),specifies the additional note that is displayed along with the progress message.
javax.swing.ProgressMonitor.setProgress(int),indicate the progress of the operation being monitored.
javax.swing.ProgressMonitorInputStream.getProgressMonitor(),get the progressmonitor object being used by this stream.
"javax.swing.RepaintManager.addDirtyRegion(javax.swing.JComponent,int,int,int,int)",add a component in the list of components that should be refreshed.
"javax.swing.RepaintManager.addDirtyRegion(java.awt.Window,int,int,int,int)",adds window to the list of components that need to be repainted.
"javax.swing.RepaintManager.addDirtyRegion(java.applet.Applet,int,int,int,int)",adds applet to the list of components that need to be repainted.
javax.swing.RepaintManager.addInvalidComponent(javax.swing.JComponent),mark the component as in need of layout and queue a runnable for the event dispatching thread that will validate the components first isvalidateroot() ancestor.
javax.swing.RepaintManager.currentManager(java.awt.Component),return the repaintmanager for the calling thread given a component.
javax.swing.RepaintManager.currentManager(javax.swing.JComponent),return the repaintmanager for the calling thread given a jcomponent.
javax.swing.RepaintManager.getDirtyRegion(javax.swing.JComponent),return the current dirty region for a component.
javax.swing.RepaintManager.getDoubleBufferMaximumSize(),returns the maximum double buffer size.
"javax.swing.RepaintManager.getOffscreenBuffer(java.awt.Component,int,int)",return the offscreen buffer that should be used as a double buffer with the component c.
"javax.swing.RepaintManager.getVolatileOffscreenBuffer(java.awt.Component,int,int)",return a volatile offscreen buffer that should be used as a double buffer with the specified component c.
javax.swing.RepaintManager.isCompletelyDirty(javax.swing.JComponent),convenience method that returns true if acomponent will be completely painted during the next paintdirtyregions().
javax.swing.RepaintManager.isDoubleBufferingEnabled(),returns true if this repaintmanager is double buffered.
javax.swing.RepaintManager.markCompletelyClean(javax.swing.JComponent),mark a component completely clean.
javax.swing.RepaintManager.markCompletelyDirty(javax.swing.JComponent),mark a component completely dirty.
javax.swing.RepaintManager.paintDirtyRegions(),paint all of the components that have been marked dirty.
javax.swing.RepaintManager.removeInvalidComponent(javax.swing.JComponent),remove a component from the list of invalid components.
javax.swing.RepaintManager.setCurrentManager(javax.swing.RepaintManager),set the repaintmanager that should be used for the calling thread.
javax.swing.RepaintManager.setDoubleBufferingEnabled(boolean),enables or disables double buffering in this repaintmanager.
javax.swing.RepaintManager.setDoubleBufferMaximumSize(java.awt.Dimension),set the maximum double buffer size.
javax.swing.RepaintManager.toString(),returns a string that displays and identifies this object's properties.
javax.swing.RepaintManager.validateInvalidComponents(),validate all of the components that have been marked invalid.
"javax.swing.RowFilter.andFilter(java.lang.Iterable<? extends javax.swing.RowFilter<? super,? super I>>)",returns a rowfilter that includes entries if all of the supplied filters include the entry.
"javax.swing.RowFilter.dateFilter(javax.swing.RowFilter.ComparisonType,java.util.Date,int...)",returns a rowfilter that includes entries that have at least one date value meeting the specified criteria.
"javax.swing.RowFilter.include(javax.swing.RowFilter.Entry<? extends,? extends javax.swing.RowFilter>)",returns true if the specified entry should be shown; returns false if the entry should be hidden.
"javax.swing.RowFilter.notFilter(,I>)",returns a rowfilter that includes entries if the supplied filter does not include the entry.
"javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType,java.lang.Number,int...)",returns a rowfilter that includes entries that have at least one number value meeting the specified criteria.
"javax.swing.RowFilter.orFilter(java.lang.Iterable<? extends javax.swing.RowFilter<? super,? super I>>)",returns a rowfilter that includes entries if any of the supplied filters includes the entry.
"javax.swing.RowFilter.regexFilter(java.lang.String,int...)",returns a rowfilter that uses a regular expression to determine which entries to include.
javax.swing.RowFilter.Entry.getIdentifier(),returns the identifer (in the model) of the entry.
javax.swing.RowFilter.Entry.getModel(),returns the underlying model.
javax.swing.RowFilter.Entry.getStringValue(int),returns the string value at the specified index.
javax.swing.RowFilter.Entry.getValue(int),returns the value at the specified index.
javax.swing.RowFilter.Entry.getValueCount(),returns the number of values in the entry.
javax.swing.RowSorter.addRowSorterListener(javax.swing.event.RowSorterListener),adds a rowsorterlistener to receive notification about this rowsorter.
javax.swing.RowSorter.allRowsChanged(),invoked when the contents of the underlying model have completely changed.
javax.swing.RowSorter.convertRowIndexToModel(int),returns the location of index in terms of the underlying model.
javax.swing.RowSorter.convertRowIndexToView(int),returns the location of index in terms of the view.
javax.swing.RowSorter.fireRowSorterChanged(int[]),notifies listener that the mapping has changed.
javax.swing.RowSorter.fireSortOrderChanged(),notifies listener that the sort order has changed.
javax.swing.RowSorter.getModel(),returns the underlying model.
javax.swing.RowSorter.getModelRowCount(),returns the number of rows in the underlying model.
javax.swing.RowSorter.getSortKeys(),returns the current sort keys.
javax.swing.RowSorter.getViewRowCount(),returns the number of rows in the view.
javax.swing.RowSorter.modelStructureChanged(),invoked when the underlying model structure has completely changed.
javax.swing.RowSorter.removeRowSorterListener(javax.swing.event.RowSorterListener),removes a rowsorterlistener.
"javax.swing.RowSorter.rowsDeleted(int,int)",invoked when rows have been deleted from the underlying model in the specified range (inclusive).
"javax.swing.RowSorter.rowsInserted(int,int)",invoked when rows have been inserted into the underlying model in the specified range (inclusive).
"javax.swing.RowSorter.rowsUpdated(int,int)",invoked when rows have been changed in the underlying model between the specified range (inclusive).
"javax.swing.RowSorter.rowsUpdated(int,int,int)",invoked when the column in the rows have been updated in the underlying model between the specified range.
javax.swing.RowSorter.setSortKeys(java.util.List<? extends javax.swing.RowSorter.SortKey>),sets the current sort keys.
javax.swing.RowSorter.toggleSortOrder(int),reverses the sort order of the specified column.
javax.swing.RowSorter.SortKey.equals(java.lang.Object),returns true if this object equals the specified object.
javax.swing.RowSorter.SortKey.getColumn(),returns the index of the column.
javax.swing.RowSorter.SortKey.getSortOrder(),returns the sort order of the column.
javax.swing.RowSorter.SortKey.hashCode(),returns the hash code for this sortkey.
"javax.swing.ScrollPaneLayout.addLayoutComponent(java.lang.String,java.awt.Component)",adds the specified component to the layout.
"javax.swing.ScrollPaneLayout.addSingletonComponent(java.awt.Component,java.awt.Component)",removes an existing component.
javax.swing.ScrollPaneLayout.getColumnHeader(),returns the jviewport object that is the column header.
javax.swing.ScrollPaneLayout.getCorner(java.lang.String),returns the component at the specified corner.
javax.swing.ScrollPaneLayout.getHorizontalScrollBar(),returns the jscrollbar object that handles horizontal scrolling.
javax.swing.ScrollPaneLayout.getHorizontalScrollBarPolicy(),returns the horizontal scrollbar-display policy.
javax.swing.ScrollPaneLayout.getRowHeader(),returns the jviewport object that is the row header.
javax.swing.ScrollPaneLayout.getVerticalScrollBar(),returns the jscrollbar object that handles vertical scrolling.
javax.swing.ScrollPaneLayout.getVerticalScrollBarPolicy(),returns the vertical scrollbar-display policy.
javax.swing.ScrollPaneLayout.getViewport(),returns the jviewport object that displays the scrollable contents.
javax.swing.ScrollPaneLayout.layoutContainer(java.awt.Container),lays out the scrollpane.
javax.swing.ScrollPaneLayout.minimumLayoutSize(java.awt.Container),"the minimum size of a scrollpane is the size of the insets plus minimum size of the viewport, plus the scrollpane's viewportborder insets, plus the minimum size of the visible headers, plus the minimum size of the scrollbars whose displaypolicy isn't never."
javax.swing.ScrollPaneLayout.preferredLayoutSize(java.awt.Container),"the preferred size of a scrollpane is the size of the insets, plus the preferred size of the viewport, plus the preferred size of the visible headers, plus the preferred size of the scrollbars that will appear given the current view and the current scrollbar displaypolicies."
javax.swing.ScrollPaneLayout.removeLayoutComponent(java.awt.Component),removes the specified component from the layout.
javax.swing.ScrollPaneLayout.setHorizontalScrollBarPolicy(int),sets the horizontal scrollbar-display policy.
javax.swing.ScrollPaneLayout.setVerticalScrollBarPolicy(int),sets the vertical scrollbar-display policy.
javax.swing.ScrollPaneLayout.syncWithScrollPane(javax.swing.JScrollPane),this method is invoked after the scrollpanelayout is set as the layoutmanager of a jscrollpane.
"javax.swing.SizeRequirements.adjustSizes(int,javax.swing.SizeRequirements[])",adjust a specified array of sizes by a given amount.
"javax.swing.SizeRequirements.calculateAlignedPositions(int,javax.swing.SizeRequirements,javax.swing.SizeRequirements[],int[],int[])",creates a bunch of offset/span pairs specifying how to lay out a set of components with the specified alignments.
"javax.swing.SizeRequirements.calculateAlignedPositions(int,javax.swing.SizeRequirements,javax.swing.SizeRequirements[],int[],int[],boolean)",creates a set of offset/span pairs specifying how to lay out a set of components with the specified alignments.
"javax.swing.SizeRequirements.calculateTiledPositions(int,javax.swing.SizeRequirements,javax.swing.SizeRequirements[],int[],int[])",creates a set of offset/span pairs representing how to lay out a set of components end-to-end.
"javax.swing.SizeRequirements.calculateTiledPositions(int,javax.swing.SizeRequirements,javax.swing.SizeRequirements[],int[],int[],boolean)",creates a set of offset/span pairs representing how to lay out a set of components end-to-end.
javax.swing.SizeRequirements.getAlignedSizeRequirements(javax.swing.SizeRequirements[]),determines the total space necessary to align a set of components.
javax.swing.SizeRequirements.getTiledSizeRequirements(javax.swing.SizeRequirements[]),determines the total space necessary to place a set of components end-to-end.
javax.swing.SizeRequirements.toString(),"returns a string describing the minimum, preferred, and maximum size requirements, along with the alignment."
javax.swing.SizeSequence.getIndex(int),returns the index of the entry that corresponds to the specified position.
javax.swing.SizeSequence.getPosition(int),returns the start position for the specified entry.
javax.swing.SizeSequence.getSize(int),returns the size of the specified entry.
javax.swing.SizeSequence.getSizes(),returns the size of all entries.
"javax.swing.SizeSequence.insertEntries(int,int,int)",adds a contiguous group of entries to this sizesequence.
"javax.swing.SizeSequence.removeEntries(int,int)",removes a contiguous group of entries from this sizesequence.
"javax.swing.SizeSequence.setSize(int,int)",sets the size of the specified entry.
javax.swing.SizeSequence.setSizes(int[]),"resets this sizesequence object, using the data in the sizes argument."
javax.swing.SortingFocusTraversalPolicy.accept(java.awt.Component),determines whether a component is an acceptable choice as the new focus owner.
javax.swing.SortingFocusTraversalPolicy.getComparator(),returns the comparator which will be used to sort the components in a focus traversal cycle.
"javax.swing.SortingFocusTraversalPolicy.getComponentAfter(java.awt.Container,java.awt.Component)",returns the component that should receive the focus after acomponent.
"javax.swing.SortingFocusTraversalPolicy.getComponentBefore(java.awt.Container,java.awt.Component)",returns the component that should receive the focus before acomponent.
javax.swing.SortingFocusTraversalPolicy.getDefaultComponent(java.awt.Container),returns the default component to focus.
javax.swing.SortingFocusTraversalPolicy.getFirstComponent(java.awt.Container),returns the first component in the traversal cycle.
javax.swing.SortingFocusTraversalPolicy.getImplicitDownCycleTraversal(),returns whether this sortingfocustraversalpolicy transfers focus down- cycle implicitly.
javax.swing.SortingFocusTraversalPolicy.getLastComponent(java.awt.Container),returns the last component in the traversal cycle.
javax.swing.SortingFocusTraversalPolicy.setComparator(java.util.Comparator<? super java.awt.Component>),sets the comparator which will be used to sort the components in a focus traversal cycle.
javax.swing.SortingFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean),sets whether this sortingfocustraversalpolicy transfers focus down-cycle implicitly.
javax.swing.SpinnerDateModel.getCalendarField(),returns the calendar field that is added to or subtracted from by the nextvalue and previousvalue methods.
javax.swing.SpinnerDateModel.getDate(),returns the current element in this sequence of dates.
javax.swing.SpinnerDateModel.getEnd(),returns the last date in the sequence.
javax.swing.SpinnerDateModel.getNextValue(),"returns the next date in the sequence, or null if the next date is after end."
javax.swing.SpinnerDateModel.getPreviousValue(),"returns the previous date in the sequence, or null if the previous date is before start."
javax.swing.SpinnerDateModel.getStart(),returns the first date in the sequence.
javax.swing.SpinnerDateModel.getValue(),returns the current element in this sequence of dates.
javax.swing.SpinnerDateModel.setCalendarField(int),changes the size of the date value change computed by the nextvalue and previousvalue methods.
javax.swing.SpinnerDateModel.setEnd(java.lang.Comparable),changes the upper limit for dates in this sequence.
javax.swing.SpinnerDateModel.setStart(java.lang.Comparable),changes the lower limit for dates in this sequence.
javax.swing.SpinnerDateModel.setValue(java.lang.Object),sets the current date for this sequence.
javax.swing.SpinnerListModel.getList(),returns the list that defines the sequence for this model.
javax.swing.SpinnerListModel.getNextValue(),returns the next legal value of the underlying sequence or null if value is already the last element.
javax.swing.SpinnerListModel.getPreviousValue(),returns the previous element of the underlying sequence or null if value is already the first element.
javax.swing.SpinnerListModel.getValue(),returns the current element of the sequence.
javax.swing.SpinnerListModel.setList(java.util.List<?>),changes the list that defines this sequence and resets the index of the models value to zero.
javax.swing.SpinnerListModel.setValue(java.lang.Object),changes the current element of the sequence and notifies changelisteners.
javax.swing.SpinnerNumberModel.getMaximum(),returns the last number in the sequence.
javax.swing.SpinnerNumberModel.getMinimum(),returns the first number in this sequence.
javax.swing.SpinnerNumberModel.getNextValue(),returns the next number in the sequence.
javax.swing.SpinnerNumberModel.getNumber(),returns the value of the current element of the sequence.
javax.swing.SpinnerNumberModel.getPreviousValue(),returns the previous number in the sequence.
javax.swing.SpinnerNumberModel.getStepSize(),returns the size of the value change computed by the getnextvalue and getpreviousvalue methods.
javax.swing.SpinnerNumberModel.getValue(),returns the value of the current element of the sequence.
javax.swing.SpinnerNumberModel.setMaximum(java.lang.Comparable),changes the upper bound for numbers in this sequence.
javax.swing.SpinnerNumberModel.setMinimum(java.lang.Comparable),changes the lower bound for numbers in this sequence.
javax.swing.SpinnerNumberModel.setStepSize(java.lang.Number),changes the size of the value change computed by the getnextvalue and getpreviousvalue methods.
javax.swing.SpinnerNumberModel.setValue(java.lang.Object),sets the current value for this sequence.
javax.swing.Spring.constant(int),"returns a strut -- a spring whose minimum, preferred, and maximum values each have the value pref."
"javax.swing.Spring.constant(int,int,int)","returns a spring whose minimum, preferred, and maximum values have the values: min, pref, and max respectively."
javax.swing.Spring.getMaximumValue(),returns the maximum value of this spring.
javax.swing.Spring.getMinimumValue(),returns the minimum value of this spring.
javax.swing.Spring.getPreferredValue(),returns the preferred value of this spring.
javax.swing.Spring.getValue(),returns the current value of this spring.
javax.swing.Spring.height(java.awt.Component),"returns a spring whose minimum, preferred, maximum and value properties are defined by the heights of the minimumsize, preferredsize, maximumsize and size properties of the supplied component."
"javax.swing.Spring.max(javax.swing.Spring,javax.swing.Spring)","returns max(s1, s2): a spring whose value is always greater than (or equal to) the values of both s1 and s2."
javax.swing.Spring.minus(javax.swing.Spring),returns -s: a spring running in the opposite direction to s.
"javax.swing.Spring.scale(javax.swing.Spring,float)","returns a spring whose minimum, preferred, maximum and value properties are each multiples of the properties of the argument spring, s."
javax.swing.Spring.setValue(int),sets the current value of this spring to value.
"javax.swing.Spring.sum(javax.swing.Spring,javax.swing.Spring)",returns s1+s2: a spring representing s1 and s2 in series.
javax.swing.Spring.width(java.awt.Component),"returns a spring whose minimum, preferred, maximum and value properties are defined by the widths of the minimumsize, preferredsize, maximumsize and size properties of the supplied component."
"javax.swing.SpringLayout.addLayoutComponent(java.lang.String,java.awt.Component)","has no effect, since this layout manager does not use a per-component string."
"javax.swing.SpringLayout.addLayoutComponent(java.awt.Component,java.lang.Object)",if constraints is an instance of springlayout.
"javax.swing.SpringLayout.getConstraint(java.lang.String,java.awt.Component)",returns the spring controlling the distance between the specified edge of the component and the top or left edge of its parent.
javax.swing.SpringLayout.getConstraints(java.awt.Component),returns the constraints for the specified component.
javax.swing.SpringLayout.getLayoutAlignmentX(java.awt.Container),returns 0.
javax.swing.SpringLayout.getLayoutAlignmentY(java.awt.Container),returns 0.
"javax.swing.SpringLayout.putConstraint(java.lang.String,java.awt.Component,int,java.lang.String,java.awt.Component)","links edge e1 of component c1 to edge e2 of component c2, with a fixed distance between the edges."
"javax.swing.SpringLayout.putConstraint(java.lang.String,java.awt.Component,javax.swing.Spring,java.lang.String,java.awt.Component)",links edge e1 of component c1 to edge e2 of component c2.
javax.swing.SpringLayout.removeLayoutComponent(java.awt.Component),removes the constraints associated with the specified component.
javax.swing.SpringLayout.Constraints.getConstraint(java.lang.String),"returns the value of the specified edge, which may be a derived value, or even null."
javax.swing.SpringLayout.Constraints.getHeight(),returns the value of the height property.
javax.swing.SpringLayout.Constraints.getWidth(),returns the value of the width property.
javax.swing.SpringLayout.Constraints.getX(),returns the value of the x property.
javax.swing.SpringLayout.Constraints.getY(),returns the value of the y property.
"javax.swing.SpringLayout.Constraints.setConstraint(java.lang.String,javax.swing.Spring)",sets the spring controlling the specified edge.
javax.swing.SpringLayout.Constraints.setHeight(javax.swing.Spring),"sets the height property, which controls the height of a component."
javax.swing.SpringLayout.Constraints.setWidth(javax.swing.Spring),"sets the width property, which controls the width of a component."
javax.swing.SpringLayout.Constraints.setX(javax.swing.Spring),"sets the x property, which controls the x value of a component's location."
javax.swing.SpringLayout.Constraints.setY(javax.swing.Spring),"sets the y property, which controls the y value of a component's location."
"javax.swing.SwingUtilities.calculateInnerArea(javax.swing.JComponent,java.awt.Rectangle)",stores the position and size of the inner painting area of the specified component in r and returns r.
"javax.swing.SwingUtilities.computeDifference(java.awt.Rectangle,java.awt.Rectangle)",convenience returning an array of rect representing the regions within recta that do not overlap with rectb.
"javax.swing.SwingUtilities.computeIntersection(int,int,int,int,java.awt.Rectangle)",convenience to calculate the intersection of two rectangles without allocating a new rectangle.
"javax.swing.SwingUtilities.computeStringWidth(java.awt.FontMetrics,java.lang.String)","compute the width of the string using a font with the specified ""metrics"" (sizes)."
"javax.swing.SwingUtilities.computeUnion(int,int,int,int,java.awt.Rectangle)",convenience method that calculates the union of two rectangles without allocating a new rectangle.
"javax.swing.SwingUtilities.convertMouseEvent(java.awt.Component,java.awt.event.MouseEvent,java.awt.Component)",returns a mouseevent similar to sourceevent except that its x and y members have been converted to destination's coordinate system.
"javax.swing.SwingUtilities.convertPoint(java.awt.Component,java.awt.Point,java.awt.Component)",convert a apoint in source coordinate system to destination coordinate system.
"javax.swing.SwingUtilities.convertPoint(java.awt.Component,int,int,java.awt.Component)","convert the point (x,y) in source coordinate system to destination coordinate system."
"javax.swing.SwingUtilities.convertPointFromScreen(java.awt.Point,java.awt.Component)",convert a point from a screen coordinates to a component's coordinate system.
"javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)",convert a point from a component's coordinate system to screen coordinates.
"javax.swing.SwingUtilities.convertRectangle(java.awt.Component,java.awt.Rectangle,java.awt.Component)",convert the rectangle arectangle in source coordinate system to destination coordinate system.
"javax.swing.SwingUtilities.getAccessibleAt(java.awt.Component,java.awt.Point)","returns the accessible child contained at the local coordinate point, if one exists."
"javax.swing.SwingUtilities.getAccessibleChild(java.awt.Component,int)",return the nth accessible child of the object.
javax.swing.SwingUtilities.getAccessibleChildrenCount(java.awt.Component),returns the number of accessible children in the object.
javax.swing.SwingUtilities.getAccessibleIndexInParent(java.awt.Component),get the index of this object in its accessible parent.
javax.swing.SwingUtilities.getAccessibleStateSet(java.awt.Component),get the state of this object.
"javax.swing.SwingUtilities.getAncestorNamed(java.lang.String,java.awt.Component)",convenience method for searching above comp in the component hierarchy and returns the first object of name it finds.
"javax.swing.SwingUtilities.getAncestorOfClass(java.lang.Class<?>,java.awt.Component)",convenience method for searching above comp in the component hierarchy and returns the first object of class c it finds.
"javax.swing.SwingUtilities.getDeepestComponentAt(java.awt.Component,int,int)","returns the deepest visible descendent component of parent that contains the location x, y."
javax.swing.SwingUtilities.getLocalBounds(java.awt.Component),"return the rectangle (0,0,bounds."
javax.swing.SwingUtilities.getRoot(java.awt.Component),returns the root component for the current component tree.
javax.swing.SwingUtilities.getRootPane(java.awt.Component),if c is a jrootpane descendant return its jrootpane ancestor.
javax.swing.SwingUtilities.getUIActionMap(javax.swing.JComponent),returns the actionmap provided by the ui in component component.
"javax.swing.SwingUtilities.getUIInputMap(javax.swing.JComponent,int)",returns the inputmap provided by the ui for condition condition in component component.
javax.swing.SwingUtilities.getUnwrappedParent(java.awt.Component),returns the first ancestor of the component which is not an instance of jlayer.
javax.swing.SwingUtilities.getUnwrappedView(javax.swing.JViewport),returns the first jviewport's descendant which is not an instance of jlayer.
javax.swing.SwingUtilities.getWindowAncestor(java.awt.Component),"returns the first window ancestor of c, or null if c is not contained inside a window."
javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable),causes dorun.
javax.swing.SwingUtilities.invokeLater(java.lang.Runnable),causes dorun.
"javax.swing.SwingUtilities.isDescendingFrom(java.awt.Component,java.awt.Component)",return true if a component a descends from a component b.
javax.swing.SwingUtilities.isEventDispatchThread(),returns true if the current thread is an awt event dispatching thread.
javax.swing.SwingUtilities.isLeftMouseButton(java.awt.event.MouseEvent),returns true if the mouse event specifies the left mouse button.
javax.swing.SwingUtilities.isMiddleMouseButton(java.awt.event.MouseEvent),returns true if the mouse event specifies the middle mouse button.
"javax.swing.SwingUtilities.isRectangleContainingRectangle(java.awt.Rectangle,java.awt.Rectangle)",return true if a contains b.
javax.swing.SwingUtilities.isRightMouseButton(java.awt.event.MouseEvent),returns true if the mouse event specifies the right mouse button.
"javax.swing.SwingUtilities.layoutCompoundLabel(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)","compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string."
"javax.swing.SwingUtilities.layoutCompoundLabel(java.awt.FontMetrics,java.lang.String,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)","compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string."
"javax.swing.SwingUtilities.notifyAction(javax.swing.Action,javax.swing.KeyStroke,java.awt.event.KeyEvent,java.lang.Object,int)",invokes actionperformed on action if action is enabled (and non-null).
"javax.swing.SwingUtilities.paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,int,int,int,int)",paints a component to the specified graphics.
"javax.swing.SwingUtilities.paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,java.awt.Rectangle)",paints a component to the specified graphics.
javax.swing.SwingUtilities.processKeyBindings(java.awt.event.KeyEvent),process the key bindings for the component associated with event.
"javax.swing.SwingUtilities.replaceUIActionMap(javax.swing.JComponent,javax.swing.ActionMap)",convenience method to change the ui actionmap for component to uiactionmap.
"javax.swing.SwingUtilities.replaceUIInputMap(javax.swing.JComponent,int,javax.swing.InputMap)",convenience method to change the ui inputmap for component to uiinputmap.
javax.swing.SwingUtilities.updateComponentTreeUI(java.awt.Component),"a simple minded look and feel change: ask each node in the tree to updateui() -- that is, to initialize its ui property with the current look and feel."
javax.swing.SwingUtilities.windowForComponent(java.awt.Component),"returns the first window ancestor of c, or null if c is not contained inside a window."
javax.swing.SwingWorker.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
javax.swing.SwingWorker.cancel(boolean),attempts to cancel execution of this task.
javax.swing.SwingWorker.doInBackground(),"computes a result, or throws an exception if unable to do so."
javax.swing.SwingWorker.done(),executed on the event dispatch thread after the doinbackground method is finished.
javax.swing.SwingWorker.execute(),schedules this swingworker for execution on a worker thread.
"javax.swing.SwingWorker.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",reports a bound property update to any registered listeners.
javax.swing.SwingWorker.get(),"waits if necessary for the computation to complete, and then retrieves its result."
"javax.swing.SwingWorker.get(long,java.util.concurrent.TimeUnit)","waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available."
javax.swing.SwingWorker.getProgress(),returns the progress bound property.
javax.swing.SwingWorker.getPropertyChangeSupport(),returns the propertychangesupport for this swingworker.
javax.swing.SwingWorker.getState(),returns the swingworker state bound property.
javax.swing.SwingWorker.isCancelled(),returns true if this task was cancelled before it completed normally.
javax.swing.SwingWorker.isDone(),returns true if this task completed.
javax.swing.SwingWorker.process(java.util.List<javax.swing.SwingWorker>),receives data chunks from the publish method asynchronously on the event dispatch thread.
javax.swing.SwingWorker.publish(javax.swing.SwingWorker...),sends data chunks to the process(java.
javax.swing.SwingWorker.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychangelistener from the listener list.
javax.swing.SwingWorker.run(),sets this future to the result of computation unless it has been cancelled.
javax.swing.SwingWorker.setProgress(int),sets the progress bound property.
javax.swing.Timer.addActionListener(java.awt.event.ActionListener),adds an action listener to the timer.
javax.swing.Timer.fireActionPerformed(java.awt.event.ActionEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.Timer.getActionCommand(),returns the string that will be delivered as the action command in actionevents fired by this timer.
javax.swing.Timer.getActionListeners(),returns an array of all the action listeners registered on this timer.
javax.swing.Timer.getDelay(),"returns the delay, in milliseconds, between firings of action events."
javax.swing.Timer.getInitialDelay(),returns the timer's initial delay.
javax.swing.Timer.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this timer.
javax.swing.Timer.getLogTimers(),returns true if logging is enabled.
javax.swing.Timer.isCoalesce(),returns true if the timer coalesces multiple pending action events.
javax.swing.Timer.isRepeats(),returns true (the default) if the timer will send an action event to its listeners multiple times.
javax.swing.Timer.isRunning(),returns true if the timer is running.
javax.swing.Timer.removeActionListener(java.awt.event.ActionListener),removes the specified action listener from the timer.
javax.swing.Timer.restart(),"restarts the timer, canceling any pending firings and causing it to fire with its initial delay."
javax.swing.Timer.setActionCommand(java.lang.String),sets the string that will be delivered as the action command in actionevents fired by this timer.
javax.swing.Timer.setCoalesce(boolean),sets whether the timer coalesces multiple pending actionevent firings.
javax.swing.Timer.setDelay(int),"sets the timer's between-event delay, the number of milliseconds between successive action events."
javax.swing.Timer.setInitialDelay(int),"sets the timer's initial delay, the time in milliseconds to wait after the timer is started before firing the first event."
javax.swing.Timer.setLogTimers(boolean),enables or disables the timer log.
javax.swing.Timer.setRepeats(boolean),"if flag is false, instructs the timer to send only one action event to its listeners."
javax.swing.Timer.start(),"starts the timer, causing it to start sending action events to its listeners."
javax.swing.Timer.stop(),"stops the timer, causing it to stop sending action events to its listeners."
javax.swing.ToolTipManager.getDismissDelay(),returns the dismissal delay value.
javax.swing.ToolTipManager.getInitialDelay(),returns the initial delay value.
javax.swing.ToolTipManager.getReshowDelay(),returns the reshow delay property.
javax.swing.ToolTipManager.isEnabled(),returns true if this object is enabled.
javax.swing.ToolTipManager.isLightWeightPopupEnabled(),"returns true if lightweight (all-java) tooltips are in use, or false if heavyweight (native peer) tooltips are being used."
javax.swing.ToolTipManager.mouseDragged(java.awt.event.MouseEvent),called when the mouse is pressed and dragged.
javax.swing.ToolTipManager.mouseEntered(java.awt.event.MouseEvent),called when the mouse enters the region of a component.
javax.swing.ToolTipManager.mouseExited(java.awt.event.MouseEvent),called when the mouse exits the region of a component.
javax.swing.ToolTipManager.mouseMoved(java.awt.event.MouseEvent),called when the mouse is moved.
javax.swing.ToolTipManager.mousePressed(java.awt.event.MouseEvent),called when the mouse is pressed.
javax.swing.ToolTipManager.registerComponent(javax.swing.JComponent),registers a component for tooltip management.
javax.swing.ToolTipManager.setDismissDelay(int),specifies the dismissal delay value.
javax.swing.ToolTipManager.setEnabled(boolean),enables or disables the tooltip.
javax.swing.ToolTipManager.setInitialDelay(int),specifies the initial delay value.
javax.swing.ToolTipManager.setLightWeightPopupEnabled(boolean),"when displaying the jtooltip, the tooltipmanager chooses to use a lightweight jpanel if it fits."
javax.swing.ToolTipManager.setReshowDelay(int),used to specify the amount of time before the user has to wait initialdelay milliseconds before a tooltip will be shown.
javax.swing.ToolTipManager.sharedInstance(),returns a shared tooltipmanager instance.
javax.swing.ToolTipManager.unregisterComponent(javax.swing.JComponent),removes a component from tooltip control.
javax.swing.TransferHandler.canImport(javax.swing.TransferHandler.TransferSupport),"this method is called repeatedly during a drag and drop operation to allow the developer to configure properties of, and to return the acceptability of transfers; with a return value of true indicating that the transfer represented by the given transfersupport (which contains all of the details of the transfer) is acceptable at the current time, and a value of false rejecting the transfer."
"javax.swing.TransferHandler.canImport(javax.swing.JComponent,java.awt.datatransfer.DataFlavor[])",indicates whether a component will accept an import of the given set of data flavors prior to actually attempting to import it.
javax.swing.TransferHandler.createTransferable(javax.swing.JComponent),creates a transferable to use as the source for a data transfer.
"javax.swing.TransferHandler.exportAsDrag(javax.swing.JComponent,java.awt.event.InputEvent,int)",causes the swing drag support to be initiated.
"javax.swing.TransferHandler.exportDone(javax.swing.JComponent,java.awt.datatransfer.Transferable,int)",invoked after data has been exported.
"javax.swing.TransferHandler.exportToClipboard(javax.swing.JComponent,java.awt.datatransfer.Clipboard,int)",causes a transfer from the given component to the given clipboard.
javax.swing.TransferHandler.getCopyAction(),returns an action that performs copy operations to the clipboard.
javax.swing.TransferHandler.getCutAction(),returns an action that performs cut operations to the clipboard.
javax.swing.TransferHandler.getDragImage(),returns the drag image.
javax.swing.TransferHandler.getDragImageOffset(),returns an anchor offset for the image to drag.
javax.swing.TransferHandler.getPasteAction(),returns an action that performs paste operations from the clipboard.
javax.swing.TransferHandler.getSourceActions(javax.swing.JComponent),"returns the type of transfer actions supported by the source; any bitwise-or combination of copy, move and link."
javax.swing.TransferHandler.getVisualRepresentation(java.awt.datatransfer.Transferable),returns an object that establishes the look of a transfer.
javax.swing.TransferHandler.importData(javax.swing.TransferHandler.TransferSupport),causes a transfer to occur from a clipboard or a drag and drop operation.
"javax.swing.TransferHandler.importData(javax.swing.JComponent,java.awt.datatransfer.Transferable)",causes a transfer to a component from a clipboard or a dnd drop operation.
javax.swing.TransferHandler.setDragImage(java.awt.Image),sets the drag image parameter.
javax.swing.TransferHandler.setDragImageOffset(java.awt.Point),sets an anchor offset for the image to drag.
javax.swing.TransferHandler.DropLocation.getDropPoint(),"returns the drop point, representing the mouse's current location within the component."
javax.swing.TransferHandler.DropLocation.toString(),returns a string representation of this drop location.
javax.swing.TransferHandler.TransferSupport.getComponent(),returns the target component of this transfer.
javax.swing.TransferHandler.TransferSupport.getDataFlavors(),returns the data flavors for this transfer.
javax.swing.TransferHandler.TransferSupport.getDropAction(),"returns the action chosen for the drop, when this transfersupport represents a drop."
javax.swing.TransferHandler.TransferSupport.getDropLocation(),"returns the current (non-null) drop location for the component, when this transfersupport represents a drop."
javax.swing.TransferHandler.TransferSupport.getSourceDropActions(),"returns the drag source's supported drop actions, when this transfersupport represents a drop."
javax.swing.TransferHandler.TransferSupport.getTransferable(),returns the transferable associated with this transfer.
javax.swing.TransferHandler.TransferSupport.getUserDropAction(),"returns the user drop action for the drop, when this transfersupport represents a drop."
javax.swing.TransferHandler.TransferSupport.isDataFlavorSupported(java.awt.datatransfer.DataFlavor),returns whether or not the given data flavor is supported.
javax.swing.TransferHandler.TransferSupport.isDrop(),returns whether or not this transfersupport represents a drop operation.
javax.swing.TransferHandler.TransferSupport.setDropAction(int),"sets the drop action for the transfer - which must represent a drop - to the given action, instead of the default user drop action."
javax.swing.TransferHandler.TransferSupport.setShowDropLocation(boolean),sets whether or not the drop location should be visually indicated for the transfer - which must represent a drop.
javax.swing.UIDefaults.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
javax.swing.UIDefaults.addResourceBundle(java.lang.String),adds a resource bundle to the list of resource bundles that are searched for localized values.
"javax.swing.UIDefaults.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",support for reporting bound property changes.
javax.swing.UIDefaults.get(java.lang.Object),returns the value for key.
"javax.swing.UIDefaults.get(java.lang.Object,java.util.Locale)",returns the value for key associated with the given locale.
javax.swing.UIDefaults.getBoolean(java.lang.Object),"if the value of key is boolean, return the boolean value, otherwise return false."
"javax.swing.UIDefaults.getBoolean(java.lang.Object,java.util.Locale)","if the value of key for the given locale is boolean, return the boolean value, otherwise return false."
javax.swing.UIDefaults.getBorder(java.lang.Object),"if the value of key is a border return it, otherwise return null."
"javax.swing.UIDefaults.getBorder(java.lang.Object,java.util.Locale)","if the value of key for the given locale is a border return it, otherwise return null."
javax.swing.UIDefaults.getColor(java.lang.Object),"if the value of key is a color return it, otherwise return null."
"javax.swing.UIDefaults.getColor(java.lang.Object,java.util.Locale)","if the value of key for the given locale is a color return it, otherwise return null."
javax.swing.UIDefaults.getDefaultLocale(),returns the default locale.
javax.swing.UIDefaults.getDimension(java.lang.Object),"if the value of key is a dimension return it, otherwise return null."
"javax.swing.UIDefaults.getDimension(java.lang.Object,java.util.Locale)","if the value of key for the given locale is a dimension return it, otherwise return null."
javax.swing.UIDefaults.getFont(java.lang.Object),"if the value of key is a font return it, otherwise return null."
"javax.swing.UIDefaults.getFont(java.lang.Object,java.util.Locale)","if the value of key for the given locale is a font return it, otherwise return null."
javax.swing.UIDefaults.getIcon(java.lang.Object),"if the value of key is an icon return it, otherwise return null."
"javax.swing.UIDefaults.getIcon(java.lang.Object,java.util.Locale)","if the value of key for the given locale is an icon return it, otherwise return null."
javax.swing.UIDefaults.getInsets(java.lang.Object),"if the value of key is an insets return it, otherwise return null."
"javax.swing.UIDefaults.getInsets(java.lang.Object,java.util.Locale)","if the value of key for the given locale is an insets return it, otherwise return null."
javax.swing.UIDefaults.getInt(java.lang.Object),"if the value of key is an integer return its integer value, otherwise return 0."
"javax.swing.UIDefaults.getInt(java.lang.Object,java.util.Locale)","if the value of key for the given locale is an integer return its integer value, otherwise return 0."
javax.swing.UIDefaults.getPropertyChangeListeners(),returns an array of all the propertychangelisteners added to this uidefaults with addpropertychangelistener().
javax.swing.UIDefaults.getString(java.lang.Object),"if the value of key is a string return it, otherwise return null."
"javax.swing.UIDefaults.getString(java.lang.Object,java.util.Locale)","if the value of key for the given locale is a string return it, otherwise return null."
javax.swing.UIDefaults.getUI(javax.swing.JComponent),creates an componentui implementation for the specified component.
"javax.swing.UIDefaults.getUIClass(java.lang.String,java.lang.ClassLoader)",the value of get(uidclassid) must be the string name of a class that implements the corresponding componentui class.
javax.swing.UIDefaults.getUIClass(java.lang.String),returns the l&f class that renders this component.
javax.swing.UIDefaults.getUIError(java.lang.String),"if getui() fails for any reason, it calls this method before returning null."
"javax.swing.UIDefaults.put(java.lang.Object,java.lang.Object)",sets the value of key to value for all locales.
javax.swing.UIDefaults.putDefaults(java.lang.Object[]),puts all of the key/value pairs in the database and unconditionally generates one propertychangeevent.
javax.swing.UIDefaults.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychangelistener from the listener list.
javax.swing.UIDefaults.removeResourceBundle(java.lang.String),removes a resource bundle from the list of resource bundles that are searched for localized defaults.
javax.swing.UIDefaults.setDefaultLocale(java.util.Locale),sets the default locale.
javax.swing.UIDefaults.LazyInputMap.createValue(javax.swing.UIDefaults),creates an inputmap with the bindings that are passed in.
javax.swing.UIDefaults.ProxyLazyValue.createValue(javax.swing.UIDefaults),creates the value retrieved from the uidefaults table.
javax.swing.UIManager.addAuxiliaryLookAndFeel(javax.swing.LookAndFeel),adds a lookandfeel to the list of auxiliary look and feels.
javax.swing.UIManager.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
javax.swing.UIManager.get(java.lang.Object),returns an object from the defaults.
"javax.swing.UIManager.get(java.lang.Object,java.util.Locale)",returns an object from the defaults that is appropriate for the given locale.
javax.swing.UIManager.getAuxiliaryLookAndFeels(),returns the list of auxiliary look and feels (can be null).
javax.swing.UIManager.getBoolean(java.lang.Object),returns a boolean from the defaults which is associated with the key value.
"javax.swing.UIManager.getBoolean(java.lang.Object,java.util.Locale)",returns a boolean from the defaults which is associated with the key value and the given locale.
javax.swing.UIManager.getBorder(java.lang.Object),returns a border from the defaults.
"javax.swing.UIManager.getBorder(java.lang.Object,java.util.Locale)",returns a border from the defaults that is appropriate for the given locale.
javax.swing.UIManager.getColor(java.lang.Object),returns a color from the defaults.
"javax.swing.UIManager.getColor(java.lang.Object,java.util.Locale)",returns a color from the defaults that is appropriate for the given locale.
javax.swing.UIManager.getCrossPlatformLookAndFeelClassName(),returns the name of the lookandfeel class that implements the default cross platform look and feel -- the java look and feel (jlf).
javax.swing.UIManager.getDefaults(),returns the defaults.
javax.swing.UIManager.getDimension(java.lang.Object),returns a dimension from the defaults.
"javax.swing.UIManager.getDimension(java.lang.Object,java.util.Locale)",returns a dimension from the defaults that is appropriate for the given locale.
javax.swing.UIManager.getFont(java.lang.Object),returns a font from the defaults.
"javax.swing.UIManager.getFont(java.lang.Object,java.util.Locale)",returns a font from the defaults that is appropriate for the given locale.
javax.swing.UIManager.getIcon(java.lang.Object),returns an icon from the defaults.
"javax.swing.UIManager.getIcon(java.lang.Object,java.util.Locale)",returns an icon from the defaults that is appropriate for the given locale.
javax.swing.UIManager.getInsets(java.lang.Object),returns an insets object from the defaults.
"javax.swing.UIManager.getInsets(java.lang.Object,java.util.Locale)",returns an insets object from the defaults that is appropriate for the given locale.
javax.swing.UIManager.getInstalledLookAndFeels(),returns an array of lookandfeelinfos representing the lookandfeel implementations currently available.
javax.swing.UIManager.getInt(java.lang.Object),returns an integer from the defaults.
"javax.swing.UIManager.getInt(java.lang.Object,java.util.Locale)",returns an integer from the defaults that is appropriate for the given locale.
javax.swing.UIManager.getLookAndFeel(),returns the current look and feel or null.
javax.swing.UIManager.getLookAndFeelDefaults(),"returns the uidefaults from the current look and feel, that were obtained at the time the look and feel was installed."
javax.swing.UIManager.getPropertyChangeListeners(),returns an array of all the propertychangelisteners added to this uimanager with addpropertychangelistener().
javax.swing.UIManager.getString(java.lang.Object),returns a string from the defaults.
"javax.swing.UIManager.getString(java.lang.Object,java.util.Locale)",returns a string from the defaults that is appropriate for the given locale.
javax.swing.UIManager.getSystemLookAndFeelClassName(),"returns the name of the lookandfeel class that implements the native system look and feel if there is one, otherwise the name of the default cross platform lookandfeel class."
javax.swing.UIManager.getUI(javax.swing.JComponent),returns the appropriate componentui implementation for target.
javax.swing.UIManager.installLookAndFeel(javax.swing.UIManager.LookAndFeelInfo),adds the specified look and feel to the set of available look and feels.
"javax.swing.UIManager.installLookAndFeel(java.lang.String,java.lang.String)",adds the specified look and feel to the set of available look and feels.
"javax.swing.UIManager.put(java.lang.Object,java.lang.Object)",stores an object in the developer defaults.
javax.swing.UIManager.removeAuxiliaryLookAndFeel(javax.swing.LookAndFeel),removes a lookandfeel from the list of auxiliary look and feels.
javax.swing.UIManager.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychangelistener from the listener list.
javax.swing.UIManager.setInstalledLookAndFeels(javax.swing.UIManager.LookAndFeelInfo[]),sets the set of available look and feels.
javax.swing.UIManager.setLookAndFeel(javax.swing.LookAndFeel),sets the current look and feel to newlookandfeel.
javax.swing.UIManager.setLookAndFeel(java.lang.String),"loads the lookandfeel specified by the given class name, using the current thread's context class loader, and passes it to setlookandfeel(lookandfeel)."
javax.swing.UIManager.LookAndFeelInfo.getClassName(),returns the name of the class that implements this look and feel.
javax.swing.UIManager.LookAndFeelInfo.getName(),returns the name of the look and feel in a form suitable for a menu or other presentation.
javax.swing.UIManager.LookAndFeelInfo.toString(),returns a string that displays and identifies this object's properties.
"javax.swing.ViewportLayout.addLayoutComponent(java.lang.String,java.awt.Component)",adds the specified component to the layout.
javax.swing.ViewportLayout.layoutContainer(java.awt.Container),called by the awt when the specified container needs to be laid out.
javax.swing.ViewportLayout.minimumLayoutSize(java.awt.Container),returns the minimum dimensions needed to layout the components contained in the specified target container.
javax.swing.ViewportLayout.preferredLayoutSize(java.awt.Container),returns the preferred dimensions for this layout given the components in the specified target container.
javax.swing.ViewportLayout.removeLayoutComponent(java.awt.Component),removes the specified component from the layout.
javax.swing.DropMode.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.swing.DropMode.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.swing.GroupLayout.Alignment.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.swing.GroupLayout.Alignment.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.swing.JTable.PrintMode.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.swing.JTable.PrintMode.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.swing.LayoutStyle.ComponentPlacement.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.swing.LayoutStyle.ComponentPlacement.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.swing.RowFilter.ComparisonType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.swing.RowFilter.ComparisonType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.swing.SortOrder.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.swing.SortOrder.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.swing.SwingWorker.StateValue.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.swing.SwingWorker.StateValue.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.swing.border.Border.getBorderInsets(java.awt.Component),returns the insets of the border.
javax.swing.border.Border.isBorderOpaque(),returns whether or not the border is opaque.
"javax.swing.border.Border.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)",paints the border for the specified component with the specified position and size.
"javax.swing.border.AbstractBorder.getBaseline(java.awt.Component,int,int)",returns the baseline.
javax.swing.border.AbstractBorder.getBaselineResizeBehavior(java.awt.Component),returns an enum indicating how the baseline of a component changes as the size changes.
javax.swing.border.AbstractBorder.getBorderInsets(java.awt.Component),"this default implementation returns a new insets object that is initialized by the getborderinsets(component,insets) method."
"javax.swing.border.AbstractBorder.getBorderInsets(java.awt.Component,java.awt.Insets)",reinitializes the insets parameter with this border's current insets.
"javax.swing.border.AbstractBorder.getInteriorRectangle(java.awt.Component,int,int,int,int)",this convenience method calls the static method.
"javax.swing.border.AbstractBorder.getInteriorRectangle(java.awt.Component,javax.swing.border.Border,int,int,int,int)",returns a rectangle using the arguments minus the insets of the border.
javax.swing.border.AbstractBorder.isBorderOpaque(),this default implementation returns false.
"javax.swing.border.AbstractBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)",this default implementation does no painting.
javax.swing.border.BevelBorder.getBevelType(),returns the type of the bevel border.
"javax.swing.border.BevelBorder.getBorderInsets(java.awt.Component,java.awt.Insets)",reinitialize the insets parameter with this border's current insets.
javax.swing.border.BevelBorder.getHighlightInnerColor(java.awt.Component),returns the inner highlight color of the bevel border when rendered on the specified component.
javax.swing.border.BevelBorder.getHighlightInnerColor(),returns the inner highlight color of the bevel border.
javax.swing.border.BevelBorder.getHighlightOuterColor(java.awt.Component),returns the outer highlight color of the bevel border when rendered on the specified component.
javax.swing.border.BevelBorder.getHighlightOuterColor(),returns the outer highlight color of the bevel border.
javax.swing.border.BevelBorder.getShadowInnerColor(java.awt.Component),returns the inner shadow color of the bevel border when rendered on the specified component.
javax.swing.border.BevelBorder.getShadowInnerColor(),returns the inner shadow color of the bevel border.
javax.swing.border.BevelBorder.getShadowOuterColor(java.awt.Component),returns the outer shadow color of the bevel border when rendered on the specified component.
javax.swing.border.BevelBorder.getShadowOuterColor(),returns the outer shadow color of the bevel border.
javax.swing.border.BevelBorder.isBorderOpaque(),returns whether or not the border is opaque.
"javax.swing.border.BevelBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)",paints the border for the specified component with the specified position and size.
"javax.swing.border.CompoundBorder.getBorderInsets(java.awt.Component,java.awt.Insets)",reinitialize the insets parameter with this border's current insets.
javax.swing.border.CompoundBorder.getInsideBorder(),returns the inside border object.
javax.swing.border.CompoundBorder.getOutsideBorder(),returns the outside border object.
javax.swing.border.CompoundBorder.isBorderOpaque(),returns whether or not the compound border is opaque.
"javax.swing.border.CompoundBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)",paints the compound border by painting the outside border with the specified position and size and then painting the inside border at the specified position and size offset by the insets of the outside border.
"javax.swing.border.EmptyBorder.getBorderInsets(java.awt.Component,java.awt.Insets)",reinitialize the insets parameter with this border's current insets.
javax.swing.border.EmptyBorder.getBorderInsets(),returns the insets of the border.
javax.swing.border.EmptyBorder.isBorderOpaque(),returns whether or not the border is opaque.
"javax.swing.border.EmptyBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)",does no drawing by default.
"javax.swing.border.EtchedBorder.getBorderInsets(java.awt.Component,java.awt.Insets)",reinitialize the insets parameter with this border's current insets.
javax.swing.border.EtchedBorder.getEtchType(),returns which etch-type is set on the etched border.
javax.swing.border.EtchedBorder.getHighlightColor(java.awt.Component),returns the highlight color of the etched border when rendered on the specified component.
javax.swing.border.EtchedBorder.getHighlightColor(),returns the highlight color of the etched border.
javax.swing.border.EtchedBorder.getShadowColor(java.awt.Component),returns the shadow color of the etched border when rendered on the specified component.
javax.swing.border.EtchedBorder.getShadowColor(),returns the shadow color of the etched border.
javax.swing.border.EtchedBorder.isBorderOpaque(),returns whether or not the border is opaque.
"javax.swing.border.EtchedBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)",paints the border for the specified component with the specified position and size.
javax.swing.border.LineBorder.createBlackLineBorder(),convenience method for getting the color.
javax.swing.border.LineBorder.createGrayLineBorder(),convenience method for getting the color.
"javax.swing.border.LineBorder.getBorderInsets(java.awt.Component,java.awt.Insets)",reinitialize the insets parameter with this border's current insets.
javax.swing.border.LineBorder.getLineColor(),returns the color of the border.
javax.swing.border.LineBorder.getRoundedCorners(),returns whether this border will be drawn with rounded corners.
javax.swing.border.LineBorder.getThickness(),returns the thickness of the border.
javax.swing.border.LineBorder.isBorderOpaque(),returns whether or not the border is opaque.
"javax.swing.border.LineBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)",paints the border for the specified component with the specified position and size.
"javax.swing.border.MatteBorder.getBorderInsets(java.awt.Component,java.awt.Insets)",reinitialize the insets parameter with this border's current insets.
javax.swing.border.MatteBorder.getBorderInsets(),returns the insets of the border.
javax.swing.border.MatteBorder.getMatteColor(),returns the color used for tiling the border or null if a tile icon is being used.
javax.swing.border.MatteBorder.getTileIcon(),returns the icon used for tiling the border or null if a solid color is being used.
javax.swing.border.MatteBorder.isBorderOpaque(),returns whether or not the border is opaque.
"javax.swing.border.MatteBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)",paints the matte border.
"javax.swing.border.SoftBevelBorder.getBorderInsets(java.awt.Component,java.awt.Insets)",reinitialize the insets parameter with this border's current insets.
javax.swing.border.SoftBevelBorder.isBorderOpaque(),returns whether or not the border is opaque.
"javax.swing.border.SoftBevelBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)",paints the border for the specified component with the specified position and size.
"javax.swing.border.StrokeBorder.getBorderInsets(java.awt.Component,java.awt.Insets)",reinitializes the insets parameter with this border's current insets.
javax.swing.border.StrokeBorder.getPaint(),returns the paint object used to generate a color during the border rendering.
javax.swing.border.StrokeBorder.getStroke(),returns the basicstroke object used to stroke a shape during the border rendering.
"javax.swing.border.StrokeBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)",paints the border for the specified component with the specified position and size.
"javax.swing.border.TitledBorder.getBaseline(java.awt.Component,int,int)",returns the baseline.
javax.swing.border.TitledBorder.getBaselineResizeBehavior(java.awt.Component),returns an enum indicating how the baseline of the border changes as the size changes.
javax.swing.border.TitledBorder.getBorder(),returns the border of the titled border.
"javax.swing.border.TitledBorder.getBorderInsets(java.awt.Component,java.awt.Insets)",reinitialize the insets parameter with this border's current insets.
javax.swing.border.TitledBorder.getMinimumSize(java.awt.Component),returns the minimum dimensions this border requires in order to fully display the border and title.
javax.swing.border.TitledBorder.getTitle(),returns the title of the titled border.
javax.swing.border.TitledBorder.getTitleColor(),returns the title-color of the titled border.
javax.swing.border.TitledBorder.getTitleFont(),returns the title-font of the titled border.
javax.swing.border.TitledBorder.getTitleJustification(),returns the title-justification of the titled border.
javax.swing.border.TitledBorder.getTitlePosition(),returns the title-position of the titled border.
javax.swing.border.TitledBorder.isBorderOpaque(),returns whether or not the border is opaque.
"javax.swing.border.TitledBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)",paints the border for the specified component with the specified position and size.
javax.swing.border.TitledBorder.setBorder(javax.swing.border.Border),sets the border of the titled border.
javax.swing.border.TitledBorder.setTitle(java.lang.String),sets the title of the titled border.
javax.swing.border.TitledBorder.setTitleColor(java.awt.Color),sets the title-color of the titled border.
javax.swing.border.TitledBorder.setTitleFont(java.awt.Font),sets the title-font of the titled border.
javax.swing.border.TitledBorder.setTitleJustification(int),sets the title-justification of the titled border.
javax.swing.border.TitledBorder.setTitlePosition(int),sets the title-position of the titled border.
javax.swing.colorchooser.ColorSelectionModel.addChangeListener(javax.swing.event.ChangeListener),adds listener as a listener to changes in the model.
javax.swing.colorchooser.ColorSelectionModel.getSelectedColor(),returns the selected color which should be non-null.
javax.swing.colorchooser.ColorSelectionModel.removeChangeListener(javax.swing.event.ChangeListener),removes listener as a listener to changes in the model.
javax.swing.colorchooser.ColorSelectionModel.setSelectedColor(java.awt.Color),sets the selected color to color.
javax.swing.colorchooser.AbstractColorChooserPanel.buildChooser(),builds a new chooser panel.
javax.swing.colorchooser.AbstractColorChooserPanel.getColorFromModel(),returns the color that is currently selected.
javax.swing.colorchooser.AbstractColorChooserPanel.getColorSelectionModel(),returns the model that the chooser panel is editing.
javax.swing.colorchooser.AbstractColorChooserPanel.getDisplayedMnemonicIndex(),provides a hint to the look and feel as to the index of the character in getdisplayname that should be visually identified as the mnemonic.
javax.swing.colorchooser.AbstractColorChooserPanel.getDisplayName(),returns a string containing the display name of the panel.
javax.swing.colorchooser.AbstractColorChooserPanel.getLargeDisplayIcon(),returns the large display icon for the panel.
javax.swing.colorchooser.AbstractColorChooserPanel.getMnemonic(),provides a hint to the look and feel as to the keyevent.
javax.swing.colorchooser.AbstractColorChooserPanel.getSmallDisplayIcon(),returns the small display icon for the panel.
javax.swing.colorchooser.AbstractColorChooserPanel.installChooserPanel(javax.swing.JColorChooser),invoked when the panel is added to the chooser.
javax.swing.colorchooser.AbstractColorChooserPanel.paint(java.awt.Graphics),draws the panel.
javax.swing.colorchooser.AbstractColorChooserPanel.uninstallChooserPanel(javax.swing.JColorChooser),invoked when the panel is removed from the chooser.
javax.swing.colorchooser.AbstractColorChooserPanel.updateChooser(),invoked automatically when the model's state changes.
javax.swing.colorchooser.DefaultColorSelectionModel.addChangeListener(javax.swing.event.ChangeListener),adds a changelistener to the model.
javax.swing.colorchooser.DefaultColorSelectionModel.fireStateChanged(),runs each changelistener's statechanged method.
javax.swing.colorchooser.DefaultColorSelectionModel.getChangeListeners(),returns an array of all the changelisteners added to this defaultcolorselectionmodel with addchangelistener.
javax.swing.colorchooser.DefaultColorSelectionModel.getSelectedColor(),returns the selected color which should be non-null.
javax.swing.colorchooser.DefaultColorSelectionModel.removeChangeListener(javax.swing.event.ChangeListener),removes a changelistener from the model.
javax.swing.colorchooser.DefaultColorSelectionModel.setSelectedColor(java.awt.Color),sets the selected color to color.
javax.swing.event.AncestorListener.ancestorAdded(javax.swing.event.AncestorEvent),called when the source or one of its ancestors is made visible either by setvisible(true) being called or by its being added to the component hierarchy.
javax.swing.event.AncestorListener.ancestorMoved(javax.swing.event.AncestorEvent),called when either the source or one of its ancestors is moved.
javax.swing.event.AncestorListener.ancestorRemoved(javax.swing.event.AncestorEvent),called when the source or one of its ancestors is made invisible either by setvisible(false) being called or by its being remove from the component hierarchy.
javax.swing.event.CaretListener.caretUpdate(javax.swing.event.CaretEvent),called when the caret position is updated.
javax.swing.event.CellEditorListener.editingCanceled(javax.swing.event.ChangeEvent),this tells the listeners the editor has canceled editing.
javax.swing.event.CellEditorListener.editingStopped(javax.swing.event.ChangeEvent),this tells the listeners the editor has ended editing.
javax.swing.event.ChangeListener.stateChanged(javax.swing.event.ChangeEvent),invoked when the target of the listener has changed its state.
javax.swing.event.DocumentEvent.getChange(javax.swing.text.Element),gets the change information for the given element.
javax.swing.event.DocumentEvent.getDocument(),gets the document that sourced the change event.
javax.swing.event.DocumentEvent.getLength(),returns the length of the change.
javax.swing.event.DocumentEvent.getOffset(),returns the offset within the document of the start of the change.
javax.swing.event.DocumentEvent.getType(),gets the type of event.
javax.swing.event.DocumentEvent.ElementChange.getChildrenAdded(),gets the child elements that were added to the given parent element.
javax.swing.event.DocumentEvent.ElementChange.getChildrenRemoved(),gets the child elements that were removed from the given parent element.
javax.swing.event.DocumentEvent.ElementChange.getElement(),returns the element represented.
javax.swing.event.DocumentEvent.ElementChange.getIndex(),fetches the index within the element represented.
javax.swing.event.DocumentListener.changedUpdate(javax.swing.event.DocumentEvent),gives notification that an attribute or set of attributes changed.
javax.swing.event.DocumentListener.insertUpdate(javax.swing.event.DocumentEvent),gives notification that there was an insert into the document.
javax.swing.event.DocumentListener.removeUpdate(javax.swing.event.DocumentEvent),gives notification that a portion of the document has been removed.
javax.swing.event.HyperlinkListener.hyperlinkUpdate(javax.swing.event.HyperlinkEvent),called when a hypertext link is updated.
javax.swing.event.InternalFrameListener.internalFrameActivated(javax.swing.event.InternalFrameEvent),invoked when an internal frame is activated.
javax.swing.event.InternalFrameListener.internalFrameClosed(javax.swing.event.InternalFrameEvent),invoked when an internal frame has been closed.
javax.swing.event.InternalFrameListener.internalFrameClosing(javax.swing.event.InternalFrameEvent),invoked when an internal frame is in the process of being closed.
javax.swing.event.InternalFrameListener.internalFrameDeactivated(javax.swing.event.InternalFrameEvent),invoked when an internal frame is de-activated.
javax.swing.event.InternalFrameListener.internalFrameDeiconified(javax.swing.event.InternalFrameEvent),invoked when an internal frame is de-iconified.
javax.swing.event.InternalFrameListener.internalFrameIconified(javax.swing.event.InternalFrameEvent),invoked when an internal frame is iconified.
javax.swing.event.InternalFrameListener.internalFrameOpened(javax.swing.event.InternalFrameEvent),invoked when a internal frame has been opened.
javax.swing.event.ListDataListener.contentsChanged(javax.swing.event.ListDataEvent),sent when the contents of the list has changed in a way that's too complex to characterize with the previous methods.
javax.swing.event.ListDataListener.intervalAdded(javax.swing.event.ListDataEvent),"sent after the indices in the index0,index1 interval have been inserted in the data model."
javax.swing.event.ListDataListener.intervalRemoved(javax.swing.event.ListDataEvent),"sent after the indices in the index0,index1 interval have been removed from the data model."
javax.swing.event.ListSelectionListener.valueChanged(javax.swing.event.ListSelectionEvent),called whenever the value of the selection changes.
javax.swing.event.MenuDragMouseListener.menuDragMouseDragged(javax.swing.event.MenuDragMouseEvent),invoked when the mouse is being dragged in a menu component's display area.
javax.swing.event.MenuDragMouseListener.menuDragMouseEntered(javax.swing.event.MenuDragMouseEvent),invoked when the dragged mouse has entered a menu component's display area.
javax.swing.event.MenuDragMouseListener.menuDragMouseExited(javax.swing.event.MenuDragMouseEvent),invoked when the dragged mouse has left a menu component's display area.
javax.swing.event.MenuDragMouseListener.menuDragMouseReleased(javax.swing.event.MenuDragMouseEvent),invoked when a dragged mouse is release in a menu component's display area.
javax.swing.event.MenuKeyListener.menuKeyPressed(javax.swing.event.MenuKeyEvent),invoked when a key has been pressed.
javax.swing.event.MenuKeyListener.menuKeyReleased(javax.swing.event.MenuKeyEvent),invoked when a key has been released.
javax.swing.event.MenuKeyListener.menuKeyTyped(javax.swing.event.MenuKeyEvent),invoked when a key has been typed.
javax.swing.event.MenuListener.menuCanceled(javax.swing.event.MenuEvent),invoked when the menu is canceled.
javax.swing.event.MenuListener.menuDeselected(javax.swing.event.MenuEvent),invoked when the menu is deselected.
javax.swing.event.MenuListener.menuSelected(javax.swing.event.MenuEvent),invoked when a menu is selected.
javax.swing.event.PopupMenuListener.popupMenuCanceled(javax.swing.event.PopupMenuEvent),this method is called when the popup menu is canceled.
javax.swing.event.PopupMenuListener.popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent),this method is called before the popup menu becomes invisible note that a jpopupmenu can become invisible any time.
javax.swing.event.PopupMenuListener.popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent),this method is called before the popup menu becomes visible.
javax.swing.event.RowSorterListener.sorterChanged(javax.swing.event.RowSorterEvent),notification that the rowsorter has changed.
javax.swing.event.TableColumnModelListener.columnAdded(javax.swing.event.TableColumnModelEvent),tells listeners that a column was added to the model.
javax.swing.event.TableColumnModelListener.columnMarginChanged(javax.swing.event.ChangeEvent),tells listeners that a column was moved due to a margin change.
javax.swing.event.TableColumnModelListener.columnMoved(javax.swing.event.TableColumnModelEvent),tells listeners that a column was repositioned.
javax.swing.event.TableColumnModelListener.columnRemoved(javax.swing.event.TableColumnModelEvent),tells listeners that a column was removed from the model.
javax.swing.event.TableColumnModelListener.columnSelectionChanged(javax.swing.event.ListSelectionEvent),tells listeners that the selection model of the tablecolumnmodel changed.
javax.swing.event.TableModelListener.tableChanged(javax.swing.event.TableModelEvent),"this fine grain notification tells listeners the exact range of cells, rows, or columns that changed."
javax.swing.event.TreeExpansionListener.treeCollapsed(javax.swing.event.TreeExpansionEvent),called whenever an item in the tree has been collapsed.
javax.swing.event.TreeExpansionListener.treeExpanded(javax.swing.event.TreeExpansionEvent),called whenever an item in the tree has been expanded.
javax.swing.event.TreeModelListener.treeNodesChanged(javax.swing.event.TreeModelEvent),invoked after a node (or a set of siblings) has changed in some way.
javax.swing.event.TreeModelListener.treeNodesInserted(javax.swing.event.TreeModelEvent),invoked after nodes have been inserted into the tree.
javax.swing.event.TreeModelListener.treeNodesRemoved(javax.swing.event.TreeModelEvent),invoked after nodes have been removed from the tree.
javax.swing.event.TreeModelListener.treeStructureChanged(javax.swing.event.TreeModelEvent),invoked after the tree has drastically changed structure from a given node down.
javax.swing.event.TreeSelectionListener.valueChanged(javax.swing.event.TreeSelectionEvent),called whenever the value of the selection changes.
javax.swing.event.TreeWillExpandListener.treeWillCollapse(javax.swing.event.TreeExpansionEvent),invoked whenever a node in the tree is about to be collapsed.
javax.swing.event.TreeWillExpandListener.treeWillExpand(javax.swing.event.TreeExpansionEvent),invoked whenever a node in the tree is about to be expanded.
javax.swing.event.UndoableEditListener.undoableEditHappened(javax.swing.event.UndoableEditEvent),an undoable edit happened.
javax.swing.event.AncestorEvent.getAncestor(),returns the ancestor that the event actually occurred on.
javax.swing.event.AncestorEvent.getAncestorParent(),returns the parent of the ancestor the event actually occurred on.
javax.swing.event.AncestorEvent.getComponent(),returns the component that the listener was added to.
javax.swing.event.CaretEvent.getDot(),fetches the location of the caret.
javax.swing.event.CaretEvent.getMark(),fetches the location of other end of a logical selection.
javax.swing.event.DocumentEvent.EventType.toString(),converts the type to a string.
"javax.swing.event.EventListenerList.add(java.lang.Class<T>,T)",adds the listener as a listener of the specified type.
javax.swing.event.EventListenerList.getListenerCount(),returns the total number of listeners for this listener list.
javax.swing.event.EventListenerList.getListenerCount(java.lang.Class<?>),returns the total number of listeners of the supplied type for this listener list.
javax.swing.event.EventListenerList.getListenerList(),passes back the event listener list as an array of listenertype-listener pairs.
javax.swing.event.EventListenerList.getListeners(java.lang.Class<T>),return an array of all the listeners of the given type.
"javax.swing.event.EventListenerList.remove(java.lang.Class<T>,T)",removes the listener as a listener of the specified type.
javax.swing.event.EventListenerList.toString(),returns a string representation of the eventlistenerlist.
javax.swing.event.HyperlinkEvent.getDescription(),get the description of the link as a string.
javax.swing.event.HyperlinkEvent.getEventType(),gets the type of event.
javax.swing.event.HyperlinkEvent.getInputEvent(),returns the inputevent that triggered the hyperlink event.
javax.swing.event.HyperlinkEvent.getSourceElement(),returns the element that corresponds to the source of the event.
javax.swing.event.HyperlinkEvent.getURL(),gets the url that the link refers to.
javax.swing.event.HyperlinkEvent.EventType.toString(),converts the type to a string.
javax.swing.event.InternalFrameAdapter.internalFrameActivated(javax.swing.event.InternalFrameEvent),invoked when an internal frame is activated.
javax.swing.event.InternalFrameAdapter.internalFrameClosed(javax.swing.event.InternalFrameEvent),invoked when an internal frame has been closed.
javax.swing.event.InternalFrameAdapter.internalFrameClosing(javax.swing.event.InternalFrameEvent),invoked when an internal frame is in the process of being closed.
javax.swing.event.InternalFrameAdapter.internalFrameDeactivated(javax.swing.event.InternalFrameEvent),invoked when an internal frame is de-activated.
javax.swing.event.InternalFrameAdapter.internalFrameDeiconified(javax.swing.event.InternalFrameEvent),invoked when an internal frame is de-iconified.
javax.swing.event.InternalFrameAdapter.internalFrameIconified(javax.swing.event.InternalFrameEvent),invoked when an internal frame is iconified.
javax.swing.event.InternalFrameAdapter.internalFrameOpened(javax.swing.event.InternalFrameEvent),invoked when an internal frame has been opened.
javax.swing.event.InternalFrameEvent.getInternalFrame(),returns the originator of the event.
javax.swing.event.InternalFrameEvent.paramString(),returns a parameter string identifying this event.
javax.swing.event.ListDataEvent.getIndex0(),returns the lower index of the range.
javax.swing.event.ListDataEvent.getIndex1(),returns the upper index of the range.
javax.swing.event.ListDataEvent.getType(),returns the event type.
javax.swing.event.ListDataEvent.toString(),returns a string representation of this listdataevent.
javax.swing.event.ListSelectionEvent.getFirstIndex(),returns the index of the first row whose selection may have changed.
javax.swing.event.ListSelectionEvent.getLastIndex(),returns the index of the last row whose selection may have changed.
javax.swing.event.ListSelectionEvent.getValueIsAdjusting(),"returns whether or not this is one in a series of multiple events, where changes are still being made."
javax.swing.event.ListSelectionEvent.toString(),returns a string that displays and identifies this object's properties.
javax.swing.event.MenuDragMouseEvent.getMenuSelectionManager(),returns the current menu selection manager.
javax.swing.event.MenuDragMouseEvent.getPath(),returns the path to the selected menu item.
javax.swing.event.MenuKeyEvent.getMenuSelectionManager(),returns the current menu selection manager.
javax.swing.event.MenuKeyEvent.getPath(),returns the path to the menu item referenced by this event.
javax.swing.event.RowSorterEvent.convertPreviousRowIndexToModel(int),returns the location of index in terms of the model prior to the sort.
javax.swing.event.RowSorterEvent.getPreviousRowCount(),returns the number of rows before the sort.
javax.swing.event.RowSorterEvent.getSource(),returns the source of the event as a rowsorter.
javax.swing.event.RowSorterEvent.getType(),returns the type of event.
javax.swing.event.SwingPropertyChangeSupport.firePropertyChange(java.beans.PropertyChangeEvent),fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name.
javax.swing.event.SwingPropertyChangeSupport.isNotifyOnEDT(),returns notifyonedt property.
javax.swing.event.TableColumnModelEvent.getFromIndex(),returns the fromindex.
javax.swing.event.TableColumnModelEvent.getToIndex(),returns the toindex.
javax.swing.event.TableModelEvent.getColumn(),returns the column for the event.
javax.swing.event.TableModelEvent.getFirstRow(),returns the first row that changed.
javax.swing.event.TableModelEvent.getLastRow(),returns the last row that changed.
javax.swing.event.TableModelEvent.getType(),"returns the type of event - one of: insert, update and delete."
javax.swing.event.TreeExpansionEvent.getPath(),returns the path to the value that has been expanded/collapsed.
javax.swing.event.TreeModelEvent.getChildIndices(),returns the values of the child indexes.
javax.swing.event.TreeModelEvent.getChildren(),returns the objects that are children of the node identified by getpath at the locations specified by getchildindices.
javax.swing.event.TreeModelEvent.getPath(),convenience method to get the array of objects from the treepath instance that this event wraps.
javax.swing.event.TreeModelEvent.getTreePath(),"for all events, except treestructurechanged, returns the parent of the changed nodes."
javax.swing.event.TreeModelEvent.toString(),returns a string that displays and identifies this object's properties.
javax.swing.event.TreeSelectionEvent.cloneWithSource(java.lang.Object),"returns a copy of the receiver, but with the source being newsource."
javax.swing.event.TreeSelectionEvent.getNewLeadSelectionPath(),returns the current lead path.
javax.swing.event.TreeSelectionEvent.getOldLeadSelectionPath(),returns the path that was previously the lead path.
javax.swing.event.TreeSelectionEvent.getPath(),returns the first path element.
javax.swing.event.TreeSelectionEvent.getPaths(),returns the paths that have been added or removed from the selection.
javax.swing.event.TreeSelectionEvent.isAddedPath(),returns whether the path identified by getpath was added to the selection.
javax.swing.event.TreeSelectionEvent.isAddedPath(javax.swing.tree.TreePath),returns whether the specified path was added to the selection.
javax.swing.event.TreeSelectionEvent.isAddedPath(int),returns whether the path at getpaths()[index] was added to the selection.
javax.swing.event.UndoableEditEvent.getEdit(),returns the edit value.
javax.swing.event.RowSorterEvent.Type.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.swing.event.RowSorterEvent.Type.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.swing.filechooser.FileFilter.accept(java.io.File),whether the given file is accepted by this filter.
javax.swing.filechooser.FileFilter.getDescription(),the description of this filter.
javax.swing.filechooser.FileNameExtensionFilter.accept(java.io.File),"tests the specified file, returning true if the file is accepted, false otherwise."
javax.swing.filechooser.FileNameExtensionFilter.getDescription(),the description of this filter.
javax.swing.filechooser.FileNameExtensionFilter.getExtensions(),returns the set of file name extensions files are tested against.
javax.swing.filechooser.FileNameExtensionFilter.toString(),returns a string representation of the filenameextensionfilter.
"javax.swing.filechooser.FileSystemView.createFileObject(java.io.File,java.lang.String)",returns a file object constructed in dir from the given filename.
javax.swing.filechooser.FileSystemView.createFileObject(java.lang.String),returns a file object constructed from the given path string.
javax.swing.filechooser.FileSystemView.createFileSystemRoot(java.io.File),creates a new file object for f with correct behavior for a file system root directory.
javax.swing.filechooser.FileSystemView.createNewFolder(java.io.File),creates a new folder with a default folder name.
javax.swing.filechooser.FileSystemView.getDefaultDirectory(),return the user's default starting directory for the file chooser.
"javax.swing.filechooser.FileSystemView.getFiles(java.io.File,boolean)",gets the list of shown (i.
javax.swing.filechooser.FileSystemView.getParentDirectory(java.io.File),returns the parent directory of dir.
javax.swing.filechooser.FileSystemView.getRoots(),returns all root partitions on this system.
javax.swing.filechooser.FileSystemView.getSystemDisplayName(java.io.File),"name of a file, directory, or folder as it would be displayed in a system file browser."
javax.swing.filechooser.FileSystemView.getSystemIcon(java.io.File),"icon for a file, directory, or folder as it would be displayed in a system file browser."
javax.swing.filechooser.FileSystemView.getSystemTypeDescription(java.io.File),"type description for a file, directory, or folder as it would be displayed in a system file browser."
javax.swing.filechooser.FileSystemView.isComputerNode(java.io.File),"used by ui classes to decide whether to display a special icon for a computer node, e."
javax.swing.filechooser.FileSystemView.isDrive(java.io.File),"used by ui classes to decide whether to display a special icon for drives or partitions, e."
javax.swing.filechooser.FileSystemView.isFileSystem(java.io.File),"checks if f represents a real directory or file as opposed to a special folder such as ""desktop""."
javax.swing.filechooser.FileSystemView.isFileSystemRoot(java.io.File),"is dir the root of a tree in the file system, such as a drive or partition."
javax.swing.filechooser.FileSystemView.isFloppyDrive(java.io.File),used by ui classes to decide whether to display a special icon for a floppy disk.
javax.swing.filechooser.FileSystemView.isHiddenFile(java.io.File),returns whether a file is hidden or not.
"javax.swing.filechooser.FileSystemView.isParent(java.io.File,java.io.File)","on windows, a file can appear in multiple folders, other than its parent directory in the filesystem."
javax.swing.filechooser.FileSystemView.isRoot(java.io.File),determines if the given file is a root in the navigable tree(s).
javax.swing.filechooser.FileSystemView.isTraversable(java.io.File),returns true if the file (directory) can be visited.
javax.swing.filechooser.FileView.getDescription(java.io.File),a human readable description of the file.
javax.swing.filechooser.FileView.getIcon(java.io.File),the icon that represents this file in the jfilechooser.
javax.swing.filechooser.FileView.getName(java.io.File),the name of the file.
javax.swing.filechooser.FileView.getTypeDescription(java.io.File),a human readable description of the type of the file.
javax.swing.filechooser.FileView.isTraversable(java.io.File),whether the directory is traversable or not.
javax.swing.plaf.ComboBoxUI.isFocusTraversable(javax.swing.JComboBox),determine whether or not the combo box itself is traversable.
javax.swing.plaf.ComboBoxUI.isPopupVisible(javax.swing.JComboBox),determine the visibility of the popup.
"javax.swing.plaf.ComboBoxUI.setPopupVisible(javax.swing.JComboBox,boolean)",set the visibility of the popup.
"javax.swing.plaf.ComponentUI.contains(javax.swing.JComponent,int,int)","returns true if the specified x,y location is contained within the look and feel's defined shape of the specified component."
javax.swing.plaf.ComponentUI.createUI(javax.swing.JComponent),returns an instance of the ui delegate for the specified component.
"javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",returns the ith accessible child of the object.
javax.swing.plaf.ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent),returns the number of accessible children in the object.
"javax.swing.plaf.ComponentUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.ComponentUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of he component changes as the size changes.
javax.swing.plaf.ComponentUI.getMaximumSize(javax.swing.JComponent),returns the specified component's maximum size appropriate for the look and feel.
javax.swing.plaf.ComponentUI.getMinimumSize(javax.swing.JComponent),returns the specified component's minimum size appropriate for the look and feel.
javax.swing.plaf.ComponentUI.getPreferredSize(javax.swing.JComponent),returns the specified component's preferred size appropriate for the look and feel.
javax.swing.plaf.ComponentUI.installUI(javax.swing.JComponent),configures the specified component appropriately for the look and feel.
"javax.swing.plaf.ComponentUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component appropriately for the look and feel.
javax.swing.plaf.ComponentUI.uninstallUI(javax.swing.JComponent),reverses configuration which was done on the specified component during installui.
"javax.swing.plaf.ComponentUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate that it is time to paint the specified component.
javax.swing.plaf.FileChooserUI.getDefaultButton(javax.swing.JFileChooser),returns default button for current lookandfeel.
javax.swing.plaf.LayerUI.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
"javax.swing.plaf.LayerUI.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",adds a propertychangelistener to the listener list for a specific property.
"javax.swing.plaf.LayerUI.applyPropertyChange(java.beans.PropertyChangeEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)",notifies the layerui when any of its property are changed and enables updating every jlayer this layerui instance is set to.
javax.swing.plaf.LayerUI.doLayout(javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>),causes the passed instance of jlayer to lay out its components.
"javax.swing.plaf.LayerUI.eventDispatched(java.awt.AWTEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)",processes awtevents for jlayer and all its descendants to this layerui instance.
"javax.swing.plaf.LayerUI.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",support for reporting bound property changes for object properties.
"javax.swing.plaf.LayerUI.getBaseline(javax.swing.JComponent,int,int)","if the jlayer's view component is not null, this calls the view's getbaseline() method."
javax.swing.plaf.LayerUI.getBaselineResizeBehavior(javax.swing.JComponent),"if the jlayer's view component is not null, this returns the result of the view's getbaselineresizebehavior() method."
javax.swing.plaf.LayerUI.getMaximumSize(javax.swing.JComponent),"if the jlayer's view component is not null, this returns the result of the view's getmaximumsize() method."
javax.swing.plaf.LayerUI.getMinimumSize(javax.swing.JComponent),"if the jlayer's view component is not null, this returns the result of the view's getminimalsize() method."
javax.swing.plaf.LayerUI.getPreferredSize(javax.swing.JComponent),"if the jlayer's view component is not null, this returns the result of the view's getpreferredsize() method."
javax.swing.plaf.LayerUI.getPropertyChangeListeners(),returns an array of all the property change listeners registered on this component.
javax.swing.plaf.LayerUI.getPropertyChangeListeners(java.lang.String),returns an array of all the listeners which have been associated with the named property.
javax.swing.plaf.LayerUI.installUI(javax.swing.JComponent),configures the jlayer this layerui is set to.
"javax.swing.plaf.LayerUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component.
"javax.swing.plaf.LayerUI.paintImmediately(int,int,int,int,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)","paints the specified region in the jlayer this layerui is set to, immediately."
"javax.swing.plaf.LayerUI.processComponentEvent(java.awt.event.ComponentEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)",processes component events occurring on the jlayer or any of its subcomponents.
"javax.swing.plaf.LayerUI.processFocusEvent(java.awt.event.FocusEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)",processes focus events occurring on the jlayer or any of its subcomponents.
"javax.swing.plaf.LayerUI.processHierarchyBoundsEvent(java.awt.event.HierarchyEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)",processes hierarchy bounds event occurring on the jlayer or any of its subcomponents.
"javax.swing.plaf.LayerUI.processHierarchyEvent(java.awt.event.HierarchyEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)",processes hierarchy event occurring on the jlayer or any of its subcomponents.
"javax.swing.plaf.LayerUI.processInputMethodEvent(java.awt.event.InputMethodEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)",processes input event occurring on the jlayer or any of its subcomponents.
"javax.swing.plaf.LayerUI.processKeyEvent(java.awt.event.KeyEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)",processes key events occurring on the jlayer or any of its subcomponents.
"javax.swing.plaf.LayerUI.processMouseEvent(java.awt.event.MouseEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)",processes mouse events occurring on the jlayer or any of its subcomponents.
"javax.swing.plaf.LayerUI.processMouseMotionEvent(java.awt.event.MouseEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)",processes mouse motion event occurring on the jlayer or any of its subcomponents.
"javax.swing.plaf.LayerUI.processMouseWheelEvent(java.awt.event.MouseWheelEvent,javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>)",processes mouse wheel event occurring on the jlayer or any of its subcomponents.
javax.swing.plaf.LayerUI.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychangelistener from the listener list.
"javax.swing.plaf.LayerUI.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",removes a propertychangelistener from the listener list for a specific property.
javax.swing.plaf.LayerUI.uninstallUI(javax.swing.JComponent),reverses the configuration which was previously set in the installui(jcomponent) method.
javax.swing.plaf.LayerUI.updateUI(javax.swing.JLayer<? extends javax.swing.plaf.LayerUI>),invoked when jlayer.
"javax.swing.plaf.ListUI.getCellBounds(javax.swing.JList,int,int)","returns the bounding rectangle, in the given list's coordinate system, for the range of cells specified by the two indices."
"javax.swing.plaf.ListUI.indexToLocation(javax.swing.JList,int)","returns the origin in the given jlist, of the specified item, in the list's coordinate system."
"javax.swing.plaf.ListUI.locationToIndex(javax.swing.JList,java.awt.Point)",returns the cell index in the specified jlist closest to the given location in the list's coordinate system.
javax.swing.plaf.OptionPaneUI.containsCustomComponents(javax.swing.JOptionPane),returns true if the user has supplied instances of component for either the options or message.
javax.swing.plaf.OptionPaneUI.selectInitialValue(javax.swing.JOptionPane),requests the component representing the default value to have focus.
"javax.swing.plaf.PopupMenuUI.getPopup(javax.swing.JPopupMenu,int,int)",returns the popup that will be responsible for displaying the jpopupmenu.
"javax.swing.plaf.SplitPaneUI.finishedPaintingChildren(javax.swing.JSplitPane,java.awt.Graphics)",messaged after the jsplitpane the receiver is providing the look and feel for paints its children.
javax.swing.plaf.SplitPaneUI.getDividerLocation(javax.swing.JSplitPane),returns the location of the divider.
javax.swing.plaf.SplitPaneUI.getMaximumDividerLocation(javax.swing.JSplitPane),returns the maximum possible location of the divider.
javax.swing.plaf.SplitPaneUI.getMinimumDividerLocation(javax.swing.JSplitPane),returns the minimum possible location of the divider.
javax.swing.plaf.SplitPaneUI.resetToPreferredSizes(javax.swing.JSplitPane),messaged to relayout the jsplitpane based on the preferred size of the children components.
"javax.swing.plaf.SplitPaneUI.setDividerLocation(javax.swing.JSplitPane,int)",sets the location of the divider to location.
"javax.swing.plaf.TextUI.damageRange(javax.swing.text.JTextComponent,int,int)",causes the portion of the view responsible for the given part of the model to be repainted.
"javax.swing.plaf.TextUI.damageRange(javax.swing.text.JTextComponent,int,int,javax.swing.text.Position.Bias,javax.swing.text.Position.Bias)",causes the portion of the view responsible for the given part of the model to be repainted.
javax.swing.plaf.TextUI.getEditorKit(javax.swing.text.JTextComponent),fetches the binding of services that set a policy for the type of document being edited.
"javax.swing.plaf.TextUI.getNextVisualPositionFrom(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias[])",provides a way to determine the next visually represented model location that one might place a caret.
javax.swing.plaf.TextUI.getRootView(javax.swing.text.JTextComponent),fetches a view with the allocation of the associated text component (i.
"javax.swing.plaf.TextUI.getToolTipText(javax.swing.text.JTextComponent,java.awt.Point)",returns the string to be used as the tooltip at the passed in location.
"javax.swing.plaf.TextUI.modelToView(javax.swing.text.JTextComponent,int)",converts the given location in the model to a place in the view coordinate system.
"javax.swing.plaf.TextUI.modelToView(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias)",converts the given location in the model to a place in the view coordinate system.
"javax.swing.plaf.TextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point)",converts the given place in the view coordinate system to the nearest representative location in the model.
"javax.swing.plaf.TextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
javax.swing.plaf.TreeUI.cancelEditing(javax.swing.JTree),cancels the current editing session.
"javax.swing.plaf.TreeUI.getClosestPathForLocation(javax.swing.JTree,int,int)","returns the path to the node that is closest to x,y."
javax.swing.plaf.TreeUI.getEditingPath(javax.swing.JTree),returns the path to the element that is being edited.
"javax.swing.plaf.TreeUI.getPathBounds(javax.swing.JTree,javax.swing.tree.TreePath)",returns the rectangle enclosing the label portion that the last item in path will be drawn into.
"javax.swing.plaf.TreeUI.getPathForRow(javax.swing.JTree,int)",returns the path for passed in row.
javax.swing.plaf.TreeUI.getRowCount(javax.swing.JTree),returns the number of rows that are being displayed.
"javax.swing.plaf.TreeUI.getRowForPath(javax.swing.JTree,javax.swing.tree.TreePath)",returns the row that the last item identified in path is visible at.
javax.swing.plaf.TreeUI.isEditing(javax.swing.JTree),returns true if the tree is being edited.
"javax.swing.plaf.TreeUI.startEditingAtPath(javax.swing.JTree,javax.swing.tree.TreePath)",selects the last item in path and tries to edit it.
javax.swing.plaf.TreeUI.stopEditing(javax.swing.JTree),stops the current editing session.
javax.swing.plaf.basic.ComboPopup.getKeyListener(),returns a key listener that will be added to the combo box or null.
javax.swing.plaf.basic.ComboPopup.getList(),returns the list that is being used to draw the items in the combo box.
javax.swing.plaf.basic.ComboPopup.getMouseListener(),returns a mouse listener that will be added to the combo box or null.
javax.swing.plaf.basic.ComboPopup.getMouseMotionListener(),returns a mouse motion listener that will be added to the combo box or null.
javax.swing.plaf.basic.ComboPopup.hide(),hides the popup.
javax.swing.plaf.basic.ComboPopup.isVisible(),returns true if the popup is visible (currently being displayed).
javax.swing.plaf.basic.ComboPopup.show(),shows the popup.
javax.swing.plaf.basic.ComboPopup.uninstallingUI(),called to inform the combopopup that the ui is uninstalling.
javax.swing.plaf.basic.BasicArrowButton.getDirection(),returns the direction of the arrow.
javax.swing.plaf.basic.BasicArrowButton.getMaximumSize(),returns the maximum size of the basicarrowbutton.
javax.swing.plaf.basic.BasicArrowButton.getMinimumSize(),returns the minimum size of the basicarrowbutton.
javax.swing.plaf.basic.BasicArrowButton.getPreferredSize(),returns the preferred size of the basicarrowbutton.
javax.swing.plaf.basic.BasicArrowButton.isFocusTraversable(),returns whether the arrow button should get the focus.
"javax.swing.plaf.basic.BasicArrowButton.paintTriangle(java.awt.Graphics,int,int,int,int,boolean)",paints a triangle.
javax.swing.plaf.basic.BasicArrowButton.setDirection(int),sets the direction of the arrow.
javax.swing.plaf.basic.BasicBorders.getSplitPaneDividerBorder(),returns a border instance for a jsplitpane divider.
javax.swing.plaf.basic.BasicButtonListener.installKeyboardActions(javax.swing.JComponent),"register default key actions: pressing space to ""click"" a button and registring the keyboard mnemonic (if any)."
javax.swing.plaf.basic.BasicButtonListener.uninstallKeyboardActions(javax.swing.JComponent),unregister's default key actions.
"javax.swing.plaf.basic.BasicButtonUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicButtonUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
"javax.swing.plaf.basic.BasicButtonUI.paintText(java.awt.Graphics,javax.swing.JComponent,java.awt.Rectangle,java.lang.String)",as of java 2 platform v 1.
"javax.swing.plaf.basic.BasicButtonUI.paintText(java.awt.Graphics,javax.swing.AbstractButton,java.awt.Rectangle,java.lang.String)",method which renders the text of the current button.
javax.swing.plaf.basic.BasicColorChooserUI.uninstallPreviewPanel(),removes installed preview panel from the ui delegate.
javax.swing.plaf.basic.BasicComboBoxEditor.createEditorComponent(),creates the internal editor component.
javax.swing.plaf.basic.BasicComboBoxEditor.setItem(java.lang.Object),sets the item that should be edited.
javax.swing.plaf.basic.BasicComboBoxUI.addEditor(),this public method is implementation specific and should be private.
javax.swing.plaf.basic.BasicComboBoxUI.configureArrowButton(),this public method is implementation specific and should be private.
javax.swing.plaf.basic.BasicComboBoxUI.configureEditor(),this protected method is implementation specific and should be private.
javax.swing.plaf.basic.BasicComboBoxUI.createArrowButton(),creates a button which will be used as the control to show or hide the popup portion of the combo box.
javax.swing.plaf.basic.BasicComboBoxUI.createEditor(),creates the default editor that will be used in editable combo boxes.
javax.swing.plaf.basic.BasicComboBoxUI.createFocusListener(),creates a focuslistener which will be added to the combo box.
javax.swing.plaf.basic.BasicComboBoxUI.createItemListener(),creates an itemlistener which will be added to the combo box.
javax.swing.plaf.basic.BasicComboBoxUI.createKeyListener(),creates a keylistener which will be added to the combo box.
javax.swing.plaf.basic.BasicComboBoxUI.createLayoutManager(),creates a layout manager for managing the components which make up the combo box.
javax.swing.plaf.basic.BasicComboBoxUI.createListDataListener(),creates a list data listener which will be added to the comboboxmodel.
javax.swing.plaf.basic.BasicComboBoxUI.createPopup(),creates the popup portion of the combo box.
javax.swing.plaf.basic.BasicComboBoxUI.createPropertyChangeListener(),creates a propertychangelistener which will be added to the combo box.
javax.swing.plaf.basic.BasicComboBoxUI.createRenderer(),creates the default renderer that will be used in a non-editiable combo box.
"javax.swing.plaf.basic.BasicComboBoxUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicComboBoxUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.plaf.basic.BasicComboBoxUI.getDefaultSize(),return the default size of an empty display area of the combo box using the current renderer and font.
javax.swing.plaf.basic.BasicComboBoxUI.getDisplaySize(),returns the calculated size of the display area.
javax.swing.plaf.basic.BasicComboBoxUI.getInsets(),gets the insets from the jcombobox.
javax.swing.plaf.basic.BasicComboBoxUI.getMinimumSize(javax.swing.JComponent),the minimum size is the size of the display area plus insets plus the button.
javax.swing.plaf.basic.BasicComboBoxUI.getSizeForComponent(java.awt.Component),returns the size a component would have if used as a cell renderer.
javax.swing.plaf.basic.BasicComboBoxUI.installComponents(),creates and initializes the components which make up the aggregate combo box.
javax.swing.plaf.basic.BasicComboBoxUI.installDefaults(),"installs the default colors, default font, default renderer, and default editor into the jcombobox."
javax.swing.plaf.basic.BasicComboBoxUI.installKeyboardActions(),adds keyboard actions to the jcombobox.
javax.swing.plaf.basic.BasicComboBoxUI.installListeners(),creates and installs listeners for the combo box and its model.
javax.swing.plaf.basic.BasicComboBoxUI.isFocusTraversable(javax.swing.JComboBox),determines if the jcombobox is focus traversable.
javax.swing.plaf.basic.BasicComboBoxUI.isNavigationKey(int),returns whether or not the supplied keycode maps to a key that is used for navigation.
javax.swing.plaf.basic.BasicComboBoxUI.isPopupVisible(javax.swing.JComboBox),tells if the popup is visible or not.
"javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValue(java.awt.Graphics,java.awt.Rectangle,boolean)",paints the currently selected item.
"javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValueBackground(java.awt.Graphics,java.awt.Rectangle,boolean)",paints the background of the currently selected item.
javax.swing.plaf.basic.BasicComboBoxUI.rectangleForCurrentValue(),returns the area that is reserved for drawing the currently selected item.
javax.swing.plaf.basic.BasicComboBoxUI.removeEditor(),this public method is implementation specific and should be private.
javax.swing.plaf.basic.BasicComboBoxUI.selectNextPossibleValue(),selects the next item in the list.
javax.swing.plaf.basic.BasicComboBoxUI.selectPreviousPossibleValue(),selects the previous item in the list.
"javax.swing.plaf.basic.BasicComboBoxUI.setPopupVisible(javax.swing.JComboBox,boolean)",hides the popup.
javax.swing.plaf.basic.BasicComboBoxUI.toggleOpenClose(),hides the popup if it is showing and shows the popup if it is hidden.
javax.swing.plaf.basic.BasicComboBoxUI.unconfigureArrowButton(),this public method is implementation specific and should be private.
javax.swing.plaf.basic.BasicComboBoxUI.unconfigureEditor(),this protected method is implementation specific and should be private.
javax.swing.plaf.basic.BasicComboBoxUI.uninstallComponents(),the aggregate components which comprise the combo box are unregistered and uninitialized.
javax.swing.plaf.basic.BasicComboBoxUI.uninstallDefaults(),"uninstalls the default colors, default font, default renderer, and default editor from the combo box."
javax.swing.plaf.basic.BasicComboBoxUI.uninstallKeyboardActions(),removes the focus inputmap and actionmap.
javax.swing.plaf.basic.BasicComboBoxUI.uninstallListeners(),removes the installed listeners from the combo box and its model.
javax.swing.plaf.basic.BasicComboPopup.autoScrollDown(),this protected method is implementation specific and should be private.
javax.swing.plaf.basic.BasicComboPopup.autoScrollUp(),this protected method is implementation specific and should be private.
"javax.swing.plaf.basic.BasicComboPopup.computePopupBounds(int,int,int,int)",calculate the placement and size of the popup portion of the combo box based on the combo box location and the enclosing screen bounds.
javax.swing.plaf.basic.BasicComboPopup.configureList(),configures the list which is used to hold the combo box items in the popup.
javax.swing.plaf.basic.BasicComboPopup.configurePopup(),configures the popup portion of the combo box.
javax.swing.plaf.basic.BasicComboPopup.configureScroller(),configures the scrollable portion which holds the list within the combo box popup.
javax.swing.plaf.basic.BasicComboPopup.createItemListener(),creates an itemlistener which will be added to the combo box.
javax.swing.plaf.basic.BasicComboPopup.createKeyListener(),creates the key listener that will be added to the combo box.
javax.swing.plaf.basic.BasicComboPopup.createList(),creates the jlist used in the popup to display the items in the combo box model.
javax.swing.plaf.basic.BasicComboPopup.createListDataListener(),creates a list data listener which will be added to the comboboxmodel.
javax.swing.plaf.basic.BasicComboPopup.createListMouseListener(),creates a mouse listener that watches for mouse events in the popup's list.
javax.swing.plaf.basic.BasicComboPopup.createListMouseMotionListener(),creates a mouse motion listener that watches for mouse motion events in the popup's list.
javax.swing.plaf.basic.BasicComboPopup.createListSelectionListener(),creates a list selection listener that watches for selection changes in the popup's list.
javax.swing.plaf.basic.BasicComboPopup.createMouseListener(),creates a listener that will watch for mouse-press and release events on the combo box.
javax.swing.plaf.basic.BasicComboPopup.createMouseMotionListener(),creates the mouse motion listener which will be added to the combo box.
javax.swing.plaf.basic.BasicComboPopup.createPropertyChangeListener(),creates a propertychangelistener which will be added to the combo box.
javax.swing.plaf.basic.BasicComboPopup.createScroller(),creates the scroll pane which houses the scrollable list.
javax.swing.plaf.basic.BasicComboPopup.delegateFocus(java.awt.event.MouseEvent),this is is a utility method that helps event handlers figure out where to send the focus when the popup is brought up.
javax.swing.plaf.basic.BasicComboPopup.getAccessibleContext(),gets the accessiblecontext associated with this basiccombopopup.
javax.swing.plaf.basic.BasicComboPopup.getKeyListener(),implementation of combopopup.
javax.swing.plaf.basic.BasicComboPopup.getList(),implementation of combopopup.
javax.swing.plaf.basic.BasicComboPopup.getMouseListener(),implementation of combopopup.
javax.swing.plaf.basic.BasicComboPopup.getMouseMotionListener(),implementation of combopopup.
javax.swing.plaf.basic.BasicComboPopup.getPopupHeightForRowCount(int),retrieves the height of the popup based on the current listcellrenderer and the maximum row count.
javax.swing.plaf.basic.BasicComboPopup.hide(),implementation of combopopup.
javax.swing.plaf.basic.BasicComboPopup.installComboBoxListeners(),this method adds the necessary listeners to the jcombobox.
javax.swing.plaf.basic.BasicComboPopup.installComboBoxModelListeners(javax.swing.ComboBoxModel),installs the listeners on the combo box model.
javax.swing.plaf.basic.BasicComboPopup.installListListeners(),adds the listeners to the list control.
javax.swing.plaf.basic.BasicComboPopup.isFocusTraversable(),overridden to unconditionally return false.
javax.swing.plaf.basic.BasicComboPopup.show(),implementation of combopopup.
javax.swing.plaf.basic.BasicComboPopup.startAutoScrolling(int),this protected method is implementation specific and should be private.
javax.swing.plaf.basic.BasicComboPopup.stopAutoScrolling(),this protected method is implementation specific and should be private.
javax.swing.plaf.basic.BasicComboPopup.togglePopup(),makes the popup visible if it is hidden and makes it hidden if it is visible.
javax.swing.plaf.basic.BasicComboPopup.uninstallComboBoxModelListeners(javax.swing.ComboBoxModel),removes the listeners from the combo box model.
javax.swing.plaf.basic.BasicComboPopup.uninstallingUI(),called when the ui is uninstalling.
"javax.swing.plaf.basic.BasicComboPopup.updateListBoxSelectionForEvent(java.awt.event.MouseEvent,boolean)",a utility method used by the event listeners.
javax.swing.plaf.basic.BasicDesktopIconUI.getMaximumSize(javax.swing.JComponent),desktop icons can not be resized.
javax.swing.plaf.basic.BasicDesktopPaneUI.createPropertyChangeListener(),returns the propertychangelistener to install on the jdesktoppane.
javax.swing.plaf.basic.BasicDesktopPaneUI.installListeners(),installs the propertychangelistener returned from createpropertychangelistener on the jdesktoppane.
javax.swing.plaf.basic.BasicDesktopPaneUI.uninstallListeners(),uninstalls the propertychangelistener returned from createpropertychangelistener from the jdesktoppane.
javax.swing.plaf.basic.BasicDirectoryModel.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
"javax.swing.plaf.basic.BasicDirectoryModel.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",support for reporting bound property changes for boolean properties.
javax.swing.plaf.basic.BasicDirectoryModel.getPropertyChangeListeners(),returns an array of all the property change listeners registered on this component.
javax.swing.plaf.basic.BasicDirectoryModel.intervalAdded(javax.swing.event.ListDataEvent),obsolete - not used.
javax.swing.plaf.basic.BasicDirectoryModel.intervalRemoved(javax.swing.event.ListDataEvent),obsolete - not used.
javax.swing.plaf.basic.BasicDirectoryModel.invalidateFileCache(),this method is used to interrupt file loading thread.
javax.swing.plaf.basic.BasicDirectoryModel.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychangelistener from the listener list.
"javax.swing.plaf.basic.BasicDirectoryModel.renameFile(java.io.File,java.io.File)",renames a file in the underlying file system.
javax.swing.plaf.basic.BasicEditorPaneUI.createUI(javax.swing.JComponent),creates a ui for the jtextpane.
javax.swing.plaf.basic.BasicEditorPaneUI.getEditorKit(javax.swing.text.JTextComponent),fetches the editorkit for the ui.
javax.swing.plaf.basic.BasicEditorPaneUI.getPropertyPrefix(),fetches the name used as a key to lookup properties through the uimanager.
javax.swing.plaf.basic.BasicEditorPaneUI.installUI(javax.swing.JComponent),installs the ui for a component.
javax.swing.plaf.basic.BasicEditorPaneUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed on the associated jtextcomponent.
javax.swing.plaf.basic.BasicEditorPaneUI.uninstallUI(javax.swing.JComponent),deinstalls the ui for a component.
javax.swing.plaf.basic.BasicFileChooserUI.createUI(javax.swing.JComponent),creates a basicfilechooserui implementation for the specified component.
javax.swing.plaf.basic.BasicFileChooserUI.getAcceptAllFileFilter(javax.swing.JFileChooser),returns the default accept all file filter.
javax.swing.plaf.basic.BasicFileChooserUI.getDialogTitle(javax.swing.JFileChooser),returns the title of this dialog.
javax.swing.plaf.basic.BasicFileChooserUI.getDirectory(),property to remember the directory that is currently selected in the ui.
javax.swing.plaf.basic.BasicFileChooserUI.isDirectorySelected(),property to remember whether a directory is currently selected in the ui.
javax.swing.plaf.basic.BasicFileChooserUI.setDirectory(java.io.File),property to remember the directory that is currently selected in the ui.
javax.swing.plaf.basic.BasicFileChooserUI.setDirectorySelected(boolean),property to remember whether a directory is currently selected in the ui.
javax.swing.plaf.basic.BasicFormattedTextFieldUI.createUI(javax.swing.JComponent),creates a ui for a jformattedtextfield.
javax.swing.plaf.basic.BasicFormattedTextFieldUI.getPropertyPrefix(),fetches the name used as a key to lookup properties through the uimanager.
"javax.swing.plaf.basic.BasicGraphicsUtils.drawString(java.awt.Graphics,java.lang.String,int,int,int)","draw a string with the graphics g at location (x,y) just like g."
"javax.swing.plaf.basic.BasicGraphicsUtils.drawStringUnderlineCharAt(java.awt.Graphics,java.lang.String,int,int,int)","draw a string with the graphics g at location (x, y) just like g."
javax.swing.plaf.basic.BasicGraphicsUtils.getEtchedInsets(),returns the amount of space taken up by a border drawn by drawetchedrect().
javax.swing.plaf.basic.BasicGraphicsUtils.getGrooveInsets(),returns the amount of space taken up by a border drawn by drawgroove().
"javax.swing.plaf.basic.BasicHTML.createHTMLView(javax.swing.JComponent,java.lang.String)",create an html renderer for the given component and string of html.
"javax.swing.plaf.basic.BasicHTML.getHTMLBaseline(javax.swing.text.View,int,int)",returns the baseline for the html renderer.
javax.swing.plaf.basic.BasicHTML.isHTMLString(java.lang.String),check the given string to see if it should trigger the html rendering logic in a non-text component that supports html rendering.
"javax.swing.plaf.basic.BasicHTML.updateRenderer(javax.swing.JComponent,java.lang.String)",stash the html render for the given text into the client properties of the given jcomponent.
javax.swing.plaf.basic.BasicInternalFrameTitlePane.paintTitleBackground(java.awt.Graphics),invoked from paintcomponent.
javax.swing.plaf.basic.BasicInternalFrameTitlePane.postClosingEvent(javax.swing.JInternalFrame),"post a window_closing-like event to the frame, so that it can be treated like a regular frame."
javax.swing.plaf.basic.BasicInternalFrameUI.activateFrame(javax.swing.JInternalFrame),this method is called when the frame becomes selected.
javax.swing.plaf.basic.BasicInternalFrameUI.closeFrame(javax.swing.JInternalFrame),this method is called when the user wants to close the frame.
javax.swing.plaf.basic.BasicInternalFrameUI.deactivateFrame(javax.swing.JInternalFrame),this method is called when the frame is no longer selected.
javax.swing.plaf.basic.BasicInternalFrameUI.deiconifyFrame(javax.swing.JInternalFrame),this method is called when the user wants to deiconify the frame.
javax.swing.plaf.basic.BasicInternalFrameUI.getDesktopManager(),returns the proper desktopmanager.
javax.swing.plaf.basic.BasicInternalFrameUI.iconifyFrame(javax.swing.JInternalFrame),this method is called when the user wants to iconify the frame.
javax.swing.plaf.basic.BasicInternalFrameUI.maximizeFrame(javax.swing.JInternalFrame),this method is called when the user wants to maximize the frame.
javax.swing.plaf.basic.BasicInternalFrameUI.minimizeFrame(javax.swing.JInternalFrame),this method is called when the user wants to minimize the frame.
"javax.swing.plaf.basic.BasicInternalFrameUI.replacePane(javax.swing.JComponent,javax.swing.JComponent)",installs necessary mouse handlers on newpane and adds it to the frame.
"javax.swing.plaf.basic.BasicLabelUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicLabelUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
"javax.swing.plaf.basic.BasicLabelUI.layoutCL(javax.swing.JLabel,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle)",forwards the call to swingutilities.
"javax.swing.plaf.basic.BasicLabelUI.paint(java.awt.Graphics,javax.swing.JComponent)","paints the label text with the foreground color, if the label is opaque then paints the entire background with the background color."
"javax.swing.plaf.basic.BasicLabelUI.paintDisabledText(javax.swing.JLabel,java.awt.Graphics,java.lang.String,int,int)","paint clippedtext at textx, texty with background."
"javax.swing.plaf.basic.BasicLabelUI.paintEnabledText(javax.swing.JLabel,java.awt.Graphics,java.lang.String,int,int)","paint clippedtext at textx, texty with the labels foreground color."
javax.swing.plaf.basic.BasicListUI.convertRowToY(int),return the jlist relative y coordinate of the origin of the specified row or -1 if row isn't valid.
javax.swing.plaf.basic.BasicListUI.convertYToRow(int),"convert the jlist relative coordinate to the row that contains it, based on the current layout."
javax.swing.plaf.basic.BasicListUI.createListDataListener(),creates an instance of listdatalistener that's added to the jlists by model as needed.
javax.swing.plaf.basic.BasicListUI.createListSelectionListener(),creates an instance of listselectionhandler that's added to the jlists by selectionmodel as needed.
javax.swing.plaf.basic.BasicListUI.createMouseInputListener(),creates a delegate that implements mouseinputlistener.
javax.swing.plaf.basic.BasicListUI.createPropertyChangeListener(),creates an instance of propertychangehandler that's added to the jlist by installui().
javax.swing.plaf.basic.BasicListUI.createUI(javax.swing.JComponent),returns a new instance of basiclistui.
"javax.swing.plaf.basic.BasicListUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicListUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
"javax.swing.plaf.basic.BasicListUI.getCellBounds(javax.swing.JList,int,int)","returns the bounding rectangle, in the given list's coordinate system, for the range of cells specified by the two indices."
javax.swing.plaf.basic.BasicListUI.getPreferredSize(javax.swing.JComponent),the preferredsize of the list depends upon the layout orientation.
javax.swing.plaf.basic.BasicListUI.getRowHeight(int),returns the height of the specified row based on the current layout.
"javax.swing.plaf.basic.BasicListUI.indexToLocation(javax.swing.JList,int)","returns the origin in the given jlist, of the specified item, in the list's coordinate system."
javax.swing.plaf.basic.BasicListUI.installDefaults(),"initializes list properties such as font, foreground, and background, and adds the cellrendererpane."
javax.swing.plaf.basic.BasicListUI.installKeyboardActions(),registers the keyboard bindings on the jlist that the basiclistui is associated with.
javax.swing.plaf.basic.BasicListUI.installListeners(),"creates and installs the listeners for the jlist, its model, and its selectionmodel."
javax.swing.plaf.basic.BasicListUI.installUI(javax.swing.JComponent),initializes this.
"javax.swing.plaf.basic.BasicListUI.locationToIndex(javax.swing.JList,java.awt.Point)",returns the cell index in the specified jlist closest to the given location in the list's coordinate system.
javax.swing.plaf.basic.BasicListUI.maybeUpdateLayoutState(),"if updatelayoutstateneeded is non zero, call updatelayoutstate() and reset updatelayoutstateneeded."
"javax.swing.plaf.basic.BasicListUI.paint(java.awt.Graphics,javax.swing.JComponent)",paint the rows that intersect the graphics objects cliprect.
"javax.swing.plaf.basic.BasicListUI.paintCell(java.awt.Graphics,int,java.awt.Rectangle,javax.swing.ListCellRenderer,javax.swing.ListModel,javax.swing.ListSelectionModel,int)","paint one list cell: compute the relevant state, get the ""rubber stamp"" cell renderer component, and then use the cellrendererpane to paint it."
javax.swing.plaf.basic.BasicListUI.selectNextIndex(),selected the previous row and force it to be visible.
javax.swing.plaf.basic.BasicListUI.selectPreviousIndex(),selected the previous row and force it to be visible.
javax.swing.plaf.basic.BasicListUI.uninstallDefaults(),sets the list properties that have not been explicitly overridden to null.
javax.swing.plaf.basic.BasicListUI.uninstallKeyboardActions(),unregisters keyboard actions installed from installkeyboardactions.
javax.swing.plaf.basic.BasicListUI.uninstallListeners(),"removes the listeners from the jlist, its model, and its selectionmodel."
javax.swing.plaf.basic.BasicListUI.uninstallUI(javax.swing.JComponent),uninitializes this.
javax.swing.plaf.basic.BasicListUI.updateLayoutState(),"recompute the value of cellheight or cellheights based and cellwidth, based on the current font and the current values of fixedcellwidth, fixedcellheight, and prototypecellvalue."
javax.swing.plaf.basic.BasicLookAndFeel.createAudioAction(java.lang.Object),creates and returns an action used to play a sound.
javax.swing.plaf.basic.BasicLookAndFeel.getAudioActionMap(),returns an actionmap containing the audio actions for this look and feel.
javax.swing.plaf.basic.BasicLookAndFeel.getDefaults(),returns the look and feel defaults.
javax.swing.plaf.basic.BasicLookAndFeel.initClassDefaults(javax.swing.UIDefaults),populates table with mappings from uiclassid to the fully qualified name of the ui class.
javax.swing.plaf.basic.BasicLookAndFeel.initComponentDefaults(javax.swing.UIDefaults),populates table with the defaults for the basic look and feel.
javax.swing.plaf.basic.BasicLookAndFeel.initialize(),initializes the look and feel.
javax.swing.plaf.basic.BasicLookAndFeel.initSystemColorDefaults(javax.swing.UIDefaults),populates table with system colors.
"javax.swing.plaf.basic.BasicLookAndFeel.loadSystemColors(javax.swing.UIDefaults,java.lang.String[],boolean)",populates table with the name-color pairs in systemcolors.
javax.swing.plaf.basic.BasicLookAndFeel.playSound(javax.swing.Action),"if necessary, invokes actionperformed on audioaction to play a sound."
javax.swing.plaf.basic.BasicLookAndFeel.uninitialize(),uninitializes the look and feel.
javax.swing.plaf.basic.BasicMenuItemUI.createPropertyChangeListener(javax.swing.JComponent),creates a propertychangelistener which will be added to the menu item.
javax.swing.plaf.basic.BasicMenuItemUI.doClick(javax.swing.MenuSelectionManager),call this method when a menu item is to be activated.
"javax.swing.plaf.basic.BasicMenuItemUI.paintBackground(java.awt.Graphics,javax.swing.JMenuItem,java.awt.Color)",draws the background of the menu item.
"javax.swing.plaf.basic.BasicMenuItemUI.paintText(java.awt.Graphics,javax.swing.JMenuItem,java.awt.Rectangle,java.lang.String)",renders the text of the current menu item.
"javax.swing.plaf.basic.BasicMenuItemUI.update(java.awt.Graphics,javax.swing.JComponent)",we draw the background in paintmenuitem() so override update (which fills the background of opaque components by default) to just call paint().
"javax.swing.plaf.basic.BasicOptionPaneUI.addButtonComponents(java.awt.Container,java.lang.Object[],int)",creates the appropriate object to represent each of the objects in buttons and adds it to container.
javax.swing.plaf.basic.BasicOptionPaneUI.addIcon(java.awt.Container),creates and adds a jlabel representing the icon returned from geticon to top.
"javax.swing.plaf.basic.BasicOptionPaneUI.addMessageComponents(java.awt.Container,java.awt.GridBagConstraints,java.lang.Object,int,boolean)",creates the appropriate object to represent msg and places it into container.
"javax.swing.plaf.basic.BasicOptionPaneUI.burstStringInto(java.awt.Container,java.lang.String,int)",recursively creates new jlabel instances to represent d.
javax.swing.plaf.basic.BasicOptionPaneUI.containsCustomComponents(javax.swing.JOptionPane),returns true if in the last call to validatecomponent the message or buttons contained a subclass of component.
javax.swing.plaf.basic.BasicOptionPaneUI.createButtonArea(),creates and returns a container containing the buttons.
javax.swing.plaf.basic.BasicOptionPaneUI.createMessageArea(),messaged from installcomponents to create a container containing the body of the message.
javax.swing.plaf.basic.BasicOptionPaneUI.createUI(javax.swing.JComponent),creates a new basicoptionpaneui instance.
javax.swing.plaf.basic.BasicOptionPaneUI.getButtons(),returns the buttons to display from the joptionpane the receiver is providing the look and feel for.
javax.swing.plaf.basic.BasicOptionPaneUI.getIcon(),"returns the icon from the joptionpane the receiver is providing the look and feel for, or the default icon as returned from getdefaulticon."
javax.swing.plaf.basic.BasicOptionPaneUI.getIconForType(int),returns the icon to use for the passed in type.
javax.swing.plaf.basic.BasicOptionPaneUI.getInitialValueIndex(),returns the initial index into the buttons to select.
javax.swing.plaf.basic.BasicOptionPaneUI.getMaxCharactersPerLineCount(),returns the maximum number of characters to place on a line.
javax.swing.plaf.basic.BasicOptionPaneUI.getMessage(),returns the message to display from the joptionpane the receiver is providing the look and feel for.
javax.swing.plaf.basic.BasicOptionPaneUI.getMinimumOptionPaneSize(),returns the minimum size the option pane should be.
javax.swing.plaf.basic.BasicOptionPaneUI.getPreferredSize(javax.swing.JComponent),"if c is the joptionpane the receiver is contained in, the preferred size that is returned is the maximum of the preferred size of the layoutmanager for the joptionpane, and getminimumoptionpanesize."
javax.swing.plaf.basic.BasicOptionPaneUI.getSizeButtonsToSameWidth(),"returns true, basic l&f wants all the buttons to have the same width."
javax.swing.plaf.basic.BasicOptionPaneUI.installUI(javax.swing.JComponent),installs the receiver as the l&f for the passed in joptionpane.
javax.swing.plaf.basic.BasicOptionPaneUI.resetInputValue(),sets the input value in the option pane the receiver is providing the look and feel for based on the value in the inputcomponent.
javax.swing.plaf.basic.BasicOptionPaneUI.selectInitialValue(javax.swing.JOptionPane),"if inputcomponent is non-null, the focus is requested on that, otherwise request focus on the default value."
javax.swing.plaf.basic.BasicOptionPaneUI.uninstallUI(javax.swing.JComponent),removes the receiver from the l&f controller of the passed in split pane.
"javax.swing.plaf.basic.BasicPanelUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicPanelUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.plaf.basic.BasicPasswordFieldUI.create(javax.swing.text.Element),creates a view (passwordview) for an element.
javax.swing.plaf.basic.BasicPasswordFieldUI.createUI(javax.swing.JComponent),creates a ui for a jpasswordfield.
javax.swing.plaf.basic.BasicPasswordFieldUI.getPropertyPrefix(),fetches the name used as a key to look up properties through the uimanager.
javax.swing.plaf.basic.BasicPasswordFieldUI.installDefaults(),installs the necessary properties on the jpasswordfield.
"javax.swing.plaf.basic.BasicProgressBarUI.getAmountFull(java.awt.Insets,int,int)",this determines the amount of the progress bar that should be filled based on the percent done gathered from the model.
javax.swing.plaf.basic.BasicProgressBarUI.getAnimationIndex(),gets the index of the current animation frame.
"javax.swing.plaf.basic.BasicProgressBarUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicProgressBarUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.plaf.basic.BasicProgressBarUI.getBox(java.awt.Rectangle),stores the position and size of the bouncing box that would be painted for the current animation index in r and returns r.
"javax.swing.plaf.basic.BasicProgressBarUI.getBoxLength(int,int)","returns the length of the ""bouncing box"" to be painted."
javax.swing.plaf.basic.BasicProgressBarUI.getCellLength(),returns the width (if horizontal) or height (if vertical) of each of the individual cells/units to be rendered in the progress bar.
javax.swing.plaf.basic.BasicProgressBarUI.getCellSpacing(),returns the spacing between each of the cells/units in the progress bar.
javax.swing.plaf.basic.BasicProgressBarUI.getFrameCount(),returns the number of frames for the complete animation loop used by an indeterminate jprogessbar.
javax.swing.plaf.basic.BasicProgressBarUI.getMinimumSize(javax.swing.JComponent),the minimum size for this component is 10.
javax.swing.plaf.basic.BasicProgressBarUI.getSelectionBackground(),"the ""selectionbackground"" is the color of the text when it is painted over an unfilled area of the progress bar."
javax.swing.plaf.basic.BasicProgressBarUI.getSelectionForeground(),"the ""selectionforeground"" is the color of the text when it is painted over a filled area of the progress bar."
"javax.swing.plaf.basic.BasicProgressBarUI.getStringPlacement(java.awt.Graphics,java.lang.String,int,int,int,int)",designate the place where the progress string will be painted.
javax.swing.plaf.basic.BasicProgressBarUI.incrementAnimationIndex(),"sets the index of the current animation frame, to the next valid value, which results in the progress bar being repainted."
"javax.swing.plaf.basic.BasicProgressBarUI.paint(java.awt.Graphics,javax.swing.JComponent)",delegates painting to one of two methods: paintdeterminate or paintindeterminate.
"javax.swing.plaf.basic.BasicProgressBarUI.paintDeterminate(java.awt.Graphics,javax.swing.JComponent)","all purpose paint method that should do the right thing for almost all linear, determinate progress bars."
"javax.swing.plaf.basic.BasicProgressBarUI.paintIndeterminate(java.awt.Graphics,javax.swing.JComponent)",all purpose paint method that should do the right thing for all linear bouncing-box progress bars.
javax.swing.plaf.basic.BasicProgressBarUI.setAnimationIndex(int),sets the index of the current animation frame to the specified value and requests that the progress bar be repainted.
javax.swing.plaf.basic.BasicProgressBarUI.startAnimationTimer(),"starts the animation thread, creating and initializing it if necessary."
javax.swing.plaf.basic.BasicProgressBarUI.stopAnimationTimer(),stops the animation thread.
javax.swing.plaf.basic.BasicProgressBarUI.uninstallListeners(),removes all listeners installed by this object.
javax.swing.plaf.basic.BasicRadioButtonUI.createUI(javax.swing.JComponent),returns an instance of basicradiobuttonui.
javax.swing.plaf.basic.BasicRadioButtonUI.getDefaultIcon(),returns the default icon.
javax.swing.plaf.basic.BasicRadioButtonUI.getPreferredSize(javax.swing.JComponent),the preferred size of the radio button.
"javax.swing.plaf.basic.BasicRadioButtonUI.paint(java.awt.Graphics,javax.swing.JComponent)",paint the radio button.
"javax.swing.plaf.basic.BasicRadioButtonUI.paintFocus(java.awt.Graphics,java.awt.Rectangle,java.awt.Dimension)",paints focused radio button.
javax.swing.plaf.basic.BasicRootPaneUI.propertyChange(java.beans.PropertyChangeEvent),invoked when a property changes on the root pane.
javax.swing.plaf.basic.BasicScrollBarUI.getMaximumThumbSize(),returns the largest acceptable size for the thumb.
javax.swing.plaf.basic.BasicScrollBarUI.getMinimumThumbSize(),returns the smallest acceptable size for the thumb.
javax.swing.plaf.basic.BasicScrollBarUI.getPreferredSize(javax.swing.JComponent),"a vertical scrollbar's preferred width is the maximum of preferred widths of the (non null) increment/decrement buttons, and the minimum width of the thumb."
javax.swing.plaf.basic.BasicScrollBarUI.getSupportsAbsolutePositioning(),indicates whether the user can absolutely position the thumb with a mouse gesture (usually the middle mouse button).
javax.swing.plaf.basic.BasicScrollBarUI.getThumbBounds(),return the current size/location of the thumb.
javax.swing.plaf.basic.BasicScrollBarUI.getTrackBounds(),"returns the current bounds of the track, i."
javax.swing.plaf.basic.BasicScrollBarUI.isThumbRollover(),returns true if the mouse is currently over the thumb.
"javax.swing.plaf.basic.BasicScrollBarUI.setThumbBounds(int,int,int,int)",set the bounds of the thumb and force a repaint that includes the old thumbbounds and the new one.
javax.swing.plaf.basic.BasicScrollBarUI.setThumbRollover(boolean),sets whether or not the mouse is currently over the thumb.
javax.swing.plaf.basic.BasicScrollPaneUI.createMouseWheelListener(),"creates an instance of mousewheellistener, which is added to the jscrollpane by installui()."
javax.swing.plaf.basic.BasicScrollPaneUI.createPropertyChangeListener(),creates an instance of propertychangelistener that's added to the jscrollpane by installui().
"javax.swing.plaf.basic.BasicScrollPaneUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicScrollPaneUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
"javax.swing.plaf.basic.BasicSliderUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicSliderUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.plaf.basic.BasicSliderUI.getHighestValue(),returns the biggest value that has an entry in the label table.
javax.swing.plaf.basic.BasicSliderUI.getHighestValueLabel(),returns the label that corresponds to the lowest slider value in the label table.
javax.swing.plaf.basic.BasicSliderUI.getLowestValue(),returns the smallest value that has an entry in the label table.
javax.swing.plaf.basic.BasicSliderUI.getLowestValueLabel(),returns the label that corresponds to the highest slider value in the label table.
javax.swing.plaf.basic.BasicSliderUI.getTickLength(),gets the height of the tick area for horizontal sliders and the width of the tick area for vertical sliders.
javax.swing.plaf.basic.BasicSliderUI.isDragging(),returns true if the user is dragging the slider.
javax.swing.plaf.basic.BasicSliderUI.labelsHaveSameBaselines(),returns true if all the labels from the label table have the same baseline.
"javax.swing.plaf.basic.BasicSliderUI.paintHorizontalLabel(java.awt.Graphics,int,java.awt.Component)",called for every label in the label table.
"javax.swing.plaf.basic.BasicSliderUI.paintVerticalLabel(java.awt.Graphics,int,java.awt.Component)",called for every label in the label table.
javax.swing.plaf.basic.BasicSliderUI.scrollDueToClickInTrack(int),"this function is called when a mousepressed was detected in the track, not in the thumb."
javax.swing.plaf.basic.BasicSliderUI.valueForXPosition(int),returns the value at the x position.
javax.swing.plaf.basic.BasicSliderUI.valueForYPosition(int),returns the value at the y position.
"javax.swing.plaf.basic.BasicSliderUI.yPositionForValue(int,int,int)",returns the y location for the specified value.
javax.swing.plaf.basic.BasicSpinnerUI.createEditor(),this method is called by installui to get the editor component of the jspinner.
javax.swing.plaf.basic.BasicSpinnerUI.createLayout(),"creates a layoutmanager that manages the editor, nextbutton, and previousbutton children of the jspinner."
javax.swing.plaf.basic.BasicSpinnerUI.createNextButton(),"creates an increment button, i."
javax.swing.plaf.basic.BasicSpinnerUI.createPreviousButton(),"creates a decrement button, i."
javax.swing.plaf.basic.BasicSpinnerUI.createPropertyChangeListener(),creates a propertychangelistener that can be added to the jspinner itself.
javax.swing.plaf.basic.BasicSpinnerUI.createUI(javax.swing.JComponent),returns a new instance of basicspinnerui.
"javax.swing.plaf.basic.BasicSpinnerUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicSpinnerUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.plaf.basic.BasicSpinnerUI.installDefaults(),"initialize the jspinner border, foreground, and background, properties based on the corresponding ""spinner."
javax.swing.plaf.basic.BasicSpinnerUI.installKeyboardActions(),installs the keyboard actions onto the jspinner.
javax.swing.plaf.basic.BasicSpinnerUI.installListeners(),initializes propertychangelistener with a shared object that delegates interesting propertychangeevents to protected methods.
javax.swing.plaf.basic.BasicSpinnerUI.installNextButtonListeners(java.awt.Component),"installs the necessary listeners on the next button, c, to update the jspinner in response to a user gesture."
javax.swing.plaf.basic.BasicSpinnerUI.installPreviousButtonListeners(java.awt.Component),"installs the necessary listeners on the previous button, c, to update the jspinner in response to a user gesture."
javax.swing.plaf.basic.BasicSpinnerUI.installUI(javax.swing.JComponent),"calls installdefaults, installlisteners, and then adds the components returned by createnextbutton, createpreviousbutton, and createeditor."
"javax.swing.plaf.basic.BasicSpinnerUI.replaceEditor(javax.swing.JComponent,javax.swing.JComponent)",called by the propertychangelistener when the jspinner editor property changes.
javax.swing.plaf.basic.BasicSpinnerUI.uninstallDefaults(),sets the jspinner's layout manager to null.
javax.swing.plaf.basic.BasicSpinnerUI.uninstallListeners(),removes the propertychangelistener added by installlisteners.
javax.swing.plaf.basic.BasicSpinnerUI.uninstallUI(javax.swing.JComponent),"calls uninstalldefaults, uninstalllisteners, and then removes all of the spinners children."
javax.swing.plaf.basic.BasicSplitPaneDivider.createLeftOneTouchButton(),creates and return an instance of jbutton that can be used to collapse the left component in the split pane.
javax.swing.plaf.basic.BasicSplitPaneDivider.createRightOneTouchButton(),creates and return an instance of jbutton that can be used to collapse the right component in the split pane.
javax.swing.plaf.basic.BasicSplitPaneDivider.dragDividerTo(int),messages the basicsplitpaneui with dragdividerto that this instance is contained in.
javax.swing.plaf.basic.BasicSplitPaneDivider.finishDraggingTo(int),messages the basicsplitpaneui with finishdraggingto that this instance is contained in.
javax.swing.plaf.basic.BasicSplitPaneDivider.getBasicSplitPaneUI(),returns the splitpaneui the receiver is currently in.
javax.swing.plaf.basic.BasicSplitPaneDivider.getBorder(),returns the border of this component or null if no border is currently set.
javax.swing.plaf.basic.BasicSplitPaneDivider.getDividerSize(),"returns the size of the divider, that is the width if the splitpane is horizontal_split, or the height of vertical_split."
javax.swing.plaf.basic.BasicSplitPaneDivider.getInsets(),"if a border has been set on this component, returns the border's insets, else calls super."
javax.swing.plaf.basic.BasicSplitPaneDivider.getMinimumSize(),returns dividersize x dividersize.
javax.swing.plaf.basic.BasicSplitPaneDivider.getPreferredSize(),returns dividersize x dividersize.
javax.swing.plaf.basic.BasicSplitPaneDivider.isMouseOver(),returns whether or not the mouse is currently over the divider.
javax.swing.plaf.basic.BasicSplitPaneDivider.oneTouchExpandableChanged(),messaged when the onetouchexpandable value of the jsplitpane the receiver is contained in changes.
javax.swing.plaf.basic.BasicSplitPaneDivider.paint(java.awt.Graphics),paints the divider.
javax.swing.plaf.basic.BasicSplitPaneDivider.prepareForDragging(),message to prepare for dragging.
javax.swing.plaf.basic.BasicSplitPaneDivider.propertyChange(java.beans.PropertyChangeEvent),"property change event, presumably from the jsplitpane, will message updateorientation if necessary."
javax.swing.plaf.basic.BasicSplitPaneDivider.setBasicSplitPaneUI(javax.swing.plaf.basic.BasicSplitPaneUI),sets the splitpaneui that is using the receiver.
javax.swing.plaf.basic.BasicSplitPaneDivider.setBorder(javax.swing.border.Border),sets the border of this component.
javax.swing.plaf.basic.BasicSplitPaneDivider.setDividerSize(int),sets the size of the divider to newsize.
javax.swing.plaf.basic.BasicSplitPaneDivider.setMouseOver(boolean),sets whether or not the mouse is currently over the divider.
javax.swing.plaf.basic.BasicSplitPaneUI.createDefaultDivider(),creates the default divider.
javax.swing.plaf.basic.BasicSplitPaneUI.createDefaultNonContinuousLayoutDivider(),"returns the default non continuous layout divider, which is an instance of canvas that fills in the background with dark gray."
javax.swing.plaf.basic.BasicSplitPaneUI.createFocusListener(),creates a focuslistener for the jsplitpane ui.
javax.swing.plaf.basic.BasicSplitPaneUI.createPropertyChangeListener(),creates a propertychangelistener for the jsplitpane ui.
javax.swing.plaf.basic.BasicSplitPaneUI.createUI(javax.swing.JComponent),creates a new basicsplitpaneui instance.
javax.swing.plaf.basic.BasicSplitPaneUI.dragDividerTo(int),messaged during a dragging session to move the divider to the passed in location.
javax.swing.plaf.basic.BasicSplitPaneUI.finishDraggingTo(int),messaged to finish the dragging session.
"javax.swing.plaf.basic.BasicSplitPaneUI.finishedPaintingChildren(javax.swing.JSplitPane,java.awt.Graphics)",called when the specified split pane has finished painting its children.
javax.swing.plaf.basic.BasicSplitPaneUI.getDivider(),returns the divider between the top components.
javax.swing.plaf.basic.BasicSplitPaneUI.getDividerLocation(javax.swing.JSplitPane),"returns the location of the divider, which may differ from what the splitpane thinks the location of the divider is."
javax.swing.plaf.basic.BasicSplitPaneUI.getInsets(javax.swing.JComponent),returns the insets.
javax.swing.plaf.basic.BasicSplitPaneUI.getLastDragLocation(),returns the last drag location of the jsplitpane.
javax.swing.plaf.basic.BasicSplitPaneUI.getMaximumDividerLocation(javax.swing.JSplitPane),gets the maximum location of the divider.
javax.swing.plaf.basic.BasicSplitPaneUI.getMaximumSize(javax.swing.JComponent),"returns the maximum size for the passed in component, this is passed off to the current layout manager."
javax.swing.plaf.basic.BasicSplitPaneUI.getMinimumDividerLocation(javax.swing.JSplitPane),gets the minimum location of the divider.
javax.swing.plaf.basic.BasicSplitPaneUI.getMinimumSize(javax.swing.JComponent),"returns the minimum size for the passed in component, this is passed off to the current layout manager."
javax.swing.plaf.basic.BasicSplitPaneUI.getNonContinuousLayoutDivider(),returns the divider to use when the splitpane is configured to not continuously layout.
javax.swing.plaf.basic.BasicSplitPaneUI.getOrientation(),returns the orientation for the jsplitpane.
javax.swing.plaf.basic.BasicSplitPaneUI.getPreferredSize(javax.swing.JComponent),"returns the preferred size for the passed in component, this is passed off to the current layout manager."
javax.swing.plaf.basic.BasicSplitPaneUI.getSplitPane(),returns the splitpane this instance is currently contained in.
javax.swing.plaf.basic.BasicSplitPaneUI.installDefaults(),installs the ui defaults.
javax.swing.plaf.basic.BasicSplitPaneUI.installKeyboardActions(),installs the keyboard actions for the ui.
javax.swing.plaf.basic.BasicSplitPaneUI.installListeners(),installs the event listeners for the ui.
javax.swing.plaf.basic.BasicSplitPaneUI.installUI(javax.swing.JComponent),installs the ui.
javax.swing.plaf.basic.BasicSplitPaneUI.isContinuousLayout(),determines whether the jsplitpane is set to use a continuous layout.
"javax.swing.plaf.basic.BasicSplitPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component appropriately for the look and feel.
javax.swing.plaf.basic.BasicSplitPaneUI.resetLayoutManager(),resets the layout manager based on orientation and messages it with invalidatelayout to pull in appropriate components.
javax.swing.plaf.basic.BasicSplitPaneUI.resetToPreferredSizes(javax.swing.JSplitPane),messaged to reset the preferred sizes.
javax.swing.plaf.basic.BasicSplitPaneUI.setContinuousLayout(boolean),turn continuous layout on/off.
"javax.swing.plaf.basic.BasicSplitPaneUI.setDividerLocation(javax.swing.JSplitPane,int)",sets the location of the divider to location.
javax.swing.plaf.basic.BasicSplitPaneUI.setLastDragLocation(int),set the last drag location of the jsplitpane.
javax.swing.plaf.basic.BasicSplitPaneUI.setNonContinuousLayoutDivider(java.awt.Component),sets the divider to use when the splitpane is configured to not continuously layout.
"javax.swing.plaf.basic.BasicSplitPaneUI.setNonContinuousLayoutDivider(java.awt.Component,boolean)",sets the divider to use.
javax.swing.plaf.basic.BasicSplitPaneUI.setOrientation(int),set the orientation for the jsplitpane.
javax.swing.plaf.basic.BasicSplitPaneUI.startDragging(),"should be messaged before the dragging session starts, resets lastdraglocation and dividersize."
javax.swing.plaf.basic.BasicSplitPaneUI.uninstallDefaults(),uninstalls the ui defaults.
javax.swing.plaf.basic.BasicSplitPaneUI.uninstallKeyboardActions(),uninstalls the keyboard actions for the ui.
javax.swing.plaf.basic.BasicSplitPaneUI.uninstallListeners(),uninstalls the event listeners for the ui.
javax.swing.plaf.basic.BasicSplitPaneUI.uninstallUI(javax.swing.JComponent),uninstalls the ui.
javax.swing.plaf.basic.BasicTabbedPaneUI.createLayoutManager(),invoked by installui to create a layout manager object to manage the jtabbedpane.
javax.swing.plaf.basic.BasicTabbedPaneUI.createScrollButton(int),creates and returns a jbutton that will provide the user with a way to scroll the tabs in a particular direction.
"javax.swing.plaf.basic.BasicTabbedPaneUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicTabbedPaneUI.getBaseline(int),returns the baseline for the specified tab.
javax.swing.plaf.basic.BasicTabbedPaneUI.getBaselineOffset(),returns the amount the baseline is offset by.
javax.swing.plaf.basic.BasicTabbedPaneUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.plaf.basic.BasicTabbedPaneUI.getFocusIndex(),returns the index of the tab that has focus.
javax.swing.plaf.basic.BasicTabbedPaneUI.getRolloverTab(),"returns the tab the mouse is currently over, or -1 if the mouse is no longer over any tab."
"javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(javax.swing.JTabbedPane,int)",returns the bounds of the specified tab index.
"javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(int,java.awt.Rectangle)",returns the bounds of the specified tab in the coordinate space of the jtabbedpane component.
javax.swing.plaf.basic.BasicTabbedPaneUI.getTextViewForTab(int),returns the text view object required to render stylized text (html) for the specified tab or null if no specialized text rendering is needed for this tab.
javax.swing.plaf.basic.BasicTabbedPaneUI.installComponents(),creates and installs any required subcomponents for the jtabbedpane.
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabArea(java.awt.Graphics,int,int)",paints the tabs in the tab area.
"javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabBorder(java.awt.Graphics,int,int,int,int,int,int,boolean)",this function draws the border around each tab note that this function does now draw the background of the tab.
javax.swing.plaf.basic.BasicTabbedPaneUI.setRolloverTab(int),sets the tab the mouse is currently over to index.
"javax.swing.plaf.basic.BasicTabbedPaneUI.tabForCoordinate(javax.swing.JTabbedPane,int,int)",returns the tab index which intersects the specified point in the jtabbedpane's coordinate space.
javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallComponents(),removes any installed subcomponents from the jtabbedpane.
javax.swing.plaf.basic.BasicTableHeaderUI.createMouseInputListener(),creates the mouse listener for the jtableheader.
"javax.swing.plaf.basic.BasicTableHeaderUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicTableHeaderUI.getMaximumSize(javax.swing.JComponent),return the maximum size of the header.
javax.swing.plaf.basic.BasicTableHeaderUI.getMinimumSize(javax.swing.JComponent),return the minimum size of the header.
javax.swing.plaf.basic.BasicTableHeaderUI.getPreferredSize(javax.swing.JComponent),return the preferred size of the header.
javax.swing.plaf.basic.BasicTableHeaderUI.getRolloverColumn(),returns the index of the column header over which the mouse currently is.
javax.swing.plaf.basic.BasicTableHeaderUI.installDefaults(),"initializes jtableheader properties such as font, foreground, and background."
javax.swing.plaf.basic.BasicTableHeaderUI.installKeyboardActions(),register all keyboard actions on the jtableheader.
javax.swing.plaf.basic.BasicTableHeaderUI.installListeners(),attaches listeners to the jtableheader.
"javax.swing.plaf.basic.BasicTableHeaderUI.rolloverColumnUpdated(int,int)",this method gets called every time when a rollover column in the table header is updated.
javax.swing.plaf.basic.BasicTableHeaderUI.uninstallKeyboardActions(),unregisters default key actions.
javax.swing.plaf.basic.BasicTableUI.createFocusListener(),creates the focus listener for handling keyboard navigation in the jtable.
javax.swing.plaf.basic.BasicTableUI.createKeyListener(),creates the key listener for handling keyboard navigation in the jtable.
javax.swing.plaf.basic.BasicTableUI.createMouseInputListener(),creates the mouse listener for the jtable.
"javax.swing.plaf.basic.BasicTableUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicTableUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.plaf.basic.BasicTableUI.getMaximumSize(javax.swing.JComponent),return the maximum size of the table.
javax.swing.plaf.basic.BasicTableUI.getMinimumSize(javax.swing.JComponent),return the minimum size of the table.
javax.swing.plaf.basic.BasicTableUI.getPreferredSize(javax.swing.JComponent),return the preferred size of the table.
javax.swing.plaf.basic.BasicTableUI.installDefaults(),"initialize jtable properties, e."
javax.swing.plaf.basic.BasicTableUI.installKeyboardActions(),register all keyboard actions on the jtable.
javax.swing.plaf.basic.BasicTableUI.installListeners(),attaches listeners to the jtable.
"javax.swing.plaf.basic.BasicTableUI.paint(java.awt.Graphics,javax.swing.JComponent)",paint a representation of the table instance that was set in installui().
javax.swing.plaf.basic.BasicTextAreaUI.create(javax.swing.text.Element),creates the view for an element.
javax.swing.plaf.basic.BasicTextAreaUI.createUI(javax.swing.JComponent),creates a ui for a jtextarea.
"javax.swing.plaf.basic.BasicTextAreaUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicTextAreaUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.plaf.basic.BasicTextAreaUI.getMinimumSize(javax.swing.JComponent),the method is overridden to take into account caret width.
javax.swing.plaf.basic.BasicTextAreaUI.getPreferredSize(javax.swing.JComponent),the method is overridden to take into account caret width.
javax.swing.plaf.basic.BasicTextAreaUI.getPropertyPrefix(),fetches the name used as a key to look up properties through the uimanager.
javax.swing.plaf.basic.BasicTextAreaUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed on the associated jtextcomponent.
javax.swing.plaf.basic.BasicTextFieldUI.create(javax.swing.text.Element),creates a view (fieldview) based on an element.
javax.swing.plaf.basic.BasicTextFieldUI.createUI(javax.swing.JComponent),creates a ui for a jtextfield.
"javax.swing.plaf.basic.BasicTextFieldUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicTextFieldUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.plaf.basic.BasicTextFieldUI.getPropertyPrefix(),fetches the name used as a key to lookup properties through the uimanager.
javax.swing.plaf.basic.BasicTextPaneUI.createUI(javax.swing.JComponent),creates a ui for the jtextpane.
javax.swing.plaf.basic.BasicTextPaneUI.getPropertyPrefix(),fetches the name used as a key to lookup properties through the uimanager.
javax.swing.plaf.basic.BasicTextPaneUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed on the associated jtextcomponent.
javax.swing.plaf.basic.BasicTextUI.create(javax.swing.text.Element),creates a view for an element.
"javax.swing.plaf.basic.BasicTextUI.create(javax.swing.text.Element,int,int)",creates a view for an element.
javax.swing.plaf.basic.BasicTextUI.createCaret(),creates the object to use for a caret.
javax.swing.plaf.basic.BasicTextUI.createHighlighter(),creates the object to use for adding highlights.
javax.swing.plaf.basic.BasicTextUI.createKeymap(),"creates the keymap to use for the text component, and installs any necessary bindings into it."
"javax.swing.plaf.basic.BasicTextUI.damageRange(javax.swing.text.JTextComponent,int,int)",causes the portion of the view responsible for the given part of the model to be repainted.
"javax.swing.plaf.basic.BasicTextUI.damageRange(javax.swing.text.JTextComponent,int,int,javax.swing.text.Position.Bias,javax.swing.text.Position.Bias)",causes the portion of the view responsible for the given part of the model to be repainted.
javax.swing.plaf.basic.BasicTextUI.getComponent(),fetches the text component associated with this ui implementation.
javax.swing.plaf.basic.BasicTextUI.getEditorKit(javax.swing.text.JTextComponent),fetches the editorkit for the ui.
javax.swing.plaf.basic.BasicTextUI.getKeymapName(),fetches the name of the keymap that will be installed/used by default for this ui.
javax.swing.plaf.basic.BasicTextUI.getMaximumSize(javax.swing.JComponent),gets the maximum size for the editor component.
javax.swing.plaf.basic.BasicTextUI.getMinimumSize(javax.swing.JComponent),gets the minimum size for the editor component.
"javax.swing.plaf.basic.BasicTextUI.getNextVisualPositionFrom(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias[])",provides a way to determine the next visually represented model location that one might place a caret.
javax.swing.plaf.basic.BasicTextUI.getPreferredSize(javax.swing.JComponent),gets the preferred size for the editor component.
javax.swing.plaf.basic.BasicTextUI.getPropertyPrefix(),gets the name used as a key to look up properties through the uimanager.
javax.swing.plaf.basic.BasicTextUI.getRootView(javax.swing.text.JTextComponent),fetches a view with the allocation of the associated text component (i.
"javax.swing.plaf.basic.BasicTextUI.getToolTipText(javax.swing.text.JTextComponent,java.awt.Point)",returns the string to be used as the tooltip at the passed in location.
javax.swing.plaf.basic.BasicTextUI.getVisibleEditorRect(),gets the allocation to give the root view.
javax.swing.plaf.basic.BasicTextUI.installDefaults(),"initializes component properties, such as font, foreground, background, caret color, selection color, selected text color, disabled text color, and border color."
javax.swing.plaf.basic.BasicTextUI.installListeners(),installs listeners for the ui.
javax.swing.plaf.basic.BasicTextUI.installUI(javax.swing.JComponent),installs the ui for a component.
javax.swing.plaf.basic.BasicTextUI.modelChanged(),flags model changes.
"javax.swing.plaf.basic.BasicTextUI.modelToView(javax.swing.text.JTextComponent,int)",converts the given location in the model to a place in the view coordinate system.
"javax.swing.plaf.basic.BasicTextUI.modelToView(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias)",converts the given location in the model to a place in the view coordinate system.
"javax.swing.plaf.basic.BasicTextUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the interface.
javax.swing.plaf.basic.BasicTextUI.paintBackground(java.awt.Graphics),paints a background for the view.
javax.swing.plaf.basic.BasicTextUI.paintSafely(java.awt.Graphics),paints the interface safely with a guarantee that the model won't change from the view of this thread.
javax.swing.plaf.basic.BasicTextUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed on the associated jtextcomponent.
javax.swing.plaf.basic.BasicTextUI.setView(javax.swing.text.View),sets the current root of the view hierarchy and calls invalidate().
javax.swing.plaf.basic.BasicTextUI.uninstallDefaults(),sets the component properties that have not been explicitly overridden to null.
javax.swing.plaf.basic.BasicTextUI.uninstallListeners(),uninstalls listeners for the ui.
javax.swing.plaf.basic.BasicTextUI.uninstallUI(javax.swing.JComponent),deinstalls the ui for a component.
"javax.swing.plaf.basic.BasicTextUI.update(java.awt.Graphics,javax.swing.JComponent)",superclass paints background in an uncontrollable way (i.
"javax.swing.plaf.basic.BasicTextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point)",converts the given place in the view coordinate system to the nearest representative location in the model.
"javax.swing.plaf.basic.BasicTextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point,javax.swing.text.Position.Bias[])",converts the given place in the view coordinate system to the nearest representative location in the model.
javax.swing.plaf.basic.BasicToolBarUI.createFloatingFrame(javax.swing.JToolBar),"no longer used, use basictoolbarui."
javax.swing.plaf.basic.BasicToolBarUI.createFloatingWindow(javax.swing.JToolBar),creates a window which contains the toolbar after it has been dragged out from its container.
javax.swing.plaf.basic.BasicToolBarUI.createNonRolloverBorder(),creates the non rollover border for toolbar components.
javax.swing.plaf.basic.BasicToolBarUI.createRolloverBorder(),creates a rollover border for toolbar components.
javax.swing.plaf.basic.BasicToolBarUI.getDockingColor(),gets the color displayed when over a docking area.
javax.swing.plaf.basic.BasicToolBarUI.getFloatingColor(),gets the color displayed when over a floating area.
javax.swing.plaf.basic.BasicToolBarUI.getNonRolloverBorder(javax.swing.AbstractButton),returns a non-rollover border for the button.
javax.swing.plaf.basic.BasicToolBarUI.getRolloverBorder(javax.swing.AbstractButton),returns a rollover border for the button.
javax.swing.plaf.basic.BasicToolBarUI.installNonRolloverBorders(javax.swing.JComponent),installs non-rollover borders on all the child components of the jcomponent.
javax.swing.plaf.basic.BasicToolBarUI.installNormalBorders(javax.swing.JComponent),installs normal borders on all the child components of the jcomponent.
javax.swing.plaf.basic.BasicToolBarUI.installRolloverBorders(javax.swing.JComponent),installs rollover borders on all the child components of the jcomponent.
javax.swing.plaf.basic.BasicToolBarUI.isRolloverBorders(),returns a flag to determine whether rollover button borders are enabled.
javax.swing.plaf.basic.BasicToolBarUI.paintDragWindow(java.awt.Graphics),paints the contents of the window used for dragging.
javax.swing.plaf.basic.BasicToolBarUI.setBorderToNonRollover(java.awt.Component),sets the border of the component to have a non-rollover border which was created by the createnonrolloverborder() method.
javax.swing.plaf.basic.BasicToolBarUI.setBorderToNormal(java.awt.Component),sets the border of the component to have a normal border.
javax.swing.plaf.basic.BasicToolBarUI.setBorderToRollover(java.awt.Component),sets the border of the component to have a rollover border which was created by the createrolloverborder() method.
javax.swing.plaf.basic.BasicToolBarUI.setDockingColor(java.awt.Color),sets the color displayed when over a docking area.
javax.swing.plaf.basic.BasicToolBarUI.setFloatingColor(java.awt.Color),sets the color displayed when over a floating area.
javax.swing.plaf.basic.BasicToolBarUI.setRolloverBorders(boolean),sets the flag for enabling rollover borders on the toolbar and it will also install the appropriate border depending on the state of the flag.
javax.swing.plaf.basic.BasicTreeUI.cancelEditing(javax.swing.JTree),cancels the current editing session.
"javax.swing.plaf.basic.BasicTreeUI.checkForClickInExpandControl(javax.swing.tree.TreePath,int,int)","if the mousex and mousey are in the expand/collapse region of the row, this will toggle the row."
javax.swing.plaf.basic.BasicTreeUI.completeEditing(),messages to stop the editing session.
"javax.swing.plaf.basic.BasicTreeUI.completeEditing(boolean,boolean,boolean)",stops the editing session.
javax.swing.plaf.basic.BasicTreeUI.completeUIInstall(),invoked from installui after all the defaults/listeners have been installed.
javax.swing.plaf.basic.BasicTreeUI.configureLayoutCache(),resets the treestate instance based on the tree we're providing the look and feel for.
javax.swing.plaf.basic.BasicTreeUI.createCellEditorListener(),creates a listener to handle events from the current editor.
javax.swing.plaf.basic.BasicTreeUI.createCellRendererPane(),returns the renderer pane that renderer components are placed in.
javax.swing.plaf.basic.BasicTreeUI.createComponentListener(),creates and returns a new componenthandler.
javax.swing.plaf.basic.BasicTreeUI.createDefaultCellEditor(),creates a default cell editor.
javax.swing.plaf.basic.BasicTreeUI.createDefaultCellRenderer(),returns the default cell renderer that is used to do the stamping of each node.
javax.swing.plaf.basic.BasicTreeUI.createFocusListener(),creates a listener that is responsible for updating the display when focus is lost/gained.
javax.swing.plaf.basic.BasicTreeUI.createKeyListener(),creates the listener reponsible for getting key events from the tree.
javax.swing.plaf.basic.BasicTreeUI.createLayoutCache(),"creates the object responsible for managing what is expanded, as well as the size of nodes."
javax.swing.plaf.basic.BasicTreeUI.createMouseListener(),creates the listener responsible for updating the selection based on mouse events.
javax.swing.plaf.basic.BasicTreeUI.createNodeDimensions(),creates an instance of nodedimensions that is able to determine the size of a given node in the tree.
javax.swing.plaf.basic.BasicTreeUI.createPropertyChangeListener(),creates a listener that is responsible that updates the ui based on how the tree changes.
javax.swing.plaf.basic.BasicTreeUI.createSelectionModelPropertyChangeListener(),creates the listener responsible for getting property change events from the selection model.
javax.swing.plaf.basic.BasicTreeUI.createTreeExpansionListener(),creates and returns the object responsible for updating the treestate when nodes expanded state changes.
javax.swing.plaf.basic.BasicTreeUI.createTreeModelListener(),returns a listener that can update the tree when the model changes.
javax.swing.plaf.basic.BasicTreeUI.createTreeSelectionListener(),creates the listener that updates the display based on selection change methods.
"javax.swing.plaf.basic.BasicTreeUI.ensureRowsAreVisible(int,int)",ensures that the rows identified by beginrow through endrow are visible.
"javax.swing.plaf.basic.BasicTreeUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.basic.BasicTreeUI.getBaselineResizeBehavior(javax.swing.JComponent),returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.plaf.basic.BasicTreeUI.getCellRenderer(),"return currentcellrenderer, which will either be the trees renderer, or defaultcellrenderer, which ever wasn't null."
"javax.swing.plaf.basic.BasicTreeUI.getClosestPathForLocation(javax.swing.JTree,int,int)","returns the path to the node that is closest to x,y."
javax.swing.plaf.basic.BasicTreeUI.getDropLineRect(javax.swing.JTree.DropLocation),returns a unbounding box for the drop line.
javax.swing.plaf.basic.BasicTreeUI.getEditingPath(javax.swing.JTree),returns the path to the element that is being edited.
javax.swing.plaf.basic.BasicTreeUI.getHorizontalLegBuffer(),the horizontal element of legs between nodes starts at the right of the left-hand side of the child node by default.
javax.swing.plaf.basic.BasicTreeUI.getLastChildPath(javax.swing.tree.TreePath),returns a path to the last child of parent.
javax.swing.plaf.basic.BasicTreeUI.getLeadSelectionRow(),returns the lead row of the selection.
javax.swing.plaf.basic.BasicTreeUI.getMaximumSize(javax.swing.JComponent),"returns the maximum size for this component, which will be the preferred size if the instance is currently in a jtree, or 0, 0."
javax.swing.plaf.basic.BasicTreeUI.getMinimumSize(javax.swing.JComponent),returns the minimum size for this component.
"javax.swing.plaf.basic.BasicTreeUI.getPathBounds(javax.swing.JTree,javax.swing.tree.TreePath)",returns the rectangle enclosing the label portion that the last item in path will be drawn into.
"javax.swing.plaf.basic.BasicTreeUI.getPathForRow(javax.swing.JTree,int)",returns the path for passed in row.
javax.swing.plaf.basic.BasicTreeUI.getPreferredMinSize(),returns the minimum preferred size.
javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(javax.swing.JComponent),"returns the preferred size to properly display the tree, this is a cover method for getpreferredsize(c, true)."
"javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(javax.swing.JComponent,boolean)",returns the preferred size to represent the tree in c.
javax.swing.plaf.basic.BasicTreeUI.getRowCount(javax.swing.JTree),returns the number of rows that are being displayed.
"javax.swing.plaf.basic.BasicTreeUI.getRowForPath(javax.swing.JTree,javax.swing.tree.TreePath)",returns the row that the last item identified in path is visible at.
"javax.swing.plaf.basic.BasicTreeUI.getRowX(int,int)","returns the location, along the x-axis, to render a particular row at."
javax.swing.plaf.basic.BasicTreeUI.getVerticalLegBuffer(),the vertical element of legs between nodes starts at the bottom of the parent node by default.
"javax.swing.plaf.basic.BasicTreeUI.handleExpandControlClick(javax.swing.tree.TreePath,int,int)","messaged when the user clicks the particular row, this invokes toggleexpandstate."
javax.swing.plaf.basic.BasicTreeUI.installComponents(),"intalls the subcomponents of the tree, which is the renderer pane."
javax.swing.plaf.basic.BasicTreeUI.isDropLine(javax.swing.JTree.DropLocation),tells if a droplocation should be indicated by a line between nodes.
javax.swing.plaf.basic.BasicTreeUI.isEditing(javax.swing.JTree),returns true if the tree is being edited.
"javax.swing.plaf.basic.BasicTreeUI.isLocationInExpandControl(javax.swing.tree.TreePath,int,int)",returns true if mousex and mousey fall in the area of row that is used to expand/collapse the node and the node at row does not represent a leaf.
javax.swing.plaf.basic.BasicTreeUI.isMultiSelectEvent(java.awt.event.MouseEvent),returning true signifies a mouse event on the node should select from the anchor point.
javax.swing.plaf.basic.BasicTreeUI.isToggleEvent(java.awt.event.MouseEvent),returning true indicates the row under the mouse should be toggled based on the event.
javax.swing.plaf.basic.BasicTreeUI.isToggleSelectionEvent(java.awt.event.MouseEvent),returning true signifies a mouse event on the node should toggle the selection of only the row under mouse.
javax.swing.plaf.basic.BasicTreeUI.paintDropLine(java.awt.Graphics),paints the drop line.
"javax.swing.plaf.basic.BasicTreeUI.paintExpandControl(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)",paints the expand (toggle) part of a row.
"javax.swing.plaf.basic.BasicTreeUI.paintHorizontalLine(java.awt.Graphics,javax.swing.JComponent,int,int,int)",paints a horizontal line.
"javax.swing.plaf.basic.BasicTreeUI.paintHorizontalPartOfLeg(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)",paints the horizontal part of the leg.
"javax.swing.plaf.basic.BasicTreeUI.paintRow(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)",paints the renderer part of a row.
"javax.swing.plaf.basic.BasicTreeUI.paintVerticalLine(java.awt.Graphics,javax.swing.JComponent,int,int,int)",paints a vertical line.
"javax.swing.plaf.basic.BasicTreeUI.paintVerticalPartOfLeg(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,javax.swing.tree.TreePath)",paints the vertical part of the leg.
javax.swing.plaf.basic.BasicTreeUI.pathWasCollapsed(javax.swing.tree.TreePath),messaged from the visibletreenode after it has collapsed.
javax.swing.plaf.basic.BasicTreeUI.pathWasExpanded(javax.swing.tree.TreePath),messaged from the visibletreenode after it has been expanded.
javax.swing.plaf.basic.BasicTreeUI.prepareForUIInstall(),"invoked after the tree instance variable has been set, but before any defaults/listeners have been installed."
"javax.swing.plaf.basic.BasicTreeUI.selectPathForEvent(javax.swing.tree.TreePath,java.awt.event.MouseEvent)",messaged to update the selection based on a mouseevent over a particular row.
javax.swing.plaf.basic.BasicTreeUI.setCellEditor(javax.swing.tree.TreeCellEditor),sets the cell editor.
javax.swing.plaf.basic.BasicTreeUI.setCellRenderer(javax.swing.tree.TreeCellRenderer),sets the treecellrenderer to tcr.
javax.swing.plaf.basic.BasicTreeUI.setEditable(boolean),"configures the receiver to allow, or not allow, editing."
javax.swing.plaf.basic.BasicTreeUI.setLargeModel(boolean),"updates the componentlistener, if necessary."
javax.swing.plaf.basic.BasicTreeUI.setModel(javax.swing.tree.TreeModel),sets the treemodel.
javax.swing.plaf.basic.BasicTreeUI.setPreferredMinSize(java.awt.Dimension),sets the preferred minimum size.
javax.swing.plaf.basic.BasicTreeUI.setRootVisible(boolean),sets the root to being visible.
javax.swing.plaf.basic.BasicTreeUI.setRowHeight(int),"sets the row height, this is forwarded to the treestate."
javax.swing.plaf.basic.BasicTreeUI.setSelectionModel(javax.swing.tree.TreeSelectionModel),resets the selection model.
javax.swing.plaf.basic.BasicTreeUI.setShowsRootHandles(boolean),determines whether the node handles are to be displayed.
"javax.swing.plaf.basic.BasicTreeUI.shouldPaintExpandControl(javax.swing.tree.TreePath,int,boolean,boolean,boolean)",returns true if the expand (toggle) control should be drawn for the specified row.
"javax.swing.plaf.basic.BasicTreeUI.startEditing(javax.swing.tree.TreePath,java.awt.event.MouseEvent)",will start editing for node if there is a celleditor and shouldselectcell returns true.
"javax.swing.plaf.basic.BasicTreeUI.startEditingAtPath(javax.swing.JTree,javax.swing.tree.TreePath)",selects the last item in path and tries to edit it.
javax.swing.plaf.basic.BasicTreeUI.stopEditing(javax.swing.JTree),stops the current editing session.
javax.swing.plaf.basic.BasicTreeUI.toggleExpandState(javax.swing.tree.TreePath),"expands path if it is not expanded, or collapses row if it is expanded."
javax.swing.plaf.basic.BasicTreeUI.uninstallComponents(),uninstalls the renderer pane.
javax.swing.plaf.basic.BasicTreeUI.updateCachedPreferredSize(),"updates the preferredsize instance variable, which is returned from getpreferredsize()."
javax.swing.plaf.basic.BasicTreeUI.updateCellEditor(),updates the celleditor based on the editability of the jtree that we're contained in.
javax.swing.plaf.basic.BasicTreeUI.updateDepthOffset(),updates how much each depth should be offset by.
javax.swing.plaf.basic.BasicTreeUI.updateExpandedDescendants(javax.swing.tree.TreePath),updates the expanded state of all the descendants of path by getting the expanded descendants from the tree and forwarding to the tree state.
javax.swing.plaf.basic.BasicTreeUI.updateLayoutCacheExpandedNodes(),makes all the nodes that are expanded in jtree expanded in layoutcache.
javax.swing.plaf.basic.BasicTreeUI.updateLeadSelectionRow(),updates the lead row of the selection.
javax.swing.plaf.basic.BasicTreeUI.updateRenderer(),messaged from the tree we're in when the renderer has changed.
javax.swing.plaf.basic.BasicTreeUI.updateSize(),"marks the cached size as being invalid, and messages the tree with treedidchange."
javax.swing.plaf.metal.DefaultMetalTheme.getControlTextFont(),returns the control text font.
javax.swing.plaf.metal.DefaultMetalTheme.getMenuTextFont(),returns the menu text font.
javax.swing.plaf.metal.DefaultMetalTheme.getName(),returns the name of this theme.
javax.swing.plaf.metal.DefaultMetalTheme.getPrimary1(),returns the primary 1 color.
javax.swing.plaf.metal.DefaultMetalTheme.getPrimary2(),returns the primary 2 color.
javax.swing.plaf.metal.DefaultMetalTheme.getPrimary3(),returns the primary 3 color.
javax.swing.plaf.metal.DefaultMetalTheme.getSecondary1(),returns the secondary 1 color.
javax.swing.plaf.metal.DefaultMetalTheme.getSecondary2(),returns the secondary 2 color.
javax.swing.plaf.metal.DefaultMetalTheme.getSecondary3(),returns the secondary 3 color.
javax.swing.plaf.metal.DefaultMetalTheme.getSubTextFont(),returns the sub-text font.
javax.swing.plaf.metal.DefaultMetalTheme.getSystemTextFont(),returns the system text font.
javax.swing.plaf.metal.DefaultMetalTheme.getUserTextFont(),returns the user text font.
javax.swing.plaf.metal.DefaultMetalTheme.getWindowTitleFont(),returns the window title font.
javax.swing.plaf.metal.MetalBorders.getButtonBorder(),returns a border instance for a jbutton.
javax.swing.plaf.metal.MetalBorders.getDesktopIconBorder(),returns a border instance for a desktop icon.
javax.swing.plaf.metal.MetalBorders.getTextBorder(),returns a border instance for a text component.
javax.swing.plaf.metal.MetalBorders.getTextFieldBorder(),returns a border instance for a jtextfield.
javax.swing.plaf.metal.MetalBorders.getToggleButtonBorder(),returns a border instance for a jtogglebutton.
"javax.swing.plaf.metal.MetalButtonUI.update(java.awt.Graphics,javax.swing.JComponent)","if necessary paints the background of the component, then invokes paint."
javax.swing.plaf.metal.MetalComboBoxIcon.getIconHeight(),created a stub to satisfy the interface.
javax.swing.plaf.metal.MetalComboBoxIcon.getIconWidth(),created a stub to satisfy the interface.
"javax.swing.plaf.metal.MetalComboBoxIcon.paintIcon(java.awt.Component,java.awt.Graphics,int,int)",paints the horizontal bars for the.
"javax.swing.plaf.metal.MetalComboBoxUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
"javax.swing.plaf.metal.MetalComboBoxUI.paintCurrentValue(java.awt.Graphics,java.awt.Rectangle,boolean)",if necessary paints the currently selected item.
"javax.swing.plaf.metal.MetalComboBoxUI.paintCurrentValueBackground(java.awt.Graphics,java.awt.Rectangle,boolean)",if necessary paints the background of the currently selected item.
javax.swing.plaf.metal.MetalFileChooserUI.createListSelectionListener(javax.swing.JFileChooser),creates a selection listener for the list of files and directories.
javax.swing.plaf.metal.MetalFileChooserUI.getMaximumSize(javax.swing.JComponent),returns the maximum size of the jfilechooser.
javax.swing.plaf.metal.MetalFileChooserUI.getMinimumSize(javax.swing.JComponent),returns the minimum size of the jfilechooser.
javax.swing.plaf.metal.MetalFileChooserUI.getPreferredSize(javax.swing.JComponent),returns the preferred size of the specified jfilechooser.
javax.swing.plaf.metal.MetalFileChooserUI.setDirectorySelected(boolean),property to remember whether a directory is currently selected in the ui.
javax.swing.plaf.metal.MetalIconFactory.getCheckBoxIcon(),returns a checkbox icon.
javax.swing.plaf.metal.MetalIconFactory.getMenuItemCheckIcon(),returns an icon to be used by jcheckboxmenuitem.
javax.swing.plaf.metal.MetalInternalFrameUI.createBorderListener(javax.swing.JInternalFrame),returns the mouseinputadapter that will be installed on the titlepane.
"javax.swing.plaf.metal.MetalLabelUI.paintDisabledText(javax.swing.JLabel,java.awt.Graphics,java.lang.String,int,int)",just paint the text gray (label.
javax.swing.plaf.metal.MetalLookAndFeel.createDefaultTheme(),ensures the current metaltheme is non-null.
javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorForeground(),returns the accelerator foreground color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorSelectedForeground(),returns the accelerator selected foreground color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getBlack(),returns the black color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getControl(),returns the control color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getControlDarkShadow(),returns the control dark shadow color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getControlDisabled(),returns the control disabled color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getControlHighlight(),returns the control highlight color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getControlInfo(),returns the control info color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getControlShadow(),returns the control shadow color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getControlTextColor(),returns the control text color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getControlTextFont(),returns the control text font of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getCurrentTheme(),return the theme currently being used by metallookandfeel.
javax.swing.plaf.metal.MetalLookAndFeel.getDefaults(),returns the look and feel defaults.
javax.swing.plaf.metal.MetalLookAndFeel.getDescription(),returns a short description of this look and feel.
javax.swing.plaf.metal.MetalLookAndFeel.getDesktopColor(),returns the desktop color of the current theme.
"javax.swing.plaf.metal.MetalLookAndFeel.getDisabledIcon(javax.swing.JComponent,javax.swing.Icon)",returns an icon with a disabled appearance.
"javax.swing.plaf.metal.MetalLookAndFeel.getDisabledSelectedIcon(javax.swing.JComponent,javax.swing.Icon)",returns an icon for use by disabled components that are also selected.
javax.swing.plaf.metal.MetalLookAndFeel.getFocusColor(),returns the focus color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getHighlightedTextColor(),returns the highlighted text color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getID(),returns an identifier for this look and feel.
javax.swing.plaf.metal.MetalLookAndFeel.getInactiveControlTextColor(),returns the inactive control text color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getInactiveSystemTextColor(),returns the inactive system text color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getLayoutStyle(),returns a layoutstyle implementing the java look and feel design guidelines as specified at http://www.
javax.swing.plaf.metal.MetalLookAndFeel.getMenuBackground(),returns the menu background color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getMenuDisabledForeground(),returns the menu disabled foreground color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getMenuForeground(),returns the menu foreground color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedBackground(),returns the menu selected background color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedForeground(),returns the menu selected foreground color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getMenuTextFont(),returns the menu text font of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getName(),returns the name of this look and feel.
javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControl(),returns the primary control color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlDarkShadow(),returns the primary control dark shadow color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlHighlight(),returns the primary control highlight color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlInfo(),returns the primary control info color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlShadow(),returns the primary control shadow color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorBackground(),returns the separator background color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorForeground(),returns the separator foreground color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getSubTextFont(),returns the sub-text font of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getSupportsWindowDecorations(),returns true; metal can provide window decorations.
javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextColor(),returns the system text color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextFont(),returns the system text font of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getTextHighlightColor(),returns the text highlight color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getUserTextColor(),returns the user text color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getUserTextFont(),returns the user text font of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getWhite(),returns the white color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getWindowBackground(),returns the window background color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleBackground(),returns the window title background color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleFont(),returns the window title font of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleForeground(),returns the window title foreground color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveBackground(),returns the window title inactive background color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveForeground(),returns the window title inactive foreground color of the current theme.
javax.swing.plaf.metal.MetalLookAndFeel.initClassDefaults(javax.swing.UIDefaults),populates table with mappings from uiclassid to the fully qualified name of the ui class.
javax.swing.plaf.metal.MetalLookAndFeel.initComponentDefaults(javax.swing.UIDefaults),populates table with the defaults for metal.
javax.swing.plaf.metal.MetalLookAndFeel.initSystemColorDefaults(javax.swing.UIDefaults),populates table with system colors.
javax.swing.plaf.metal.MetalLookAndFeel.isNativeLookAndFeel(),returns false; metallookandfeel is not a native look and feel.
javax.swing.plaf.metal.MetalLookAndFeel.isSupportedLookAndFeel(),returns true; metallookandfeel can be run on any platform.
javax.swing.plaf.metal.MetalLookAndFeel.provideErrorFeedback(java.awt.Component),"invoked when the user attempts an invalid operation, such as pasting into an uneditable jtextfield that has focus."
javax.swing.plaf.metal.MetalLookAndFeel.setCurrentTheme(javax.swing.plaf.metal.MetalTheme),set the theme used by metallookandfeel.
javax.swing.plaf.metal.MetalMenuBarUI.createUI(javax.swing.JComponent),creates the componentui implementation for the passed in component.
javax.swing.plaf.metal.MetalMenuBarUI.installUI(javax.swing.JComponent),configures the specified component appropriate for the metal look and feel.
javax.swing.plaf.metal.MetalMenuBarUI.uninstallUI(javax.swing.JComponent),reverses configuration which was done on the specified component during installui.
"javax.swing.plaf.metal.MetalMenuBarUI.update(java.awt.Graphics,javax.swing.JComponent)","if necessary paints the background of the component, then invokes paint."
"javax.swing.plaf.metal.MetalProgressBarUI.paintDeterminate(java.awt.Graphics,javax.swing.JComponent)",draws a bit of special highlighting on the progress bar.
"javax.swing.plaf.metal.MetalProgressBarUI.paintIndeterminate(java.awt.Graphics,javax.swing.JComponent)",draws a bit of special highlighting on the progress bar and bouncing box.
javax.swing.plaf.metal.MetalRootPaneUI.createUI(javax.swing.JComponent),creates a ui for a jrootpane.
javax.swing.plaf.metal.MetalRootPaneUI.installUI(javax.swing.JComponent),invokes supers implementation of installui to install the necessary state onto the passed in jrootpane to render the metal look and feel implementation of rootpaneui.
javax.swing.plaf.metal.MetalRootPaneUI.propertyChange(java.beans.PropertyChangeEvent),invoked when a property changes.
javax.swing.plaf.metal.MetalRootPaneUI.uninstallUI(javax.swing.JComponent),invokes supers implementation to uninstall any of its state.
javax.swing.plaf.metal.MetalScrollBarUI.createDecreaseButton(int),returns the view that represents the decrease view.
javax.swing.plaf.metal.MetalScrollBarUI.createIncreaseButton(int),returns the view that represents the increase view.
"javax.swing.plaf.metal.MetalScrollBarUI.setThumbBounds(int,int,int,int)",this is overridden only to increase the invalid area.
javax.swing.plaf.metal.MetalSliderUI.getThumbOverhang(),returns the amount that the thumb goes past the slide bar.
javax.swing.plaf.metal.MetalSliderUI.getTickLength(),gets the height of the tick area for horizontal sliders and the width of the tick area for vertical sliders.
javax.swing.plaf.metal.MetalSliderUI.getTrackLength(),returns the longer dimension of the slide bar.
javax.swing.plaf.metal.MetalSliderUI.getTrackWidth(),returns the shorter dimension of the track.
javax.swing.plaf.metal.MetalSplitPaneUI.createDefaultDivider(),creates the default divider.
javax.swing.plaf.metal.MetalSplitPaneUI.createUI(javax.swing.JComponent),creates a new metalsplitpaneui instance.
javax.swing.plaf.metal.MetalTabbedPaneUI.getBaselineOffset(),returns the amount the baseline is offset by.
"javax.swing.plaf.metal.MetalTabbedPaneUI.getTabLabelShiftX(int,int,boolean)",overridden to do nothing for the java l&f.
"javax.swing.plaf.metal.MetalTabbedPaneUI.getTabLabelShiftY(int,int,boolean)",overridden to do nothing for the java l&f.
javax.swing.plaf.metal.MetalTextFieldUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed on the associated jtextcomponent.
javax.swing.plaf.metal.MetalTheme.addCustomEntriesToTable(javax.swing.UIDefaults),adds values specific to this theme to the defaults table.
javax.swing.plaf.metal.MetalTheme.getAcceleratorForeground(),returns the accelerator foreground color.
javax.swing.plaf.metal.MetalTheme.getAcceleratorSelectedForeground(),returns the accelerator selected foreground color.
javax.swing.plaf.metal.MetalTheme.getBlack(),returns the black color.
javax.swing.plaf.metal.MetalTheme.getControl(),returns the control color.
javax.swing.plaf.metal.MetalTheme.getControlDarkShadow(),returns the control dark shadow color.
javax.swing.plaf.metal.MetalTheme.getControlDisabled(),returns the control disabled color.
javax.swing.plaf.metal.MetalTheme.getControlHighlight(),returns the control highlight color.
javax.swing.plaf.metal.MetalTheme.getControlInfo(),returns the control info color.
javax.swing.plaf.metal.MetalTheme.getControlShadow(),returns the control shadow color.
javax.swing.plaf.metal.MetalTheme.getControlTextColor(),returns the control text color.
javax.swing.plaf.metal.MetalTheme.getControlTextFont(),returns the control text font.
javax.swing.plaf.metal.MetalTheme.getDesktopColor(),returns the desktop color.
javax.swing.plaf.metal.MetalTheme.getFocusColor(),returns the focus color.
javax.swing.plaf.metal.MetalTheme.getHighlightedTextColor(),returns the highlighted text color.
javax.swing.plaf.metal.MetalTheme.getInactiveControlTextColor(),returns the inactive control text color.
javax.swing.plaf.metal.MetalTheme.getInactiveSystemTextColor(),returns the inactive system text color.
javax.swing.plaf.metal.MetalTheme.getMenuBackground(),returns the menu background color.
javax.swing.plaf.metal.MetalTheme.getMenuDisabledForeground(),returns the menu disabled foreground color.
javax.swing.plaf.metal.MetalTheme.getMenuForeground(),returns the menu foreground color.
javax.swing.plaf.metal.MetalTheme.getMenuSelectedBackground(),returns the menu selected background color.
javax.swing.plaf.metal.MetalTheme.getMenuSelectedForeground(),returns the menu selected foreground color.
javax.swing.plaf.metal.MetalTheme.getMenuTextFont(),returns the menu text font.
javax.swing.plaf.metal.MetalTheme.getName(),returns the name of this theme.
javax.swing.plaf.metal.MetalTheme.getPrimary1(),returns the primary 1 color.
javax.swing.plaf.metal.MetalTheme.getPrimary2(),returns the primary 2 color.
javax.swing.plaf.metal.MetalTheme.getPrimary3(),returns the primary 3 color.
javax.swing.plaf.metal.MetalTheme.getPrimaryControl(),returns the primary control color.
javax.swing.plaf.metal.MetalTheme.getPrimaryControlDarkShadow(),returns the primary control dark shadow color.
javax.swing.plaf.metal.MetalTheme.getPrimaryControlHighlight(),returns the primary control highlight color.
javax.swing.plaf.metal.MetalTheme.getPrimaryControlInfo(),returns the primary control info color.
javax.swing.plaf.metal.MetalTheme.getPrimaryControlShadow(),returns the primary control shadow color.
javax.swing.plaf.metal.MetalTheme.getSecondary1(),returns the secondary 1 color.
javax.swing.plaf.metal.MetalTheme.getSecondary2(),returns the secondary 2 color.
javax.swing.plaf.metal.MetalTheme.getSecondary3(),returns the secondary 3 color.
javax.swing.plaf.metal.MetalTheme.getSeparatorBackground(),returns the separator background color.
javax.swing.plaf.metal.MetalTheme.getSeparatorForeground(),returns the separator foreground color.
javax.swing.plaf.metal.MetalTheme.getSubTextFont(),returns the sub-text font.
javax.swing.plaf.metal.MetalTheme.getSystemTextColor(),returns the system text color.
javax.swing.plaf.metal.MetalTheme.getSystemTextFont(),returns the system text font.
javax.swing.plaf.metal.MetalTheme.getTextHighlightColor(),returns the text highlight color.
javax.swing.plaf.metal.MetalTheme.getUserTextColor(),returns the user text color.
javax.swing.plaf.metal.MetalTheme.getUserTextFont(),returns the user text font.
javax.swing.plaf.metal.MetalTheme.getWhite(),returns the white color.
javax.swing.plaf.metal.MetalTheme.getWindowBackground(),returns the window background color.
javax.swing.plaf.metal.MetalTheme.getWindowTitleBackground(),returns the window title background color.
javax.swing.plaf.metal.MetalTheme.getWindowTitleFont(),returns the window title font.
javax.swing.plaf.metal.MetalTheme.getWindowTitleForeground(),returns the window title foreground color.
javax.swing.plaf.metal.MetalTheme.getWindowTitleInactiveBackground(),returns the window title inactive background color.
javax.swing.plaf.metal.MetalTheme.getWindowTitleInactiveForeground(),returns the window title inactive foreground color.
"javax.swing.plaf.metal.MetalToggleButtonUI.paintIcon(java.awt.Graphics,javax.swing.AbstractButton,java.awt.Rectangle)",paints the appropriate icon of the button b in the space iconrect.
"javax.swing.plaf.metal.MetalToggleButtonUI.update(java.awt.Graphics,javax.swing.JComponent)","if necessary paints the background of the component, then invokes paint."
javax.swing.plaf.metal.MetalToolBarUI.createContainerListener(),creates a container listener that will be added to the jtoolbar.
javax.swing.plaf.metal.MetalToolBarUI.createRolloverListener(),creates a property change listener that will be added to the jtoolbar.
"javax.swing.plaf.metal.MetalToolBarUI.update(java.awt.Graphics,javax.swing.JComponent)","if necessary paints the background of the component, then invokes paint."
javax.swing.plaf.metal.MetalTreeUI.decodeLineStyle(java.lang.Object),this function converts between the string passed into the client property and the internal representation (currently and int).
javax.swing.plaf.metal.OceanTheme.addCustomEntriesToTable(javax.swing.UIDefaults),add this theme's custom entries to the defaults table.
javax.swing.plaf.metal.OceanTheme.getBlack(),returns the black color.
javax.swing.plaf.metal.OceanTheme.getControlTextColor(),returns the control text color.
javax.swing.plaf.metal.OceanTheme.getDesktopColor(),returns the desktop color.
javax.swing.plaf.metal.OceanTheme.getInactiveControlTextColor(),returns the inactive control text color.
javax.swing.plaf.metal.OceanTheme.getMenuDisabledForeground(),returns the menu disabled foreground color.
javax.swing.plaf.metal.OceanTheme.getName(),"return the name of this theme, ""ocean""."
javax.swing.plaf.metal.OceanTheme.getPrimary1(),returns the primary 1 color.
javax.swing.plaf.metal.OceanTheme.getPrimary2(),returns the primary 2 color.
javax.swing.plaf.metal.OceanTheme.getPrimary3(),returns the primary 3 color.
javax.swing.plaf.metal.OceanTheme.getSecondary1(),returns the secondary 1 color.
javax.swing.plaf.metal.OceanTheme.getSecondary2(),returns the secondary 2 color.
javax.swing.plaf.metal.OceanTheme.getSecondary3(),returns the secondary 3 color.
"javax.swing.plaf.multi.MultiButtonUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiButtonUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiButtonUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiButtonUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiButtonUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiButtonUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiButtonUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiButtonUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiButtonUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiButtonUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiButtonUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiButtonUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiColorChooserUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiColorChooserUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiColorChooserUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiColorChooserUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiColorChooserUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiColorChooserUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiColorChooserUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiColorChooserUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiColorChooserUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiColorChooserUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiColorChooserUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiColorChooserUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiComboBoxUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiComboBoxUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiComboBoxUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiComboBoxUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiComboBoxUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiComboBoxUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiComboBoxUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiComboBoxUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiComboBoxUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
javax.swing.plaf.multi.MultiComboBoxUI.isFocusTraversable(javax.swing.JComboBox),invokes the isfocustraversable method on each ui handled by this object.
javax.swing.plaf.multi.MultiComboBoxUI.isPopupVisible(javax.swing.JComboBox),invokes the ispopupvisible method on each ui handled by this object.
"javax.swing.plaf.multi.MultiComboBoxUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
"javax.swing.plaf.multi.MultiComboBoxUI.setPopupVisible(javax.swing.JComboBox,boolean)",invokes the setpopupvisible method on each ui handled by this object.
javax.swing.plaf.multi.MultiComboBoxUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiComboBoxUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiDesktopIconUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopIconUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiDesktopIconUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopIconUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopIconUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopIconUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopIconUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopIconUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiDesktopIconUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiDesktopIconUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopIconUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiDesktopIconUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiDesktopPaneUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopPaneUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiDesktopPaneUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopPaneUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopPaneUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopPaneUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopPaneUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopPaneUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiDesktopPaneUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiDesktopPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiDesktopPaneUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiDesktopPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiFileChooserUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiFileChooserUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiFileChooserUI.ensureFileIsVisible(javax.swing.JFileChooser,java.io.File)",invokes the ensurefileisvisible method on each ui handled by this object.
javax.swing.plaf.multi.MultiFileChooserUI.getAcceptAllFileFilter(javax.swing.JFileChooser),invokes the getacceptallfilefilter method on each ui handled by this object.
"javax.swing.plaf.multi.MultiFileChooserUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiFileChooserUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiFileChooserUI.getApproveButtonText(javax.swing.JFileChooser),invokes the getapprovebuttontext method on each ui handled by this object.
javax.swing.plaf.multi.MultiFileChooserUI.getDialogTitle(javax.swing.JFileChooser),invokes the getdialogtitle method on each ui handled by this object.
javax.swing.plaf.multi.MultiFileChooserUI.getFileView(javax.swing.JFileChooser),invokes the getfileview method on each ui handled by this object.
javax.swing.plaf.multi.MultiFileChooserUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiFileChooserUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiFileChooserUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiFileChooserUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiFileChooserUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiFileChooserUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiFileChooserUI.rescanCurrentDirectory(javax.swing.JFileChooser),invokes the rescancurrentdirectory method on each ui handled by this object.
javax.swing.plaf.multi.MultiFileChooserUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiFileChooserUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiInternalFrameUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiInternalFrameUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiInternalFrameUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiInternalFrameUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiInternalFrameUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiInternalFrameUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiInternalFrameUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiInternalFrameUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiInternalFrameUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiInternalFrameUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiInternalFrameUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiInternalFrameUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiLabelUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiLabelUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiLabelUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiLabelUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiLabelUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiLabelUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiLabelUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiLabelUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiLabelUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiLabelUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiLabelUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiLabelUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiListUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiListUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiListUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiListUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
"javax.swing.plaf.multi.MultiListUI.getCellBounds(javax.swing.JList,int,int)",invokes the getcellbounds method on each ui handled by this object.
javax.swing.plaf.multi.MultiListUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiListUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiListUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiListUI.getUIs(),returns the list of uis associated with this multiplexing ui.
"javax.swing.plaf.multi.MultiListUI.indexToLocation(javax.swing.JList,int)",invokes the indextolocation method on each ui handled by this object.
javax.swing.plaf.multi.MultiListUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiListUI.locationToIndex(javax.swing.JList,java.awt.Point)",invokes the locationtoindex method on each ui handled by this object.
"javax.swing.plaf.multi.MultiListUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiListUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiListUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiLookAndFeel.createUIs(javax.swing.plaf.ComponentUI,java.util.Vector,javax.swing.JComponent)","creates the componentui objects required to present the target component, placing the objects in the uis vector and returning the componentui object that best represents the component's ui."
javax.swing.plaf.multi.MultiLookAndFeel.getDefaults(),"creates, initializes, and returns the look and feel specific defaults."
javax.swing.plaf.multi.MultiLookAndFeel.getDescription(),returns a one-line description of this look and feel.
javax.swing.plaf.multi.MultiLookAndFeel.getID(),"returns a string, suitable for use by applications/services, that identifies this look and feel."
javax.swing.plaf.multi.MultiLookAndFeel.getName(),"returns a string, suitable for use in menus, that identifies this look and feel."
javax.swing.plaf.multi.MultiLookAndFeel.isNativeLookAndFeel(),returns false; this look and feel is not native to any platform.
javax.swing.plaf.multi.MultiLookAndFeel.isSupportedLookAndFeel(),returns true; every platform permits this look and feel.
javax.swing.plaf.multi.MultiLookAndFeel.uisToArray(java.util.Vector),"creates an array, populates it with ui objects from the passed-in vector, and returns the array."
"javax.swing.plaf.multi.MultiMenuBarUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuBarUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiMenuBarUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuBarUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuBarUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuBarUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuBarUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuBarUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiMenuBarUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiMenuBarUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuBarUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiMenuBarUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiMenuItemUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuItemUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiMenuItemUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuItemUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuItemUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuItemUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuItemUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuItemUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiMenuItemUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiMenuItemUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiMenuItemUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiMenuItemUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiOptionPaneUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiOptionPaneUI.containsCustomComponents(javax.swing.JOptionPane),invokes the containscustomcomponents method on each ui handled by this object.
javax.swing.plaf.multi.MultiOptionPaneUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiOptionPaneUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiOptionPaneUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiOptionPaneUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiOptionPaneUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiOptionPaneUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiOptionPaneUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiOptionPaneUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiOptionPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiOptionPaneUI.selectInitialValue(javax.swing.JOptionPane),invokes the selectinitialvalue method on each ui handled by this object.
javax.swing.plaf.multi.MultiOptionPaneUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiOptionPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiPanelUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiPanelUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiPanelUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiPanelUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiPanelUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiPanelUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiPanelUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiPanelUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiPanelUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiPanelUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiPanelUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiPanelUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiPopupMenuUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiPopupMenuUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiPopupMenuUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiPopupMenuUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiPopupMenuUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiPopupMenuUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
"javax.swing.plaf.multi.MultiPopupMenuUI.getPopup(javax.swing.JPopupMenu,int,int)",invokes the getpopup method on each ui handled by this object.
javax.swing.plaf.multi.MultiPopupMenuUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiPopupMenuUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiPopupMenuUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
javax.swing.plaf.multi.MultiPopupMenuUI.isPopupTrigger(java.awt.event.MouseEvent),invokes the ispopuptrigger method on each ui handled by this object.
"javax.swing.plaf.multi.MultiPopupMenuUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiPopupMenuUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiPopupMenuUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiProgressBarUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiProgressBarUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiProgressBarUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiProgressBarUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiProgressBarUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiProgressBarUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiProgressBarUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiProgressBarUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiProgressBarUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiProgressBarUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiProgressBarUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiProgressBarUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiRootPaneUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiRootPaneUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiRootPaneUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiRootPaneUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiRootPaneUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiRootPaneUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiRootPaneUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiRootPaneUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiRootPaneUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiRootPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiRootPaneUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiRootPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiScrollBarUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollBarUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiScrollBarUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollBarUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollBarUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollBarUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollBarUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollBarUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiScrollBarUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiScrollBarUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollBarUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiScrollBarUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiScrollPaneUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollPaneUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiScrollPaneUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollPaneUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollPaneUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollPaneUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollPaneUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollPaneUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiScrollPaneUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiScrollPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiScrollPaneUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiScrollPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSeparatorUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiSeparatorUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiSeparatorUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiSeparatorUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiSeparatorUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiSeparatorUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiSeparatorUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiSeparatorUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiSeparatorUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSeparatorUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiSeparatorUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSeparatorUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSliderUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiSliderUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiSliderUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiSliderUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiSliderUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiSliderUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiSliderUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiSliderUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiSliderUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSliderUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiSliderUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSliderUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSpinnerUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiSpinnerUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiSpinnerUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiSpinnerUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiSpinnerUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiSpinnerUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiSpinnerUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiSpinnerUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiSpinnerUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSpinnerUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiSpinnerUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSpinnerUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSplitPaneUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiSplitPaneUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiSplitPaneUI.finishedPaintingChildren(javax.swing.JSplitPane,java.awt.Graphics)",invokes the finishedpaintingchildren method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSplitPaneUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiSplitPaneUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiSplitPaneUI.getDividerLocation(javax.swing.JSplitPane),invokes the getdividerlocation method on each ui handled by this object.
javax.swing.plaf.multi.MultiSplitPaneUI.getMaximumDividerLocation(javax.swing.JSplitPane),invokes the getmaximumdividerlocation method on each ui handled by this object.
javax.swing.plaf.multi.MultiSplitPaneUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiSplitPaneUI.getMinimumDividerLocation(javax.swing.JSplitPane),invokes the getminimumdividerlocation method on each ui handled by this object.
javax.swing.plaf.multi.MultiSplitPaneUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiSplitPaneUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiSplitPaneUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiSplitPaneUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSplitPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiSplitPaneUI.resetToPreferredSizes(javax.swing.JSplitPane),invokes the resettopreferredsizes method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSplitPaneUI.setDividerLocation(javax.swing.JSplitPane,int)",invokes the setdividerlocation method on each ui handled by this object.
javax.swing.plaf.multi.MultiSplitPaneUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiSplitPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTabbedPaneUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiTabbedPaneUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiTabbedPaneUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiTabbedPaneUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiTabbedPaneUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiTabbedPaneUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiTabbedPaneUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTabbedPaneUI.getTabBounds(javax.swing.JTabbedPane,int)",invokes the gettabbounds method on each ui handled by this object.
javax.swing.plaf.multi.MultiTabbedPaneUI.getTabRunCount(javax.swing.JTabbedPane),invokes the gettabruncount method on each ui handled by this object.
javax.swing.plaf.multi.MultiTabbedPaneUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiTabbedPaneUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTabbedPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTabbedPaneUI.tabForCoordinate(javax.swing.JTabbedPane,int,int)",invokes the tabforcoordinate method on each ui handled by this object.
javax.swing.plaf.multi.MultiTabbedPaneUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTabbedPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTableHeaderUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableHeaderUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiTableHeaderUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableHeaderUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableHeaderUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableHeaderUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableHeaderUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableHeaderUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiTableHeaderUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTableHeaderUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableHeaderUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTableHeaderUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTableUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiTableUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiTableUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTableUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiTableUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTableUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTextUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiTextUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiTextUI.damageRange(javax.swing.text.JTextComponent,int,int)",invokes the damagerange method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTextUI.damageRange(javax.swing.text.JTextComponent,int,int,javax.swing.text.Position.Bias,javax.swing.text.Position.Bias)",invokes the damagerange method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTextUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiTextUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiTextUI.getEditorKit(javax.swing.text.JTextComponent),invokes the geteditorkit method on each ui handled by this object.
javax.swing.plaf.multi.MultiTextUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiTextUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTextUI.getNextVisualPositionFrom(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias[])",invokes the getnextvisualpositionfrom method on each ui handled by this object.
javax.swing.plaf.multi.MultiTextUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiTextUI.getRootView(javax.swing.text.JTextComponent),invokes the getrootview method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTextUI.getToolTipText(javax.swing.text.JTextComponent,java.awt.Point)",invokes the gettooltiptext method on each ui handled by this object.
javax.swing.plaf.multi.MultiTextUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiTextUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTextUI.modelToView(javax.swing.text.JTextComponent,int)",invokes the modeltoview method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTextUI.modelToView(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias)",invokes the modeltoview method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTextUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiTextUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTextUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point)",invokes the viewtomodel method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point,javax.swing.text.Position.Bias[])",invokes the viewtomodel method on each ui handled by this object.
"javax.swing.plaf.multi.MultiToolBarUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolBarUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiToolBarUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolBarUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolBarUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolBarUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolBarUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolBarUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiToolBarUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiToolBarUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolBarUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiToolBarUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiToolTipUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolTipUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiToolTipUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolTipUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolTipUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolTipUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolTipUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolTipUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiToolTipUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiToolTipUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiToolTipUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiToolTipUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
javax.swing.plaf.multi.MultiTreeUI.cancelEditing(javax.swing.JTree),invokes the cancelediting method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTreeUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiTreeUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiTreeUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiTreeUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTreeUI.getClosestPathForLocation(javax.swing.JTree,int,int)",invokes the getclosestpathforlocation method on each ui handled by this object.
javax.swing.plaf.multi.MultiTreeUI.getEditingPath(javax.swing.JTree),invokes the geteditingpath method on each ui handled by this object.
javax.swing.plaf.multi.MultiTreeUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiTreeUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTreeUI.getPathBounds(javax.swing.JTree,javax.swing.tree.TreePath)",invokes the getpathbounds method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTreeUI.getPathForRow(javax.swing.JTree,int)",invokes the getpathforrow method on each ui handled by this object.
javax.swing.plaf.multi.MultiTreeUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiTreeUI.getRowCount(javax.swing.JTree),invokes the getrowcount method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTreeUI.getRowForPath(javax.swing.JTree,javax.swing.tree.TreePath)",invokes the getrowforpath method on each ui handled by this object.
javax.swing.plaf.multi.MultiTreeUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiTreeUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
javax.swing.plaf.multi.MultiTreeUI.isEditing(javax.swing.JTree),invokes the isediting method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTreeUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTreeUI.startEditingAtPath(javax.swing.JTree,javax.swing.tree.TreePath)",invokes the starteditingatpath method on each ui handled by this object.
javax.swing.plaf.multi.MultiTreeUI.stopEditing(javax.swing.JTree),invokes the stopediting method on each ui handled by this object.
javax.swing.plaf.multi.MultiTreeUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiTreeUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
"javax.swing.plaf.multi.MultiViewportUI.contains(javax.swing.JComponent,int,int)",invokes the contains method on each ui handled by this object.
javax.swing.plaf.multi.MultiViewportUI.createUI(javax.swing.JComponent),returns a multiplexing ui instance if any of the auxiliary lookandfeels supports this ui.
"javax.swing.plaf.multi.MultiViewportUI.getAccessibleChild(javax.swing.JComponent,int)",invokes the getaccessiblechild method on each ui handled by this object.
javax.swing.plaf.multi.MultiViewportUI.getAccessibleChildrenCount(javax.swing.JComponent),invokes the getaccessiblechildrencount method on each ui handled by this object.
javax.swing.plaf.multi.MultiViewportUI.getMaximumSize(javax.swing.JComponent),invokes the getmaximumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiViewportUI.getMinimumSize(javax.swing.JComponent),invokes the getminimumsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiViewportUI.getPreferredSize(javax.swing.JComponent),invokes the getpreferredsize method on each ui handled by this object.
javax.swing.plaf.multi.MultiViewportUI.getUIs(),returns the list of uis associated with this multiplexing ui.
javax.swing.plaf.multi.MultiViewportUI.installUI(javax.swing.JComponent),invokes the installui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiViewportUI.paint(java.awt.Graphics,javax.swing.JComponent)",invokes the paint method on each ui handled by this object.
javax.swing.plaf.multi.MultiViewportUI.uninstallUI(javax.swing.JComponent),invokes the uninstallui method on each ui handled by this object.
"javax.swing.plaf.multi.MultiViewportUI.update(java.awt.Graphics,javax.swing.JComponent)",invokes the update method on each ui handled by this object.
javax.swing.plaf.nimbus.AbstractRegionPainter.configureGraphics(java.awt.Graphics2D),configures the given graphics2d.
"javax.swing.plaf.nimbus.AbstractRegionPainter.decodeAnchorX(float,float)","decodes and returns a float value representing the actual pixel location for the anchor point given the encoded x value of the control point, and the offset distance to the anchor from that control point."
"javax.swing.plaf.nimbus.AbstractRegionPainter.decodeAnchorY(float,float)","decodes and returns a float value representing the actual pixel location for the anchor point given the encoded y value of the control point, and the offset distance to the anchor from that control point."
"javax.swing.plaf.nimbus.AbstractRegionPainter.decodeColor(java.lang.String,float,float,float,int)","decodes and returns a color, which is derived from a base color in ui defaults."
"javax.swing.plaf.nimbus.AbstractRegionPainter.decodeColor(java.awt.Color,java.awt.Color,float)","decodes and returns a color, which is derived from a offset between two other colors."
"javax.swing.plaf.nimbus.AbstractRegionPainter.decodeGradient(float,float,float,float,float[],java.awt.Color[])","given parameters for creating a lineargradientpaint, this method will create and return a linear gradient paint."
"javax.swing.plaf.nimbus.AbstractRegionPainter.decodeRadialGradient(float,float,float,float[],java.awt.Color[])","given parameters for creating a radialgradientpaint, this method will create and return a radial gradient paint."
javax.swing.plaf.nimbus.AbstractRegionPainter.decodeX(float),decodes and returns a float value representing the actual pixel location for the given encoded x value.
javax.swing.plaf.nimbus.AbstractRegionPainter.decodeY(float),decodes and returns a float value representing the actual pixel location for the given encoded y value.
"javax.swing.plaf.nimbus.AbstractRegionPainter.doPaint(java.awt.Graphics2D,javax.swing.JComponent,int,int,java.lang.Object[])",actually performs the painting operation.
"javax.swing.plaf.nimbus.AbstractRegionPainter.getComponentColor(javax.swing.JComponent,java.lang.String,java.awt.Color,float,float,int)",get a color property from the given jcomponent.
javax.swing.plaf.nimbus.AbstractRegionPainter.getExtendedCacheKeys(javax.swing.JComponent),get any extra attributes which the painter implementation would like to include in the image cache lookups.
javax.swing.plaf.nimbus.AbstractRegionPainter.getPaintContext(),gets the paintcontext for this painting operation.
"javax.swing.plaf.nimbus.AbstractRegionPainter.paint(java.awt.Graphics2D,javax.swing.JComponent,int,int)",renders to the given graphics2d object.
javax.swing.plaf.nimbus.NimbusLookAndFeel.getDefaults(),returns the defaults for this synthlookandfeel.
"javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(java.lang.String,float,float,float,int,boolean)","get a derived color, derived colors are shared instances and is color value will change when its parent uidefault color changes."
"javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(java.awt.Color,java.awt.Color,float,boolean)","decodes and returns a color, which is derived from an offset between two other colors."
"javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(java.awt.Color,java.awt.Color,float)","decodes and returns a color, which is derived from a offset between two other colors."
javax.swing.plaf.nimbus.NimbusLookAndFeel.getDescription(),returns a textual description of this look and feel.
javax.swing.plaf.nimbus.NimbusLookAndFeel.getID(),return a string that identifies this look and feel.
javax.swing.plaf.nimbus.NimbusLookAndFeel.getName(),return a short string that identifies this look and feel.
"javax.swing.plaf.nimbus.NimbusLookAndFeel.getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)",gets the style associated with the given component and region.
javax.swing.plaf.nimbus.NimbusLookAndFeel.initialize(),called by uimanager when this look and feel is installed.
"javax.swing.plaf.nimbus.NimbusLookAndFeel.register(javax.swing.plaf.synth.Region,java.lang.String)",registers a third party component with the nimbuslookandfeel.
javax.swing.plaf.nimbus.NimbusLookAndFeel.shouldUpdateStyleOnAncestorChanged(),returns whether or not the uis should update their synthstyles from the synthstylefactory when the ancestor of the jcomponent changes.
javax.swing.plaf.nimbus.NimbusLookAndFeel.shouldUpdateStyleOnEvent(java.beans.PropertyChangeEvent),returns whether or not the uis should update their styles when a particular event occurs.
javax.swing.plaf.nimbus.NimbusLookAndFeel.uninitialize(),called by uimanager when this look and feel is uninstalled.
"javax.swing.plaf.nimbus.NimbusStyle.get(javax.swing.plaf.synth.SynthContext,java.lang.Object)",getter for a region specific style property.
javax.swing.plaf.nimbus.NimbusStyle.getBackgroundPainter(javax.swing.plaf.synth.SynthContext),"gets the appropriate background painter, if there is one, for the state specified in the given synthcontext."
javax.swing.plaf.nimbus.NimbusStyle.getBorderPainter(javax.swing.plaf.synth.SynthContext),"gets the appropriate border painter, if there is one, for the state specified in the given synthcontext."
"javax.swing.plaf.nimbus.NimbusStyle.getColorForState(javax.swing.plaf.synth.SynthContext,javax.swing.plaf.synth.ColorType)",returns the color for the specified state.
javax.swing.plaf.nimbus.NimbusStyle.getFontForState(javax.swing.plaf.synth.SynthContext),returns the font for the specified state.
javax.swing.plaf.nimbus.NimbusStyle.getForegroundPainter(javax.swing.plaf.synth.SynthContext),"gets the appropriate foreground painter, if there is one, for the state specified in the given synthcontext."
"javax.swing.plaf.nimbus.NimbusStyle.getInsets(javax.swing.plaf.synth.SynthContext,java.awt.Insets)",returns the insets that are used to calculate sizing information.
javax.swing.plaf.nimbus.NimbusStyle.getPainter(javax.swing.plaf.synth.SynthContext),returns the synthpainter that will be used for painting.
javax.swing.plaf.nimbus.NimbusStyle.installDefaults(javax.swing.plaf.synth.SynthContext),installs the necessary state from this style on the jcomponent from context.
javax.swing.plaf.nimbus.NimbusStyle.isOpaque(javax.swing.plaf.synth.SynthContext),returns true if the region is opaque.
javax.swing.plaf.nimbus.State.isInState(javax.swing.plaf.nimbus.State),gets whether the specified jcomponent is in the custom state represented by this class.
javax.swing.plaf.nimbus.AbstractRegionPainter.PaintContext.CacheMode.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.swing.plaf.nimbus.AbstractRegionPainter.PaintContext.CacheMode.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.swing.plaf.synth.SynthUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.ColorType.getID(),"returns a unique id, as an integer, for this colortype."
javax.swing.plaf.synth.ColorType.toString(),returns the textual description of this colortype.
javax.swing.plaf.synth.Region.getName(),returns the name of the region.
javax.swing.plaf.synth.Region.isSubregion(),"returns true if the region is a subregion of a component, otherwise false."
javax.swing.plaf.synth.Region.toString(),returns the name of the region.
javax.swing.plaf.synth.SynthButtonUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
"javax.swing.plaf.synth.SynthButtonUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.synth.SynthButtonUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthButtonUI.getDefaultIcon(javax.swing.AbstractButton),returns the default icon.
javax.swing.plaf.synth.SynthButtonUI.getIcon(javax.swing.AbstractButton),returns the icon to use for painting the button.
javax.swing.plaf.synth.SynthButtonUI.getMaximumSize(javax.swing.JComponent),returns the specified component's maximum size appropriate for the look and feel.
javax.swing.plaf.synth.SynthButtonUI.getMinimumSize(javax.swing.JComponent),returns the specified component's minimum size appropriate for the look and feel.
javax.swing.plaf.synth.SynthButtonUI.getPreferredSize(javax.swing.JComponent),returns the specified component's preferred size appropriate for the look and feel.
javax.swing.plaf.synth.SynthButtonUI.getSizingIcon(javax.swing.AbstractButton),returns the icon used in calculating the preferred/minimum/maximum size.
"javax.swing.plaf.synth.SynthButtonUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthButtonUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthButtonUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthButtonUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
"javax.swing.plaf.synth.SynthButtonUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthCheckBoxMenuItemUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
"javax.swing.plaf.synth.SynthCheckBoxMenuItemUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthCheckBoxUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
"javax.swing.plaf.synth.SynthCheckBoxUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthColorChooserUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthColorChooserUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthColorChooserUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthColorChooserUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthColorChooserUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthColorChooserUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
"javax.swing.plaf.synth.SynthColorChooserUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthComboBoxUI.createArrowButton(),creates a button which will be used as the control to show or hide the popup portion of the combo box.
javax.swing.plaf.synth.SynthComboBoxUI.createEditor(),creates the default editor that will be used in editable combo boxes.
javax.swing.plaf.synth.SynthComboBoxUI.createPopup(),creates the popup portion of the combo box.
javax.swing.plaf.synth.SynthComboBoxUI.createRenderer(),creates the default renderer that will be used in a non-editiable combo box.
javax.swing.plaf.synth.SynthComboBoxUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthComboBoxUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthComboBoxUI.getDefaultSize(),returns the default size of an empty display area of the combo box using the current renderer and font.
javax.swing.plaf.synth.SynthComboBoxUI.installListeners(),creates and installs listeners for the combo box and its model.
javax.swing.plaf.synth.SynthComboBoxUI.installUI(javax.swing.JComponent),configures the specified component appropriately for the look and feel.
"javax.swing.plaf.synth.SynthComboBoxUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthComboBoxUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthComboBoxUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
"javax.swing.plaf.synth.SynthComboBoxUI.paintCurrentValue(java.awt.Graphics,java.awt.Rectangle,boolean)",paints the currently selected item.
javax.swing.plaf.synth.SynthComboBoxUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.plaf.synth.SynthComboBoxUI.uninstallDefaults(),"uninstalls the default colors, default font, default renderer, and default editor from the combo box."
javax.swing.plaf.synth.SynthComboBoxUI.uninstallListeners(),removes the installed listeners from the combo box and its model.
javax.swing.plaf.synth.SynthComboBoxUI.uninstallUI(javax.swing.JComponent),reverses configuration which was done on the specified component during installui.
"javax.swing.plaf.synth.SynthComboBoxUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthContext.getComponent(),returns the hosting component containing the region.
javax.swing.plaf.synth.SynthContext.getComponentState(),"returns the state of the widget, which is a bitmask of the values defined in synthconstants."
javax.swing.plaf.synth.SynthContext.getRegion(),returns the region identifying this state.
javax.swing.plaf.synth.SynthContext.getStyle(),returns the style associated with this region.
javax.swing.plaf.synth.SynthDesktopIconUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthDesktopIconUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthDesktopIconUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthDesktopIconUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthDesktopIconUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
"javax.swing.plaf.synth.SynthDesktopIconUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthDesktopPaneUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthDesktopPaneUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthDesktopPaneUI.installListeners(),installs the propertychangelistener returned from createpropertychangelistener on the jdesktoppane.
"javax.swing.plaf.synth.SynthDesktopPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthDesktopPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthDesktopPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthDesktopPaneUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.plaf.synth.SynthDesktopPaneUI.uninstallListeners(),uninstalls the propertychangelistener returned from createpropertychangelistener from the jdesktoppane.
"javax.swing.plaf.synth.SynthDesktopPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthEditorPaneUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthEditorPaneUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthEditorPaneUI.installDefaults(),"initializes component properties, such as font, foreground, background, caret color, selection color, selected text color, disabled text color, and border color."
"javax.swing.plaf.synth.SynthEditorPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
javax.swing.plaf.synth.SynthEditorPaneUI.paintBackground(java.awt.Graphics),paints a background for the view.
"javax.swing.plaf.synth.SynthEditorPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthEditorPaneUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed on the associated jtextcomponent.
javax.swing.plaf.synth.SynthEditorPaneUI.uninstallDefaults(),sets the component properties that have not been explicitly overridden to null.
"javax.swing.plaf.synth.SynthEditorPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthFormattedTextFieldUI.createUI(javax.swing.JComponent),creates a ui for a jformattedtextfield.
javax.swing.plaf.synth.SynthFormattedTextFieldUI.getPropertyPrefix(),fetches the name used as a key to lookup properties through the uimanager.
"javax.swing.plaf.synth.SynthFormattedTextFieldUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
"javax.swing.plaf.synth.SynthGraphicsUtils.computeStringWidth(javax.swing.plaf.synth.SynthContext,java.awt.Font,java.awt.FontMetrics,java.lang.String)",returns the size of the passed in string.
"javax.swing.plaf.synth.SynthGraphicsUtils.drawLine(javax.swing.plaf.synth.SynthContext,java.lang.Object,java.awt.Graphics,int,int,int,int)",draws a line between the two end points.
"javax.swing.plaf.synth.SynthGraphicsUtils.drawLine(javax.swing.plaf.synth.SynthContext,java.lang.Object,java.awt.Graphics,int,int,int,int,java.lang.Object)",draws a line between the two end points.
javax.swing.plaf.synth.SynthGraphicsUtils.getMaximumCharHeight(javax.swing.plaf.synth.SynthContext),returns the maximum height of the the font from the passed in synthcontext.
"javax.swing.plaf.synth.SynthGraphicsUtils.getMaximumSize(javax.swing.plaf.synth.SynthContext,java.awt.Font,java.lang.String,javax.swing.Icon,int,int,int,int,int,int)",returns the maximum size needed to properly render an icon and text.
"javax.swing.plaf.synth.SynthGraphicsUtils.getMinimumSize(javax.swing.plaf.synth.SynthContext,java.awt.Font,java.lang.String,javax.swing.Icon,int,int,int,int,int,int)",returns the minimum size needed to properly render an icon and text.
"javax.swing.plaf.synth.SynthGraphicsUtils.getPreferredSize(javax.swing.plaf.synth.SynthContext,java.awt.Font,java.lang.String,javax.swing.Icon,int,int,int,int,int,int)",returns the preferred size needed to properly render an icon and text.
"javax.swing.plaf.synth.SynthGraphicsUtils.layoutText(javax.swing.plaf.synth.SynthContext,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)","lays out text and an icon returning, by reference, the location to place the icon and text."
"javax.swing.plaf.synth.SynthGraphicsUtils.paintText(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.lang.String,java.awt.Rectangle,int)",paints text at the specified location.
"javax.swing.plaf.synth.SynthGraphicsUtils.paintText(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.lang.String,int,int,int)",paints text at the specified location.
"javax.swing.plaf.synth.SynthGraphicsUtils.paintText(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.lang.String,javax.swing.Icon,int,int,int,int,int,int,int)",paints an icon and text.
javax.swing.plaf.synth.SynthInternalFrameUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthInternalFrameUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthInternalFrameUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthInternalFrameUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthInternalFrameUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthInternalFrameUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
"javax.swing.plaf.synth.SynthInternalFrameUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthLabelUI.createUI(javax.swing.JComponent),returns the labelui implementation used for the skins look and feel.
"javax.swing.plaf.synth.SynthLabelUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.synth.SynthLabelUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthLabelUI.getMaximumSize(javax.swing.JComponent),returns the specified component's maximum size appropriate for the look and feel.
javax.swing.plaf.synth.SynthLabelUI.getMinimumSize(javax.swing.JComponent),returns the specified component's minimum size appropriate for the look and feel.
javax.swing.plaf.synth.SynthLabelUI.getPreferredSize(javax.swing.JComponent),returns the specified component's preferred size appropriate for the look and feel.
"javax.swing.plaf.synth.SynthLabelUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthLabelUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthLabelUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthLabelUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
"javax.swing.plaf.synth.SynthLabelUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthListUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthListUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthListUI.installDefaults(),"initializes list properties such as font, foreground, and background, and adds the cellrendererpane."
javax.swing.plaf.synth.SynthListUI.installListeners(),"creates and installs the listeners for the jlist, its model, and its selectionmodel."
"javax.swing.plaf.synth.SynthListUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthListUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.plaf.synth.SynthListUI.uninstallDefaults(),sets the list properties that have not been explicitly overridden to null.
javax.swing.plaf.synth.SynthListUI.uninstallListeners(),"removes the listeners from the jlist, its model, and its selectionmodel."
"javax.swing.plaf.synth.SynthListUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthLookAndFeel.createUI(javax.swing.JComponent),creates the synth look and feel componentui for the passed in jcomponent.
javax.swing.plaf.synth.SynthLookAndFeel.getDefaults(),returns the defaults for this synthlookandfeel.
javax.swing.plaf.synth.SynthLookAndFeel.getDescription(),returns a textual description of synthlookandfeel.
javax.swing.plaf.synth.SynthLookAndFeel.getID(),return a string that identifies this look and feel.
javax.swing.plaf.synth.SynthLookAndFeel.getName(),return a short string that identifies this look and feel.
javax.swing.plaf.synth.SynthLookAndFeel.getRegion(javax.swing.JComponent),returns the region for the jcomponent c.
"javax.swing.plaf.synth.SynthLookAndFeel.getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)",gets a synthstyle for the specified region of the specified component.
javax.swing.plaf.synth.SynthLookAndFeel.getStyleFactory(),returns the current synthstylefactory.
javax.swing.plaf.synth.SynthLookAndFeel.initialize(),called by uimanager when this look and feel is installed.
javax.swing.plaf.synth.SynthLookAndFeel.isNativeLookAndFeel(),"returns false, synthlookandfeel is not a native look and feel."
javax.swing.plaf.synth.SynthLookAndFeel.isSupportedLookAndFeel(),"returns true, synthlookandfeel is always supported."
"javax.swing.plaf.synth.SynthLookAndFeel.load(java.io.InputStream,java.lang.Class<?>)",loads the set of synthstyles that will be used by this synthlookandfeel.
javax.swing.plaf.synth.SynthLookAndFeel.load(java.net.URL),loads the set of synthstyles that will be used by this synthlookandfeel.
javax.swing.plaf.synth.SynthLookAndFeel.setStyleFactory(javax.swing.plaf.synth.SynthStyleFactory),sets the synthstylefactory that the ui classes provided by synth will use to obtain a synthstyle.
javax.swing.plaf.synth.SynthLookAndFeel.shouldUpdateStyleOnAncestorChanged(),returns whether or not the uis should update their synthstyles from the synthstylefactory when the ancestor of the jcomponent changes.
javax.swing.plaf.synth.SynthLookAndFeel.shouldUpdateStyleOnEvent(java.beans.PropertyChangeEvent),returns whether or not the uis should update their styles when a particular event occurs.
javax.swing.plaf.synth.SynthLookAndFeel.uninitialize(),called by uimanager when this look and feel is uninstalled.
javax.swing.plaf.synth.SynthLookAndFeel.updateStyles(java.awt.Component),"updates the style associated with c, and all its children."
javax.swing.plaf.synth.SynthMenuBarUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthMenuBarUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthMenuBarUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthMenuBarUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthMenuBarUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthMenuBarUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
"javax.swing.plaf.synth.SynthMenuBarUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthMenuItemUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthMenuItemUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthMenuItemUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthMenuItemUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthMenuItemUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthMenuItemUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.plaf.synth.SynthMenuItemUI.uninstallUI(javax.swing.JComponent),reverses configuration which was done on the specified component during installui.
"javax.swing.plaf.synth.SynthMenuItemUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthMenuUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthMenuUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthMenuUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthMenuUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthMenuUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthMenuUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.plaf.synth.SynthMenuUI.uninstallUI(javax.swing.JComponent),reverses configuration which was done on the specified component during installui.
"javax.swing.plaf.synth.SynthMenuUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthOptionPaneUI.createMessageArea(),called from installcomponents() to create a container containing the body of the message.
javax.swing.plaf.synth.SynthOptionPaneUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthOptionPaneUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthOptionPaneUI.getSizeButtonsToSameWidth(),"returns true, basic l&f wants all the buttons to have the same width."
"javax.swing.plaf.synth.SynthOptionPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthOptionPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthOptionPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthOptionPaneUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
"javax.swing.plaf.synth.SynthOptionPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
"javax.swing.plaf.synth.SynthPainter.paintArrowButtonBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of an arrow button.
"javax.swing.plaf.synth.SynthPainter.paintArrowButtonBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of an arrow button.
"javax.swing.plaf.synth.SynthPainter.paintArrowButtonForeground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the foreground of an arrow button.
"javax.swing.plaf.synth.SynthPainter.paintButtonBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a button.
"javax.swing.plaf.synth.SynthPainter.paintButtonBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a button.
"javax.swing.plaf.synth.SynthPainter.paintCheckBoxBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a check box.
"javax.swing.plaf.synth.SynthPainter.paintCheckBoxBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a check box.
"javax.swing.plaf.synth.SynthPainter.paintCheckBoxMenuItemBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a check box menu item.
"javax.swing.plaf.synth.SynthPainter.paintCheckBoxMenuItemBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a check box menu item.
"javax.swing.plaf.synth.SynthPainter.paintColorChooserBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a color chooser.
"javax.swing.plaf.synth.SynthPainter.paintColorChooserBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a color chooser.
"javax.swing.plaf.synth.SynthPainter.paintComboBoxBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a combo box.
"javax.swing.plaf.synth.SynthPainter.paintComboBoxBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a combo box.
"javax.swing.plaf.synth.SynthPainter.paintDesktopIconBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a desktop icon.
"javax.swing.plaf.synth.SynthPainter.paintDesktopIconBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a desktop icon.
"javax.swing.plaf.synth.SynthPainter.paintDesktopPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a desktop pane.
"javax.swing.plaf.synth.SynthPainter.paintDesktopPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a desktop pane.
"javax.swing.plaf.synth.SynthPainter.paintEditorPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of an editor pane.
"javax.swing.plaf.synth.SynthPainter.paintEditorPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of an editor pane.
"javax.swing.plaf.synth.SynthPainter.paintFileChooserBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a file chooser.
"javax.swing.plaf.synth.SynthPainter.paintFileChooserBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a file chooser.
"javax.swing.plaf.synth.SynthPainter.paintFormattedTextFieldBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a formatted text field.
"javax.swing.plaf.synth.SynthPainter.paintFormattedTextFieldBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a formatted text field.
"javax.swing.plaf.synth.SynthPainter.paintInternalFrameBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of an internal frame.
"javax.swing.plaf.synth.SynthPainter.paintInternalFrameBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of an internal frame.
"javax.swing.plaf.synth.SynthPainter.paintInternalFrameTitlePaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of an internal frame title pane.
"javax.swing.plaf.synth.SynthPainter.paintInternalFrameTitlePaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of an internal frame title pane.
"javax.swing.plaf.synth.SynthPainter.paintLabelBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a label.
"javax.swing.plaf.synth.SynthPainter.paintLabelBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a label.
"javax.swing.plaf.synth.SynthPainter.paintListBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a list.
"javax.swing.plaf.synth.SynthPainter.paintListBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a list.
"javax.swing.plaf.synth.SynthPainter.paintMenuBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a menu.
"javax.swing.plaf.synth.SynthPainter.paintMenuBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a menu bar.
"javax.swing.plaf.synth.SynthPainter.paintMenuBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a menu bar.
"javax.swing.plaf.synth.SynthPainter.paintMenuBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a menu.
"javax.swing.plaf.synth.SynthPainter.paintMenuItemBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a menu item.
"javax.swing.plaf.synth.SynthPainter.paintMenuItemBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a menu item.
"javax.swing.plaf.synth.SynthPainter.paintOptionPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of an option pane.
"javax.swing.plaf.synth.SynthPainter.paintOptionPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of an option pane.
"javax.swing.plaf.synth.SynthPainter.paintPanelBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a panel.
"javax.swing.plaf.synth.SynthPainter.paintPanelBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a panel.
"javax.swing.plaf.synth.SynthPainter.paintPasswordFieldBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a password field.
"javax.swing.plaf.synth.SynthPainter.paintPasswordFieldBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a password field.
"javax.swing.plaf.synth.SynthPainter.paintPopupMenuBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a popup menu.
"javax.swing.plaf.synth.SynthPainter.paintPopupMenuBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a popup menu.
"javax.swing.plaf.synth.SynthPainter.paintProgressBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a progress bar.
"javax.swing.plaf.synth.SynthPainter.paintProgressBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of a progress bar.
"javax.swing.plaf.synth.SynthPainter.paintProgressBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a progress bar.
"javax.swing.plaf.synth.SynthPainter.paintProgressBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of a progress bar.
"javax.swing.plaf.synth.SynthPainter.paintProgressBarForeground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the foreground of a progress bar.
"javax.swing.plaf.synth.SynthPainter.paintRadioButtonBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a radio button.
"javax.swing.plaf.synth.SynthPainter.paintRadioButtonBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a radio button.
"javax.swing.plaf.synth.SynthPainter.paintRadioButtonMenuItemBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a radio button menu item.
"javax.swing.plaf.synth.SynthPainter.paintRadioButtonMenuItemBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a radio button menu item.
"javax.swing.plaf.synth.SynthPainter.paintRootPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a root pane.
"javax.swing.plaf.synth.SynthPainter.paintRootPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a root pane.
"javax.swing.plaf.synth.SynthPainter.paintScrollBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a scrollbar.
"javax.swing.plaf.synth.SynthPainter.paintScrollBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of a scrollbar.
"javax.swing.plaf.synth.SynthPainter.paintScrollBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a scrollbar.
"javax.swing.plaf.synth.SynthPainter.paintScrollBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of a scrollbar.
"javax.swing.plaf.synth.SynthPainter.paintScrollBarThumbBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of the thumb of a scrollbar.
"javax.swing.plaf.synth.SynthPainter.paintScrollBarThumbBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of the thumb of a scrollbar.
"javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of the track of a scrollbar.
"javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of the track of a scrollbar.
"javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of the track of a scrollbar.
"javax.swing.plaf.synth.SynthPainter.paintScrollBarTrackBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of the track of a scrollbar.
"javax.swing.plaf.synth.SynthPainter.paintScrollPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a scroll pane.
"javax.swing.plaf.synth.SynthPainter.paintScrollPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a scroll pane.
"javax.swing.plaf.synth.SynthPainter.paintSeparatorBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a separator.
"javax.swing.plaf.synth.SynthPainter.paintSeparatorBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of a separator.
"javax.swing.plaf.synth.SynthPainter.paintSeparatorBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a separator.
"javax.swing.plaf.synth.SynthPainter.paintSeparatorBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of a separator.
"javax.swing.plaf.synth.SynthPainter.paintSeparatorForeground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the foreground of a separator.
"javax.swing.plaf.synth.SynthPainter.paintSliderBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a slider.
"javax.swing.plaf.synth.SynthPainter.paintSliderBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of a slider.
"javax.swing.plaf.synth.SynthPainter.paintSliderBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a slider.
"javax.swing.plaf.synth.SynthPainter.paintSliderBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of a slider.
"javax.swing.plaf.synth.SynthPainter.paintSliderThumbBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of the thumb of a slider.
"javax.swing.plaf.synth.SynthPainter.paintSliderThumbBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of the thumb of a slider.
"javax.swing.plaf.synth.SynthPainter.paintSliderTrackBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of the track of a slider.
"javax.swing.plaf.synth.SynthPainter.paintSliderTrackBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of the track of a slider.
"javax.swing.plaf.synth.SynthPainter.paintSliderTrackBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of the track of a slider.
"javax.swing.plaf.synth.SynthPainter.paintSliderTrackBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of the track of a slider.
"javax.swing.plaf.synth.SynthPainter.paintSpinnerBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a spinner.
"javax.swing.plaf.synth.SynthPainter.paintSpinnerBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a spinner.
"javax.swing.plaf.synth.SynthPainter.paintSplitPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a split pane.
"javax.swing.plaf.synth.SynthPainter.paintSplitPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a split pane.
"javax.swing.plaf.synth.SynthPainter.paintSplitPaneDividerBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of the divider of a split pane.
"javax.swing.plaf.synth.SynthPainter.paintSplitPaneDividerBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of the divider of a split pane.
"javax.swing.plaf.synth.SynthPainter.paintSplitPaneDividerForeground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the foreground of the divider of a split pane.
"javax.swing.plaf.synth.SynthPainter.paintSplitPaneDragDivider(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)","paints the divider, when the user is dragging the divider, of a split pane."
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a tabbed pane.
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a tabbed pane.
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneContentBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of the area that contains the content of the selected tab of a tabbed pane.
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneContentBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of the area that contains the content of the selected tab of a tabbed pane.
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of the area behind the tabs of a tabbed pane.
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of the area behind the tabs of a tabbed pane.
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of the area behind the tabs of a tabbed pane.
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabAreaBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of the area behind the tabs of a tabbed pane.
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of a tab of a tabbed pane.
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int,int)",paints the background of a tab of a tabbed pane.
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of a tab of a tabbed pane.
"javax.swing.plaf.synth.SynthPainter.paintTabbedPaneTabBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int,int)",paints the border of a tab of a tabbed pane.
"javax.swing.plaf.synth.SynthPainter.paintTableBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a table.
"javax.swing.plaf.synth.SynthPainter.paintTableBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a table.
"javax.swing.plaf.synth.SynthPainter.paintTableHeaderBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of the header of a table.
"javax.swing.plaf.synth.SynthPainter.paintTableHeaderBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of the header of a table.
"javax.swing.plaf.synth.SynthPainter.paintTextAreaBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a text area.
"javax.swing.plaf.synth.SynthPainter.paintTextAreaBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a text area.
"javax.swing.plaf.synth.SynthPainter.paintTextFieldBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a text field.
"javax.swing.plaf.synth.SynthPainter.paintTextFieldBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a text field.
"javax.swing.plaf.synth.SynthPainter.paintTextPaneBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a text pane.
"javax.swing.plaf.synth.SynthPainter.paintTextPaneBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a text pane.
"javax.swing.plaf.synth.SynthPainter.paintToggleButtonBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a toggle button.
"javax.swing.plaf.synth.SynthPainter.paintToggleButtonBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a toggle button.
"javax.swing.plaf.synth.SynthPainter.paintToolBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a tool bar.
"javax.swing.plaf.synth.SynthPainter.paintToolBarBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of a tool bar.
"javax.swing.plaf.synth.SynthPainter.paintToolBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a tool bar.
"javax.swing.plaf.synth.SynthPainter.paintToolBarBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of a tool bar.
"javax.swing.plaf.synth.SynthPainter.paintToolBarContentBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of the tool bar's content area.
"javax.swing.plaf.synth.SynthPainter.paintToolBarContentBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of the tool bar's content area.
"javax.swing.plaf.synth.SynthPainter.paintToolBarContentBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of the content area of a tool bar.
"javax.swing.plaf.synth.SynthPainter.paintToolBarContentBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of the content area of a tool bar.
"javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of the window containing the tool bar when it has been detached from its primary frame.
"javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the background of the window containing the tool bar when it has been detached from its primary frame.
"javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of the window containing the tool bar when it has been detached from it's primary frame.
"javax.swing.plaf.synth.SynthPainter.paintToolBarDragWindowBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int,int)",paints the border of the window containing the tool bar when it has been detached from it's primary frame.
"javax.swing.plaf.synth.SynthPainter.paintToolTipBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a tool tip.
"javax.swing.plaf.synth.SynthPainter.paintToolTipBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a tool tip.
"javax.swing.plaf.synth.SynthPainter.paintTreeBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of a tree.
"javax.swing.plaf.synth.SynthPainter.paintTreeBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a tree.
"javax.swing.plaf.synth.SynthPainter.paintTreeCellBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of the row containing a cell in a tree.
"javax.swing.plaf.synth.SynthPainter.paintTreeCellBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of the row containing a cell in a tree.
"javax.swing.plaf.synth.SynthPainter.paintTreeCellFocus(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the focus indicator for a cell in a tree when it has focus.
"javax.swing.plaf.synth.SynthPainter.paintViewportBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the background of the viewport.
"javax.swing.plaf.synth.SynthPainter.paintViewportBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border of a viewport.
javax.swing.plaf.synth.SynthPanelUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthPanelUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthPanelUI.installListeners(javax.swing.JPanel),installs listeners into the panel.
javax.swing.plaf.synth.SynthPanelUI.installUI(javax.swing.JComponent),configures the specified component appropriately for the look and feel.
"javax.swing.plaf.synth.SynthPanelUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthPanelUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthPanelUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthPanelUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.plaf.synth.SynthPanelUI.uninstallListeners(javax.swing.JPanel),uninstalls listeners from the panel.
javax.swing.plaf.synth.SynthPanelUI.uninstallUI(javax.swing.JComponent),reverses configuration which was done on the specified component during installui.
"javax.swing.plaf.synth.SynthPanelUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthPasswordFieldUI.create(javax.swing.text.Element),creates a view (passwordview) for an element.
javax.swing.plaf.synth.SynthPasswordFieldUI.createUI(javax.swing.JComponent),creates a ui for a jpasswordfield.
javax.swing.plaf.synth.SynthPasswordFieldUI.getPropertyPrefix(),fetches the name used as a key to look up properties through the uimanager.
"javax.swing.plaf.synth.SynthPasswordFieldUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthPopupMenuUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthPopupMenuUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthPopupMenuUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthPopupMenuUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthPopupMenuUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthPopupMenuUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
"javax.swing.plaf.synth.SynthPopupMenuUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthProgressBarUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
"javax.swing.plaf.synth.SynthProgressBarUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.synth.SynthProgressBarUI.getBox(java.awt.Rectangle),stores the position and size of the bouncing box that would be painted for the current animation index in r and returns r.
javax.swing.plaf.synth.SynthProgressBarUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthProgressBarUI.getPreferredSize(javax.swing.JComponent),returns the specified component's preferred size appropriate for the look and feel.
"javax.swing.plaf.synth.SynthProgressBarUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthProgressBarUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthProgressBarUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
"javax.swing.plaf.synth.SynthProgressBarUI.paintText(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.lang.String)",paints the component's text.
javax.swing.plaf.synth.SynthProgressBarUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.plaf.synth.SynthProgressBarUI.setAnimationIndex(int),sets the index of the current animation frame to the specified value and requests that the progress bar be repainted.
javax.swing.plaf.synth.SynthProgressBarUI.uninstallListeners(),removes all listeners installed by this object.
"javax.swing.plaf.synth.SynthProgressBarUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthRadioButtonMenuItemUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
"javax.swing.plaf.synth.SynthRadioButtonMenuItemUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthRadioButtonUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthRadioButtonUI.getSizingIcon(javax.swing.AbstractButton),returns the icon used in calculating the preferred/minimum/maximum size.
"javax.swing.plaf.synth.SynthRadioButtonUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthRootPaneUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthRootPaneUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthRootPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthRootPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthRootPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthRootPaneUI.propertyChange(java.beans.PropertyChangeEvent),invoked when a property changes on the root pane.
"javax.swing.plaf.synth.SynthRootPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthScrollBarUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthScrollBarUI.getMinimumThumbSize(),returns the smallest acceptable size for the thumb.
javax.swing.plaf.synth.SynthScrollBarUI.getPreferredSize(javax.swing.JComponent),"a vertical scrollbar's preferred width is the maximum of preferred widths of the (non null) increment/decrement buttons, and the minimum width of the thumb."
javax.swing.plaf.synth.SynthScrollBarUI.getSupportsAbsolutePositioning(),indicates whether the user can absolutely position the thumb with a mouse gesture (usually the middle mouse button).
"javax.swing.plaf.synth.SynthScrollBarUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthScrollBarUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthScrollBarUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
"javax.swing.plaf.synth.SynthScrollBarUI.paintThumb(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.awt.Rectangle)",paints the scrollbar thumb.
"javax.swing.plaf.synth.SynthScrollBarUI.paintTrack(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.awt.Rectangle)",paints the scrollbar track.
javax.swing.plaf.synth.SynthScrollBarUI.setThumbRollover(boolean),sets whether or not the mouse is currently over the thumb.
"javax.swing.plaf.synth.SynthScrollBarUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthScrollPaneUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthScrollPaneUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthScrollPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthScrollPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthScrollPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
"javax.swing.plaf.synth.SynthScrollPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthSeparatorUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthSeparatorUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthSeparatorUI.getMaximumSize(javax.swing.JComponent),returns the specified component's maximum size appropriate for the look and feel.
javax.swing.plaf.synth.SynthSeparatorUI.getMinimumSize(javax.swing.JComponent),returns the specified component's minimum size appropriate for the look and feel.
javax.swing.plaf.synth.SynthSeparatorUI.getPreferredSize(javax.swing.JComponent),returns the specified component's preferred size appropriate for the look and feel.
javax.swing.plaf.synth.SynthSeparatorUI.installDefaults(javax.swing.JSeparator),installs default setting.
javax.swing.plaf.synth.SynthSeparatorUI.installListeners(javax.swing.JSeparator),installs listeners.
javax.swing.plaf.synth.SynthSeparatorUI.installUI(javax.swing.JComponent),configures the specified component appropriately for the look and feel.
"javax.swing.plaf.synth.SynthSeparatorUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthSeparatorUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthSeparatorUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthSeparatorUI.uninstallDefaults(javax.swing.JSeparator),uninstalls default setting.
javax.swing.plaf.synth.SynthSeparatorUI.uninstallListeners(javax.swing.JSeparator),uninstalls listeners.
javax.swing.plaf.synth.SynthSeparatorUI.uninstallUI(javax.swing.JComponent),reverses configuration which was done on the specified component during installui.
"javax.swing.plaf.synth.SynthSeparatorUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthSliderUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
"javax.swing.plaf.synth.SynthSliderUI.getBaseline(javax.swing.JComponent,int,int)",returns the baseline.
javax.swing.plaf.synth.SynthSliderUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthSliderUI.getMinimumSize(javax.swing.JComponent),returns the specified component's minimum size appropriate for the look and feel.
javax.swing.plaf.synth.SynthSliderUI.getPreferredSize(javax.swing.JComponent),returns the specified component's preferred size appropriate for the look and feel.
javax.swing.plaf.synth.SynthSliderUI.layout(),lays out the slider.
"javax.swing.plaf.synth.SynthSliderUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthSliderUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthSliderUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
"javax.swing.plaf.synth.SynthSliderUI.paintThumb(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.awt.Rectangle)",paints the slider thumb.
"javax.swing.plaf.synth.SynthSliderUI.paintTrack(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.awt.Rectangle)",paints the slider track.
javax.swing.plaf.synth.SynthSliderUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.plaf.synth.SynthSliderUI.uninstallDefaults(javax.swing.JSlider),uninstalls default setting.
"javax.swing.plaf.synth.SynthSliderUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthSliderUI.valueForXPosition(int),returns the value at the x position.
javax.swing.plaf.synth.SynthSliderUI.valueForYPosition(int),returns the value at the y position.
"javax.swing.plaf.synth.SynthSliderUI.yPositionForValue(int,int,int)",returns the y location for the specified value.
javax.swing.plaf.synth.SynthSpinnerUI.createEditor(),this method is called by installui to get the editor component of the jspinner.
javax.swing.plaf.synth.SynthSpinnerUI.createLayout(),"creates a layoutmanager that manages the editor, nextbutton, and previousbutton children of the jspinner."
javax.swing.plaf.synth.SynthSpinnerUI.createNextButton(),"creates an increment button, i."
javax.swing.plaf.synth.SynthSpinnerUI.createPreviousButton(),"creates a decrement button, i."
javax.swing.plaf.synth.SynthSpinnerUI.createUI(javax.swing.JComponent),returns a new instance of synthspinnerui.
javax.swing.plaf.synth.SynthSpinnerUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthSpinnerUI.installDefaults(),"initializes the jspinner border, foreground, and background, properties based on the corresponding ""spinner."
javax.swing.plaf.synth.SynthSpinnerUI.installListeners(),initializes propertychangelistener with a shared object that delegates interesting propertychangeevents to protected methods.
"javax.swing.plaf.synth.SynthSpinnerUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthSpinnerUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthSpinnerUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthSpinnerUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
"javax.swing.plaf.synth.SynthSpinnerUI.replaceEditor(javax.swing.JComponent,javax.swing.JComponent)",called by the propertychangelistener when the jspinner editor property changes.
javax.swing.plaf.synth.SynthSpinnerUI.uninstallDefaults(),sets the jspinner's layout manager to null.
javax.swing.plaf.synth.SynthSpinnerUI.uninstallListeners(),removes the propertychangelistener added by installlisteners.
"javax.swing.plaf.synth.SynthSpinnerUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthSplitPaneUI.createDefaultDivider(),creates the default divider.
javax.swing.plaf.synth.SynthSplitPaneUI.createDefaultNonContinuousLayoutDivider(),"returns the default non continuous layout divider, which is an instance of canvas that fills in the background with dark gray."
javax.swing.plaf.synth.SynthSplitPaneUI.createUI(javax.swing.JComponent),creates a new synthsplitpaneui instance.
"javax.swing.plaf.synth.SynthSplitPaneUI.finishedPaintingChildren(javax.swing.JSplitPane,java.awt.Graphics)",called when the specified split pane has finished painting its children.
javax.swing.plaf.synth.SynthSplitPaneUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthSplitPaneUI.installDefaults(),installs the ui defaults.
javax.swing.plaf.synth.SynthSplitPaneUI.installListeners(),installs the event listeners for the ui.
"javax.swing.plaf.synth.SynthSplitPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthSplitPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthSplitPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthSplitPaneUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.plaf.synth.SynthSplitPaneUI.uninstallDefaults(),uninstalls the ui defaults.
javax.swing.plaf.synth.SynthSplitPaneUI.uninstallListeners(),uninstalls the event listeners from the ui.
"javax.swing.plaf.synth.SynthSplitPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
"javax.swing.plaf.synth.SynthStyle.get(javax.swing.plaf.synth.SynthContext,java.lang.Object)",getter for a region specific style property.
"javax.swing.plaf.synth.SynthStyle.getBoolean(javax.swing.plaf.synth.SynthContext,java.lang.Object,boolean)",convenience method to get a specific style property whose value is an boolean.
"javax.swing.plaf.synth.SynthStyle.getColor(javax.swing.plaf.synth.SynthContext,javax.swing.plaf.synth.ColorType)",returns the color for the specified state.
"javax.swing.plaf.synth.SynthStyle.getColorForState(javax.swing.plaf.synth.SynthContext,javax.swing.plaf.synth.ColorType)",returns the color for the specified state.
javax.swing.plaf.synth.SynthStyle.getFont(javax.swing.plaf.synth.SynthContext),returns the font for the specified state.
javax.swing.plaf.synth.SynthStyle.getFontForState(javax.swing.plaf.synth.SynthContext),returns the font for the specified state.
javax.swing.plaf.synth.SynthStyle.getGraphicsUtils(javax.swing.plaf.synth.SynthContext),returns the synthgraphicutils for the specified context.
"javax.swing.plaf.synth.SynthStyle.getIcon(javax.swing.plaf.synth.SynthContext,java.lang.Object)",convenience method to get a specific style property whose value is an icon.
"javax.swing.plaf.synth.SynthStyle.getInsets(javax.swing.plaf.synth.SynthContext,java.awt.Insets)",returns the insets that are used to calculate sizing information.
"javax.swing.plaf.synth.SynthStyle.getInt(javax.swing.plaf.synth.SynthContext,java.lang.Object,int)",convenience method to get a specific style property whose value is a number.
javax.swing.plaf.synth.SynthStyle.getPainter(javax.swing.plaf.synth.SynthContext),returns the synthpainter that will be used for painting.
"javax.swing.plaf.synth.SynthStyle.getString(javax.swing.plaf.synth.SynthContext,java.lang.Object,java.lang.String)",convenience method to get a specific style property whose value is a string.
javax.swing.plaf.synth.SynthStyle.installDefaults(javax.swing.plaf.synth.SynthContext),installs the necessary state from this style on the jcomponent from context.
javax.swing.plaf.synth.SynthStyle.isOpaque(javax.swing.plaf.synth.SynthContext),returns true if the region is opaque.
javax.swing.plaf.synth.SynthStyle.uninstallDefaults(javax.swing.plaf.synth.SynthContext),uninstalls any state that this style installed on the jcomponent from context.
"javax.swing.plaf.synth.SynthStyleFactory.getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)",returns the style for the specified component.
javax.swing.plaf.synth.SynthTabbedPaneUI.createLayoutManager(),invoked by installui to create a layout manager object to manage the jtabbedpane.
javax.swing.plaf.synth.SynthTabbedPaneUI.createMouseListener(),overridden to keep track of whether the selected tab is also pressed.
javax.swing.plaf.synth.SynthTabbedPaneUI.createScrollButton(int),creates and returns a jbutton that will provide the user with a way to scroll the tabs in a particular direction.
javax.swing.plaf.synth.SynthTabbedPaneUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthTabbedPaneUI.getBaseline(int),returns the baseline for the specified tab.
javax.swing.plaf.synth.SynthTabbedPaneUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthTabbedPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthTabbedPaneUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthTabbedPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthTabbedPaneUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.plaf.synth.SynthTabbedPaneUI.setRolloverTab(int),sets the tab the mouse is currently over to index.
"javax.swing.plaf.synth.SynthTabbedPaneUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthTableHeaderUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthTableHeaderUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthTableHeaderUI.installDefaults(),"initializes jtableheader properties such as font, foreground, and background."
javax.swing.plaf.synth.SynthTableHeaderUI.installListeners(),attaches listeners to the jtableheader.
"javax.swing.plaf.synth.SynthTableHeaderUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthTableHeaderUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthTableHeaderUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthTableHeaderUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
"javax.swing.plaf.synth.SynthTableHeaderUI.rolloverColumnUpdated(int,int)",this method gets called every time when a rollover column in the table header is updated.
"javax.swing.plaf.synth.SynthTableHeaderUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthTableUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthTableUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthTableUI.installDefaults(),"initializes jtable properties, such as font, foreground, and background."
javax.swing.plaf.synth.SynthTableUI.installListeners(),attaches listeners to the jtable.
"javax.swing.plaf.synth.SynthTableUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthTableUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthTableUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthTableUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
"javax.swing.plaf.synth.SynthTableUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthTextAreaUI.createUI(javax.swing.JComponent),creates a ui object for a jtextarea.
javax.swing.plaf.synth.SynthTextAreaUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthTextAreaUI.installDefaults(),"initializes component properties, such as font, foreground, background, caret color, selection color, selected text color, disabled text color, and border color."
"javax.swing.plaf.synth.SynthTextAreaUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
javax.swing.plaf.synth.SynthTextAreaUI.paintBackground(java.awt.Graphics),paints a background for the view.
"javax.swing.plaf.synth.SynthTextAreaUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthTextAreaUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed on the associated jtextcomponent.
javax.swing.plaf.synth.SynthTextAreaUI.uninstallDefaults(),sets the component properties that have not been explicitly overridden to null.
"javax.swing.plaf.synth.SynthTextAreaUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthTextFieldUI.createUI(javax.swing.JComponent),creates a ui for a jtextfield.
javax.swing.plaf.synth.SynthTextFieldUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthTextFieldUI.installDefaults(),"initializes component properties, such as font, foreground, background, caret color, selection color, selected text color, disabled text color, and border color."
"javax.swing.plaf.synth.SynthTextFieldUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
javax.swing.plaf.synth.SynthTextFieldUI.paintBackground(java.awt.Graphics),paints a background for the view.
"javax.swing.plaf.synth.SynthTextFieldUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthTextFieldUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed on the associated jtextcomponent.
javax.swing.plaf.synth.SynthTextFieldUI.uninstallDefaults(),sets the component properties that have not been explicitly overridden to null.
"javax.swing.plaf.synth.SynthTextFieldUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthTextPaneUI.createUI(javax.swing.JComponent),creates a ui for the jtextpane.
javax.swing.plaf.synth.SynthTextPaneUI.getPropertyPrefix(),fetches the name used as a key to lookup properties through the uimanager.
javax.swing.plaf.synth.SynthTextPaneUI.installUI(javax.swing.JComponent),installs the ui for a component.
"javax.swing.plaf.synth.SynthTextPaneUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthTextPaneUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed on the associated jtextcomponent.
javax.swing.plaf.synth.SynthToggleButtonUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
"javax.swing.plaf.synth.SynthToggleButtonUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthToolBarUI.createLayout(),creates a layoutmanager to use with the toolbar.
javax.swing.plaf.synth.SynthToolBarUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthToolBarUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthToolBarUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthToolBarUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the toolbar.
"javax.swing.plaf.synth.SynthToolBarUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
"javax.swing.plaf.synth.SynthToolBarUI.paintContent(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.awt.Rectangle)",paints the toolbar content.
javax.swing.plaf.synth.SynthToolBarUI.paintDragWindow(java.awt.Graphics),paints the contents of the window used for dragging.
javax.swing.plaf.synth.SynthToolBarUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.plaf.synth.SynthToolBarUI.setBorderToNonRollover(java.awt.Component),"this implementation does nothing, because the rollover property of the jtoolbar class is not used in the synth look and feel."
javax.swing.plaf.synth.SynthToolBarUI.setBorderToNormal(java.awt.Component),"this implementation does nothing, because the rollover property of the jtoolbar class is not used in the synth look and feel."
javax.swing.plaf.synth.SynthToolBarUI.setBorderToRollover(java.awt.Component),"this implementation does nothing, because the rollover property of the jtoolbar class is not used in the synth look and feel."
"javax.swing.plaf.synth.SynthToolBarUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthToolTipUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthToolTipUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthToolTipUI.getPreferredSize(javax.swing.JComponent),returns the specified component's preferred size appropriate for the look and feel.
"javax.swing.plaf.synth.SynthToolTipUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthToolTipUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthToolTipUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthToolTipUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
"javax.swing.plaf.synth.SynthToolTipUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthTreeUI.createDefaultCellEditor(),creates a default cell editor.
javax.swing.plaf.synth.SynthTreeUI.createDefaultCellRenderer(),returns the default cell renderer that is used to do the stamping of each node.
javax.swing.plaf.synth.SynthTreeUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthTreeUI.getContext(javax.swing.JComponent),returns the context for the specified component.
"javax.swing.plaf.synth.SynthTreeUI.getRowX(int,int)","returns the location, along the x-axis, to render a particular row at."
"javax.swing.plaf.synth.SynthTreeUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthTreeUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthTreeUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthTreeUI.paintDropLine(java.awt.Graphics),paints the drop line.
"javax.swing.plaf.synth.SynthTreeUI.paintExpandControl(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)",paints the expand (toggle) part of a row.
"javax.swing.plaf.synth.SynthTreeUI.paintHorizontalLine(java.awt.Graphics,javax.swing.JComponent,int,int,int)",paints a horizontal line.
"javax.swing.plaf.synth.SynthTreeUI.paintHorizontalPartOfLeg(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)",paints the horizontal part of the leg.
"javax.swing.plaf.synth.SynthTreeUI.paintVerticalLine(java.awt.Graphics,javax.swing.JComponent,int,int,int)",paints a vertical line.
"javax.swing.plaf.synth.SynthTreeUI.paintVerticalPartOfLeg(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,javax.swing.tree.TreePath)",paints the vertical part of the leg.
javax.swing.plaf.synth.SynthTreeUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
"javax.swing.plaf.synth.SynthTreeUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
javax.swing.plaf.synth.SynthViewportUI.createUI(javax.swing.JComponent),creates a new ui object for the given component.
javax.swing.plaf.synth.SynthViewportUI.getContext(javax.swing.JComponent),returns the context for the specified component.
javax.swing.plaf.synth.SynthViewportUI.installDefaults(javax.swing.JComponent),installs defaults for a viewport.
javax.swing.plaf.synth.SynthViewportUI.installListeners(javax.swing.JComponent),installs listeners into the viewport.
javax.swing.plaf.synth.SynthViewportUI.installUI(javax.swing.JComponent),configures the specified component appropriately for the look and feel.
"javax.swing.plaf.synth.SynthViewportUI.paint(java.awt.Graphics,javax.swing.JComponent)",paints the specified component according to the look and feel.
"javax.swing.plaf.synth.SynthViewportUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)",paints the specified component.
"javax.swing.plaf.synth.SynthViewportUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",paints the border.
javax.swing.plaf.synth.SynthViewportUI.propertyChange(java.beans.PropertyChangeEvent),this method gets called when a bound property is changed.
javax.swing.plaf.synth.SynthViewportUI.uninstallDefaults(javax.swing.JComponent),uninstalls defaults from a viewport.
javax.swing.plaf.synth.SynthViewportUI.uninstallListeners(javax.swing.JComponent),uninstalls listeners from the viewport.
javax.swing.plaf.synth.SynthViewportUI.uninstallUI(javax.swing.JComponent),reverses configuration which was done on the specified component during installui.
"javax.swing.plaf.synth.SynthViewportUI.update(java.awt.Graphics,javax.swing.JComponent)",notifies this ui delegate to repaint the specified component.
"javax.swing.table.TableCellEditor.getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)",sets an initial value for the editor.
"javax.swing.table.TableCellRenderer.getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)",returns the component used for drawing the cell.
javax.swing.table.TableColumnModel.addColumn(javax.swing.table.TableColumn),appends acolumn to the end of the tablecolumns array.
javax.swing.table.TableColumnModel.addColumnModelListener(javax.swing.event.TableColumnModelListener),adds a listener for table column model events.
javax.swing.table.TableColumnModel.getColumn(int),returns the tablecolumn object for the column at columnindex.
javax.swing.table.TableColumnModel.getColumnCount(),returns the number of columns in the model.
javax.swing.table.TableColumnModel.getColumnIndex(java.lang.Object),"returns the index of the first column in the table whose identifier is equal to identifier, when compared using equals."
javax.swing.table.TableColumnModel.getColumnIndexAtX(int),"returns the index of the column that lies on the horizontal point, xposition; or -1 if it lies outside the any of the column's bounds."
javax.swing.table.TableColumnModel.getColumnMargin(),returns the width between the cells in each column.
javax.swing.table.TableColumnModel.getColumns(),returns an enumeration of all the columns in the model.
javax.swing.table.TableColumnModel.getColumnSelectionAllowed(),returns true if columns may be selected.
javax.swing.table.TableColumnModel.getSelectedColumnCount(),returns the number of selected columns.
javax.swing.table.TableColumnModel.getSelectedColumns(),returns an array of indicies of all selected columns.
javax.swing.table.TableColumnModel.getSelectionModel(),returns the current selection model.
javax.swing.table.TableColumnModel.getTotalColumnWidth(),returns the total width of all the columns.
"javax.swing.table.TableColumnModel.moveColumn(int,int)",moves the column and its header at columnindex to newindex.
javax.swing.table.TableColumnModel.removeColumn(javax.swing.table.TableColumn),deletes the tablecolumn column from the tablecolumns array.
javax.swing.table.TableColumnModel.removeColumnModelListener(javax.swing.event.TableColumnModelListener),removes a listener for table column model events.
javax.swing.table.TableColumnModel.setColumnMargin(int),sets the tablecolumn's column margin to newmargin.
javax.swing.table.TableColumnModel.setColumnSelectionAllowed(boolean),sets whether the columns in this model may be selected.
javax.swing.table.TableColumnModel.setSelectionModel(javax.swing.ListSelectionModel),sets the selection model.
javax.swing.table.TableModel.addTableModelListener(javax.swing.event.TableModelListener),adds a listener to the list that is notified each time a change to the data model occurs.
javax.swing.table.TableModel.getColumnClass(int),returns the most specific superclass for all the cell values in the column.
javax.swing.table.TableModel.getColumnCount(),returns the number of columns in the model.
javax.swing.table.TableModel.getColumnName(int),returns the name of the column at columnindex.
javax.swing.table.TableModel.getRowCount(),returns the number of rows in the model.
"javax.swing.table.TableModel.getValueAt(int,int)",returns the value for the cell at columnindex and rowindex.
"javax.swing.table.TableModel.isCellEditable(int,int)",returns true if the cell at rowindex and columnindex is editable.
javax.swing.table.TableModel.removeTableModelListener(javax.swing.event.TableModelListener),removes a listener from the list that is notified each time a change to the data model occurs.
"javax.swing.table.TableModel.setValueAt(java.lang.Object,int,int)",sets the value in the cell at columnindex and rowindex to avalue.
javax.swing.table.AbstractTableModel.addTableModelListener(javax.swing.event.TableModelListener),adds a listener to the list that's notified each time a change to the data model occurs.
javax.swing.table.AbstractTableModel.findColumn(java.lang.String),returns a column given its name.
"javax.swing.table.AbstractTableModel.fireTableCellUpdated(int,int)","notifies all listeners that the value of the cell at [row, column] has been updated."
javax.swing.table.AbstractTableModel.fireTableChanged(javax.swing.event.TableModelEvent),forwards the given notification event to all tablemodellisteners that registered themselves as listeners for this table model.
javax.swing.table.AbstractTableModel.fireTableDataChanged(),notifies all listeners that all cell values in the table's rows may have changed.
"javax.swing.table.AbstractTableModel.fireTableRowsDeleted(int,int)","notifies all listeners that rows in the range [firstrow, lastrow], inclusive, have been deleted."
"javax.swing.table.AbstractTableModel.fireTableRowsInserted(int,int)","notifies all listeners that rows in the range [firstrow, lastrow], inclusive, have been inserted."
"javax.swing.table.AbstractTableModel.fireTableRowsUpdated(int,int)","notifies all listeners that rows in the range [firstrow, lastrow], inclusive, have been updated."
javax.swing.table.AbstractTableModel.fireTableStructureChanged(),notifies all listeners that the table's structure has changed.
javax.swing.table.AbstractTableModel.getColumnClass(int),returns object.
javax.swing.table.AbstractTableModel.getColumnName(int),"returns a default name for the column using spreadsheet conventions: a, b, c, ."
javax.swing.table.AbstractTableModel.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this abstracttablemodel.
javax.swing.table.AbstractTableModel.getTableModelListeners(),returns an array of all the table model listeners registered on this model.
"javax.swing.table.AbstractTableModel.isCellEditable(int,int)",returns false.
javax.swing.table.AbstractTableModel.removeTableModelListener(javax.swing.event.TableModelListener),removes a listener from the list that's notified each time a change to the data model occurs.
"javax.swing.table.AbstractTableModel.setValueAt(java.lang.Object,int,int)",this empty implementation is provided so users don't have to implement this method if their data model is not editable.
"javax.swing.table.DefaultTableCellRenderer.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",overridden for performance reasons.
"javax.swing.table.DefaultTableCellRenderer.firePropertyChange(java.lang.String,boolean,boolean)",overridden for performance reasons.
"javax.swing.table.DefaultTableCellRenderer.getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)",returns the default table cell renderer.
javax.swing.table.DefaultTableCellRenderer.invalidate(),overridden for performance reasons.
javax.swing.table.DefaultTableCellRenderer.isOpaque(),overridden for performance reasons.
"javax.swing.table.DefaultTableCellRenderer.repaint(long,int,int,int,int)",overridden for performance reasons.
javax.swing.table.DefaultTableCellRenderer.repaint(java.awt.Rectangle),overridden for performance reasons.
javax.swing.table.DefaultTableCellRenderer.repaint(),overridden for performance reasons.
javax.swing.table.DefaultTableCellRenderer.revalidate(),overridden for performance reasons.
javax.swing.table.DefaultTableCellRenderer.setValue(java.lang.Object),sets the string object for the cell being rendered to value.
javax.swing.table.DefaultTableCellRenderer.updateUI(),notification from the uimanager that the look and feel [l&f] has changed.
javax.swing.table.DefaultTableCellRenderer.validate(),overridden for performance reasons.
javax.swing.table.DefaultTableColumnModel.addColumn(javax.swing.table.TableColumn),appends acolumn to the end of the tablecolumns array.
javax.swing.table.DefaultTableColumnModel.addColumnModelListener(javax.swing.event.TableColumnModelListener),adds a listener for table column model events.
javax.swing.table.DefaultTableColumnModel.createSelectionModel(),creates a new default list selection model.
javax.swing.table.DefaultTableColumnModel.fireColumnAdded(javax.swing.event.TableColumnModelEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.table.DefaultTableColumnModel.fireColumnMarginChanged(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.table.DefaultTableColumnModel.fireColumnMoved(javax.swing.event.TableColumnModelEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.table.DefaultTableColumnModel.fireColumnRemoved(javax.swing.event.TableColumnModelEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.table.DefaultTableColumnModel.fireColumnSelectionChanged(javax.swing.event.ListSelectionEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.table.DefaultTableColumnModel.getColumn(int),returns the tablecolumn object for the column at columnindex.
javax.swing.table.DefaultTableColumnModel.getColumnCount(),returns the number of columns in the tablecolumns array.
javax.swing.table.DefaultTableColumnModel.getColumnIndex(java.lang.Object),"returns the index of the first column in the tablecolumns array whose identifier is equal to identifier, when compared using equals."
javax.swing.table.DefaultTableColumnModel.getColumnIndexAtX(int),"returns the index of the column that lies at position x, or -1 if no column covers this point."
javax.swing.table.DefaultTableColumnModel.getColumnMargin(),returns the width margin for tablecolumn.
javax.swing.table.DefaultTableColumnModel.getColumnModelListeners(),returns an array of all the column model listeners registered on this model.
javax.swing.table.DefaultTableColumnModel.getColumns(),returns an enumeration of all the columns in the model.
javax.swing.table.DefaultTableColumnModel.getColumnSelectionAllowed(),"returns true if column selection is allowed, otherwise false."
javax.swing.table.DefaultTableColumnModel.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this model.
javax.swing.table.DefaultTableColumnModel.getSelectedColumnCount(),returns the number of columns selected.
javax.swing.table.DefaultTableColumnModel.getSelectedColumns(),returns an array of selected columns.
javax.swing.table.DefaultTableColumnModel.getSelectionModel(),returns the listselectionmodel that is used to maintain column selection state.
javax.swing.table.DefaultTableColumnModel.getTotalColumnWidth(),returns the total combined width of all columns.
"javax.swing.table.DefaultTableColumnModel.moveColumn(int,int)",moves the column and heading at columnindex to newindex.
javax.swing.table.DefaultTableColumnModel.propertyChange(java.beans.PropertyChangeEvent),property change listener change method.
javax.swing.table.DefaultTableColumnModel.recalcWidthCache(),recalculates the total combined width of all columns.
javax.swing.table.DefaultTableColumnModel.removeColumn(javax.swing.table.TableColumn),deletes the column from the tablecolumns array.
javax.swing.table.DefaultTableColumnModel.removeColumnModelListener(javax.swing.event.TableColumnModelListener),removes a listener for table column model events.
javax.swing.table.DefaultTableColumnModel.setColumnMargin(int),sets the column margin to newmargin.
javax.swing.table.DefaultTableColumnModel.setColumnSelectionAllowed(boolean),sets whether column selection is allowed.
javax.swing.table.DefaultTableColumnModel.setSelectionModel(javax.swing.ListSelectionModel),sets the selection model for this tablecolumnmodel to newmodel and registers for listener notifications from the new selection model.
javax.swing.table.DefaultTableColumnModel.valueChanged(javax.swing.event.ListSelectionEvent),a listselectionlistener that forwards listselectionevents when there is a column selection change.
javax.swing.table.DefaultTableModel.addColumn(java.lang.Object),adds a column to the model.
"javax.swing.table.DefaultTableModel.addColumn(java.lang.Object,java.util.Vector)",adds a column to the model.
"javax.swing.table.DefaultTableModel.addColumn(java.lang.Object,java.lang.Object[])",adds a column to the model.
javax.swing.table.DefaultTableModel.addRow(java.util.Vector),adds a row to the end of the model.
javax.swing.table.DefaultTableModel.addRow(java.lang.Object[]),adds a row to the end of the model.
javax.swing.table.DefaultTableModel.convertToVector(java.lang.Object[]),returns a vector that contains the same objects as the array.
javax.swing.table.DefaultTableModel.convertToVector(java.lang.Object[][]),returns a vector of vectors that contains the same objects as the array.
javax.swing.table.DefaultTableModel.getColumnCount(),returns the number of columns in this data table.
javax.swing.table.DefaultTableModel.getColumnName(int),returns the column name.
javax.swing.table.DefaultTableModel.getDataVector(),returns the vector of vectors that contains the table's data values.
javax.swing.table.DefaultTableModel.getRowCount(),returns the number of rows in this data table.
"javax.swing.table.DefaultTableModel.getValueAt(int,int)",returns an attribute value for the cell at row and column.
"javax.swing.table.DefaultTableModel.insertRow(int,java.util.Vector)",inserts a row at row in the model.
"javax.swing.table.DefaultTableModel.insertRow(int,java.lang.Object[])",inserts a row at row in the model.
"javax.swing.table.DefaultTableModel.isCellEditable(int,int)",returns true regardless of parameter values.
"javax.swing.table.DefaultTableModel.moveRow(int,int,int)",moves one or more rows from the inclusive range start to end to the to position in the model.
javax.swing.table.DefaultTableModel.newRowsAdded(javax.swing.event.TableModelEvent),ensures that the new rows have the correct number of columns.
javax.swing.table.DefaultTableModel.removeRow(int),removes the row at row from the model.
javax.swing.table.DefaultTableModel.setColumnCount(int),sets the number of columns in the model.
javax.swing.table.DefaultTableModel.setColumnIdentifiers(java.util.Vector),replaces the column identifiers in the model.
javax.swing.table.DefaultTableModel.setColumnIdentifiers(java.lang.Object[]),replaces the column identifiers in the model.
"javax.swing.table.DefaultTableModel.setDataVector(java.util.Vector,java.util.Vector)","replaces the current datavector instance variable with the new vector of rows, datavector."
"javax.swing.table.DefaultTableModel.setDataVector(java.lang.Object[][],java.lang.Object[])",replaces the value in the datavector instance variable with the values in the array datavector.
javax.swing.table.DefaultTableModel.setNumRows(int),obsolete as of java 2 platform v1.
javax.swing.table.DefaultTableModel.setRowCount(int),sets the number of rows in the model.
"javax.swing.table.DefaultTableModel.setValueAt(java.lang.Object,int,int)",sets the object value for the cell at column and row.
javax.swing.table.JTableHeader.columnAdded(javax.swing.event.TableColumnModelEvent),invoked when a column is added to the table column model.
javax.swing.table.JTableHeader.columnAtPoint(java.awt.Point),"returns the index of the column that point lies in, or -1 if it lies out of bounds."
javax.swing.table.JTableHeader.columnMarginChanged(javax.swing.event.ChangeEvent),invoked when a column is moved due to a margin change.
javax.swing.table.JTableHeader.columnMoved(javax.swing.event.TableColumnModelEvent),invoked when a column is repositioned.
javax.swing.table.JTableHeader.columnRemoved(javax.swing.event.TableColumnModelEvent),invoked when a column is removed from the table column model.
javax.swing.table.JTableHeader.columnSelectionChanged(javax.swing.event.ListSelectionEvent),invoked when the selection model of the tablecolumnmodel is changed.
javax.swing.table.JTableHeader.createDefaultColumnModel(),returns the default column model object which is a defaulttablecolumnmodel.
javax.swing.table.JTableHeader.createDefaultRenderer(),returns a default renderer to be used when no header renderer is defined by a tablecolumn.
javax.swing.table.JTableHeader.getAccessibleContext(),gets the accessiblecontext associated with this jtableheader.
javax.swing.table.JTableHeader.getColumnModel(),returns the tablecolumnmodel that contains all column information of this table header.
javax.swing.table.JTableHeader.getDefaultRenderer(),returns the default renderer used when no headerrenderer is defined by a tablecolumn.
javax.swing.table.JTableHeader.getDraggedColumn(),"returns the the dragged column, if and only if, a drag is in process, otherwise returns null."
javax.swing.table.JTableHeader.getDraggedDistance(),"returns the column's horizontal distance from its original position, if and only if, a drag is in process."
javax.swing.table.JTableHeader.getHeaderRect(int),returns the rectangle containing the header tile at column.
javax.swing.table.JTableHeader.getReorderingAllowed(),"returns true if the user is allowed to rearrange columns by dragging their headers, false otherwise."
javax.swing.table.JTableHeader.getResizingAllowed(),"returns true if the user is allowed to resize columns by dragging between their headers, false otherwise."
javax.swing.table.JTableHeader.getResizingColumn(),returns the resizing column.
javax.swing.table.JTableHeader.getTable(),returns the table associated with this header.
javax.swing.table.JTableHeader.getToolTipText(java.awt.event.MouseEvent),allows the renderer's tips to be used if there is text set.
javax.swing.table.JTableHeader.getUI(),returns the look and feel (l&f) object that renders this component.
javax.swing.table.JTableHeader.getUIClassID(),returns the suffix used to construct the name of the look and feel (l&f) class used to render this component.
javax.swing.table.JTableHeader.getUpdateTableInRealTime(),obsolete as of java 2 platform v1.
javax.swing.table.JTableHeader.initializeLocalVars(),initializes the local variables and properties with default values.
javax.swing.table.JTableHeader.paramString(),returns a string representation of this jtableheader.
javax.swing.table.JTableHeader.resizeAndRepaint(),sizes the header and marks it as needing display.
javax.swing.table.JTableHeader.setColumnModel(javax.swing.table.TableColumnModel),sets the column model for this table to newmodel and registers for listener notifications from the new column model.
javax.swing.table.JTableHeader.setDefaultRenderer(javax.swing.table.TableCellRenderer),sets the default renderer to be used when no headerrenderer is defined by a tablecolumn.
javax.swing.table.JTableHeader.setDraggedColumn(javax.swing.table.TableColumn),sets the header's draggedcolumn to acolumn.
javax.swing.table.JTableHeader.setDraggedDistance(int),sets the header's draggeddistance to distance.
javax.swing.table.JTableHeader.setReorderingAllowed(boolean),sets whether the user can drag column headers to reorder columns.
javax.swing.table.JTableHeader.setResizingAllowed(boolean),sets whether the user can resize columns by dragging between headers.
javax.swing.table.JTableHeader.setResizingColumn(javax.swing.table.TableColumn),sets the header's resizingcolumn to acolumn.
javax.swing.table.JTableHeader.setTable(javax.swing.JTable),sets the table associated with this header.
javax.swing.table.JTableHeader.setUI(javax.swing.plaf.TableHeaderUI),sets the look and feel (l&f) object that renders this component.
javax.swing.table.JTableHeader.setUpdateTableInRealTime(boolean),obsolete as of java 2 platform v1.
javax.swing.table.JTableHeader.updateUI(),notification from the uimanager that the look and feel (l&f) has changed.
javax.swing.table.TableColumn.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
javax.swing.table.TableColumn.createDefaultHeaderRenderer(),as of java 2 platform v1.
javax.swing.table.TableColumn.getCellEditor(),returns the tablecelleditor used by the jtable to edit values for this column.
javax.swing.table.TableColumn.getCellRenderer(),returns the tablecellrenderer used by the jtable to draw values for this column.
javax.swing.table.TableColumn.getHeaderRenderer(),returns the tablecellrenderer used to draw the header of the tablecolumn.
javax.swing.table.TableColumn.getHeaderValue(),returns the object used as the value for the header renderer.
javax.swing.table.TableColumn.getIdentifier(),returns the identifier object for this column.
javax.swing.table.TableColumn.getMaxWidth(),returns the maximum width for the tablecolumn.
javax.swing.table.TableColumn.getMinWidth(),returns the minimum width for the tablecolumn.
javax.swing.table.TableColumn.getModelIndex(),returns the model index for this column.
javax.swing.table.TableColumn.getPreferredWidth(),returns the preferred width of the tablecolumn.
javax.swing.table.TableColumn.getPropertyChangeListeners(),returns an array of all the propertychangelisteners added to this tablecolumn with addpropertychangelistener().
javax.swing.table.TableColumn.getResizable(),"returns true if the user is allowed to resize the tablecolumn's width, false otherwise."
javax.swing.table.TableColumn.getWidth(),returns the width of the tablecolumn.
javax.swing.table.TableColumn.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychangelistener from the listener list.
javax.swing.table.TableColumn.setCellEditor(javax.swing.table.TableCellEditor),sets the editor to used by when a cell in this column is edited.
javax.swing.table.TableColumn.setCellRenderer(javax.swing.table.TableCellRenderer),sets the tablecellrenderer used by jtable to draw individual values for this column.
javax.swing.table.TableColumn.setHeaderRenderer(javax.swing.table.TableCellRenderer),sets the tablecellrenderer used to draw the tablecolumn's header to headerrenderer.
javax.swing.table.TableColumn.setHeaderValue(java.lang.Object),sets the object whose string representation will be used as the value for the headerrenderer.
javax.swing.table.TableColumn.setIdentifier(java.lang.Object),sets the tablecolumn's identifier to anidentifier.
javax.swing.table.TableColumn.setMaxWidth(int),"sets the tablecolumn's maximum width to maxwidth or, if maxwidth is less than the minimum width, to the minimum width."
javax.swing.table.TableColumn.setMinWidth(int),"sets the tablecolumn's minimum width to minwidth, adjusting the new minimum width if necessary to ensure that 0 <= minwidth <= maxwidth."
javax.swing.table.TableColumn.setModelIndex(int),sets the model index for this column.
javax.swing.table.TableColumn.setPreferredWidth(int),sets this column's preferred width to preferredwidth.
javax.swing.table.TableColumn.setResizable(boolean),sets whether this column can be resized.
javax.swing.table.TableColumn.setWidth(int),"this method should not be used to set the widths of columns in the jtable, use setpreferredwidth instead."
javax.swing.table.TableColumn.sizeWidthToFit(),resizes the tablecolumn to fit the width of its header cell.
javax.swing.table.TableRowSorter.getComparator(int),returns the comparator for the specified column.
javax.swing.table.TableRowSorter.getStringConverter(),returns the object responsible for converting values from the model to strings.
javax.swing.table.TableRowSorter.setModel(javax.swing.table.TableRowSorter),sets the tablemodel to use as the underlying model for this tablerowsorter.
javax.swing.table.TableRowSorter.setStringConverter(javax.swing.table.TableStringConverter),sets the object responsible for converting values from the model to strings.
javax.swing.table.TableRowSorter.useToString(int),returns whether or not to convert the value to a string before doing comparisons when sorting.
"javax.swing.table.TableStringConverter.toString(javax.swing.table.TableModel,int,int)",returns the string representation of the value at the specified location.
"javax.swing.text.AbstractDocument.AttributeContext.addAttribute(javax.swing.text.AttributeSet,java.lang.Object,java.lang.Object)","adds an attribute to the given set, and returns the new representative set."
"javax.swing.text.AbstractDocument.AttributeContext.addAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)",adds a set of attributes to the element.
javax.swing.text.AbstractDocument.AttributeContext.getEmptySet(),fetches an empty attributeset.
javax.swing.text.AbstractDocument.AttributeContext.reclaim(javax.swing.text.AttributeSet),reclaims an attribute set.
"javax.swing.text.AbstractDocument.AttributeContext.removeAttribute(javax.swing.text.AttributeSet,java.lang.Object)",removes an attribute from the set.
"javax.swing.text.AbstractDocument.AttributeContext.removeAttributes(javax.swing.text.AttributeSet,java.util.Enumeration<?>)",removes a set of attributes for the element.
"javax.swing.text.AbstractDocument.AttributeContext.removeAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)",removes a set of attributes for the element.
javax.swing.text.AbstractDocument.Content.createPosition(int),creates a position within the content that will track change as the content is mutated.
"javax.swing.text.AbstractDocument.Content.getChars(int,int,javax.swing.text.Segment)",gets a sequence of characters and copies them into a segment.
"javax.swing.text.AbstractDocument.Content.getString(int,int)",fetches a string of characters contained in the sequence.
"javax.swing.text.AbstractDocument.Content.insertString(int,java.lang.String)",inserts a string of characters into the sequence.
javax.swing.text.AbstractDocument.Content.length(),current length of the sequence of character content.
"javax.swing.text.AbstractDocument.Content.remove(int,int)",removes some portion of the sequence.
"javax.swing.text.AttributeSet.containsAttribute(java.lang.Object,java.lang.Object)",returns true if this set defines an attribute with the same name and an equal value.
javax.swing.text.AttributeSet.containsAttributes(javax.swing.text.AttributeSet),returns true if this set defines all the attributes from the given set with equal values.
javax.swing.text.AttributeSet.copyAttributes(),returns an attribute set that is guaranteed not to change over time.
javax.swing.text.AttributeSet.getAttribute(java.lang.Object),fetches the value of the given attribute.
javax.swing.text.AttributeSet.getAttributeCount(),returns the number of attributes that are defined locally in this set.
javax.swing.text.AttributeSet.getAttributeNames(),returns an enumeration over the names of the attributes that are defined locally in the set.
javax.swing.text.AttributeSet.getResolveParent(),gets the resolving parent.
javax.swing.text.AttributeSet.isDefined(java.lang.Object),checks whether the named attribute has a value specified in the set without resolving through another attribute set.
javax.swing.text.AttributeSet.isEqual(javax.swing.text.AttributeSet),determines if the two attribute sets are equivalent.
javax.swing.text.Caret.addChangeListener(javax.swing.event.ChangeListener),adds a listener to track whenever the caret position has been changed.
javax.swing.text.Caret.deinstall(javax.swing.text.JTextComponent),called when the ui is being removed from the interface of a jtextcomponent.
javax.swing.text.Caret.getBlinkRate(),gets the blink rate of the caret.
javax.swing.text.Caret.getDot(),fetches the current position of the caret.
javax.swing.text.Caret.getMagicCaretPosition(),gets the current caret visual location.
javax.swing.text.Caret.getMark(),fetches the current position of the mark.
javax.swing.text.Caret.install(javax.swing.text.JTextComponent),called when the ui is being installed into the interface of a jtextcomponent.
javax.swing.text.Caret.isSelectionVisible(),determines if the selection is currently visible.
javax.swing.text.Caret.isVisible(),determines if the caret is currently visible.
javax.swing.text.Caret.moveDot(int),"moves the caret position (dot) to some other position, leaving behind the mark."
javax.swing.text.Caret.paint(java.awt.Graphics),renders the caret.
javax.swing.text.Caret.removeChangeListener(javax.swing.event.ChangeListener),removes a listener that was tracking caret position changes.
javax.swing.text.Caret.setBlinkRate(int),sets the blink rate of the caret.
javax.swing.text.Caret.setDot(int),sets the caret position to some position.
javax.swing.text.Caret.setMagicCaretPosition(java.awt.Point),set the current caret visual location.
javax.swing.text.Caret.setSelectionVisible(boolean),sets the visibility of the selection.
javax.swing.text.Caret.setVisible(boolean),sets the visibility of the caret.
javax.swing.text.Document.addDocumentListener(javax.swing.event.DocumentListener),registers the given observer to begin receiving notifications when changes are made to the document.
javax.swing.text.Document.addUndoableEditListener(javax.swing.event.UndoableEditListener),registers the given observer to begin receiving notifications when undoable edits are made to the document.
javax.swing.text.Document.createPosition(int),this method allows an application to mark a place in a sequence of character content.
javax.swing.text.Document.getDefaultRootElement(),"returns the root element that views should be based upon, unless some other mechanism for assigning views to element structures is provided."
javax.swing.text.Document.getEndPosition(),returns a position that represents the end of the document.
javax.swing.text.Document.getLength(),returns number of characters of content currently in the document.
javax.swing.text.Document.getProperty(java.lang.Object),gets the properties associated with the document.
javax.swing.text.Document.getRootElements(),returns all of the root elements that are defined.
javax.swing.text.Document.getStartPosition(),returns a position that represents the start of the document.
"javax.swing.text.Document.getText(int,int)",fetches the text contained within the given portion of the document.
"javax.swing.text.Document.getText(int,int,javax.swing.text.Segment)",fetches the text contained within the given portion of the document.
"javax.swing.text.Document.insertString(int,java.lang.String,javax.swing.text.AttributeSet)",inserts a string of content.
"javax.swing.text.Document.putProperty(java.lang.Object,java.lang.Object)",associates a property with the document.
"javax.swing.text.Document.remove(int,int)",removes a portion of the content of the document.
javax.swing.text.Document.removeDocumentListener(javax.swing.event.DocumentListener),unregisters the given observer from the notification list so it will no longer receive change updates.
javax.swing.text.Document.removeUndoableEditListener(javax.swing.event.UndoableEditListener),unregisters the given observer from the notification list so it will no longer receive updates.
javax.swing.text.Document.render(java.lang.Runnable),"allows the model to be safely rendered in the presence of concurrency, if the model supports being updated asynchronously."
javax.swing.text.Element.getAttributes(),fetches the collection of attributes this element contains.
javax.swing.text.Element.getDocument(),fetches the document associated with this element.
javax.swing.text.Element.getElement(int),fetches the child element at the given index.
javax.swing.text.Element.getElementCount(),gets the number of child elements contained by this element.
javax.swing.text.Element.getElementIndex(int),gets the child element index closest to the given offset.
javax.swing.text.Element.getEndOffset(),fetches the offset from the beginning of the document that this element ends at.
javax.swing.text.Element.getName(),fetches the name of the element.
javax.swing.text.Element.getParentElement(),fetches the parent element.
javax.swing.text.Element.getStartOffset(),fetches the offset from the beginning of the document that this element begins at.
javax.swing.text.Element.isLeaf(),"is this element a leaf element? an element that may have children, even if it currently has no children, would return false."
"javax.swing.text.Highlighter.addHighlight(int,int,javax.swing.text.Highlighter.HighlightPainter)",adds a highlight to the view.
"javax.swing.text.Highlighter.changeHighlight(java.lang.Object,int,int)",changes the given highlight to span a different portion of the document.
javax.swing.text.Highlighter.deinstall(javax.swing.text.JTextComponent),called when the ui is being removed from the interface of a jtextcomponent.
javax.swing.text.Highlighter.getHighlights(),fetches the current list of highlights.
javax.swing.text.Highlighter.install(javax.swing.text.JTextComponent),called when the ui is being installed into the interface of a jtextcomponent.
javax.swing.text.Highlighter.paint(java.awt.Graphics),renders the highlights.
javax.swing.text.Highlighter.removeAllHighlights(),removes all highlights this highlighter is responsible for.
javax.swing.text.Highlighter.removeHighlight(java.lang.Object),removes a highlight from the view.
javax.swing.text.Highlighter.Highlight.getEndOffset(),gets the ending model offset for the highlight.
javax.swing.text.Highlighter.Highlight.getPainter(),gets the painter for the highlighter.
javax.swing.text.Highlighter.Highlight.getStartOffset(),gets the starting model offset for the highlight.
"javax.swing.text.Highlighter.HighlightPainter.paint(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent)",renders the highlight.
"javax.swing.text.Keymap.addActionForKeyStroke(javax.swing.KeyStroke,javax.swing.Action)",adds a binding to the keymap.
javax.swing.text.Keymap.getAction(javax.swing.KeyStroke),fetches the action appropriate for the given symbolic event sequence.
javax.swing.text.Keymap.getBoundActions(),fetches all of the actions defined in this keymap.
javax.swing.text.Keymap.getBoundKeyStrokes(),fetches all of the keystrokes in this map that are bound to some action.
javax.swing.text.Keymap.getDefaultAction(),fetches the default action to fire if a key is typed (i.
javax.swing.text.Keymap.getKeyStrokesForAction(javax.swing.Action),fetches the keystrokes that will result in the given action.
javax.swing.text.Keymap.getName(),fetches the name of the set of key-bindings.
javax.swing.text.Keymap.getResolveParent(),fetches the parent keymap used to resolve key-bindings.
javax.swing.text.Keymap.isLocallyDefined(javax.swing.KeyStroke),determines if the given key sequence is locally defined.
javax.swing.text.Keymap.removeBindings(),removes all bindings from the keymap.
javax.swing.text.Keymap.removeKeyStrokeBinding(javax.swing.KeyStroke),removes a binding from the keymap.
javax.swing.text.Keymap.setDefaultAction(javax.swing.Action),set the default action to fire if a key is typed.
javax.swing.text.Keymap.setResolveParent(javax.swing.text.Keymap),"sets the parent keymap, which will be used to resolve key-bindings."
"javax.swing.text.MutableAttributeSet.addAttribute(java.lang.Object,java.lang.Object)",creates a new attribute set similar to this one except that it contains an attribute with the given name and value.
javax.swing.text.MutableAttributeSet.addAttributes(javax.swing.text.AttributeSet),creates a new attribute set similar to this one except that it contains the given attributes and values.
javax.swing.text.MutableAttributeSet.removeAttribute(java.lang.Object),removes an attribute with the given name.
javax.swing.text.MutableAttributeSet.removeAttributes(java.util.Enumeration<?>),removes an attribute set with the given names.
javax.swing.text.MutableAttributeSet.removeAttributes(javax.swing.text.AttributeSet),removes a set of attributes with the given name.
javax.swing.text.MutableAttributeSet.setResolveParent(javax.swing.text.AttributeSet),sets the resolving parent.
javax.swing.text.Position.getOffset(),fetches the current offset within the document.
javax.swing.text.Style.addChangeListener(javax.swing.event.ChangeListener),adds a listener to track whenever an attribute has been changed.
javax.swing.text.Style.getName(),fetches the name of the style.
javax.swing.text.Style.removeChangeListener(javax.swing.event.ChangeListener),removes a listener that was tracking attribute changes.
"javax.swing.text.StyledDocument.addStyle(java.lang.String,javax.swing.text.Style)",adds a new style into the logical style hierarchy.
javax.swing.text.StyledDocument.getBackground(javax.swing.text.AttributeSet),takes a set of attributes and turn it into a background color specification.
javax.swing.text.StyledDocument.getCharacterElement(int),gets the element that represents the character that is at the given offset within the document.
javax.swing.text.StyledDocument.getFont(javax.swing.text.AttributeSet),takes a set of attributes and turn it into a font specification.
javax.swing.text.StyledDocument.getForeground(javax.swing.text.AttributeSet),takes a set of attributes and turn it into a foreground color specification.
javax.swing.text.StyledDocument.getLogicalStyle(int),gets a logical style for a given position in a paragraph.
javax.swing.text.StyledDocument.getParagraphElement(int),gets the element that represents the paragraph that encloses the given offset within the document.
javax.swing.text.StyledDocument.getStyle(java.lang.String),fetches a named style previously added.
javax.swing.text.StyledDocument.removeStyle(java.lang.String),removes a named style previously added to the document.
"javax.swing.text.StyledDocument.setCharacterAttributes(int,int,javax.swing.text.AttributeSet,boolean)",changes the content element attributes used for the given range of existing content in the document.
"javax.swing.text.StyledDocument.setLogicalStyle(int,javax.swing.text.Style)",sets the logical style to use for the paragraph at the given position.
"javax.swing.text.StyledDocument.setParagraphAttributes(int,int,javax.swing.text.AttributeSet,boolean)",sets paragraph attributes.
"javax.swing.text.TabableView.getPartialSpan(int,int)",determines the span along the same axis as tab expansion for a portion of the view.
"javax.swing.text.TabableView.getTabbedSpan(float,javax.swing.text.TabExpander)",determines the desired span when using the given tab expansion implementation.
"javax.swing.text.TabExpander.nextTabStop(float,int)",returns the next tab stop position given a reference position.
javax.swing.text.ViewFactory.create(javax.swing.text.Element),creates a view from the given structural element of a document.
javax.swing.text.AbstractDocument.addDocumentListener(javax.swing.event.DocumentListener),adds a document listener for notification of any changes.
javax.swing.text.AbstractDocument.addUndoableEditListener(javax.swing.event.UndoableEditListener),adds an undo listener for notification of any changes.
"javax.swing.text.AbstractDocument.createBranchElement(javax.swing.text.Element,javax.swing.text.AttributeSet)","creates a document branch element, that can contain other elements."
"javax.swing.text.AbstractDocument.createLeafElement(javax.swing.text.Element,javax.swing.text.AttributeSet,int,int)",creates a document leaf element.
javax.swing.text.AbstractDocument.createPosition(int),returns a position that will track change as the document is altered.
javax.swing.text.AbstractDocument.dump(java.io.PrintStream),gives a diagnostic dump.
javax.swing.text.AbstractDocument.fireChangedUpdate(javax.swing.event.DocumentEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.text.AbstractDocument.fireInsertUpdate(javax.swing.event.DocumentEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.text.AbstractDocument.fireRemoveUpdate(javax.swing.event.DocumentEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.text.AbstractDocument.fireUndoableEditUpdate(javax.swing.event.UndoableEditEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.text.AbstractDocument.getAsynchronousLoadPriority(),gets the asynchronous loading priority.
javax.swing.text.AbstractDocument.getAttributeContext(),fetches the context for managing attributes.
javax.swing.text.AbstractDocument.getBidiRootElement(),returns the root element of the bidirectional structure for this document.
javax.swing.text.AbstractDocument.getContent(),gets the content for the document.
javax.swing.text.AbstractDocument.getCurrentWriter(),fetches the current writing thread if there is one.
javax.swing.text.AbstractDocument.getDefaultRootElement(),returns the root element that views should be based upon unless some other mechanism for assigning views to element structures is provided.
javax.swing.text.AbstractDocument.getDocumentFilter(),returns the documentfilter that is responsible for filtering of insertion/removal.
javax.swing.text.AbstractDocument.getDocumentListeners(),returns an array of all the document listeners registered on this document.
javax.swing.text.AbstractDocument.getDocumentProperties(),supports managing a set of properties.
javax.swing.text.AbstractDocument.getEndPosition(),returns a position that represents the end of the document.
javax.swing.text.AbstractDocument.getLength(),returns the length of the data.
javax.swing.text.AbstractDocument.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this document.
javax.swing.text.AbstractDocument.getParagraphElement(int),get the paragraph element containing the given position.
javax.swing.text.AbstractDocument.getProperty(java.lang.Object),a convenience method for looking up a property value.
javax.swing.text.AbstractDocument.getRootElements(),gets all root elements defined.
javax.swing.text.AbstractDocument.getStartPosition(),returns a position that represents the start of the document.
"javax.swing.text.AbstractDocument.getText(int,int)",gets a sequence of text from the document.
"javax.swing.text.AbstractDocument.getText(int,int,javax.swing.text.Segment)",fetches the text contained within the given portion of the document.
javax.swing.text.AbstractDocument.getUndoableEditListeners(),returns an array of all the undoable edit listeners registered on this document.
"javax.swing.text.AbstractDocument.insertString(int,java.lang.String,javax.swing.text.AttributeSet)",inserts some content into the document.
"javax.swing.text.AbstractDocument.insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent,javax.swing.text.AttributeSet)",updates document structure as a result of text insertion.
javax.swing.text.AbstractDocument.postRemoveUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent),updates any document structure as a result of text removal.
"javax.swing.text.AbstractDocument.putProperty(java.lang.Object,java.lang.Object)",a convenience method for storing up a property value.
javax.swing.text.AbstractDocument.readLock(),acquires a lock to begin reading some state from the document.
javax.swing.text.AbstractDocument.readUnlock(),does a read unlock.
"javax.swing.text.AbstractDocument.remove(int,int)",removes some content from the document.
javax.swing.text.AbstractDocument.removeDocumentListener(javax.swing.event.DocumentListener),removes a document listener.
javax.swing.text.AbstractDocument.removeUndoableEditListener(javax.swing.event.UndoableEditListener),removes an undo listener.
javax.swing.text.AbstractDocument.removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent),updates any document structure as a result of text removal.
javax.swing.text.AbstractDocument.render(java.lang.Runnable),"this allows the model to be safely rendered in the presence of currency, if the model supports being updated asynchronously."
"javax.swing.text.AbstractDocument.replace(int,int,java.lang.String,javax.swing.text.AttributeSet)","deletes the region of text from offset to offset + length, and replaces it with text."
javax.swing.text.AbstractDocument.setAsynchronousLoadPriority(int),sets the asynchronous loading priority.
javax.swing.text.AbstractDocument.setDocumentFilter(javax.swing.text.DocumentFilter),sets the documentfilter.
"javax.swing.text.AbstractDocument.setDocumentProperties(,java.lang.Object>)",replaces the document properties dictionary for this document.
javax.swing.text.AbstractDocument.writeLock(),acquires a lock to begin mutating the document this lock protects.
javax.swing.text.AbstractDocument.writeUnlock(),releases a write lock previously obtained via writelock.
javax.swing.text.AbstractDocument.ElementEdit.getChildrenAdded(),gets a list of children that were added.
javax.swing.text.AbstractDocument.ElementEdit.getChildrenRemoved(),gets a list of children that were removed.
javax.swing.text.AbstractDocument.ElementEdit.getElement(),returns the underlying element.
javax.swing.text.AbstractDocument.ElementEdit.getIndex(),returns the index into the list of elements.
javax.swing.text.AbstractDocument.ElementEdit.redo(),redoes a change.
javax.swing.text.AbstractDocument.ElementEdit.undo(),undoes a change.
javax.swing.text.AbstractWriter.decrIndent(),decrements the indent level.
javax.swing.text.AbstractWriter.getCanWrapLines(),returns whether or not the lines can be wrapped.
javax.swing.text.AbstractWriter.getCurrentLineLength(),returns the current line length.
javax.swing.text.AbstractWriter.getDocument(),fetches the document.
javax.swing.text.AbstractWriter.getElementIterator(),fetches the elementiterator.
javax.swing.text.AbstractWriter.getEndOffset(),returns the last offset to be output.
javax.swing.text.AbstractWriter.getIndentLevel(),returns the current indentation level.
javax.swing.text.AbstractWriter.getIndentSpace(),returns the amount of space to indent.
javax.swing.text.AbstractWriter.getLineLength(),returns the maximum line length.
javax.swing.text.AbstractWriter.getLineSeparator(),returns the string used to represent newlines.
javax.swing.text.AbstractWriter.getStartOffset(),returns the first offset to be output.
javax.swing.text.AbstractWriter.getText(javax.swing.text.Element),returns the text associated with the element.
javax.swing.text.AbstractWriter.getWriter(),returns the writer that is used to output the content.
javax.swing.text.AbstractWriter.incrIndent(),increments the indent level.
javax.swing.text.AbstractWriter.indent(),does indentation.
javax.swing.text.AbstractWriter.inRange(javax.swing.text.Element),this method determines whether the current element is in the range specified.
javax.swing.text.AbstractWriter.isLineEmpty(),returns true if the current line should be considered empty.
"javax.swing.text.AbstractWriter.output(char[],int,int)",the last stop in writing out content.
javax.swing.text.AbstractWriter.setCanWrapLines(boolean),sets whether or not lines can be wrapped.
javax.swing.text.AbstractWriter.setCurrentLineLength(int),sets the current line length.
javax.swing.text.AbstractWriter.setIndentSpace(int),enables subclasses to specify how many spaces an indent maps to.
javax.swing.text.AbstractWriter.setLineLength(int),enables subclasses to set the number of characters they want written per line.
javax.swing.text.AbstractWriter.setLineSeparator(java.lang.String),sets the string used to represent newlines.
javax.swing.text.AbstractWriter.text(javax.swing.text.Element),writes out text.
javax.swing.text.AbstractWriter.write(),this abstract method needs to be implemented by subclasses.
javax.swing.text.AbstractWriter.write(char),writes out a character.
javax.swing.text.AbstractWriter.write(java.lang.String),writes out a string.
"javax.swing.text.AbstractWriter.write(char[],int,int)",all write methods call into this one.
javax.swing.text.AbstractWriter.writeAttributes(javax.swing.text.AttributeSet),"writes out the set of attributes as "" <name>=<value>"" pairs."
javax.swing.text.AbstractWriter.writeLineSeparator(),writes the line separator.
javax.swing.text.AsyncBoxView.createChildState(javax.swing.text.View),new childstate records are created through this method to allow subclasses the extend the childstate records to do/hold more.
javax.swing.text.AsyncBoxView.flushRequirementChanges(),publish the changes in preferences upward to the parent view.
javax.swing.text.AsyncBoxView.getBottomInset(),get the bottom part of the margin around the view.
"javax.swing.text.AsyncBoxView.getChildAllocation(int,java.awt.Shape)",fetches the allocation for the given child view.
javax.swing.text.AsyncBoxView.getChildState(int),fetch the object representing the layout state of of the child at the given index.
javax.swing.text.AsyncBoxView.getEstimatedMajorSpan(),is the major span currently estimated?.
javax.swing.text.AsyncBoxView.getInsetSpan(int),fetch the span along an axis that is taken up by the insets.
javax.swing.text.AsyncBoxView.getLayoutQueue(),fetch the queue to use for layout.
javax.swing.text.AsyncBoxView.getLeftInset(),get the left part of the margin around the view.
javax.swing.text.AsyncBoxView.getMajorAxis(),fetch the major axis (the axis the children are tiled along).
javax.swing.text.AsyncBoxView.getMaximumSpan(int),determines the maximum span for this view along an axis.
javax.swing.text.AsyncBoxView.getMinimumSpan(int),determines the minimum span for this view along an axis.
javax.swing.text.AsyncBoxView.getMinorAxis(),fetch the minor axis (the axis orthogonal to the tiled axis).
"javax.swing.text.AsyncBoxView.getNextVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])",provides a way to determine the next visually represented model location that one might place a caret.
javax.swing.text.AsyncBoxView.getPreferredSpan(int),determines the preferred span for this view along an axis.
javax.swing.text.AsyncBoxView.getRightInset(),get the right part of the margin around the view.
javax.swing.text.AsyncBoxView.getTopInset(),get the top part of the margin around the view.
javax.swing.text.AsyncBoxView.getView(int),gets the nth child view.
javax.swing.text.AsyncBoxView.getViewCount(),returns the number of views in this view.
"javax.swing.text.AsyncBoxView.getViewIndex(int,javax.swing.text.Position.Bias)",returns the child view index representing the given position in the model.
"javax.swing.text.AsyncBoxView.getViewIndexAtPosition(int,javax.swing.text.Position.Bias)",fetches the child view index representing the given position in the model.
javax.swing.text.AsyncBoxView.loadChildren(javax.swing.text.ViewFactory),loads all of the children to initialize the view.
"javax.swing.text.AsyncBoxView.majorRequirementChange(javax.swing.text.AsyncBoxView.ChildState,float)",requirements changed along the major axis.
javax.swing.text.AsyncBoxView.minorRequirementChange(javax.swing.text.AsyncBoxView.ChildState),requirements changed along the minor axis.
"javax.swing.text.AsyncBoxView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)",provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.
"javax.swing.text.AsyncBoxView.paint(java.awt.Graphics,java.awt.Shape)",render the view using the given allocation and rendering surface.
"javax.swing.text.AsyncBoxView.preferenceChanged(javax.swing.text.View,boolean,boolean)",child views can call this on the parent to indicate that the preference has changed and should be reconsidered for layout.
"javax.swing.text.AsyncBoxView.replace(int,int,javax.swing.text.View[])","calls the superclass to update the child views, and updates the status records for the children."
javax.swing.text.AsyncBoxView.setBottomInset(float),set the bottom part of the margin around the view.
javax.swing.text.AsyncBoxView.setEstimatedMajorSpan(boolean),set the estimatedmajorspan property that determines if the major span should be treated as being estimated.
javax.swing.text.AsyncBoxView.setLeftInset(float),set the left part of the margin around the view.
javax.swing.text.AsyncBoxView.setParent(javax.swing.text.View),sets the parent of the view.
javax.swing.text.AsyncBoxView.setRightInset(float),set the right part of the margin around the view.
"javax.swing.text.AsyncBoxView.setSize(float,float)",sets the size of the view.
javax.swing.text.AsyncBoxView.setTopInset(float),set the top part of the margin around the view.
"javax.swing.text.AsyncBoxView.updateLayout(javax.swing.event.DocumentEvent.ElementChange,javax.swing.event.DocumentEvent,java.awt.Shape)",update the layout in response to receiving notification of change from the model.
"javax.swing.text.AsyncBoxView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
"javax.swing.text.BoxView.baselineLayout(int,int,int[],int[])","computes the location and extent of each child view in this boxview given the targetspan, which is the width (or height) of the region we have to work with."
"javax.swing.text.BoxView.baselineRequirements(int,javax.swing.SizeRequirements)",calculates the size requirements for this boxview by examining the size of each child view.
"javax.swing.text.BoxView.calculateMajorAxisRequirements(int,javax.swing.SizeRequirements)",calculates the size requirements for the major axis axis.
"javax.swing.text.BoxView.calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)",calculates the size requirements for the minor axis axis.
"javax.swing.text.BoxView.childAllocation(int,java.awt.Rectangle)",allocates a region for a child view.
"javax.swing.text.BoxView.flipEastAndWestAtEnds(int,javax.swing.text.Position.Bias)",determines in which direction the next view lays.
"javax.swing.text.BoxView.forwardUpdate(javax.swing.event.DocumentEvent.ElementChange,javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",forwards the given documentevent to the child views that need to be notified of the change to the model.
javax.swing.text.BoxView.getAlignment(int),determines the desired alignment for this view along an axis.
javax.swing.text.BoxView.getAxis(),fetches the tile axis property.
"javax.swing.text.BoxView.getChildAllocation(int,java.awt.Shape)",fetches the allocation for the given child view.
javax.swing.text.BoxView.getHeight(),returns the current height of the box.
javax.swing.text.BoxView.getMaximumSpan(int),determines the maximum span for this view along an axis.
javax.swing.text.BoxView.getMinimumSpan(int),determines the minimum span for this view along an axis.
"javax.swing.text.BoxView.getOffset(int,int)",fetches the offset of a particular child's current layout.
javax.swing.text.BoxView.getPreferredSpan(int),determines the preferred span for this view along an axis.
javax.swing.text.BoxView.getResizeWeight(int),gets the resize weight.
"javax.swing.text.BoxView.getSpan(int,int)",fetches the span of a particular child's current layout.
"javax.swing.text.BoxView.getViewAtPoint(int,int,java.awt.Rectangle)",fetches the child view at the given coordinates.
javax.swing.text.BoxView.getWidth(),returns the current width of the box.
"javax.swing.text.BoxView.isAfter(int,int,java.awt.Rectangle)",determines if a point falls after an allocated region.
javax.swing.text.BoxView.isAllocationValid(),are the allocations for the children still valid?.
"javax.swing.text.BoxView.isBefore(int,int,java.awt.Rectangle)",determines if a point falls before an allocated region.
javax.swing.text.BoxView.isLayoutValid(int),determines if the layout is valid along the given axis.
"javax.swing.text.BoxView.layout(int,int)",perform layout on the box.
javax.swing.text.BoxView.layoutChanged(int),invalidates the layout along an axis.
"javax.swing.text.BoxView.layoutMajorAxis(int,int,int[],int[])",performs layout for the major axis of the box (i.
"javax.swing.text.BoxView.layoutMinorAxis(int,int,int[],int[])",performs layout for the minor axis of the box (i.
"javax.swing.text.BoxView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)",provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.
"javax.swing.text.BoxView.paint(java.awt.Graphics,java.awt.Shape)",renders the boxview using the given rendering surface and area on that surface.
"javax.swing.text.BoxView.paintChild(java.awt.Graphics,java.awt.Rectangle,int)",paints a child.
"javax.swing.text.BoxView.preferenceChanged(javax.swing.text.View,boolean,boolean)",this is called by a child to indicate its preferred span has changed.
"javax.swing.text.BoxView.replace(int,int,javax.swing.text.View[])",invalidates the layout and resizes the cache of requests/allocations.
javax.swing.text.BoxView.setAxis(int),sets the tile axis property.
"javax.swing.text.BoxView.setSize(float,float)",sets the size of the view.
"javax.swing.text.BoxView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
javax.swing.text.ComponentView.createComponent(),create the component that is associated with this view.
javax.swing.text.ComponentView.getAlignment(int),determines the desired alignment for this view along an axis.
javax.swing.text.ComponentView.getComponent(),fetch the component associated with the view.
javax.swing.text.ComponentView.getMaximumSpan(int),determines the maximum span for this view along an axis.
javax.swing.text.ComponentView.getMinimumSpan(int),determines the minimum span for this view along an axis.
javax.swing.text.ComponentView.getPreferredSpan(int),determines the preferred span for this view along an axis.
"javax.swing.text.ComponentView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)",provides a mapping from the coordinate space of the model to that of the view.
"javax.swing.text.ComponentView.paint(java.awt.Graphics,java.awt.Shape)",the real paint behavior occurs naturally from the association that the component has with its parent container (the same container hosting this view).
javax.swing.text.ComponentView.setParent(javax.swing.text.View),sets the parent for a child view.
"javax.swing.text.ComponentView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
"javax.swing.text.CompositeView.childAllocation(int,java.awt.Rectangle)",returns the allocation for a given child.
"javax.swing.text.CompositeView.flipEastAndWestAtEnds(int,javax.swing.text.Position.Bias)",determines in which direction the next view lays.
javax.swing.text.CompositeView.getBottomInset(),gets the bottom inset.
"javax.swing.text.CompositeView.getChildAllocation(int,java.awt.Shape)",fetches the allocation for the given child view to render into.
javax.swing.text.CompositeView.getInsideAllocation(java.awt.Shape),translates the immutable allocation given to the view to a mutable allocation that represents the interior allocation (i.
javax.swing.text.CompositeView.getLeftInset(),gets the left inset.
"javax.swing.text.CompositeView.getNextEastWestVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])","returns the next visual position for the cursor, in either the east or west direction."
"javax.swing.text.CompositeView.getNextNorthSouthVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])","returns the next visual position for the cursor, in either the north or south direction."
"javax.swing.text.CompositeView.getNextVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])",provides a way to determine the next visually represented model location that one might place a caret.
javax.swing.text.CompositeView.getRightInset(),gets the right inset.
javax.swing.text.CompositeView.getTopInset(),gets the top inset.
javax.swing.text.CompositeView.getView(int),returns the n-th view in this container.
"javax.swing.text.CompositeView.getViewAtPoint(int,int,java.awt.Rectangle)",fetches the child view at the given coordinates.
"javax.swing.text.CompositeView.getViewAtPosition(int,java.awt.Rectangle)",fetches the child view that represents the given position in the model.
javax.swing.text.CompositeView.getViewCount(),returns the number of child views of this view.
"javax.swing.text.CompositeView.getViewIndex(int,javax.swing.text.Position.Bias)",returns the child view index representing the given position in the model.
javax.swing.text.CompositeView.getViewIndexAtPosition(int),fetches the child view index representing the given position in the model.
"javax.swing.text.CompositeView.isAfter(int,int,java.awt.Rectangle)",tests whether a point lies after the rectangle range.
"javax.swing.text.CompositeView.isBefore(int,int,java.awt.Rectangle)",tests whether a point lies before the rectangle range.
javax.swing.text.CompositeView.loadChildren(javax.swing.text.ViewFactory),loads all of the children to initialize the view.
"javax.swing.text.CompositeView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)",provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.
"javax.swing.text.CompositeView.modelToView(int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias,java.awt.Shape)",provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.
"javax.swing.text.CompositeView.replace(int,int,javax.swing.text.View[])",replaces child views.
"javax.swing.text.CompositeView.setInsets(short,short,short,short)",sets the insets for the view.
javax.swing.text.CompositeView.setParagraphInsets(javax.swing.text.AttributeSet),sets the insets from the paragraph attributes specified in the given attributes.
javax.swing.text.CompositeView.setParent(javax.swing.text.View),sets the parent of the view.
"javax.swing.text.CompositeView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
javax.swing.text.DateFormatter.setFormat(java.text.DateFormat),sets the format that dictates the legal values that can be edited and displayed.
javax.swing.text.DefaultCaret.addChangeListener(javax.swing.event.ChangeListener),adds a listener to track whenever the caret position has been changed.
javax.swing.text.DefaultCaret.adjustVisibility(java.awt.Rectangle),scrolls the associated view (if necessary) to make the caret visible.
javax.swing.text.DefaultCaret.damage(java.awt.Rectangle),damages the area surrounding the caret to cause it to be repainted in a new location.
javax.swing.text.DefaultCaret.deinstall(javax.swing.text.JTextComponent),called when the ui is being removed from the interface of a jtextcomponent.
javax.swing.text.DefaultCaret.equals(java.lang.Object),compares this object to the specified object.
javax.swing.text.DefaultCaret.fireStateChanged(),notifies all listeners that have registered interest for notification on this event type.
javax.swing.text.DefaultCaret.focusGained(java.awt.event.FocusEvent),called when the component containing the caret gains focus.
javax.swing.text.DefaultCaret.focusLost(java.awt.event.FocusEvent),called when the component containing the caret loses focus.
javax.swing.text.DefaultCaret.getBlinkRate(),gets the caret blink rate.
javax.swing.text.DefaultCaret.getChangeListeners(),returns an array of all the change listeners registered on this caret.
javax.swing.text.DefaultCaret.getComponent(),gets the text editor component that this caret is is bound to.
javax.swing.text.DefaultCaret.getDot(),fetches the current position of the caret.
javax.swing.text.DefaultCaret.getDotBias(),returns the bias of the caret position.
javax.swing.text.DefaultCaret.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this caret.
javax.swing.text.DefaultCaret.getMagicCaretPosition(),gets the saved caret position.
javax.swing.text.DefaultCaret.getMark(),fetches the current position of the mark.
javax.swing.text.DefaultCaret.getMarkBias(),returns the bias of the mark.
javax.swing.text.DefaultCaret.getSelectionPainter(),gets the painter for the highlighter.
javax.swing.text.DefaultCaret.getUpdatePolicy(),gets the caret movement policy on document updates.
javax.swing.text.DefaultCaret.install(javax.swing.text.JTextComponent),called when the ui is being installed into the interface of a jtextcomponent.
javax.swing.text.DefaultCaret.isActive(),determines if the caret is currently active.
javax.swing.text.DefaultCaret.isSelectionVisible(),checks whether the current selection is visible.
javax.swing.text.DefaultCaret.isVisible(),indicates whether or not the caret is currently visible.
javax.swing.text.DefaultCaret.mouseClicked(java.awt.event.MouseEvent),called when the mouse is clicked.
javax.swing.text.DefaultCaret.mouseDragged(java.awt.event.MouseEvent),moves the caret position according to the mouse pointer's current location.
javax.swing.text.DefaultCaret.mouseEntered(java.awt.event.MouseEvent),called when the mouse enters a region.
javax.swing.text.DefaultCaret.mouseExited(java.awt.event.MouseEvent),called when the mouse exits a region.
javax.swing.text.DefaultCaret.mouseMoved(java.awt.event.MouseEvent),called when the mouse is moved.
javax.swing.text.DefaultCaret.mousePressed(java.awt.event.MouseEvent),"if button 1 is pressed, this is implemented to request focus on the associated text component, and to set the caret position."
javax.swing.text.DefaultCaret.mouseReleased(java.awt.event.MouseEvent),called when the mouse is released.
javax.swing.text.DefaultCaret.moveCaret(java.awt.event.MouseEvent),"tries to move the position of the caret from the coordinates of a mouse event, using viewtomodel()."
javax.swing.text.DefaultCaret.moveDot(int),"moves the caret position to the specified position, with a forward bias."
"javax.swing.text.DefaultCaret.moveDot(int,javax.swing.text.Position.Bias)","moves the caret position to the specified position, with the specified bias."
javax.swing.text.DefaultCaret.paint(java.awt.Graphics),renders the caret as a vertical line.
javax.swing.text.DefaultCaret.positionCaret(java.awt.event.MouseEvent),"tries to set the position of the caret from the coordinates of a mouse event, using viewtomodel()."
javax.swing.text.DefaultCaret.removeChangeListener(javax.swing.event.ChangeListener),removes a listener that was tracking caret position changes.
javax.swing.text.DefaultCaret.repaint(),cause the caret to be painted.
javax.swing.text.DefaultCaret.setBlinkRate(int),sets the caret blink rate.
javax.swing.text.DefaultCaret.setDot(int),"sets the caret position and mark to the specified position, with a forward bias."
"javax.swing.text.DefaultCaret.setDot(int,javax.swing.text.Position.Bias)","sets the caret position and mark to the specified position, with the specified bias."
javax.swing.text.DefaultCaret.setMagicCaretPosition(java.awt.Point),saves the current caret position.
javax.swing.text.DefaultCaret.setSelectionVisible(boolean),changes the selection visibility.
javax.swing.text.DefaultCaret.setUpdatePolicy(int),sets the caret movement policy on the document updates.
javax.swing.text.DefaultCaret.setVisible(boolean),"sets the caret visibility, and repaints the caret."
javax.swing.text.DefaultEditorKit.createCaret(),fetches a caret that can navigate through views produced by the associated viewfactory.
javax.swing.text.DefaultEditorKit.createDefaultDocument(),creates an uninitialized text storage model (plaindocument) that is appropriate for this type of editor.
javax.swing.text.DefaultEditorKit.getActions(),fetches the set of commands that can be used on a text component that is using a model and view produced by this kit.
javax.swing.text.DefaultEditorKit.getContentType(),gets the mime type of the data that this kit represents support for.
javax.swing.text.DefaultEditorKit.getViewFactory(),fetches a factory that is suitable for producing views of any models that are produced by this kit.
"javax.swing.text.DefaultEditorKit.read(java.io.InputStream,javax.swing.text.Document,int)",inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler.
"javax.swing.text.DefaultEditorKit.read(java.io.Reader,javax.swing.text.Document,int)","inserts content from the given stream, which will be treated as plain text."
"javax.swing.text.DefaultEditorKit.write(java.io.OutputStream,javax.swing.text.Document,int,int)",writes content from a document to the given stream in a format appropriate for this kind of content handler.
"javax.swing.text.DefaultEditorKit.write(java.io.Writer,javax.swing.text.Document,int,int)",writes content from a document to the given stream as plain text.
javax.swing.text.DefaultEditorKit.BeepAction.actionPerformed(java.awt.event.ActionEvent),the operation to perform when this action is triggered.
javax.swing.text.DefaultEditorKit.CopyAction.actionPerformed(java.awt.event.ActionEvent),the operation to perform when this action is triggered.
javax.swing.text.DefaultEditorKit.CutAction.actionPerformed(java.awt.event.ActionEvent),the operation to perform when this action is triggered.
javax.swing.text.DefaultEditorKit.DefaultKeyTypedAction.actionPerformed(java.awt.event.ActionEvent),the operation to perform when this action is triggered.
javax.swing.text.DefaultEditorKit.InsertBreakAction.actionPerformed(java.awt.event.ActionEvent),the operation to perform when this action is triggered.
javax.swing.text.DefaultEditorKit.InsertContentAction.actionPerformed(java.awt.event.ActionEvent),the operation to perform when this action is triggered.
javax.swing.text.DefaultEditorKit.InsertTabAction.actionPerformed(java.awt.event.ActionEvent),the operation to perform when this action is triggered.
javax.swing.text.DefaultEditorKit.PasteAction.actionPerformed(java.awt.event.ActionEvent),the operation to perform when this action is triggered.
javax.swing.text.DefaultFormatter.clone(),creates a copy of the defaultformatter.
javax.swing.text.DefaultFormatter.getAllowsInvalid(),returns whether or not the value being edited is allowed to be invalid for a length of time.
javax.swing.text.DefaultFormatter.getCommitsOnValidEdit(),returns when edits are published back to the jformattedtextfield.
javax.swing.text.DefaultFormatter.getDocumentFilter(),returns the documentfilter used to restrict the characters that can be input into the jformattedtextfield.
javax.swing.text.DefaultFormatter.getNavigationFilter(),returns the navigationfilter used to restrict where the cursor can be placed.
javax.swing.text.DefaultFormatter.getOverwriteMode(),returns the behavior when inserting characters.
javax.swing.text.DefaultFormatter.getValueClass(),returns that class that is used to create new objects.
javax.swing.text.DefaultFormatter.install(javax.swing.JFormattedTextField),installs the defaultformatter onto a particular jformattedtextfield.
javax.swing.text.DefaultFormatter.setAllowsInvalid(boolean),"sets whether or not the value being edited is allowed to be invalid for a length of time (that is, stringtovalue throws a parseexception)."
javax.swing.text.DefaultFormatter.setCommitsOnValidEdit(boolean),sets when edits are published back to the jformattedtextfield.
javax.swing.text.DefaultFormatter.setOverwriteMode(boolean),configures the behavior when inserting characters.
javax.swing.text.DefaultFormatter.setValueClass(java.lang.Class<?>),sets that class that is used to create new objects.
javax.swing.text.DefaultFormatter.stringToValue(java.lang.String),converts the passed in string into an instance of getvalueclass by way of the constructor that takes a string argument.
javax.swing.text.DefaultFormatter.valueToString(java.lang.Object),converts the passed in object into a string by way of the tostring method.
javax.swing.text.DefaultFormatterFactory.getDefaultFormatter(),returns the jformattedtextfield.
javax.swing.text.DefaultFormatterFactory.getDisplayFormatter(),returns the jformattedtextfield.
javax.swing.text.DefaultFormatterFactory.getEditFormatter(),returns the jformattedtextfield.
javax.swing.text.DefaultFormatterFactory.getFormatter(javax.swing.JFormattedTextField),"returns either the default formatter, display formatter, editor formatter or null formatter based on the state of the jformattedtextfield."
javax.swing.text.DefaultFormatterFactory.getNullFormatter(),returns the formatter to use if the value is null.
javax.swing.text.DefaultFormatterFactory.setDefaultFormatter(javax.swing.JFormattedTextField.AbstractFormatter),sets the jformattedtextfield.
javax.swing.text.DefaultFormatterFactory.setDisplayFormatter(javax.swing.JFormattedTextField.AbstractFormatter),sets the jformattedtextfield.
javax.swing.text.DefaultFormatterFactory.setEditFormatter(javax.swing.JFormattedTextField.AbstractFormatter),sets the jformattedtextfield.
javax.swing.text.DefaultFormatterFactory.setNullFormatter(javax.swing.JFormattedTextField.AbstractFormatter),sets the formatter to use if the value of the jformattedtextfield is null.
"javax.swing.text.DefaultHighlighter.addHighlight(int,int,javax.swing.text.Highlighter.HighlightPainter)",adds a highlight to the view.
"javax.swing.text.DefaultHighlighter.changeHighlight(java.lang.Object,int,int)",changes a highlight.
javax.swing.text.DefaultHighlighter.deinstall(javax.swing.text.JTextComponent),called when the ui is being removed from the interface of a jtextcomponent.
javax.swing.text.DefaultHighlighter.getHighlights(),makes a copy of the highlights.
javax.swing.text.DefaultHighlighter.install(javax.swing.text.JTextComponent),called when the ui is being installed into the interface of a jtextcomponent.
javax.swing.text.DefaultHighlighter.paint(java.awt.Graphics),renders the highlights.
"javax.swing.text.DefaultHighlighter.paintLayeredHighlights(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent,javax.swing.text.View)",when leaf views (such as labelview) are rendering they should call into this method.
javax.swing.text.DefaultHighlighter.removeAllHighlights(),removes all highlights.
javax.swing.text.DefaultHighlighter.removeHighlight(java.lang.Object),removes a highlight from the view.
javax.swing.text.DefaultHighlighter.setDrawsLayeredHighlights(boolean),"if true, highlights are drawn as the views draw the text."
javax.swing.text.DefaultHighlighter.DefaultHighlightPainter.getColor(),returns the color of the highlight.
"javax.swing.text.DefaultHighlighter.DefaultHighlightPainter.paint(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent)",paints a highlight.
"javax.swing.text.DefaultHighlighter.DefaultHighlightPainter.paintLayer(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent,javax.swing.text.View)",paints a portion of a highlight.
javax.swing.text.DefaultStyledDocument.addDocumentListener(javax.swing.event.DocumentListener),adds a document listener for notification of any changes.
"javax.swing.text.DefaultStyledDocument.addStyle(java.lang.String,javax.swing.text.Style)",adds a new style into the logical style hierarchy.
javax.swing.text.DefaultStyledDocument.create(javax.swing.text.DefaultStyledDocument.ElementSpec[]),initialize the document to reflect the given element structure (i.
javax.swing.text.DefaultStyledDocument.createDefaultRoot(),creates the root element to be used to represent the default document structure.
javax.swing.text.DefaultStyledDocument.getBackground(javax.swing.text.AttributeSet),gets the background color from an attribute set.
javax.swing.text.DefaultStyledDocument.getCharacterElement(int),gets a character element based on a position.
javax.swing.text.DefaultStyledDocument.getDefaultRootElement(),gets the default root element.
javax.swing.text.DefaultStyledDocument.getFont(javax.swing.text.AttributeSet),gets the font from an attribute set.
javax.swing.text.DefaultStyledDocument.getForeground(javax.swing.text.AttributeSet),gets the foreground color from an attribute set.
javax.swing.text.DefaultStyledDocument.getLogicalStyle(int),fetches the logical style assigned to the paragraph represented by the given position.
javax.swing.text.DefaultStyledDocument.getParagraphElement(int),gets the paragraph element at the offset pos.
javax.swing.text.DefaultStyledDocument.getStyle(java.lang.String),fetches a named style previously added.
javax.swing.text.DefaultStyledDocument.getStyleNames(),fetches the list of of style names.
"javax.swing.text.DefaultStyledDocument.insert(int,javax.swing.text.DefaultStyledDocument.ElementSpec[])",inserts new elements in bulk.
"javax.swing.text.DefaultStyledDocument.insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent,javax.swing.text.AttributeSet)",updates document structure as a result of text insertion.
javax.swing.text.DefaultStyledDocument.removeDocumentListener(javax.swing.event.DocumentListener),removes a document listener.
javax.swing.text.DefaultStyledDocument.removeElement(javax.swing.text.Element),removes an element from this document.
javax.swing.text.DefaultStyledDocument.removeStyle(java.lang.String),removes a named style previously added to the document.
javax.swing.text.DefaultStyledDocument.removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent),updates document structure as a result of text removal.
"javax.swing.text.DefaultStyledDocument.setCharacterAttributes(int,int,javax.swing.text.AttributeSet,boolean)",sets attributes for some part of the document.
"javax.swing.text.DefaultStyledDocument.setLogicalStyle(int,javax.swing.text.Style)",sets the logical style to use for the paragraph at the given position.
"javax.swing.text.DefaultStyledDocument.setParagraphAttributes(int,int,javax.swing.text.AttributeSet,boolean)",sets attributes for a paragraph.
javax.swing.text.DefaultStyledDocument.styleChanged(javax.swing.text.Style),called when any of this document's styles have changed.
javax.swing.text.DefaultStyledDocument.AttributeUndoableEdit.redo(),redoes a change.
javax.swing.text.DefaultStyledDocument.AttributeUndoableEdit.undo(),undoes a change.
javax.swing.text.DefaultStyledDocument.ElementSpec.getArray(),gets the array of characters.
javax.swing.text.DefaultStyledDocument.ElementSpec.getAttributes(),gets the element attributes.
javax.swing.text.DefaultStyledDocument.ElementSpec.getDirection(),gets the direction.
javax.swing.text.DefaultStyledDocument.ElementSpec.getLength(),gets the length.
javax.swing.text.DefaultStyledDocument.ElementSpec.getOffset(),gets the starting offset.
javax.swing.text.DefaultStyledDocument.ElementSpec.getType(),gets the element type.
javax.swing.text.DefaultStyledDocument.ElementSpec.setDirection(short),sets the direction.
javax.swing.text.DefaultStyledDocument.ElementSpec.setType(short),sets the element type.
javax.swing.text.DefaultStyledDocument.ElementSpec.toString(),converts the element to a string.
"javax.swing.text.DocumentFilter.insertString(javax.swing.text.DocumentFilter.FilterBypass,int,java.lang.String,javax.swing.text.AttributeSet)",invoked prior to insertion of text into the specified document.
"javax.swing.text.DocumentFilter.remove(javax.swing.text.DocumentFilter.FilterBypass,int,int)",invoked prior to removal of the specified region in the specified document.
"javax.swing.text.DocumentFilter.replace(javax.swing.text.DocumentFilter.FilterBypass,int,int,java.lang.String,javax.swing.text.AttributeSet)",invoked prior to replacing a region of text in the specified document.
javax.swing.text.DocumentFilter.FilterBypass.getDocument(),returns the document the mutation is occurring on.
"javax.swing.text.DocumentFilter.FilterBypass.insertString(int,java.lang.String,javax.swing.text.AttributeSet)","inserts the specified text, bypassing the documentfilter."
"javax.swing.text.DocumentFilter.FilterBypass.remove(int,int)","removes the specified region of text, bypassing the documentfilter."
"javax.swing.text.DocumentFilter.FilterBypass.replace(int,int,java.lang.String,javax.swing.text.AttributeSet)","deletes the region of text from offset to offset + length, and replaces it with text."
javax.swing.text.EditorKit.clone(),creates a copy of the editor kit.
javax.swing.text.EditorKit.createCaret(),fetches a caret that can navigate through views produced by the associated viewfactory.
javax.swing.text.EditorKit.createDefaultDocument(),creates an uninitialized text storage model that is appropriate for this type of editor.
javax.swing.text.EditorKit.deinstall(javax.swing.JEditorPane),called when the kit is being removed from the jeditorpane.
javax.swing.text.EditorKit.getActions(),fetches the set of commands that can be used on a text component that is using a model and view produced by this kit.
javax.swing.text.EditorKit.getContentType(),gets the mime type of the data that this kit represents support for.
javax.swing.text.EditorKit.getViewFactory(),fetches a factory that is suitable for producing views of any models that are produced by this kit.
javax.swing.text.EditorKit.install(javax.swing.JEditorPane),called when the kit is being installed into the a jeditorpane.
"javax.swing.text.EditorKit.read(java.io.InputStream,javax.swing.text.Document,int)",inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler.
"javax.swing.text.EditorKit.read(java.io.Reader,javax.swing.text.Document,int)",inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler.
"javax.swing.text.EditorKit.write(java.io.OutputStream,javax.swing.text.Document,int,int)",writes content from a document to the given stream in a format appropriate for this kind of content handler.
"javax.swing.text.EditorKit.write(java.io.Writer,javax.swing.text.Document,int,int)",writes content from a document to the given stream in a format appropriate for this kind of content handler.
javax.swing.text.ElementIterator.clone(),clones the elementiterator.
javax.swing.text.ElementIterator.current(),fetches the current element.
javax.swing.text.ElementIterator.depth(),fetches the current depth of element tree.
javax.swing.text.ElementIterator.first(),fetches the first element.
javax.swing.text.ElementIterator.next(),fetches the next element.
javax.swing.text.ElementIterator.previous(),fetches the previous element.
javax.swing.text.FieldView.adjustAllocation(java.awt.Shape),adjusts the allocation given to the view to be a suitable allocation for a text field.
javax.swing.text.FieldView.getFontMetrics(),fetches the font metrics associated with the component hosting this view.
javax.swing.text.FieldView.getPreferredSpan(int),determines the preferred span for this view along an axis.
javax.swing.text.FieldView.getResizeWeight(int),determines the resizability of the view along the given axis.
"javax.swing.text.FieldView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was inserted into the document in a location that this view is responsible for.
"javax.swing.text.FieldView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)",provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.
"javax.swing.text.FieldView.paint(java.awt.Graphics,java.awt.Shape)",renders using the given rendering surface and area on that surface.
"javax.swing.text.FieldView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was removed from the document in a location that this view is responsible for.
"javax.swing.text.FieldView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
"javax.swing.text.FlowView.calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)",calculate requirements along the minor axis.
"javax.swing.text.FlowView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification from the document that attributes were changed in a location that this view is responsible for.
javax.swing.text.FlowView.createRow(),create a view that should be used to hold a a rows worth of children in a flow.
javax.swing.text.FlowView.getFlowAxis(),fetches the axis along which views should be flowed.
javax.swing.text.FlowView.getFlowSpan(int),fetch the constraining span to flow against for the given child index.
javax.swing.text.FlowView.getFlowStart(int),fetch the location along the flow axis that the flow span will start at.
javax.swing.text.FlowView.getViewIndexAtPosition(int),fetches the child view index representing the given position in the model.
"javax.swing.text.FlowView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was inserted into the document in a location that this view is responsible for.
"javax.swing.text.FlowView.layout(int,int)",lays out the children.
javax.swing.text.FlowView.loadChildren(javax.swing.text.ViewFactory),loads all of the children to initialize the view.
"javax.swing.text.FlowView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was removed from the document in a location that this view is responsible for.
javax.swing.text.FlowView.setParent(javax.swing.text.View),sets the parent of the view.
"javax.swing.text.FlowView.FlowStrategy.adjustRow(javax.swing.text.FlowView,int,int,int)",adjusts the given row if possible to fit within the layout span.
"javax.swing.text.FlowView.FlowStrategy.changedUpdate(javax.swing.text.FlowView,javax.swing.event.DocumentEvent,java.awt.Rectangle)",gives notification from the document that attributes were changed in a location that this view is responsible for.
"javax.swing.text.FlowView.FlowStrategy.createView(javax.swing.text.FlowView,int,int,int)",creates a view that can be used to represent the current piece of the flow.
javax.swing.text.FlowView.FlowStrategy.getLogicalView(javax.swing.text.FlowView),this method gives flow strategies access to the logical view of the flowview.
"javax.swing.text.FlowView.FlowStrategy.insertUpdate(javax.swing.text.FlowView,javax.swing.event.DocumentEvent,java.awt.Rectangle)",gives notification that something was inserted into the document in a location that the given flow view is responsible for.
javax.swing.text.FlowView.FlowStrategy.layout(javax.swing.text.FlowView),update the flow on the given flowview.
"javax.swing.text.FlowView.FlowStrategy.layoutRow(javax.swing.text.FlowView,int,int)",creates a row of views that will fit within the layout span of the row.
"javax.swing.text.FlowView.FlowStrategy.removeUpdate(javax.swing.text.FlowView,javax.swing.event.DocumentEvent,java.awt.Rectangle)",gives notification that something was removed from the document in a location that the given flow view is responsible for.
javax.swing.text.GapContent.allocateArray(int),allocate an array to store items of the type appropriate (which is determined by the subclass).
javax.swing.text.GapContent.createPosition(int),creates a position within the content that will track change as the content is mutated.
javax.swing.text.GapContent.getArray(),access to the array.
javax.swing.text.GapContent.getArrayLength(),get the length of the allocated array.
"javax.swing.text.GapContent.getChars(int,int,javax.swing.text.Segment)",retrieves a portion of the content.
javax.swing.text.GapContent.getGapEnd(),access to the end of the gap.
javax.swing.text.GapContent.getGapStart(),access to the start of the gap.
"javax.swing.text.GapContent.getPositionsInRange(java.util.Vector,int,int)",returns a vector containing instances of undoposref for the positions in the range offset to offset + length.
"javax.swing.text.GapContent.getString(int,int)",retrieves a portion of the content.
"javax.swing.text.GapContent.insertString(int,java.lang.String)",inserts a string into the content.
javax.swing.text.GapContent.length(),returns the length of the content.
"javax.swing.text.GapContent.remove(int,int)",removes part of the content.
"javax.swing.text.GapContent.replace(int,int,java.lang.Object,int)",replace the given logical position in the storage with the given new items.
javax.swing.text.GapContent.resetMarksAtZero(),resets all the marks that have an offset of 0 to have an index of zero as well.
javax.swing.text.GapContent.shiftEnd(int),"make the gap bigger, moving any necessary data and updating the appropriate marks."
javax.swing.text.GapContent.shiftGap(int),"move the start of the gap to a new location, without changing the size of the gap."
javax.swing.text.GapContent.shiftGapEndUp(int),adjust the gap end upward.
javax.swing.text.GapContent.shiftGapStartDown(int),adjust the gap end downward.
"javax.swing.text.GapContent.updateUndoPositions(java.util.Vector,int,int)",resets the location for all the undoposref instances in positions.
"javax.swing.text.GlyphView.breakView(int,int,float,float)",breaks this view on the given axis at the given length.
"javax.swing.text.GlyphView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification from the document that attributes were changed in a location that this view is responsible for.
javax.swing.text.GlyphView.checkPainter(),check to see that a glyph painter exists.
javax.swing.text.GlyphView.clone(),creates a shallow copy.
"javax.swing.text.GlyphView.createFragment(int,int)",creates a view that represents a portion of the element.
javax.swing.text.GlyphView.getAlignment(int),determines the desired alignment for this view along an axis.
javax.swing.text.GlyphView.getBackground(),fetch the background color to use to render the glyphs.
"javax.swing.text.GlyphView.getBreakWeight(int,float,float)",determines how attractive a break opportunity in this view is.
javax.swing.text.GlyphView.getEndOffset(),fetches the portion of the model that this view is responsible for.
javax.swing.text.GlyphView.getFont(),fetch the font that the glyphs should be based upon.
javax.swing.text.GlyphView.getForeground(),fetch the foreground color to use to render the glyphs.
javax.swing.text.GlyphView.getGlyphPainter(),fetch the currently installed glyph painter.
javax.swing.text.GlyphView.getMinimumSpan(int),determines the minimum span for this view along an axis.
"javax.swing.text.GlyphView.getNextVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])",provides a way to determine the next visually represented model location that one might place a caret.
"javax.swing.text.GlyphView.getPartialSpan(int,int)",determines the span along the same axis as tab expansion for a portion of the view.
javax.swing.text.GlyphView.getPreferredSpan(int),determines the preferred span for this view along an axis.
javax.swing.text.GlyphView.getStartOffset(),fetches the portion of the model that this view is responsible for.
"javax.swing.text.GlyphView.getTabbedSpan(float,javax.swing.text.TabExpander)",determines the desired span when using the given tab expansion implementation.
javax.swing.text.GlyphView.getTabExpander(),fetch the tabexpander to use if tabs are present in this view.
"javax.swing.text.GlyphView.getText(int,int)",fetch a reference to the text that occupies the given range.
"javax.swing.text.GlyphView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was inserted into the document in a location that this view is responsible for.
javax.swing.text.GlyphView.isStrikeThrough(),determine if the glyphs should have a strikethrough line.
javax.swing.text.GlyphView.isSubscript(),determine if the glyphs should be rendered as superscript.
javax.swing.text.GlyphView.isSuperscript(),determine if the glyphs should be rendered as subscript.
javax.swing.text.GlyphView.isUnderline(),determine if the glyphs should be underlined.
"javax.swing.text.GlyphView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)",provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.
"javax.swing.text.GlyphView.paint(java.awt.Graphics,java.awt.Shape)",renders a portion of a text style run.
"javax.swing.text.GlyphView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was removed from the document in a location that this view is responsible for.
javax.swing.text.GlyphView.setGlyphPainter(javax.swing.text.GlyphView.GlyphPainter),sets the painter to use for rendering glyphs.
"javax.swing.text.GlyphView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
"javax.swing.text.GlyphView.GlyphPainter.getBoundedPosition(javax.swing.text.GlyphView,int,float,float)",determines the model location that represents the maximum advance that fits within the given span.
"javax.swing.text.GlyphView.GlyphPainter.getNextVisualPositionFrom(javax.swing.text.GlyphView,int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])",provides a way to determine the next visually represented model location that one might place a caret.
"javax.swing.text.GlyphView.GlyphPainter.getPainter(javax.swing.text.GlyphView,int,int)",create a painter to use for the given glyphview.
"javax.swing.text.GlyphView.GlyphPainter.getSpan(javax.swing.text.GlyphView,int,int,javax.swing.text.TabExpander,float)",determine the span the glyphs given a start location (for tab expansion).
"javax.swing.text.GlyphView.GlyphPainter.modelToView(javax.swing.text.GlyphView,int,javax.swing.text.Position.Bias,java.awt.Shape)",provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.
"javax.swing.text.GlyphView.GlyphPainter.paint(javax.swing.text.GlyphView,java.awt.Graphics,java.awt.Shape,int,int)",paint the glyphs representing the given range.
"javax.swing.text.GlyphView.GlyphPainter.viewToModel(javax.swing.text.GlyphView,float,float,java.awt.Shape,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
javax.swing.text.IconView.getAlignment(int),determines the desired alignment for this view along an axis.
javax.swing.text.IconView.getPreferredSpan(int),determines the preferred span for this view along an axis.
"javax.swing.text.IconView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)",provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.
"javax.swing.text.IconView.paint(java.awt.Graphics,java.awt.Shape)",paints the icon.
"javax.swing.text.IconView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
javax.swing.text.InternationalFormatter.clone(),creates a copy of the defaultformatter.
javax.swing.text.InternationalFormatter.getActions(),"if getsupportsincrement returns true, this returns two actions suitable for incrementing/decrementing the value."
javax.swing.text.InternationalFormatter.getFields(int),returns the format.
javax.swing.text.InternationalFormatter.getFormat(),returns the format that dictates the legal values that can be edited and displayed.
javax.swing.text.InternationalFormatter.getMaximum(),returns the maximum permissible value.
javax.swing.text.InternationalFormatter.getMinimum(),returns the minimum permissible value.
javax.swing.text.InternationalFormatter.install(javax.swing.JFormattedTextField),installs the defaultformatter onto a particular jformattedtextfield.
javax.swing.text.InternationalFormatter.setFormat(java.text.Format),sets the format that dictates the legal values that can be edited and displayed.
javax.swing.text.InternationalFormatter.setMaximum(java.lang.Comparable),sets the maximum permissible value.
javax.swing.text.InternationalFormatter.setMinimum(java.lang.Comparable),sets the minimum permissible value.
javax.swing.text.InternationalFormatter.stringToValue(java.lang.String),returns the object representation of the string text.
javax.swing.text.InternationalFormatter.valueToString(java.lang.Object),returns a string representation of the object value.
javax.swing.text.JTextComponent.addCaretListener(javax.swing.event.CaretListener),adds a caret listener for notification of any changes to the caret.
"javax.swing.text.JTextComponent.addKeymap(java.lang.String,javax.swing.text.Keymap)",adds a new keymap into the keymap hierarchy.
javax.swing.text.JTextComponent.copy(),"transfers the currently selected range in the associated text model to the system clipboard, leaving the contents in the text model."
javax.swing.text.JTextComponent.cut(),"transfers the currently selected range in the associated text model to the system clipboard, removing the contents from the model."
javax.swing.text.JTextComponent.fireCaretUpdate(javax.swing.event.CaretEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.text.JTextComponent.getAccessibleContext(),gets the accessiblecontext associated with this jtextcomponent.
javax.swing.text.JTextComponent.getActions(),fetches the command list for the editor.
javax.swing.text.JTextComponent.getCaret(),fetches the caret that allows text-oriented navigation over the view.
javax.swing.text.JTextComponent.getCaretColor(),fetches the current color used to render the caret.
javax.swing.text.JTextComponent.getCaretListeners(),returns an array of all the caret listeners registered on this text component.
javax.swing.text.JTextComponent.getCaretPosition(),returns the position of the text insertion caret for the text component.
javax.swing.text.JTextComponent.getDisabledTextColor(),fetches the current color used to render the disabled text.
javax.swing.text.JTextComponent.getDocument(),fetches the model associated with the editor.
javax.swing.text.JTextComponent.getDragEnabled(),returns whether or not automatic drag handling is enabled.
javax.swing.text.JTextComponent.getDropLocation(),"returns the location that this component should visually indicate as the drop location during a dnd operation over the component, or null if no location is to currently be shown."
javax.swing.text.JTextComponent.getDropMode(),returns the drop mode for this component.
javax.swing.text.JTextComponent.getFocusAccelerator(),returns the key accelerator that will cause the receiving text component to get the focus.
javax.swing.text.JTextComponent.getHighlighter(),fetches the object responsible for making highlights.
javax.swing.text.JTextComponent.getKeymap(),fetches the keymap currently active in this text component.
javax.swing.text.JTextComponent.getKeymap(java.lang.String),fetches a named keymap previously added to the document.
javax.swing.text.JTextComponent.getMargin(),returns the margin between the text component's border and its text.
javax.swing.text.JTextComponent.getNavigationFilter(),returns the navigationfilter.
javax.swing.text.JTextComponent.getPreferredScrollableViewportSize(),returns the preferred size of the viewport for a view component.
"javax.swing.text.JTextComponent.getPrintable(java.text.MessageFormat,java.text.MessageFormat)",returns a printable to use for printing the content of this jtextcomponent.
"javax.swing.text.JTextComponent.getScrollableBlockIncrement(java.awt.Rectangle,int,int)","components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation."
javax.swing.text.JTextComponent.getScrollableTracksViewportHeight(),returns true if a viewport should always force the height of this scrollable to match the height of the viewport.
javax.swing.text.JTextComponent.getScrollableTracksViewportWidth(),returns true if a viewport should always force the width of this scrollable to match the width of the viewport.
"javax.swing.text.JTextComponent.getScrollableUnitIncrement(java.awt.Rectangle,int,int)","components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation."
javax.swing.text.JTextComponent.getSelectedText(),returns the selected text contained in this textcomponent.
javax.swing.text.JTextComponent.getSelectedTextColor(),fetches the current color used to render the selected text.
javax.swing.text.JTextComponent.getSelectionColor(),fetches the current color used to render the selection.
javax.swing.text.JTextComponent.getSelectionEnd(),returns the selected text's end position.
javax.swing.text.JTextComponent.getSelectionStart(),returns the selected text's start position.
"javax.swing.text.JTextComponent.getText(int,int)",fetches a portion of the text represented by the component.
javax.swing.text.JTextComponent.getText(),returns the text contained in this textcomponent.
javax.swing.text.JTextComponent.getToolTipText(java.awt.event.MouseEvent),returns the string to be used as the tooltip for event.
javax.swing.text.JTextComponent.getUI(),fetches the user-interface factory for this text-oriented editor.
javax.swing.text.JTextComponent.isEditable(),returns the boolean indicating whether this textcomponent is editable or not.
"javax.swing.text.JTextComponent.loadKeymap(javax.swing.text.Keymap,javax.swing.text.JTextComponent.KeyBinding[],javax.swing.Action[])",loads a keymap with a bunch of bindings.
javax.swing.text.JTextComponent.modelToView(int),converts the given location in the model to a place in the view coordinate system.
javax.swing.text.JTextComponent.moveCaretPosition(int),"moves the caret to a new position, leaving behind a mark defined by the last time setcaretposition was called."
javax.swing.text.JTextComponent.paramString(),returns a string representation of this jtextcomponent.
javax.swing.text.JTextComponent.paste(),transfers the contents of the system clipboard into the associated text model.
javax.swing.text.JTextComponent.print(),"a convenience print method that displays a print dialog, and then prints this jtextcomponent in interactive mode with no header or footer text."
"javax.swing.text.JTextComponent.print(java.text.MessageFormat,java.text.MessageFormat)","a convenience print method that displays a print dialog, and then prints this jtextcomponent in interactive mode with the specified header and footer text."
"javax.swing.text.JTextComponent.print(java.text.MessageFormat,java.text.MessageFormat,boolean,javax.print.PrintService,javax.print.attribute.PrintRequestAttributeSet,boolean)",prints the content of this jtextcomponent.
"javax.swing.text.JTextComponent.read(java.io.Reader,java.lang.Object)",initializes from a stream.
javax.swing.text.JTextComponent.removeCaretListener(javax.swing.event.CaretListener),removes a caret listener.
javax.swing.text.JTextComponent.removeKeymap(java.lang.String),removes a named keymap previously added to the document.
javax.swing.text.JTextComponent.replaceSelection(java.lang.String),replaces the currently selected content with new content represented by the given string.
javax.swing.text.JTextComponent.restoreComposedText(),restores composed text previously saved by savecomposedtext.
javax.swing.text.JTextComponent.saveComposedText(int),saves composed text around the specified position.
"javax.swing.text.JTextComponent.select(int,int)",selects the text between the specified start and end positions.
javax.swing.text.JTextComponent.selectAll(),selects all the text in the textcomponent.
javax.swing.text.JTextComponent.setCaret(javax.swing.text.Caret),sets the caret to be used.
javax.swing.text.JTextComponent.setCaretColor(java.awt.Color),sets the current color used to render the caret.
javax.swing.text.JTextComponent.setCaretPosition(int),sets the position of the text insertion caret for the textcomponent.
javax.swing.text.JTextComponent.setDisabledTextColor(java.awt.Color),sets the current color used to render the disabled text.
javax.swing.text.JTextComponent.setDocument(javax.swing.text.Document),associates the editor with a text document.
javax.swing.text.JTextComponent.setDragEnabled(boolean),turns on or off automatic drag handling.
javax.swing.text.JTextComponent.setDropMode(javax.swing.DropMode),sets the drop mode for this component.
javax.swing.text.JTextComponent.setEditable(boolean),sets the specified boolean to indicate whether or not this textcomponent should be editable.
javax.swing.text.JTextComponent.setFocusAccelerator(char),sets the key accelerator that will cause the receiving text component to get the focus.
javax.swing.text.JTextComponent.setHighlighter(javax.swing.text.Highlighter),sets the highlighter to be used.
javax.swing.text.JTextComponent.setKeymap(javax.swing.text.Keymap),sets the keymap to use for binding events to actions.
javax.swing.text.JTextComponent.setMargin(java.awt.Insets),sets margin space between the text component's border and its text.
javax.swing.text.JTextComponent.setNavigationFilter(javax.swing.text.NavigationFilter),sets the navigationfilter.
javax.swing.text.JTextComponent.setSelectedTextColor(java.awt.Color),sets the current color used to render the selected text.
javax.swing.text.JTextComponent.setSelectionColor(java.awt.Color),sets the current color used to render the selection.
javax.swing.text.JTextComponent.setSelectionEnd(int),sets the selection end to the specified position.
javax.swing.text.JTextComponent.setSelectionStart(int),sets the selection start to the specified position.
javax.swing.text.JTextComponent.setText(java.lang.String),sets the text of this textcomponent to the specified text.
javax.swing.text.JTextComponent.setUI(javax.swing.plaf.TextUI),sets the user-interface factory for this text-oriented editor.
javax.swing.text.JTextComponent.updateUI(),reloads the pluggable ui.
javax.swing.text.JTextComponent.viewToModel(java.awt.Point),converts the given place in the view coordinate system to the nearest representative location in the model.
javax.swing.text.JTextComponent.write(java.io.Writer),stores the contents of the model into the given stream.
javax.swing.text.JTextComponent.DropLocation.getBias(),returns the bias for the drop index.
javax.swing.text.JTextComponent.DropLocation.getIndex(),returns the index where dropped data should be inserted into the associated component.
javax.swing.text.JTextComponent.DropLocation.toString(),returns a string representation of this drop location.
"javax.swing.text.LabelView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification from the document that attributes were changed in a location that this view is responsible for.
javax.swing.text.LabelView.getBackground(),fetches the background color to use to render the glyphs.
javax.swing.text.LabelView.getFont(),fetches the font that the glyphs should be based upon.
javax.swing.text.LabelView.getForeground(),fetches the foreground color to use to render the glyphs.
javax.swing.text.LabelView.isStrikeThrough(),determines if the glyphs should have a strikethrough line.
javax.swing.text.LabelView.isSubscript(),determines if the glyphs should be rendered as superscript.
javax.swing.text.LabelView.isSuperscript(),determines if the glyphs should be rendered as subscript.
javax.swing.text.LabelView.isUnderline(),determines if the glyphs should be underlined.
javax.swing.text.LabelView.setBackground(java.awt.Color),sets the background color for the view.
javax.swing.text.LabelView.setPropertiesFromAttributes(),sets the cached properties from the attributes.
javax.swing.text.LabelView.setStrikeThrough(boolean),sets whether or not the view has a strike/line through it.
javax.swing.text.LabelView.setSubscript(boolean),sets whether or not the view represents a subscript.
javax.swing.text.LabelView.setSuperscript(boolean),sets whether or not the view represents a superscript.
javax.swing.text.LabelView.setUnderline(boolean),sets whether or not the view is underlined.
"javax.swing.text.LayeredHighlighter.paintLayeredHighlights(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent,javax.swing.text.View)",when leaf views (such as labelview) are rendering they should call into this method.
javax.swing.text.LayoutQueue.addTask(java.lang.Runnable),add a task that is not needed immediately because the results are not believed to be visible.
javax.swing.text.LayoutQueue.getDefaultQueue(),fetch the default layout queue.
javax.swing.text.LayoutQueue.setDefaultQueue(javax.swing.text.LayoutQueue),set the default layout queue.
javax.swing.text.LayoutQueue.waitForWork(),used by the worker thread to get a new task to execute.
javax.swing.text.MaskFormatter.getInvalidCharacters(),returns the characters that are not valid for input.
javax.swing.text.MaskFormatter.getMask(),returns the formatting mask.
javax.swing.text.MaskFormatter.getPlaceholder(),returns the string to use if the value does not completely fill in the mask.
javax.swing.text.MaskFormatter.getPlaceholderCharacter(),"returns the character to use in place of characters that are not present in the value, ie the user must fill them in."
javax.swing.text.MaskFormatter.getValidCharacters(),returns the valid characters that can be input.
javax.swing.text.MaskFormatter.getValueContainsLiteralCharacters(),returns true if stringtovalue should return literal characters in the mask.
javax.swing.text.MaskFormatter.install(javax.swing.JFormattedTextField),installs the defaultformatter onto a particular jformattedtextfield.
javax.swing.text.MaskFormatter.setInvalidCharacters(java.lang.String),allows for further restricting of the characters that can be input.
javax.swing.text.MaskFormatter.setMask(java.lang.String),sets the mask dictating the legal characters.
javax.swing.text.MaskFormatter.setPlaceholder(java.lang.String),sets the string to use if the value does not completely fill in the mask.
javax.swing.text.MaskFormatter.setPlaceholderCharacter(char),"sets the character to use in place of characters that are not present in the value, ie the user must fill them in."
javax.swing.text.MaskFormatter.setValidCharacters(java.lang.String),allows for further restricting of the characters that can be input.
javax.swing.text.MaskFormatter.setValueContainsLiteralCharacters(boolean),"if true, the returned value and set value will also contain the literal characters in mask."
javax.swing.text.MaskFormatter.stringToValue(java.lang.String),"parses the text, returning the appropriate object representation of the string value."
javax.swing.text.MaskFormatter.valueToString(java.lang.Object),returns a string representation of the object value based on the mask.
"javax.swing.text.NavigationFilter.getNextVisualPositionFrom(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias[])",returns the next visual position to place the caret at from an existing position.
"javax.swing.text.NavigationFilter.moveDot(javax.swing.text.NavigationFilter.FilterBypass,int,javax.swing.text.Position.Bias)",invoked prior to the caret moving the dot.
"javax.swing.text.NavigationFilter.setDot(javax.swing.text.NavigationFilter.FilterBypass,int,javax.swing.text.Position.Bias)",invoked prior to the caret setting the dot.
javax.swing.text.NavigationFilter.FilterBypass.getCaret(),returns the caret that is changing.
"javax.swing.text.NavigationFilter.FilterBypass.moveDot(int,javax.swing.text.Position.Bias)","moves the caret location, bypassing the navigationfilter."
"javax.swing.text.NavigationFilter.FilterBypass.setDot(int,javax.swing.text.Position.Bias)","sets the caret location, bypassing the navigationfilter."
javax.swing.text.NumberFormatter.setFormat(java.text.Format),sets the format that dictates the legal values that can be edited and displayed.
"javax.swing.text.ParagraphView.breakView(int,float,java.awt.Shape)",breaks this view on the given axis at the given length.
"javax.swing.text.ParagraphView.calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)",calculate the needs for the paragraph along the minor axis.
"javax.swing.text.ParagraphView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification from the document that attributes were changed in a location that this view is responsible for.
javax.swing.text.ParagraphView.createRow(),create a view that should be used to hold a a row's worth of children in a flow.
"javax.swing.text.ParagraphView.findOffsetToCharactersInString(char[],int)","finds the next character in the document with a character in string, starting at offset start."
"javax.swing.text.ParagraphView.flipEastAndWestAtEnds(int,javax.swing.text.Position.Bias)",determines in which direction the next view lays.
javax.swing.text.ParagraphView.getAlignment(int),determines the desired alignment for this view along an axis.
"javax.swing.text.ParagraphView.getBreakWeight(int,float)",gets the break weight for a given location.
"javax.swing.text.ParagraphView.getClosestPositionTo(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[],int,int)",returns the closest model position to x.
javax.swing.text.ParagraphView.getFlowSpan(int),fetches the constraining span to flow against for the given child index.
javax.swing.text.ParagraphView.getFlowStart(int),fetches the location along the flow axis that the flow span will start at.
javax.swing.text.ParagraphView.getLayoutView(int),returns the view at a given index.
javax.swing.text.ParagraphView.getLayoutViewCount(),returns the number of views that this view is responsible for.
"javax.swing.text.ParagraphView.getNextNorthSouthVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])","returns the next visual position for the cursor, in either the east or west direction."
"javax.swing.text.ParagraphView.getPartialSize(int,int)",returns the size used by the views between startoffset and endoffset.
javax.swing.text.ParagraphView.getTabBase(),returns where the tabs are calculated from.
javax.swing.text.ParagraphView.getTabSet(),gets the tabset to be used in calculating tabs.
"javax.swing.text.ParagraphView.nextTabStop(float,int)",returns the next tab stop position given a reference position.
"javax.swing.text.ParagraphView.paint(java.awt.Graphics,java.awt.Shape)",renders using the given rendering surface and area on that surface.
javax.swing.text.ParagraphView.setFirstLineIndent(float),sets the indent on the first line.
javax.swing.text.ParagraphView.setJustification(int),sets the type of justification.
javax.swing.text.ParagraphView.setLineSpacing(float),sets the line spacing.
javax.swing.text.ParagraphView.setPropertiesFromAttributes(),set the cached properties from the attributes.
"javax.swing.text.PasswordView.drawEchoCharacter(java.awt.Graphics,int,int,char)","renders the echo character, or whatever graphic should be used to display the password characters."
"javax.swing.text.PasswordView.drawSelectedText(java.awt.Graphics,int,int,int,int)",renders the given range in the model as selected text.
"javax.swing.text.PasswordView.drawUnselectedText(java.awt.Graphics,int,int,int,int)",renders the given range in the model as normal unselected text.
javax.swing.text.PasswordView.getPreferredSpan(int),determines the preferred span for this view along an axis.
"javax.swing.text.PasswordView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)",provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.
"javax.swing.text.PasswordView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
javax.swing.text.PlainDocument.createDefaultRoot(),creates the root element to be used to represent the default document structure.
javax.swing.text.PlainDocument.getDefaultRootElement(),gets the default root element for the document model.
javax.swing.text.PlainDocument.getParagraphElement(int),get the paragraph element containing the given position.
"javax.swing.text.PlainDocument.insertString(int,java.lang.String,javax.swing.text.AttributeSet)",inserts some content into the document.
"javax.swing.text.PlainDocument.insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent,javax.swing.text.AttributeSet)",updates document structure as a result of text insertion.
javax.swing.text.PlainDocument.removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent),updates any document structure as a result of text removal.
"javax.swing.text.PlainView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification from the document that attributes were changed in a location that this view is responsible for.
"javax.swing.text.PlainView.damageLineRange(int,int,java.awt.Shape,java.awt.Component)",repaint the given line range.
"javax.swing.text.PlainView.drawLine(int,java.awt.Graphics,int,int)","renders a line of text, suppressing whitespace at the end and expanding any tabs."
"javax.swing.text.PlainView.drawSelectedText(java.awt.Graphics,int,int,int,int)",renders the given range in the model as selected text.
"javax.swing.text.PlainView.drawUnselectedText(java.awt.Graphics,int,int,int,int)",renders the given range in the model as normal unselected text.
javax.swing.text.PlainView.getLineBuffer(),gives access to a buffer that can be used to fetch text from the associated document.
javax.swing.text.PlainView.getPreferredSpan(int),determines the preferred span for this view along an axis.
javax.swing.text.PlainView.getTabSize(),"returns the tab size set for the document, defaulting to 8."
"javax.swing.text.PlainView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was inserted into the document in a location that this view is responsible for.
"javax.swing.text.PlainView.lineToRect(java.awt.Shape,int)",determine the rectangle that represents the given line.
"javax.swing.text.PlainView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)",provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.
"javax.swing.text.PlainView.nextTabStop(float,int)",returns the next tab stop position after a given reference position.
"javax.swing.text.PlainView.paint(java.awt.Graphics,java.awt.Shape)",renders using the given rendering surface and area on that surface.
"javax.swing.text.PlainView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was removed from the document in a location that this view is responsible for.
"javax.swing.text.PlainView.setSize(float,float)",sets the size of the view.
"javax.swing.text.PlainView.updateDamage(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",repaint the region of change covered by the given document event.
javax.swing.text.PlainView.updateMetrics(),checks to see if the font metrics and longest line are up-to-date.
"javax.swing.text.PlainView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
javax.swing.text.Position.Bias.toString(),string representation.
javax.swing.text.Segment.charAt(int),returns the char value at the specified index.
javax.swing.text.Segment.clone(),creates a shallow copy.
javax.swing.text.Segment.current(),gets the character at the current position (as returned by getindex()).
javax.swing.text.Segment.first(),sets the position to getbeginindex() and returns the character at that position.
javax.swing.text.Segment.getBeginIndex(),returns the start index of the text.
javax.swing.text.Segment.getEndIndex(),returns the end index of the text.
javax.swing.text.Segment.getIndex(),returns the current index.
javax.swing.text.Segment.isPartialReturn(),flag to indicate that partial returns are valid.
javax.swing.text.Segment.last(),sets the position to getendindex()-1 (getendindex() if the text is empty) and returns the character at that position.
javax.swing.text.Segment.length(),returns the length of this character sequence.
javax.swing.text.Segment.next(),increments the iterator's index by one and returns the character at the new index.
javax.swing.text.Segment.previous(),decrements the iterator's index by one and returns the character at the new index.
javax.swing.text.Segment.setIndex(int),sets the position to the specified position in the text and returns that character.
javax.swing.text.Segment.setPartialReturn(boolean),flag to indicate that partial returns are valid.
"javax.swing.text.Segment.subSequence(int,int)",returns a charsequence that is a subsequence of this sequence.
javax.swing.text.Segment.toString(),converts a segment into a string.
"javax.swing.text.SimpleAttributeSet.addAttribute(java.lang.Object,java.lang.Object)",adds an attribute to the list.
javax.swing.text.SimpleAttributeSet.addAttributes(javax.swing.text.AttributeSet),adds a set of attributes to the list.
javax.swing.text.SimpleAttributeSet.clone(),clones a set of attributes.
"javax.swing.text.SimpleAttributeSet.containsAttribute(java.lang.Object,java.lang.Object)",checks whether the attribute list contains a specified attribute name/value pair.
javax.swing.text.SimpleAttributeSet.containsAttributes(javax.swing.text.AttributeSet),checks whether the attribute list contains all the specified name/value pairs.
javax.swing.text.SimpleAttributeSet.copyAttributes(),makes a copy of the attributes.
javax.swing.text.SimpleAttributeSet.equals(java.lang.Object),compares this object to the specified object.
javax.swing.text.SimpleAttributeSet.getAttribute(java.lang.Object),gets the value of an attribute.
javax.swing.text.SimpleAttributeSet.getAttributeCount(),gets a count of the number of attributes.
javax.swing.text.SimpleAttributeSet.getAttributeNames(),gets the names of the attributes in the set.
javax.swing.text.SimpleAttributeSet.getResolveParent(),gets the resolving parent.
javax.swing.text.SimpleAttributeSet.hashCode(),returns a hashcode for this set of attributes.
javax.swing.text.SimpleAttributeSet.isDefined(java.lang.Object),tells whether a given attribute is defined.
javax.swing.text.SimpleAttributeSet.isEmpty(),checks whether the set of attributes is empty.
javax.swing.text.SimpleAttributeSet.isEqual(javax.swing.text.AttributeSet),compares two attribute sets.
javax.swing.text.SimpleAttributeSet.removeAttribute(java.lang.Object),removes an attribute from the list.
javax.swing.text.SimpleAttributeSet.removeAttributes(java.util.Enumeration<?>),removes a set of attributes from the list.
javax.swing.text.SimpleAttributeSet.removeAttributes(javax.swing.text.AttributeSet),removes a set of attributes from the list.
javax.swing.text.SimpleAttributeSet.setResolveParent(javax.swing.text.AttributeSet),sets the resolving parent.
javax.swing.text.SimpleAttributeSet.toString(),converts the attribute set to a string.
javax.swing.text.StringContent.createPosition(int),creates a position within the content that will track change as the content is mutated.
"javax.swing.text.StringContent.getChars(int,int,javax.swing.text.Segment)",retrieves a portion of the content.
"javax.swing.text.StringContent.getPositionsInRange(java.util.Vector,int,int)",returns a vector containing instances of undoposref for the positions in the range offset to offset + length.
"javax.swing.text.StringContent.getString(int,int)",retrieves a portion of the content.
"javax.swing.text.StringContent.insertString(int,java.lang.String)",inserts a string into the content.
javax.swing.text.StringContent.length(),returns the length of the content.
"javax.swing.text.StringContent.remove(int,int)",removes part of the content.
javax.swing.text.StringContent.updateUndoPositions(java.util.Vector),resets the location for all the undoposref instances in positions.
javax.swing.text.StyleConstants.getAlignment(javax.swing.text.AttributeSet),gets the alignment setting.
javax.swing.text.StyleConstants.getBackground(javax.swing.text.AttributeSet),gets the background color setting from the attribute list.
javax.swing.text.StyleConstants.getBidiLevel(javax.swing.text.AttributeSet),gets the bidilevel setting.
javax.swing.text.StyleConstants.getComponent(javax.swing.text.AttributeSet),gets the component setting from the attribute list.
javax.swing.text.StyleConstants.getFirstLineIndent(javax.swing.text.AttributeSet),gets the first line indent setting.
javax.swing.text.StyleConstants.getFontFamily(javax.swing.text.AttributeSet),gets the font family setting from the attribute list.
javax.swing.text.StyleConstants.getFontSize(javax.swing.text.AttributeSet),gets the font size setting from the attribute list.
javax.swing.text.StyleConstants.getForeground(javax.swing.text.AttributeSet),gets the foreground color setting from the attribute list.
javax.swing.text.StyleConstants.getIcon(javax.swing.text.AttributeSet),gets the icon setting from the attribute list.
javax.swing.text.StyleConstants.getLeftIndent(javax.swing.text.AttributeSet),gets the left indent setting.
javax.swing.text.StyleConstants.getLineSpacing(javax.swing.text.AttributeSet),gets the line spacing setting.
javax.swing.text.StyleConstants.getRightIndent(javax.swing.text.AttributeSet),gets the right indent setting.
javax.swing.text.StyleConstants.getSpaceAbove(javax.swing.text.AttributeSet),gets the space above setting.
javax.swing.text.StyleConstants.getSpaceBelow(javax.swing.text.AttributeSet),gets the space below setting.
javax.swing.text.StyleConstants.getTabSet(javax.swing.text.AttributeSet),gets the tabset.
javax.swing.text.StyleConstants.isBold(javax.swing.text.AttributeSet),checks whether the bold attribute is set.
javax.swing.text.StyleConstants.isItalic(javax.swing.text.AttributeSet),checks whether the italic attribute is set.
javax.swing.text.StyleConstants.isStrikeThrough(javax.swing.text.AttributeSet),checks whether the strikethrough attribute is set.
javax.swing.text.StyleConstants.isSubscript(javax.swing.text.AttributeSet),checks whether the subscript attribute is set.
javax.swing.text.StyleConstants.isSuperscript(javax.swing.text.AttributeSet),checks whether the superscript attribute is set.
javax.swing.text.StyleConstants.isUnderline(javax.swing.text.AttributeSet),checks whether the underline attribute is set.
"javax.swing.text.StyleConstants.setAlignment(javax.swing.text.MutableAttributeSet,int)",sets alignment.
"javax.swing.text.StyleConstants.setBackground(javax.swing.text.MutableAttributeSet,java.awt.Color)",sets the background color.
"javax.swing.text.StyleConstants.setBidiLevel(javax.swing.text.MutableAttributeSet,int)",sets the bidilevel.
"javax.swing.text.StyleConstants.setBold(javax.swing.text.MutableAttributeSet,boolean)",sets the bold attribute.
"javax.swing.text.StyleConstants.setComponent(javax.swing.text.MutableAttributeSet,java.awt.Component)",sets the component attribute.
"javax.swing.text.StyleConstants.setFirstLineIndent(javax.swing.text.MutableAttributeSet,float)",sets the first line indent.
"javax.swing.text.StyleConstants.setFontFamily(javax.swing.text.MutableAttributeSet,java.lang.String)",sets the font attribute.
"javax.swing.text.StyleConstants.setFontSize(javax.swing.text.MutableAttributeSet,int)",sets the font size attribute.
"javax.swing.text.StyleConstants.setForeground(javax.swing.text.MutableAttributeSet,java.awt.Color)",sets the foreground color.
"javax.swing.text.StyleConstants.setIcon(javax.swing.text.MutableAttributeSet,javax.swing.Icon)",sets the icon attribute.
"javax.swing.text.StyleConstants.setItalic(javax.swing.text.MutableAttributeSet,boolean)",sets the italic attribute.
"javax.swing.text.StyleConstants.setLeftIndent(javax.swing.text.MutableAttributeSet,float)",sets left indent.
"javax.swing.text.StyleConstants.setLineSpacing(javax.swing.text.MutableAttributeSet,float)",sets line spacing.
"javax.swing.text.StyleConstants.setRightIndent(javax.swing.text.MutableAttributeSet,float)",sets right indent.
"javax.swing.text.StyleConstants.setSpaceAbove(javax.swing.text.MutableAttributeSet,float)",sets space above.
"javax.swing.text.StyleConstants.setSpaceBelow(javax.swing.text.MutableAttributeSet,float)",sets space below.
"javax.swing.text.StyleConstants.setStrikeThrough(javax.swing.text.MutableAttributeSet,boolean)",sets the strikethrough attribute.
"javax.swing.text.StyleConstants.setSubscript(javax.swing.text.MutableAttributeSet,boolean)",sets the subscript attribute.
"javax.swing.text.StyleConstants.setSuperscript(javax.swing.text.MutableAttributeSet,boolean)",sets the superscript attribute.
"javax.swing.text.StyleConstants.setTabSet(javax.swing.text.MutableAttributeSet,javax.swing.text.TabSet)",sets the tabset.
"javax.swing.text.StyleConstants.setUnderline(javax.swing.text.MutableAttributeSet,boolean)",sets the underline attribute.
javax.swing.text.StyleConstants.toString(),returns the string representation.
"javax.swing.text.StyleContext.addAttribute(javax.swing.text.AttributeSet,java.lang.Object,java.lang.Object)","adds an attribute to the given set, and returns the new representative set."
"javax.swing.text.StyleContext.addAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)",adds a set of attributes to the element.
javax.swing.text.StyleContext.addChangeListener(javax.swing.event.ChangeListener),adds a listener to track when styles are added or removed.
"javax.swing.text.StyleContext.addStyle(java.lang.String,javax.swing.text.Style)",adds a new style into the style hierarchy.
javax.swing.text.StyleContext.createLargeAttributeSet(javax.swing.text.AttributeSet),create a large set of attributes that should trade off space for time.
javax.swing.text.StyleContext.createSmallAttributeSet(javax.swing.text.AttributeSet),create a compact set of attributes that might be shared.
javax.swing.text.StyleContext.getBackground(javax.swing.text.AttributeSet),takes a set of attributes and turn it into a background color specification.
javax.swing.text.StyleContext.getChangeListeners(),returns an array of all the changelisteners added to this stylecontext with addchangelistener().
javax.swing.text.StyleContext.getCompressionThreshold(),returns the maximum number of key/value pairs to try and compress into unique/immutable sets.
javax.swing.text.StyleContext.getDefaultStyleContext(),returns default attributecontext shared by all documents that don't bother to define/supply their own context.
javax.swing.text.StyleContext.getEmptySet(),fetches an empty attributeset.
javax.swing.text.StyleContext.getFont(javax.swing.text.AttributeSet),gets the font from an attribute set.
"javax.swing.text.StyleContext.getFont(java.lang.String,int,int)",gets a new font.
javax.swing.text.StyleContext.getFontMetrics(java.awt.Font),returns font metrics for a font.
javax.swing.text.StyleContext.getForeground(javax.swing.text.AttributeSet),takes a set of attributes and turn it into a foreground color specification.
javax.swing.text.StyleContext.getStaticAttribute(java.lang.Object),returns the object previously registered with registerstaticattributekey.
javax.swing.text.StyleContext.getStaticAttributeKey(java.lang.Object),returns the string that key will be registered with.
javax.swing.text.StyleContext.getStyle(java.lang.String),fetches a named style previously added to the document.
javax.swing.text.StyleContext.getStyleNames(),fetches the names of the styles defined.
"javax.swing.text.StyleContext.readAttributes(java.io.ObjectInputStream,javax.swing.text.MutableAttributeSet)",context-specific handling of reading in attributes.
"javax.swing.text.StyleContext.readAttributeSet(java.io.ObjectInputStream,javax.swing.text.MutableAttributeSet)",reads a set of attributes from the given object input stream that have been previously written out with writeattributeset.
javax.swing.text.StyleContext.reclaim(javax.swing.text.AttributeSet),returns a set no longer needed by the mutableattributeset implementation.
javax.swing.text.StyleContext.registerStaticAttributeKey(java.lang.Object),registers an object as a static object that is being used as a key in attribute sets.
"javax.swing.text.StyleContext.removeAttribute(javax.swing.text.AttributeSet,java.lang.Object)",removes an attribute from the set.
"javax.swing.text.StyleContext.removeAttributes(javax.swing.text.AttributeSet,java.util.Enumeration<?>)",removes a set of attributes for the element.
"javax.swing.text.StyleContext.removeAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)",removes a set of attributes for the element.
javax.swing.text.StyleContext.removeChangeListener(javax.swing.event.ChangeListener),removes a listener that was tracking styles being added or removed.
javax.swing.text.StyleContext.removeStyle(java.lang.String),removes a named style previously added to the document.
javax.swing.text.StyleContext.toString(),converts a stylecontext to a string.
"javax.swing.text.StyleContext.writeAttributes(java.io.ObjectOutputStream,javax.swing.text.AttributeSet)",context-specific handling of writing out attributes.
"javax.swing.text.StyleContext.writeAttributeSet(java.io.ObjectOutputStream,javax.swing.text.AttributeSet)",writes a set of attributes to the given object stream for the purpose of serialization.
javax.swing.text.StyledEditorKit.clone(),creates a copy of the editor kit.
javax.swing.text.StyledEditorKit.createDefaultDocument(),creates an uninitialized text storage model that is appropriate for this type of editor.
"javax.swing.text.StyledEditorKit.createInputAttributes(javax.swing.text.Element,javax.swing.text.MutableAttributeSet)",copies the key/values in elements attributeset into set.
javax.swing.text.StyledEditorKit.deinstall(javax.swing.JEditorPane),called when the kit is being removed from the jeditorpane.
javax.swing.text.StyledEditorKit.getActions(),fetches the command list for the editor.
javax.swing.text.StyledEditorKit.getCharacterAttributeRun(),fetches the element representing the current run of character attributes for the caret.
javax.swing.text.StyledEditorKit.getInputAttributes(),gets the input attributes for the pane.
javax.swing.text.StyledEditorKit.getViewFactory(),fetches a factory that is suitable for producing views of any models that are produced by this kit.
javax.swing.text.StyledEditorKit.install(javax.swing.JEditorPane),called when the kit is being installed into a jeditorpane.
javax.swing.text.StyledEditorKit.AlignmentAction.actionPerformed(java.awt.event.ActionEvent),sets the alignment.
javax.swing.text.StyledEditorKit.BoldAction.actionPerformed(java.awt.event.ActionEvent),toggles the bold attribute.
javax.swing.text.StyledEditorKit.FontFamilyAction.actionPerformed(java.awt.event.ActionEvent),sets the font family.
javax.swing.text.StyledEditorKit.FontSizeAction.actionPerformed(java.awt.event.ActionEvent),sets the font size.
javax.swing.text.StyledEditorKit.ForegroundAction.actionPerformed(java.awt.event.ActionEvent),sets the foreground color.
javax.swing.text.StyledEditorKit.ItalicAction.actionPerformed(java.awt.event.ActionEvent),toggles the italic attribute.
javax.swing.text.StyledEditorKit.StyledTextAction.getEditor(java.awt.event.ActionEvent),gets the target editor for an action.
javax.swing.text.StyledEditorKit.StyledTextAction.getStyledDocument(javax.swing.JEditorPane),gets the document associated with an editor pane.
javax.swing.text.StyledEditorKit.StyledTextAction.getStyledEditorKit(javax.swing.JEditorPane),gets the editor kit associated with an editor pane.
"javax.swing.text.StyledEditorKit.StyledTextAction.setCharacterAttributes(javax.swing.JEditorPane,javax.swing.text.AttributeSet,boolean)",applies the given attributes to character content.
"javax.swing.text.StyledEditorKit.StyledTextAction.setParagraphAttributes(javax.swing.JEditorPane,javax.swing.text.AttributeSet,boolean)",applies the given attributes to paragraphs.
javax.swing.text.StyledEditorKit.UnderlineAction.actionPerformed(java.awt.event.ActionEvent),toggles the underline attribute.
"javax.swing.text.TableView.calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)",calculate the requirements for the minor axis.
javax.swing.text.TableView.createTableRow(javax.swing.text.Element),creates a new table row.
"javax.swing.text.TableView.getViewAtPosition(int,java.awt.Rectangle)",fetches the child view that represents the given position in the model.
"javax.swing.text.TableView.layoutColumns(int,int[],int[],javax.swing.SizeRequirements[])",lays out the columns to fit within the given target span.
"javax.swing.text.TableView.layoutMinorAxis(int,int,int[],int[])",perform layout for the minor axis of the box (i.
"javax.swing.text.TableView.replace(int,int,javax.swing.text.View[])",change the child views.
javax.swing.text.TabSet.equals(java.lang.Object),indicates whether this tabset is equal to another one.
javax.swing.text.TabSet.getTab(int),returns the tabstop at index index.
javax.swing.text.TabSet.getTabAfter(float),returns the tab instance after location.
javax.swing.text.TabSet.getTabCount(),returns the number of tab instances the receiver contains.
javax.swing.text.TabSet.getTabIndexAfter(float),returns the index of the tab to be used after location.
javax.swing.text.TabSet.hashCode(),returns a hashcode for this set of tabstops.
javax.swing.text.TabSet.toString(),returns the string representation of the set of tabs.
javax.swing.text.TabStop.equals(java.lang.Object),returns true if the tabs are equal.
javax.swing.text.TabStop.getAlignment(),"returns the alignment, as an integer, of the tab."
javax.swing.text.TabStop.getLeader(),returns the leader of the tab.
javax.swing.text.TabStop.getPosition(),"returns the position, as a float, of the tab."
javax.swing.text.TabStop.hashCode(),returns the hashcode for the object.
"javax.swing.text.TextAction.augmentList(javax.swing.Action[],javax.swing.Action[])",takes one list of commands and augments it with another list of commands.
javax.swing.text.TextAction.getFocusedComponent(),fetches the text component that currently has focus.
javax.swing.text.TextAction.getTextComponent(java.awt.event.ActionEvent),determines the component to use for the action.
"javax.swing.text.Utilities.drawTabbedText(javax.swing.text.Segment,int,int,java.awt.Graphics,javax.swing.text.TabExpander,int)","draws the given text, expanding any tabs that are contained using the given tab expansion technique."
"javax.swing.text.Utilities.getBreakLocation(javax.swing.text.Segment,java.awt.FontMetrics,int,int,javax.swing.text.TabExpander,int)",determine where to break the given text to fit within the given span.
"javax.swing.text.Utilities.getNextWord(javax.swing.text.JTextComponent,int)",determines the start of the next word for the given location.
"javax.swing.text.Utilities.getParagraphElement(javax.swing.text.JTextComponent,int)",determines the element to use for a paragraph/line.
"javax.swing.text.Utilities.getPositionAbove(javax.swing.text.JTextComponent,int,int)",determines the position in the model that is closest to the given view location in the row above.
"javax.swing.text.Utilities.getPositionBelow(javax.swing.text.JTextComponent,int,int)",determines the position in the model that is closest to the given view location in the row below.
"javax.swing.text.Utilities.getPreviousWord(javax.swing.text.JTextComponent,int)",determine the start of the prev word for the given location.
"javax.swing.text.Utilities.getRowEnd(javax.swing.text.JTextComponent,int)",determines the ending row model position of the row that contains the specified model position.
"javax.swing.text.Utilities.getRowStart(javax.swing.text.JTextComponent,int)",determines the starting row model position of the row that contains the specified model position.
"javax.swing.text.Utilities.getTabbedTextOffset(javax.swing.text.Segment,java.awt.FontMetrics,int,int,javax.swing.text.TabExpander,int)",determines the relative offset into the given text that best represents the given span in the view coordinate system.
"javax.swing.text.Utilities.getTabbedTextWidth(javax.swing.text.Segment,java.awt.FontMetrics,int,javax.swing.text.TabExpander,int)",determines the width of the given segment of text taking tabs into consideration.
"javax.swing.text.Utilities.getWordEnd(javax.swing.text.JTextComponent,int)",determines the end of a word for the given location.
"javax.swing.text.Utilities.getWordStart(javax.swing.text.JTextComponent,int)",determines the start of a word for the given model location.
javax.swing.text.View.append(javax.swing.text.View),appends a single child view.
"javax.swing.text.View.breakView(int,int,float,float)",tries to break this view on the given axis.
"javax.swing.text.View.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification from the document that attributes were changed in a location that this view is responsible for.
"javax.swing.text.View.createFragment(int,int)",creates a view that represents a portion of the element.
"javax.swing.text.View.forwardUpdate(javax.swing.event.DocumentEvent.ElementChange,javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",forwards the given documentevent to the child views that need to be notified of the change to the model.
"javax.swing.text.View.forwardUpdateToView(javax.swing.text.View,javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",forwards the documentevent to the give child view.
javax.swing.text.View.getAlignment(int),determines the desired alignment for this view along an axis.
javax.swing.text.View.getAttributes(),fetches the attributes to use when rendering.
"javax.swing.text.View.getBreakWeight(int,float,float)",determines how attractive a break opportunity in this view is.
"javax.swing.text.View.getChildAllocation(int,java.awt.Shape)",fetches the allocation for the given child view.
javax.swing.text.View.getContainer(),fetches the container hosting the view.
javax.swing.text.View.getDocument(),fetches the model associated with the view.
javax.swing.text.View.getElement(),fetches the structural portion of the subject that this view is mapped to.
javax.swing.text.View.getEndOffset(),fetches the portion of the model for which this view is responsible.
javax.swing.text.View.getGraphics(),fetch a graphics for rendering.
javax.swing.text.View.getMaximumSpan(int),determines the maximum span for this view along an axis.
javax.swing.text.View.getMinimumSpan(int),determines the minimum span for this view along an axis.
"javax.swing.text.View.getNextVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias[])",provides a way to determine the next visually represented model location at which one might place a caret.
javax.swing.text.View.getParent(),returns the parent of the view.
javax.swing.text.View.getPreferredSpan(int),determines the preferred span for this view along an axis.
javax.swing.text.View.getResizeWeight(int),determines the resizability of the view along the given axis.
javax.swing.text.View.getStartOffset(),fetches the portion of the model for which this view is responsible.
"javax.swing.text.View.getToolTipText(float,float,java.awt.Shape)",returns the tooltip text at the specified location.
javax.swing.text.View.getView(int),gets the nth child view.
javax.swing.text.View.getViewCount(),returns the number of views in this view.
javax.swing.text.View.getViewFactory(),fetches the viewfactory implementation that is feeding the view hierarchy.
"javax.swing.text.View.getViewIndex(int,javax.swing.text.Position.Bias)",returns the child view index representing the given position in the model.
"javax.swing.text.View.getViewIndex(float,float,java.awt.Shape)",returns the child view index representing the given position in the view.
"javax.swing.text.View.insert(int,javax.swing.text.View)",inserts a single child view.
"javax.swing.text.View.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was inserted into the document in a location that this view is responsible for.
javax.swing.text.View.isVisible(),returns a boolean that indicates whether the view is visible or not.
"javax.swing.text.View.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)","provides a mapping, for a given character, from the document model coordinate space to the view coordinate space."
"javax.swing.text.View.modelToView(int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias,java.awt.Shape)","provides a mapping, for a given region, from the document model coordinate space to the view coordinate space."
"javax.swing.text.View.paint(java.awt.Graphics,java.awt.Shape)",renders using the given rendering surface and area on that surface.
"javax.swing.text.View.preferenceChanged(javax.swing.text.View,boolean,boolean)",child views can call this on the parent to indicate that the preference has changed and should be reconsidered for layout.
javax.swing.text.View.remove(int),removes one of the children at the given position.
javax.swing.text.View.removeAll(),removes all of the children.
"javax.swing.text.View.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was removed from the document in a location that this view is responsible for.
"javax.swing.text.View.replace(int,int,javax.swing.text.View[])",replaces child views.
javax.swing.text.View.setParent(javax.swing.text.View),establishes the parent view for this view.
"javax.swing.text.View.setSize(float,float)",sets the size of the view.
"javax.swing.text.View.updateChildren(javax.swing.event.DocumentEvent.ElementChange,javax.swing.event.DocumentEvent,javax.swing.text.ViewFactory)","updates the child views in response to receiving notification that the model changed, and there is change record for the element this view is responsible for."
"javax.swing.text.View.updateLayout(javax.swing.event.DocumentEvent.ElementChange,javax.swing.event.DocumentEvent,java.awt.Shape)",updates the layout in response to receiving notification of change from the model.
"javax.swing.text.View.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
"javax.swing.text.WrappedPlainView.calculateBreakPosition(int,int)",this is called by the nested wrapped line views to determine the break location.
"javax.swing.text.WrappedPlainView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification from the document that attributes were changed in a location that this view is responsible for.
"javax.swing.text.WrappedPlainView.drawLine(int,int,java.awt.Graphics,int,int)","renders a line of text, suppressing whitespace at the end and expanding any tabs."
"javax.swing.text.WrappedPlainView.drawSelectedText(java.awt.Graphics,int,int,int,int)",renders the given range in the model as selected text.
"javax.swing.text.WrappedPlainView.drawUnselectedText(java.awt.Graphics,int,int,int,int)",renders the given range in the model as normal unselected text.
javax.swing.text.WrappedPlainView.getLineBuffer(),gives access to a buffer that can be used to fetch text from the associated document.
javax.swing.text.WrappedPlainView.getMaximumSpan(int),determines the maximum span for this view along an axis.
javax.swing.text.WrappedPlainView.getMinimumSpan(int),determines the minimum span for this view along an axis.
javax.swing.text.WrappedPlainView.getPreferredSpan(int),determines the preferred span for this view along an axis.
javax.swing.text.WrappedPlainView.getTabSize(),"returns the tab size set for the document, defaulting to 8."
"javax.swing.text.WrappedPlainView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was inserted into the document in a location that this view is responsible for.
javax.swing.text.WrappedPlainView.loadChildren(javax.swing.text.ViewFactory),loads all of the children to initialize the view.
"javax.swing.text.WrappedPlainView.nextTabStop(float,int)",returns the next tab stop position after a given reference position.
"javax.swing.text.WrappedPlainView.paint(java.awt.Graphics,java.awt.Shape)",renders using the given rendering surface and area on that surface.
"javax.swing.text.WrappedPlainView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was removed from the document in a location that this view is responsible for.
"javax.swing.text.WrappedPlainView.setSize(float,float)",sets the size of the view.
"javax.swing.text.ZoneView.createZone(int,int)",create a view to represent a zone for the given range within the model (which should be within the range of this objects responsibility).
javax.swing.text.ZoneView.getMaximumZoneSize(),get the current maximum zone size.
javax.swing.text.ZoneView.getMaxZonesLoaded(),get the current setting of the number of zones allowed to be loaded at the same time.
javax.swing.text.ZoneView.getViewIndexAtPosition(int),returns the child view index representing the given position in the model.
"javax.swing.text.ZoneView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was inserted into the document in a location that this view is responsible for.
javax.swing.text.ZoneView.isZoneLoaded(javax.swing.text.View),determine if a zone is in the loaded state.
javax.swing.text.ZoneView.loadChildren(javax.swing.text.ViewFactory),loads all of the children to initialize the view.
"javax.swing.text.ZoneView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was removed from the document in a location that this view is responsible for.
javax.swing.text.ZoneView.setMaximumZoneSize(int),set the desired maximum zone size.
javax.swing.text.ZoneView.setMaxZonesLoaded(int),sets the current setting of the number of zones allowed to be loaded at the same time.
javax.swing.text.ZoneView.unloadZone(javax.swing.text.View),unload a zone (convert the zone to its memory saving state).
"javax.swing.text.ZoneView.updateChildren(javax.swing.event.DocumentEvent.ElementChange,javax.swing.event.DocumentEvent,javax.swing.text.ViewFactory)","the superclass behavior will try to update the child views which is not desired in this case, since the children are zones and not directly effected by the changes to the associated element."
javax.swing.text.ZoneView.zoneWasLoaded(javax.swing.text.View),called by a zone when it gets loaded.
javax.swing.text.BadLocationException.offsetRequested(),returns the offset into the document that was not legal.
"javax.swing.text.html.BlockView.calculateMajorAxisRequirements(int,javax.swing.SizeRequirements)",calculate the requirements of the block along the major axis (i.
"javax.swing.text.html.BlockView.calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)",calculate the requirements of the block along the minor axis (i.
javax.swing.text.html.BlockView.getAlignment(int),gets the alignment.
javax.swing.text.html.BlockView.getAttributes(),fetches the attributes to use when rendering.
javax.swing.text.html.BlockView.getMaximumSpan(int),determines the maximum span for this view along an axis.
javax.swing.text.html.BlockView.getMinimumSpan(int),determines the minimum span for this view along an axis.
javax.swing.text.html.BlockView.getPreferredSpan(int),determines the preferred span for this view along an axis.
javax.swing.text.html.BlockView.getResizeWeight(int),gets the resize weight.
"javax.swing.text.html.BlockView.layoutMinorAxis(int,int,int[],int[])",performs layout for the minor axis of the box (i.
"javax.swing.text.html.BlockView.paint(java.awt.Graphics,java.awt.Shape)",renders using the given rendering surface and area on that surface.
javax.swing.text.html.BlockView.setParent(javax.swing.text.View),establishes the parent view for this view.
javax.swing.text.html.BlockView.setPropertiesFromAttributes(),update any cached values that come from attributes.
javax.swing.text.html.CSS.getAllAttributeKeys(),return the set of all possible css attribute keys.
javax.swing.text.html.CSS.getAttribute(java.lang.String),translates a string to a css.
javax.swing.text.html.CSS.Attribute.getDefaultValue(),fetch the default value for the attribute.
javax.swing.text.html.CSS.Attribute.isInherited(),indicates if the attribute should be inherited from the parent or not.
javax.swing.text.html.CSS.Attribute.toString(),the string representation of the attribute.
javax.swing.text.html.FormSubmitEvent.getData(),gets the form submission data.
javax.swing.text.html.FormSubmitEvent.getMethod(),gets the form method type.
javax.swing.text.html.FormView.actionPerformed(java.awt.event.ActionEvent),responsible for processing the actionevent.
javax.swing.text.html.FormView.createComponent(),create the component.
javax.swing.text.html.FormView.getMaximumSpan(int),determines the maximum span for this view along an axis.
javax.swing.text.html.FormView.imageSubmit(java.lang.String),"this method is called to submit a form in response to a click on an image -- an <input> form element of type ""image""."
javax.swing.text.html.FormView.submitData(java.lang.String),this method is responsible for submitting the form data.
javax.swing.text.html.HTML.getAllAttributeKeys(),returns the set of html attributes recognized.
javax.swing.text.html.HTML.getAllTags(),returns the set of actual html tags that are recognized by the default html reader.
javax.swing.text.html.HTML.getAttributeKey(java.lang.String),fetches an attribute constant for a well-known attribute name (i.
"javax.swing.text.html.HTML.getIntegerAttributeValue(javax.swing.text.AttributeSet,javax.swing.text.html.HTML.Attribute,int)",fetches an integer attribute value.
javax.swing.text.html.HTML.getTag(java.lang.String),fetches a tag constant for a well-known tag name (i.
javax.swing.text.html.HTML.Attribute.toString(),returns the string representation of this attribute.
javax.swing.text.html.HTML.Tag.breaksFlow(),"returns true if this tag causes a line break to the flow of data, otherwise returns false."
javax.swing.text.html.HTML.Tag.isBlock(),"returns true if this tag is a block tag, which is a tag used to add structure to a document."
javax.swing.text.html.HTML.Tag.isPreformatted(),"returns true if this tag is pre-formatted, which is true if the tag is either pre or textarea."
javax.swing.text.html.HTML.Tag.toString(),returns the string representation of the tag.
javax.swing.text.html.HTML.UnknownTag.equals(java.lang.Object),compares this object to the specified object.
javax.swing.text.html.HTML.UnknownTag.hashCode(),returns the hash code which corresponds to the string for this tag.
javax.swing.text.html.HTMLDocument.create(javax.swing.text.DefaultStyledDocument.ElementSpec[]),replaces the contents of the document with the given element specifications.
"javax.swing.text.html.HTMLDocument.createBranchElement(javax.swing.text.Element,javax.swing.text.AttributeSet)","creates a document branch element, that can contain other elements."
javax.swing.text.html.HTMLDocument.createDefaultRoot(),creates the root element to be used to represent the default document structure.
"javax.swing.text.html.HTMLDocument.createLeafElement(javax.swing.text.Element,javax.swing.text.AttributeSet,int,int)",creates a document leaf element that directly represents text (doesn't have any children).
javax.swing.text.html.HTMLDocument.fireChangedUpdate(javax.swing.event.DocumentEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.text.html.HTMLDocument.fireUndoableEditUpdate(javax.swing.event.UndoableEditEvent),notifies all listeners that have registered interest for notification on this event type.
javax.swing.text.html.HTMLDocument.getBase(),returns the location to resolve relative urls against.
javax.swing.text.html.HTMLDocument.getElement(java.lang.String),returns the element that has the given id attribute.
"javax.swing.text.html.HTMLDocument.getElement(javax.swing.text.Element,java.lang.Object,java.lang.Object)","returns the child element of e that contains the attribute, attribute with value value, or null if one isn't found."
javax.swing.text.html.HTMLDocument.getIterator(javax.swing.text.html.HTML.Tag),fetches an iterator for the specified html tag.
javax.swing.text.html.HTMLDocument.getParser(),returns the parser that is used when inserting html into the existing document.
javax.swing.text.html.HTMLDocument.getPreservesUnknownTags(),returns the behavior the parser observes when encountering unknown tags.
javax.swing.text.html.HTMLDocument.getReader(int),fetches the reader for the parser to use when loading the document with html.
"javax.swing.text.html.HTMLDocument.getReader(int,int,int,javax.swing.text.html.HTML.Tag)",returns the reader for the parser to use to load the document with html.
javax.swing.text.html.HTMLDocument.getStyleSheet(),fetches the stylesheet with the document-specific display rules (css) that were specified in the html document itself.
javax.swing.text.html.HTMLDocument.getTokenThreshold(),gets the number of tokens to buffer before trying to update the documents element structure.
"javax.swing.text.html.HTMLDocument.insert(int,javax.swing.text.DefaultStyledDocument.ElementSpec[])",inserts new elements in bulk.
"javax.swing.text.html.HTMLDocument.insertAfterEnd(javax.swing.text.Element,java.lang.String)",inserts the html specified as a string after the the end of the given element.
"javax.swing.text.html.HTMLDocument.insertAfterStart(javax.swing.text.Element,java.lang.String)",inserts the html specified as a string at the start of the element.
"javax.swing.text.html.HTMLDocument.insertBeforeEnd(javax.swing.text.Element,java.lang.String)",inserts the html specified as a string at the end of the element.
"javax.swing.text.html.HTMLDocument.insertBeforeStart(javax.swing.text.Element,java.lang.String)",inserts the html specified as a string before the start of the given element.
"javax.swing.text.html.HTMLDocument.insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent,javax.swing.text.AttributeSet)",updates document structure as a result of text insertion.
javax.swing.text.html.HTMLDocument.processHTMLFrameHyperlinkEvent(javax.swing.text.html.HTMLFrameHyperlinkEvent),processes hyperlinkevents that are generated by documents in an html frame.
javax.swing.text.html.HTMLDocument.setBase(java.net.URL),sets the location to resolve relative urls against.
"javax.swing.text.html.HTMLDocument.setInnerHTML(javax.swing.text.Element,java.lang.String)",replaces the children of the given element with the contents specified as an html string.
"javax.swing.text.html.HTMLDocument.setOuterHTML(javax.swing.text.Element,java.lang.String)",replaces the given element in the parent with the contents specified as an html string.
"javax.swing.text.html.HTMLDocument.setParagraphAttributes(int,int,javax.swing.text.AttributeSet,boolean)",sets attributes for a paragraph.
javax.swing.text.html.HTMLDocument.setParser(javax.swing.text.html.HTMLEditorKit.Parser),"sets the parser that is used by the methods that insert html into the existing document, such as setinnerhtml, and setouterhtml."
javax.swing.text.html.HTMLDocument.setPreservesUnknownTags(boolean),determines how unknown tags are handled by the parser.
javax.swing.text.html.HTMLDocument.setTokenThreshold(int),sets the number of tokens to buffer before trying to update the documents element structure.
javax.swing.text.html.HTMLDocument.Iterator.getAttributes(),return the attributes for this tag.
javax.swing.text.html.HTMLDocument.Iterator.getEndOffset(),returns the end of the range for which the current occurrence of the tag is defined and has the same attributes.
javax.swing.text.html.HTMLDocument.Iterator.getStartOffset(),returns the start of the range for which the current occurrence of the tag is defined and has the same attributes.
javax.swing.text.html.HTMLDocument.Iterator.getTag(),type of tag this iterator represents.
javax.swing.text.html.HTMLDocument.Iterator.isValid(),indicates if the iterator is currently representing an occurrence of a tag.
javax.swing.text.html.HTMLDocument.Iterator.next(),move the iterator forward to the next occurrence of the tag it represents.
javax.swing.text.html.HTMLEditorKit.clone(),creates a copy of the editor kit.
javax.swing.text.html.HTMLEditorKit.createDefaultDocument(),create an uninitialized text storage model that is appropriate for this type of editor.
"javax.swing.text.html.HTMLEditorKit.createInputAttributes(javax.swing.text.Element,javax.swing.text.MutableAttributeSet)",copies the key/values in elements attributeset into set.
javax.swing.text.html.HTMLEditorKit.deinstall(javax.swing.JEditorPane),called when the kit is being removed from the jeditorpane.
javax.swing.text.html.HTMLEditorKit.getAccessibleContext(),returns the accessiblecontext associated with this editor kit.
javax.swing.text.html.HTMLEditorKit.getActions(),fetches the command list for the editor.
javax.swing.text.html.HTMLEditorKit.getContentType(),get the mime type of the data that this kit represents support for.
javax.swing.text.html.HTMLEditorKit.getDefaultCursor(),returns the default cursor.
javax.swing.text.html.HTMLEditorKit.getInputAttributes(),gets the input attributes used for the styled editing actions.
javax.swing.text.html.HTMLEditorKit.getLinkCursor(),returns the cursor to use over hyper links.
javax.swing.text.html.HTMLEditorKit.getParser(),fetch the parser to use for reading html streams.
javax.swing.text.html.HTMLEditorKit.getStyleSheet(),get the set of styles currently being used to render the html elements.
javax.swing.text.html.HTMLEditorKit.getViewFactory(),fetch a factory that is suitable for producing views of any models that are produced by this kit.
"javax.swing.text.html.HTMLEditorKit.insertHTML(javax.swing.text.html.HTMLDocument,int,java.lang.String,int,int,javax.swing.text.html.HTML.Tag)",inserts html into an existing document.
javax.swing.text.html.HTMLEditorKit.install(javax.swing.JEditorPane),called when the kit is being installed into the a jeditorpane.
javax.swing.text.html.HTMLEditorKit.isAutoFormSubmission(),indicates whether an html form submission is processed automatically or only formsubmitevent is fired.
"javax.swing.text.html.HTMLEditorKit.read(java.io.Reader,javax.swing.text.Document,int)",inserts content from the given stream.
javax.swing.text.html.HTMLEditorKit.setAutoFormSubmission(boolean),specifies if an html form submission is processed automatically or only formsubmitevent is fired.
javax.swing.text.html.HTMLEditorKit.setDefaultCursor(java.awt.Cursor),sets the default cursor.
javax.swing.text.html.HTMLEditorKit.setLinkCursor(java.awt.Cursor),sets the cursor to use over links.
javax.swing.text.html.HTMLEditorKit.setStyleSheet(javax.swing.text.html.StyleSheet),set the set of styles to be used to render the various html elements.
"javax.swing.text.html.HTMLEditorKit.write(java.io.Writer,javax.swing.text.Document,int,int)",write content from a document to the given stream in a format appropriate for this kind of content handler.
javax.swing.text.html.HTMLEditorKit.HTMLFactory.create(javax.swing.text.Element),creates a view from an element.
"javax.swing.text.html.HTMLEditorKit.HTMLTextAction.elementCountToTag(javax.swing.text.html.HTMLDocument,int,javax.swing.text.html.HTML.Tag)","returns number of elements, starting at the deepest leaf, needed to get to an element representing tag."
"javax.swing.text.html.HTMLEditorKit.HTMLTextAction.findElementMatchingTag(javax.swing.text.html.HTMLDocument,int,javax.swing.text.html.HTML.Tag)",returns the deepest element at offset matching tag.
"javax.swing.text.html.HTMLEditorKit.HTMLTextAction.getElementsAt(javax.swing.text.html.HTMLDocument,int)",returns an array of the elements that contain offset.
javax.swing.text.html.HTMLEditorKit.InsertHTMLTextAction.actionPerformed(java.awt.event.ActionEvent),inserts the html into the document.
"javax.swing.text.html.HTMLEditorKit.InsertHTMLTextAction.insertAtBoundary(javax.swing.JEditorPane,javax.swing.text.html.HTMLDocument,int,javax.swing.text.Element,java.lang.String,javax.swing.text.html.HTML.Tag,javax.swing.text.html.HTML.Tag)",this is invoked when inserting at a boundary.
"javax.swing.text.html.HTMLEditorKit.InsertHTMLTextAction.insertHTML(javax.swing.JEditorPane,javax.swing.text.html.HTMLDocument,int,java.lang.String,int,int,javax.swing.text.html.HTML.Tag)",a cover for htmleditorkit.
"javax.swing.text.html.HTMLEditorKit.LinkController.activateLink(int,javax.swing.JEditorPane)",calls linkactivated on the associated jeditorpane if the given position represents a link.
javax.swing.text.html.HTMLEditorKit.LinkController.mouseClicked(java.awt.event.MouseEvent),called for a mouse click event.
"javax.swing.text.html.HTMLEditorKit.Parser.parse(java.io.Reader,javax.swing.text.html.HTMLEditorKit.ParserCallback,boolean)",parse the given stream and drive the given callback with the results of the parse.
javax.swing.text.html.HTMLEditorKit.ParserCallback.handleEndOfLineString(java.lang.String),"this is invoked after the stream has been parsed, but before flush."
javax.swing.text.html.HTMLFrameHyperlinkEvent.getTarget(),returns the target for the link.
javax.swing.text.html.HTMLWriter.closeOutUnwantedEmbeddedTags(javax.swing.text.AttributeSet),searches the attribute set and for each tag that is stored in the tag vector.
javax.swing.text.html.HTMLWriter.comment(javax.swing.text.Element),writes out comments.
javax.swing.text.html.HTMLWriter.emptyTag(javax.swing.text.Element),writes out all empty elements (all tags that have no corresponding end tag).
javax.swing.text.html.HTMLWriter.endTag(javax.swing.text.Element),writes out an end tag for the element.
javax.swing.text.html.HTMLWriter.isBlockTag(javax.swing.text.AttributeSet),determines if the html.
"javax.swing.text.html.HTMLWriter.matchNameAttribute(javax.swing.text.AttributeSet,javax.swing.text.html.HTML.Tag)",returns true if the styleconstants.
"javax.swing.text.html.HTMLWriter.output(char[],int,int)","this method is overriden to map any character entities, such as < to &lt;."
javax.swing.text.html.HTMLWriter.selectContent(javax.swing.text.AttributeSet),writes out the content of the select form element.
javax.swing.text.html.HTMLWriter.startTag(javax.swing.text.Element),writes out a start tag for the element.
javax.swing.text.html.HTMLWriter.synthesizedElement(javax.swing.text.Element),returns true if the element is a synthesized element.
javax.swing.text.html.HTMLWriter.text(javax.swing.text.Element),writes out text.
javax.swing.text.html.HTMLWriter.textAreaContent(javax.swing.text.AttributeSet),writes out text that is contained in a textarea form element.
javax.swing.text.html.HTMLWriter.write(),iterates over the element tree and controls the writing out of all the tags and its attributes.
javax.swing.text.html.HTMLWriter.writeAttributes(javax.swing.text.AttributeSet),writes out the attribute set.
javax.swing.text.html.HTMLWriter.writeEmbeddedTags(javax.swing.text.AttributeSet),searches for embedded tags in the attributeset and writes them out.
javax.swing.text.html.HTMLWriter.writeLineSeparator(),writes the line separator.
javax.swing.text.html.HTMLWriter.writeOption(javax.swing.text.html.Option),writes out the content of the option form element.
"javax.swing.text.html.ImageView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",invoked when the elements attributes have changed.
javax.swing.text.html.ImageView.getAlignment(int),determines the desired alignment for this view along an axis.
javax.swing.text.html.ImageView.getAltText(),returns the text to display if the image can't be loaded.
javax.swing.text.html.ImageView.getAttributes(),fetches the attributes to use when rendering.
javax.swing.text.html.ImageView.getImage(),returns the image to render.
javax.swing.text.html.ImageView.getImageURL(),"return a url for the image source, or null if it could not be determined."
javax.swing.text.html.ImageView.getLoadingImageIcon(),returns the icon to use while in the process of loading the image.
javax.swing.text.html.ImageView.getLoadsSynchronously(),returns true if the image should be loaded when first asked for.
javax.swing.text.html.ImageView.getNoImageIcon(),returns the icon to use if the image couldn't be found.
javax.swing.text.html.ImageView.getPreferredSpan(int),determines the preferred span for this view along an axis.
javax.swing.text.html.ImageView.getStyleSheet(),convenience method to get the stylesheet.
"javax.swing.text.html.ImageView.getToolTipText(float,float,java.awt.Shape)",for images the tooltip text comes from text specified with the alt attribute.
"javax.swing.text.html.ImageView.modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)",provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.
"javax.swing.text.html.ImageView.paint(java.awt.Graphics,java.awt.Shape)",paints the view.
javax.swing.text.html.ImageView.setLoadsSynchronously(boolean),sets how the image is loaded.
javax.swing.text.html.ImageView.setParent(javax.swing.text.View),establishes the parent view for this view.
javax.swing.text.html.ImageView.setPropertiesFromAttributes(),update any cached values that come from attributes.
"javax.swing.text.html.ImageView.setSize(float,float)",sets the size of the view.
"javax.swing.text.html.ImageView.viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias[])",provides a mapping from the view coordinate space to the logical coordinate space of the model.
"javax.swing.text.html.InlineView.breakView(int,int,float,float)",tries to break this view on the given axis.
"javax.swing.text.html.InlineView.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification from the document that attributes were changed in a location that this view is responsible for.
javax.swing.text.html.InlineView.getAttributes(),fetches the attributes to use when rendering.
"javax.swing.text.html.InlineView.getBreakWeight(int,float,float)",determines how attractive a break opportunity in this view is.
"javax.swing.text.html.InlineView.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was inserted into the document in a location that this view is responsible for.
"javax.swing.text.html.InlineView.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)",gives notification that something was removed from the document in a location that this view is responsible for.
javax.swing.text.html.InlineView.setPropertiesFromAttributes(),set the cached properties from the attributes.
javax.swing.text.html.ListView.getAlignment(int),calculates the desired shape of the list.
"javax.swing.text.html.ListView.paint(java.awt.Graphics,java.awt.Shape)",renders using the given rendering surface and area on that surface.
"javax.swing.text.html.ListView.paintChild(java.awt.Graphics,java.awt.Rectangle,int)",paints one of the children; called by paint().
javax.swing.text.html.MinimalHTMLWriter.endFontTag(),"this is no longer used, instead <span> will be written out."
javax.swing.text.html.MinimalHTMLWriter.inFontTag(),returns true if we are currently in a <font> tag.
javax.swing.text.html.MinimalHTMLWriter.isText(javax.swing.text.Element),returns true if the element is a text element.
javax.swing.text.html.MinimalHTMLWriter.startFontTag(java.lang.String),"this is no longer used, instead <span> will be written out."
javax.swing.text.html.MinimalHTMLWriter.text(javax.swing.text.Element),writes out text.
javax.swing.text.html.MinimalHTMLWriter.write(),generates html output from a styleddocument.
javax.swing.text.html.MinimalHTMLWriter.writeAttributes(javax.swing.text.AttributeSet),writes out all the attributes for the following types: styleconstants.
javax.swing.text.html.MinimalHTMLWriter.writeBody(),iterates over the elements in the document and processes elements based on whether they are branch elements or leaf elements.
javax.swing.text.html.MinimalHTMLWriter.writeComponent(javax.swing.text.Element),responsible for handling component elements; deliberately unimplemented.
"javax.swing.text.html.MinimalHTMLWriter.writeContent(javax.swing.text.Element,boolean)",writes out the attribute set in an html-compliant manner.
javax.swing.text.html.MinimalHTMLWriter.writeEndParagraph(),emits an end tag for a <p> tag.
javax.swing.text.html.MinimalHTMLWriter.writeEndTag(java.lang.String),writes out an end tag appropriately indented.
javax.swing.text.html.MinimalHTMLWriter.writeHeader(),"writes out the <head> and <style> tags, and then invokes writestyles() to write out all the named styles as the content of the <style> tag."
javax.swing.text.html.MinimalHTMLWriter.writeHTMLTags(javax.swing.text.AttributeSet),"generates bold <b>, italic <i>, and <u> tags for the text based on its attribute settings."
javax.swing.text.html.MinimalHTMLWriter.writeImage(javax.swing.text.Element),responsible for handling icon elements; deliberately unimplemented.
javax.swing.text.html.MinimalHTMLWriter.writeLeaf(javax.swing.text.Element),responsible for writing out other non-text leaf elements.
javax.swing.text.html.MinimalHTMLWriter.writeNonHTMLAttributes(javax.swing.text.AttributeSet),"writes out the remaining character-level attributes (attributes other than bold, italic, and underline) in an html-compliant way."
javax.swing.text.html.MinimalHTMLWriter.writeStartParagraph(javax.swing.text.Element),emits the start tag for a paragraph.
javax.swing.text.html.MinimalHTMLWriter.writeStartTag(java.lang.String),writes out a start tag appropriately indented.
javax.swing.text.html.MinimalHTMLWriter.writeStyles(),writes out all the named styles as the content of the <style> tag.
javax.swing.text.html.ObjectView.createComponent(),create the component.
javax.swing.text.html.Option.getAttributes(),fetch the attributes associated with this option.
javax.swing.text.html.Option.getLabel(),fetch the label associated with the option.
javax.swing.text.html.Option.getValue(),convenience method to return the string associated with the value attribute.
javax.swing.text.html.Option.isSelected(),fetches the selection state associated with this option.
javax.swing.text.html.Option.setLabel(java.lang.String),sets the label to be used for the option.
javax.swing.text.html.Option.setSelection(boolean),sets the selected state.
javax.swing.text.html.Option.toString(),string representation is the label.
"javax.swing.text.html.ParagraphView.calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)",calculate the needs for the paragraph along the minor axis.
javax.swing.text.html.ParagraphView.getAttributes(),fetches the attributes to use when rendering.
javax.swing.text.html.ParagraphView.getMaximumSpan(int),determines the maximum span for this view along an axis.
javax.swing.text.html.ParagraphView.getMinimumSpan(int),determines the minimum span for this view along an axis.
javax.swing.text.html.ParagraphView.getPreferredSpan(int),determines the preferred span for this view.
javax.swing.text.html.ParagraphView.isVisible(),indicates whether or not this view should be displayed.
"javax.swing.text.html.ParagraphView.paint(java.awt.Graphics,java.awt.Shape)",renders using the given rendering surface and area on that surface.
javax.swing.text.html.ParagraphView.setParent(javax.swing.text.View),establishes the parent view for this view.
javax.swing.text.html.ParagraphView.setPropertiesFromAttributes(),sets up the paragraph from css attributes instead of the values found in styleconstants (i.
"javax.swing.text.html.StyleSheet.addAttribute(javax.swing.text.AttributeSet,java.lang.Object,java.lang.Object)","adds an attribute to the given set, and returns the new representative set."
"javax.swing.text.html.StyleSheet.addAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)",adds a set of attributes to the element.
"javax.swing.text.html.StyleSheet.addCSSAttribute(javax.swing.text.MutableAttributeSet,javax.swing.text.html.CSS.Attribute,java.lang.String)",adds a css attribute to the given set.
"javax.swing.text.html.StyleSheet.addCSSAttributeFromHTML(javax.swing.text.MutableAttributeSet,javax.swing.text.html.CSS.Attribute,java.lang.String)",adds a css attribute to the given set.
javax.swing.text.html.StyleSheet.addRule(java.lang.String),adds a set of rules to the sheet.
javax.swing.text.html.StyleSheet.addStyleSheet(javax.swing.text.html.StyleSheet),adds the rules from the stylesheet ss to those of the receiver.
javax.swing.text.html.StyleSheet.createLargeAttributeSet(javax.swing.text.AttributeSet),creates a large set of attributes that should trade off space for time.
javax.swing.text.html.StyleSheet.createSmallAttributeSet(javax.swing.text.AttributeSet),creates a compact set of attributes that might be shared.
javax.swing.text.html.StyleSheet.getBackground(javax.swing.text.AttributeSet),takes a set of attributes and turn it into a background color specification.
javax.swing.text.html.StyleSheet.getBase(),returns the base.
javax.swing.text.html.StyleSheet.getBoxPainter(javax.swing.text.AttributeSet),fetches the box formatter to use for the given set of css attributes.
javax.swing.text.html.StyleSheet.getDeclaration(java.lang.String),translates a css declaration to an attributeset that represents the css declaration.
javax.swing.text.html.StyleSheet.getFont(javax.swing.text.AttributeSet),fetches the font to use for the given set of attributes.
javax.swing.text.html.StyleSheet.getForeground(javax.swing.text.AttributeSet),takes a set of attributes and turn it into a foreground color specification.
javax.swing.text.html.StyleSheet.getListPainter(javax.swing.text.AttributeSet),fetches the list formatter to use for the given set of css attributes.
javax.swing.text.html.StyleSheet.getPointSize(int),"returns the point size, given a size index."
javax.swing.text.html.StyleSheet.getPointSize(java.lang.String),"given a string such as ""+2"", ""-2"", or ""2"", returns a point size value."
"javax.swing.text.html.StyleSheet.getRule(javax.swing.text.html.HTML.Tag,javax.swing.text.Element)",fetches the style to use to render the given type of html tag.
javax.swing.text.html.StyleSheet.getRule(java.lang.String),fetches the rule that best matches the selector given in string form.
javax.swing.text.html.StyleSheet.getStyleSheets(),returns an array of the linked stylesheets.
javax.swing.text.html.StyleSheet.getViewAttributes(javax.swing.text.View),fetches a set of attributes to use in the view for displaying.
javax.swing.text.html.StyleSheet.importStyleSheet(java.net.URL),imports a style sheet from url.
"javax.swing.text.html.StyleSheet.loadRules(java.io.Reader,java.net.URL)",loads a set of rules that have been specified in terms of css1 grammar.
"javax.swing.text.html.StyleSheet.removeAttribute(javax.swing.text.AttributeSet,java.lang.Object)",removes an attribute from the set.
"javax.swing.text.html.StyleSheet.removeAttributes(javax.swing.text.AttributeSet,java.util.Enumeration<?>)",removes a set of attributes for the element.
"javax.swing.text.html.StyleSheet.removeAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)",removes a set of attributes.
javax.swing.text.html.StyleSheet.removeStyle(java.lang.String),removes a named style previously added to the document.
javax.swing.text.html.StyleSheet.removeStyleSheet(javax.swing.text.html.StyleSheet),removes the stylesheet ss from those of the receiver.
javax.swing.text.html.StyleSheet.setBase(java.net.URL),sets the base.
javax.swing.text.html.StyleSheet.setBaseFontSize(int),"sets the base font size, with valid values between 1 and 7."
javax.swing.text.html.StyleSheet.setBaseFontSize(java.lang.String),sets the base font size from the passed in string.
javax.swing.text.html.StyleSheet.stringToColor(java.lang.String),"converts a color string such as ""red"" or ""#nnnnnn"" to a color."
javax.swing.text.html.StyleSheet.translateHTMLToCSS(javax.swing.text.AttributeSet),converts a set of html attributes to an equivalent set of css attributes.
"javax.swing.text.html.StyleSheet.BoxPainter.getInset(int,javax.swing.text.View)","fetches the inset needed on a given side to account for the margin, border, and padding."
"javax.swing.text.html.StyleSheet.BoxPainter.paint(java.awt.Graphics,float,float,float,float,javax.swing.text.View)",paints the css box according to the attributes given.
"javax.swing.text.html.StyleSheet.ListPainter.paint(java.awt.Graphics,float,float,float,float,javax.swing.text.View,int)",paints the css list decoration according to the attributes given.
javax.swing.text.html.FormSubmitEvent.MethodType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.swing.text.html.FormSubmitEvent.MethodType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.swing.text.html.parser.ContentModel.empty(),return true if the content model could match an empty input stream.
javax.swing.text.html.parser.ContentModel.first(java.lang.Object),return true if the token could potentially be the first token in the input stream.
javax.swing.text.html.parser.ContentModel.first(),return the element that must be next.
javax.swing.text.html.parser.ContentModel.getElements(java.util.Vector<javax.swing.text.html.parser.Element>),update elemvec with the list of elements that are part of the this contentmodel.
javax.swing.text.html.parser.ContentModel.toString(),convert to a string.
javax.swing.text.html.parser.DocumentParser.handleEmptyTag(javax.swing.text.html.parser.TagElement),handle empty tag.
javax.swing.text.html.parser.DocumentParser.handleEndTag(javax.swing.text.html.parser.TagElement),handle end tag.
javax.swing.text.html.parser.DocumentParser.handleStartTag(javax.swing.text.html.parser.TagElement),handle start tag.
javax.swing.text.html.parser.DocumentParser.handleText(char[]),handle text.
"javax.swing.text.html.parser.DTD.defAttributeList(java.lang.String,int,int,java.lang.String,java.lang.String,javax.swing.text.html.parser.AttributeList)",creates and returns an attributelist.
"javax.swing.text.html.parser.DTD.defContentModel(int,java.lang.Object,javax.swing.text.html.parser.ContentModel)",creates and returns a new content model.
"javax.swing.text.html.parser.DTD.defElement(java.lang.String,int,boolean,boolean,javax.swing.text.html.parser.ContentModel,java.lang.String[],java.lang.String[],javax.swing.text.html.parser.AttributeList)",creates and returns an element.
"javax.swing.text.html.parser.DTD.defEntity(java.lang.String,int,int)",creates and returns a character entity.
"javax.swing.text.html.parser.DTD.defEntity(java.lang.String,int,java.lang.String)",creates and returns an entity.
"javax.swing.text.html.parser.DTD.defineAttributes(java.lang.String,javax.swing.text.html.parser.AttributeList)",defines attributes for an element.
"javax.swing.text.html.parser.DTD.defineElement(java.lang.String,int,boolean,boolean,javax.swing.text.html.parser.ContentModel,java.util.BitSet,java.util.BitSet,javax.swing.text.html.parser.AttributeList)",returns the element which matches the specified parameters.
"javax.swing.text.html.parser.DTD.defineEntity(java.lang.String,int,char[])",defines an entity.
javax.swing.text.html.parser.DTD.getDTD(java.lang.String),returns a dtd with the specified name.
javax.swing.text.html.parser.DTD.getElement(java.lang.String),gets an element by name.
javax.swing.text.html.parser.DTD.getElement(int),gets an element by index.
javax.swing.text.html.parser.DTD.getEntity(java.lang.String),gets an entity by name.
javax.swing.text.html.parser.DTD.getEntity(int),gets a character entity.
javax.swing.text.html.parser.DTD.getName(),gets the name of the dtd.
javax.swing.text.html.parser.DTD.read(java.io.DataInputStream),recreates a dtd from an archived format.
javax.swing.text.html.parser.DTD.toString(),returns a string representation of this dtd.
javax.swing.text.html.parser.Element.getAttribute(java.lang.String),get an attribute by name.
javax.swing.text.html.parser.Element.getAttributeByValue(java.lang.String),get an attribute by value.
javax.swing.text.html.parser.Element.getAttributes(),get the attributes.
javax.swing.text.html.parser.Element.getContent(),get content model.
javax.swing.text.html.parser.Element.getIndex(),get index.
javax.swing.text.html.parser.Element.getName(),get the name of the element.
javax.swing.text.html.parser.Element.getType(),get type.
javax.swing.text.html.parser.Element.isEmpty(),check if empty.
javax.swing.text.html.parser.Element.omitEnd(),return true if the end tag can be omitted.
javax.swing.text.html.parser.Element.omitStart(),return true if the start tag can be omitted.
javax.swing.text.html.parser.Element.toString(),convert to a string.
javax.swing.text.html.parser.Entity.getData(),returns the data.
javax.swing.text.html.parser.Entity.getName(),gets the name of the entity.
javax.swing.text.html.parser.Entity.getString(),returns the data as a string.
javax.swing.text.html.parser.Entity.getType(),gets the type of the entity.
javax.swing.text.html.parser.Entity.isGeneral(),returns true if it is a general entity.
javax.swing.text.html.parser.Entity.isParameter(),returns true if it is a parameter entity.
javax.swing.text.html.parser.Entity.name2type(java.lang.String),converts nm string to the corresponding entity type.
javax.swing.text.html.parser.Parser.endTag(boolean),handle an end tag.
"javax.swing.text.html.parser.Parser.error(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",invoke the error handler.
javax.swing.text.html.parser.Parser.handleComment(char[]),called when an html comment is encountered.
javax.swing.text.html.parser.Parser.handleEmptyTag(javax.swing.text.html.parser.TagElement),called when an empty tag is encountered.
javax.swing.text.html.parser.Parser.handleEndTag(javax.swing.text.html.parser.TagElement),called when an end tag is encountered.
"javax.swing.text.html.parser.Parser.handleError(int,java.lang.String)",an error has occurred.
javax.swing.text.html.parser.Parser.handleStartTag(javax.swing.text.html.parser.TagElement),called when a start tag is encountered.
javax.swing.text.html.parser.Parser.handleText(char[]),called when pcdata is encountered.
javax.swing.text.html.parser.Parser.handleTitle(char[]),called when an html title tag is encountered.
"javax.swing.text.html.parser.Parser.makeTag(javax.swing.text.html.parser.Element,boolean)",makes a tagelement.
javax.swing.text.html.parser.Parser.markFirstTime(javax.swing.text.html.parser.Element),marks the first time a tag has been seen in a document.
javax.swing.text.html.parser.Parser.parse(java.io.Reader),"parse an html stream, given a dtd."
javax.swing.text.html.parser.Parser.parseDTDMarkup(),parses th document declaration type markup declaration.
javax.swing.text.html.parser.Parser.parseMarkupDeclarations(java.lang.StringBuffer),parse markup declarations.
javax.swing.text.html.parser.Parser.startTag(javax.swing.text.html.parser.TagElement),handle a start tag.
javax.swing.text.rtf.RTFEditorKit.getContentType(),get the mime type of the data that this kit represents support for.
"javax.swing.text.rtf.RTFEditorKit.read(java.io.InputStream,javax.swing.text.Document,int)",insert content from the given stream which is expected to be in a format appropriate for this kind of content handler.
"javax.swing.text.rtf.RTFEditorKit.read(java.io.Reader,javax.swing.text.Document,int)","insert content from the given stream, which will be treated as plain text."
"javax.swing.text.rtf.RTFEditorKit.write(java.io.OutputStream,javax.swing.text.Document,int,int)",write content from a document to the given stream in a format appropriate for this kind of content handler.
"javax.swing.text.rtf.RTFEditorKit.write(java.io.Writer,javax.swing.text.Document,int,int)",write content from a document to the given stream as plain text.
"javax.swing.tree.MutableTreeNode.insert(javax.swing.tree.MutableTreeNode,int)",adds child to the receiver at index.
javax.swing.tree.MutableTreeNode.remove(int),removes the child at index from the receiver.
javax.swing.tree.MutableTreeNode.remove(javax.swing.tree.MutableTreeNode),removes node from the receiver.
javax.swing.tree.MutableTreeNode.removeFromParent(),removes the receiver from its parent.
javax.swing.tree.MutableTreeNode.setParent(javax.swing.tree.MutableTreeNode),sets the parent of the receiver to newparent.
javax.swing.tree.MutableTreeNode.setUserObject(java.lang.Object),resets the user object of the receiver to object.
javax.swing.tree.RowMapper.getRowsForPaths(javax.swing.tree.TreePath[]),returns the rows that the treepath instances in path are being displayed at.
"javax.swing.tree.TreeCellEditor.getTreeCellEditorComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int)",sets an initial value for the editor.
"javax.swing.tree.TreeCellRenderer.getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)",sets the value of the current tree cell to value.
javax.swing.tree.TreeModel.addTreeModelListener(javax.swing.event.TreeModelListener),adds a listener for the treemodelevent posted after the tree changes.
"javax.swing.tree.TreeModel.getChild(java.lang.Object,int)",returns the child of parent at index index in the parent's child array.
javax.swing.tree.TreeModel.getChildCount(java.lang.Object),returns the number of children of parent.
"javax.swing.tree.TreeModel.getIndexOfChild(java.lang.Object,java.lang.Object)",returns the index of child in parent.
javax.swing.tree.TreeModel.getRoot(),returns the root of the tree.
javax.swing.tree.TreeModel.isLeaf(java.lang.Object),returns true if node is a leaf.
javax.swing.tree.TreeModel.removeTreeModelListener(javax.swing.event.TreeModelListener),removes a listener previously added with addtreemodellistener.
"javax.swing.tree.TreeModel.valueForPathChanged(javax.swing.tree.TreePath,java.lang.Object)",messaged when the user has altered the value for the item identified by path to newvalue.
javax.swing.tree.TreeNode.children(),returns the children of the receiver as an enumeration.
javax.swing.tree.TreeNode.getAllowsChildren(),returns true if the receiver allows children.
javax.swing.tree.TreeNode.getChildAt(int),returns the child treenode at index childindex.
javax.swing.tree.TreeNode.getChildCount(),returns the number of children treenodes the receiver contains.
javax.swing.tree.TreeNode.getIndex(javax.swing.tree.TreeNode),returns the index of node in the receivers children.
javax.swing.tree.TreeNode.getParent(),returns the parent treenode of the receiver.
javax.swing.tree.TreeNode.isLeaf(),returns true if the receiver is a leaf.
javax.swing.tree.TreeSelectionModel.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
javax.swing.tree.TreeSelectionModel.addSelectionPath(javax.swing.tree.TreePath),adds path to the current selection.
javax.swing.tree.TreeSelectionModel.addSelectionPaths(javax.swing.tree.TreePath[]),adds paths to the current selection.
javax.swing.tree.TreeSelectionModel.addTreeSelectionListener(javax.swing.event.TreeSelectionListener),adds x to the list of listeners that are notified each time the set of selected treepaths changes.
javax.swing.tree.TreeSelectionModel.clearSelection(),empties the current selection.
javax.swing.tree.TreeSelectionModel.getLeadSelectionPath(),returns the last path that was added.
javax.swing.tree.TreeSelectionModel.getLeadSelectionRow(),returns the lead selection index.
javax.swing.tree.TreeSelectionModel.getMaxSelectionRow(),returns the largest value obtained from the rowmapper for the current set of selected treepaths.
javax.swing.tree.TreeSelectionModel.getMinSelectionRow(),returns the smallest value obtained from the rowmapper for the current set of selected treepaths.
javax.swing.tree.TreeSelectionModel.getRowMapper(),returns the rowmapper instance that is able to map a treepath to a row.
javax.swing.tree.TreeSelectionModel.getSelectionCount(),returns the number of paths that are selected.
javax.swing.tree.TreeSelectionModel.getSelectionMode(),"returns the current selection mode, one of single_tree_selection, contiguous_tree_selection or discontiguous_tree_selection."
javax.swing.tree.TreeSelectionModel.getSelectionPath(),returns the first path in the selection.
javax.swing.tree.TreeSelectionModel.getSelectionPaths(),returns the paths in the selection.
javax.swing.tree.TreeSelectionModel.getSelectionRows(),returns all of the currently selected rows.
javax.swing.tree.TreeSelectionModel.isPathSelected(javax.swing.tree.TreePath),"returns true if the path, path, is in the current selection."
javax.swing.tree.TreeSelectionModel.isRowSelected(int),returns true if the row identified by row is selected.
javax.swing.tree.TreeSelectionModel.isSelectionEmpty(),returns true if the selection is currently empty.
javax.swing.tree.TreeSelectionModel.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychangelistener from the listener list.
javax.swing.tree.TreeSelectionModel.removeSelectionPath(javax.swing.tree.TreePath),removes path from the selection.
javax.swing.tree.TreeSelectionModel.removeSelectionPaths(javax.swing.tree.TreePath[]),removes paths from the selection.
javax.swing.tree.TreeSelectionModel.removeTreeSelectionListener(javax.swing.event.TreeSelectionListener),removes x from the list of listeners that are notified each time the set of selected treepaths changes.
javax.swing.tree.TreeSelectionModel.resetRowSelection(),updates this object's mapping from treepaths to rows.
javax.swing.tree.TreeSelectionModel.setRowMapper(javax.swing.tree.RowMapper),sets the rowmapper instance.
javax.swing.tree.TreeSelectionModel.setSelectionMode(int),"sets the selection model, which must be one of single_tree_selection, contiguous_tree_selection or discontiguous_tree_selection."
javax.swing.tree.TreeSelectionModel.setSelectionPath(javax.swing.tree.TreePath),sets the selection to path.
javax.swing.tree.TreeSelectionModel.setSelectionPaths(javax.swing.tree.TreePath[]),sets the selection to path.
"javax.swing.tree.AbstractLayoutCache.getBounds(javax.swing.tree.TreePath,java.awt.Rectangle)",returns a rectangle giving the bounds needed to draw path.
javax.swing.tree.AbstractLayoutCache.getExpandedState(javax.swing.tree.TreePath),"returns true if the path is expanded, and visible."
javax.swing.tree.AbstractLayoutCache.getModel(),returns the treemodel that is providing the data.
javax.swing.tree.AbstractLayoutCache.getNodeDimensions(),"returns the object that renders nodes in the tree, and which is responsible for calculating the dimensions of individual nodes."
"javax.swing.tree.AbstractLayoutCache.getNodeDimensions(java.lang.Object,int,int,boolean,java.awt.Rectangle)","returns, by reference in placein, the size needed to represent value."
"javax.swing.tree.AbstractLayoutCache.getPathClosestTo(int,int)","returns the path to the node that is closest to x,y."
javax.swing.tree.AbstractLayoutCache.getPathForRow(int),returns the path for passed in row.
javax.swing.tree.AbstractLayoutCache.getPreferredHeight(),returns the preferred height.
javax.swing.tree.AbstractLayoutCache.getPreferredWidth(java.awt.Rectangle),returns the preferred width for the passed in region.
javax.swing.tree.AbstractLayoutCache.getRowCount(),number of rows being displayed.
javax.swing.tree.AbstractLayoutCache.getRowForPath(javax.swing.tree.TreePath),returns the row that the last item identified in path is visible at.
javax.swing.tree.AbstractLayoutCache.getRowHeight(),returns the height of each row.
javax.swing.tree.AbstractLayoutCache.getRowsForPaths(javax.swing.tree.TreePath[]),returns the rows that the treepath instances in path are being displayed at.
javax.swing.tree.AbstractLayoutCache.getSelectionModel(),returns the model used to maintain the selection.
javax.swing.tree.AbstractLayoutCache.getVisibleChildCount(javax.swing.tree.TreePath),returns the number of visible children for row.
javax.swing.tree.AbstractLayoutCache.getVisiblePathsFrom(javax.swing.tree.TreePath),returns an enumerator that increments over the visible paths starting at the passed in location.
javax.swing.tree.AbstractLayoutCache.invalidatePathBounds(javax.swing.tree.TreePath),"instructs the layoutcache that the bounds for path are invalid, and need to be updated."
javax.swing.tree.AbstractLayoutCache.invalidateSizes(),informs the treestate that it needs to recalculate all the sizes it is referencing.
javax.swing.tree.AbstractLayoutCache.isExpanded(javax.swing.tree.TreePath),returns true if the value identified by row is currently expanded.
javax.swing.tree.AbstractLayoutCache.isFixedRowHeight(),returns true if the height of each row is a fixed size.
javax.swing.tree.AbstractLayoutCache.isRootVisible(),returns true if the root node of the tree is displayed.
"javax.swing.tree.AbstractLayoutCache.setExpandedState(javax.swing.tree.TreePath,boolean)",marks the path path expanded state to isexpanded.
javax.swing.tree.AbstractLayoutCache.setModel(javax.swing.tree.TreeModel),sets the treemodel that will provide the data.
javax.swing.tree.AbstractLayoutCache.setNodeDimensions(javax.swing.tree.AbstractLayoutCache.NodeDimensions),sets the renderer that is responsible for drawing nodes in the tree and which is therefore responsible for calculating the dimensions of individual nodes.
javax.swing.tree.AbstractLayoutCache.setRootVisible(boolean),determines whether or not the root node from the treemodel is visible.
javax.swing.tree.AbstractLayoutCache.setRowHeight(int),sets the height of each cell.
javax.swing.tree.AbstractLayoutCache.setSelectionModel(javax.swing.tree.TreeSelectionModel),sets the treeselectionmodel used to manage the selection to new lsm.
javax.swing.tree.AbstractLayoutCache.treeNodesChanged(javax.swing.event.TreeModelEvent),invoked after a node (or a set of siblings) has changed in some way.
javax.swing.tree.AbstractLayoutCache.treeNodesInserted(javax.swing.event.TreeModelEvent),invoked after nodes have been inserted into the tree.
javax.swing.tree.AbstractLayoutCache.treeNodesRemoved(javax.swing.event.TreeModelEvent),invoked after nodes have been removed from the tree.
javax.swing.tree.AbstractLayoutCache.treeStructureChanged(javax.swing.event.TreeModelEvent),invoked after the tree has drastically changed structure from a given node down.
"javax.swing.tree.AbstractLayoutCache.NodeDimensions.getNodeDimensions(java.lang.Object,int,int,boolean,java.awt.Rectangle)","returns, by reference in bounds, the size and x origin to place value at."
javax.swing.tree.DefaultMutableTreeNode.add(javax.swing.tree.MutableTreeNode),removes newchild from its parent and makes it a child of this node by adding it to the end of this node's child array.
javax.swing.tree.DefaultMutableTreeNode.breadthFirstEnumeration(),creates and returns an enumeration that traverses the subtree rooted at this node in breadth-first order.
javax.swing.tree.DefaultMutableTreeNode.children(),creates and returns a forward-order enumeration of this node's children.
javax.swing.tree.DefaultMutableTreeNode.clone(),overridden to make clone public.
javax.swing.tree.DefaultMutableTreeNode.depthFirstEnumeration(),creates and returns an enumeration that traverses the subtree rooted at this node in depth-first order.
javax.swing.tree.DefaultMutableTreeNode.getAllowsChildren(),returns true if this node is allowed to have children.
javax.swing.tree.DefaultMutableTreeNode.getChildAfter(javax.swing.tree.TreeNode),"returns the child in this node's child array that immediately follows achild, which must be a child of this node."
javax.swing.tree.DefaultMutableTreeNode.getChildAt(int),returns the child at the specified index in this node's child array.
javax.swing.tree.DefaultMutableTreeNode.getChildBefore(javax.swing.tree.TreeNode),"returns the child in this node's child array that immediately precedes achild, which must be a child of this node."
javax.swing.tree.DefaultMutableTreeNode.getChildCount(),returns the number of children of this node.
javax.swing.tree.DefaultMutableTreeNode.getDepth(),returns the depth of the tree rooted at this node -- the longest distance from this node to a leaf.
javax.swing.tree.DefaultMutableTreeNode.getFirstChild(),returns this node's first child.
javax.swing.tree.DefaultMutableTreeNode.getFirstLeaf(),finds and returns the first leaf that is a descendant of this node -- either this node or its first child's first leaf.
javax.swing.tree.DefaultMutableTreeNode.getIndex(javax.swing.tree.TreeNode),returns the index of the specified child in this node's child array.
javax.swing.tree.DefaultMutableTreeNode.getLastChild(),returns this node's last child.
javax.swing.tree.DefaultMutableTreeNode.getLastLeaf(),finds and returns the last leaf that is a descendant of this node -- either this node or its last child's last leaf.
javax.swing.tree.DefaultMutableTreeNode.getLeafCount(),returns the total number of leaves that are descendants of this node.
javax.swing.tree.DefaultMutableTreeNode.getLevel(),returns the number of levels above this node -- the distance from the root to this node.
javax.swing.tree.DefaultMutableTreeNode.getNextLeaf(),returns the leaf after this node or null if this node is the last leaf in the tree.
javax.swing.tree.DefaultMutableTreeNode.getNextNode(),returns the node that follows this node in a preorder traversal of this node's tree.
javax.swing.tree.DefaultMutableTreeNode.getNextSibling(),returns the next sibling of this node in the parent's children array.
javax.swing.tree.DefaultMutableTreeNode.getParent(),returns this node's parent or null if this node has no parent.
javax.swing.tree.DefaultMutableTreeNode.getPath(),"returns the path from the root, to get to this node."
"javax.swing.tree.DefaultMutableTreeNode.getPathToRoot(javax.swing.tree.TreeNode,int)","builds the parents of node up to and including the root node, where the original node is the last element in the returned array."
javax.swing.tree.DefaultMutableTreeNode.getPreviousLeaf(),returns the leaf before this node or null if this node is the first leaf in the tree.
javax.swing.tree.DefaultMutableTreeNode.getPreviousNode(),returns the node that precedes this node in a preorder traversal of this node's tree.
javax.swing.tree.DefaultMutableTreeNode.getPreviousSibling(),returns the previous sibling of this node in the parent's children array.
javax.swing.tree.DefaultMutableTreeNode.getRoot(),returns the root of the tree that contains this node.
javax.swing.tree.DefaultMutableTreeNode.getSharedAncestor(javax.swing.tree.DefaultMutableTreeNode),returns the nearest common ancestor to this node and anode.
javax.swing.tree.DefaultMutableTreeNode.getSiblingCount(),returns the number of siblings of this node.
javax.swing.tree.DefaultMutableTreeNode.getUserObject(),returns this node's user object.
javax.swing.tree.DefaultMutableTreeNode.getUserObjectPath(),"returns the user object path, from the root, to get to this node."
"javax.swing.tree.DefaultMutableTreeNode.insert(javax.swing.tree.MutableTreeNode,int)","removes newchild from its present parent (if it has a parent), sets the child's parent to this node, and then adds the child to this node's child array at index childindex."
javax.swing.tree.DefaultMutableTreeNode.isLeaf(),returns true if this node has no children.
javax.swing.tree.DefaultMutableTreeNode.isNodeAncestor(javax.swing.tree.TreeNode),"returns true if anothernode is an ancestor of this node -- if it is this node, this node's parent, or an ancestor of this node's parent."
javax.swing.tree.DefaultMutableTreeNode.isNodeChild(javax.swing.tree.TreeNode),returns true if anode is a child of this node.
javax.swing.tree.DefaultMutableTreeNode.isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode),"returns true if anothernode is a descendant of this node -- if it is this node, one of this node's children, or a descendant of one of this node's children."
javax.swing.tree.DefaultMutableTreeNode.isNodeRelated(javax.swing.tree.DefaultMutableTreeNode),returns true if and only if anode is in the same tree as this node.
javax.swing.tree.DefaultMutableTreeNode.isNodeSibling(javax.swing.tree.TreeNode),returns true if anothernode is a sibling of (has the same parent as) this node.
javax.swing.tree.DefaultMutableTreeNode.isRoot(),returns true if this node is the root of the tree.
javax.swing.tree.DefaultMutableTreeNode.pathFromAncestorEnumeration(javax.swing.tree.TreeNode),creates and returns an enumeration that follows the path from ancestor to this node.
javax.swing.tree.DefaultMutableTreeNode.postorderEnumeration(),creates and returns an enumeration that traverses the subtree rooted at this node in postorder.
javax.swing.tree.DefaultMutableTreeNode.preorderEnumeration(),creates and returns an enumeration that traverses the subtree rooted at this node in preorder.
javax.swing.tree.DefaultMutableTreeNode.remove(int),removes the child at the specified index from this node's children and sets that node's parent to null.
javax.swing.tree.DefaultMutableTreeNode.remove(javax.swing.tree.MutableTreeNode),"removes achild from this node's child array, giving it a null parent."
javax.swing.tree.DefaultMutableTreeNode.removeAllChildren(),"removes all of this node's children, setting their parents to null."
javax.swing.tree.DefaultMutableTreeNode.removeFromParent(),"removes the subtree rooted at this node from the tree, giving this node a null parent."
javax.swing.tree.DefaultMutableTreeNode.setAllowsChildren(boolean),determines whether or not this node is allowed to have children.
javax.swing.tree.DefaultMutableTreeNode.setParent(javax.swing.tree.MutableTreeNode),sets this node's parent to newparent but does not change the parent's child array.
javax.swing.tree.DefaultMutableTreeNode.setUserObject(java.lang.Object),sets the user object for this node to userobject.
javax.swing.tree.DefaultMutableTreeNode.toString(),"returns the result of sending tostring() to this node's user object, or the empty string if the node has no user object."
javax.swing.tree.DefaultTreeCellEditor.actionPerformed(java.awt.event.ActionEvent),"messaged when the timer fires, this will start the editing session."
javax.swing.tree.DefaultTreeCellEditor.addCellEditorListener(javax.swing.event.CellEditorListener),adds the celleditorlistener.
javax.swing.tree.DefaultTreeCellEditor.cancelCellEditing(),messages cancelcellediting to the realeditor and removes it from this instance.
javax.swing.tree.DefaultTreeCellEditor.canEditImmediately(java.util.EventObject),"returns true if event is null, or it is a mouseevent with a click count > 2 and inhitregion returns true."
javax.swing.tree.DefaultTreeCellEditor.createContainer(),creates the container to manage placement of editingcomponent.
javax.swing.tree.DefaultTreeCellEditor.createTreeCellEditor(),this is invoked if a treecelleditor is not supplied in the constructor.
javax.swing.tree.DefaultTreeCellEditor.getBorderSelectionColor(),returns the color the border is drawn.
javax.swing.tree.DefaultTreeCellEditor.getCellEditorListeners(),returns an array of all the celleditorlisteners added to this defaulttreecelleditor with addcelleditorlistener().
javax.swing.tree.DefaultTreeCellEditor.getCellEditorValue(),returns the value currently being edited.
javax.swing.tree.DefaultTreeCellEditor.getFont(),gets the font used for editing.
"javax.swing.tree.DefaultTreeCellEditor.getTreeCellEditorComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int)",configures the editor.
"javax.swing.tree.DefaultTreeCellEditor.inHitRegion(int,int)",returns true if the passed in location is a valid mouse location to start editing from.
javax.swing.tree.DefaultTreeCellEditor.isCellEditable(java.util.EventObject),"if the realeditor returns true to this message, prepareforediting is messaged and true is returned."
javax.swing.tree.DefaultTreeCellEditor.prepareForEditing(),invoked just before editing is to start.
javax.swing.tree.DefaultTreeCellEditor.removeCellEditorListener(javax.swing.event.CellEditorListener),removes the previously added celleditorlistener.
javax.swing.tree.DefaultTreeCellEditor.setBorderSelectionColor(java.awt.Color),sets the color to use for the border.
javax.swing.tree.DefaultTreeCellEditor.setFont(java.awt.Font),sets the font to edit with.
javax.swing.tree.DefaultTreeCellEditor.setTree(javax.swing.JTree),sets the tree currently editing for.
javax.swing.tree.DefaultTreeCellEditor.shouldSelectCell(java.util.EventObject),messages the realeditor for the return value.
javax.swing.tree.DefaultTreeCellEditor.shouldStartEditingTimer(java.util.EventObject),returns true if event is a mouseevent and the click count is 1.
javax.swing.tree.DefaultTreeCellEditor.startEditingTimer(),starts the editing timer.
javax.swing.tree.DefaultTreeCellEditor.stopCellEditing(),"if the realeditor will allow editing to stop, the realeditor is removed and true is returned, otherwise false is returned."
javax.swing.tree.DefaultTreeCellEditor.valueChanged(javax.swing.event.TreeSelectionEvent),resets lastpath.
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",overridden for performance reasons.
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,byte,byte)",overridden for performance reasons.
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,char,char)",overridden for performance reasons.
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,short,short)",overridden for performance reasons.
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,int,int)",overridden for performance reasons.
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,long,long)",overridden for performance reasons.
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,float,float)",overridden for performance reasons.
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,double,double)",overridden for performance reasons.
"javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,boolean,boolean)",overridden for performance reasons.
javax.swing.tree.DefaultTreeCellRenderer.getBackgroundNonSelectionColor(),returns the background color to be used for non selected nodes.
javax.swing.tree.DefaultTreeCellRenderer.getBackgroundSelectionColor(),returns the color to use for the background if node is selected.
javax.swing.tree.DefaultTreeCellRenderer.getBorderSelectionColor(),returns the color the border is drawn.
javax.swing.tree.DefaultTreeCellRenderer.getClosedIcon(),returns the icon used to represent non-leaf nodes that are not expanded.
javax.swing.tree.DefaultTreeCellRenderer.getDefaultClosedIcon(),"returns the default icon, for the current laf, that is used to represent non-leaf nodes that are not expanded."
javax.swing.tree.DefaultTreeCellRenderer.getDefaultLeafIcon(),"returns the default icon, for the current laf, that is used to represent leaf nodes."
javax.swing.tree.DefaultTreeCellRenderer.getDefaultOpenIcon(),"returns the default icon, for the current laf, that is used to represent non-leaf nodes that are expanded."
javax.swing.tree.DefaultTreeCellRenderer.getFont(),gets the font of this component.
javax.swing.tree.DefaultTreeCellRenderer.getLeafIcon(),returns the icon used to represent leaf nodes.
javax.swing.tree.DefaultTreeCellRenderer.getOpenIcon(),returns the icon used to represent non-leaf nodes that are expanded.
javax.swing.tree.DefaultTreeCellRenderer.getTextNonSelectionColor(),returns the color the text is drawn with when the node isn't selected.
javax.swing.tree.DefaultTreeCellRenderer.getTextSelectionColor(),returns the color the text is drawn with when the node is selected.
"javax.swing.tree.DefaultTreeCellRenderer.getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)",configures the renderer based on the passed in components.
javax.swing.tree.DefaultTreeCellRenderer.invalidate(),overridden for performance reasons.
javax.swing.tree.DefaultTreeCellRenderer.paint(java.awt.Graphics),paints the value.
"javax.swing.tree.DefaultTreeCellRenderer.repaint(long,int,int,int,int)",overridden for performance reasons.
javax.swing.tree.DefaultTreeCellRenderer.repaint(java.awt.Rectangle),overridden for performance reasons.
javax.swing.tree.DefaultTreeCellRenderer.repaint(),overridden for performance reasons.
javax.swing.tree.DefaultTreeCellRenderer.revalidate(),overridden for performance reasons.
javax.swing.tree.DefaultTreeCellRenderer.setBackground(java.awt.Color),subclassed to map coloruiresources to null.
javax.swing.tree.DefaultTreeCellRenderer.setBackgroundNonSelectionColor(java.awt.Color),sets the background color to be used for non selected nodes.
javax.swing.tree.DefaultTreeCellRenderer.setBackgroundSelectionColor(java.awt.Color),sets the color to use for the background if node is selected.
javax.swing.tree.DefaultTreeCellRenderer.setBorderSelectionColor(java.awt.Color),sets the color to use for the border.
javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon(javax.swing.Icon),sets the icon used to represent non-leaf nodes that are not expanded.
javax.swing.tree.DefaultTreeCellRenderer.setFont(java.awt.Font),subclassed to map fontuiresources to null.
javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon(javax.swing.Icon),sets the icon used to represent leaf nodes.
javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon(javax.swing.Icon),sets the icon used to represent non-leaf nodes that are expanded.
javax.swing.tree.DefaultTreeCellRenderer.setTextNonSelectionColor(java.awt.Color),sets the color the text is drawn with when the node isn't selected.
javax.swing.tree.DefaultTreeCellRenderer.setTextSelectionColor(java.awt.Color),sets the color the text is drawn with when the node is selected.
javax.swing.tree.DefaultTreeCellRenderer.updateUI(),resets the ui property to a value from the current look and feel.
javax.swing.tree.DefaultTreeCellRenderer.validate(),overridden for performance reasons.
javax.swing.tree.DefaultTreeModel.addTreeModelListener(javax.swing.event.TreeModelListener),adds a listener for the treemodelevent posted after the tree changes.
javax.swing.tree.DefaultTreeModel.asksAllowsChildren(),tells how leaf nodes are determined.
"javax.swing.tree.DefaultTreeModel.fireTreeNodesChanged(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])",notifies all listeners that have registered interest for notification on this event type.
"javax.swing.tree.DefaultTreeModel.fireTreeNodesInserted(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])",notifies all listeners that have registered interest for notification on this event type.
"javax.swing.tree.DefaultTreeModel.fireTreeNodesRemoved(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])",notifies all listeners that have registered interest for notification on this event type.
"javax.swing.tree.DefaultTreeModel.fireTreeStructureChanged(java.lang.Object,java.lang.Object[],int[],java.lang.Object[])",notifies all listeners that have registered interest for notification on this event type.
"javax.swing.tree.DefaultTreeModel.getChild(java.lang.Object,int)",returns the child of parent at index index in the parent's child array.
javax.swing.tree.DefaultTreeModel.getChildCount(java.lang.Object),returns the number of children of parent.
"javax.swing.tree.DefaultTreeModel.getIndexOfChild(java.lang.Object,java.lang.Object)",returns the index of child in parent.
javax.swing.tree.DefaultTreeModel.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this model.
javax.swing.tree.DefaultTreeModel.getPathToRoot(javax.swing.tree.TreeNode),"builds the parents of node up to and including the root node, where the original node is the last element in the returned array."
"javax.swing.tree.DefaultTreeModel.getPathToRoot(javax.swing.tree.TreeNode,int)","builds the parents of node up to and including the root node, where the original node is the last element in the returned array."
javax.swing.tree.DefaultTreeModel.getRoot(),returns the root of the tree.
javax.swing.tree.DefaultTreeModel.getTreeModelListeners(),returns an array of all the tree model listeners registered on this model.
"javax.swing.tree.DefaultTreeModel.insertNodeInto(javax.swing.tree.MutableTreeNode,javax.swing.tree.MutableTreeNode,int)",invoked this to insert newchild at location index in parents children.
javax.swing.tree.DefaultTreeModel.isLeaf(java.lang.Object),returns whether the specified node is a leaf node.
javax.swing.tree.DefaultTreeModel.nodeChanged(javax.swing.tree.TreeNode),invoke this method after you've changed how node is to be represented in the tree.
"javax.swing.tree.DefaultTreeModel.nodesChanged(javax.swing.tree.TreeNode,int[])",invoke this method after you've changed how the children identified by childindicies are to be represented in the tree.
javax.swing.tree.DefaultTreeModel.nodeStructureChanged(javax.swing.tree.TreeNode),invoke this method if you've totally changed the children of node and its children's children.
"javax.swing.tree.DefaultTreeModel.nodesWereInserted(javax.swing.tree.TreeNode,int[])",invoke this method after you've inserted some treenodes into node.
"javax.swing.tree.DefaultTreeModel.nodesWereRemoved(javax.swing.tree.TreeNode,int[],java.lang.Object[])",invoke this method after you've removed some treenodes from node.
javax.swing.tree.DefaultTreeModel.reload(),invoke this method if you've modified the treenodes upon which this model depends.
javax.swing.tree.DefaultTreeModel.reload(javax.swing.tree.TreeNode),invoke this method if you've modified the treenodes upon which this model depends.
javax.swing.tree.DefaultTreeModel.removeNodeFromParent(javax.swing.tree.MutableTreeNode),message this to remove node from its parent.
javax.swing.tree.DefaultTreeModel.removeTreeModelListener(javax.swing.event.TreeModelListener),removes a listener previously added with addtreemodellistener().
javax.swing.tree.DefaultTreeModel.setAsksAllowsChildren(boolean),sets whether or not to test leafness by asking getallowschildren() or isleaf() to the treenodes.
javax.swing.tree.DefaultTreeModel.setRoot(javax.swing.tree.TreeNode),sets the root to root.
"javax.swing.tree.DefaultTreeModel.valueForPathChanged(javax.swing.tree.TreePath,java.lang.Object)",this sets the user object of the treenode identified by path and posts a node changed.
javax.swing.tree.DefaultTreeSelectionModel.addPropertyChangeListener(java.beans.PropertyChangeListener),adds a propertychangelistener to the listener list.
javax.swing.tree.DefaultTreeSelectionModel.addSelectionPath(javax.swing.tree.TreePath),adds path to the current selection.
javax.swing.tree.DefaultTreeSelectionModel.addSelectionPaths(javax.swing.tree.TreePath[]),adds paths to the current selection.
javax.swing.tree.DefaultTreeSelectionModel.addTreeSelectionListener(javax.swing.event.TreeSelectionListener),adds x to the list of listeners that are notified each time the set of selected treepaths changes.
javax.swing.tree.DefaultTreeSelectionModel.arePathsContiguous(javax.swing.tree.TreePath[]),"returns true if the paths are contiguous, or this object has no rowmapper."
javax.swing.tree.DefaultTreeSelectionModel.canPathsBeAdded(javax.swing.tree.TreePath[]),used to test if a particular set of treepaths can be added.
javax.swing.tree.DefaultTreeSelectionModel.canPathsBeRemoved(javax.swing.tree.TreePath[]),returns true if the paths can be removed without breaking the continuity of the model.
javax.swing.tree.DefaultTreeSelectionModel.clearSelection(),empties the current selection.
javax.swing.tree.DefaultTreeSelectionModel.clone(),returns a clone of this object with the same selection.
javax.swing.tree.DefaultTreeSelectionModel.fireValueChanged(javax.swing.event.TreeSelectionEvent),notifies all listeners that are registered for tree selection events on this object.
javax.swing.tree.DefaultTreeSelectionModel.getLeadSelectionPath(),returns the last path that was added.
javax.swing.tree.DefaultTreeSelectionModel.getLeadSelectionRow(),returns the lead selection index.
javax.swing.tree.DefaultTreeSelectionModel.getListeners(java.lang.Class<T>),returns an array of all the objects currently registered as foolisteners upon this model.
javax.swing.tree.DefaultTreeSelectionModel.getMaxSelectionRow(),returns the largest value obtained from the rowmapper for the current set of selected treepaths.
javax.swing.tree.DefaultTreeSelectionModel.getMinSelectionRow(),returns the smallest value obtained from the rowmapper for the current set of selected treepaths.
javax.swing.tree.DefaultTreeSelectionModel.getPropertyChangeListeners(),returns an array of all the property change listeners registered on this defaulttreeselectionmodel.
javax.swing.tree.DefaultTreeSelectionModel.getRowMapper(),returns the rowmapper instance that is able to map a treepath to a row.
javax.swing.tree.DefaultTreeSelectionModel.getSelectionCount(),returns the number of paths that are selected.
javax.swing.tree.DefaultTreeSelectionModel.getSelectionMode(),"returns the selection mode, one of single_tree_selection, discontiguous_tree_selection or contiguous_tree_selection."
javax.swing.tree.DefaultTreeSelectionModel.getSelectionPath(),returns the first path in the selection.
javax.swing.tree.DefaultTreeSelectionModel.getSelectionPaths(),returns the selection.
javax.swing.tree.DefaultTreeSelectionModel.getSelectionRows(),returns the selection in terms of rows.
javax.swing.tree.DefaultTreeSelectionModel.getTreeSelectionListeners(),returns an array of all the tree selection listeners registered on this model.
javax.swing.tree.DefaultTreeSelectionModel.insureRowContinuity(),makes sure the currently selected treepaths are valid for the current selection mode.
javax.swing.tree.DefaultTreeSelectionModel.insureUniqueness(),this method is obsolete and its implementation is now a noop.
javax.swing.tree.DefaultTreeSelectionModel.isPathSelected(javax.swing.tree.TreePath),"returns true if the path, path, is in the current selection."
javax.swing.tree.DefaultTreeSelectionModel.isRowSelected(int),returns true if the row identified by row is selected.
javax.swing.tree.DefaultTreeSelectionModel.isSelectionEmpty(),returns true if the selection is currently empty.
javax.swing.tree.DefaultTreeSelectionModel.removePropertyChangeListener(java.beans.PropertyChangeListener),removes a propertychangelistener from the listener list.
javax.swing.tree.DefaultTreeSelectionModel.removeSelectionPath(javax.swing.tree.TreePath),removes path from the selection.
javax.swing.tree.DefaultTreeSelectionModel.removeSelectionPaths(javax.swing.tree.TreePath[]),removes paths from the selection.
javax.swing.tree.DefaultTreeSelectionModel.removeTreeSelectionListener(javax.swing.event.TreeSelectionListener),removes x from the list of listeners that are notified each time the set of selected treepaths changes.
javax.swing.tree.DefaultTreeSelectionModel.resetRowSelection(),updates this object's mapping from treepath to rows.
javax.swing.tree.DefaultTreeSelectionModel.setRowMapper(javax.swing.tree.RowMapper),sets the rowmapper instance.
javax.swing.tree.DefaultTreeSelectionModel.setSelectionMode(int),"sets the selection model, which must be one of single_tree_selection, contiguous_tree_selection or discontiguous_tree_selection."
javax.swing.tree.DefaultTreeSelectionModel.setSelectionPath(javax.swing.tree.TreePath),sets the selection to path.
javax.swing.tree.DefaultTreeSelectionModel.setSelectionPaths(javax.swing.tree.TreePath[]),sets the selection.
javax.swing.tree.DefaultTreeSelectionModel.toString(),returns a string that displays and identifies this object's properties.
javax.swing.tree.DefaultTreeSelectionModel.updateLeadIndex(),updates the leadindex instance variable.
"javax.swing.tree.FixedHeightLayoutCache.getBounds(javax.swing.tree.TreePath,java.awt.Rectangle)",returns a rectangle giving the bounds needed to draw path.
javax.swing.tree.FixedHeightLayoutCache.getExpandedState(javax.swing.tree.TreePath),"returns true if the path is expanded, and visible."
"javax.swing.tree.FixedHeightLayoutCache.getPathClosestTo(int,int)","returns the path to the node that is closest to x,y."
javax.swing.tree.FixedHeightLayoutCache.getPathForRow(int),returns the path for passed in row.
javax.swing.tree.FixedHeightLayoutCache.getRowCount(),returns the number of visible rows.
javax.swing.tree.FixedHeightLayoutCache.getRowForPath(javax.swing.tree.TreePath),returns the row that the last item identified in path is visible at.
javax.swing.tree.FixedHeightLayoutCache.getVisibleChildCount(javax.swing.tree.TreePath),returns the number of visible children for row.
javax.swing.tree.FixedHeightLayoutCache.getVisiblePathsFrom(javax.swing.tree.TreePath),returns an enumerator that increments over the visible paths starting at the passed in location.
javax.swing.tree.FixedHeightLayoutCache.invalidatePathBounds(javax.swing.tree.TreePath),"does nothing, fixedheightlayoutcache doesn't cache width, and that is all that could change."
javax.swing.tree.FixedHeightLayoutCache.invalidateSizes(),informs the treestate that it needs to recalculate all the sizes it is referencing.
javax.swing.tree.FixedHeightLayoutCache.isExpanded(javax.swing.tree.TreePath),returns true if the value identified by row is currently expanded.
"javax.swing.tree.FixedHeightLayoutCache.setExpandedState(javax.swing.tree.TreePath,boolean)",marks the path path expanded state to isexpanded.
javax.swing.tree.FixedHeightLayoutCache.setModel(javax.swing.tree.TreeModel),sets the treemodel that will provide the data.
javax.swing.tree.FixedHeightLayoutCache.setRootVisible(boolean),determines whether or not the root node from the treemodel is visible.
javax.swing.tree.FixedHeightLayoutCache.setRowHeight(int),sets the height of each cell.
javax.swing.tree.FixedHeightLayoutCache.treeNodesChanged(javax.swing.event.TreeModelEvent),invoked after a node (or a set of siblings) has changed in some way.
javax.swing.tree.FixedHeightLayoutCache.treeNodesInserted(javax.swing.event.TreeModelEvent),invoked after nodes have been inserted into the tree.
javax.swing.tree.FixedHeightLayoutCache.treeNodesRemoved(javax.swing.event.TreeModelEvent),invoked after nodes have been removed from the tree.
javax.swing.tree.FixedHeightLayoutCache.treeStructureChanged(javax.swing.event.TreeModelEvent),invoked after the tree has drastically changed structure from a given node down.
javax.swing.tree.TreePath.equals(java.lang.Object),compares this treepath to the specified object.
javax.swing.tree.TreePath.getLastPathComponent(),returns the last element of this path.
javax.swing.tree.TreePath.getParentPath(),returns the treepath of the parent.
javax.swing.tree.TreePath.getPath(),returns an ordered array of the elements of this treepath.
javax.swing.tree.TreePath.getPathComponent(int),returns the path element at the specified index.
javax.swing.tree.TreePath.getPathCount(),returns the number of elements in the path.
javax.swing.tree.TreePath.hashCode(),returns the hash code of this treepath.
javax.swing.tree.TreePath.isDescendant(javax.swing.tree.TreePath),returns true if atreepath is a descendant of this treepath.
javax.swing.tree.TreePath.pathByAddingChild(java.lang.Object),returns a new path containing all the elements of this path plus child.
javax.swing.tree.TreePath.toString(),returns a string that displays and identifies this object's properties.
"javax.swing.tree.VariableHeightLayoutCache.getBounds(javax.swing.tree.TreePath,java.awt.Rectangle)",returns the rectangle enclosing the label portion into which the item identified by path will be drawn.
javax.swing.tree.VariableHeightLayoutCache.getExpandedState(javax.swing.tree.TreePath),"returns true if the path is expanded, and visible."
"javax.swing.tree.VariableHeightLayoutCache.getPathClosestTo(int,int)","returns the path to the node that is closest to x,y."
javax.swing.tree.VariableHeightLayoutCache.getPathForRow(int),returns the path for row.
javax.swing.tree.VariableHeightLayoutCache.getPreferredHeight(),returns the preferred height.
javax.swing.tree.VariableHeightLayoutCache.getPreferredWidth(java.awt.Rectangle),returns the preferred width and height for the region in visibleregion.
javax.swing.tree.VariableHeightLayoutCache.getRowCount(),returns the number of visible rows.
javax.swing.tree.VariableHeightLayoutCache.getRowForPath(javax.swing.tree.TreePath),returns the row where the last item identified in path is visible.
javax.swing.tree.VariableHeightLayoutCache.getVisibleChildCount(javax.swing.tree.TreePath),returns the number of visible children for path.
javax.swing.tree.VariableHeightLayoutCache.getVisiblePathsFrom(javax.swing.tree.TreePath),returns an enumerator that increments over the visible paths starting at the passed in location.
javax.swing.tree.VariableHeightLayoutCache.invalidatePathBounds(javax.swing.tree.TreePath),"instructs the layoutcache that the bounds for path are invalid, and need to be updated."
javax.swing.tree.VariableHeightLayoutCache.invalidateSizes(),informs the treestate that it needs to recalculate all the sizes it is referencing.
javax.swing.tree.VariableHeightLayoutCache.isExpanded(javax.swing.tree.TreePath),returns true if the value identified by path is currently expanded.
"javax.swing.tree.VariableHeightLayoutCache.setExpandedState(javax.swing.tree.TreePath,boolean)",marks the path path expanded state to isexpanded.
javax.swing.tree.VariableHeightLayoutCache.setModel(javax.swing.tree.TreeModel),sets the treemodel that will provide the data.
javax.swing.tree.VariableHeightLayoutCache.setNodeDimensions(javax.swing.tree.AbstractLayoutCache.NodeDimensions),sets the renderer that is responsible for drawing nodes in the tree.
javax.swing.tree.VariableHeightLayoutCache.setRootVisible(boolean),determines whether or not the root node from the treemodel is visible.
javax.swing.tree.VariableHeightLayoutCache.setRowHeight(int),sets the height of each cell.
javax.swing.tree.VariableHeightLayoutCache.treeNodesChanged(javax.swing.event.TreeModelEvent),invoked after a node (or a set of siblings) has changed in some way.
javax.swing.tree.VariableHeightLayoutCache.treeNodesInserted(javax.swing.event.TreeModelEvent),invoked after nodes have been inserted into the tree.
javax.swing.tree.VariableHeightLayoutCache.treeNodesRemoved(javax.swing.event.TreeModelEvent),invoked after nodes have been removed from the tree.
javax.swing.tree.VariableHeightLayoutCache.treeStructureChanged(javax.swing.event.TreeModelEvent),invoked after the tree has drastically changed structure from a given node down.
"javax.swing.undo.StateEditable.restoreState(,?>)",upon receiving this message the receiver should extract any relevant state out of state.
"javax.swing.undo.StateEditable.storeState(,java.lang.Object>)",upon receiving this message the receiver should place any relevant state into state.
javax.swing.undo.UndoableEdit.addEdit(javax.swing.undo.UndoableEdit),adds an undoableedit to this undoableedit.
javax.swing.undo.UndoableEdit.canRedo(),returns true if this edit may be redone.
javax.swing.undo.UndoableEdit.canUndo(),returns true if this edit may be undone.
javax.swing.undo.UndoableEdit.die(),informs the edit that it should no longer be used.
javax.swing.undo.UndoableEdit.getPresentationName(),"returns a localized, human-readable description of this edit, suitable for use in a change log, for example."
javax.swing.undo.UndoableEdit.getRedoPresentationName(),"returns a localized, human-readable description of the redoable form of this edit, suitable for use as a redo menu item, for example."
javax.swing.undo.UndoableEdit.getUndoPresentationName(),"returns a localized, human-readable description of the undoable form of this edit, suitable for use as an undo menu item, for example."
javax.swing.undo.UndoableEdit.isSignificant(),returns true if this edit is considered significant.
javax.swing.undo.UndoableEdit.redo(),re-applies the edit.
javax.swing.undo.UndoableEdit.replaceEdit(javax.swing.undo.UndoableEdit),returns true if this undoableedit should replace anedit.
javax.swing.undo.UndoableEdit.undo(),undo the edit.
javax.swing.undo.AbstractUndoableEdit.addEdit(javax.swing.undo.UndoableEdit),this default implementation returns false.
javax.swing.undo.AbstractUndoableEdit.canRedo(),returns true if this edit is alive and hasbeendone is false.
javax.swing.undo.AbstractUndoableEdit.canUndo(),returns true if this edit is alive and hasbeendone is true.
javax.swing.undo.AbstractUndoableEdit.die(),sets alive to false.
javax.swing.undo.AbstractUndoableEdit.getPresentationName(),"this default implementation returns """"."
javax.swing.undo.AbstractUndoableEdit.getRedoPresentationName(),retreives the value from the defaults table with key abstractundoableedit.
javax.swing.undo.AbstractUndoableEdit.getUndoPresentationName(),retreives the value from the defaults table with key abstractundoableedit.
javax.swing.undo.AbstractUndoableEdit.isSignificant(),this default implementation returns true.
javax.swing.undo.AbstractUndoableEdit.redo(),throws cannotredoexception if canredo returns false.
javax.swing.undo.AbstractUndoableEdit.replaceEdit(javax.swing.undo.UndoableEdit),this default implementation returns false.
javax.swing.undo.AbstractUndoableEdit.toString(),returns a string that displays and identifies this object's properties.
javax.swing.undo.AbstractUndoableEdit.undo(),throws cannotundoexception if canundo returns false.
javax.swing.undo.CompoundEdit.addEdit(javax.swing.undo.UndoableEdit),"if this edit is inprogress, accepts anedit and returns true."
javax.swing.undo.CompoundEdit.canRedo(),returns false if isinprogress or if super returns false.
javax.swing.undo.CompoundEdit.canUndo(),returns false if isinprogress or if super returns false.
javax.swing.undo.CompoundEdit.die(),"sends die to each subedit, in the reverse of the order that they were added."
javax.swing.undo.CompoundEdit.end(),sets inprogress to false.
javax.swing.undo.CompoundEdit.getPresentationName(),returns getpresentationname from the last undoableedit added to edits.
javax.swing.undo.CompoundEdit.getRedoPresentationName(),returns getredopresentationname from the last undoableedit added to edits.
javax.swing.undo.CompoundEdit.getUndoPresentationName(),returns getundopresentationname from the last undoableedit added to edits.
javax.swing.undo.CompoundEdit.isInProgress(),"returns true if this edit is in progress--that is, it has not received end."
javax.swing.undo.CompoundEdit.isSignificant(),returns true if any of the undoableedits in edits do.
javax.swing.undo.CompoundEdit.lastEdit(),"returns the last undoableedit in edits, or null if edits is empty."
javax.swing.undo.CompoundEdit.redo(),sends redo to all contained undoableedits in the order in which they were added.
javax.swing.undo.CompoundEdit.toString(),returns a string that displays and identifies this object's properties.
javax.swing.undo.CompoundEdit.undo(),sends undo to all contained undoableedits in the reverse of the order in which they were added.
javax.swing.undo.StateEdit.end(),gets the post-edit state of the stateeditable object and ends the edit.
javax.swing.undo.StateEdit.getPresentationName(),gets the presentation name for this edit.
javax.swing.undo.StateEdit.redo(),tells the edited object to apply the state after the edit.
javax.swing.undo.StateEdit.removeRedundantState(),remove redundant key/values in state hashtables.
javax.swing.undo.StateEdit.undo(),tells the edited object to apply the state prior to the edit.
javax.swing.undo.UndoableEditSupport._postEdit(javax.swing.undo.UndoableEdit),called only from postedit and endupdate.
javax.swing.undo.UndoableEditSupport.addUndoableEditListener(javax.swing.event.UndoableEditListener),registers an undoableeditlistener.
javax.swing.undo.UndoableEditSupport.createCompoundEdit(),called only from beginupdate.
javax.swing.undo.UndoableEditSupport.endUpdate(),deadlock warning: calling this method may call undoableedithappened in all listeners.
javax.swing.undo.UndoableEditSupport.getUndoableEditListeners(),returns an array of all the undoableeditlisteners added to this undoableeditsupport with addundoableeditlistener().
javax.swing.undo.UndoableEditSupport.getUpdateLevel(),returns the update level value.
javax.swing.undo.UndoableEditSupport.postEdit(javax.swing.undo.UndoableEdit),deadlock warning: calling this method may call undoableedithappened in all listeners.
javax.swing.undo.UndoableEditSupport.removeUndoableEditListener(javax.swing.event.UndoableEditListener),removes an undoableeditlistener.
javax.swing.undo.UndoableEditSupport.toString(),returns a string that displays and identifies this object's properties.
javax.swing.undo.UndoManager.addEdit(javax.swing.undo.UndoableEdit),"adds an undoableedit to this undomanager, if it's possible."
javax.swing.undo.UndoManager.canRedo(),returns true if edits may be redone.
javax.swing.undo.UndoManager.canUndo(),returns true if edits may be undone.
javax.swing.undo.UndoManager.canUndoOrRedo(),returns true if it is possible to invoke undo or redo.
javax.swing.undo.UndoManager.discardAllEdits(),empties the undo manager sending each edit a die message in the process.
javax.swing.undo.UndoManager.editToBeRedone(),returns the the next significant edit to be redone if redo is invoked.
javax.swing.undo.UndoManager.editToBeUndone(),returns the the next significant edit to be undone if undo is invoked.
javax.swing.undo.UndoManager.end(),turns this undomanager into a normal compoundedit.
javax.swing.undo.UndoManager.getLimit(),returns the maximum number of edits this undomanager holds.
javax.swing.undo.UndoManager.getRedoPresentationName(),returns a description of the redoable form of this edit.
javax.swing.undo.UndoManager.getUndoOrRedoPresentationName(),convenience method that returns either getundopresentationname or getredopresentationname.
javax.swing.undo.UndoManager.getUndoPresentationName(),returns a description of the undoable form of this edit.
javax.swing.undo.UndoManager.redo(),redoes the appropriate edits.
javax.swing.undo.UndoManager.redoTo(javax.swing.undo.UndoableEdit),"redoes all changes from the index of the next edit to edit, updating the index of the next edit appropriately."
javax.swing.undo.UndoManager.setLimit(int),sets the maximum number of edits this undomanager holds.
javax.swing.undo.UndoManager.toString(),returns a string that displays and identifies this object's properties.
"javax.swing.undo.UndoManager.trimEdits(int,int)",removes edits in the specified range.
javax.swing.undo.UndoManager.trimForLimit(),"reduces the number of queued edits to a range of size limit, centered on the index of the next edit."
javax.swing.undo.UndoManager.undo(),undoes the appropriate edits.
javax.swing.undo.UndoManager.undoableEditHappened(javax.swing.event.UndoableEditEvent),an undoableeditlistener method.
javax.swing.undo.UndoManager.undoOrRedo(),convenience method that invokes one of undo or redo.
javax.swing.undo.UndoManager.undoTo(javax.swing.undo.UndoableEdit),"undoes all changes from the index of the next edit to edit, updating the index of the next edit appropriately."
javax.tools.Diagnostic.getCode(),gets a diagnostic code indicating the type of diagnostic.
javax.tools.Diagnostic.getColumnNumber(),gets the column number of the character offset returned by getposition().
javax.tools.Diagnostic.getEndPosition(),gets the character offset from the beginning of the file associated with this diagnostic that indicates the end of the problem.
javax.tools.Diagnostic.getKind(),"gets the kind of this diagnostic, for example, error or warning."
javax.tools.Diagnostic.getLineNumber(),gets the line number of the character offset returned by getposition().
javax.tools.Diagnostic.getMessage(java.util.Locale),gets a localized message for the given locale.
javax.tools.Diagnostic.getPosition(),gets a character offset from the beginning of the source object associated with this diagnostic that indicates the location of the problem.
javax.tools.Diagnostic.getSource(),gets the source object associated with this diagnostic.
javax.tools.Diagnostic.getStartPosition(),gets the character offset from the beginning of the file associated with this diagnostic that indicates the start of the problem.
javax.tools.DiagnosticListener.report(javax.tools.Diagnostic<? extends javax.tools.DiagnosticListener>),invoked when a problem is found.
"javax.tools.DocumentationTool.getStandardFileManager(javax.tools.DiagnosticListener<? super javax.tools.JavaFileObject>,java.util.Locale,java.nio.charset.Charset)",gets a new instance of the standard file manager implementation for this tool.
"javax.tools.DocumentationTool.getTask(java.io.Writer,javax.tools.JavaFileManager,javax.tools.DiagnosticListener<? super javax.tools.JavaFileObject>,java.lang.Class<?>,java.lang.Iterable<java.lang.String>,java.lang.Iterable<? extends javax.tools.JavaFileObject>)",creates a future for a documentation task with the given components and arguments.
javax.tools.DocumentationTool.DocumentationTask.call(),performs this documentation task.
javax.tools.DocumentationTool.DocumentationTask.setLocale(java.util.Locale),set the locale to be applied when formatting diagnostics and other localized data.
javax.tools.FileObject.delete(),deletes this file object.
javax.tools.FileObject.getCharContent(boolean),"gets the character content of this file object, if available."
javax.tools.FileObject.getLastModified(),gets the time this file object was last modified.
javax.tools.FileObject.getName(),gets a user-friendly name for this file object.
javax.tools.FileObject.openInputStream(),gets an inputstream for this file object.
javax.tools.FileObject.openOutputStream(),gets an outputstream for this file object.
javax.tools.FileObject.openReader(boolean),gets a reader for this object.
javax.tools.FileObject.openWriter(),gets a writer for this file object.
javax.tools.FileObject.toUri(),returns a uri identifying this file object.
"javax.tools.JavaCompiler.getStandardFileManager(javax.tools.DiagnosticListener<? super javax.tools.JavaFileObject>,java.util.Locale,java.nio.charset.Charset)",gets a new instance of the standard file manager implementation for this tool.
"javax.tools.JavaCompiler.getTask(java.io.Writer,javax.tools.JavaFileManager,javax.tools.DiagnosticListener<? super javax.tools.JavaFileObject>,java.lang.Iterable<java.lang.String>,java.lang.Iterable<java.lang.String>,java.lang.Iterable<? extends javax.tools.JavaFileObject>)",creates a future for a compilation task with the given components and arguments.
javax.tools.JavaCompiler.CompilationTask.call(),performs this compilation task.
javax.tools.JavaCompiler.CompilationTask.setLocale(java.util.Locale),set the locale to be applied when formatting diagnostics and other localized data.
javax.tools.JavaCompiler.CompilationTask.setProcessors(java.lang.Iterable<? extends javax.annotation.processing.Processor>),sets processors (for annotation processing).
javax.tools.JavaFileManager.close(),releases any resources opened by this file manager directly or indirectly.
javax.tools.JavaFileManager.flush(),flushes any resources opened for output by this file manager directly or indirectly.
javax.tools.JavaFileManager.getClassLoader(javax.tools.JavaFileManager.Location),gets a class loader for loading plug-ins from the given location.
"javax.tools.JavaFileManager.getFileForInput(javax.tools.JavaFileManager.Location,java.lang.String,java.lang.String)",gets a file object for input representing the specified relative name in the specified package in the given location.
"javax.tools.JavaFileManager.getFileForOutput(javax.tools.JavaFileManager.Location,java.lang.String,java.lang.String,javax.tools.FileObject)",gets a file object for output representing the specified relative name in the specified package in the given location.
"javax.tools.JavaFileManager.getJavaFileForInput(javax.tools.JavaFileManager.Location,java.lang.String,javax.tools.JavaFileObject.Kind)",gets a file object for input representing the specified class of the specified kind in the given location.
"javax.tools.JavaFileManager.getJavaFileForOutput(javax.tools.JavaFileManager.Location,java.lang.String,javax.tools.JavaFileObject.Kind,javax.tools.FileObject)",gets a file object for output representing the specified class of the specified kind in the given location.
"javax.tools.JavaFileManager.handleOption(java.lang.String,java.util.Iterator<java.lang.String>)",handles one option.
javax.tools.JavaFileManager.hasLocation(javax.tools.JavaFileManager.Location),determines if a location is known to this file manager.
"javax.tools.JavaFileManager.inferBinaryName(javax.tools.JavaFileManager.Location,javax.tools.JavaFileObject)",infers a binary name of a file object based on a location.
"javax.tools.JavaFileManager.isSameFile(javax.tools.FileObject,javax.tools.FileObject)",compares two file objects and return true if they represent the same underlying object.
"javax.tools.JavaFileManager.list(javax.tools.JavaFileManager.Location,java.lang.String,java.util.Set<javax.tools.JavaFileObject.Kind>,boolean)",lists all file objects matching the given criteria in the given location.
javax.tools.JavaFileManager.Location.getName(),gets the name of this location.
javax.tools.JavaFileManager.Location.isOutputLocation(),determines if this is an output location.
javax.tools.JavaFileObject.getAccessLevel(),provides a hint about the access level of the class represented by this file object.
javax.tools.JavaFileObject.getKind(),gets the kind of this file object.
javax.tools.JavaFileObject.getNestingKind(),provides a hint about the nesting level of the class represented by this file object.
"javax.tools.JavaFileObject.isNameCompatible(java.lang.String,javax.tools.JavaFileObject.Kind)",checks if this file object is compatible with the specified simple name and kind.
javax.tools.OptionChecker.isSupportedOption(java.lang.String),"determines if the given option is supported and if so, the number of arguments the option takes."
javax.tools.StandardJavaFileManager.getJavaFileObjects(java.io.File...),gets file objects representing the given files.
javax.tools.StandardJavaFileManager.getJavaFileObjects(java.lang.String...),gets file objects representing the given file names.
javax.tools.StandardJavaFileManager.getJavaFileObjectsFromFiles(java.lang.Iterable<? extends java.io.File>),gets file objects representing the given files.
javax.tools.StandardJavaFileManager.getJavaFileObjectsFromStrings(java.lang.Iterable<java.lang.String>),gets file objects representing the given file names.
javax.tools.StandardJavaFileManager.getLocation(javax.tools.JavaFileManager.Location),gets the path associated with the given location.
"javax.tools.StandardJavaFileManager.isSameFile(javax.tools.FileObject,javax.tools.FileObject)","compares two file objects and return true if they represent the same canonical file, zip file entry, or entry in any file system based container."
"javax.tools.StandardJavaFileManager.setLocation(javax.tools.JavaFileManager.Location,java.lang.Iterable<? extends java.io.File>)",associates the given path with the given location.
javax.tools.Tool.getSourceVersions(),gets the source versions of the java™ programming language supported by this tool.
"javax.tools.Tool.run(java.io.InputStream,java.io.OutputStream,java.io.OutputStream,java.lang.String...)",run the tool with the given i/o channels and arguments.
javax.tools.DiagnosticCollector.getDiagnostics(),gets a list view of diagnostics collected by this object.
javax.tools.SimpleJavaFileObject.delete(),this implementation does nothing.
javax.tools.SimpleJavaFileObject.getAccessLevel(),this implementation returns null.
javax.tools.SimpleJavaFileObject.getCharContent(boolean),this implementation always throws unsupportedoperationexception.
javax.tools.SimpleJavaFileObject.getLastModified(),this implementation returns 0l.
javax.tools.SimpleJavaFileObject.getNestingKind(),this implementation returns null.
"javax.tools.SimpleJavaFileObject.isNameCompatible(java.lang.String,javax.tools.JavaFileObject.Kind)",this implementation compares the path of its uri to the given simple name.
javax.tools.SimpleJavaFileObject.openInputStream(),this implementation always throws unsupportedoperationexception.
javax.tools.SimpleJavaFileObject.openOutputStream(),this implementation always throws unsupportedoperationexception.
javax.tools.SimpleJavaFileObject.openReader(boolean),wraps the result of getcharcontent(boolean) in a reader.
javax.tools.SimpleJavaFileObject.openWriter(),wraps the result of openoutputstream in a writer.
javax.tools.ToolProvider.getSystemDocumentationTool(),gets the java™ programming language documentation tool provided with this platform.
javax.tools.ToolProvider.getSystemJavaCompiler(),gets the java™ programming language compiler provided with this platform.
javax.tools.ToolProvider.getSystemToolClassLoader(),returns the class loader for tools provided with this platform.
javax.tools.Diagnostic.Kind.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.tools.Diagnostic.Kind.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.tools.DocumentationTool.Location.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.tools.DocumentationTool.Location.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.tools.JavaFileObject.Kind.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.tools.JavaFileObject.Kind.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.tools.StandardLocation.locationFor(java.lang.String),gets a location object with the given name.
javax.tools.StandardLocation.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.tools.StandardLocation.values(),"returns an array containing the constants of this enum type, in the order they are declared."
"javax.transaction.xa.XAResource.commit(javax.transaction.xa.Xid,boolean)",commits the global transaction specified by xid.
"javax.transaction.xa.XAResource.end(javax.transaction.xa.Xid,int)",ends the work performed on behalf of a transaction branch.
javax.transaction.xa.XAResource.forget(javax.transaction.xa.Xid),tells the resource manager to forget about a heuristically completed transaction branch.
javax.transaction.xa.XAResource.getTransactionTimeout(),obtains the current transaction timeout value set for this xaresource instance.
javax.transaction.xa.XAResource.isSameRM(javax.transaction.xa.XAResource),this method is called to determine if the resource manager instance represented by the target object is the same as the resouce manager instance represented by the parameter xares.
javax.transaction.xa.XAResource.prepare(javax.transaction.xa.Xid),ask the resource manager to prepare for a transaction commit of the transaction specified in xid.
javax.transaction.xa.XAResource.recover(int),obtains a list of prepared transaction branches from a resource manager.
javax.transaction.xa.XAResource.rollback(javax.transaction.xa.Xid),informs the resource manager to roll back work done on behalf of a transaction branch.
javax.transaction.xa.XAResource.setTransactionTimeout(int),sets the current transaction timeout value for this xaresource instance.
"javax.transaction.xa.XAResource.start(javax.transaction.xa.Xid,int)",starts work on behalf of a transaction branch specified in xid.
javax.transaction.xa.Xid.getBranchQualifier(),obtain the transaction branch identifier part of xid as an array of bytes.
javax.transaction.xa.Xid.getFormatId(),obtain the format identifier part of the xid.
javax.transaction.xa.Xid.getGlobalTransactionId(),obtain the global transaction identifier part of xid as an array of bytes.
javax.xml.bind.DatatypeConverterInterface.parseAnySimpleType(java.lang.String),return a string containing the lexical representation of the simple type.
javax.xml.bind.DatatypeConverterInterface.parseBase64Binary(java.lang.String),converts the string argument into an array of bytes.
javax.xml.bind.DatatypeConverterInterface.parseBoolean(java.lang.String),converts the string argument into a boolean value.
javax.xml.bind.DatatypeConverterInterface.parseByte(java.lang.String),converts the string argument into a byte value.
javax.xml.bind.DatatypeConverterInterface.parseDate(java.lang.String),converts the string argument into a calendar value.
javax.xml.bind.DatatypeConverterInterface.parseDateTime(java.lang.String),converts the string argument into a calendar value.
javax.xml.bind.DatatypeConverterInterface.parseDecimal(java.lang.String),converts the string argument into a bigdecimal value.
javax.xml.bind.DatatypeConverterInterface.parseDouble(java.lang.String),converts the string argument into a double value.
javax.xml.bind.DatatypeConverterInterface.parseFloat(java.lang.String),converts the string argument into a float value.
javax.xml.bind.DatatypeConverterInterface.parseHexBinary(java.lang.String),converts the string argument into an array of bytes.
javax.xml.bind.DatatypeConverterInterface.parseInt(java.lang.String),convert the string argument into an int value.
javax.xml.bind.DatatypeConverterInterface.parseInteger(java.lang.String),convert the string argument into a biginteger value.
javax.xml.bind.DatatypeConverterInterface.parseLong(java.lang.String),converts the string argument into a long value.
"javax.xml.bind.DatatypeConverterInterface.parseQName(java.lang.String,javax.xml.namespace.NamespaceContext)",converts the string argument into a qname value.
javax.xml.bind.DatatypeConverterInterface.parseShort(java.lang.String),converts the string argument into a short value.
javax.xml.bind.DatatypeConverterInterface.parseString(java.lang.String),convert the string argument into a string.
javax.xml.bind.DatatypeConverterInterface.parseTime(java.lang.String),converts the string argument into a calendar value.
javax.xml.bind.DatatypeConverterInterface.parseUnsignedInt(java.lang.String),converts the string argument into a long value.
javax.xml.bind.DatatypeConverterInterface.parseUnsignedShort(java.lang.String),converts the string argument into an int value.
javax.xml.bind.DatatypeConverterInterface.printAnySimpleType(java.lang.String),converts a string value into a string.
javax.xml.bind.DatatypeConverterInterface.printBase64Binary(byte[]),converts an array of bytes into a string.
javax.xml.bind.DatatypeConverterInterface.printBoolean(boolean),converts a boolean value into a string.
javax.xml.bind.DatatypeConverterInterface.printByte(byte),converts a byte value into a string.
javax.xml.bind.DatatypeConverterInterface.printDate(java.util.Calendar),converts a calendar value into a string.
javax.xml.bind.DatatypeConverterInterface.printDateTime(java.util.Calendar),converts a calendar value into a string.
javax.xml.bind.DatatypeConverterInterface.printDecimal(java.math.BigDecimal),converts a bigdecimal value into a string.
javax.xml.bind.DatatypeConverterInterface.printDouble(double),converts a double value into a string.
javax.xml.bind.DatatypeConverterInterface.printFloat(float),converts a float value into a string.
javax.xml.bind.DatatypeConverterInterface.printHexBinary(byte[]),converts an array of bytes into a string.
javax.xml.bind.DatatypeConverterInterface.printInt(int),converts an int value into a string.
javax.xml.bind.DatatypeConverterInterface.printInteger(java.math.BigInteger),converts a biginteger value into a string.
javax.xml.bind.DatatypeConverterInterface.printLong(long),converts a long value into a string.
"javax.xml.bind.DatatypeConverterInterface.printQName(javax.xml.namespace.QName,javax.xml.namespace.NamespaceContext)",converts a qname instance into a string.
javax.xml.bind.DatatypeConverterInterface.printShort(short),converts a short value into a string.
javax.xml.bind.DatatypeConverterInterface.printString(java.lang.String),converts the string argument into a string.
javax.xml.bind.DatatypeConverterInterface.printTime(java.util.Calendar),converts a calendar value into a string.
javax.xml.bind.DatatypeConverterInterface.printUnsignedInt(long),converts a long value into a string.
javax.xml.bind.DatatypeConverterInterface.printUnsignedShort(int),converts an int value into a string.
javax.xml.bind.Marshaller.getAdapter(java.lang.Class<A>),gets the adapter associated with the specified type.
javax.xml.bind.Marshaller.getEventHandler(),return the current event handler or the default event handler if one hasn't been set.
javax.xml.bind.Marshaller.getListener(),return marshaller.
javax.xml.bind.Marshaller.getNode(java.lang.Object),get a dom tree view of the content tree(optional).
javax.xml.bind.Marshaller.getProperty(java.lang.String),get the particular property in the underlying implementation of marshaller.
javax.xml.bind.Marshaller.getSchema(),get the jaxp 1.
"javax.xml.bind.Marshaller.marshal(java.lang.Object,javax.xml.transform.Result)",marshal the content tree rooted at jaxbelement into the specified javax.
"javax.xml.bind.Marshaller.marshal(java.lang.Object,java.io.OutputStream)",marshal the content tree rooted at jaxbelement into an output stream.
"javax.xml.bind.Marshaller.marshal(java.lang.Object,java.io.File)",marshal the content tree rooted at jaxbelement into a file.
"javax.xml.bind.Marshaller.marshal(java.lang.Object,java.io.Writer)",marshal the content tree rooted at jaxbelement into a writer.
"javax.xml.bind.Marshaller.marshal(java.lang.Object,org.xml.sax.ContentHandler)",marshal the content tree rooted at jaxbelement into sax2 events.
"javax.xml.bind.Marshaller.marshal(java.lang.Object,org.w3c.dom.Node)",marshal the content tree rooted at jaxbelement into a dom tree.
"javax.xml.bind.Marshaller.marshal(java.lang.Object,javax.xml.stream.XMLStreamWriter)",marshal the content tree rooted at jaxbelement into a xmlstreamwriter.
"javax.xml.bind.Marshaller.marshal(java.lang.Object,javax.xml.stream.XMLEventWriter)",marshal the content tree rooted at jaxbelement into a xmleventwriter.
javax.xml.bind.Marshaller.setAdapter(javax.xml.bind.annotation.adapters.XmlAdapter),associates a configured instance of xmladapter with this marshaller.
"javax.xml.bind.Marshaller.setAdapter(java.lang.Class<A>,A)",associates a configured instance of xmladapter with this marshaller.
javax.xml.bind.Marshaller.setAttachmentMarshaller(javax.xml.bind.attachment.AttachmentMarshaller),associate a context that enables binary data within an xml document to be transmitted as xml-binary optimized attachment.
javax.xml.bind.Marshaller.setEventHandler(javax.xml.bind.ValidationEventHandler),allow an application to register a validation event handler.
javax.xml.bind.Marshaller.setListener(javax.xml.bind.Marshaller.Listener),register marshal event callback marshaller.
"javax.xml.bind.Marshaller.setProperty(java.lang.String,java.lang.Object)",set the particular property in the underlying implementation of marshaller.
javax.xml.bind.Marshaller.setSchema(javax.xml.validation.Schema),specify the jaxp 1.
javax.xml.bind.Unmarshaller.getAdapter(java.lang.Class<A>),gets the adapter associated with the specified type.
javax.xml.bind.Unmarshaller.getEventHandler(),return the current event handler or the default event handler if one hasn't been set.
javax.xml.bind.Unmarshaller.getListener(),return unmarshaller.
javax.xml.bind.Unmarshaller.getProperty(java.lang.String),get the particular property in the underlying implementation of unmarshaller.
javax.xml.bind.Unmarshaller.getSchema(),get the jaxp 1.
javax.xml.bind.Unmarshaller.getUnmarshallerHandler(),get an unmarshaller handler object that can be used as a component in an xml pipeline.
javax.xml.bind.Unmarshaller.setAdapter(javax.xml.bind.annotation.adapters.XmlAdapter),associates a configured instance of xmladapter with this unmarshaller.
"javax.xml.bind.Unmarshaller.setAdapter(java.lang.Class<A>,A)",associates a configured instance of xmladapter with this unmarshaller.
javax.xml.bind.Unmarshaller.setAttachmentUnmarshaller(javax.xml.bind.attachment.AttachmentUnmarshaller),"associate a context that resolves cid's, content-id uris, to binary data passed as attachments."
javax.xml.bind.Unmarshaller.setEventHandler(javax.xml.bind.ValidationEventHandler),allow an application to register a validationeventhandler.
javax.xml.bind.Unmarshaller.setListener(javax.xml.bind.Unmarshaller.Listener),register unmarshal event callback unmarshaller.
"javax.xml.bind.Unmarshaller.setProperty(java.lang.String,java.lang.Object)",set the particular property in the underlying implementation of unmarshaller.
javax.xml.bind.Unmarshaller.setSchema(javax.xml.validation.Schema),specify the jaxp 1.
javax.xml.bind.Unmarshaller.unmarshal(java.io.File),unmarshal xml data from the specified file and return the resulting content tree.
javax.xml.bind.Unmarshaller.unmarshal(java.io.InputStream),unmarshal xml data from the specified inputstream and return the resulting content tree.
javax.xml.bind.Unmarshaller.unmarshal(java.io.Reader),unmarshal xml data from the specified reader and return the resulting content tree.
javax.xml.bind.Unmarshaller.unmarshal(java.net.URL),unmarshal xml data from the specified url and return the resulting content tree.
javax.xml.bind.Unmarshaller.unmarshal(org.xml.sax.InputSource),unmarshal xml data from the specified sax inputsource and return the resulting content tree.
javax.xml.bind.Unmarshaller.unmarshal(org.w3c.dom.Node),unmarshal global xml data from the specified dom tree and return the resulting content tree.
"javax.xml.bind.Unmarshaller.unmarshal(org.w3c.dom.Node,java.lang.Class<T>)",unmarshal xml data by jaxb mapped declaredtype and return the resulting content tree.
javax.xml.bind.Unmarshaller.unmarshal(javax.xml.transform.Source),unmarshal xml data from the specified xml source and return the resulting content tree.
"javax.xml.bind.Unmarshaller.unmarshal(javax.xml.transform.Source,java.lang.Class<T>)",unmarshal xml data from the specified xml source by declaredtype and return the resulting content tree.
javax.xml.bind.Unmarshaller.unmarshal(javax.xml.stream.XMLStreamReader),unmarshal xml data from the specified pull parser and return the resulting content tree.
"javax.xml.bind.Unmarshaller.unmarshal(javax.xml.stream.XMLStreamReader,java.lang.Class<T>)",unmarshal root element to jaxb mapped declaredtype and return the resulting content tree.
javax.xml.bind.Unmarshaller.unmarshal(javax.xml.stream.XMLEventReader),unmarshal xml data from the specified pull parser and return the resulting content tree.
"javax.xml.bind.Unmarshaller.unmarshal(javax.xml.stream.XMLEventReader,java.lang.Class<T>)",unmarshal root element to jaxb mapped declaredtype and return the resulting content tree.
javax.xml.bind.UnmarshallerHandler.getResult(),obtains the unmarshalled result.
javax.xml.bind.ValidationEvent.getLinkedException(),retrieve the linked exception for this warning/error.
javax.xml.bind.ValidationEvent.getLocator(),retrieve the locator for this warning/error.
javax.xml.bind.ValidationEvent.getMessage(),retrieve the text message for this warning/error.
javax.xml.bind.ValidationEvent.getSeverity(),retrieve the severity code for this warning/error.
javax.xml.bind.ValidationEventHandler.handleEvent(javax.xml.bind.ValidationEvent),receive notification of a validation warning or error.
javax.xml.bind.ValidationEventLocator.getColumnNumber(),return the column number if available.
javax.xml.bind.ValidationEventLocator.getLineNumber(),return the line number if available.
javax.xml.bind.ValidationEventLocator.getNode(),return a reference to the dom node if available.
javax.xml.bind.ValidationEventLocator.getObject(),return a reference to the object in the java content tree if available.
javax.xml.bind.ValidationEventLocator.getOffset(),return the byte offset if available.
javax.xml.bind.ValidationEventLocator.getURL(),return the name of the xml source as a url if available.
javax.xml.bind.Binder.getEventHandler(),return the current event handler or the default event handler if one hasn't been set.
javax.xml.bind.Binder.getJAXBNode(javax.xml.bind.Binder),gets the jaxb object associated with the given xml element.
javax.xml.bind.Binder.getProperty(java.lang.String),get the particular property in the underlying implementation of binder.
javax.xml.bind.Binder.getSchema(),gets the last schema object (including null) set by the setschema(schema) method.
javax.xml.bind.Binder.getXMLNode(java.lang.Object),gets the xml element associated with the given jaxb object.
"javax.xml.bind.Binder.marshal(java.lang.Object,javax.xml.bind.Binder)",marshal a jaxb object tree to a new xml document.
javax.xml.bind.Binder.setEventHandler(javax.xml.bind.ValidationEventHandler),allow an application to register a validationeventhandler.
"javax.xml.bind.Binder.setProperty(java.lang.String,java.lang.Object)",set the particular property in the underlying implementation of binder.
javax.xml.bind.Binder.setSchema(javax.xml.validation.Schema),"specifies whether marshal, unmarshal and update methods performs validation on their xml content."
javax.xml.bind.Binder.unmarshal(javax.xml.bind.Binder),unmarshal xml infoset view to a jaxb object tree.
"javax.xml.bind.Binder.unmarshal(javax.xml.bind.Binder,java.lang.Class<T>)",unmarshal xml root element by provided declaredtype to a jaxb object tree.
javax.xml.bind.Binder.updateJAXB(javax.xml.bind.Binder),takes an xml node and updates its associated jaxb object and its descendants.
javax.xml.bind.Binder.updateXML(java.lang.Object),takes an jaxb object and updates its associated xml node and its descendants.
"javax.xml.bind.Binder.updateXML(java.lang.Object,javax.xml.bind.Binder)",changes in jaxb object tree are updated in its associated xml parse tree.
javax.xml.bind.DatatypeConverter.parseAnySimpleType(java.lang.String),return a string containing the lexical representation of the simple type.
javax.xml.bind.DatatypeConverter.parseBase64Binary(java.lang.String),converts the string argument into an array of bytes.
javax.xml.bind.DatatypeConverter.parseBoolean(java.lang.String),converts the string argument into a boolean value.
javax.xml.bind.DatatypeConverter.parseByte(java.lang.String),converts the string argument into a byte value.
javax.xml.bind.DatatypeConverter.parseDate(java.lang.String),converts the string argument into a calendar value.
javax.xml.bind.DatatypeConverter.parseDateTime(java.lang.String),converts the string argument into a calendar value.
javax.xml.bind.DatatypeConverter.parseDecimal(java.lang.String),converts the string argument into a bigdecimal value.
javax.xml.bind.DatatypeConverter.parseDouble(java.lang.String),converts the string argument into a double value.
javax.xml.bind.DatatypeConverter.parseFloat(java.lang.String),converts the string argument into a float value.
javax.xml.bind.DatatypeConverter.parseHexBinary(java.lang.String),converts the string argument into an array of bytes.
javax.xml.bind.DatatypeConverter.parseInt(java.lang.String),convert the string argument into an int value.
javax.xml.bind.DatatypeConverter.parseInteger(java.lang.String),convert the string argument into a biginteger value.
javax.xml.bind.DatatypeConverter.parseLong(java.lang.String),converts the string argument into a long value.
"javax.xml.bind.DatatypeConverter.parseQName(java.lang.String,javax.xml.namespace.NamespaceContext)",converts the string argument into a byte value.
javax.xml.bind.DatatypeConverter.parseShort(java.lang.String),converts the string argument into a short value.
javax.xml.bind.DatatypeConverter.parseString(java.lang.String),convert the lexical xsd string argument into a string value.
javax.xml.bind.DatatypeConverter.parseTime(java.lang.String),converts the string argument into a calendar value.
javax.xml.bind.DatatypeConverter.parseUnsignedInt(java.lang.String),converts the string argument into a long value.
javax.xml.bind.DatatypeConverter.parseUnsignedShort(java.lang.String),converts the string argument into an int value.
javax.xml.bind.DatatypeConverter.printAnySimpleType(java.lang.String),converts a string value into a string.
javax.xml.bind.DatatypeConverter.printBase64Binary(byte[]),converts an array of bytes into a string.
javax.xml.bind.DatatypeConverter.printBoolean(boolean),converts a boolean value into a string.
javax.xml.bind.DatatypeConverter.printByte(byte),converts a byte value into a string.
javax.xml.bind.DatatypeConverter.printDate(java.util.Calendar),converts a calendar value into a string.
javax.xml.bind.DatatypeConverter.printDateTime(java.util.Calendar),converts a calendar value into a string.
javax.xml.bind.DatatypeConverter.printDecimal(java.math.BigDecimal),converts a bigdecimal value into a string.
javax.xml.bind.DatatypeConverter.printDouble(double),converts a double value into a string.
javax.xml.bind.DatatypeConverter.printFloat(float),converts a float value into a string.
javax.xml.bind.DatatypeConverter.printHexBinary(byte[]),converts an array of bytes into a string.
javax.xml.bind.DatatypeConverter.printInt(int),converts an int value into a string.
javax.xml.bind.DatatypeConverter.printInteger(java.math.BigInteger),converts a biginteger value into a string.
javax.xml.bind.DatatypeConverter.printLong(long),converts a long value into a string.
"javax.xml.bind.DatatypeConverter.printQName(javax.xml.namespace.QName,javax.xml.namespace.NamespaceContext)",converts a qname instance into a string.
javax.xml.bind.DatatypeConverter.printShort(short),converts a short value into a string.
javax.xml.bind.DatatypeConverter.printString(java.lang.String),converts the string argument into a string.
javax.xml.bind.DatatypeConverter.printTime(java.util.Calendar),converts a calendar value into a string.
javax.xml.bind.DatatypeConverter.printUnsignedInt(long),converts a long value into a string.
javax.xml.bind.DatatypeConverter.printUnsignedShort(int),converts an int value into a string.
javax.xml.bind.DatatypeConverter.setDatatypeConverter(javax.xml.bind.DatatypeConverterInterface),this method is for jaxb provider use only.
"javax.xml.bind.JAXB.marshal(java.lang.Object,java.io.File)",writes a java object tree to xml and store it to the specified location.
"javax.xml.bind.JAXB.marshal(java.lang.Object,java.net.URL)",writes a java object tree to xml and store it to the specified location.
"javax.xml.bind.JAXB.marshal(java.lang.Object,java.net.URI)",writes a java object tree to xml and store it to the specified location.
"javax.xml.bind.JAXB.marshal(java.lang.Object,java.lang.String)",writes a java object tree to xml and store it to the specified location.
"javax.xml.bind.JAXB.marshal(java.lang.Object,java.io.OutputStream)",writes a java object tree to xml and store it to the specified location.
"javax.xml.bind.JAXB.marshal(java.lang.Object,java.io.Writer)",writes a java object tree to xml and store it to the specified location.
"javax.xml.bind.JAXB.marshal(java.lang.Object,javax.xml.transform.Result)",writes a java object tree to xml and store it to the specified location.
"javax.xml.bind.JAXB.unmarshal(java.io.File,java.lang.Class<T>)",reads in a java object tree from the given xml input.
"javax.xml.bind.JAXB.unmarshal(java.net.URL,java.lang.Class<T>)",reads in a java object tree from the given xml input.
"javax.xml.bind.JAXB.unmarshal(java.net.URI,java.lang.Class<T>)",reads in a java object tree from the given xml input.
"javax.xml.bind.JAXB.unmarshal(java.lang.String,java.lang.Class<T>)",reads in a java object tree from the given xml input.
"javax.xml.bind.JAXB.unmarshal(java.io.InputStream,java.lang.Class<T>)",reads in a java object tree from the given xml input.
"javax.xml.bind.JAXB.unmarshal(java.io.Reader,java.lang.Class<T>)",reads in a java object tree from the given xml input.
"javax.xml.bind.JAXB.unmarshal(javax.xml.transform.Source,java.lang.Class<T>)",reads in a java object tree from the given xml input.
javax.xml.bind.JAXBContext.createBinder(java.lang.Class<T>),creates a binder object that can be used for associative/in-place unmarshalling/marshalling.
javax.xml.bind.JAXBContext.createBinder(),creates a binder for w3c dom.
javax.xml.bind.JAXBContext.createJAXBIntrospector(),creates a jaxbintrospector object that can be used to introspect jaxb objects.
javax.xml.bind.JAXBContext.createMarshaller(),create a marshaller object that can be used to convert a java content tree into xml data.
javax.xml.bind.JAXBContext.createUnmarshaller(),create an unmarshaller object that can be used to convert xml data into a java content tree.
javax.xml.bind.JAXBContext.generateSchema(javax.xml.bind.SchemaOutputResolver),generates the schema documents for this context.
javax.xml.bind.JAXBContext.newInstance(java.lang.String),obtain a new instance of a jaxbcontext class.
"javax.xml.bind.JAXBContext.newInstance(java.lang.String,java.lang.ClassLoader)",obtain a new instance of a jaxbcontext class.
"javax.xml.bind.JAXBContext.newInstance(java.lang.String,java.lang.ClassLoader,,?>)",obtain a new instance of a jaxbcontext class.
javax.xml.bind.JAXBContext.newInstance(java.lang.Class...),obtain a new instance of a jaxbcontext class.
"javax.xml.bind.JAXBContext.newInstance(java.lang.Class[],,?>)",obtain a new instance of a jaxbcontext class.
javax.xml.bind.JAXBElement.getDeclaredType(),returns the java binding of the xml element declaration's type attribute.
javax.xml.bind.JAXBElement.getName(),returns the xml element tag name.
javax.xml.bind.JAXBElement.getScope(),returns scope of xml element declaration.
javax.xml.bind.JAXBElement.getValue(),return the content model and attribute values for this element.
javax.xml.bind.JAXBElement.isGlobalScope(),returns true iff this xml element declaration is global.
javax.xml.bind.JAXBElement.isNil(),returns true iff this element instance content model is nil.
javax.xml.bind.JAXBElement.isTypeSubstituted(),returns true iff this xml element instance's value has a different type than xml element declaration's declared type.
javax.xml.bind.JAXBElement.setNil(boolean),set whether this element has nil content.
javax.xml.bind.JAXBElement.setValue(javax.xml.bind.JAXBElement),set the content model and attributes of this xml element.
javax.xml.bind.JAXBIntrospector.getElementName(java.lang.Object),get xml element qname for jaxbelement.
javax.xml.bind.JAXBIntrospector.getValue(java.lang.Object),get the element value of a jaxb element.
javax.xml.bind.JAXBIntrospector.isElement(java.lang.Object),return true if object represents a jaxb element.
javax.xml.bind.Marshaller.Listener.afterMarshal(java.lang.Object),callback method invoked after marshalling source to xml.
javax.xml.bind.Marshaller.Listener.beforeMarshal(java.lang.Object),callback method invoked before marshalling from source to xml.
"javax.xml.bind.SchemaOutputResolver.createOutput(java.lang.String,java.lang.String)","decides where the schema file (of the given namespace uri) will be written, and return it as a result object."
"javax.xml.bind.Unmarshaller.Listener.afterUnmarshal(java.lang.Object,java.lang.Object)",callback method invoked after unmarshalling xml data into target.
"javax.xml.bind.Unmarshaller.Listener.beforeUnmarshal(java.lang.Object,java.lang.Object)",callback method invoked before unmarshalling into target.
javax.xml.bind.JAXBException.getErrorCode(),get the vendor specific error code.
javax.xml.bind.JAXBException.getLinkedException(),get the linked exception.
javax.xml.bind.JAXBException.printStackTrace(java.io.PrintStream),prints this jaxbexception and its stack trace (including the stack trace of the linkedexception if it is non-null) to the printstream.
javax.xml.bind.JAXBException.printStackTrace(),prints this jaxbexception and its stack trace (including the stack trace of the linkedexception if it is non-null) to system.
javax.xml.bind.JAXBException.printStackTrace(java.io.PrintWriter),prints this jaxbexception and its stack trace (including the stack trace of the linkedexception if it is non-null) to the printwriter.
javax.xml.bind.JAXBException.setLinkedException(java.lang.Throwable),add a linked exception.
javax.xml.bind.JAXBException.toString(),returns a short description of this jaxbexception.
javax.xml.bind.TypeConstraintException.getErrorCode(),get the vendor specific error code.
javax.xml.bind.TypeConstraintException.getLinkedException(),get the linked exception.
javax.xml.bind.TypeConstraintException.printStackTrace(java.io.PrintStream),prints this typeconstraintexception and its stack trace (including the stack trace of the linkedexception if it is non-null) to the printstream.
javax.xml.bind.TypeConstraintException.printStackTrace(),prints this typeconstraintexception and its stack trace (including the stack trace of the linkedexception if it is non-null) to system.
javax.xml.bind.TypeConstraintException.setLinkedException(java.lang.Throwable),add a linked exception.
javax.xml.bind.TypeConstraintException.toString(),returns a short description of this typeconstraintexception.
javax.xml.bind.annotation.DomHandler.createUnmarshaller(javax.xml.bind.ValidationEventHandler),"when a jaxb provider needs to unmarshal a part of a document into an infoset representation, it first calls this method to create a result object."
javax.xml.bind.annotation.DomHandler.getElement(javax.xml.bind.annotation.DomHandler),once the portion is sent to the result.
"javax.xml.bind.annotation.DomHandler.marshal(javax.xml.bind.annotation.DomHandler,javax.xml.bind.ValidationEventHandler)",this method is called when a jaxb provider needs to marshal an element to xml.
javax.xml.bind.annotation.XmlAccessOrder.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.xml.bind.annotation.XmlAccessOrder.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.xml.bind.annotation.XmlAccessType.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.xml.bind.annotation.XmlAccessType.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.xml.bind.annotation.XmlNsForm.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.xml.bind.annotation.XmlNsForm.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.xml.bind.annotation.adapters.CollapsedStringAdapter.isWhiteSpace(char),returns true if the specified char is a white space character.
javax.xml.bind.annotation.adapters.CollapsedStringAdapter.marshal(java.lang.String),no-op.
javax.xml.bind.annotation.adapters.CollapsedStringAdapter.unmarshal(java.lang.String),"removes leading and trailing whitespaces of the string given as the parameter, then truncate any sequnce of tab, cr, lf, and sp by a single whitespace character ' '."
javax.xml.bind.annotation.adapters.NormalizedStringAdapter.isWhiteSpaceExceptSpace(char),returns true if the specified char is a white space character but not 0x20.
javax.xml.bind.annotation.adapters.NormalizedStringAdapter.marshal(java.lang.String),no-op.
javax.xml.bind.annotation.adapters.NormalizedStringAdapter.unmarshal(java.lang.String),"replace any tab, cr, and lf by a whitespace character ' ', as specified in the whitespace facet 'replace'."
javax.xml.bind.annotation.adapters.XmlAdapter.marshal(javax.xml.bind.annotation.adapters.XmlAdapter),convert a bound type to a value type.
javax.xml.bind.annotation.adapters.XmlAdapter.unmarshal(javax.xml.bind.annotation.adapters.XmlAdapter),convert a value type to a bound type.
"javax.xml.bind.attachment.AttachmentMarshaller.addMtomAttachment(javax.activation.DataHandler,java.lang.String,java.lang.String)",consider mime content data for optimized binary storage as an attachment.
"javax.xml.bind.attachment.AttachmentMarshaller.addMtomAttachment(byte[],int,int,java.lang.String,java.lang.String,java.lang.String)",consider binary data for optimized binary storage as an attachment.
javax.xml.bind.attachment.AttachmentMarshaller.addSwaRefAttachment(javax.activation.DataHandler),"add mime data as an attachment and return attachment's content-id, cid."
javax.xml.bind.attachment.AttachmentMarshaller.isXOPPackage(),read-only property that returns true if jaxb marshaller should enable xop creation.
javax.xml.bind.attachment.AttachmentUnmarshaller.getAttachmentAsByteArray(java.lang.String),"retrieve the attachment identified by content-id, cid, as a byte[]."
javax.xml.bind.attachment.AttachmentUnmarshaller.getAttachmentAsDataHandler(java.lang.String),"lookup mime content by content-id, cid, and return as a datahandler."
javax.xml.bind.attachment.AttachmentUnmarshaller.isXOPPackage(),read-only property that returns true if jaxb unmarshaller needs to perform xop processing.
javax.xml.bind.helpers.AbstractMarshallerImpl.getEncoding(),convenience method for getting the current output encoding.
javax.xml.bind.helpers.AbstractMarshallerImpl.getJavaEncoding(java.lang.String),gets the corresponding java encoding name from an iana name.
javax.xml.bind.helpers.AbstractMarshallerImpl.getNode(java.lang.Object),"by default, the getnode method is unsupported and throw an unsupportedoperationexception."
javax.xml.bind.helpers.AbstractMarshallerImpl.getNoNSSchemaLocation(),convenience method for getting the current nonamespaceschemalocation.
javax.xml.bind.helpers.AbstractMarshallerImpl.getProperty(java.lang.String),default implementation of the getproperty method handles the four defined properties in marshaller.
javax.xml.bind.helpers.AbstractMarshallerImpl.getSchemaLocation(),convenience method for getting the current schemalocation.
javax.xml.bind.helpers.AbstractMarshallerImpl.isFormattedOutput(),convenience method for getting the formatted output flag.
javax.xml.bind.helpers.AbstractMarshallerImpl.isFragment(),convenience method for getting the fragment flag.
javax.xml.bind.helpers.AbstractMarshallerImpl.setEncoding(java.lang.String),convenience method for setting the output encoding.
javax.xml.bind.helpers.AbstractMarshallerImpl.setFormattedOutput(boolean),convenience method for setting the formatted output flag.
javax.xml.bind.helpers.AbstractMarshallerImpl.setFragment(boolean),convenience method for setting the fragment flag.
javax.xml.bind.helpers.AbstractMarshallerImpl.setNoNSSchemaLocation(java.lang.String),convenience method for setting the nonamespaceschemalocation.
"javax.xml.bind.helpers.AbstractMarshallerImpl.setProperty(java.lang.String,java.lang.Object)",default implementation of the setproperty method handles the four defined properties in marshaller.
javax.xml.bind.helpers.AbstractMarshallerImpl.setSchemaLocation(java.lang.String),convenience method for setting the schemalocation.
javax.xml.bind.helpers.AbstractUnmarshallerImpl.createUnmarshalException(org.xml.sax.SAXException),creates an unmarshalexception from a saxexception.
javax.xml.bind.helpers.AbstractUnmarshallerImpl.getEventHandler(),return the current event handler or the default event handler if one hasn't been set.
javax.xml.bind.helpers.AbstractUnmarshallerImpl.getProperty(java.lang.String),default implementation of the getproperty method always throws propertyexception since there are no required properties.
javax.xml.bind.helpers.AbstractUnmarshallerImpl.getXMLReader(),obtains a configured xmlreader.
javax.xml.bind.helpers.AbstractUnmarshallerImpl.isValidating(),indicates whether or not the unmarshaller is configured to validate during unmarshal operations.
javax.xml.bind.helpers.AbstractUnmarshallerImpl.setEventHandler(javax.xml.bind.ValidationEventHandler),allow an application to register a validation event handler.
"javax.xml.bind.helpers.AbstractUnmarshallerImpl.setProperty(java.lang.String,java.lang.Object)",default implementation of the setproperty method always throws propertyexception since there are no required properties.
javax.xml.bind.helpers.AbstractUnmarshallerImpl.setValidating(boolean),specifies whether or not the unmarshaller should validate during unmarshal operations.
"javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(org.xml.sax.XMLReader,org.xml.sax.InputSource)",unmarshals an object by using the specified xmlreader and the inputsource.
javax.xml.bind.helpers.ValidationEventImpl.setLinkedException(java.lang.Throwable),set the linked exception field of this event.
javax.xml.bind.helpers.ValidationEventImpl.setLocator(javax.xml.bind.ValidationEventLocator),set the locator object for this event.
javax.xml.bind.helpers.ValidationEventImpl.setMessage(java.lang.String),set the message field of this event.
javax.xml.bind.helpers.ValidationEventImpl.setSeverity(int),set the severity field of this event.
javax.xml.bind.helpers.ValidationEventImpl.toString(),returns a string representation of this object in a format helpful to debugging.
javax.xml.bind.helpers.ValidationEventLocatorImpl.setColumnNumber(int),set the columnnumber field on this event locator.
javax.xml.bind.helpers.ValidationEventLocatorImpl.setLineNumber(int),set the linenumber field on this event locator.
javax.xml.bind.helpers.ValidationEventLocatorImpl.setNode(org.w3c.dom.Node),set the node field on this event locator.
javax.xml.bind.helpers.ValidationEventLocatorImpl.setObject(java.lang.Object),set the object field on this event locator.
javax.xml.bind.helpers.ValidationEventLocatorImpl.setOffset(int),set the offset field on this event locator.
javax.xml.bind.helpers.ValidationEventLocatorImpl.setURL(java.net.URL),set the url field on this event locator.
javax.xml.bind.helpers.ValidationEventLocatorImpl.toString(),returns a string representation of this object in a format helpful to debugging.
javax.xml.bind.util.JAXBResult.getResult(),gets the unmarshalled object created by the transformation.
javax.xml.bind.util.ValidationEventCollector.getEvents(),return an array of validationevent objects containing a copy of each of the collected errors and warnings.
javax.xml.bind.util.ValidationEventCollector.hasEvents(),returns true if this event collector contains at least one validationevent.
javax.xml.bind.util.ValidationEventCollector.reset(),clear all collected errors and warnings.
javax.xml.crypto.AlgorithmMethod.getAlgorithm(),returns the algorithm uri of this algorithmmethod.
javax.xml.crypto.AlgorithmMethod.getParameterSpec(),returns the algorithm parameters of this algorithmmethod.
javax.xml.crypto.KeySelectorResult.getKey(),returns the selected key.
javax.xml.crypto.NodeSetData.iterator(),"returns a read-only iterator over the nodes contained in this nodesetdata in
document order."
"javax.xml.crypto.URIDereferencer.dereference(javax.xml.crypto.URIReference,javax.xml.crypto.XMLCryptoContext)",dereferences the specified urireference and returns the dereferenced data.
javax.xml.crypto.URIReference.getType(),returns the type of data referenced by this uri.
javax.xml.crypto.URIReference.getURI(),returns the uri of the referenced data object.
javax.xml.crypto.XMLCryptoContext.get(java.lang.Object),returns the value to which this context maps the specified key.
javax.xml.crypto.XMLCryptoContext.getBaseURI(),returns the base uri.
javax.xml.crypto.XMLCryptoContext.getDefaultNamespacePrefix(),returns the default namespace prefix.
javax.xml.crypto.XMLCryptoContext.getKeySelector(),returns the key selector for finding a key.
"javax.xml.crypto.XMLCryptoContext.getNamespacePrefix(java.lang.String,java.lang.String)",returns the namespace prefix that the specified namespace uri is associated with.
javax.xml.crypto.XMLCryptoContext.getProperty(java.lang.String),returns the value of the specified property.
javax.xml.crypto.XMLCryptoContext.getURIDereferencer(),returns a uridereferencer that is used to dereference urireferences.
"javax.xml.crypto.XMLCryptoContext.put(java.lang.Object,java.lang.Object)",associates the specified value with the specified key in this context.
"javax.xml.crypto.XMLCryptoContext.putNamespacePrefix(java.lang.String,java.lang.String)",maps the specified namespace uri to the specified prefix.
javax.xml.crypto.XMLCryptoContext.setBaseURI(java.lang.String),sets the base uri.
javax.xml.crypto.XMLCryptoContext.setDefaultNamespacePrefix(java.lang.String),sets the default namespace prefix.
javax.xml.crypto.XMLCryptoContext.setKeySelector(javax.xml.crypto.KeySelector),sets the key selector for finding a key.
"javax.xml.crypto.XMLCryptoContext.setProperty(java.lang.String,java.lang.Object)",sets the specified property.
javax.xml.crypto.XMLCryptoContext.setURIDereferencer(javax.xml.crypto.URIDereferencer),sets a uridereferencer that is used to dereference urireferences.
javax.xml.crypto.XMLStructure.isFeatureSupported(java.lang.String),indicates whether a specified feature is supported.
"javax.xml.crypto.KeySelector.select(javax.xml.crypto.dsig.keyinfo.KeyInfo,javax.xml.crypto.KeySelector.Purpose,javax.xml.crypto.AlgorithmMethod,javax.xml.crypto.XMLCryptoContext)",attempts to find a key that satisfies the specified constraints.
javax.xml.crypto.KeySelector.singletonKeySelector(java.security.Key),"returns a keyselector that always selects the specified key, regardless of the keyinfo passed to it."
javax.xml.crypto.KeySelector.Purpose.toString(),"returns a string representation of this purpose (""sign"", ""verify"", ""encrypt"", or ""decrypt"")."
javax.xml.crypto.OctetStreamData.getMimeType(),returns the mime type associated with the data object represented by this octetstreamdata.
javax.xml.crypto.OctetStreamData.getOctetStream(),returns the input stream of this octetstreamdata.
javax.xml.crypto.OctetStreamData.getURI(),returns the uri string identifying the data object represented by this octetstreamdata.
javax.xml.crypto.KeySelectorException.getCause(),returns the cause of this keyselectorexception or null if the cause is nonexistent or unknown.
javax.xml.crypto.KeySelectorException.printStackTrace(),"prints this keyselectorexception, its backtrace and the cause's backtrace to the standard error stream."
javax.xml.crypto.KeySelectorException.printStackTrace(java.io.PrintStream),"prints this keyselectorexception, its backtrace and the cause's backtrace to the specified print stream."
javax.xml.crypto.KeySelectorException.printStackTrace(java.io.PrintWriter),"prints this keyselectorexception, its backtrace and the cause's backtrace to the specified print writer."
javax.xml.crypto.MarshalException.getCause(),returns the cause of this marshalexception or null if the cause is nonexistent or unknown.
javax.xml.crypto.MarshalException.printStackTrace(),"prints this marshalexception, its backtrace and the cause's backtrace to the standard error stream."
javax.xml.crypto.MarshalException.printStackTrace(java.io.PrintStream),"prints this marshalexception, its backtrace and the cause's backtrace to the specified print stream."
javax.xml.crypto.MarshalException.printStackTrace(java.io.PrintWriter),"prints this marshalexception, its backtrace and the cause's backtrace to the specified print writer."
javax.xml.crypto.NoSuchMechanismException.getCause(),returns the cause of this nosuchmechanismexception or null if the cause is nonexistent or unknown.
javax.xml.crypto.NoSuchMechanismException.printStackTrace(),"prints this nosuchmechanismexception, its backtrace and the cause's backtrace to the standard error stream."
javax.xml.crypto.NoSuchMechanismException.printStackTrace(java.io.PrintStream),"prints this nosuchmechanismexception, its backtrace and the cause's backtrace to the specified print stream."
javax.xml.crypto.NoSuchMechanismException.printStackTrace(java.io.PrintWriter),"prints this nosuchmechanismexception, its backtrace and the cause's backtrace to the specified print writer."
javax.xml.crypto.URIReferenceException.getCause(),returns the cause of this urireferenceexception or null if the cause is nonexistent or unknown.
javax.xml.crypto.URIReferenceException.getURIReference(),returns the urireference that was being dereferenced when the exception was thrown.
javax.xml.crypto.URIReferenceException.printStackTrace(),"prints this urireferenceexception, its backtrace and the cause's backtrace to the standard error stream."
javax.xml.crypto.URIReferenceException.printStackTrace(java.io.PrintStream),"prints this urireferenceexception, its backtrace and the cause's backtrace to the specified print stream."
javax.xml.crypto.URIReferenceException.printStackTrace(java.io.PrintWriter),"prints this urireferenceexception, its backtrace and the cause's backtrace to the specified print writer."
javax.xml.crypto.dom.DOMURIReference.getHere(),returns the here node.
javax.xml.crypto.dom.DOMCryptoContext.get(java.lang.Object),this implementation uses an internal hashmap to get the object that the specified key maps to.
javax.xml.crypto.dom.DOMCryptoContext.getElementById(java.lang.String),returns the element with the specified id attribute value.
"javax.xml.crypto.dom.DOMCryptoContext.getNamespacePrefix(java.lang.String,java.lang.String)",this implementation uses an internal hashmap to get the prefix that the specified uri maps to.
javax.xml.crypto.dom.DOMCryptoContext.getProperty(java.lang.String),this implementation uses an internal hashmap to get the object that the specified name maps to.
javax.xml.crypto.dom.DOMCryptoContext.iterator(),returns a read-only iterator over the set of id/element mappings of this domcryptocontext.
"javax.xml.crypto.dom.DOMCryptoContext.put(java.lang.Object,java.lang.Object)",this implementation uses an internal hashmap to map the key to the specified object.
"javax.xml.crypto.dom.DOMCryptoContext.putNamespacePrefix(java.lang.String,java.lang.String)",this implementation uses an internal hashmap to map the uri to the specified prefix.
"javax.xml.crypto.dom.DOMCryptoContext.setIdAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String)",registers the element's attribute specified by the namespace uri and local name to be of type id.
"javax.xml.crypto.dom.DOMCryptoContext.setProperty(java.lang.String,java.lang.Object)",this implementation uses an internal hashmap to map the name to the specified object.
javax.xml.crypto.dom.DOMStructure.getNode(),returns the node contained in this domstructure.
javax.xml.crypto.dsig.CanonicalizationMethod.getParameterSpec(),returns the algorithm-specific input parameters associated with this canonicalizationmethod.
javax.xml.crypto.dsig.DigestMethod.getParameterSpec(),returns the algorithm-specific input parameters associated with this digestmethod.
javax.xml.crypto.dsig.Manifest.getId(),returns the id of this manifest.
javax.xml.crypto.dsig.Manifest.getReferences(),returns an unmodifiable list of one or more references that are contained in this manifest.
javax.xml.crypto.dsig.Reference.getCalculatedDigestValue(),returns the calculated digest value of this reference after a validation operation.
javax.xml.crypto.dsig.Reference.getDereferencedData(),"returns the dereferenced data, if reference caching is enabled."
javax.xml.crypto.dsig.Reference.getDigestInputStream(),"returns the pre-digested input stream, if reference caching is enabled."
javax.xml.crypto.dsig.Reference.getDigestMethod(),returns the digest method of this reference.
javax.xml.crypto.dsig.Reference.getDigestValue(),returns the digest value of this reference.
javax.xml.crypto.dsig.Reference.getId(),"returns the optional id attribute of this reference, which permits this reference to be referenced from elsewhere."
javax.xml.crypto.dsig.Reference.getTransforms(),returns an unmodifiable list of transforms that are contained in this reference.
javax.xml.crypto.dsig.Reference.validate(javax.xml.crypto.dsig.XMLValidateContext),validates this reference.
javax.xml.crypto.dsig.SignatureMethod.getParameterSpec(),returns the algorithm-specific input parameters of this signaturemethod.
javax.xml.crypto.dsig.SignatureProperties.getId(),returns the id of this signatureproperties.
javax.xml.crypto.dsig.SignatureProperties.getProperties(),returns an unmodifiable list of one or more signaturepropertys that are contained in this signatureproperties.
javax.xml.crypto.dsig.SignatureProperty.getContent(),returns an unmodifiable list of one or more xmlstructures that are contained in this signatureproperty.
javax.xml.crypto.dsig.SignatureProperty.getId(),returns the id of this signatureproperty.
javax.xml.crypto.dsig.SignatureProperty.getTarget(),returns the target uri of this signatureproperty.
javax.xml.crypto.dsig.SignedInfo.getCanonicalizationMethod(),returns the canonicalization method of this signedinfo.
javax.xml.crypto.dsig.SignedInfo.getCanonicalizedData(),returns the canonicalized signed info bytes after a signing or validation operation.
javax.xml.crypto.dsig.SignedInfo.getId(),returns the optional id attribute of this signedinfo.
javax.xml.crypto.dsig.SignedInfo.getReferences(),returns an unmodifiable list of one or more references.
javax.xml.crypto.dsig.SignedInfo.getSignatureMethod(),returns the signature method of this signedinfo.
javax.xml.crypto.dsig.Transform.getParameterSpec(),returns the algorithm-specific input parameters associated with this transform.
"javax.xml.crypto.dsig.Transform.transform(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext)",transforms the specified data using the underlying transform algorithm.
"javax.xml.crypto.dsig.Transform.transform(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext,java.io.OutputStream)",transforms the specified data using the underlying transform algorithm.
javax.xml.crypto.dsig.XMLObject.getContent(),"returns an unmodifiable list of xmlstructures contained in this xmlobject, which represent elements from any namespace."
javax.xml.crypto.dsig.XMLObject.getEncoding(),returns the encoding uri of this xmlobject.
javax.xml.crypto.dsig.XMLObject.getId(),returns the id of this xmlobject.
javax.xml.crypto.dsig.XMLObject.getMimeType(),returns the mime type of this xmlobject.
javax.xml.crypto.dsig.XMLSignature.getId(),returns the optional id of this xmlsignature.
javax.xml.crypto.dsig.XMLSignature.getKeyInfo(),returns the key info of this xmlsignature.
javax.xml.crypto.dsig.XMLSignature.getKeySelectorResult(),"returns the result of the keyselector, if specified, after this xmlsignature has been signed or validated."
javax.xml.crypto.dsig.XMLSignature.getObjects(),returns an unmodifiable list of xmlobjects contained in this xmlsignature.
javax.xml.crypto.dsig.XMLSignature.getSignatureValue(),returns the signature value of this xmlsignature.
javax.xml.crypto.dsig.XMLSignature.getSignedInfo(),returns the signed info of this xmlsignature.
javax.xml.crypto.dsig.XMLSignature.sign(javax.xml.crypto.dsig.XMLSignContext),signs this xmlsignature.
javax.xml.crypto.dsig.XMLSignature.validate(javax.xml.crypto.dsig.XMLValidateContext),"validates the signature according to the
core validation processing rules."
javax.xml.crypto.dsig.XMLSignature.SignatureValue.getId(),"returns the optional id attribute of this signaturevalue, which permits this element to be referenced from elsewhere."
javax.xml.crypto.dsig.XMLSignature.SignatureValue.getValue(),returns the signature value of this signaturevalue.
javax.xml.crypto.dsig.XMLSignature.SignatureValue.validate(javax.xml.crypto.dsig.XMLValidateContext),validates the signature value.
javax.xml.crypto.dsig.TransformService.getAlgorithm(),returns the uri of the algorithm supported by this transformservice.
"javax.xml.crypto.dsig.TransformService.getInstance(java.lang.String,java.lang.String)",returns a transformservice that supports the specified algorithm uri (ex: transform.
"javax.xml.crypto.dsig.TransformService.getInstance(java.lang.String,java.lang.String,java.security.Provider)",returns a transformservice that supports the specified algorithm uri (ex: transform.
"javax.xml.crypto.dsig.TransformService.getInstance(java.lang.String,java.lang.String,java.lang.String)",returns a transformservice that supports the specified algorithm uri (ex: transform.
javax.xml.crypto.dsig.TransformService.getMechanismType(),returns the mechanism type supported by this transformservice.
javax.xml.crypto.dsig.TransformService.getProvider(),returns the provider of this transformservice.
javax.xml.crypto.dsig.TransformService.init(javax.xml.crypto.dsig.spec.TransformParameterSpec),initializes this transformservice with the specified parameters.
"javax.xml.crypto.dsig.TransformService.init(javax.xml.crypto.XMLStructure,javax.xml.crypto.XMLCryptoContext)",initializes this transformservice with the specified parameters and document context.
"javax.xml.crypto.dsig.TransformService.marshalParams(javax.xml.crypto.XMLStructure,javax.xml.crypto.XMLCryptoContext)",marshals the algorithm-specific parameters.
javax.xml.crypto.dsig.XMLSignatureFactory.getInstance(java.lang.String),"returns an xmlsignaturefactory that supports the specified xml processing mechanism and representation type (ex: ""dom"")."
"javax.xml.crypto.dsig.XMLSignatureFactory.getInstance(java.lang.String,java.security.Provider)","returns an xmlsignaturefactory that supports the requested xml processing mechanism and representation type (ex: ""dom""), as supplied by the specified provider."
"javax.xml.crypto.dsig.XMLSignatureFactory.getInstance(java.lang.String,java.lang.String)","returns an xmlsignaturefactory that supports the requested xml processing mechanism and representation type (ex: ""dom""), as supplied by the specified provider."
javax.xml.crypto.dsig.XMLSignatureFactory.getInstance(),"returns an xmlsignaturefactory that supports the default xml processing mechanism and representation type (""dom"")."
javax.xml.crypto.dsig.XMLSignatureFactory.getKeyInfoFactory(),returns a keyinfofactory that creates keyinfo objects.
javax.xml.crypto.dsig.XMLSignatureFactory.getMechanismType(),"returns the type of the xml processing mechanism and representation supported by this xmlsignaturefactory (ex: ""dom"")."
javax.xml.crypto.dsig.XMLSignatureFactory.getProvider(),returns the provider of this xmlsignaturefactory.
javax.xml.crypto.dsig.XMLSignatureFactory.getURIDereferencer(),returns a reference to the uridereferencer that is used by default to dereference uris in reference objects.
javax.xml.crypto.dsig.XMLSignatureFactory.isFeatureSupported(java.lang.String),indicates whether a specified feature is supported.
"javax.xml.crypto.dsig.XMLSignatureFactory.newCanonicalizationMethod(java.lang.String,javax.xml.crypto.dsig.spec.C14NMethodParameterSpec)",creates a canonicalizationmethod for the specified algorithm uri and parameters.
"javax.xml.crypto.dsig.XMLSignatureFactory.newCanonicalizationMethod(java.lang.String,javax.xml.crypto.XMLStructure)",creates a canonicalizationmethod for the specified algorithm uri and parameters.
"javax.xml.crypto.dsig.XMLSignatureFactory.newDigestMethod(java.lang.String,javax.xml.crypto.dsig.spec.DigestMethodParameterSpec)",creates a digestmethod for the specified algorithm uri and parameters.
javax.xml.crypto.dsig.XMLSignatureFactory.newManifest(java.util.List),creates a manifest containing the specified list of references.
"javax.xml.crypto.dsig.XMLSignatureFactory.newManifest(java.util.List,java.lang.String)",creates a manifest containing the specified list of references and optional id.
"javax.xml.crypto.dsig.XMLSignatureFactory.newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod)",creates a reference with the specified uri and digest method.
"javax.xml.crypto.dsig.XMLSignatureFactory.newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod,java.util.List,java.lang.String,java.lang.String)",creates a reference with the specified parameters.
"javax.xml.crypto.dsig.XMLSignatureFactory.newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod,java.util.List,java.lang.String,java.lang.String,byte[])",creates a reference with the specified parameters and pre-calculated digest value.
"javax.xml.crypto.dsig.XMLSignatureFactory.newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod,java.util.List,javax.xml.crypto.Data,java.util.List,java.lang.String,java.lang.String)",creates a reference with the specified parameters.
"javax.xml.crypto.dsig.XMLSignatureFactory.newSignatureMethod(java.lang.String,javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec)",creates a signaturemethod for the specified algorithm uri and parameters.
"javax.xml.crypto.dsig.XMLSignatureFactory.newSignatureProperties(java.util.List,java.lang.String)",creates a signatureproperties containing the specified list of signaturepropertys and optional id.
"javax.xml.crypto.dsig.XMLSignatureFactory.newSignatureProperty(java.util.List,java.lang.String,java.lang.String)","creates a signatureproperty containing the specified list of xmlstructures, target uri and optional id."
"javax.xml.crypto.dsig.XMLSignatureFactory.newSignedInfo(javax.xml.crypto.dsig.CanonicalizationMethod,javax.xml.crypto.dsig.SignatureMethod,java.util.List)","creates a signedinfo with the specified canonicalization and signature methods, and list of one or more references."
"javax.xml.crypto.dsig.XMLSignatureFactory.newSignedInfo(javax.xml.crypto.dsig.CanonicalizationMethod,javax.xml.crypto.dsig.SignatureMethod,java.util.List,java.lang.String)",creates a signedinfo with the specified parameters.
"javax.xml.crypto.dsig.XMLSignatureFactory.newTransform(java.lang.String,javax.xml.crypto.dsig.spec.TransformParameterSpec)",creates a transform for the specified algorithm uri and parameters.
"javax.xml.crypto.dsig.XMLSignatureFactory.newTransform(java.lang.String,javax.xml.crypto.XMLStructure)",creates a transform for the specified algorithm uri and parameters.
"javax.xml.crypto.dsig.XMLSignatureFactory.newXMLObject(java.util.List,java.lang.String,java.lang.String,java.lang.String)",creates an xmlobject from the specified parameters.
"javax.xml.crypto.dsig.XMLSignatureFactory.newXMLSignature(javax.xml.crypto.dsig.SignedInfo,javax.xml.crypto.dsig.keyinfo.KeyInfo)",creates an xmlsignature and initializes it with the contents of the specified signedinfo and keyinfo objects.
"javax.xml.crypto.dsig.XMLSignatureFactory.newXMLSignature(javax.xml.crypto.dsig.SignedInfo,javax.xml.crypto.dsig.keyinfo.KeyInfo,java.util.List,java.lang.String,java.lang.String)",creates an xmlsignature and initializes it with the specified parameters.
javax.xml.crypto.dsig.XMLSignatureFactory.unmarshalXMLSignature(javax.xml.crypto.dsig.XMLValidateContext),unmarshals a new xmlsignature instance from a mechanism-specific xmlvalidatecontext instance.
javax.xml.crypto.dsig.XMLSignatureFactory.unmarshalXMLSignature(javax.xml.crypto.XMLStructure),unmarshals a new xmlsignature instance from a mechanism-specific xmlstructure instance.
javax.xml.crypto.dsig.TransformException.getCause(),returns the cause of this transformexception or null if the cause is nonexistent or unknown.
javax.xml.crypto.dsig.TransformException.printStackTrace(),"prints this transformexception, its backtrace and the cause's backtrace to the standard error stream."
javax.xml.crypto.dsig.TransformException.printStackTrace(java.io.PrintStream),"prints this transformexception, its backtrace and the cause's backtrace to the specified print stream."
javax.xml.crypto.dsig.TransformException.printStackTrace(java.io.PrintWriter),"prints this transformexception, its backtrace and the cause's backtrace to the specified print writer."
javax.xml.crypto.dsig.XMLSignatureException.getCause(),returns the cause of this xmlsignatureexception or null if the cause is nonexistent or unknown.
javax.xml.crypto.dsig.XMLSignatureException.printStackTrace(),"prints this xmlsignatureexception, its backtrace and the cause's backtrace to the standard error stream."
javax.xml.crypto.dsig.XMLSignatureException.printStackTrace(java.io.PrintStream),"prints this xmlsignatureexception, its backtrace and the cause's backtrace to the specified print stream."
javax.xml.crypto.dsig.XMLSignatureException.printStackTrace(java.io.PrintWriter),"prints this xmlsignatureexception, its backtrace and the cause's backtrace to the specified print writer."
javax.xml.crypto.dsig.dom.DOMSignContext.getNextSibling(),returns the nextsibling node.
javax.xml.crypto.dsig.dom.DOMSignContext.getParent(),returns the parent node.
javax.xml.crypto.dsig.dom.DOMSignContext.setNextSibling(org.w3c.dom.Node),sets the next sibling node.
javax.xml.crypto.dsig.dom.DOMSignContext.setParent(org.w3c.dom.Node),sets the parent node.
javax.xml.crypto.dsig.dom.DOMValidateContext.getNode(),returns the node.
javax.xml.crypto.dsig.dom.DOMValidateContext.setNode(org.w3c.dom.Node),sets the node.
javax.xml.crypto.dsig.keyinfo.KeyInfo.getContent(),returns an unmodifiable list containing the key information.
javax.xml.crypto.dsig.keyinfo.KeyInfo.getId(),"return the optional id attribute of this keyinfo, which may be useful for referencing this keyinfo from other xml structures."
"javax.xml.crypto.dsig.keyinfo.KeyInfo.marshal(javax.xml.crypto.XMLStructure,javax.xml.crypto.XMLCryptoContext)",marshals the key info to xml.
javax.xml.crypto.dsig.keyinfo.KeyName.getName(),returns the name of this keyname.
javax.xml.crypto.dsig.keyinfo.KeyValue.getPublicKey(),returns the public key of this keyvalue.
javax.xml.crypto.dsig.keyinfo.PGPData.getExternalElements(),returns an unmodifiable list of xmlstructures representing elements from an external namespace.
javax.xml.crypto.dsig.keyinfo.PGPData.getKeyId(),"returns the pgp public key identifier of this pgpdata as defined in rfc 2440, section 11."
javax.xml.crypto.dsig.keyinfo.PGPData.getKeyPacket(),"returns the pgp key material packet of this pgpdata as defined in rfc 2440, section 5."
javax.xml.crypto.dsig.keyinfo.RetrievalMethod.dereference(javax.xml.crypto.XMLCryptoContext),dereferences the keyinfo information referenced by this retrievalmethod and applies the specified transforms.
javax.xml.crypto.dsig.keyinfo.RetrievalMethod.getTransforms(),returns an unmodifiable list of transforms of this retrievalmethod.
javax.xml.crypto.dsig.keyinfo.RetrievalMethod.getURI(),returns the uri of the referenced keyinfo information.
javax.xml.crypto.dsig.keyinfo.X509Data.getContent(),returns an unmodifiable list of the content in this x509data.
javax.xml.crypto.dsig.keyinfo.X509IssuerSerial.getIssuerName(),returns the x.
javax.xml.crypto.dsig.keyinfo.X509IssuerSerial.getSerialNumber(),returns the serial number of this x509issuerserial.
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(java.lang.String),"returns a keyinfofactory that supports the specified xml processing mechanism and representation type (ex: ""dom"")."
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(java.lang.String,java.security.Provider)","returns a keyinfofactory that supports the requested xml processing mechanism and representation type (ex: ""dom""), as supplied by the specified provider."
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(java.lang.String,java.lang.String)","returns a keyinfofactory that supports the requested xml processing mechanism and representation type (ex: ""dom""), as supplied by the specified provider."
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(),"returns a keyinfofactory that supports the default xml processing mechanism and representation type (""dom"")."
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getMechanismType(),"returns the type of the xml processing mechanism and representation supported by this keyinfofactory (ex: ""dom"")."
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getProvider(),returns the provider of this keyinfofactory.
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getURIDereferencer(),returns a reference to the uridereferencer that is used by default to dereference uris in retrievalmethod objects.
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.isFeatureSupported(java.lang.String),indicates whether a specified feature is supported.
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo(java.util.List),creates a keyinfo containing the specified list of key information types.
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo(java.util.List,java.lang.String)",creates a keyinfo containing the specified list of key information types and optional id.
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyName(java.lang.String),creates a keyname from the specified name.
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyValue(java.security.PublicKey),creates a keyvalue from the specified public key.
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[]),creates a pgpdata from the specified pgp public key identifier.
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[],byte[],java.util.List)","creates a pgpdata from the specified pgp public key identifier, and optional key material packet and list of external elements."
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[],java.util.List)",creates a pgpdata from the specified pgp key material packet and optional list of external elements.
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod(java.lang.String),creates a retrievalmethod from the specified uri.
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod(java.lang.String,java.lang.String,java.util.List)",creates a retrievalmethod from the specified parameters.
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509Data(java.util.List),creates a x509data containing the specified list of x.
"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509IssuerSerial(java.lang.String,java.math.BigInteger)",creates an x509issuerserial from the specified x.
javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.unmarshalKeyInfo(javax.xml.crypto.XMLStructure),unmarshals a new keyinfo instance from a mechanism-specific xmlstructure (ex: domstructure) instance.
javax.xml.crypto.dsig.spec.ExcC14NParameterSpec.getPrefixList(),returns the inclusive namespace prefix list.
javax.xml.crypto.dsig.spec.HMACParameterSpec.getOutputLength(),returns the truncation length.
javax.xml.crypto.dsig.spec.XPathFilter2ParameterSpec.getXPathList(),returns a list of one or more xpathtype objects.
javax.xml.crypto.dsig.spec.XPathFilterParameterSpec.getNamespaceMap(),returns a map of namespace prefixes.
javax.xml.crypto.dsig.spec.XPathFilterParameterSpec.getXPath(),returns the xpath expression to be evaluated.
javax.xml.crypto.dsig.spec.XPathType.getExpression(),returns the xpath expression to be evaluated.
javax.xml.crypto.dsig.spec.XPathType.getFilter(),returns the filter operation.
javax.xml.crypto.dsig.spec.XPathType.getNamespaceMap(),returns a map of namespace prefixes.
javax.xml.crypto.dsig.spec.XPathType.Filter.toString(),returns the string form of the operation.
javax.xml.crypto.dsig.spec.XSLTTransformParameterSpec.getStylesheet(),returns the stylesheet.
javax.xml.datatype.DatatypeConstants.Field.getId(),get id of this field.
javax.xml.datatype.DatatypeConstants.Field.toString(),returns a field name in english.
javax.xml.datatype.DatatypeFactory.newDuration(java.lang.String),"obtain a new instance of a duration specifying the duration as its string representation, ""pnynmndtnhnmns"", as defined in xml schema 1."
javax.xml.datatype.DatatypeFactory.newDuration(long),obtain a new instance of a duration specifying the duration as milliseconds.
"javax.xml.datatype.DatatypeFactory.newDuration(boolean,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigDecimal)","obtain a new instance of a duration specifying the duration as ispositive, years, months, days, hours, minutes, seconds."
"javax.xml.datatype.DatatypeFactory.newDuration(boolean,int,int,int,int,int,int)","obtain a new instance of a duration specifying the duration as ispositive, years, months, days, hours, minutes, seconds."
javax.xml.datatype.DatatypeFactory.newDurationDayTime(java.lang.String),"create a duration of type xdt:daytimeduration by parsing its string representation, ""pndtnhnmns"", xquery 1."
javax.xml.datatype.DatatypeFactory.newDurationDayTime(long),"create a duration of type xdt:daytimeduration using the specified milliseconds as defined in
xquery 1."
"javax.xml.datatype.DatatypeFactory.newDurationDayTime(boolean,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)","create a duration of type xdt:daytimeduration using the specified day, hour, minute and second as defined in
xquery 1."
"javax.xml.datatype.DatatypeFactory.newDurationDayTime(boolean,int,int,int,int)","create a duration of type xdt:daytimeduration using the specified day, hour, minute and second as defined in
xquery 1."
javax.xml.datatype.DatatypeFactory.newDurationYearMonth(java.lang.String),"create a duration of type xdt:yearmonthduration by parsing its string representation, ""pnynm"", xquery 1."
javax.xml.datatype.DatatypeFactory.newDurationYearMonth(long),"create a duration of type xdt:yearmonthduration using the specified milliseconds as defined in
xquery 1."
"javax.xml.datatype.DatatypeFactory.newDurationYearMonth(boolean,java.math.BigInteger,java.math.BigInteger)","create a duration of type xdt:yearmonthduration using the specified year and month as defined in
xquery 1."
"javax.xml.datatype.DatatypeFactory.newDurationYearMonth(boolean,int,int)","create a duration of type xdt:yearmonthduration using the specified year and month as defined in
xquery 1."
javax.xml.datatype.DatatypeFactory.newInstance(),obtain a new instance of a datatypefactory.
"javax.xml.datatype.DatatypeFactory.newInstance(java.lang.String,java.lang.ClassLoader)",obtain a new instance of a datatypefactory from class name.
javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(),create a new instance of an xmlgregoriancalendar.
javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(java.lang.String),create a new xmlgregoriancalendar by parsing the string as a lexical representation.
javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(java.util.GregorianCalendar),create an xmlgregoriancalendar from a gregoriancalendar.
"javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(java.math.BigInteger,int,int,int,int,int,java.math.BigDecimal,int)",constructor allowing for complete value spaces allowed by w3c xml schema 1.
"javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar(int,int,int,int,int,int,int,int)",constructor of value spaces that a java.
"javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarDate(int,int,int,int)",create a java representation of xml schema builtin datatype date or g*.
"javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime(int,int,int,int)",create a java instance of xml schema builtin datatype time.
"javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime(int,int,int,java.math.BigDecimal,int)",create a java instance of xml schema builtin datatype time.
"javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime(int,int,int,int,int)",create a java instance of xml schema builtin datatype time.
javax.xml.datatype.Duration.add(javax.xml.datatype.Duration),computes a new duration whose value is this+rhs.
javax.xml.datatype.Duration.addTo(java.util.Calendar),adds this duration to a calendar object.
javax.xml.datatype.Duration.addTo(java.util.Date),adds this duration to a date object.
javax.xml.datatype.Duration.compare(javax.xml.datatype.Duration),partial order relation comparison with this duration instance.
javax.xml.datatype.Duration.equals(java.lang.Object),checks if this duration object has the same duration as another duration object.
javax.xml.datatype.Duration.getDays(),"obtains the value of the days field as an integer value, or 0 if not present."
javax.xml.datatype.Duration.getField(javax.xml.datatype.DatatypeConstants.Field),gets the value of a field.
javax.xml.datatype.Duration.getHours(),"obtains the value of the hours field as an integer value, or 0 if not present."
javax.xml.datatype.Duration.getMinutes(),"obtains the value of the minutes field as an integer value, or 0 if not present."
javax.xml.datatype.Duration.getMonths(),"obtains the value of the months field as an integer value, or 0 if not present."
javax.xml.datatype.Duration.getSeconds(),"obtains the value of the seconds field as an integer value, or 0 if not present."
javax.xml.datatype.Duration.getSign(),"returns the sign of this duration in -1,0, or 1."
javax.xml.datatype.Duration.getTimeInMillis(java.util.Calendar),returns the length of the duration in milli-seconds.
javax.xml.datatype.Duration.getTimeInMillis(java.util.Date),returns the length of the duration in milli-seconds.
javax.xml.datatype.Duration.getXMLSchemaType(),return the name of the xml schema date/time type that this instance maps to.
javax.xml.datatype.Duration.getYears(),get the years value of this duration as an int or 0 if not present.
javax.xml.datatype.Duration.hashCode(),returns a hash code consistent with the definition of the equals method.
javax.xml.datatype.Duration.isLongerThan(javax.xml.datatype.Duration),checks if this duration object is strictly longer than another duration object.
javax.xml.datatype.Duration.isSet(javax.xml.datatype.DatatypeConstants.Field),checks if a field is set.
javax.xml.datatype.Duration.isShorterThan(javax.xml.datatype.Duration),checks if this duration object is strictly shorter than another duration object.
javax.xml.datatype.Duration.multiply(int),computes a new duration whose value is factor times longer than the value of this duration.
javax.xml.datatype.Duration.multiply(java.math.BigDecimal),computes a new duration whose value is factor times longer than the value of this duration.
javax.xml.datatype.Duration.negate(),returns a new duration object whose value is -this.
javax.xml.datatype.Duration.normalizeWith(java.util.Calendar),converts the years and months fields into the days field by using a specific time instant as the reference point.
javax.xml.datatype.Duration.subtract(javax.xml.datatype.Duration),computes a new duration whose value is this-rhs.
javax.xml.datatype.Duration.toString(),returns a string representation of this duration object.
javax.xml.datatype.XMLGregorianCalendar.add(javax.xml.datatype.Duration),add duration to this instance.
javax.xml.datatype.XMLGregorianCalendar.clear(),unset all fields to undefined.
javax.xml.datatype.XMLGregorianCalendar.clone(),creates and returns a copy of this object.
javax.xml.datatype.XMLGregorianCalendar.compare(javax.xml.datatype.XMLGregorianCalendar),compare two instances of w3c xml schema 1.
javax.xml.datatype.XMLGregorianCalendar.equals(java.lang.Object),compares this calendar to the specified object.
javax.xml.datatype.XMLGregorianCalendar.getDay(),return day in month or datatypeconstants.
javax.xml.datatype.XMLGregorianCalendar.getEon(),return high order component for xml schema 1.
javax.xml.datatype.XMLGregorianCalendar.getEonAndYear(),return xml schema 1.
javax.xml.datatype.XMLGregorianCalendar.getFractionalSecond(),return fractional seconds.
javax.xml.datatype.XMLGregorianCalendar.getHour(),return hours or datatypeconstants.
javax.xml.datatype.XMLGregorianCalendar.getMillisecond(),return millisecond precision of getfractionalsecond().
javax.xml.datatype.XMLGregorianCalendar.getMinute(),return minutes or datatypeconstants.
javax.xml.datatype.XMLGregorianCalendar.getMonth(),return number of month or datatypeconstants.
javax.xml.datatype.XMLGregorianCalendar.getSecond(),return seconds or datatypeconstants.
javax.xml.datatype.XMLGregorianCalendar.getTimezone(),return timezone offset in minutes or datatypeconstants.
javax.xml.datatype.XMLGregorianCalendar.getTimeZone(int),returns a java.
javax.xml.datatype.XMLGregorianCalendar.getXMLSchemaType(),return the name of the xml schema date/time type that this instance maps to.
javax.xml.datatype.XMLGregorianCalendar.getYear(),return low order component for xml schema 1.
javax.xml.datatype.XMLGregorianCalendar.hashCode(),returns a hash code consistent with the definition of the equals method.
javax.xml.datatype.XMLGregorianCalendar.isValid(),validate instance by getxmlschematype() constraints.
javax.xml.datatype.XMLGregorianCalendar.normalize(),normalize this instance to utc.
javax.xml.datatype.XMLGregorianCalendar.reset(),reset this xmlgregoriancalendar to its original values.
javax.xml.datatype.XMLGregorianCalendar.setDay(int),set days in month.
javax.xml.datatype.XMLGregorianCalendar.setFractionalSecond(java.math.BigDecimal),set fractional seconds.
javax.xml.datatype.XMLGregorianCalendar.setHour(int),set hours.
javax.xml.datatype.XMLGregorianCalendar.setMillisecond(int),set milliseconds.
javax.xml.datatype.XMLGregorianCalendar.setMinute(int),set minutes.
javax.xml.datatype.XMLGregorianCalendar.setMonth(int),set month.
javax.xml.datatype.XMLGregorianCalendar.setSecond(int),set seconds.
"javax.xml.datatype.XMLGregorianCalendar.setTime(int,int,int)",set time as one unit.
"javax.xml.datatype.XMLGregorianCalendar.setTime(int,int,int,java.math.BigDecimal)","set time as one unit, including the optional infinite precision fractional seconds."
"javax.xml.datatype.XMLGregorianCalendar.setTime(int,int,int,int)","set time as one unit, including optional milliseconds."
javax.xml.datatype.XMLGregorianCalendar.setTimezone(int),set the number of minutes in the timezone offset.
javax.xml.datatype.XMLGregorianCalendar.setYear(java.math.BigInteger),set low and high order component of xsd datetime year field.
javax.xml.datatype.XMLGregorianCalendar.setYear(int),set year of xsd datetime year field.
javax.xml.datatype.XMLGregorianCalendar.toGregorianCalendar(),convert this xmlgregoriancalendar to a gregoriancalendar.
"javax.xml.datatype.XMLGregorianCalendar.toGregorianCalendar(java.util.TimeZone,java.util.Locale,javax.xml.datatype.XMLGregorianCalendar)",convert this xmlgregoriancalendar along with provided parameters to a gregoriancalendar instance.
javax.xml.datatype.XMLGregorianCalendar.toString(),returns a string representation of this xmlgregoriancalendar object.
javax.xml.datatype.XMLGregorianCalendar.toXMLFormat(),return the lexical representation of this instance.
javax.xml.namespace.NamespaceContext.getNamespaceURI(java.lang.String),get namespace uri bound to a prefix in the current scope.
javax.xml.namespace.NamespaceContext.getPrefix(java.lang.String),get prefix bound to namespace uri in the current scope.
javax.xml.namespace.NamespaceContext.getPrefixes(java.lang.String),get all prefixes bound to a namespace uri in the current scope.
javax.xml.namespace.QName.equals(java.lang.Object),test this qname for equality with another object.
javax.xml.namespace.QName.getLocalPart(),get the local part of this qname.
javax.xml.namespace.QName.getNamespaceURI(),get the namespace uri of this qname.
javax.xml.namespace.QName.getPrefix(),get the prefix of this qname.
javax.xml.namespace.QName.hashCode(),generate the hash code for this qname.
javax.xml.namespace.QName.toString(),string representation of this qname.
javax.xml.namespace.QName.valueOf(java.lang.String),qname derived from parsing the formatted string.
javax.xml.parsers.DocumentBuilder.getDOMImplementation(),obtain an instance of a domimplementation object.
javax.xml.parsers.DocumentBuilder.getSchema(),get a reference to the the schema being used by the xml processor.
javax.xml.parsers.DocumentBuilder.isNamespaceAware(),indicates whether or not this parser is configured to understand namespaces.
javax.xml.parsers.DocumentBuilder.isValidating(),indicates whether or not this parser is configured to validate xml documents.
javax.xml.parsers.DocumentBuilder.isXIncludeAware(),get the xinclude processing mode for this parser.
javax.xml.parsers.DocumentBuilder.newDocument(),obtain a new instance of a dom document object to build a dom tree with.
javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream),parse the content of the given inputstream as an xml document and return a new dom document object.
"javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream,java.lang.String)",parse the content of the given inputstream as an xml document and return a new dom document object.
javax.xml.parsers.DocumentBuilder.parse(java.lang.String),parse the content of the given uri as an xml document and return a new dom document object.
javax.xml.parsers.DocumentBuilder.parse(java.io.File),parse the content of the given file as an xml document and return a new dom document object.
javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource),parse the content of the given input source as an xml document and return a new dom document object.
javax.xml.parsers.DocumentBuilder.reset(),reset this documentbuilder to its original configuration.
javax.xml.parsers.DocumentBuilder.setEntityResolver(org.xml.sax.EntityResolver),specify the entityresolver to be used to resolve entities present in the xml document to be parsed.
javax.xml.parsers.DocumentBuilder.setErrorHandler(org.xml.sax.ErrorHandler),specify the errorhandler to be used by the parser.
javax.xml.parsers.DocumentBuilderFactory.getAttribute(java.lang.String),allows the user to retrieve specific attributes on the underlying implementation.
javax.xml.parsers.DocumentBuilderFactory.getFeature(java.lang.String),get the state of the named feature.
javax.xml.parsers.DocumentBuilderFactory.getSchema(),gets the schema object specified through the setschema(schema schema) method.
javax.xml.parsers.DocumentBuilderFactory.isCoalescing(),indicates whether or not the factory is configured to produce parsers which converts cdata nodes to text nodes and appends it to the adjacent (if any) text node.
javax.xml.parsers.DocumentBuilderFactory.isExpandEntityReferences(),indicates whether or not the factory is configured to produce parsers which expand entity reference nodes.
javax.xml.parsers.DocumentBuilderFactory.isIgnoringComments(),indicates whether or not the factory is configured to produce parsers which ignores comments.
javax.xml.parsers.DocumentBuilderFactory.isIgnoringElementContentWhitespace(),indicates whether or not the factory is configured to produce parsers which ignore ignorable whitespace in element content.
javax.xml.parsers.DocumentBuilderFactory.isNamespaceAware(),indicates whether or not the factory is configured to produce parsers which are namespace aware.
javax.xml.parsers.DocumentBuilderFactory.isValidating(),indicates whether or not the factory is configured to produce parsers which validate the xml content during parse.
javax.xml.parsers.DocumentBuilderFactory.isXIncludeAware(),get state of xinclude processing.
javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder(),creates a new instance of a documentbuilder using the currently configured parameters.
javax.xml.parsers.DocumentBuilderFactory.newInstance(),obtain a new instance of a documentbuilderfactory.
"javax.xml.parsers.DocumentBuilderFactory.newInstance(java.lang.String,java.lang.ClassLoader)",obtain a new instance of a documentbuilderfactory from class name.
"javax.xml.parsers.DocumentBuilderFactory.setAttribute(java.lang.String,java.lang.Object)",allows the user to set specific attributes on the underlying implementation.
javax.xml.parsers.DocumentBuilderFactory.setCoalescing(boolean),specifies that the parser produced by this code will convert cdata nodes to text nodes and append it to the adjacent (if any) text node.
javax.xml.parsers.DocumentBuilderFactory.setExpandEntityReferences(boolean),specifies that the parser produced by this code will expand entity reference nodes.
"javax.xml.parsers.DocumentBuilderFactory.setFeature(java.lang.String,boolean)",set a feature for this documentbuilderfactory and documentbuilders created by this factory.
javax.xml.parsers.DocumentBuilderFactory.setIgnoringComments(boolean),specifies that the parser produced by this code will ignore comments.
javax.xml.parsers.DocumentBuilderFactory.setIgnoringElementContentWhitespace(boolean),specifies that the parsers created by this factory must eliminate whitespace in element content (sometimes known loosely as 'ignorable whitespace') when parsing xml documents (see xml rec 2.
javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean),specifies that the parser produced by this code will provide support for xml namespaces.
javax.xml.parsers.DocumentBuilderFactory.setSchema(javax.xml.validation.Schema),set the schema to be used by parsers created from this factory.
javax.xml.parsers.DocumentBuilderFactory.setValidating(boolean),specifies that the parser produced by this code will validate documents as they are parsed.
javax.xml.parsers.DocumentBuilderFactory.setXIncludeAware(boolean),set state of xinclude processing.
javax.xml.parsers.SAXParser.getParser(),returns the sax parser that is encapsultated by the implementation of this class.
javax.xml.parsers.SAXParser.getProperty(java.lang.String),returns the particular property requested for in the underlying implementation of xmlreader.
javax.xml.parsers.SAXParser.getSchema(),get a reference to the the schema being used by the xml processor.
javax.xml.parsers.SAXParser.getXMLReader(),returns the xmlreader that is encapsulated by the implementation of this class.
javax.xml.parsers.SAXParser.isNamespaceAware(),indicates whether or not this parser is configured to understand namespaces.
javax.xml.parsers.SAXParser.isValidating(),indicates whether or not this parser is configured to validate xml documents.
javax.xml.parsers.SAXParser.isXIncludeAware(),get the xinclude processing mode for this parser.
"javax.xml.parsers.SAXParser.parse(java.io.InputStream,org.xml.sax.HandlerBase)",parse the content of the given inputstream instance as xml using the specified handlerbase.
"javax.xml.parsers.SAXParser.parse(java.io.InputStream,org.xml.sax.HandlerBase,java.lang.String)",parse the content of the given inputstream instance as xml using the specified handlerbase.
"javax.xml.parsers.SAXParser.parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)",parse the content of the given inputstream instance as xml using the specified defaulthandler.
"javax.xml.parsers.SAXParser.parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler,java.lang.String)",parse the content of the given inputstream instance as xml using the specified defaulthandler.
"javax.xml.parsers.SAXParser.parse(java.lang.String,org.xml.sax.HandlerBase)",parse the content described by the giving uniform resource identifier (uri) as xml using the specified handlerbase.
"javax.xml.parsers.SAXParser.parse(java.lang.String,org.xml.sax.helpers.DefaultHandler)",parse the content described by the giving uniform resource identifier (uri) as xml using the specified defaulthandler.
"javax.xml.parsers.SAXParser.parse(java.io.File,org.xml.sax.HandlerBase)",parse the content of the file specified as xml using the specified handlerbase.
"javax.xml.parsers.SAXParser.parse(java.io.File,org.xml.sax.helpers.DefaultHandler)",parse the content of the file specified as xml using the specified defaulthandler.
"javax.xml.parsers.SAXParser.parse(org.xml.sax.InputSource,org.xml.sax.HandlerBase)",parse the content given inputsource as xml using the specified handlerbase.
"javax.xml.parsers.SAXParser.parse(org.xml.sax.InputSource,org.xml.sax.helpers.DefaultHandler)",parse the content given inputsource as xml using the specified defaulthandler.
javax.xml.parsers.SAXParser.reset(),reset this saxparser to its original configuration.
"javax.xml.parsers.SAXParser.setProperty(java.lang.String,java.lang.Object)",sets the particular property in the underlying implementation of xmlreader.
javax.xml.parsers.SAXParserFactory.getFeature(java.lang.String),returns the particular property requested for in the underlying implementation of org.
javax.xml.parsers.SAXParserFactory.getSchema(),gets the schema object specified through the setschema(schema schema) method.
javax.xml.parsers.SAXParserFactory.isNamespaceAware(),indicates whether or not the factory is configured to produce parsers which are namespace aware.
javax.xml.parsers.SAXParserFactory.isValidating(),indicates whether or not the factory is configured to produce parsers which validate the xml content during parse.
javax.xml.parsers.SAXParserFactory.isXIncludeAware(),get state of xinclude processing.
javax.xml.parsers.SAXParserFactory.newInstance(),obtain a new instance of a saxparserfactory.
"javax.xml.parsers.SAXParserFactory.newInstance(java.lang.String,java.lang.ClassLoader)",obtain a new instance of a saxparserfactory from class name.
javax.xml.parsers.SAXParserFactory.newSAXParser(),creates a new instance of a saxparser using the currently configured factory parameters.
"javax.xml.parsers.SAXParserFactory.setFeature(java.lang.String,boolean)",sets the particular feature in the underlying implementation of org.
javax.xml.parsers.SAXParserFactory.setNamespaceAware(boolean),specifies that the parser produced by this code will provide support for xml namespaces.
javax.xml.parsers.SAXParserFactory.setSchema(javax.xml.validation.Schema),set the schema to be used by parsers created from this factory.
javax.xml.parsers.SAXParserFactory.setValidating(boolean),specifies that the parser produced by this code will validate documents as they are parsed.
javax.xml.parsers.SAXParserFactory.setXIncludeAware(boolean),set state of xinclude processing.
javax.xml.parsers.FactoryConfigurationError.getCause(),use the exception chaining mechanism of jdk1.
javax.xml.parsers.FactoryConfigurationError.getException(),return the actual exception (if any) that caused this exception to be raised.
javax.xml.parsers.FactoryConfigurationError.getMessage(),return the message (if any) for this error .
javax.xml.soap.Detail.addDetailEntry(javax.xml.soap.Name),creates a new detailentry object with the given name and adds it to this detail object.
javax.xml.soap.Detail.addDetailEntry(javax.xml.namespace.QName),creates a new detailentry object with the given qname and adds it to this detail object.
javax.xml.soap.Detail.getDetailEntries(),gets an iterator over all of the detailentrys in this detail object.
javax.xml.soap.Name.getLocalName(),gets the local name part of the xml name that this name object represents.
javax.xml.soap.Name.getPrefix(),returns the prefix that was specified when this name object was initialized.
javax.xml.soap.Name.getQualifiedName(),gets the namespace-qualified name of the xml name that this name object represents.
javax.xml.soap.Name.getURI(),returns the uri of the namespace for the xml name that this name object represents.
javax.xml.soap.Node.detachNode(),removes this node object from the tree.
javax.xml.soap.Node.getParentElement(),returns the parent element of this node object.
javax.xml.soap.Node.getValue(),returns the value of this node if this is a text node or the value of the immediate child of this node otherwise.
javax.xml.soap.Node.recycleNode(),notifies the implementation that this node object is no longer being used by the application and that the implementation is free to reuse this object for nodes that may be created later.
javax.xml.soap.Node.setParentElement(javax.xml.soap.SOAPElement),sets the parent of this node object to the given soapelement object.
javax.xml.soap.Node.setValue(java.lang.String),"if this is a text node then this method will set its value, otherwise it sets the value of the immediate (text) child of this node."
javax.xml.soap.SOAPBody.addBodyElement(javax.xml.soap.Name),creates a new soapbodyelement object with the specified name and adds it to this soapbody object.
javax.xml.soap.SOAPBody.addBodyElement(javax.xml.namespace.QName),creates a new soapbodyelement object with the specified qname and adds it to this soapbody object.
javax.xml.soap.SOAPBody.addDocument(org.w3c.dom.Document),adds the root node of the dom document to this soapbody object.
javax.xml.soap.SOAPBody.addFault(),creates a new soapfault object and adds it to this soapbody object.
"javax.xml.soap.SOAPBody.addFault(javax.xml.soap.Name,java.lang.String,java.util.Locale)",creates a new soapfault object and adds it to this soapbody object.
"javax.xml.soap.SOAPBody.addFault(javax.xml.namespace.QName,java.lang.String,java.util.Locale)",creates a new soapfault object and adds it to this soapbody object.
"javax.xml.soap.SOAPBody.addFault(javax.xml.soap.Name,java.lang.String)",creates a new soapfault object and adds it to this soapbody object.
"javax.xml.soap.SOAPBody.addFault(javax.xml.namespace.QName,java.lang.String)",creates a new soapfault object and adds it to this soapbody object.
javax.xml.soap.SOAPBody.extractContentAsDocument(),creates a new dom document and sets the first child of this soapbody as it's document element.
javax.xml.soap.SOAPBody.getFault(),returns the soapfault object in this soapbody object.
javax.xml.soap.SOAPBody.hasFault(),indicates whether a soapfault object exists in this soapbody object.
"javax.xml.soap.SOAPElement.addAttribute(javax.xml.soap.Name,java.lang.String)",adds an attribute with the specified name and value to this soapelement object.
"javax.xml.soap.SOAPElement.addAttribute(javax.xml.namespace.QName,java.lang.String)",adds an attribute with the specified name and value to this soapelement object.
javax.xml.soap.SOAPElement.addChildElement(javax.xml.soap.Name),creates a new soapelement object initialized with the given name object and adds the new element to this soapelement object.
javax.xml.soap.SOAPElement.addChildElement(javax.xml.namespace.QName),creates a new soapelement object initialized with the given qname object and adds the new element to this soapelement object.
javax.xml.soap.SOAPElement.addChildElement(java.lang.String),creates a new soapelement object initialized with the specified local name and adds the new element to this soapelement object.
"javax.xml.soap.SOAPElement.addChildElement(java.lang.String,java.lang.String)",creates a new soapelement object initialized with the specified local name and prefix and adds the new element to this soapelement object.
"javax.xml.soap.SOAPElement.addChildElement(java.lang.String,java.lang.String,java.lang.String)","creates a new soapelement object initialized with the specified local name, prefix, and uri and adds the new element to this soapelement object."
javax.xml.soap.SOAPElement.addChildElement(javax.xml.soap.SOAPElement),add a soapelement as a child of this soapelement instance.
"javax.xml.soap.SOAPElement.addNamespaceDeclaration(java.lang.String,java.lang.String)",adds a namespace declaration with the specified prefix and uri to this soapelement object.
javax.xml.soap.SOAPElement.addTextNode(java.lang.String),creates a new text object initialized with the given string and adds it to this soapelement object.
"javax.xml.soap.SOAPElement.createQName(java.lang.String,java.lang.String)","creates a qname whose namespace uri is the one associated with the parameter, prefix, in the context of this soapelement."
javax.xml.soap.SOAPElement.getAllAttributes(),returns an iterator over all of the attribute name objects in this soapelement object.
javax.xml.soap.SOAPElement.getAllAttributesAsQNames(),returns an iterator over all of the attributes in this soapelement as qname objects.
javax.xml.soap.SOAPElement.getAttributeValue(javax.xml.soap.Name),returns the value of the attribute with the specified name.
javax.xml.soap.SOAPElement.getAttributeValue(javax.xml.namespace.QName),returns the value of the attribute with the specified qname.
javax.xml.soap.SOAPElement.getChildElements(),returns an iterator over all the immediate child nodes of this element.
javax.xml.soap.SOAPElement.getChildElements(javax.xml.soap.Name),returns an iterator over all the immediate child nodes of this element with the specified name.
javax.xml.soap.SOAPElement.getChildElements(javax.xml.namespace.QName),returns an iterator over all the immediate child nodes of this element with the specified qname.
javax.xml.soap.SOAPElement.getElementName(),returns the name of this soapelement object.
javax.xml.soap.SOAPElement.getElementQName(),returns the qname of this soapelement object.
javax.xml.soap.SOAPElement.getEncodingStyle(),returns the encoding style for this soapelement object.
javax.xml.soap.SOAPElement.getNamespacePrefixes(),returns an iterator over the namespace prefix strings declared by this element.
javax.xml.soap.SOAPElement.getNamespaceURI(java.lang.String),returns the uri of the namespace that has the given prefix.
javax.xml.soap.SOAPElement.getVisibleNamespacePrefixes(),returns an iterator over the namespace prefix strings visible to this element.
javax.xml.soap.SOAPElement.removeAttribute(javax.xml.soap.Name),removes the attribute with the specified name.
javax.xml.soap.SOAPElement.removeAttribute(javax.xml.namespace.QName),removes the attribute with the specified qname.
javax.xml.soap.SOAPElement.removeContents(),detaches all children of this soapelement.
javax.xml.soap.SOAPElement.removeNamespaceDeclaration(java.lang.String),removes the namespace declaration corresponding to the given prefix.
javax.xml.soap.SOAPElement.setElementQName(javax.xml.namespace.QName),changes the name of this element to newname if possible.
javax.xml.soap.SOAPElement.setEncodingStyle(java.lang.String),sets the encoding style for this soapelement object to one specified.
javax.xml.soap.SOAPEnvelope.addBody(),creates a soapbody object and sets it as the soapbody object for this soapenvelope object.
javax.xml.soap.SOAPEnvelope.addHeader(),creates a soapheader object and sets it as the soapheader object for this soapenvelope object.
"javax.xml.soap.SOAPEnvelope.createName(java.lang.String,java.lang.String,java.lang.String)","creates a new name object initialized with the given local name, namespace prefix, and namespace uri."
javax.xml.soap.SOAPEnvelope.createName(java.lang.String),creates a new name object initialized with the given local name.
javax.xml.soap.SOAPEnvelope.getBody(),returns the soapbody object associated with this soapenvelope object.
javax.xml.soap.SOAPEnvelope.getHeader(),returns the soapheader object for this soapenvelope object.
javax.xml.soap.SOAPFault.addDetail(),creates an optional detail object and sets it as the detail object for this soapfault object.
"javax.xml.soap.SOAPFault.addFaultReasonText(java.lang.String,java.util.Locale)",appends or replaces a reason text item containing the specified text message and an xml:lang derived from locale.
javax.xml.soap.SOAPFault.appendFaultSubcode(javax.xml.namespace.QName),adds a subcode to the end of the sequence of subcodes contained by this soapfault.
javax.xml.soap.SOAPFault.getDetail(),returns the optional detail element for this soapfault object.
javax.xml.soap.SOAPFault.getFaultActor(),gets the fault actor for this soapfault object.
javax.xml.soap.SOAPFault.getFaultCode(),gets the fault code for this soapfault object.
javax.xml.soap.SOAPFault.getFaultCodeAsName(),gets the mandatory soap 1.
javax.xml.soap.SOAPFault.getFaultCodeAsQName(),gets the fault code for this soapfault object as a qname object.
javax.xml.soap.SOAPFault.getFaultNode(),returns the optional node element value for this soapfault object.
javax.xml.soap.SOAPFault.getFaultReasonLocales(),returns an iterator over a distinct sequence of locales for which there are associated reason text items.
javax.xml.soap.SOAPFault.getFaultReasonText(java.util.Locale),returns the reason text associated with the given locale.
javax.xml.soap.SOAPFault.getFaultReasonTexts(),returns an iterator over a sequence of string objects containing all of the reason text items for this soapfault.
javax.xml.soap.SOAPFault.getFaultRole(),returns the optional role element value for this soapfault object.
javax.xml.soap.SOAPFault.getFaultString(),gets the fault string for this soapfault object.
javax.xml.soap.SOAPFault.getFaultStringLocale(),gets the locale of the fault string for this soapfault object.
javax.xml.soap.SOAPFault.getFaultSubcodes(),gets the subcodes for this soapfault as an iterator over qnames.
javax.xml.soap.SOAPFault.hasDetail(),returns true if this soapfault has a detail subelement and false otherwise.
javax.xml.soap.SOAPFault.removeAllFaultSubcodes(),removes any subcodes that may be contained by this soapfault.
javax.xml.soap.SOAPFault.setFaultActor(java.lang.String),sets this soapfault object with the given fault actor.
javax.xml.soap.SOAPFault.setFaultCode(javax.xml.soap.Name),sets this soapfault object with the given fault code.
javax.xml.soap.SOAPFault.setFaultCode(javax.xml.namespace.QName),sets this soapfault object with the given fault code.
javax.xml.soap.SOAPFault.setFaultCode(java.lang.String),sets this soapfault object with the give fault code.
javax.xml.soap.SOAPFault.setFaultNode(java.lang.String),creates or replaces any existing node element value for this soapfault object.
javax.xml.soap.SOAPFault.setFaultRole(java.lang.String),creates or replaces any existing role element value for this soapfault object.
javax.xml.soap.SOAPFault.setFaultString(java.lang.String),sets the fault string for this soapfault object to the given string.
"javax.xml.soap.SOAPFault.setFaultString(java.lang.String,java.util.Locale)",sets the fault string for this soapfault object to the given string and localized to the given locale.
javax.xml.soap.SOAPHeader.addHeaderElement(javax.xml.soap.Name),creates a new soapheaderelement object initialized with the specified name and adds it to this soapheader object.
javax.xml.soap.SOAPHeader.addHeaderElement(javax.xml.namespace.QName),creates a new soapheaderelement object initialized with the specified qname and adds it to this soapheader object.
javax.xml.soap.SOAPHeader.addNotUnderstoodHeaderElement(javax.xml.namespace.QName),creates a new notunderstood soapheaderelement object initialized with the specified name and adds it to this soapheader object.
javax.xml.soap.SOAPHeader.addUpgradeHeaderElement(java.util.Iterator),creates a new upgrade soapheaderelement object initialized with the specified list of supported soap uris and adds it to this soapheader object.
javax.xml.soap.SOAPHeader.addUpgradeHeaderElement(java.lang.String[]),creates a new upgrade soapheaderelement object initialized with the specified array of supported soap uris and adds it to this soapheader object.
javax.xml.soap.SOAPHeader.addUpgradeHeaderElement(java.lang.String),creates a new upgrade soapheaderelement object initialized with the specified supported soap uri and adds it to this soapheader object.
javax.xml.soap.SOAPHeader.examineAllHeaderElements(),returns an iterator over all the soapheaderelement objects in this soapheader object.
javax.xml.soap.SOAPHeader.examineHeaderElements(java.lang.String),returns an iterator over all the soapheaderelement objects in this soapheader object that have the specified actor.
javax.xml.soap.SOAPHeader.examineMustUnderstandHeaderElements(java.lang.String),returns an iterator over all the soapheaderelement objects in this soapheader object that have the specified actor and that have a mustunderstand attribute whose value is equivalent to true.
javax.xml.soap.SOAPHeader.extractAllHeaderElements(),returns an iterator over all the soapheaderelement objects in this soapheader object and detaches them from this soapheader object.
javax.xml.soap.SOAPHeader.extractHeaderElements(java.lang.String),returns an iterator over all the soapheaderelement objects in this soapheader object that have the specified actor and detaches them from this soapheader object.
javax.xml.soap.SOAPHeaderElement.getActor(),returns the uri of the actor attribute of this soapheaderelement.
javax.xml.soap.SOAPHeaderElement.getMustUnderstand(),returns the boolean value of the mustunderstand attribute for this soapheaderelement.
javax.xml.soap.SOAPHeaderElement.getRelay(),returns the boolean value of the relay attribute for this soapheaderelement.
javax.xml.soap.SOAPHeaderElement.getRole(),returns the value of the role attribute of this soapheaderelement.
javax.xml.soap.SOAPHeaderElement.setActor(java.lang.String),sets the actor associated with this soapheaderelement object to the specified actor.
javax.xml.soap.SOAPHeaderElement.setMustUnderstand(boolean),sets the mustunderstand attribute for this soapheaderelement object to be either true or false.
javax.xml.soap.SOAPHeaderElement.setRelay(boolean),sets the relay attribute for this soapheaderelement to be either true or false.
javax.xml.soap.SOAPHeaderElement.setRole(java.lang.String),sets the role associated with this soapheaderelement object to the specified role.
javax.xml.soap.Text.isComment(),retrieves whether this text object represents a comment.
"javax.xml.soap.AttachmentPart.addMimeHeader(java.lang.String,java.lang.String)",adds a mime header with the specified name and value to this attachmentpart object.
javax.xml.soap.AttachmentPart.clearContent(),clears out the content of this attachmentpart object.
javax.xml.soap.AttachmentPart.getAllMimeHeaders(),retrieves all the headers for this attachmentpart object as an iterator over the mimeheader objects.
javax.xml.soap.AttachmentPart.getBase64Content(),"returns an inputstream which can be used to obtain the content of attachmentpart as base64 encoded character data, this method would base64 encode the raw bytes of the attachment and return."
javax.xml.soap.AttachmentPart.getContent(),gets the content of this attachmentpart object as a java object.
javax.xml.soap.AttachmentPart.getContentId(),"gets the value of the mime header whose name is ""content-id""."
javax.xml.soap.AttachmentPart.getContentLocation(),"gets the value of the mime header whose name is ""content-location""."
javax.xml.soap.AttachmentPart.getContentType(),"gets the value of the mime header whose name is ""content-type""."
javax.xml.soap.AttachmentPart.getDataHandler(),gets the datahandler object for this attachmentpart object.
javax.xml.soap.AttachmentPart.getMatchingMimeHeaders(java.lang.String[]),retrieves all mimeheader objects that match a name in the given array.
javax.xml.soap.AttachmentPart.getMimeHeader(java.lang.String),gets all the values of the header identified by the given string.
javax.xml.soap.AttachmentPart.getNonMatchingMimeHeaders(java.lang.String[]),retrieves all mimeheader objects whose name does not match a name in the given array.
javax.xml.soap.AttachmentPart.getRawContent(),gets the content of this attachmentpart object as an inputstream as if a call had been made to getcontent and no datacontenthandler had been registered for the content-type of this attachmentpart.
javax.xml.soap.AttachmentPart.getRawContentBytes(),gets the content of this attachmentpart object as a byte[] array as if a call had been made to getcontent and no datacontenthandler had been registered for the content-type of this attachmentpart.
javax.xml.soap.AttachmentPart.getSize(),returns the number of bytes in this attachmentpart object.
javax.xml.soap.AttachmentPart.removeAllMimeHeaders(),removes all the mime header entries.
javax.xml.soap.AttachmentPart.removeMimeHeader(java.lang.String),removes all mime headers that match the given name.
"javax.xml.soap.AttachmentPart.setBase64Content(java.io.InputStream,java.lang.String)","sets the content of this attachment part from the base64 source inputstream and sets the value of the content-type header to the value contained in contenttype, this method would first decode the base64 input and write the resulting raw bytes to the attachment."
"javax.xml.soap.AttachmentPart.setContent(java.lang.Object,java.lang.String)",sets the content of this attachment part to that of the given object and sets the value of the content-type header to the given type.
javax.xml.soap.AttachmentPart.setContentId(java.lang.String),"sets the mime header whose name is ""content-id"" with the given value."
javax.xml.soap.AttachmentPart.setContentLocation(java.lang.String),"sets the mime header whose name is ""content-location"" with the given value."
javax.xml.soap.AttachmentPart.setContentType(java.lang.String),"sets the mime header whose name is ""content-type"" with the given value."
javax.xml.soap.AttachmentPart.setDataHandler(javax.activation.DataHandler),sets the given datahandler object as the data handler for this attachmentpart object.
"javax.xml.soap.AttachmentPart.setMimeHeader(java.lang.String,java.lang.String)","changes the first header entry that matches the given name to the given value, adding a new header if no existing header matches."
"javax.xml.soap.AttachmentPart.setRawContent(java.io.InputStream,java.lang.String)",sets the content of this attachment part to that contained by the inputstream content and sets the value of the content-type header to the value contained in contenttype.
"javax.xml.soap.AttachmentPart.setRawContentBytes(byte[],int,int,java.lang.String)",sets the content of this attachment part to that contained by the byte[] array content and sets the value of the content-type header to the value contained in contenttype.
javax.xml.soap.MessageFactory.createMessage(),"creates a new soapmessage object with the default soappart, soapenvelope, soapbody, and soapheader objects."
"javax.xml.soap.MessageFactory.createMessage(javax.xml.soap.MimeHeaders,java.io.InputStream)",internalizes the contents of the given inputstream object into a new soapmessage object and returns the soapmessage object.
javax.xml.soap.MessageFactory.newInstance(),creates a new messagefactory object that is an instance of the default implementation (soap 1.
javax.xml.soap.MessageFactory.newInstance(java.lang.String),creates a new messagefactory object that is an instance of the specified implementation.
javax.xml.soap.MimeHeader.getName(),returns the name of this mimeheader object.
javax.xml.soap.MimeHeader.getValue(),returns the value of this mimeheader object.
"javax.xml.soap.MimeHeaders.addHeader(java.lang.String,java.lang.String)",adds a mimeheader object with the specified name and value to this mimeheaders object's list of headers.
javax.xml.soap.MimeHeaders.getAllHeaders(),returns all the mimeheaders in this mimeheaders object.
javax.xml.soap.MimeHeaders.getHeader(java.lang.String),returns all of the values for the specified header as an array of string objects.
javax.xml.soap.MimeHeaders.getMatchingHeaders(java.lang.String[]),returns all the mimeheader objects whose name matches a name in the given array of names.
javax.xml.soap.MimeHeaders.getNonMatchingHeaders(java.lang.String[]),returns all of the mimeheader objects whose name does not match a name in the given array of names.
javax.xml.soap.MimeHeaders.removeAllHeaders(),removes all the header entries from this mimeheaders object.
javax.xml.soap.MimeHeaders.removeHeader(java.lang.String),remove all mimeheader objects whose name matches the given name.
"javax.xml.soap.MimeHeaders.setHeader(java.lang.String,java.lang.String)","replaces the current value of the first header entry whose name matches the given name with the given value, adding a new header if no existing header name matches."
javax.xml.soap.SAAJMetaFactory.newMessageFactory(java.lang.String),creates a messagefactory object for the given string protocol.
javax.xml.soap.SAAJMetaFactory.newSOAPFactory(java.lang.String),creates a soapfactory object for the given string protocol.
"javax.xml.soap.SOAPConnection.call(javax.xml.soap.SOAPMessage,java.lang.Object)",sends the given message to the specified endpoint and blocks until it has returned the response.
javax.xml.soap.SOAPConnection.close(),closes this soapconnection object.
javax.xml.soap.SOAPConnection.get(java.lang.Object),"gets a message from a specific endpoint and blocks until it receives,."
javax.xml.soap.SOAPConnectionFactory.createConnection(),create a new soapconnection.
javax.xml.soap.SOAPConnectionFactory.newInstance(),creates an instance of the default soapconnectionfactory object.
javax.xml.soap.SOAPFactory.createDetail(),creates a new detail object which serves as a container for detailentry objects.
javax.xml.soap.SOAPFactory.createElement(org.w3c.dom.Element),creates a soapelement object from an existing dom element.
javax.xml.soap.SOAPFactory.createElement(javax.xml.soap.Name),creates a soapelement object initialized with the given name object.
javax.xml.soap.SOAPFactory.createElement(javax.xml.namespace.QName),creates a soapelement object initialized with the given qname object.
javax.xml.soap.SOAPFactory.createElement(java.lang.String),creates a soapelement object initialized with the given local name.
"javax.xml.soap.SOAPFactory.createElement(java.lang.String,java.lang.String,java.lang.String)","creates a new soapelement object with the given local name, prefix and uri."
"javax.xml.soap.SOAPFactory.createFault(java.lang.String,javax.xml.namespace.QName)",creates a new soapfault object initialized with the given reasontext and faultcode.
javax.xml.soap.SOAPFactory.createFault(),creates a new default soapfault object.
"javax.xml.soap.SOAPFactory.createName(java.lang.String,java.lang.String,java.lang.String)","creates a new name object initialized with the given local name, namespace prefix, and namespace uri."
javax.xml.soap.SOAPFactory.createName(java.lang.String),creates a new name object initialized with the given local name.
javax.xml.soap.SOAPFactory.newInstance(),creates a new soapfactory object that is an instance of the default implementation (soap 1.
javax.xml.soap.SOAPFactory.newInstance(java.lang.String),"creates a new soapfactory object that is an instance of the specified implementation, this method uses the saajmetafactory to locate the implementation class and create the soapfactory instance."
javax.xml.soap.SOAPMessage.addAttachmentPart(javax.xml.soap.AttachmentPart),adds the given attachmentpart object to this soapmessage object.
javax.xml.soap.SOAPMessage.countAttachments(),gets a count of the number of attachments in this message.
javax.xml.soap.SOAPMessage.createAttachmentPart(),creates a new empty attachmentpart object.
javax.xml.soap.SOAPMessage.createAttachmentPart(javax.activation.DataHandler),creates an attachmentpart object and populates it using the given datahandler object.
"javax.xml.soap.SOAPMessage.createAttachmentPart(java.lang.Object,java.lang.String)",creates an attachmentpart object and populates it with the specified data of the specified content type.
javax.xml.soap.SOAPMessage.getAttachment(javax.xml.soap.SOAPElement),returns an attachmentpart object that is associated with an attachment that is referenced by this soapelement or null if no such attachment exists.
javax.xml.soap.SOAPMessage.getAttachments(),retrieves all the attachmentpart objects that are part of this soapmessage object.
javax.xml.soap.SOAPMessage.getAttachments(javax.xml.soap.MimeHeaders),retrieves all the attachmentpart objects that have header entries that match the specified headers.
javax.xml.soap.SOAPMessage.getContentDescription(),retrieves a description of this soapmessage object's content.
javax.xml.soap.SOAPMessage.getMimeHeaders(),returns all the transport-specific mime headers for this soapmessage object in a transport-independent fashion.
javax.xml.soap.SOAPMessage.getProperty(java.lang.String),retrieves value of the specified property.
javax.xml.soap.SOAPMessage.getSOAPBody(),gets the soap body contained in this soapmessage object.
javax.xml.soap.SOAPMessage.getSOAPHeader(),gets the soap header contained in this soapmessage object.
javax.xml.soap.SOAPMessage.getSOAPPart(),gets the soap part of this soapmessage object.
javax.xml.soap.SOAPMessage.removeAllAttachments(),removes all attachmentpart objects that have been added to this soapmessage object.
javax.xml.soap.SOAPMessage.removeAttachments(javax.xml.soap.MimeHeaders),removes all the attachmentpart objects that have header entries that match the specified headers.
javax.xml.soap.SOAPMessage.saveChanges(),updates this soapmessage object with all the changes that have been made to it.
javax.xml.soap.SOAPMessage.saveRequired(),indicates whether this soapmessage object needs to have the method savechanges called on it.
javax.xml.soap.SOAPMessage.setContentDescription(java.lang.String),sets the description of this soapmessage object's content with the given description.
"javax.xml.soap.SOAPMessage.setProperty(java.lang.String,java.lang.Object)",associates the specified value with the specified property.
javax.xml.soap.SOAPMessage.writeTo(java.io.OutputStream),writes this soapmessage object to the given output stream.
"javax.xml.soap.SOAPPart.addMimeHeader(java.lang.String,java.lang.String)",creates a mimeheader object with the specified name and value and adds it to this soappart object.
javax.xml.soap.SOAPPart.getAllMimeHeaders(),retrieves all the headers for this soappart object as an iterator over the mimeheader objects.
javax.xml.soap.SOAPPart.getContent(),returns the content of the soapenvelope as a jaxp source object.
javax.xml.soap.SOAPPart.getContentId(),"retrieves the value of the mime header whose name is ""content-id""."
javax.xml.soap.SOAPPart.getContentLocation(),"retrieves the value of the mime header whose name is ""content-location""."
javax.xml.soap.SOAPPart.getEnvelope(),gets the soapenvelope object associated with this soappart object.
javax.xml.soap.SOAPPart.getMatchingMimeHeaders(java.lang.String[]),retrieves all mimeheader objects that match a name in the given array.
javax.xml.soap.SOAPPart.getMimeHeader(java.lang.String),gets all the values of the mimeheader object in this soappart object that is identified by the given string.
javax.xml.soap.SOAPPart.getNonMatchingMimeHeaders(java.lang.String[]),retrieves all mimeheader objects whose name does not match a name in the given array.
javax.xml.soap.SOAPPart.removeAllMimeHeaders(),removes all the mimeheader objects for this soapenvelope object.
javax.xml.soap.SOAPPart.removeMimeHeader(java.lang.String),removes all mime headers that match the given name.
javax.xml.soap.SOAPPart.setContent(javax.xml.transform.Source),sets the content of the soapenvelope object with the data from the given source object.
javax.xml.soap.SOAPPart.setContentId(java.lang.String),"sets the value of the mime header named ""content-id"" to the given string."
javax.xml.soap.SOAPPart.setContentLocation(java.lang.String),"sets the value of the mime header ""content-location"" to the given string."
"javax.xml.soap.SOAPPart.setMimeHeader(java.lang.String,java.lang.String)","changes the first header entry that matches the given header name so that its value is the given value, adding a new header with the given name and value if no existing header is a match."
javax.xml.soap.SOAPException.getCause(),returns the throwable object embedded in this soapexception if there is one.
javax.xml.soap.SOAPException.getMessage(),returns the detail message for this soapexception object.
javax.xml.soap.SOAPException.initCause(java.lang.Throwable),initializes the cause field of this soapexception object with the given throwable object.
javax.xml.stream.EventFilter.accept(javax.xml.stream.events.XMLEvent),tests whether this event is part of this stream.
javax.xml.stream.Location.getCharacterOffset(),return the byte or character offset into the input source this location is pointing to.
javax.xml.stream.Location.getColumnNumber(),"return the column number where the current event ends, returns -1 if none is available."
javax.xml.stream.Location.getLineNumber(),"return the line number where the current event ends, returns -1 if none is available."
javax.xml.stream.Location.getPublicId(),returns the public id of the xml.
javax.xml.stream.Location.getSystemId(),returns the system id of the xml.
javax.xml.stream.StreamFilter.accept(javax.xml.stream.XMLStreamReader),tests whether the current state is part of this stream.
javax.xml.stream.XMLEventReader.close(),frees any resources associated with this reader.
javax.xml.stream.XMLEventReader.getElementText(),reads the content of a text-only element.
javax.xml.stream.XMLEventReader.getProperty(java.lang.String),get the value of a feature/property from the underlying implementation.
javax.xml.stream.XMLEventReader.hasNext(),check if there are more events.
javax.xml.stream.XMLEventReader.nextEvent(),get the next xmlevent.
javax.xml.stream.XMLEventReader.nextTag(),skips any insignificant space events until a start_element or end_element is reached.
javax.xml.stream.XMLEventReader.peek(),check the next xmlevent without reading it from the stream.
javax.xml.stream.XMLEventWriter.add(javax.xml.stream.events.XMLEvent),add an event to the output stream adding a start_element will open a new namespace scope that will be closed when the corresponding end_element is written.
javax.xml.stream.XMLEventWriter.add(javax.xml.stream.XMLEventReader),"adds an entire stream to an output stream, calls next() on the inputstream argument until hasnext() returns false this should be treated as a convenience method that will perform the following loop over all the events in an event reader and call add on each event."
javax.xml.stream.XMLEventWriter.close(),frees any resources associated with this stream.
javax.xml.stream.XMLEventWriter.flush(),writes any cached events to the underlying output mechanism.
javax.xml.stream.XMLEventWriter.getNamespaceContext(),returns the current namespace context.
javax.xml.stream.XMLEventWriter.getPrefix(java.lang.String),gets the prefix the uri is bound to.
javax.xml.stream.XMLEventWriter.setDefaultNamespace(java.lang.String),binds a uri to the default namespace this uri is bound in the scope of the current start_element / end_element pair.
javax.xml.stream.XMLEventWriter.setNamespaceContext(javax.xml.namespace.NamespaceContext),sets the current namespace context for prefix and uri bindings.
"javax.xml.stream.XMLEventWriter.setPrefix(java.lang.String,java.lang.String)",sets the prefix the uri is bound to.
"javax.xml.stream.XMLReporter.report(java.lang.String,java.lang.String,java.lang.Object,javax.xml.stream.Location)",report the desired message in an application specific format.
"javax.xml.stream.XMLResolver.resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",retrieves a resource.
javax.xml.stream.XMLStreamReader.close(),frees any resources associated with this reader.
javax.xml.stream.XMLStreamReader.getAttributeCount(),"returns the count of attributes on this start_element, this method is only valid on a start_element or attribute."
javax.xml.stream.XMLStreamReader.getAttributeLocalName(int),returns the localname of the attribute at the provided index.
javax.xml.stream.XMLStreamReader.getAttributeName(int),returns the qname of the attribute at the provided index.
javax.xml.stream.XMLStreamReader.getAttributeNamespace(int),returns the namespace of the attribute at the provided index.
javax.xml.stream.XMLStreamReader.getAttributePrefix(int),returns the prefix of this attribute at the provided index.
javax.xml.stream.XMLStreamReader.getAttributeType(int),returns the xml type of the attribute at the provided index.
"javax.xml.stream.XMLStreamReader.getAttributeValue(java.lang.String,java.lang.String)",returns the normalized attribute value of the attribute with the namespace and localname if the namespaceuri is null the namespace is not checked for equality.
javax.xml.stream.XMLStreamReader.getAttributeValue(int),returns the value of the attribute at the index.
javax.xml.stream.XMLStreamReader.getCharacterEncodingScheme(),returns the character encoding declared on the xml declaration returns null if none was declared.
javax.xml.stream.XMLStreamReader.getElementText(),"reads the content of a text-only element, an exception is thrown if this is not a text-only element."
javax.xml.stream.XMLStreamReader.getEncoding(),return input encoding if known or null if unknown.
javax.xml.stream.XMLStreamReader.getEventType(),returns an integer code that indicates the type of the event the cursor is pointing to.
javax.xml.stream.XMLStreamReader.getLocalName(),returns the (local) name of the current event.
javax.xml.stream.XMLStreamReader.getLocation(),return the current location of the processor.
javax.xml.stream.XMLStreamReader.getName(),returns a qname for the current start_element or end_element event.
javax.xml.stream.XMLStreamReader.getNamespaceContext(),returns a read only namespace context for the current position.
javax.xml.stream.XMLStreamReader.getNamespaceCount(),"returns the count of namespaces declared on this start_element or end_element, this method is only valid on a start_element, end_element or namespace."
javax.xml.stream.XMLStreamReader.getNamespacePrefix(int),returns the prefix for the namespace declared at the index.
javax.xml.stream.XMLStreamReader.getNamespaceURI(java.lang.String),return the uri for the given prefix.
javax.xml.stream.XMLStreamReader.getNamespaceURI(int),returns the uri for the namespace declared at the index.
javax.xml.stream.XMLStreamReader.getNamespaceURI(),if the current event is a start_element or end_element this method returns the uri of the prefix or the default namespace.
javax.xml.stream.XMLStreamReader.getPIData(),get the data section of a processing instruction.
javax.xml.stream.XMLStreamReader.getPITarget(),get the target of a processing instruction.
javax.xml.stream.XMLStreamReader.getPrefix(),returns the prefix of the current event or null if the event does not have a prefix.
javax.xml.stream.XMLStreamReader.getProperty(java.lang.String),get the value of a feature/property from the underlying implementation.
javax.xml.stream.XMLStreamReader.getText(),"returns the current value of the parse event as a string, this returns the string value of a characters event, returns the value of a comment, the replacement value for an entity_reference, the string value of a cdata section, the string value for a space event, or the string value of the internal subset of the dtd."
javax.xml.stream.XMLStreamReader.getTextCharacters(),returns an array which contains the characters from this event.
"javax.xml.stream.XMLStreamReader.getTextCharacters(int,char[],int,int)","gets the the text associated with a characters, space or cdata event."
javax.xml.stream.XMLStreamReader.getTextLength(),returns the length of the sequence of characters for this text event within the text character array.
javax.xml.stream.XMLStreamReader.getTextStart(),returns the offset into the text character array where the first character (of this text event) is stored.
javax.xml.stream.XMLStreamReader.getVersion(),get the xml version declared on the xml declaration returns null if none was declared.
javax.xml.stream.XMLStreamReader.hasName(),returns true if the current event has a name (is a start_element or end_element) returns false otherwise.
javax.xml.stream.XMLStreamReader.hasNext(),returns true if there are more parsing events and false if there are no more events.
javax.xml.stream.XMLStreamReader.hasText(),"return true if the current event has text, false otherwise the following events have text: characters,dtd ,entity_reference, comment, space."
javax.xml.stream.XMLStreamReader.isAttributeSpecified(int),returns a boolean which indicates if this attribute was created by default.
javax.xml.stream.XMLStreamReader.isCharacters(),returns true if the cursor points to a character data event.
javax.xml.stream.XMLStreamReader.isEndElement(),returns true if the cursor points to an end tag (otherwise false).
javax.xml.stream.XMLStreamReader.isStandalone(),get the standalone declaration from the xml declaration.
javax.xml.stream.XMLStreamReader.isStartElement(),returns true if the cursor points to a start tag (otherwise false).
javax.xml.stream.XMLStreamReader.isWhiteSpace(),returns true if the cursor points to a character data event that consists of all whitespace.
javax.xml.stream.XMLStreamReader.next(),"get next parsing event - a processor may return all contiguous character data in a single chunk, or it may split it into several chunks."
javax.xml.stream.XMLStreamReader.nextTag(),"skips any white space (iswhitespace() returns true), comment, or processing_instruction, until a start_element or end_element is reached."
"javax.xml.stream.XMLStreamReader.require(int,java.lang.String,java.lang.String)",test if the current event is of the given type and if the namespace and name match the current namespace and name of the current event.
javax.xml.stream.XMLStreamReader.standaloneSet(),checks if standalone was set in the document.
javax.xml.stream.XMLStreamWriter.close(),close this writer and free any resources associated with the writer.
javax.xml.stream.XMLStreamWriter.flush(),write any cached data to the underlying output mechanism.
javax.xml.stream.XMLStreamWriter.getNamespaceContext(),returns the current namespace context.
javax.xml.stream.XMLStreamWriter.getPrefix(java.lang.String),gets the prefix the uri is bound to.
javax.xml.stream.XMLStreamWriter.getProperty(java.lang.String),get the value of a feature/property from the underlying implementation.
javax.xml.stream.XMLStreamWriter.setDefaultNamespace(java.lang.String),binds a uri to the default namespace this uri is bound in the scope of the current start_element / end_element pair.
javax.xml.stream.XMLStreamWriter.setNamespaceContext(javax.xml.namespace.NamespaceContext),sets the current namespace context for prefix and uri bindings.
"javax.xml.stream.XMLStreamWriter.setPrefix(java.lang.String,java.lang.String)",sets the prefix the uri is bound to.
"javax.xml.stream.XMLStreamWriter.writeAttribute(java.lang.String,java.lang.String)",writes an attribute to the output stream without a prefix.
"javax.xml.stream.XMLStreamWriter.writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",writes an attribute to the output stream.
"javax.xml.stream.XMLStreamWriter.writeAttribute(java.lang.String,java.lang.String,java.lang.String)",writes an attribute to the output stream.
javax.xml.stream.XMLStreamWriter.writeCData(java.lang.String),writes a cdata section.
javax.xml.stream.XMLStreamWriter.writeCharacters(java.lang.String),write text to the output.
"javax.xml.stream.XMLStreamWriter.writeCharacters(char[],int,int)",write text to the output.
javax.xml.stream.XMLStreamWriter.writeComment(java.lang.String),writes an xml comment with the data enclosed.
javax.xml.stream.XMLStreamWriter.writeDefaultNamespace(java.lang.String),writes the default namespace to the stream.
javax.xml.stream.XMLStreamWriter.writeDTD(java.lang.String),write a dtd section.
"javax.xml.stream.XMLStreamWriter.writeEmptyElement(java.lang.String,java.lang.String)",writes an empty element tag to the output.
"javax.xml.stream.XMLStreamWriter.writeEmptyElement(java.lang.String,java.lang.String,java.lang.String)",writes an empty element tag to the output.
javax.xml.stream.XMLStreamWriter.writeEmptyElement(java.lang.String),writes an empty element tag to the output.
javax.xml.stream.XMLStreamWriter.writeEndDocument(),closes any start tags and writes corresponding end tags.
javax.xml.stream.XMLStreamWriter.writeEndElement(),writes an end tag to the output relying on the internal state of the writer to determine the prefix and local name of the event.
javax.xml.stream.XMLStreamWriter.writeEntityRef(java.lang.String),writes an entity reference.
"javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)","writes a namespace to the output stream if the prefix argument to this method is the empty string, ""xmlns"", or null this method will delegate to writedefaultnamespace."
javax.xml.stream.XMLStreamWriter.writeProcessingInstruction(java.lang.String),writes a processing instruction.
"javax.xml.stream.XMLStreamWriter.writeProcessingInstruction(java.lang.String,java.lang.String)",writes a processing instruction.
javax.xml.stream.XMLStreamWriter.writeStartDocument(),write the xml declaration.
javax.xml.stream.XMLStreamWriter.writeStartDocument(java.lang.String),write the xml declaration.
"javax.xml.stream.XMLStreamWriter.writeStartDocument(java.lang.String,java.lang.String)",write the xml declaration.
javax.xml.stream.XMLStreamWriter.writeStartElement(java.lang.String),writes a start tag to the output.
"javax.xml.stream.XMLStreamWriter.writeStartElement(java.lang.String,java.lang.String)",writes a start tag to the output.
"javax.xml.stream.XMLStreamWriter.writeStartElement(java.lang.String,java.lang.String,java.lang.String)",writes a start tag to the output.
"javax.xml.stream.XMLEventFactory.createAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",create a new attribute.
"javax.xml.stream.XMLEventFactory.createAttribute(java.lang.String,java.lang.String)",create a new attribute.
"javax.xml.stream.XMLEventFactory.createAttribute(javax.xml.namespace.QName,java.lang.String)",create a new attribute.
javax.xml.stream.XMLEventFactory.createCData(java.lang.String),create a characters event with the cdata flag set to true.
javax.xml.stream.XMLEventFactory.createCharacters(java.lang.String),"create a characters event, this method does not check if the content is all whitespace."
javax.xml.stream.XMLEventFactory.createComment(java.lang.String),create a comment.
javax.xml.stream.XMLEventFactory.createDTD(java.lang.String),create a document type definition event this string contains the entire document type declaration that matches the doctypedecl in the xml 1.
javax.xml.stream.XMLEventFactory.createEndDocument(),creates a new instance of an enddocument event.
"javax.xml.stream.XMLEventFactory.createEndElement(javax.xml.namespace.QName,java.util.Iterator)",create a new endelement.
"javax.xml.stream.XMLEventFactory.createEndElement(java.lang.String,java.lang.String,java.lang.String)",create a new endelement.
"javax.xml.stream.XMLEventFactory.createEndElement(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator)",create a new endelement.
"javax.xml.stream.XMLEventFactory.createEntityReference(java.lang.String,javax.xml.stream.events.EntityDeclaration)",creates a new instance of a entityreference event.
javax.xml.stream.XMLEventFactory.createIgnorableSpace(java.lang.String),create an ignorable space.
javax.xml.stream.XMLEventFactory.createNamespace(java.lang.String),create a new default namespace.
"javax.xml.stream.XMLEventFactory.createNamespace(java.lang.String,java.lang.String)",create a new namespace.
"javax.xml.stream.XMLEventFactory.createProcessingInstruction(java.lang.String,java.lang.String)",create a processing instruction.
javax.xml.stream.XMLEventFactory.createSpace(java.lang.String),create a characters event with the isspace flag set to true.
javax.xml.stream.XMLEventFactory.createStartDocument(),creates a new instance of a startdocument event.
"javax.xml.stream.XMLEventFactory.createStartDocument(java.lang.String,java.lang.String,boolean)",creates a new instance of a startdocument event.
"javax.xml.stream.XMLEventFactory.createStartDocument(java.lang.String,java.lang.String)",creates a new instance of a startdocument event.
javax.xml.stream.XMLEventFactory.createStartDocument(java.lang.String),creates a new instance of a startdocument event.
"javax.xml.stream.XMLEventFactory.createStartElement(javax.xml.namespace.QName,java.util.Iterator,java.util.Iterator)",create a new startelement.
"javax.xml.stream.XMLEventFactory.createStartElement(java.lang.String,java.lang.String,java.lang.String)",create a new startelement.
"javax.xml.stream.XMLEventFactory.createStartElement(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator,java.util.Iterator)",create a new startelement.
"javax.xml.stream.XMLEventFactory.createStartElement(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator,java.util.Iterator,javax.xml.namespace.NamespaceContext)",create a new startelement.
javax.xml.stream.XMLEventFactory.newFactory(),create a new instance of the factory.
"javax.xml.stream.XMLEventFactory.newFactory(java.lang.String,java.lang.ClassLoader)",create a new instance of the factory.
javax.xml.stream.XMLEventFactory.newInstance(),creates a new instance of the factory in exactly the same manner as the newfactory() method.
javax.xml.stream.XMLEventFactory.setLocation(javax.xml.stream.Location),this method allows setting of the location on each event that is created by this factory.
"javax.xml.stream.XMLInputFactory.createFilteredReader(javax.xml.stream.XMLStreamReader,javax.xml.stream.StreamFilter)",create a filtered reader that wraps the filter around the reader.
"javax.xml.stream.XMLInputFactory.createFilteredReader(javax.xml.stream.XMLEventReader,javax.xml.stream.EventFilter)",create a filtered event reader that wraps the filter around the event reader.
javax.xml.stream.XMLInputFactory.createXMLEventReader(java.io.Reader),create a new xmleventreader from a reader.
"javax.xml.stream.XMLInputFactory.createXMLEventReader(java.lang.String,java.io.Reader)",create a new xmleventreader from a reader.
javax.xml.stream.XMLInputFactory.createXMLEventReader(javax.xml.stream.XMLStreamReader),create a new xmleventreader from an xmlstreamreader.
javax.xml.stream.XMLInputFactory.createXMLEventReader(javax.xml.transform.Source),create a new xmleventreader from a jaxp source.
javax.xml.stream.XMLInputFactory.createXMLEventReader(java.io.InputStream),create a new xmleventreader from a java.
"javax.xml.stream.XMLInputFactory.createXMLEventReader(java.io.InputStream,java.lang.String)",create a new xmleventreader from a java.
"javax.xml.stream.XMLInputFactory.createXMLEventReader(java.lang.String,java.io.InputStream)",create a new xmleventreader from a java.
javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.Reader),create a new xmlstreamreader from a reader.
javax.xml.stream.XMLInputFactory.createXMLStreamReader(javax.xml.transform.Source),create a new xmlstreamreader from a jaxp source.
javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.InputStream),create a new xmlstreamreader from a java.
"javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.InputStream,java.lang.String)",create a new xmlstreamreader from a java.
"javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.lang.String,java.io.InputStream)",create a new xmlstreamreader from a java.
"javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.lang.String,java.io.Reader)",create a new xmlstreamreader from a java.
javax.xml.stream.XMLInputFactory.getEventAllocator(),gets the allocator used by streams created with this factory.
javax.xml.stream.XMLInputFactory.getProperty(java.lang.String),get the value of a feature/property from the underlying implementation.
javax.xml.stream.XMLInputFactory.getXMLReporter(),the reporter that will be set on any xmlstreamreader or xmleventreader created by this factory instance.
javax.xml.stream.XMLInputFactory.getXMLResolver(),the resolver that will be set on any xmlstreamreader or xmleventreader created by this factory instance.
javax.xml.stream.XMLInputFactory.isPropertySupported(java.lang.String),query the set of properties that this factory supports.
javax.xml.stream.XMLInputFactory.newFactory(),create a new instance of the factory.
"javax.xml.stream.XMLInputFactory.newFactory(java.lang.String,java.lang.ClassLoader)",create a new instance of the factory.
javax.xml.stream.XMLInputFactory.newInstance(),creates a new instance of the factory in exactly the same manner as the newfactory() method.
javax.xml.stream.XMLInputFactory.setEventAllocator(javax.xml.stream.util.XMLEventAllocator),set a user defined event allocator for events.
"javax.xml.stream.XMLInputFactory.setProperty(java.lang.String,java.lang.Object)",allows the user to set specific feature/property on the underlying implementation.
javax.xml.stream.XMLInputFactory.setXMLReporter(javax.xml.stream.XMLReporter),the reporter that will be set on any xmlstreamreader or xmleventreader created by this factory instance.
javax.xml.stream.XMLInputFactory.setXMLResolver(javax.xml.stream.XMLResolver),the resolver that will be set on any xmlstreamreader or xmleventreader created by this factory instance.
javax.xml.stream.XMLOutputFactory.createXMLEventWriter(javax.xml.transform.Result),create a new xmleventwriter that writes to a jaxp result.
javax.xml.stream.XMLOutputFactory.createXMLEventWriter(java.io.OutputStream),create a new xmleventwriter that writes to a stream.
"javax.xml.stream.XMLOutputFactory.createXMLEventWriter(java.io.OutputStream,java.lang.String)",create a new xmleventwriter that writes to a stream.
javax.xml.stream.XMLOutputFactory.createXMLEventWriter(java.io.Writer),create a new xmleventwriter that writes to a writer.
javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(java.io.Writer),create a new xmlstreamwriter that writes to a writer.
javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(java.io.OutputStream),create a new xmlstreamwriter that writes to a stream.
"javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(java.io.OutputStream,java.lang.String)",create a new xmlstreamwriter that writes to a stream.
javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(javax.xml.transform.Result),create a new xmlstreamwriter that writes to a jaxp result.
javax.xml.stream.XMLOutputFactory.getProperty(java.lang.String),get a feature/property on the underlying implementation.
javax.xml.stream.XMLOutputFactory.isPropertySupported(java.lang.String),query the set of properties that this factory supports.
javax.xml.stream.XMLOutputFactory.newFactory(),create a new instance of the factory.
"javax.xml.stream.XMLOutputFactory.newFactory(java.lang.String,java.lang.ClassLoader)",create a new instance of the factory.
javax.xml.stream.XMLOutputFactory.newInstance(),creates a new instance of the factory in exactly the same manner as the newfactory() method.
"javax.xml.stream.XMLOutputFactory.setProperty(java.lang.String,java.lang.Object)",allows the user to set specific features/properties on the underlying implementation.
javax.xml.stream.XMLStreamException.getLocation(),gets the location of the exception.
javax.xml.stream.XMLStreamException.getNestedException(),gets the nested exception.
javax.xml.stream.FactoryConfigurationError.getCause(),use the exception chaining mechanism of jdk1.
javax.xml.stream.FactoryConfigurationError.getException(),return the nested exception (if any).
javax.xml.stream.FactoryConfigurationError.getMessage(),report the message associated with this error.
javax.xml.stream.events.Attribute.getDTDType(),"gets the type of this attribute, default is the string ""cdata""."
javax.xml.stream.events.Attribute.getName(),returns the qname for this attribute.
javax.xml.stream.events.Attribute.getValue(),gets the normalized value of this attribute.
javax.xml.stream.events.Attribute.isSpecified(),"a flag indicating whether this attribute was actually specified in the start-tag of its element, or was defaulted from the schema."
javax.xml.stream.events.Characters.getData(),get the character data of this event.
javax.xml.stream.events.Characters.isCData(),returns true if this is a cdata section.
javax.xml.stream.events.Characters.isIgnorableWhiteSpace(),return true if this is ignorablewhitespace.
javax.xml.stream.events.Characters.isWhiteSpace(),returns true if this set of characters is all whitespace.
javax.xml.stream.events.Comment.getText(),"return the string data of the comment, returns empty string if it does not exist."
javax.xml.stream.events.DTD.getDocumentTypeDeclaration(),"returns the entire document type declaration as a string, including the internal dtd subset."
javax.xml.stream.events.DTD.getEntities(),"return a list containing the general entities, both external and internal, declared in the dtd."
javax.xml.stream.events.DTD.getNotations(),return a list containing the notations declared in the dtd.
javax.xml.stream.events.DTD.getProcessedDTD(),returns an implementation defined representation of the dtd.
javax.xml.stream.events.EndElement.getName(),get the name of this event.
javax.xml.stream.events.EndElement.getNamespaces(),returns an iterator of namespaces that have gone out of scope.
javax.xml.stream.events.EntityDeclaration.getBaseURI(),get the base uri for this reference or null if this information is not available.
javax.xml.stream.events.EntityDeclaration.getName(),the entity's name.
javax.xml.stream.events.EntityDeclaration.getNotationName(),the name of the associated notation.
javax.xml.stream.events.EntityDeclaration.getPublicId(),"the entity's public identifier, or null if none was given."
javax.xml.stream.events.EntityDeclaration.getReplacementText(),the replacement text of the entity.
javax.xml.stream.events.EntityDeclaration.getSystemId(),the entity's system identifier.
javax.xml.stream.events.EntityReference.getDeclaration(),return the declaration of this entity.
javax.xml.stream.events.EntityReference.getName(),the name of the entity.
javax.xml.stream.events.Namespace.getNamespaceURI(),gets the uri bound to the prefix of this namespace.
javax.xml.stream.events.Namespace.getPrefix(),"gets the prefix, returns """" if this is a default namespace declaration."
javax.xml.stream.events.Namespace.isDefaultNamespaceDeclaration(),returns true if this attribute declares the default namespace.
javax.xml.stream.events.NotationDeclaration.getName(),the notation name.
javax.xml.stream.events.NotationDeclaration.getPublicId(),"the notation's public identifier, or null if none was given."
javax.xml.stream.events.NotationDeclaration.getSystemId(),"the notation's system identifier, or null if none was given."
javax.xml.stream.events.ProcessingInstruction.getData(),the data section of the processing instruction.
javax.xml.stream.events.ProcessingInstruction.getTarget(),the target section of the processing instruction.
javax.xml.stream.events.StartDocument.encodingSet(),returns true if characterencodingscheme was set in the encoding declaration of the document.
javax.xml.stream.events.StartDocument.getCharacterEncodingScheme(),returns the encoding style of the xml data.
javax.xml.stream.events.StartDocument.getSystemId(),returns the system id of the xml data.
javax.xml.stream.events.StartDocument.getVersion(),returns the version of xml of this xml stream.
javax.xml.stream.events.StartDocument.isStandalone(),returns if this xml is standalone.
javax.xml.stream.events.StartDocument.standaloneSet(),returns true if the standalone attribute was set in the encoding declaration of the document.
javax.xml.stream.events.StartElement.getAttributeByName(javax.xml.namespace.QName),returns the attribute referred to by this name.
javax.xml.stream.events.StartElement.getAttributes(),"returns an iterator of non-namespace declared attributes declared on this start_element, returns an empty iterator if there are no attributes."
javax.xml.stream.events.StartElement.getName(),get the name of this event.
javax.xml.stream.events.StartElement.getNamespaceContext(),gets a read-only namespace context.
javax.xml.stream.events.StartElement.getNamespaces(),returns an iterator of namespaces declared on this element.
javax.xml.stream.events.StartElement.getNamespaceURI(java.lang.String),gets the value that the prefix is bound to in the context of this element.
javax.xml.stream.events.XMLEvent.asCharacters(),"returns this event as characters, may result in a class cast exception if this event is not characters."
javax.xml.stream.events.XMLEvent.asEndElement(),"returns this event as an end element event, may result in a class cast exception if this event is not a end element."
javax.xml.stream.events.XMLEvent.asStartElement(),"returns this event as a start element event, may result in a class cast exception if this event is not a start element."
javax.xml.stream.events.XMLEvent.getEventType(),returns an integer code for this event.
javax.xml.stream.events.XMLEvent.getLocation(),return the location of this event.
javax.xml.stream.events.XMLEvent.getSchemaType(),this method is provided for implementations to provide optional type information about the associated event.
javax.xml.stream.events.XMLEvent.isAttribute(),a utility function to check if this event is an attribute.
javax.xml.stream.events.XMLEvent.isCharacters(),a utility function to check if this event is characters.
javax.xml.stream.events.XMLEvent.isEndDocument(),a utility function to check if this event is an enddocument.
javax.xml.stream.events.XMLEvent.isEndElement(),a utility function to check if this event is a endelement.
javax.xml.stream.events.XMLEvent.isEntityReference(),a utility function to check if this event is an entityreference.
javax.xml.stream.events.XMLEvent.isNamespace(),a utility function to check if this event is a namespace.
javax.xml.stream.events.XMLEvent.isProcessingInstruction(),a utility function to check if this event is a processinginstruction.
javax.xml.stream.events.XMLEvent.isStartDocument(),a utility function to check if this event is a startdocument.
javax.xml.stream.events.XMLEvent.isStartElement(),a utility function to check if this event is a startelement.
javax.xml.stream.events.XMLEvent.writeAsEncodedUnicode(java.io.Writer),this method will write the xmlevent as per the xml 1.
javax.xml.stream.util.XMLEventAllocator.allocate(javax.xml.stream.XMLStreamReader),this method allocates an event given the current state of the xmlstreamreader.
"javax.xml.stream.util.XMLEventAllocator.allocate(javax.xml.stream.XMLStreamReader,javax.xml.stream.util.XMLEventConsumer)",this method allocates an event or set of events given the current state of the xmlstreamreader and adds the event or set of events to the consumer that was passed in.
javax.xml.stream.util.XMLEventAllocator.newInstance(),this method creates an instance of the xmleventallocator.
javax.xml.stream.util.XMLEventConsumer.add(javax.xml.stream.events.XMLEvent),this method adds an event to the consumer.
javax.xml.stream.util.EventReaderDelegate.getParent(),get the parent of this instance.
javax.xml.stream.util.EventReaderDelegate.setParent(javax.xml.stream.XMLEventReader),set the parent of this instance.
javax.xml.stream.util.StreamReaderDelegate.getParent(),get the parent of this instance.
javax.xml.stream.util.StreamReaderDelegate.setParent(javax.xml.stream.XMLStreamReader),set the parent of this instance.
javax.xml.transform.ErrorListener.error(javax.xml.transform.TransformerException),receive notification of a recoverable error.
javax.xml.transform.ErrorListener.fatalError(javax.xml.transform.TransformerException),receive notification of a non-recoverable error.
javax.xml.transform.ErrorListener.warning(javax.xml.transform.TransformerException),receive notification of a warning.
javax.xml.transform.Result.getSystemId(),get the system identifier that was set with setsystemid.
javax.xml.transform.Result.setSystemId(java.lang.String),set the system identifier for this result.
javax.xml.transform.Source.getSystemId(),get the system identifier that was set with setsystemid.
javax.xml.transform.Source.setSystemId(java.lang.String),set the system identifier for this source.
javax.xml.transform.SourceLocator.getColumnNumber(),return the character position where the current document event ends.
javax.xml.transform.SourceLocator.getLineNumber(),return the line number where the current document event ends.
javax.xml.transform.SourceLocator.getPublicId(),return the public identifier for the current document event.
javax.xml.transform.SourceLocator.getSystemId(),return the system identifier for the current document event.
javax.xml.transform.Templates.getOutputProperties(),get the properties corresponding to the effective xsl:output element.
javax.xml.transform.Templates.newTransformer(),create a new transformation context for this templates object.
"javax.xml.transform.URIResolver.resolve(java.lang.String,java.lang.String)","called by the processor when it encounters an xsl:include, xsl:import, or document() function."
javax.xml.transform.Transformer.clearParameters(),clear all parameters set with setparameter.
javax.xml.transform.Transformer.getErrorListener(),get the error event handler in effect for the transformation.
javax.xml.transform.Transformer.getOutputProperties(),get a copy of the output properties for the transformation.
javax.xml.transform.Transformer.getOutputProperty(java.lang.String),get an output property that is in effect for the transformer.
javax.xml.transform.Transformer.getParameter(java.lang.String),get a parameter that was explicitly set with setparameter.
javax.xml.transform.Transformer.getURIResolver(),get an object that will be used to resolve uris used in document().
javax.xml.transform.Transformer.reset(),reset this transformer to its original configuration.
javax.xml.transform.Transformer.setErrorListener(javax.xml.transform.ErrorListener),set the error event listener in effect for the transformation.
javax.xml.transform.Transformer.setOutputProperties(java.util.Properties),set the output properties for the transformation.
"javax.xml.transform.Transformer.setOutputProperty(java.lang.String,java.lang.String)",set an output property that will be in effect for the transformation.
"javax.xml.transform.Transformer.setParameter(java.lang.String,java.lang.Object)",add a parameter for the transformation.
javax.xml.transform.Transformer.setURIResolver(javax.xml.transform.URIResolver),set an object that will be used to resolve uris used in document().
"javax.xml.transform.Transformer.transform(javax.xml.transform.Source,javax.xml.transform.Result)",transform the xml source to a result.
"javax.xml.transform.TransformerFactory.getAssociatedStylesheet(javax.xml.transform.Source,java.lang.String,java.lang.String,java.lang.String)","get the stylesheet specification(s) associated with the xml source document via the
xml-stylesheet processing instruction that match the given criteria."
javax.xml.transform.TransformerFactory.getAttribute(java.lang.String),allows the user to retrieve specific attributes on the underlying implementation.
javax.xml.transform.TransformerFactory.getErrorListener(),get the error event handler for the transformerfactory.
javax.xml.transform.TransformerFactory.getFeature(java.lang.String),look up the value of a feature.
javax.xml.transform.TransformerFactory.getURIResolver(),"get the object that is used by default during the transformation to resolve uris used in document(), xsl:import, or xsl:include."
javax.xml.transform.TransformerFactory.newInstance(),obtain a new instance of a transformerfactory.
"javax.xml.transform.TransformerFactory.newInstance(java.lang.String,java.lang.ClassLoader)",obtain a new instance of a transformerfactory from factory class name.
javax.xml.transform.TransformerFactory.newTemplates(javax.xml.transform.Source),"process the source into a templates object, which is a a compiled representation of the source."
javax.xml.transform.TransformerFactory.newTransformer(javax.xml.transform.Source),process the source into a transformer object.
javax.xml.transform.TransformerFactory.newTransformer(),create a new transformer that performs a copy of the source to the result.
"javax.xml.transform.TransformerFactory.setAttribute(java.lang.String,java.lang.Object)",allows the user to set specific attributes on the underlying implementation.
javax.xml.transform.TransformerFactory.setErrorListener(javax.xml.transform.ErrorListener),"set the error event listener for the transformerfactory, which is used for the processing of transformation instructions, and not for the transformation itself."
"javax.xml.transform.TransformerFactory.setFeature(java.lang.String,boolean)",set a feature for this transformerfactory and transformers or templates created by this factory.
javax.xml.transform.TransformerFactory.setURIResolver(javax.xml.transform.URIResolver),"set an object that is used by default during the transformation to resolve uris used in document(), xsl:import, or xsl:include."
javax.xml.transform.TransformerException.getCause(),returns the cause of this throwable or null if the cause is nonexistent or unknown.
javax.xml.transform.TransformerException.getException(),this method retrieves an exception that this exception wraps.
javax.xml.transform.TransformerException.getLocationAsString(),get the location information as a string.
javax.xml.transform.TransformerException.getLocator(),method getlocator retrieves an instance of a sourcelocator object that specifies where an error occured.
javax.xml.transform.TransformerException.getMessageAndLocation(),get the error message with location information appended.
javax.xml.transform.TransformerException.initCause(java.lang.Throwable),initializes the cause of this throwable to the specified value.
javax.xml.transform.TransformerException.printStackTrace(),print the the trace of methods from where the error originated.
javax.xml.transform.TransformerException.printStackTrace(java.io.PrintStream),print the the trace of methods from where the error originated.
javax.xml.transform.TransformerException.printStackTrace(java.io.PrintWriter),print the the trace of methods from where the error originated.
javax.xml.transform.TransformerException.setLocator(javax.xml.transform.SourceLocator),method setlocator sets an instance of a sourcelocator object that specifies where an error occured.
javax.xml.transform.TransformerFactoryConfigurationError.getCause(),use the exception chaining mechanism of jdk1.
javax.xml.transform.TransformerFactoryConfigurationError.getException(),return the actual exception (if any) that caused this exception to be raised.
javax.xml.transform.TransformerFactoryConfigurationError.getMessage(),return the message (if any) for this error .
javax.xml.transform.dom.DOMLocator.getOriginatingNode(),return the node where the event occurred.
javax.xml.transform.dom.DOMResult.getNextSibling(),get the child node before which the result nodes will be inserted.
javax.xml.transform.dom.DOMResult.getNode(),get the node that will contain the result dom tree.
javax.xml.transform.dom.DOMResult.getSystemId(),get the system identifier.
javax.xml.transform.dom.DOMResult.setNextSibling(org.w3c.dom.Node),set the child node before which the result nodes will be inserted.
javax.xml.transform.dom.DOMResult.setNode(org.w3c.dom.Node),set the node that will contain the result dom tree.
javax.xml.transform.dom.DOMResult.setSystemId(java.lang.String),set the systemid that may be used in association with the node.
javax.xml.transform.dom.DOMSource.getNode(),get the node that represents a source dom tree.
javax.xml.transform.dom.DOMSource.getSystemId(),get the base id (url or system id) from where urls will be resolved.
javax.xml.transform.dom.DOMSource.setNode(org.w3c.dom.Node),set the node that will represents a source dom tree.
javax.xml.transform.dom.DOMSource.setSystemId(java.lang.String),set the base id (url or system id) from where urls will be resolved.
javax.xml.transform.sax.TemplatesHandler.getSystemId(),get the base id (uri or system id) from where relative urls will be resolved.
javax.xml.transform.sax.TemplatesHandler.getTemplates(),"when a templateshandler object is used as a contenthandler for the parsing of transformation instructions, it creates a templates object, which the caller can get once the sax events have been completed."
javax.xml.transform.sax.TemplatesHandler.setSystemId(java.lang.String),set the base id (uri or system id) for the templates object created by this builder.
javax.xml.transform.sax.TransformerHandler.getSystemId(),get the base id (uri or system id) from where relative urls will be resolved.
javax.xml.transform.sax.TransformerHandler.getTransformer(),"get the transformer associated with this handler, which is needed in order to set parameters and output properties."
javax.xml.transform.sax.TransformerHandler.setResult(javax.xml.transform.Result),set the result associated with this transformerhandler to be used for the transformation.
javax.xml.transform.sax.TransformerHandler.setSystemId(java.lang.String),set the base id (uri or system id) from where relative urls will be resolved.
javax.xml.transform.sax.SAXResult.getHandler(),get the contenthandler that is the result.
javax.xml.transform.sax.SAXResult.getLexicalHandler(),get a sax2 lexicalhandler for the output.
javax.xml.transform.sax.SAXResult.getSystemId(),get the system identifier that was set with setsystemid.
javax.xml.transform.sax.SAXResult.setHandler(org.xml.sax.ContentHandler),set the target to be a sax2 contenthandler.
javax.xml.transform.sax.SAXResult.setLexicalHandler(org.xml.sax.ext.LexicalHandler),set the sax2 lexicalhandler for the output.
javax.xml.transform.sax.SAXResult.setSystemId(java.lang.String),method setsystemid set the systemid that may be used in association with the contenthandler.
javax.xml.transform.sax.SAXSource.getInputSource(),get the sax inputsource to be used for the source.
javax.xml.transform.sax.SAXSource.getSystemId(),get the base id (uri or system id) from where uris will be resolved.
javax.xml.transform.sax.SAXSource.getXMLReader(),get the xmlreader to be used for the source.
javax.xml.transform.sax.SAXSource.setInputSource(org.xml.sax.InputSource),set the sax inputsource to be used for the source.
javax.xml.transform.sax.SAXSource.setSystemId(java.lang.String),set the system identifier for this source.
javax.xml.transform.sax.SAXSource.setXMLReader(org.xml.sax.XMLReader),set the xmlreader to be used for the source.
javax.xml.transform.sax.SAXSource.sourceToInputSource(javax.xml.transform.Source),attempt to obtain a sax inputsource object from a source object.
javax.xml.transform.sax.SAXTransformerFactory.newTemplatesHandler(),get a templateshandler object that can process sax contenthandler events into a templates object.
javax.xml.transform.sax.SAXTransformerFactory.newTransformerHandler(javax.xml.transform.Source),"get a transformerhandler object that can process sax contenthandler events into a result, based on the transformation instructions specified by the argument."
javax.xml.transform.sax.SAXTransformerFactory.newTransformerHandler(javax.xml.transform.Templates),"get a transformerhandler object that can process sax contenthandler events into a result, based on the templates argument."
javax.xml.transform.sax.SAXTransformerFactory.newTransformerHandler(),get a transformerhandler object that can process sax contenthandler events into a result.
javax.xml.transform.sax.SAXTransformerFactory.newXMLFilter(javax.xml.transform.Source),create an xmlfilter that uses the given source as the transformation instructions.
javax.xml.transform.sax.SAXTransformerFactory.newXMLFilter(javax.xml.transform.Templates),"create an xmlfilter, based on the templates argument."
javax.xml.transform.stax.StAXResult.getSystemId(),the returned system identifier is always null.
javax.xml.transform.stax.StAXResult.getXMLEventWriter(),get the xmleventwriter used by this staxresult.
javax.xml.transform.stax.StAXResult.getXMLStreamWriter(),get the xmlstreamwriter used by this staxresult.
javax.xml.transform.stax.StAXResult.setSystemId(java.lang.String),"in the context of a staxresult, it is not appropriate to explicitly set the system identifier."
javax.xml.transform.stax.StAXSource.getSystemId(),get the system identifier used by this staxsource.
javax.xml.transform.stax.StAXSource.getXMLEventReader(),get the xmleventreader used by this staxsource.
javax.xml.transform.stax.StAXSource.getXMLStreamReader(),get the xmlstreamreader used by this staxsource.
javax.xml.transform.stax.StAXSource.setSystemId(java.lang.String),"in the context of a staxsource, it is not appropriate to explicitly set the system identifier."
javax.xml.transform.stream.StreamResult.getOutputStream(),get the byte stream that was set with setoutputstream.
javax.xml.transform.stream.StreamResult.getSystemId(),get the system identifier that was set with setsystemid.
javax.xml.transform.stream.StreamResult.getWriter(),get the character stream that was set with setwriter.
javax.xml.transform.stream.StreamResult.setOutputStream(java.io.OutputStream),set the bytestream that is to be written to.
javax.xml.transform.stream.StreamResult.setSystemId(java.lang.String),"set the systemid that may be used in association with the byte or character stream, or, if neither is set, use this value as a writeable uri (probably a file name)."
javax.xml.transform.stream.StreamResult.setSystemId(java.io.File),set the system id from a file reference.
javax.xml.transform.stream.StreamResult.setWriter(java.io.Writer),set the writer that is to receive the result.
javax.xml.transform.stream.StreamSource.getInputStream(),get the byte stream that was set with setbytestream.
javax.xml.transform.stream.StreamSource.getPublicId(),get the public identifier that was set with setpublicid.
javax.xml.transform.stream.StreamSource.getReader(),get the character stream that was set with setreader.
javax.xml.transform.stream.StreamSource.getSystemId(),get the system identifier that was set with setsystemid.
javax.xml.transform.stream.StreamSource.setInputStream(java.io.InputStream),set the byte stream to be used as input.
javax.xml.transform.stream.StreamSource.setPublicId(java.lang.String),set the public identifier for this source.
javax.xml.transform.stream.StreamSource.setReader(java.io.Reader),set the input to be a character reader.
javax.xml.transform.stream.StreamSource.setSystemId(java.lang.String),set the system identifier for this source.
javax.xml.transform.stream.StreamSource.setSystemId(java.io.File),set the system id from a file reference.
javax.xml.validation.Schema.newValidator(),creates a new validator for this schema.
javax.xml.validation.Schema.newValidatorHandler(),creates a new validatorhandler for this schema.
javax.xml.validation.SchemaFactory.getErrorHandler(),gets the current errorhandler set to this schemafactory.
javax.xml.validation.SchemaFactory.getFeature(java.lang.String),look up the value of a feature flag.
javax.xml.validation.SchemaFactory.getProperty(java.lang.String),look up the value of a property.
javax.xml.validation.SchemaFactory.getResourceResolver(),gets the current lsresourceresolver set to this schemafactory.
javax.xml.validation.SchemaFactory.isSchemaLanguageSupported(java.lang.String),is specified schema supported by this schemafactory?.
javax.xml.validation.SchemaFactory.newInstance(java.lang.String),lookup an implementation of the schemafactory that supports the specified schema language and return it.
"javax.xml.validation.SchemaFactory.newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader)",obtain a new instance of a schemafactory from class name.
javax.xml.validation.SchemaFactory.newSchema(javax.xml.transform.Source),parses the specified source as a schema and returns it as a schema.
javax.xml.validation.SchemaFactory.newSchema(java.io.File),parses the specified file as a schema and returns it as a schema.
javax.xml.validation.SchemaFactory.newSchema(java.net.URL),parses the specified url as a schema and returns it as a schema.
javax.xml.validation.SchemaFactory.newSchema(javax.xml.transform.Source[]),parses the specified source(s) as a schema and returns it as a schema.
javax.xml.validation.SchemaFactory.newSchema(),creates a special schema object.
javax.xml.validation.SchemaFactory.setErrorHandler(org.xml.sax.ErrorHandler),sets the errorhandler to receive errors encountered during the newschema method invocation.
"javax.xml.validation.SchemaFactory.setFeature(java.lang.String,boolean)","set a feature for this schemafactory, schemas created by this factory, and by extension, validators and validatorhandlers created by those schemas."
"javax.xml.validation.SchemaFactory.setProperty(java.lang.String,java.lang.Object)",set the value of a property.
javax.xml.validation.SchemaFactory.setResourceResolver(org.w3c.dom.ls.LSResourceResolver),sets the lsresourceresolver to customize resource resolution when parsing schemas.
javax.xml.validation.SchemaFactoryLoader.newFactory(java.lang.String),creates a new schemafactory object for the specified schema language.
javax.xml.validation.TypeInfoProvider.getAttributeTypeInfo(int),returns the immutable typeinfo object for the specified attribute of the current element.
javax.xml.validation.TypeInfoProvider.getElementTypeInfo(),returns the immutable typeinfo object for the current element.
javax.xml.validation.TypeInfoProvider.isIdAttribute(int),returns true if the specified attribute is determined to be id.
javax.xml.validation.TypeInfoProvider.isSpecified(int),returns false if the attribute was added by the validator.
javax.xml.validation.Validator.getErrorHandler(),gets the current errorhandler set to this validator.
javax.xml.validation.Validator.getFeature(java.lang.String),look up the value of a feature flag.
javax.xml.validation.Validator.getProperty(java.lang.String),look up the value of a property.
javax.xml.validation.Validator.getResourceResolver(),gets the current lsresourceresolver set to this validator.
javax.xml.validation.Validator.reset(),reset this validator to its original configuration.
javax.xml.validation.Validator.setErrorHandler(org.xml.sax.ErrorHandler),sets the errorhandler to receive errors encountered during the validate method invocation.
"javax.xml.validation.Validator.setFeature(java.lang.String,boolean)",set the value of a feature flag.
"javax.xml.validation.Validator.setProperty(java.lang.String,java.lang.Object)",set the value of a property.
javax.xml.validation.Validator.setResourceResolver(org.w3c.dom.ls.LSResourceResolver),sets the lsresourceresolver to customize resource resolution while in a validation episode.
javax.xml.validation.Validator.validate(javax.xml.transform.Source),validates the specified input.
"javax.xml.validation.Validator.validate(javax.xml.transform.Source,javax.xml.transform.Result)",validates the specified input and send the augmented validation result to the specified output.
javax.xml.validation.ValidatorHandler.getContentHandler(),gets the contenthandler which receives the augmented validation result.
javax.xml.validation.ValidatorHandler.getErrorHandler(),gets the current errorhandler set to this validatorhandler.
javax.xml.validation.ValidatorHandler.getFeature(java.lang.String),look up the value of a feature flag.
javax.xml.validation.ValidatorHandler.getProperty(java.lang.String),look up the value of a property.
javax.xml.validation.ValidatorHandler.getResourceResolver(),gets the current lsresourceresolver set to this validatorhandler.
javax.xml.validation.ValidatorHandler.getTypeInfoProvider(),obtains the typeinfoprovider implementation of this validatorhandler.
javax.xml.validation.ValidatorHandler.setContentHandler(org.xml.sax.ContentHandler),sets the contenthandler which receives the augmented validation result.
javax.xml.validation.ValidatorHandler.setErrorHandler(org.xml.sax.ErrorHandler),sets the errorhandler to receive errors encountered during the validation.
"javax.xml.validation.ValidatorHandler.setFeature(java.lang.String,boolean)",set a feature for this validatorhandler.
"javax.xml.validation.ValidatorHandler.setProperty(java.lang.String,java.lang.Object)",set the value of a property.
javax.xml.validation.ValidatorHandler.setResourceResolver(org.w3c.dom.ls.LSResourceResolver),sets the lsresourceresolver to customize resource resolution while in a validation episode.
javax.xml.ws.AsyncHandler.handleResponse(javax.xml.ws.Response<javax.xml.ws.AsyncHandler>),called when the response to an asynchronous operation is available.
javax.xml.ws.Binding.getBindingID(),get the uri for this binding instance.
javax.xml.ws.Binding.getHandlerChain(),gets a copy of the handler chain for a protocol binding instance.
javax.xml.ws.Binding.setHandlerChain(java.util.List<javax.xml.ws.handler.Handler>),sets the handler chain for the protocol binding instance.
javax.xml.ws.BindingProvider.getBinding(),get the binding for this binding provider.
javax.xml.ws.BindingProvider.getEndpointReference(),returns the endpointreference associated with this bindingprovider instance.
javax.xml.ws.BindingProvider.getEndpointReference(java.lang.Class<T>),returns the endpointreference associated with this bindingprovider instance.
javax.xml.ws.BindingProvider.getRequestContext(),get the context that is used to initialize the message context for request messages.
javax.xml.ws.BindingProvider.getResponseContext(),get the context that resulted from processing a response message.
javax.xml.ws.Dispatch.invoke(javax.xml.ws.Dispatch),invoke a service operation synchronously.
javax.xml.ws.Dispatch.invokeAsync(javax.xml.ws.Dispatch),invoke a service operation asynchronously.
"javax.xml.ws.Dispatch.invokeAsync(javax.xml.ws.Dispatch,javax.xml.ws.AsyncHandler<javax.xml.ws.Dispatch>)",invoke a service operation asynchronously.
javax.xml.ws.Dispatch.invokeOneWay(javax.xml.ws.Dispatch),invokes a service operation using the one-way interaction mode.
javax.xml.ws.LogicalMessage.getPayload(),"gets the message payload as an xml source, may be called multiple times on the same logicalmessage instance, always returns a new source that may be used to retrieve the entire message payload."
javax.xml.ws.LogicalMessage.getPayload(javax.xml.bind.JAXBContext),gets the message payload as a jaxb object.
javax.xml.ws.LogicalMessage.setPayload(javax.xml.transform.Source),sets the message payload.
"javax.xml.ws.LogicalMessage.setPayload(java.lang.Object,javax.xml.bind.JAXBContext)",sets the message payload.
javax.xml.ws.Provider.invoke(javax.xml.ws.Provider),invokes an operation occording to the contents of the request message.
javax.xml.ws.Response.getContext(),gets the contained response context.
javax.xml.ws.WebServiceContext.getEndpointReference(org.w3c.dom.Element...),returns the endpointreference for this endpoint.
"javax.xml.ws.WebServiceContext.getEndpointReference(java.lang.Class<T>,org.w3c.dom.Element...)",returns the endpointreference associated with this endpoint.
javax.xml.ws.WebServiceContext.getMessageContext(),returns the messagecontext for the request being served at the time this method is called.
javax.xml.ws.WebServiceContext.getUserPrincipal(),returns the principal that identifies the sender of the request currently being serviced.
javax.xml.ws.WebServiceContext.isUserInRole(java.lang.String),returns a boolean indicating whether the authenticated user is included in the specified logical role.
javax.xml.ws.Endpoint.create(java.lang.Object),creates an endpoint with the specified implementor object.
"javax.xml.ws.Endpoint.create(java.lang.Object,javax.xml.ws.WebServiceFeature...)",creates an endpoint with the specified implementor object and web service features.
"javax.xml.ws.Endpoint.create(java.lang.String,java.lang.Object)",creates an endpoint with the specified binding type and implementor object.
"javax.xml.ws.Endpoint.create(java.lang.String,java.lang.Object,javax.xml.ws.WebServiceFeature...)","creates an endpoint with the specified binding type, implementor object, and web service features."
javax.xml.ws.Endpoint.getBinding(),returns the binding for this endpoint.
javax.xml.ws.Endpoint.getEndpointReference(org.w3c.dom.Element...),returns the endpointreference associated with this endpoint instance.
"javax.xml.ws.Endpoint.getEndpointReference(java.lang.Class<T>,org.w3c.dom.Element...)",returns the endpointreference associated with this endpoint instance.
javax.xml.ws.Endpoint.getExecutor(),returns the executor for this endpointinstance.
javax.xml.ws.Endpoint.getImplementor(),returns the implementation object for this endpoint.
javax.xml.ws.Endpoint.getMetadata(),returns a list of metadata documents for the service.
javax.xml.ws.Endpoint.getProperties(),returns the property bag for this endpoint instance.
javax.xml.ws.Endpoint.isPublished(),returns true if the endpoint is in the published state.
javax.xml.ws.Endpoint.publish(java.lang.String),publishes this endpoint at the given address.
"javax.xml.ws.Endpoint.publish(java.lang.String,java.lang.Object)",creates and publishes an endpoint for the specified implementor object at the given address.
"javax.xml.ws.Endpoint.publish(java.lang.String,java.lang.Object,javax.xml.ws.WebServiceFeature...)",creates and publishes an endpoint for the specified implementor object at the given address.
javax.xml.ws.Endpoint.publish(java.lang.Object),publishes this endpoint at the provided server context.
javax.xml.ws.Endpoint.publish(javax.xml.ws.spi.http.HttpContext),publishes this endpoint at the provided server context.
javax.xml.ws.Endpoint.setEndpointContext(javax.xml.ws.EndpointContext),"by settng a endpointcontext, jax-ws runtime knows about addresses of other endpoints in an application."
javax.xml.ws.Endpoint.setExecutor(java.util.concurrent.Executor),sets the executor for this endpoint instance.
javax.xml.ws.Endpoint.setMetadata(java.util.List<javax.xml.transform.Source>),sets the metadata for this endpoint.
"javax.xml.ws.Endpoint.setProperties(,java.lang.Object>)",sets the property bag for this endpoint instance.
javax.xml.ws.Endpoint.stop(),stops publishing this endpoint.
javax.xml.ws.EndpointContext.getEndpoints(),this gives list of endpoints in an application.
"javax.xml.ws.EndpointReference.getPort(java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",the getport method returns a proxy.
javax.xml.ws.EndpointReference.readFrom(javax.xml.transform.Source),factory method to read an endpointreference from the infoset contained in eprinfoset.
javax.xml.ws.EndpointReference.toString(),displays epr infoset for debugging convenience.
javax.xml.ws.EndpointReference.writeTo(javax.xml.transform.Result),write this endpointreference to the specified infoset format.
javax.xml.ws.RespectBindingFeature.getID(),get the unique identifier for this webservicefeature.
"javax.xml.ws.Service.addPort(javax.xml.namespace.QName,java.lang.String,java.lang.String)",creates a new port for the service.
"javax.xml.ws.Service.create(java.net.URL,javax.xml.namespace.QName)",creates a service instance.
"javax.xml.ws.Service.create(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature...)",creates a service instance.
javax.xml.ws.Service.create(javax.xml.namespace.QName),creates a service instance.
"javax.xml.ws.Service.create(javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature...)",creates a service instance.
"javax.xml.ws.Service.createDispatch(javax.xml.namespace.QName,java.lang.Class<T>,javax.xml.ws.Service.Mode)",creates a dispatch instance for use with objects of the client's choosing.
"javax.xml.ws.Service.createDispatch(javax.xml.namespace.QName,java.lang.Class<T>,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",creates a dispatch instance for use with objects of the client's choosing.
"javax.xml.ws.Service.createDispatch(javax.xml.ws.EndpointReference,java.lang.Class<T>,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",creates a dispatch instance for use with objects of the client's choosing.
"javax.xml.ws.Service.createDispatch(javax.xml.namespace.QName,javax.xml.bind.JAXBContext,javax.xml.ws.Service.Mode)",creates a dispatch instance for use with jaxb generated objects.
"javax.xml.ws.Service.createDispatch(javax.xml.namespace.QName,javax.xml.bind.JAXBContext,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",creates a dispatch instance for use with jaxb generated objects.
"javax.xml.ws.Service.createDispatch(javax.xml.ws.EndpointReference,javax.xml.bind.JAXBContext,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",creates a dispatch instance for use with jaxb generated objects.
javax.xml.ws.Service.getExecutor(),returns the executor for this serviceinstance.
javax.xml.ws.Service.getHandlerResolver(),returns the configured handler resolver.
"javax.xml.ws.Service.getPort(javax.xml.namespace.QName,java.lang.Class<T>)",the getport method returns a proxy.
"javax.xml.ws.Service.getPort(javax.xml.namespace.QName,java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",the getport method returns a proxy.
javax.xml.ws.Service.getPort(java.lang.Class<T>),the getport method returns a proxy.
"javax.xml.ws.Service.getPort(java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",the getport method returns a proxy.
"javax.xml.ws.Service.getPort(javax.xml.ws.EndpointReference,java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",the getport method returns a proxy.
javax.xml.ws.Service.getPorts(),returns an iterator for the list of qnames of service endpoints grouped by this service.
javax.xml.ws.Service.getServiceName(),gets the name of this service.
javax.xml.ws.Service.getWSDLDocumentLocation(),gets the location of the wsdl document for this service.
javax.xml.ws.Service.setExecutor(java.util.concurrent.Executor),sets the executor for this service instance.
javax.xml.ws.Service.setHandlerResolver(javax.xml.ws.handler.HandlerResolver),sets the handlerresolver for this service instance.
javax.xml.ws.WebServiceFeature.getID(),get the unique identifier for this webservicefeature.
javax.xml.ws.WebServiceFeature.isEnabled(),returns true if this feature is enabled.
javax.xml.ws.Service.Mode.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.xml.ws.Service.Mode.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.xml.ws.handler.Handler.close(javax.xml.ws.handler.MessageContext),"called at the conclusion of a message exchange pattern just prior to the jax-ws runtime dispatching a message, fault or exception."
javax.xml.ws.handler.Handler.handleFault(javax.xml.ws.handler.Handler),the handlefault method is invoked for fault message processing.
javax.xml.ws.handler.Handler.handleMessage(javax.xml.ws.handler.Handler),the handlemessage method is invoked for normal processing of inbound and outbound messages.
javax.xml.ws.handler.HandlerResolver.getHandlerChain(javax.xml.ws.handler.PortInfo),gets the handler chain for the specified port.
javax.xml.ws.handler.LogicalMessageContext.getMessage(),gets the message from this message context.
javax.xml.ws.handler.MessageContext.getScope(java.lang.String),gets the scope of a property.
"javax.xml.ws.handler.MessageContext.setScope(java.lang.String,javax.xml.ws.handler.MessageContext.Scope)",sets the scope of a property.
javax.xml.ws.handler.PortInfo.getBindingID(),gets the uri identifying the binding used by the port being accessed.
javax.xml.ws.handler.PortInfo.getPortName(),gets the qualified name of the wsdl port being accessed.
javax.xml.ws.handler.PortInfo.getServiceName(),gets the qualified name of the wsdl service name containing the port being accessed.
javax.xml.ws.handler.MessageContext.Scope.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.xml.ws.handler.MessageContext.Scope.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.xml.ws.handler.soap.SOAPHandler.getHeaders(),gets the header blocks that can be processed by this handler instance.
"javax.xml.ws.handler.soap.SOAPMessageContext.getHeaders(javax.xml.namespace.QName,javax.xml.bind.JAXBContext,boolean)",gets headers that have a particular qualified name from the message in the message context.
javax.xml.ws.handler.soap.SOAPMessageContext.getMessage(),gets the soapmessage from this message context.
javax.xml.ws.handler.soap.SOAPMessageContext.getRoles(),gets the soap actor roles associated with an execution of the handler chain.
javax.xml.ws.handler.soap.SOAPMessageContext.setMessage(javax.xml.soap.SOAPMessage),sets the soapmessage in this message context.
javax.xml.ws.http.HTTPException.getStatusCode(),gets the http status code.
javax.xml.ws.soap.SOAPBinding.getMessageFactory(),gets the saaj messagefactory instance used by this soap binding.
javax.xml.ws.soap.SOAPBinding.getRoles(),gets the roles played by the soap binding instance.
javax.xml.ws.soap.SOAPBinding.getSOAPFactory(),gets the saaj soapfactory instance used by this soap binding.
javax.xml.ws.soap.SOAPBinding.isMTOMEnabled(),returns true if the use of mtom is enabled.
javax.xml.ws.soap.SOAPBinding.setMTOMEnabled(boolean),enables or disables use of mtom.
javax.xml.ws.soap.SOAPBinding.setRoles(java.util.Set<java.lang.String>),sets the roles played by the soap binding instance.
javax.xml.ws.soap.AddressingFeature.getID(),get the unique identifier for this webservicefeature.
javax.xml.ws.soap.AddressingFeature.getResponses(),"if addressing is enabled, this property determines whether endpoint requires the use of anonymous responses, or non-anonymous responses, or all responses."
javax.xml.ws.soap.AddressingFeature.isRequired(),"if addressing is enabled, this property determines whether the endpoint requires ws-addressing."
javax.xml.ws.soap.MTOMFeature.getID(),get the unique identifier for this webservicefeature.
javax.xml.ws.soap.MTOMFeature.getThreshold(),gets the threshold value used to determine when binary data should be sent as an attachment.
javax.xml.ws.soap.AddressingFeature.Responses.valueOf(java.lang.String),returns the enum constant of this type with the specified name.
javax.xml.ws.soap.AddressingFeature.Responses.values(),"returns an array containing the constants of this enum type, in the order they are declared."
javax.xml.ws.soap.SOAPFaultException.getFault(),gets the embedded soapfault instance.
javax.xml.ws.spi.Invoker.inject(javax.xml.ws.WebServiceContext),jax-ws runtimes calls this method to ask container to inject webservicecontext on the endpoint instance.
"javax.xml.ws.spi.Invoker.invoke(java.lang.reflect.Method,java.lang.Object...)",jax-ws runtime calls this method to do the actual web service invocation on endpoint instance.
"javax.xml.ws.spi.Provider.createAndPublishEndpoint(java.lang.String,java.lang.Object)",creates and publishes an endpoint object with the specified address and implementation object.
"javax.xml.ws.spi.Provider.createAndPublishEndpoint(java.lang.String,java.lang.Object,javax.xml.ws.WebServiceFeature...)","creates and publishes an endpoint object with the specified address, implementation object and web service features."
"javax.xml.ws.spi.Provider.createEndpoint(java.lang.String,java.lang.Object)",creates an endpoint object with the provided binding and implementation object.
"javax.xml.ws.spi.Provider.createEndpoint(java.lang.String,java.lang.Object,javax.xml.ws.WebServiceFeature...)","creates an endpoint object with the provided binding, implementation object and web service features."
"javax.xml.ws.spi.Provider.createEndpoint(java.lang.String,java.lang.Class<?>,javax.xml.ws.spi.Invoker,javax.xml.ws.WebServiceFeature...)","creates an endpoint object with the provided binding, implementation class, invoker and web service features."
"javax.xml.ws.spi.Provider.createServiceDelegate(java.net.URL,javax.xml.namespace.QName,java.lang.Class<? extends javax.xml.ws.Service>)",creates a service delegate object.
"javax.xml.ws.spi.Provider.createServiceDelegate(java.net.URL,javax.xml.namespace.QName,java.lang.Class<? extends javax.xml.ws.Service>,javax.xml.ws.WebServiceFeature...)",creates a service delegate object.
"javax.xml.ws.spi.Provider.createW3CEndpointReference(java.lang.String,javax.xml.namespace.QName,javax.xml.namespace.QName,java.util.List<org.w3c.dom.Element>,java.lang.String,java.util.List<org.w3c.dom.Element>)",factory method to create a w3cendpointreference.
"javax.xml.ws.spi.Provider.createW3CEndpointReference(java.lang.String,javax.xml.namespace.QName,javax.xml.namespace.QName,javax.xml.namespace.QName,java.util.List<org.w3c.dom.Element>,java.lang.String,java.util.List<org.w3c.dom.Element>,java.util.List<org.w3c.dom.Element>,,java.lang.String>)",factory method to create a w3cendpointreference.
"javax.xml.ws.spi.Provider.getPort(javax.xml.ws.EndpointReference,java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",the getport method returns a proxy.
javax.xml.ws.spi.Provider.provider(),creates a new provider object.
javax.xml.ws.spi.Provider.readEndpointReference(javax.xml.transform.Source),read an endpointreference from the infoset contained in eprinfoset.
"javax.xml.ws.spi.ServiceDelegate.addPort(javax.xml.namespace.QName,java.lang.String,java.lang.String)",creates a new port for the service.
"javax.xml.ws.spi.ServiceDelegate.createDispatch(javax.xml.namespace.QName,java.lang.Class<T>,javax.xml.ws.Service.Mode)",creates a dispatch instance for use with objects of the user's choosing.
"javax.xml.ws.spi.ServiceDelegate.createDispatch(javax.xml.namespace.QName,java.lang.Class<T>,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",creates a dispatch instance for use with objects of the user's choosing.
"javax.xml.ws.spi.ServiceDelegate.createDispatch(javax.xml.ws.EndpointReference,java.lang.Class<T>,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",creates a dispatch instance for use with objects of the user's choosing.
"javax.xml.ws.spi.ServiceDelegate.createDispatch(javax.xml.namespace.QName,javax.xml.bind.JAXBContext,javax.xml.ws.Service.Mode)",creates a dispatch instance for use with jaxb generated objects.
"javax.xml.ws.spi.ServiceDelegate.createDispatch(javax.xml.namespace.QName,javax.xml.bind.JAXBContext,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",creates a dispatch instance for use with jaxb generated objects.
"javax.xml.ws.spi.ServiceDelegate.createDispatch(javax.xml.ws.EndpointReference,javax.xml.bind.JAXBContext,javax.xml.ws.Service.Mode,javax.xml.ws.WebServiceFeature...)",creates a dispatch instance for use with jaxb generated objects.
javax.xml.ws.spi.ServiceDelegate.getExecutor(),returns the executor for this serviceinstance.
javax.xml.ws.spi.ServiceDelegate.getHandlerResolver(),returns the configured handler resolver.
"javax.xml.ws.spi.ServiceDelegate.getPort(javax.xml.namespace.QName,java.lang.Class<T>)",the getport method returns a proxy.
"javax.xml.ws.spi.ServiceDelegate.getPort(javax.xml.namespace.QName,java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",the getport method returns a proxy.
"javax.xml.ws.spi.ServiceDelegate.getPort(javax.xml.ws.EndpointReference,java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",the getport method returns a proxy.
javax.xml.ws.spi.ServiceDelegate.getPort(java.lang.Class<T>),the getport method returns a proxy.
"javax.xml.ws.spi.ServiceDelegate.getPort(java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",the getport method returns a proxy.
javax.xml.ws.spi.ServiceDelegate.getPorts(),returns an iterator for the list of qnames of service endpoints grouped by this service.
javax.xml.ws.spi.ServiceDelegate.getServiceName(),gets the name of this service.
javax.xml.ws.spi.ServiceDelegate.getWSDLDocumentLocation(),gets the location of the wsdl document for this service.
javax.xml.ws.spi.ServiceDelegate.setExecutor(java.util.concurrent.Executor),sets the executor for this service instance.
javax.xml.ws.spi.ServiceDelegate.setHandlerResolver(javax.xml.ws.handler.HandlerResolver),sets the handlerresolver for this service instance.
javax.xml.ws.spi.http.HttpContext.getAttribute(java.lang.String),returns an attribute value for container's configuration and other data that can be used by jax-ws runtime.
javax.xml.ws.spi.http.HttpContext.getAttributeNames(),returns all attribute names for container's configuration and other data that can be used by jax-ws runtime.
javax.xml.ws.spi.http.HttpContext.getPath(),returns the path for this context.
javax.xml.ws.spi.http.HttpContext.setHandler(javax.xml.ws.spi.http.HttpHandler),jax-ws runtime sets its handler during endpoint.
"javax.xml.ws.spi.http.HttpExchange.addResponseHeader(java.lang.String,java.lang.String)",adds a response header with the given name and value.
javax.xml.ws.spi.http.HttpExchange.close(),this must be called to end an exchange.
javax.xml.ws.spi.http.HttpExchange.getAttribute(java.lang.String),returns an attribute that is associated with this httpexchange.
javax.xml.ws.spi.http.HttpExchange.getAttributeNames(),gives all the attribute names that are associated with this httpexchange.
javax.xml.ws.spi.http.HttpExchange.getContextPath(),returns the context path of all the endpoints in an application.
javax.xml.ws.spi.http.HttpExchange.getHttpContext(),returns a httpcontext for this exchange.
javax.xml.ws.spi.http.HttpExchange.getLocalAddress(),returns the unresolved local address on which the request was received.
javax.xml.ws.spi.http.HttpExchange.getPathInfo(),"returns the extra path information that follows the web service path but precedes the query string in the request uri and will start with a ""/"" character."
javax.xml.ws.spi.http.HttpExchange.getProtocol(),returns the protocol string from the request in the form protocol/majorversion.
javax.xml.ws.spi.http.HttpExchange.getQueryString(),returns the query string that is contained in the request uri after the path.
javax.xml.ws.spi.http.HttpExchange.getRemoteAddress(),returns the unresolved address of the remote entity invoking this request.
javax.xml.ws.spi.http.HttpExchange.getRequestBody(),returns a stream from which the request body can be read.
javax.xml.ws.spi.http.HttpExchange.getRequestHeader(java.lang.String),returns the value of the specified request header.
javax.xml.ws.spi.http.HttpExchange.getRequestHeaders(),returns an immutable map containing the http headers that were included with this request.
javax.xml.ws.spi.http.HttpExchange.getRequestMethod(),get the http request method.
javax.xml.ws.spi.http.HttpExchange.getRequestURI(),returns the part of the request's uri from the protocol name up to the query string in the first line of the http request.
javax.xml.ws.spi.http.HttpExchange.getResponseBody(),returns a stream to which the response body must be written.
javax.xml.ws.spi.http.HttpExchange.getResponseHeaders(),returns a mutable map into which the http response headers can be stored and which will be transmitted as part of this response.
javax.xml.ws.spi.http.HttpExchange.getScheme(),"returns the name of the scheme used to make this request, for example: http, or https."
javax.xml.ws.spi.http.HttpExchange.getUserPrincipal(),returns the principal that represents the authenticated user for this httpexchange.
javax.xml.ws.spi.http.HttpExchange.isUserInRole(java.lang.String),"indicates whether an authenticated user is included in the specified logical ""role""."
javax.xml.ws.spi.http.HttpExchange.setStatus(int),sets the http status code for the response.
javax.xml.ws.spi.http.HttpHandler.handle(javax.xml.ws.spi.http.HttpExchange),handles a given request and generates an appropriate response.
javax.xml.ws.wsaddressing.W3CEndpointReference.writeTo(javax.xml.transform.Result),write this endpointreference to the specified infoset format.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.address(java.lang.String),sets the address to the w3cendpointreference instance's wsa:address.
"javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.attribute(javax.xml.namespace.QName,java.lang.String)",adds an extension attribute to the w3cendpointreference instance's wsa:endpointreference element.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.build(),builds a w3cendpointreference from the accumulated properties set on this w3cendpointreferencebuilder instance.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.element(org.w3c.dom.Element),adds an extension element to the w3cendpointreference instance's wsa:endpointreference element.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.endpointName(javax.xml.namespace.QName),sets the endpointname as wsam:servicename/@endpointname in the wsa:metadata element.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.interfaceName(javax.xml.namespace.QName),sets the interfacename as the wsam:interfacename element in the wsa:metadata element.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.metadata(org.w3c.dom.Element),adds the metadataelement to the w3cendpointreference instance's wsa:metadata element.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.referenceParameter(org.w3c.dom.Element),adds the referenceparameter to the w3cendpointreference instance wsa:referenceparameters element.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.serviceName(javax.xml.namespace.QName),sets the servicename as the wsam:servicename element in the wsa:metadata element.
javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.wsdlDocumentLocation(java.lang.String),sets the wsdldocumentlocation that will be referenced as wsa:metadata/@wsdli:wsdllocation.
javax.xml.xpath.XPath.compile(java.lang.String),compile an xpath expression for later evaluation.
"javax.xml.xpath.XPath.evaluate(java.lang.String,java.lang.Object,javax.xml.namespace.QName)",evaluate an xpath expression in the specified context and return the result as the specified type.
"javax.xml.xpath.XPath.evaluate(java.lang.String,java.lang.Object)",evaluate an xpath expression in the specified context and return the result as a string.
"javax.xml.xpath.XPath.evaluate(java.lang.String,org.xml.sax.InputSource,javax.xml.namespace.QName)",evaluate an xpath expression in the context of the specified inputsource and return the result as the specified type.
"javax.xml.xpath.XPath.evaluate(java.lang.String,org.xml.sax.InputSource)",evaluate an xpath expression in the context of the specified inputsource and return the result as a string.
javax.xml.xpath.XPath.getNamespaceContext(),return the current namespace context.
javax.xml.xpath.XPath.getXPathFunctionResolver(),return the current function resolver.
javax.xml.xpath.XPath.getXPathVariableResolver(),return the current variable resolver.
javax.xml.xpath.XPath.reset(),reset this xpath to its original configuration.
javax.xml.xpath.XPath.setNamespaceContext(javax.xml.namespace.NamespaceContext),establish a namespace context.
javax.xml.xpath.XPath.setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver),establish a function resolver.
javax.xml.xpath.XPath.setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver),establish a variable resolver.
"javax.xml.xpath.XPathExpression.evaluate(java.lang.Object,javax.xml.namespace.QName)",evaluate the compiled xpath expression in the specified context and return the result as the specified type.
javax.xml.xpath.XPathExpression.evaluate(java.lang.Object),evaluate the compiled xpath expression in the specified context and return the result as a string.
"javax.xml.xpath.XPathExpression.evaluate(org.xml.sax.InputSource,javax.xml.namespace.QName)",evaluate the compiled xpath expression in the context of the specified inputsource and return the result as the specified type.
javax.xml.xpath.XPathExpression.evaluate(org.xml.sax.InputSource),evaluate the compiled xpath expression in the context of the specified inputsource and return the result as a string.
javax.xml.xpath.XPathFunction.evaluate(java.util.List),evaluate the function with the specified arguments.
"javax.xml.xpath.XPathFunctionResolver.resolveFunction(javax.xml.namespace.QName,int)",find a function in the set of available functions.
javax.xml.xpath.XPathVariableResolver.resolveVariable(javax.xml.namespace.QName),find a variable in the set of available variables.
javax.xml.xpath.XPathFactory.getFeature(java.lang.String),get the state of the named feature.
javax.xml.xpath.XPathFactory.isObjectModelSupported(java.lang.String),is specified object model supported by this xpathfactory?.
javax.xml.xpath.XPathFactory.newInstance(),"get a new xpathfactory instance using the default object model, default_object_model_uri, the w3c dom."
javax.xml.xpath.XPathFactory.newInstance(java.lang.String),get a new xpathfactory instance using the specified object model.
"javax.xml.xpath.XPathFactory.newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader)",obtain a new instance of a xpathfactory from a factory class name.
javax.xml.xpath.XPathFactory.newXPath(),return a new xpath using the underlying object model determined when the xpathfactory was instantiated.
"javax.xml.xpath.XPathFactory.setFeature(java.lang.String,boolean)",set a feature for this xpathfactory and xpaths created by this factory.
javax.xml.xpath.XPathFactory.setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver),establish a default function resolver.
javax.xml.xpath.XPathFactory.setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver),establish a default variable resolver.
javax.xml.xpath.XPathException.getCause(),get the cause of this xpathexception.
javax.xml.xpath.XPathException.printStackTrace(java.io.PrintStream),print stack trace to specified printstream.
javax.xml.xpath.XPathException.printStackTrace(),print stack trace to system.
javax.xml.xpath.XPathException.printStackTrace(java.io.PrintWriter),print stack trace to specified printwriter.
"org.ietf.jgss.GSSContext.acceptSecContext(byte[],int,int)",called by the context acceptor upon receiving a token from the peer.
"org.ietf.jgss.GSSContext.acceptSecContext(java.io.InputStream,java.io.OutputStream)",called by the context acceptor to process a token from the peer using streams.
org.ietf.jgss.GSSContext.dispose(),releases any system resources and cryptographic information stored in the context object and invalidates the context.
org.ietf.jgss.GSSContext.export(),exports this context so that another process may import it.
org.ietf.jgss.GSSContext.getAnonymityState(),determines if the context initiator is anonymously authenticated to the context acceptor.
org.ietf.jgss.GSSContext.getConfState(),determines if data confidentiality is available over the context.
org.ietf.jgss.GSSContext.getCredDelegState(),determines if credential delegation is enabled on this context.
org.ietf.jgss.GSSContext.getDelegCred(),obtains the credentials delegated by the context initiator to the context acceptor.
org.ietf.jgss.GSSContext.getIntegState(),determines if data integrity is available over the context.
org.ietf.jgss.GSSContext.getLifetime(),determines what the remaining lifetime for this context is.
org.ietf.jgss.GSSContext.getMech(),determines what mechanism is being used for this context.
"org.ietf.jgss.GSSContext.getMIC(byte[],int,int,org.ietf.jgss.MessageProp)","returns a token containing a cryptographic message integrity code (mic) for the supplied message, for transfer to the peer application."
"org.ietf.jgss.GSSContext.getMIC(java.io.InputStream,java.io.OutputStream,org.ietf.jgss.MessageProp)","uses streams to produce a token containing a cryptographic mic for the supplied message, for transfer to the peer application."
org.ietf.jgss.GSSContext.getMutualAuthState(),determines if mutual authentication is enabled on this context.
org.ietf.jgss.GSSContext.getReplayDetState(),determines if replay detection is enabled for the per-message security services from this context.
org.ietf.jgss.GSSContext.getSequenceDetState(),determines if sequence checking is enabled for the per-message security services from this context.
org.ietf.jgss.GSSContext.getSrcName(),returns the name of the context initiator.
org.ietf.jgss.GSSContext.getTargName(),returns the name of the context acceptor.
"org.ietf.jgss.GSSContext.getWrapSizeLimit(int,boolean,int)",used to determine limits on the size of the message that can be passed to wrap.
"org.ietf.jgss.GSSContext.initSecContext(byte[],int,int)",called by the context initiator to start the context creation phase and process any tokens generated by the peer's acceptseccontext method.
"org.ietf.jgss.GSSContext.initSecContext(java.io.InputStream,java.io.OutputStream)",called by the context initiator to start the context creation phase and process any tokens generated by the peer's acceptseccontext method using streams.
org.ietf.jgss.GSSContext.isEstablished(),used during context establishment to determine the state of the context.
org.ietf.jgss.GSSContext.isInitiator(),determines if this is the context initiator.
org.ietf.jgss.GSSContext.isProtReady(),determines if the context is ready for per message operations to be used over it.
org.ietf.jgss.GSSContext.isTransferable(),determines if the context is transferable to other processes through the use of the export method.
org.ietf.jgss.GSSContext.requestAnonymity(boolean),requests that the initiator's identity not be disclosed to the acceptor.
org.ietf.jgss.GSSContext.requestConf(boolean),requests that data confidentiality be enabled for the wrap method.
org.ietf.jgss.GSSContext.requestCredDeleg(boolean),requests that the initiator's credentials be delegated to the acceptor during context establishment.
org.ietf.jgss.GSSContext.requestInteg(boolean),requests that data integrity be enabled for the wrap and getmicmethods.
org.ietf.jgss.GSSContext.requestLifetime(int),requests a lifetime in seconds for the context.
org.ietf.jgss.GSSContext.requestMutualAuth(boolean),requests that mutual authentication be done during context establishment.
org.ietf.jgss.GSSContext.requestReplayDet(boolean),requests that replay detection be enabled for the per-message security services after context establishment.
org.ietf.jgss.GSSContext.requestSequenceDet(boolean),requests that sequence checking be enabled for the per-message security services after context establishment.
org.ietf.jgss.GSSContext.setChannelBinding(org.ietf.jgss.ChannelBinding),sets the channel bindings to be used during context establishment.
"org.ietf.jgss.GSSContext.unwrap(byte[],int,int,org.ietf.jgss.MessageProp)",used to process tokens generated by the wrap method on the other side of the context.
"org.ietf.jgss.GSSContext.unwrap(java.io.InputStream,java.io.OutputStream,org.ietf.jgss.MessageProp)",uses streams to process tokens generated by the wrap method on the other side of the context.
"org.ietf.jgss.GSSContext.verifyMIC(byte[],int,int,byte[],int,int,org.ietf.jgss.MessageProp)","verifies the cryptographic mic, contained in the token parameter, over the supplied message."
"org.ietf.jgss.GSSContext.verifyMIC(java.io.InputStream,java.io.InputStream,org.ietf.jgss.MessageProp)","uses streams to verify the cryptographic mic, contained in the token parameter, over the supplied message."
"org.ietf.jgss.GSSContext.wrap(byte[],int,int,org.ietf.jgss.MessageProp)",applies per-message security services over the established security context.
"org.ietf.jgss.GSSContext.wrap(java.io.InputStream,java.io.OutputStream,org.ietf.jgss.MessageProp)",applies per-message security services over the established security context using streams.
"org.ietf.jgss.GSSCredential.add(org.ietf.jgss.GSSName,int,int,org.ietf.jgss.Oid,int)",adds a mechanism specific credential-element to an existing credential.
org.ietf.jgss.GSSCredential.dispose(),releases any sensitive information that the gsscredential object may be containing.
org.ietf.jgss.GSSCredential.equals(java.lang.Object),tests if this gsscredential asserts the same entity as the supplied object.
org.ietf.jgss.GSSCredential.getMechs(),returns a list of mechanisms supported by this credential.
org.ietf.jgss.GSSCredential.getName(),retrieves the name of the entity that the credential asserts.
org.ietf.jgss.GSSCredential.getName(org.ietf.jgss.Oid),retrieves a mechanism name of the entity that the credential asserts.
org.ietf.jgss.GSSCredential.getRemainingAcceptLifetime(org.ietf.jgss.Oid),returns the lifetime in seconds for the credential to remain capable of accepting security contexts using the specified mechanism.
org.ietf.jgss.GSSCredential.getRemainingInitLifetime(org.ietf.jgss.Oid),returns the lifetime in seconds for the credential to remain capable of initiating security contexts using the specified mechanism.
org.ietf.jgss.GSSCredential.getRemainingLifetime(),returns the remaining lifetime in seconds for a credential.
org.ietf.jgss.GSSCredential.getUsage(),returns the credential usage mode.
org.ietf.jgss.GSSCredential.getUsage(org.ietf.jgss.Oid),returns the credential usage mode for a specific mechanism.
org.ietf.jgss.GSSCredential.hashCode(),returns a hashcode value for this gsscredential.
org.ietf.jgss.GSSName.canonicalize(org.ietf.jgss.Oid),creates a name that is canonicalized for some mechanism.
org.ietf.jgss.GSSName.equals(org.ietf.jgss.GSSName),compares two gssname objects to determine if they refer to the same entity.
org.ietf.jgss.GSSName.equals(java.lang.Object),compares this gssname object to another object that might be a gssname.
org.ietf.jgss.GSSName.export(),"returns a canonical contiguous byte representation of a mechanism name (mn), suitable for direct, byte by byte comparison by authorization functions."
org.ietf.jgss.GSSName.getStringNameType(),returns the name type of the printable representation of this name that can be obtained from the tostring method.
org.ietf.jgss.GSSName.hashCode(),returns a hashcode value for this gssname.
org.ietf.jgss.GSSName.isAnonymous(),tests if this name object represents an anonymous entity.
org.ietf.jgss.GSSName.isMN(),tests if this name object represents a mechanism name (mn).
org.ietf.jgss.GSSName.toString(),returns a textual representation of the gssname object.
org.ietf.jgss.ChannelBinding.equals(java.lang.Object),compares two instances of channelbinding.
org.ietf.jgss.ChannelBinding.getAcceptorAddress(),get the acceptor's address for this channel binding.
org.ietf.jgss.ChannelBinding.getApplicationData(),get the application specified data for this channel binding.
org.ietf.jgss.ChannelBinding.getInitiatorAddress(),get the initiator's address for this channel binding.
org.ietf.jgss.ChannelBinding.hashCode(),returns a hashcode value for this channelbinding object.
"org.ietf.jgss.GSSManager.addProviderAtEnd(java.security.Provider,org.ietf.jgss.Oid)",this method is used to indicate to the gssmanager that the application would like a particular provider to be used if no other provider can be found that supports the given mechanism.
"org.ietf.jgss.GSSManager.addProviderAtFront(java.security.Provider,org.ietf.jgss.Oid)",this method is used to indicate to the gssmanager that the application would like a particular provider to be used ahead of all others when support is desired for the given mechanism.
"org.ietf.jgss.GSSManager.createContext(org.ietf.jgss.GSSName,org.ietf.jgss.Oid,org.ietf.jgss.GSSCredential,int)",factory method for creating a context on the initiator's side.
org.ietf.jgss.GSSManager.createContext(org.ietf.jgss.GSSCredential),factory method for creating a context on the acceptor' side.
org.ietf.jgss.GSSManager.createContext(byte[]),factory method for creating a previously exported context.
org.ietf.jgss.GSSManager.createCredential(int),factory method for acquiring default credentials.
"org.ietf.jgss.GSSManager.createCredential(org.ietf.jgss.GSSName,int,org.ietf.jgss.Oid,int)",factory method for acquiring a single mechanism credential.
"org.ietf.jgss.GSSManager.createCredential(org.ietf.jgss.GSSName,int,org.ietf.jgss.Oid[],int)",factory method for acquiring credentials over a set of mechanisms.
"org.ietf.jgss.GSSManager.createName(java.lang.String,org.ietf.jgss.Oid)",factory method to convert a string name from the specified namespace to a gssname object.
"org.ietf.jgss.GSSManager.createName(byte[],org.ietf.jgss.Oid)",factory method to convert a byte array containing a name from the specified namespace to a gssname object.
"org.ietf.jgss.GSSManager.createName(java.lang.String,org.ietf.jgss.Oid,org.ietf.jgss.Oid)",factory method to convert a string name from the specified namespace to a gssname object and canonicalize it at the same time for a mechanism.
"org.ietf.jgss.GSSManager.createName(byte[],org.ietf.jgss.Oid,org.ietf.jgss.Oid)",factory method to convert a byte array containing a name from the specified namespace to a gssname object and canonicalize it at the same time for a mechanism.
org.ietf.jgss.GSSManager.getInstance(),returns the default gssmanager implementation.
org.ietf.jgss.GSSManager.getMechs(),returns a list of mechanisms that are available to gss-api callers through this gssmanager.
org.ietf.jgss.GSSManager.getMechsForName(org.ietf.jgss.Oid),returns a list of mechanisms that support the indicated name type.
org.ietf.jgss.GSSManager.getNamesForMech(org.ietf.jgss.Oid),returns then name types supported by the indicated mechanism.
org.ietf.jgss.MessageProp.getMinorStatus(),retrieves the minor status code that the underlying mechanism might have set for this per-message operation.
org.ietf.jgss.MessageProp.getMinorString(),retrieves a string explaining the minor status code.
org.ietf.jgss.MessageProp.getPrivacy(),retrieves the privacy state.
org.ietf.jgss.MessageProp.getQOP(),retrieves the qop value.
org.ietf.jgss.MessageProp.isDuplicateToken(),tests if this is a duplicate of an earlier token.
org.ietf.jgss.MessageProp.isGapToken(),"tests if an expected token was not received, i."
org.ietf.jgss.MessageProp.isOldToken(),"tests if this token's validity period has expired, i."
org.ietf.jgss.MessageProp.isUnseqToken(),tests if a later token had already been processed.
org.ietf.jgss.MessageProp.setPrivacy(boolean),sets the privacy state.
org.ietf.jgss.MessageProp.setQOP(int),sets the qop value.
"org.ietf.jgss.MessageProp.setSupplementaryStates(boolean,boolean,boolean,boolean,int,java.lang.String)",this method sets the state for the supplementary information flags and the minor status in messageprop.
org.ietf.jgss.Oid.containedIn(org.ietf.jgss.Oid[]),a utility method to test if this oid value is contained within the supplied oid array.
org.ietf.jgss.Oid.equals(java.lang.Object),tests if two oid objects represent the same object identifier value.
org.ietf.jgss.Oid.getDER(),returns the full asn.
org.ietf.jgss.Oid.hashCode(),returns a hashcode value for this oid.
org.ietf.jgss.Oid.toString(),returns a string representation of the oid's integer components in dot separated notation.
org.ietf.jgss.GSSException.getMajor(),returns the gss-api level major error code for the problem causing this exception to be thrown.
org.ietf.jgss.GSSException.getMajorString(),returns a string explaining the gss-api level major error code in this exception.
org.ietf.jgss.GSSException.getMessage(),returns a textual representation of both the major and the minor status codes.
org.ietf.jgss.GSSException.getMinor(),returns the mechanism level error code for the problem causing this exception to be thrown.
org.ietf.jgss.GSSException.getMinorString(),returns a string explaining the mechanism specific error code.
"org.ietf.jgss.GSSException.setMinor(int,java.lang.String)",used by the exception thrower to set the mechanism level minor error code and its string explanation.
org.ietf.jgss.GSSException.toString(),returns a textual representation of both the major and the minor status codes.
org.omg.CORBA.CustomMarshal.marshal(org.omg.CORBA.DataOutputStream),marshal method has to be implemented by the customized marshal class.
org.omg.CORBA.CustomMarshal.unmarshal(org.omg.CORBA.DataInputStream),unmarshal method has to be implemented by the customized marshal class.
org.omg.CORBA.DataInputStream.read_Abstract(),reads an idl abstract interface from the input stream.
"org.omg.CORBA.DataInputStream.read_any_array(org.omg.CORBA.AnySeqHolder,int,int)",reads array of idl anys from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_any(),reads an idl any value from the input stream.
"org.omg.CORBA.DataInputStream.read_boolean_array(org.omg.CORBA.BooleanSeqHolder,int,int)",reads array of idl booleans from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_boolean(),reads an idl boolean value from the input stream.
"org.omg.CORBA.DataInputStream.read_char_array(org.omg.CORBA.CharSeqHolder,int,int)",reads array of idl characters from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_char(),reads an idl character value from the input stream.
"org.omg.CORBA.DataInputStream.read_double_array(org.omg.CORBA.DoubleSeqHolder,int,int)",reads array of idl doubles from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_double(),reads an idl double from the input stream.
"org.omg.CORBA.DataInputStream.read_float_array(org.omg.CORBA.FloatSeqHolder,int,int)",reads array of idl floats from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_float(),reads an idl float from the input stream.
"org.omg.CORBA.DataInputStream.read_long_array(org.omg.CORBA.LongSeqHolder,int,int)",reads array of idl longs from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_long(),reads an idl long from the input stream.
"org.omg.CORBA.DataInputStream.read_longlong_array(org.omg.CORBA.LongLongSeqHolder,int,int)",reads array of idl long longs from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_longlong(),reads an idl long long from the input stream.
org.omg.CORBA.DataInputStream.read_Object(),reads an idl corba::object from the input stream.
"org.omg.CORBA.DataInputStream.read_octet_array(org.omg.CORBA.OctetSeqHolder,int,int)",reads array of idl octets from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_octet(),reads an idl octet value from the input stream.
"org.omg.CORBA.DataInputStream.read_short_array(org.omg.CORBA.ShortSeqHolder,int,int)",reads array of idl shorts from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_short(),reads an idl short from the input stream.
org.omg.CORBA.DataInputStream.read_string(),reads an idl string from the input stream.
org.omg.CORBA.DataInputStream.read_TypeCode(),reads an idl typecode from the input stream.
"org.omg.CORBA.DataInputStream.read_ulong_array(org.omg.CORBA.ULongSeqHolder,int,int)",reads array of idl unsigned longs from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_ulong(),reads an idl unsigned long from the input stream.
"org.omg.CORBA.DataInputStream.read_ulonglong_array(org.omg.CORBA.ULongLongSeqHolder,int,int)",reads array of idl unsigned long longs from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_ulonglong(),reads an unsigned idl long long from the input stream.
"org.omg.CORBA.DataInputStream.read_ushort_array(org.omg.CORBA.UShortSeqHolder,int,int)",reads array of idl unsigned shorts from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_ushort(),reads an idl unsigned short from the input stream.
org.omg.CORBA.DataInputStream.read_Value(),reads an idl value type from the input stream.
"org.omg.CORBA.DataInputStream.read_wchar_array(org.omg.CORBA.WCharSeqHolder,int,int)",reads array of idl wide characters from offset for length elements from the input stream.
org.omg.CORBA.DataInputStream.read_wchar(),reads an idl wide character value from the input stream.
org.omg.CORBA.DataInputStream.read_wstring(),reads an idl wide string from the input stream.
org.omg.CORBA.DataOutputStream.write_Abstract(java.lang.Object),writes the idl abstract interface type to the output stream.
"org.omg.CORBA.DataOutputStream.write_any_array(org.omg.CORBA.Any[],int,int)",writes the array of idl anys from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_any(org.omg.CORBA.Any),writes the any value to the output stream.
"org.omg.CORBA.DataOutputStream.write_boolean_array(boolean[],int,int)",writes the array of idl booleans from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_boolean(boolean),writes the boolean value to the output stream.
"org.omg.CORBA.DataOutputStream.write_char_array(char[],int,int)",writes the array of idl characters from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_char(char),writes the idl character value to the output stream.
"org.omg.CORBA.DataOutputStream.write_double_array(double[],int,int)",writes the array of idl doubles from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_double(double),writes the idl double value to the output stream.
"org.omg.CORBA.DataOutputStream.write_float_array(float[],int,int)",writes the array of idl floats from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_float(float),writes the idl float value to the output stream.
"org.omg.CORBA.DataOutputStream.write_long_array(int[],int,int)",writes the array of idl longs from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_long(int),writes the idl long value (represented as a java int) to the output stream.
"org.omg.CORBA.DataOutputStream.write_longlong_array(long[],int,int)",writes the array of idl long longs from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_longlong(long),writes the idl long long value (represented as a java long) to the output stream.
org.omg.CORBA.DataOutputStream.write_Object(org.omg.CORBA.Object),writes the idl corba::object value to the output stream.
"org.omg.CORBA.DataOutputStream.write_octet_array(byte[],int,int)",writes the array of idl octets from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_octet(byte),writes the idl octet value (represented as a java byte) to the output stream.
"org.omg.CORBA.DataOutputStream.write_short_array(short[],int,int)",writes the array of idl shorts from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_short(short),writes the idl short value to the output stream.
org.omg.CORBA.DataOutputStream.write_string(java.lang.String),writes the idl string value to the output stream.
org.omg.CORBA.DataOutputStream.write_TypeCode(org.omg.CORBA.TypeCode),writes the typecode to the output stream.
"org.omg.CORBA.DataOutputStream.write_ulong_array(int[],int,int)",writes the array of idl unsigned longs (represented as java ints) from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_ulong(int),writes the idl unsigned long value (represented as a java int) to the output stream.
"org.omg.CORBA.DataOutputStream.write_ulonglong_array(long[],int,int)",writes the array of idl unsigned long longs (represented as java longs) from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_ulonglong(long),writes the idl unsigned long long value (represented as a java long) to the output stream.
"org.omg.CORBA.DataOutputStream.write_ushort_array(short[],int,int)",writes the array of idl unsigned shorts (represented as java shorts) from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_ushort(short),writes the idl unsigned short value (represented as a java short value) to the output stream.
org.omg.CORBA.DataOutputStream.write_Value(java.io.Serializable),writes the idl value type value to the output stream.
"org.omg.CORBA.DataOutputStream.write_wchar_array(char[],int,int)",writes the array of idl wide characters from offset for length elements to the output stream.
org.omg.CORBA.DataOutputStream.write_wchar(char),writes the idl wide character value to the output stream.
org.omg.CORBA.DataOutputStream.write_wstring(java.lang.String),writes the idl wide string value (represented as a java string) to the output stream.
org.omg.CORBA.DomainManagerOperations.get_domain_policy(int),this returns the policy of the specified type for objects in this domain.
org.omg.CORBA.IDLTypeOperations.type(),the type attribute describes the type defined by an object derived from idltype.
org.omg.CORBA.IRObjectOperations.def_kind(),returns the definitionkind corresponding to this interface repository object.
org.omg.CORBA.IRObjectOperations.destroy(),destroys this object.
"org.omg.CORBA.Object._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue)","creates a request instance initialized with the given context, method name, list of arguments, and container for the method's return value."
"org.omg.CORBA.Object._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue,org.omg.CORBA.ExceptionList,org.omg.CORBA.ContextList)","creates a request instance initialized with the given context, method name, list of arguments, container for the method's return value, list of possible exceptions, and list of context strings needing to be resolved."
org.omg.CORBA.Object._duplicate(),returns a duplicate of this corba object reference.
org.omg.CORBA.Object._get_domain_managers(),retrieves the domainmanagers of this object.
org.omg.CORBA.Object._get_interface_def(),obtains an interfacedef for the object implementation referenced by this object reference.
org.omg.CORBA.Object._get_policy(int),returns the policy object of the specified type which applies to this object.
org.omg.CORBA.Object._hash(int),returns an orb-internal identifier for this object reference.
org.omg.CORBA.Object._is_a(java.lang.String),checks whether this object is an instance of a class that implements the given interface.
org.omg.CORBA.Object._is_equivalent(org.omg.CORBA.Object),"determines whether the two object references are equivalent, so far as the orb can easily determine."
org.omg.CORBA.Object._non_existent(),determines whether the server object for this object reference has been destroyed.
org.omg.CORBA.Object._release(),"signals that the caller is done using this object reference, so internal orb resources associated with this object reference can be released."
org.omg.CORBA.Object._request(java.lang.String),creates a request instance for use in the dynamic invocation interface.
"org.omg.CORBA.Object._set_policy_override(org.omg.CORBA.Policy[],org.omg.CORBA.SetOverrideType)","returns a new object with the given policies either replacing any existing policies in this object or with the given policies added to the existing ones, depending on the value of the given setoverridetype object."
org.omg.CORBA.PolicyOperations.copy(),returns a copy of the policy object.
org.omg.CORBA.PolicyOperations.destroy(),destroys the policy object.
org.omg.CORBA.PolicyOperations.policy_type(),returns the constant value that corresponds to the type of the policy object.
org.omg.CORBA._PolicyStub.copy(),copies the policy object.
org.omg.CORBA._PolicyStub.destroy(),destroys the policy object.
org.omg.CORBA._PolicyStub.policy_type(),returns the constant value that corresponds to the type of the policy object.
org.omg.CORBA.Any.create_input_stream(),creates an input stream from which this any object's value can be unmarshalled.
org.omg.CORBA.Any.create_output_stream(),creates an output stream into which this any object's value can be marshalled.
org.omg.CORBA.Any.equal(org.omg.CORBA.Any),checks for equality between this any object and the given any object.
org.omg.CORBA.Any.extract_any(),extracts the any object in this any object's value field.
org.omg.CORBA.Any.extract_boolean(),extracts the boolean in this any object's value field.
org.omg.CORBA.Any.extract_char(),extracts the char in this any object's value field.
org.omg.CORBA.Any.extract_double(),extracts the double in this any object's value field.
org.omg.CORBA.Any.extract_fixed(),extracts the java.
org.omg.CORBA.Any.extract_float(),extracts the float in this any object's value field.
org.omg.CORBA.Any.extract_long(),extracts the int in this any object's value field.
org.omg.CORBA.Any.extract_longlong(),extracts the long in this any object's value field.
org.omg.CORBA.Any.extract_Object(),extracts the org.
org.omg.CORBA.Any.extract_octet(),extracts the byte in this any object's value field.
org.omg.CORBA.Any.extract_short(),extracts the short in this any object's value field.
org.omg.CORBA.Any.extract_Streamable(),extracts a streamable from this any object's value field.
org.omg.CORBA.Any.extract_string(),extracts the string object in this any object's value field.
org.omg.CORBA.Any.extract_TypeCode(),extracts the typecode object in this any object's value field.
org.omg.CORBA.Any.extract_ulong(),extracts the int in this any object's value field.
org.omg.CORBA.Any.extract_ulonglong(),extracts the long in this any object's value field.
org.omg.CORBA.Any.extract_ushort(),extracts the short in this any object's value field.
org.omg.CORBA.Any.extract_Value(),extracts the java.
org.omg.CORBA.Any.extract_wchar(),extracts the char in this any object's value field.
org.omg.CORBA.Any.extract_wstring(),extracts the string object in this any object's value field.
org.omg.CORBA.Any.insert_any(org.omg.CORBA.Any),inserts the given any object into this any object's value field.
org.omg.CORBA.Any.insert_boolean(boolean),inserts the given boolean into this any object's value field.
org.omg.CORBA.Any.insert_char(char),inserts the given char into this any object's value field.
org.omg.CORBA.Any.insert_double(double),inserts the given double into this any object's value field.
org.omg.CORBA.Any.insert_fixed(java.math.BigDecimal),throws an org.
"org.omg.CORBA.Any.insert_fixed(java.math.BigDecimal,org.omg.CORBA.TypeCode)",throws an org.
org.omg.CORBA.Any.insert_float(float),inserts the given float into this any object's value field.
org.omg.CORBA.Any.insert_long(int),inserts the given int into this any object's value field.
org.omg.CORBA.Any.insert_longlong(long),inserts the given long into this any object's value field.
org.omg.CORBA.Any.insert_Object(org.omg.CORBA.Object),inserts the given org.
"org.omg.CORBA.Any.insert_Object(org.omg.CORBA.Object,org.omg.CORBA.TypeCode)",inserts the given org.
org.omg.CORBA.Any.insert_octet(byte),inserts the given byte into this any object's value field.
org.omg.CORBA.Any.insert_short(short),inserts the given short into this any object's value field.
org.omg.CORBA.Any.insert_Streamable(org.omg.CORBA.portable.Streamable),inserts the given streamable object into this any object's value field.
org.omg.CORBA.Any.insert_string(java.lang.String),inserts the given string object into this any object's value field.
org.omg.CORBA.Any.insert_TypeCode(org.omg.CORBA.TypeCode),inserts the given typecode object into this any object's value field.
org.omg.CORBA.Any.insert_ulong(int),inserts the given int into this any object's value field.
org.omg.CORBA.Any.insert_ulonglong(long),inserts the given long into this any object's value field.
org.omg.CORBA.Any.insert_ushort(short),inserts the given short into this any object's value field.
org.omg.CORBA.Any.insert_Value(java.io.Serializable),inserts the given java.
"org.omg.CORBA.Any.insert_Value(java.io.Serializable,org.omg.CORBA.TypeCode)",inserts the given java.
org.omg.CORBA.Any.insert_wchar(char),inserts the given char into this any object's value field.
org.omg.CORBA.Any.insert_wstring(java.lang.String),inserts the given string object into this any object's value field.
"org.omg.CORBA.Any.read_value(org.omg.CORBA.portable.InputStream,org.omg.CORBA.TypeCode)",reads off (unmarshals) the value of an any object from the given input stream using the given typecode.
org.omg.CORBA.Any.type(),returns type information for the element contained in this any object.
org.omg.CORBA.Any.type(org.omg.CORBA.TypeCode),sets this any object's type field to the given typecode object and clears its value.
org.omg.CORBA.Any.write_value(org.omg.CORBA.portable.OutputStream),writes out the value of this any object to the given output stream.
org.omg.CORBA.AnyHolder._read(org.omg.CORBA.portable.InputStream),reads from input and initalizes the value in the holder with the unmarshalled data.
org.omg.CORBA.AnyHolder._type(),returns the typecode object corresponding to the value held in this anyholder object.
org.omg.CORBA.AnyHolder._write(org.omg.CORBA.portable.OutputStream),marshals to output the value in this anyholder object.
org.omg.CORBA.BooleanHolder._read(org.omg.CORBA.portable.InputStream),reads unmarshalled data from input and assigns it to this booleanholder object's value field.
org.omg.CORBA.BooleanHolder._type(),retrieves the typecode object that corresponds to the value held in this booleanholder object.
org.omg.CORBA.BooleanHolder._write(org.omg.CORBA.portable.OutputStream),marshals the value in this booleanholder object's value field to the output stream output.
org.omg.CORBA.ByteHolder._read(org.omg.CORBA.portable.InputStream),reads from input and initalizes the value in this byteholder object with the unmarshalled data.
org.omg.CORBA.ByteHolder._type(),returns the typecode corresponding to the value held in this byteholder object.
org.omg.CORBA.ByteHolder._write(org.omg.CORBA.portable.OutputStream),marshals to output the value in this byteholder object.
org.omg.CORBA.CharHolder._read(org.omg.CORBA.portable.InputStream),reads from input and initalizes the value in this charholder object with the unmarshalled data.
org.omg.CORBA.CharHolder._type(),returns the typecode object corresponding to the value held in this charholder object.
org.omg.CORBA.CharHolder._write(org.omg.CORBA.portable.OutputStream),marshals to output the value in this charholder object.
org.omg.CORBA.CompletionStatus.from_int(int),creates a completionstatus object from the given int.
org.omg.CORBA.CompletionStatus.value(),retrieves the value of this completionstatus object.
org.omg.CORBA.Context.context_name(),retrieves the name of this context object.
org.omg.CORBA.Context.create_child(java.lang.String),creates a context object with the given string as its name and with this context object set as its parent.
org.omg.CORBA.Context.delete_values(java.lang.String),deletes from this context object the namedvalue object(s) whose name field matches the given property name.
"org.omg.CORBA.Context.get_values(java.lang.String,int,java.lang.String)",retrieves the namedvalue objects whose name field matches the given name or name pattern.
org.omg.CORBA.Context.parent(),retrieves the parent of this context object.
"org.omg.CORBA.Context.set_one_value(java.lang.String,org.omg.CORBA.Any)",creates a namedvalue object and adds it to this context object.
org.omg.CORBA.Context.set_values(org.omg.CORBA.NVList),i sets one or more property values in this context object.
org.omg.CORBA.ContextList.add(java.lang.String),adds a string object to this contextlist object.
org.omg.CORBA.ContextList.count(),returns the number of string objects in this contextlist object.
org.omg.CORBA.ContextList.item(int),returns the string object at the given index.
org.omg.CORBA.ContextList.remove(int),removes the string object at the given index.
org.omg.CORBA.DefinitionKind.from_int(int),creates a definitionkind instance corresponding to the given code .
org.omg.CORBA.DefinitionKind.value(),returns the int constant identifying the type of an ir object.
org.omg.CORBA.DoubleHolder._read(org.omg.CORBA.portable.InputStream),read a double value from the input stream and store it in the value member.
org.omg.CORBA.DoubleHolder._type(),return the typecode of this holder object.
org.omg.CORBA.DoubleHolder._write(org.omg.CORBA.portable.OutputStream),write the double value stored in this holder to an outputstream.
org.omg.CORBA.Environment.clear(),clears this environment object of its exception.
org.omg.CORBA.Environment.exception(),retrieves the exception in this environment object.
org.omg.CORBA.Environment.exception(java.lang.Exception),inserts the given exception into this environment object.
org.omg.CORBA.ExceptionList.add(org.omg.CORBA.TypeCode),adds a typecode object describing an exception to this exceptionlist object.
org.omg.CORBA.ExceptionList.count(),retrieves the number of typecode objects in this exceptionlist object.
org.omg.CORBA.ExceptionList.item(int),returns the typecode object at the given index.
org.omg.CORBA.ExceptionList.remove(int),removes the typecode object at the given index.
org.omg.CORBA.FixedHolder._read(org.omg.CORBA.portable.InputStream),read a fixed point value from the input stream and store it in the value member.
org.omg.CORBA.FixedHolder._type(),return the typecode of this holder object.
org.omg.CORBA.FixedHolder._write(org.omg.CORBA.portable.OutputStream),write the fixed point value stored in this holder to an outputstream.
org.omg.CORBA.FloatHolder._read(org.omg.CORBA.portable.InputStream),read a float from an input stream and initialize the value member with the float value.
org.omg.CORBA.FloatHolder._type(),return the typecode of this streamable.
org.omg.CORBA.FloatHolder._write(org.omg.CORBA.portable.OutputStream),write the float value into an output stream.
org.omg.CORBA.IntHolder._read(org.omg.CORBA.portable.InputStream),reads unmarshalled data from input and assigns it to the value field in this intholder object.
org.omg.CORBA.IntHolder._type(),retrieves the typecode object that corresponds to the value held in this intholder object's value field.
org.omg.CORBA.IntHolder._write(org.omg.CORBA.portable.OutputStream),marshals the value in this intholder object's value field to the output stream output.
"org.omg.CORBA.LocalObject._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue)",throws an org.
"org.omg.CORBA.LocalObject._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue,org.omg.CORBA.ExceptionList,org.omg.CORBA.ContextList)",throws an org.
org.omg.CORBA.LocalObject._duplicate(),throws an org.
org.omg.CORBA.LocalObject._get_domain_managers(),throws an org.
org.omg.CORBA.LocalObject._get_interface_def(),throws an org.
org.omg.CORBA.LocalObject._get_interface(),throws an org.
org.omg.CORBA.LocalObject._get_policy(int),throws an org.
org.omg.CORBA.LocalObject._hash(int),"returns a hash value that is consistent for the lifetime of the object, using the given number as the maximum."
org.omg.CORBA.LocalObject._invoke(org.omg.CORBA.portable.OutputStream),throws an org.
org.omg.CORBA.LocalObject._is_a(java.lang.String),throws an org.
org.omg.CORBA.LocalObject._is_equivalent(org.omg.CORBA.Object),"determines whether the two object references are equivalent, so far as the orb can easily determine."
org.omg.CORBA.LocalObject._is_local(),throws an org.
org.omg.CORBA.LocalObject._non_existent(),always returns false.
org.omg.CORBA.LocalObject._orb(),throws an org.
org.omg.CORBA.LocalObject._release(),throws an org.
org.omg.CORBA.LocalObject._releaseReply(org.omg.CORBA.portable.InputStream),throws an org.
org.omg.CORBA.LocalObject._request(java.lang.String),throws an org.
"org.omg.CORBA.LocalObject._request(java.lang.String,boolean)",throws an org.
org.omg.CORBA.LocalObject._servant_postinvoke(org.omg.CORBA.portable.ServantObject),throws an org.
"org.omg.CORBA.LocalObject._servant_preinvoke(java.lang.String,java.lang.Class)",throws an org.
"org.omg.CORBA.LocalObject._set_policy_override(org.omg.CORBA.Policy[],org.omg.CORBA.SetOverrideType)",throws an org.
org.omg.CORBA.LocalObject.validate_connection(),throws an org.
org.omg.CORBA.LongHolder._read(org.omg.CORBA.portable.InputStream),reads from input and initalizes the value in the holder with the unmarshalled data.
org.omg.CORBA.LongHolder._type(),returns the typecode object corresponding to the value held in the holder.
org.omg.CORBA.LongHolder._write(org.omg.CORBA.portable.OutputStream),marshals to output the value in the holder.
org.omg.CORBA.NamedValue.flags(),retrieves the argument mode flag for this namedvalue object.
org.omg.CORBA.NamedValue.name(),retrieves the name for this namedvalue object.
org.omg.CORBA.NamedValue.value(),retrieves the value for this namedvalue object.
"org.omg.CORBA.NVList.add_item(java.lang.String,int)","creates a new namedvalue object initialized with the given name and flag, and adds it to the end of this nvlist object."
"org.omg.CORBA.NVList.add_value(java.lang.String,org.omg.CORBA.Any,int)","creates a new namedvalue object initialized with the given name, value, and flag, and adds it to the end of this nvlist object."
org.omg.CORBA.NVList.add(int),creates a new namedvalue object initialized with the given flag and adds it to the end of this nvlist object.
org.omg.CORBA.NVList.count(),returns the number of namedvalue objects that have been added to this nvlist object.
org.omg.CORBA.NVList.item(int),retrieves the namedvalue object at the given index.
org.omg.CORBA.NVList.remove(int),removes the namedvalue object at the given index.
org.omg.CORBA.ObjectHolder._read(org.omg.CORBA.portable.InputStream),reads from input and initalizes the value in this objectholder object with the unmarshalled data.
org.omg.CORBA.ObjectHolder._type(),returns the typecode corresponding to the value held in this objectholder object.
org.omg.CORBA.ObjectHolder._write(org.omg.CORBA.portable.OutputStream),marshals to output the value in this objectholder object.
org.omg.CORBA.ORB.connect(org.omg.CORBA.Object),connects the given servant object (a java object that is an instance of the server implementation class) to the orb.
"org.omg.CORBA.ORB.create_abstract_interface_tc(java.lang.String,java.lang.String)",create a typecode object for an idl abstract interface.
"org.omg.CORBA.ORB.create_alias_tc(java.lang.String,java.lang.String,org.omg.CORBA.TypeCode)",creates a typecode object representing an idl alias (typedef).
org.omg.CORBA.ORB.create_any(),creates an idl any object initialized to contain a typecode object whose kind field is set to tckind.
"org.omg.CORBA.ORB.create_array_tc(int,org.omg.CORBA.TypeCode)",creates a typecode object representing an idl array.
org.omg.CORBA.ORB.create_context_list(),creates an empty contextlist object.
"org.omg.CORBA.ORB.create_enum_tc(java.lang.String,java.lang.String,java.lang.String[])",creates a typecode object representing an idl enum.
org.omg.CORBA.ORB.create_environment(),creates an environment object.
org.omg.CORBA.ORB.create_exception_list(),creates an empty exceptionlist object.
"org.omg.CORBA.ORB.create_exception_tc(java.lang.String,java.lang.String,org.omg.CORBA.StructMember[])",creates a typecode object representing an idl exception.
"org.omg.CORBA.ORB.create_fixed_tc(short,short)",create a typecode object for an idl fixed type.
"org.omg.CORBA.ORB.create_interface_tc(java.lang.String,java.lang.String)",creates a typecode object representing an idl interface.
org.omg.CORBA.ORB.create_list(int),allocates an nvlist with (probably) enough space for the specified number of namedvalue objects.
"org.omg.CORBA.ORB.create_named_value(java.lang.String,org.omg.CORBA.Any,int)","creates a namedvalue object using the given name, value, and argument mode flags."
"org.omg.CORBA.ORB.create_native_tc(java.lang.String,java.lang.String)",create a typecode object for an idl native type.
org.omg.CORBA.ORB.create_operation_list(org.omg.CORBA.Object),creates an nvlist initialized with argument descriptions for the operation described in the given operationdef object.
org.omg.CORBA.ORB.create_output_stream(),creates a new org.
"org.omg.CORBA.ORB.create_policy(int,org.omg.CORBA.Any)",can be invoked to create new instances of policy objects of a specific type with specified initial state.
org.omg.CORBA.ORB.create_recursive_tc(java.lang.String),create a recursive typecode object which serves as a placeholder for a concrete typecode during the process of creating typecodes which contain recursion.
"org.omg.CORBA.ORB.create_sequence_tc(int,org.omg.CORBA.TypeCode)",creates a typecode object representing an idl sequence.
org.omg.CORBA.ORB.create_string_tc(int),creates a typecode object representing a bounded idl string.
"org.omg.CORBA.ORB.create_struct_tc(java.lang.String,java.lang.String,org.omg.CORBA.StructMember[])",creates a typecode object representing an idl struct.
"org.omg.CORBA.ORB.create_union_tc(java.lang.String,java.lang.String,org.omg.CORBA.TypeCode,org.omg.CORBA.UnionMember[])",creates a typecode object representing an idl union.
"org.omg.CORBA.ORB.create_value_box_tc(java.lang.String,java.lang.String,org.omg.CORBA.TypeCode)",creates a typecode object for an idl value box.
"org.omg.CORBA.ORB.create_value_tc(java.lang.String,java.lang.String,short,org.omg.CORBA.TypeCode,org.omg.CORBA.ValueMember[])",create a typecode object for an idl value type.
org.omg.CORBA.ORB.create_wstring_tc(int),creates a typecode object representing a bounded idl wstring (wide string).
org.omg.CORBA.ORB.destroy(),destroys the orb so that its resources can be reclaimed.
org.omg.CORBA.ORB.disconnect(org.omg.CORBA.Object),disconnects the given servant object from the orb.
org.omg.CORBA.ORB.get_default_context(),gets the default context object.
org.omg.CORBA.ORB.get_next_response(),gets the next request instance for which a response has been received.
org.omg.CORBA.ORB.get_primitive_tc(org.omg.CORBA.TCKind),retrieves the typecode object that represents the given primitive idl type.
"org.omg.CORBA.ORB.get_service_information(short,org.omg.CORBA.ServiceInformationHolder)",used to obtain information about corba facilities and services that are supported by this orb.
org.omg.CORBA.ORB.init(),returns the orb singleton object.
"org.omg.CORBA.ORB.init(java.lang.String[],java.util.Properties)",creates a new orb instance for a standalone application.
"org.omg.CORBA.ORB.init(java.applet.Applet,java.util.Properties)",creates a new orb instance for an applet.
org.omg.CORBA.ORB.list_initial_services(),"returns a list of the initially available corba object references, such as ""nameservice"" and ""interfacerepository""."
org.omg.CORBA.ORB.object_to_string(org.omg.CORBA.Object),converts the given corba object reference to a string.
org.omg.CORBA.ORB.perform_work(),performs an implementation-dependent unit of work if called by the main thread.
org.omg.CORBA.ORB.poll_next_response(),finds out if any of the deferred (asynchronous) invocations have a response yet.
org.omg.CORBA.ORB.resolve_initial_references(java.lang.String),resolves a specific object reference from the set of available initial service names.
org.omg.CORBA.ORB.run(),"this operation blocks the current thread until the orb has completed the shutdown process, initiated when some thread calls shutdown."
org.omg.CORBA.ORB.send_multiple_requests_deferred(org.omg.CORBA.Request[]),sends multiple dynamic (dii) requests asynchronously.
org.omg.CORBA.ORB.send_multiple_requests_oneway(org.omg.CORBA.Request[]),sends multiple dynamic (dii) requests asynchronously without expecting any responses.
"org.omg.CORBA.ORB.set_parameters(java.lang.String[],java.util.Properties)",allows the orb implementation to be initialized with the given parameters and properties.
"org.omg.CORBA.ORB.set_parameters(java.applet.Applet,java.util.Properties)",allows the orb implementation to be initialized with the given applet and parameters.
org.omg.CORBA.ORB.shutdown(boolean),"instructs the orb to shut down, which causes all object adapters to shut down, in preparation for destruction."
org.omg.CORBA.ORB.string_to_object(java.lang.String),converts a string produced by the method object_to_string back to a corba object reference.
org.omg.CORBA.ORB.work_pending(),"returns true if the orb needs the main thread to perform some work, and false if the orb does not need the main thread."
org.omg.CORBA.Request.add_in_arg(),creates an input argument and adds it to this request object.
org.omg.CORBA.Request.add_inout_arg(),adds an input/output argument to this request object.
org.omg.CORBA.Request.add_named_in_arg(java.lang.String),creates an input argument with the given name and adds it to this request object.
org.omg.CORBA.Request.add_named_inout_arg(java.lang.String),adds an input/output argument with the given name to this request object.
org.omg.CORBA.Request.add_named_out_arg(java.lang.String),adds an output argument with the given name to this request object.
org.omg.CORBA.Request.add_out_arg(),adds an output argument to this request object.
org.omg.CORBA.Request.arguments(),retrieves the nvlist object containing the arguments to the method being invoked.
org.omg.CORBA.Request.contexts(),retrieves the contextlist object for this request.
org.omg.CORBA.Request.ctx(),retrieves the context object for this request.
org.omg.CORBA.Request.ctx(org.omg.CORBA.Context),sets this request's context object to the one given.
org.omg.CORBA.Request.env(),retrieves the environment object for this request.
org.omg.CORBA.Request.exceptions(),retrieves the exceptionlist object for this request.
org.omg.CORBA.Request.get_response(),allows the user to access the response for the invocation triggered earlier with the send_deferred method.
org.omg.CORBA.Request.invoke(),makes a synchronous invocation using the information in the request object.
org.omg.CORBA.Request.operation(),retrieves the name of the method to be invoked.
org.omg.CORBA.Request.poll_response(),allows the user to determine whether a response has been received for the invocation triggered earlier with the send_deferred method.
org.omg.CORBA.Request.result(),retrieves the namedvalue object containing the return value for the method.
org.omg.CORBA.Request.return_value(),returns the any object that contains the value for the result of the method.
org.omg.CORBA.Request.send_deferred(),makes an asynchronous invocation on the request.
org.omg.CORBA.Request.send_oneway(),makes a oneway invocation on the request.
org.omg.CORBA.Request.set_return_type(org.omg.CORBA.TypeCode),sets the typecode for the return value of the method.
org.omg.CORBA.Request.target(),retrieves the the target object reference.
org.omg.CORBA.ServerRequest.arguments(org.omg.CORBA.NVList),"specifies method parameter types and retrieves ""in"" and ""inout"" argument values."
org.omg.CORBA.ServerRequest.ctx(),returns the context information specified in idl for the operation when the operation is not an attribute access and the operation's idl definition contains a context expression; otherwise it returns a nil context reference.
org.omg.CORBA.ServerRequest.operation(),throws an org.
org.omg.CORBA.ServerRequest.set_exception(org.omg.CORBA.Any),throws an org.
org.omg.CORBA.ServerRequest.set_result(org.omg.CORBA.Any),throws an org.
org.omg.CORBA.ServiceInformationHolder._read(org.omg.CORBA.portable.InputStream),reads unmarshalled data from the input stream in and assigns it to the value field in this serviceinformationholder object.
org.omg.CORBA.ServiceInformationHolder._type(),retrieves the typecode object that corresponds to the value held in this serviceinformationholder object's value field.
org.omg.CORBA.ServiceInformationHolder._write(org.omg.CORBA.portable.OutputStream),marshals the value in this serviceinformationholder object's value field to the output stream out.
org.omg.CORBA.SetOverrideType.from_int(int),converts the given int to the corresponding setoverridetype instance.
org.omg.CORBA.SetOverrideType.value(),retrieves the value of this setoverridetype instance.
org.omg.CORBA.ShortHolder._read(org.omg.CORBA.portable.InputStream),reads from input and initalizes the value in this shortholder object with the unmarshalled data.
org.omg.CORBA.ShortHolder._type(),returns the typecode corresponding to the value held in this shortholder object.
org.omg.CORBA.ShortHolder._write(org.omg.CORBA.portable.OutputStream),marshals to output the value in this shortholder object.
org.omg.CORBA.StringHolder._read(org.omg.CORBA.portable.InputStream),reads the unmarshalled data from input and assigns it to the value field of this stringholder object.
org.omg.CORBA.StringHolder._type(),retrieves the typecode object that corresponds to the value held in this stringholder object.
org.omg.CORBA.StringHolder._write(org.omg.CORBA.portable.OutputStream),marshals the value held by this stringholder object to the output stream output.
org.omg.CORBA.TCKind.from_int(int),converts the given int to the corresponding tckind instance.
org.omg.CORBA.TCKind.value(),retrieves the value of this tckind instance.
org.omg.CORBA.TypeCode.concrete_base_type(),returns the typecode object that describes the concrete base type of the value type that this typecode object describes.
org.omg.CORBA.TypeCode.content_type(),returns the typecode object representing the idl type for the members of the object described by this typecode object.
org.omg.CORBA.TypeCode.default_index(),"returns the index of the default member, or -1 if there is no default member."
org.omg.CORBA.TypeCode.discriminator_type(),returns a typecode object describing all non-default member labels.
org.omg.CORBA.TypeCode.equal(org.omg.CORBA.TypeCode),"compares this typecode object with the given one, testing for equality."
org.omg.CORBA.TypeCode.equivalent(org.omg.CORBA.TypeCode),tests to see if the given typecode object is equivalent to this typecode object.
org.omg.CORBA.TypeCode.fixed_digits(),returns the number of digits in the fixed type described by this typecode object.
org.omg.CORBA.TypeCode.fixed_scale(),returns the scale of the fixed type described by this typecode object.
org.omg.CORBA.TypeCode.get_compact_typecode(),"strips out all optional name and member name fields, but leaves all alias typecodes intact."
org.omg.CORBA.TypeCode.id(),retrieves the repositoryid globally identifying the type of this typecode object.
org.omg.CORBA.TypeCode.kind(),retrieves the kind of this typecode object.
org.omg.CORBA.TypeCode.length(),returns the number of elements in the type described by this typecode object.
org.omg.CORBA.TypeCode.member_count(),retrieves the number of members in the type described by this typecode object.
org.omg.CORBA.TypeCode.member_label(int),retrieves the label of the union member identified by the given index.
org.omg.CORBA.TypeCode.member_name(int),retrieves the simple name of the member identified by the given index.
org.omg.CORBA.TypeCode.member_type(int),retrieves the typecode object describing the type of the member identified by the given index.
org.omg.CORBA.TypeCode.member_visibility(int),returns the constant that indicates the visibility of the member at the given index.
org.omg.CORBA.TypeCode.name(),retrieves the simple name identifying this typecode object within its enclosing scope.
org.omg.CORBA.TypeCode.type_modifier(),returns a constant indicating the modifier of the value type that this typecode object describes.
org.omg.CORBA.TypeCodeHolder._read(org.omg.CORBA.portable.InputStream),reads from input and initalizes the value in this typecodeholder object with the unmarshalled data.
org.omg.CORBA.TypeCodeHolder._type(),returns the typecode corresponding to the value held in this typecodeholder object.
org.omg.CORBA.TypeCodeHolder._write(org.omg.CORBA.portable.OutputStream),marshals to output the value in this typecodeholder object.
org.omg.CORBA.ValueBaseHolder._read(org.omg.CORBA.portable.InputStream),reads from input and initalizes the value in the holder with the unmarshalled data.
org.omg.CORBA.ValueBaseHolder._type(),returns the typecode object corresponding to the value held in the holder.
org.omg.CORBA.ValueBaseHolder._write(org.omg.CORBA.portable.OutputStream),marshals to output the value in the holder.
org.omg.CORBA.SystemException.toString(),converts this exception to a representative string.
org.omg.CORBA_2_3.portable.Delegate.get_codebase(org.omg.CORBA.Object),returns the codebase for object reference provided.
org.omg.CORBA_2_3.portable.InputStream.read_abstract_interface(),unmarshal the value object or a suitable stub object.
org.omg.CORBA_2_3.portable.InputStream.read_abstract_interface(java.lang.Class),unmarshal the class object or the stub class corresponding to the passed type.
org.omg.CORBA_2_3.portable.InputStream.read_value(),unmarshalls a value type from the input stream.
org.omg.CORBA_2_3.portable.InputStream.read_value(java.lang.Class),unmarshalls a value type from the input stream.
org.omg.CORBA_2_3.portable.InputStream.read_value(org.omg.CORBA.portable.BoxedValueHelper),unmarshalls a value type from the input stream.
org.omg.CORBA_2_3.portable.InputStream.read_value(java.lang.String),unmarshalls a value type from the input stream.
org.omg.CORBA_2_3.portable.InputStream.read_value(java.io.Serializable),unmarshalls a value type from the input stream.
org.omg.CORBA_2_3.portable.ObjectImpl._get_codebase(),returns the codebase for this object reference.
org.omg.CORBA_2_3.portable.OutputStream.write_abstract_interface(java.lang.Object),marshals a value object or a stub object.
org.omg.CORBA_2_3.portable.OutputStream.write_value(java.io.Serializable),marshals a value type to the output stream.
"org.omg.CORBA_2_3.portable.OutputStream.write_value(java.io.Serializable,java.lang.Class)",marshals a value type to the output stream.
"org.omg.CORBA_2_3.portable.OutputStream.write_value(java.io.Serializable,java.lang.String)",marshals a value type to the output stream.
"org.omg.CORBA_2_3.portable.OutputStream.write_value(java.io.Serializable,org.omg.CORBA.portable.BoxedValueHelper)",marshals a value type to the output stream.
"org.omg.CORBA.portable.InvokeHandler._invoke(java.lang.String,org.omg.CORBA.portable.InputStream,org.omg.CORBA.portable.ResponseHandler)",invoked by the orb to dispatch a request to the servant.
org.omg.CORBA.portable.ResponseHandler.createExceptionReply(),called by the servant during a method invocation.
org.omg.CORBA.portable.ResponseHandler.createReply(),called by the servant during a method invocation.
org.omg.CORBA.portable.Streamable._read(org.omg.CORBA.portable.InputStream),reads data from istream and initalizes the value field of the holder with the unmarshalled data.
org.omg.CORBA.portable.Streamable._type(),retrieves the typecode object corresponding to the value in the value field of the holder.
org.omg.CORBA.portable.Streamable._write(org.omg.CORBA.portable.OutputStream),marshals to ostream the value in the value field of the holder.
org.omg.CORBA.portable.ValueBase._truncatable_ids(),provides truncatable repository ids.
org.omg.CORBA.portable.ValueFactory.read_value(org.omg.CORBA_2_3.portable.InputStream),is called by the orb runtime while in the process of unmarshaling a value type.
org.omg.CORBA.portable.ValueInputStream.end_value(),the end_value method reads the end tag for the nested custom valuetype (after skipping any data that precedes the end tag) and decrements the valuetype nesting depth.
org.omg.CORBA.portable.ValueInputStream.start_value(),the start_value method reads a valuetype header for a nested custom valuetype and increments the valuetype nesting depth.
org.omg.CORBA.portable.ValueOutputStream.end_value(),"the end_value method ends any currently open chunk, writes the end tag for the nested custom valuetype, and decrements the valuetype nesting depth."
org.omg.CORBA.portable.ValueOutputStream.start_value(java.lang.String),"the start_value method ends any currently open chunk, writes a valuetype header for a nested custom valuetype (with a null codebase and the specified repository id), and increments the valuetype nesting depth."
"org.omg.CORBA.portable.Delegate.create_request(org.omg.CORBA.Object,org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue)",creates a request instance for use in the dynamic invocation interface.
"org.omg.CORBA.portable.Delegate.create_request(org.omg.CORBA.Object,org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue,org.omg.CORBA.ExceptionList,org.omg.CORBA.ContextList)",creates a request instance for use in the dynamic invocation interface.
org.omg.CORBA.portable.Delegate.duplicate(org.omg.CORBA.Object),returns a duplicate of the object reference provided.
"org.omg.CORBA.portable.Delegate.equals(org.omg.CORBA.Object,java.lang.Object)",provides the implementation to override the equals(java.
org.omg.CORBA.portable.Delegate.get_domain_managers(org.omg.CORBA.Object),retrieves the domainmanagers of this object.
org.omg.CORBA.portable.Delegate.get_interface_def(org.omg.CORBA.Object),return an interfacedef for the object reference provided.
"org.omg.CORBA.portable.Delegate.get_policy(org.omg.CORBA.Object,int)",returns the policy object of the specified type which applies to this object.
"org.omg.CORBA.portable.Delegate.hash(org.omg.CORBA.Object,int)",returns an orb-internal identifier (hashcode) for this object reference.
org.omg.CORBA.portable.Delegate.hashCode(org.omg.CORBA.Object),provides the implementation to override the hashcode() method of the delegating corba object.
"org.omg.CORBA.portable.Delegate.invoke(org.omg.CORBA.Object,org.omg.CORBA.portable.OutputStream)",invoke is called by a stub to invoke an operation.
"org.omg.CORBA.portable.Delegate.is_a(org.omg.CORBA.Object,java.lang.String)",checks if the object reference is an instance of the given interface.
"org.omg.CORBA.portable.Delegate.is_equivalent(org.omg.CORBA.Object,org.omg.CORBA.Object)",determines if the two object references are equivalent.
org.omg.CORBA.portable.Delegate.is_local(org.omg.CORBA.Object),returns true if this object is implemented by a local servant.
org.omg.CORBA.portable.Delegate.non_existent(org.omg.CORBA.Object),determines whether the server object for the object reference has been destroyed.
org.omg.CORBA.portable.Delegate.orb(org.omg.CORBA.Object),provides a reference to the orb associated with its parameter.
org.omg.CORBA.portable.Delegate.release(org.omg.CORBA.Object),releases resources associated with the object reference provided.
"org.omg.CORBA.portable.Delegate.releaseReply(org.omg.CORBA.Object,org.omg.CORBA.portable.InputStream)",releasereply may optionally be called by a stub to release a reply stream back to the orb when the unmarshaling has completed.
"org.omg.CORBA.portable.Delegate.request(org.omg.CORBA.Object,java.lang.String)",creates a request instance for use in the dynamic invocation interface.
"org.omg.CORBA.portable.Delegate.request(org.omg.CORBA.Object,java.lang.String,boolean)",request is called by a stub to obtain an outputstream for marshaling arguments.
"org.omg.CORBA.portable.Delegate.servant_postinvoke(org.omg.CORBA.Object,org.omg.CORBA.portable.ServantObject)",servant_postinvoke() is invoked by the local stub after the operation has been invoked on the local servant.
"org.omg.CORBA.portable.Delegate.servant_preinvoke(org.omg.CORBA.Object,java.lang.String,java.lang.Class)",returns a java reference to the servant which should be used for this request.
"org.omg.CORBA.portable.Delegate.set_policy_override(org.omg.CORBA.Object,org.omg.CORBA.Policy[],org.omg.CORBA.SetOverrideType)",associates the policies passed in with a newly created object reference that it returns.
org.omg.CORBA.portable.Delegate.toString(org.omg.CORBA.Object),provides the implementation to override the tostring() method of the delegating corba object.
org.omg.CORBA.portable.InputStream.orb(),returns the orb that created this inputstream.
org.omg.CORBA.portable.InputStream.read_any(),reads an any from this input stream.
"org.omg.CORBA.portable.InputStream.read_boolean_array(boolean[],int,int)",reads an array of booleans from this input stream.
org.omg.CORBA.portable.InputStream.read_boolean(),reads a boolean value from this input stream.
"org.omg.CORBA.portable.InputStream.read_char_array(char[],int,int)",reads an array of chars from this input stream.
org.omg.CORBA.portable.InputStream.read_char(),reads a char value from this input stream.
org.omg.CORBA.portable.InputStream.read_Context(),reads a corba context from the stream.
"org.omg.CORBA.portable.InputStream.read_double_array(double[],int,int)",reads an array of doubles from this input stream.
org.omg.CORBA.portable.InputStream.read_double(),reads a double value from this input stream.
org.omg.CORBA.portable.InputStream.read_fixed(),reads a bigdecimal number.
"org.omg.CORBA.portable.InputStream.read_float_array(float[],int,int)",reads an array of floats from this input stream.
org.omg.CORBA.portable.InputStream.read_float(),reads a float value from this input stream.
"org.omg.CORBA.portable.InputStream.read_long_array(int[],int,int)","reads an array of corba longs (that is, java ints) from this input stream."
org.omg.CORBA.portable.InputStream.read_long(),"reads a corba long (that is, java int) value from this input stream."
"org.omg.CORBA.portable.InputStream.read_longlong_array(long[],int,int)","reads an array of corba longlongs (that is, java longs) from this input stream."
org.omg.CORBA.portable.InputStream.read_longlong(),"reads a corba longlong (that is, java long) value from this input stream."
org.omg.CORBA.portable.InputStream.read_Object(),reads a corba object from this input stream.
org.omg.CORBA.portable.InputStream.read_Object(java.lang.Class),"unmarshals an object and returns a corba object, which is an instance of the class passed as its argument."
"org.omg.CORBA.portable.InputStream.read_octet_array(byte[],int,int)","reads an array of octets (that is, bytes) from this input stream."
org.omg.CORBA.portable.InputStream.read_octet(),"reads an octet (that is, a byte) value from this input stream."
"org.omg.CORBA.portable.InputStream.read_short_array(short[],int,int)",reads an array of shorts from this input stream.
org.omg.CORBA.portable.InputStream.read_short(),reads a short value from this input stream.
org.omg.CORBA.portable.InputStream.read_string(),reads a string value from this input stream.
org.omg.CORBA.portable.InputStream.read_TypeCode(),reads a typecode from this input stream.
"org.omg.CORBA.portable.InputStream.read_ulong_array(int[],int,int)","reads an array of unsigned corba longs (that is, java ints) from this input stream."
org.omg.CORBA.portable.InputStream.read_ulong(),"reads an unsigned corba long (that is, java int) value from this input stream."
"org.omg.CORBA.portable.InputStream.read_ulonglong_array(long[],int,int)","reads an array of unsigned corba longlongs (that is, java longs) from this input stream."
org.omg.CORBA.portable.InputStream.read_ulonglong(),"reads a corba unsigned longlong (that is, java long) value from this input stream."
"org.omg.CORBA.portable.InputStream.read_ushort_array(short[],int,int)",reads an array of unsigned shorts from this input stream.
org.omg.CORBA.portable.InputStream.read_ushort(),reads a unsigned short value from this input stream.
"org.omg.CORBA.portable.InputStream.read_wchar_array(char[],int,int)",reads an array of wide chars from this input stream.
org.omg.CORBA.portable.InputStream.read_wchar(),reads a wide char value from this input stream.
org.omg.CORBA.portable.InputStream.read_wstring(),reads a wide string value from this input stream.
"org.omg.CORBA.portable.ObjectImpl._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue)","creates a request object that contains the given context, method, argument list, and container for the result."
"org.omg.CORBA.portable.ObjectImpl._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue,org.omg.CORBA.ExceptionList,org.omg.CORBA.ContextList)","creates a request object that contains the given context, method, argument list, container for the result, exceptions, and list of property names to be used in resolving the context strings."
org.omg.CORBA.portable.ObjectImpl._duplicate(),returns a duplicate of this objectimpl object.
org.omg.CORBA.portable.ObjectImpl._get_delegate(),retrieves the reference to the vendor-specific delegate object to which this objectimpl object delegates all methods invoked on it.
org.omg.CORBA.portable.ObjectImpl._get_domain_managers(),retrieves a list of the domain managers for this objectimpl object.
org.omg.CORBA.portable.ObjectImpl._get_interface_def(),retrieves the interface definition for this objectimpl object.
org.omg.CORBA.portable.ObjectImpl._get_policy(int),retrieves the policy object for this objectimpl object that has the given policy type.
org.omg.CORBA.portable.ObjectImpl._hash(int),retrieves the hash code that serves as an orb-internal identifier for this objectimpl object.
org.omg.CORBA.portable.ObjectImpl._ids(),retrieves a string array containing the repository identifiers supported by this objectimpl object.
org.omg.CORBA.portable.ObjectImpl._invoke(org.omg.CORBA.portable.OutputStream),invokes an operation and returns an inputstream object for reading the response.
org.omg.CORBA.portable.ObjectImpl._is_a(java.lang.String),checks whether the object identified by the given repository identifier is an objectimpl object.
org.omg.CORBA.portable.ObjectImpl._is_equivalent(org.omg.CORBA.Object),checks whether the the given objectimpl object is equivalent to this objectimpl object.
org.omg.CORBA.portable.ObjectImpl._is_local(),checks whether this objectimpl object is implemented by a local servant.
org.omg.CORBA.portable.ObjectImpl._non_existent(),checks whether the server object for this objectimpl object has been destroyed.
org.omg.CORBA.portable.ObjectImpl._orb(),returns a reference to the orb associated with this object and its delegate.
org.omg.CORBA.portable.ObjectImpl._release(),releases the resources associated with this objectimpl object.
org.omg.CORBA.portable.ObjectImpl._releaseReply(org.omg.CORBA.portable.InputStream),releases the given reply stream back to the orb when unmarshalling has completed after a call to the method _invoke.
org.omg.CORBA.portable.ObjectImpl._request(java.lang.String),creates a request object containing the given method that can be used with the dynamic invocation interface.
"org.omg.CORBA.portable.ObjectImpl._request(java.lang.String,boolean)",returns an outputstream object to use for marshalling the arguments of the given method.
org.omg.CORBA.portable.ObjectImpl._servant_postinvoke(org.omg.CORBA.portable.ServantObject),is called by the local stub after it has invoked an operation on the local servant that was previously retrieved from a call to the method _servant_preinvoke.
"org.omg.CORBA.portable.ObjectImpl._servant_preinvoke(java.lang.String,java.lang.Class)",returns a java reference to the local servant that should be used for sending a request for the method specified.
org.omg.CORBA.portable.ObjectImpl._set_delegate(org.omg.CORBA.portable.Delegate),sets the delegate for this objectimpl instance to the given delegate object.
"org.omg.CORBA.portable.ObjectImpl._set_policy_override(org.omg.CORBA.Policy[],org.omg.CORBA.SetOverrideType)",sets this objectimpl object's override type for the given policies to the given instance of setoverridetype.
org.omg.CORBA.portable.ObjectImpl.equals(java.lang.Object),compares this objectimpl object with the given one for equality.
org.omg.CORBA.portable.ObjectImpl.hashCode(),returns the hash code for this objectimpl object.
org.omg.CORBA.portable.ObjectImpl.toString(),returns a string object that represents this objectimpl object.
org.omg.CORBA.portable.OutputStream.create_input_stream(),returns an input stream with the same buffer.
org.omg.CORBA.portable.OutputStream.orb(),returns the orb that created this outputstream.
org.omg.CORBA.portable.OutputStream.write_any(org.omg.CORBA.Any),writes an any on this output stream.
"org.omg.CORBA.portable.OutputStream.write_boolean_array(boolean[],int,int)",writes an array of booleans on this output stream.
org.omg.CORBA.portable.OutputStream.write_boolean(boolean),writes a boolean value to this stream.
"org.omg.CORBA.portable.OutputStream.write_char_array(char[],int,int)",writes an array of chars on this output stream.
org.omg.CORBA.portable.OutputStream.write_char(char),writes a char value to this stream.
"org.omg.CORBA.portable.OutputStream.write_Context(org.omg.CORBA.Context,org.omg.CORBA.ContextList)",writes a corba context on this stream.
"org.omg.CORBA.portable.OutputStream.write_double_array(double[],int,int)",writes an array of doubles on this output stream.
org.omg.CORBA.portable.OutputStream.write_double(double),writes a double value to this stream.
org.omg.CORBA.portable.OutputStream.write_fixed(java.math.BigDecimal),writes a bigdecimal number.
"org.omg.CORBA.portable.OutputStream.write_float_array(float[],int,int)",writes an array of floats on this output stream.
org.omg.CORBA.portable.OutputStream.write_float(float),writes a float value to this stream.
"org.omg.CORBA.portable.OutputStream.write_long_array(int[],int,int)",writes an array of corba longs (i.
org.omg.CORBA.portable.OutputStream.write_long(int),writes a corba long (i.
"org.omg.CORBA.portable.OutputStream.write_longlong_array(long[],int,int)",writes an array of corba longlongs (i.
org.omg.CORBA.portable.OutputStream.write_longlong(long),writes a corba longlong (i.
org.omg.CORBA.portable.OutputStream.write_Object(org.omg.CORBA.Object),writes a corba object on this output stream.
"org.omg.CORBA.portable.OutputStream.write_octet_array(byte[],int,int)",writes an array of corba octets (bytes) on this output stream.
org.omg.CORBA.portable.OutputStream.write_octet(byte),writes a corba octet (i.
"org.omg.CORBA.portable.OutputStream.write_short_array(short[],int,int)",writes an array of shorts on this output stream.
org.omg.CORBA.portable.OutputStream.write_short(short),writes a short value to this stream.
org.omg.CORBA.portable.OutputStream.write_string(java.lang.String),writes a string value to this stream.
org.omg.CORBA.portable.OutputStream.write_TypeCode(org.omg.CORBA.TypeCode),writes a typecode on this output stream.
"org.omg.CORBA.portable.OutputStream.write_ulong_array(int[],int,int)",writes an array of unsigned corba longs (i.
org.omg.CORBA.portable.OutputStream.write_ulong(int),writes an unsigned corba long (i.
"org.omg.CORBA.portable.OutputStream.write_ulonglong_array(long[],int,int)",writes an array of unsigned corba longlongs (i.
org.omg.CORBA.portable.OutputStream.write_ulonglong(long),writes an unsigned corba longlong (i.
"org.omg.CORBA.portable.OutputStream.write_ushort_array(short[],int,int)",writes an array of unsigned shorts on this output stream.
org.omg.CORBA.portable.OutputStream.write_ushort(short),writes an unsigned short value to this stream.
"org.omg.CORBA.portable.OutputStream.write_wchar_array(char[],int,int)",writes an array of wide chars on this output stream.
org.omg.CORBA.portable.OutputStream.write_wchar(char),writes a wide char value to this stream.
org.omg.CORBA.portable.OutputStream.write_wstring(java.lang.String),writes a wide string value to this stream.
org.omg.CORBA.portable.OutputStream.write(int),writes an integer (length of arrays) onto this stream.
org.omg.CORBA.portable.ApplicationException.getId(),returns the corba repository id of the exception without removing it from the exceptions input stream.
org.omg.CORBA.portable.ApplicationException.getInputStream(),returns the input stream from which the exception data can be read as its parameters.
org.omg.CosNaming.BindingIteratorOperations.destroy(),this operation destroys the iterator.
"org.omg.CosNaming.BindingIteratorOperations.next_n(int,org.omg.CosNaming.BindingListHolder)",this operation returns at most the requested number of bindings.
org.omg.CosNaming.BindingIteratorOperations.next_one(org.omg.CosNaming.BindingHolder),this operation returns the next binding.
org.omg.CosNaming.NamingContextExtOperations.resolve_str(java.lang.String),this operation resolves the stringified name into the object reference.
org.omg.CosNaming.NamingContextExtOperations.to_name(java.lang.String),this operation converts a stringified name into an equivalent array of name components.
org.omg.CosNaming.NamingContextExtOperations.to_string(org.omg.CosNaming.NameComponent[]),this operation creates a stringified name from the array of name components.
"org.omg.CosNaming.NamingContextExtOperations.to_url(java.lang.String,java.lang.String)","this operation creates a url based ""iiopname://"" format name from the stringified name of the object."
"org.omg.CosNaming.NamingContextOperations.bind_context(org.omg.CosNaming.NameComponent[],org.omg.CosNaming.NamingContext)",names an object that is a naming context.
org.omg.CosNaming.NamingContextOperations.bind_new_context(org.omg.CosNaming.NameComponent[]),this operation creates a new context and binds it to the name supplied as an argument.
"org.omg.CosNaming.NamingContextOperations.bind(org.omg.CosNaming.NameComponent[],org.omg.CORBA.Object)",creates a binding of a name and an object in the naming context.
org.omg.CosNaming.NamingContextOperations.destroy(),the destroy operation deletes a naming context.
"org.omg.CosNaming.NamingContextOperations.list(int,org.omg.CosNaming.BindingListHolder,org.omg.CosNaming.BindingIteratorHolder)",the list operation allows a client to iterate through a set of bindings in a naming context.
org.omg.CosNaming.NamingContextOperations.new_context(),this operation returns a naming context implemented by the same naming server as the context on which the operation was invoked.
"org.omg.CosNaming.NamingContextOperations.rebind_context(org.omg.CosNaming.NameComponent[],org.omg.CosNaming.NamingContext)",creates a binding of a name and a naming context in the naming context even if the name is already bound in the context.
"org.omg.CosNaming.NamingContextOperations.rebind(org.omg.CosNaming.NameComponent[],org.omg.CORBA.Object)",creates a binding of a name and an object in the naming context even if the name is already bound in the context.
org.omg.CosNaming.NamingContextOperations.resolve(org.omg.CosNaming.NameComponent[]),the resolve operation is the process of retrieving an object bound to a name in a given context.
org.omg.CosNaming.NamingContextOperations.unbind(org.omg.CosNaming.NameComponent[]),the unbind operation removes a name binding from a context.
org.omg.CosNaming._BindingIteratorStub.destroy(),this operation destroys the iterator.
"org.omg.CosNaming._BindingIteratorStub.next_n(int,org.omg.CosNaming.BindingListHolder)",this operation returns at most the requested number of bindings.
org.omg.CosNaming._BindingIteratorStub.next_one(org.omg.CosNaming.BindingHolder),this operation returns the next binding.
"org.omg.CosNaming._NamingContextExtStub.bind_context(org.omg.CosNaming.NameComponent[],org.omg.CosNaming.NamingContext)",names an object that is a naming context.
org.omg.CosNaming._NamingContextExtStub.bind_new_context(org.omg.CosNaming.NameComponent[]),this operation creates a new context and binds it to the name supplied as an argument.
"org.omg.CosNaming._NamingContextExtStub.bind(org.omg.CosNaming.NameComponent[],org.omg.CORBA.Object)",creates a binding of a name and an object in the naming context.
org.omg.CosNaming._NamingContextExtStub.destroy(),the destroy operation deletes a naming context.
"org.omg.CosNaming._NamingContextExtStub.list(int,org.omg.CosNaming.BindingListHolder,org.omg.CosNaming.BindingIteratorHolder)",the list operation allows a client to iterate through a set of bindings in a naming context.
org.omg.CosNaming._NamingContextExtStub.new_context(),this operation returns a naming context implemented by the same naming server as the context on which the operation was invoked.
"org.omg.CosNaming._NamingContextExtStub.rebind_context(org.omg.CosNaming.NameComponent[],org.omg.CosNaming.NamingContext)",creates a binding of a name and a naming context in the naming context even if the name is already bound in the context.
"org.omg.CosNaming._NamingContextExtStub.rebind(org.omg.CosNaming.NameComponent[],org.omg.CORBA.Object)",creates a binding of a name and an object in the naming context even if the name is already bound in the context.
org.omg.CosNaming._NamingContextExtStub.resolve_str(java.lang.String),this operation resolves the stringified name into the object reference.
org.omg.CosNaming._NamingContextExtStub.resolve(org.omg.CosNaming.NameComponent[]),the resolve operation is the process of retrieving an object bound to a name in a given context.
org.omg.CosNaming._NamingContextExtStub.to_name(java.lang.String),this operation converts a stringified name into an equivalent array of name components.
org.omg.CosNaming._NamingContextExtStub.to_string(org.omg.CosNaming.NameComponent[]),this operation creates a stringified name from the array of name components.
"org.omg.CosNaming._NamingContextExtStub.to_url(java.lang.String,java.lang.String)","this operation creates a url based ""iiopname://"" format name from the stringified name of the object."
org.omg.CosNaming._NamingContextExtStub.unbind(org.omg.CosNaming.NameComponent[]),the unbind operation removes a name binding from a context.
"org.omg.CosNaming._NamingContextStub.bind_context(org.omg.CosNaming.NameComponent[],org.omg.CosNaming.NamingContext)",names an object that is a naming context.
org.omg.CosNaming._NamingContextStub.bind_new_context(org.omg.CosNaming.NameComponent[]),this operation creates a new context and binds it to the name supplied as an argument.
"org.omg.CosNaming._NamingContextStub.bind(org.omg.CosNaming.NameComponent[],org.omg.CORBA.Object)",creates a binding of a name and an object in the naming context.
org.omg.CosNaming._NamingContextStub.destroy(),the destroy operation deletes a naming context.
"org.omg.CosNaming._NamingContextStub.list(int,org.omg.CosNaming.BindingListHolder,org.omg.CosNaming.BindingIteratorHolder)",the list operation allows a client to iterate through a set of bindings in a naming context.
org.omg.CosNaming._NamingContextStub.new_context(),this operation returns a naming context implemented by the same naming server as the context on which the operation was invoked.
"org.omg.CosNaming._NamingContextStub.rebind_context(org.omg.CosNaming.NameComponent[],org.omg.CosNaming.NamingContext)",creates a binding of a name and a naming context in the naming context even if the name is already bound in the context.
"org.omg.CosNaming._NamingContextStub.rebind(org.omg.CosNaming.NameComponent[],org.omg.CORBA.Object)",creates a binding of a name and an object in the naming context even if the name is already bound in the context.
org.omg.CosNaming._NamingContextStub.resolve(org.omg.CosNaming.NameComponent[]),the resolve operation is the process of retrieving an object bound to a name in a given context.
org.omg.CosNaming._NamingContextStub.unbind(org.omg.CosNaming.NameComponent[]),the unbind operation removes a name binding from a context.
org.omg.DynamicAny.DynAnyFactoryOperations.create_dyn_any_from_type_code(org.omg.CORBA.TypeCode),creates a dynany from a typecode.
org.omg.DynamicAny.DynAnyFactoryOperations.create_dyn_any(org.omg.CORBA.Any),creates a new dynany object from an any value.
org.omg.DynamicAny.DynAnyOperations.assign(org.omg.DynamicAny.DynAny),initializes the value associated with a dynany object with the value associated with another dynany object.
org.omg.DynamicAny.DynAnyOperations.component_count(),returns the number of components of a dynany.
org.omg.DynamicAny.DynAnyOperations.copy(),creates a new dynany object whose value is a deep copy of the dynany on which it is invoked.
org.omg.DynamicAny.DynAnyOperations.current_component(),returns the dynany for the component at the current position.
org.omg.DynamicAny.DynAnyOperations.destroy(),destroys a dynany object.
org.omg.DynamicAny.DynAnyOperations.equal(org.omg.DynamicAny.DynAny),compares two dynany values for equality.
org.omg.DynamicAny.DynAnyOperations.from_any(org.omg.CORBA.Any),initializes the value associated with a dynany object with the value contained in an any.
org.omg.DynamicAny.DynAnyOperations.get_any(),extracts an any value contained in the any represented by this dynany.
org.omg.DynamicAny.DynAnyOperations.get_boolean(),extracts the boolean value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_char(),extracts the char value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_double(),extracts the double value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_dyn_any(),extracts the any value contained in the any represented by this dynany and returns it wrapped into a new dynany.
org.omg.DynamicAny.DynAnyOperations.get_float(),extracts the float value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_long(),extracts the integer value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_longlong(),extracts the long value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_octet(),extracts the byte value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_reference(),extracts the reference to a corba object from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_short(),extracts the short value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_string(),extracts the string value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_typecode(),extracts the typecode object from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_ulong(),extracts the integer value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_ulonglong(),extracts the long value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_ushort(),extracts the short value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_val(),extracts a serializable object from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_wchar(),extracts the long value from this dynany.
org.omg.DynamicAny.DynAnyOperations.get_wstring(),extracts the string value from this dynany.
org.omg.DynamicAny.DynAnyOperations.insert_any(org.omg.CORBA.Any),inserts an any value into the any represented by this dynany.
org.omg.DynamicAny.DynAnyOperations.insert_boolean(boolean),inserts a boolean value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_char(char),inserts a char value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_double(double),inserts a double value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_dyn_any(org.omg.DynamicAny.DynAny),inserts the any value contained in the parameter dynany into the any represented by this dynany.
org.omg.DynamicAny.DynAnyOperations.insert_float(float),inserts a float value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_long(int),inserts an integer value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_longlong(long),inserts a long value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_octet(byte),inserts a byte value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_reference(org.omg.CORBA.Object),inserts a reference to a corba object into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_short(short),inserts a short value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_string(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_typecode(org.omg.CORBA.TypeCode),inserts a typecode object into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_ulong(int),inserts an integer value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_ulonglong(long),inserts a long value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_ushort(short),inserts a short value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_val(java.io.Serializable),inserts a reference to a serializable object into this dynany.
org.omg.DynamicAny.DynAnyOperations.insert_wchar(char),inserts a char value into the dynany.
org.omg.DynamicAny.DynAnyOperations.insert_wstring(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny.DynAnyOperations.next(),advances the current position to the next component.
org.omg.DynamicAny.DynAnyOperations.rewind(),is equivalent to seek(0).
org.omg.DynamicAny.DynAnyOperations.seek(int),sets the current position to index.
org.omg.DynamicAny.DynAnyOperations.to_any(),creates an any value from a dynany object.
org.omg.DynamicAny.DynAnyOperations.type(),returns the typecode associated with this dynany object.
org.omg.DynamicAny.DynArrayOperations.get_elements_as_dyn_any(),returns the elements of the dynarray as dynanys.
org.omg.DynamicAny.DynArrayOperations.get_elements(),returns the elements of the dynarray.
org.omg.DynamicAny.DynArrayOperations.set_elements_as_dyn_any(org.omg.DynamicAny.DynAny[]),sets the dynarray to contain the passed elements.
org.omg.DynamicAny.DynArrayOperations.set_elements(org.omg.CORBA.Any[]),sets the dynarray to contain the passed elements.
org.omg.DynamicAny.DynEnumOperations.get_as_string(),returns the value of the dynenum as an idl identifier.
org.omg.DynamicAny.DynEnumOperations.get_as_ulong(),returns the value of the dynenum as the enumerated value's ordinal value.
org.omg.DynamicAny.DynEnumOperations.set_as_string(java.lang.String),sets the value of the dynenum to the enumerated value whose idl identifier is passed in the value parameter.
org.omg.DynamicAny.DynEnumOperations.set_as_ulong(int),sets the value of the dynenum as the enumerated value's ordinal value.
org.omg.DynamicAny.DynFixedOperations.get_value(),returns the value of a dynfixed.
org.omg.DynamicAny.DynFixedOperations.set_value(java.lang.String),sets the value of the dynfixed.
org.omg.DynamicAny.DynSequenceOperations.get_elements_as_dyn_any(),returns the dynanys representing the elements of the sequence.
org.omg.DynamicAny.DynSequenceOperations.get_elements(),returns the elements of the sequence.
org.omg.DynamicAny.DynSequenceOperations.get_length(),returns the current length of the sequence.
org.omg.DynamicAny.DynSequenceOperations.set_elements_as_dyn_any(org.omg.DynamicAny.DynAny[]),sets the elements of a sequence using dynanys.
org.omg.DynamicAny.DynSequenceOperations.set_elements(org.omg.CORBA.Any[]),sets the elements of a sequence.
org.omg.DynamicAny.DynSequenceOperations.set_length(int),sets the length of the sequence.
org.omg.DynamicAny.DynStructOperations.current_member_kind(),returns the tckind associated with the member at the current position.
org.omg.DynamicAny.DynStructOperations.current_member_name(),returns the name of the member at the current position.
org.omg.DynamicAny.DynStructOperations.get_members_as_dyn_any(),returns a sequence of namedynanypairs describing the name and the value of each member in the struct associated with a dynstruct object.
org.omg.DynamicAny.DynStructOperations.get_members(),returns a sequence of namevaluepairs describing the name and the value of each member in the struct associated with a dynstruct object.
org.omg.DynamicAny.DynStructOperations.set_members_as_dyn_any(org.omg.DynamicAny.NameDynAnyPair[]),initializes the struct data value associated with a dynstruct object from a sequence of namedynanypairs.
org.omg.DynamicAny.DynStructOperations.set_members(org.omg.DynamicAny.NameValuePair[]),initializes the struct data value associated with a dynstruct object from a sequence of namevaluepairs.
org.omg.DynamicAny.DynUnionOperations.discriminator_kind(),returns the tckind value of the discriminators typecode.
org.omg.DynamicAny.DynUnionOperations.get_discriminator(),returns the current discriminator value.
org.omg.DynamicAny.DynUnionOperations.has_no_active_member(),"returns true if the union has no active member, that is, the unions value consists solely of its discriminator because the discriminator has a value that is not listed as an explicit case label."
org.omg.DynamicAny.DynUnionOperations.member_kind(),returns the tckind value of the currently active members typecode.
org.omg.DynamicAny.DynUnionOperations.member_name(),returns the name of the currently active member.
org.omg.DynamicAny.DynUnionOperations.member(),returns the currently active member.
org.omg.DynamicAny.DynUnionOperations.set_discriminator(org.omg.DynamicAny.DynAny),sets the discriminator of the dynunion to the specified value.
org.omg.DynamicAny.DynUnionOperations.set_to_default_member(),sets the discriminator to a value that is consistent with the value of the default case of a union.
org.omg.DynamicAny.DynUnionOperations.set_to_no_active_member(),sets the discriminator to a value that does not correspond to any of the unions case labels.
org.omg.DynamicAny.DynValueBoxOperations.get_boxed_value_as_dyn_any(),returns the boxed value as a dynany.
org.omg.DynamicAny.DynValueBoxOperations.get_boxed_value(),returns the boxed value as an any.
org.omg.DynamicAny.DynValueBoxOperations.set_boxed_value_as_dyn_any(org.omg.DynamicAny.DynAny),replaces the boxed value with the value contained in the parameter.
org.omg.DynamicAny.DynValueBoxOperations.set_boxed_value(org.omg.CORBA.Any),replaces the boxed value with the specified value.
org.omg.DynamicAny.DynValueCommonOperations.is_null(),returns true if the dynvaluecommon represents a null value type.
org.omg.DynamicAny.DynValueCommonOperations.set_to_null(),changes the representation of a dynvaluecommon to a null value type.
org.omg.DynamicAny.DynValueCommonOperations.set_to_value(),replaces a null value type with a newly constructed value.
org.omg.DynamicAny.DynValueOperations.current_member_kind(),returns the tckind associated with the member at the current position.
org.omg.DynamicAny.DynValueOperations.current_member_name(),returns the name of the member at the current position.
org.omg.DynamicAny.DynValueOperations.get_members_as_dyn_any(),returns a sequence of namedynanypairs describing the name and the value of each member in the value type.
org.omg.DynamicAny.DynValueOperations.get_members(),returns a sequence of namevaluepairs describing the name and the value of each member in the value type.
org.omg.DynamicAny.DynValueOperations.set_members_as_dyn_any(org.omg.DynamicAny.NameDynAnyPair[]),initializes the value type's members from a sequence of namedynanypairs.
org.omg.DynamicAny.DynValueOperations.set_members(org.omg.DynamicAny.NameValuePair[]),initializes the value type's members from a sequence of namevaluepairs.
org.omg.DynamicAny._DynAnyFactoryStub.create_dyn_any_from_type_code(org.omg.CORBA.TypeCode),creates a dynany from a typecode.
org.omg.DynamicAny._DynAnyFactoryStub.create_dyn_any(org.omg.CORBA.Any),creates a new dynany object from an any value.
org.omg.DynamicAny._DynAnyStub.assign(org.omg.DynamicAny.DynAny),initializes the value associated with a dynany object with the value associated with another dynany object.
org.omg.DynamicAny._DynAnyStub.component_count(),returns the number of components of a dynany.
org.omg.DynamicAny._DynAnyStub.copy(),creates a new dynany object whose value is a deep copy of the dynany on which it is invoked.
org.omg.DynamicAny._DynAnyStub.current_component(),returns the dynany for the component at the current position.
org.omg.DynamicAny._DynAnyStub.destroy(),destroys a dynany object.
org.omg.DynamicAny._DynAnyStub.equal(org.omg.DynamicAny.DynAny),compares two dynany values for equality.
org.omg.DynamicAny._DynAnyStub.from_any(org.omg.CORBA.Any),initializes the value associated with a dynany object with the value contained in an any.
org.omg.DynamicAny._DynAnyStub.get_any(),extracts an any value contained in the any represented by this dynany.
org.omg.DynamicAny._DynAnyStub.get_boolean(),extracts the boolean value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_char(),extracts the char value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_double(),extracts the double value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_dyn_any(),extracts the any value contained in the any represented by this dynany and returns it wrapped into a new dynany.
org.omg.DynamicAny._DynAnyStub.get_float(),extracts the float value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_long(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_longlong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_octet(),extracts the byte value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_reference(),extracts the reference to a corba object from this dynany.
org.omg.DynamicAny._DynAnyStub.get_short(),extracts the short value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_string(),extracts the string value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_typecode(),extracts the typecode object from this dynany.
org.omg.DynamicAny._DynAnyStub.get_ulong(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_ulonglong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_ushort(),extracts the short value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_val(),extracts a serializable object from this dynany.
org.omg.DynamicAny._DynAnyStub.get_wchar(),extracts the long value from this dynany.
org.omg.DynamicAny._DynAnyStub.get_wstring(),extracts the string value from this dynany.
org.omg.DynamicAny._DynAnyStub.insert_any(org.omg.CORBA.Any),inserts an any value into the any represented by this dynany.
org.omg.DynamicAny._DynAnyStub.insert_boolean(boolean),inserts a boolean value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_char(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_double(double),inserts a double value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_dyn_any(org.omg.DynamicAny.DynAny),inserts the any value contained in the parameter dynany into the any represented by this dynany.
org.omg.DynamicAny._DynAnyStub.insert_float(float),inserts a float value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_long(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_longlong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_octet(byte),inserts a byte value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_reference(org.omg.CORBA.Object),inserts a reference to a corba object into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_short(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_string(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_typecode(org.omg.CORBA.TypeCode),inserts a typecode object into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_ulong(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_ulonglong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_ushort(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_val(java.io.Serializable),inserts a reference to a serializable object into this dynany.
org.omg.DynamicAny._DynAnyStub.insert_wchar(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynAnyStub.insert_wstring(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynAnyStub.next(),advances the current position to the next component.
org.omg.DynamicAny._DynAnyStub.rewind(),is equivalent to seek(0).
org.omg.DynamicAny._DynAnyStub.seek(int),sets the current position to index.
org.omg.DynamicAny._DynAnyStub.to_any(),creates an any value from a dynany object.
org.omg.DynamicAny._DynAnyStub.type(),returns the typecode associated with this dynany object.
org.omg.DynamicAny._DynArrayStub.assign(org.omg.DynamicAny.DynAny),initializes the value associated with a dynany object with the value associated with another dynany object.
org.omg.DynamicAny._DynArrayStub.component_count(),returns the number of components of a dynany.
org.omg.DynamicAny._DynArrayStub.copy(),creates a new dynany object whose value is a deep copy of the dynany on which it is invoked.
org.omg.DynamicAny._DynArrayStub.current_component(),returns the dynany for the component at the current position.
org.omg.DynamicAny._DynArrayStub.destroy(),destroys a dynany object.
org.omg.DynamicAny._DynArrayStub.equal(org.omg.DynamicAny.DynAny),compares two dynany values for equality.
org.omg.DynamicAny._DynArrayStub.from_any(org.omg.CORBA.Any),initializes the value associated with a dynany object with the value contained in an any.
org.omg.DynamicAny._DynArrayStub.get_any(),extracts an any value contained in the any represented by this dynany.
org.omg.DynamicAny._DynArrayStub.get_boolean(),extracts the boolean value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_char(),extracts the char value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_double(),extracts the double value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_dyn_any(),extracts the any value contained in the any represented by this dynany and returns it wrapped into a new dynany.
org.omg.DynamicAny._DynArrayStub.get_elements_as_dyn_any(),returns the elements of the dynarray as dynanys.
org.omg.DynamicAny._DynArrayStub.get_elements(),returns the elements of the dynarray.
org.omg.DynamicAny._DynArrayStub.get_float(),extracts the float value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_long(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_longlong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_octet(),extracts the byte value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_reference(),extracts the reference to a corba object from this dynany.
org.omg.DynamicAny._DynArrayStub.get_short(),extracts the short value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_string(),extracts the string value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_typecode(),extracts the typecode object from this dynany.
org.omg.DynamicAny._DynArrayStub.get_ulong(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_ulonglong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_ushort(),extracts the short value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_val(),extracts a serializable object from this dynany.
org.omg.DynamicAny._DynArrayStub.get_wchar(),extracts the long value from this dynany.
org.omg.DynamicAny._DynArrayStub.get_wstring(),extracts the string value from this dynany.
org.omg.DynamicAny._DynArrayStub.insert_any(org.omg.CORBA.Any),inserts an any value into the any represented by this dynany.
org.omg.DynamicAny._DynArrayStub.insert_boolean(boolean),inserts a boolean value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_char(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_double(double),inserts a double value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_dyn_any(org.omg.DynamicAny.DynAny),inserts the any value contained in the parameter dynany into the any represented by this dynany.
org.omg.DynamicAny._DynArrayStub.insert_float(float),inserts a float value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_long(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_longlong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_octet(byte),inserts a byte value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_reference(org.omg.CORBA.Object),inserts a reference to a corba object into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_short(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_string(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_typecode(org.omg.CORBA.TypeCode),inserts a typecode object into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_ulong(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_ulonglong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_ushort(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_val(java.io.Serializable),inserts a reference to a serializable object into this dynany.
org.omg.DynamicAny._DynArrayStub.insert_wchar(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynArrayStub.insert_wstring(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynArrayStub.next(),advances the current position to the next component.
org.omg.DynamicAny._DynArrayStub.rewind(),is equivalent to seek(0).
org.omg.DynamicAny._DynArrayStub.seek(int),sets the current position to index.
org.omg.DynamicAny._DynArrayStub.set_elements_as_dyn_any(org.omg.DynamicAny.DynAny[]),sets the dynarray to contain the passed elements.
org.omg.DynamicAny._DynArrayStub.set_elements(org.omg.CORBA.Any[]),sets the dynarray to contain the passed elements.
org.omg.DynamicAny._DynArrayStub.to_any(),creates an any value from a dynany object.
org.omg.DynamicAny._DynArrayStub.type(),returns the typecode associated with this dynany object.
org.omg.DynamicAny._DynEnumStub.assign(org.omg.DynamicAny.DynAny),initializes the value associated with a dynany object with the value associated with another dynany object.
org.omg.DynamicAny._DynEnumStub.component_count(),returns the number of components of a dynany.
org.omg.DynamicAny._DynEnumStub.copy(),creates a new dynany object whose value is a deep copy of the dynany on which it is invoked.
org.omg.DynamicAny._DynEnumStub.current_component(),returns the dynany for the component at the current position.
org.omg.DynamicAny._DynEnumStub.destroy(),destroys a dynany object.
org.omg.DynamicAny._DynEnumStub.equal(org.omg.DynamicAny.DynAny),compares two dynany values for equality.
org.omg.DynamicAny._DynEnumStub.from_any(org.omg.CORBA.Any),initializes the value associated with a dynany object with the value contained in an any.
org.omg.DynamicAny._DynEnumStub.get_any(),extracts an any value contained in the any represented by this dynany.
org.omg.DynamicAny._DynEnumStub.get_as_string(),returns the value of the dynenum as an idl identifier.
org.omg.DynamicAny._DynEnumStub.get_as_ulong(),returns the value of the dynenum as the enumerated value's ordinal value.
org.omg.DynamicAny._DynEnumStub.get_boolean(),extracts the boolean value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_char(),extracts the char value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_double(),extracts the double value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_dyn_any(),extracts the any value contained in the any represented by this dynany and returns it wrapped into a new dynany.
org.omg.DynamicAny._DynEnumStub.get_float(),extracts the float value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_long(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_longlong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_octet(),extracts the byte value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_reference(),extracts the reference to a corba object from this dynany.
org.omg.DynamicAny._DynEnumStub.get_short(),extracts the short value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_string(),extracts the string value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_typecode(),extracts the typecode object from this dynany.
org.omg.DynamicAny._DynEnumStub.get_ulong(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_ulonglong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_ushort(),extracts the short value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_val(),extracts a serializable object from this dynany.
org.omg.DynamicAny._DynEnumStub.get_wchar(),extracts the long value from this dynany.
org.omg.DynamicAny._DynEnumStub.get_wstring(),extracts the string value from this dynany.
org.omg.DynamicAny._DynEnumStub.insert_any(org.omg.CORBA.Any),inserts an any value into the any represented by this dynany.
org.omg.DynamicAny._DynEnumStub.insert_boolean(boolean),inserts a boolean value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_char(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_double(double),inserts a double value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_dyn_any(org.omg.DynamicAny.DynAny),inserts the any value contained in the parameter dynany into the any represented by this dynany.
org.omg.DynamicAny._DynEnumStub.insert_float(float),inserts a float value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_long(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_longlong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_octet(byte),inserts a byte value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_reference(org.omg.CORBA.Object),inserts a reference to a corba object into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_short(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_string(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_typecode(org.omg.CORBA.TypeCode),inserts a typecode object into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_ulong(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_ulonglong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_ushort(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_val(java.io.Serializable),inserts a reference to a serializable object into this dynany.
org.omg.DynamicAny._DynEnumStub.insert_wchar(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynEnumStub.insert_wstring(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynEnumStub.next(),advances the current position to the next component.
org.omg.DynamicAny._DynEnumStub.rewind(),is equivalent to seek(0).
org.omg.DynamicAny._DynEnumStub.seek(int),sets the current position to index.
org.omg.DynamicAny._DynEnumStub.set_as_string(java.lang.String),sets the value of the dynenum to the enumerated value whose idl identifier is passed in the value parameter.
org.omg.DynamicAny._DynEnumStub.set_as_ulong(int),sets the value of the dynenum as the enumerated value's ordinal value.
org.omg.DynamicAny._DynEnumStub.to_any(),creates an any value from a dynany object.
org.omg.DynamicAny._DynEnumStub.type(),returns the typecode associated with this dynany object.
org.omg.DynamicAny._DynFixedStub.assign(org.omg.DynamicAny.DynAny),initializes the value associated with a dynany object with the value associated with another dynany object.
org.omg.DynamicAny._DynFixedStub.component_count(),returns the number of components of a dynany.
org.omg.DynamicAny._DynFixedStub.copy(),creates a new dynany object whose value is a deep copy of the dynany on which it is invoked.
org.omg.DynamicAny._DynFixedStub.current_component(),returns the dynany for the component at the current position.
org.omg.DynamicAny._DynFixedStub.destroy(),destroys a dynany object.
org.omg.DynamicAny._DynFixedStub.equal(org.omg.DynamicAny.DynAny),compares two dynany values for equality.
org.omg.DynamicAny._DynFixedStub.from_any(org.omg.CORBA.Any),initializes the value associated with a dynany object with the value contained in an any.
org.omg.DynamicAny._DynFixedStub.get_any(),extracts an any value contained in the any represented by this dynany.
org.omg.DynamicAny._DynFixedStub.get_boolean(),extracts the boolean value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_char(),extracts the char value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_double(),extracts the double value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_dyn_any(),extracts the any value contained in the any represented by this dynany and returns it wrapped into a new dynany.
org.omg.DynamicAny._DynFixedStub.get_float(),extracts the float value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_long(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_longlong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_octet(),extracts the byte value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_reference(),extracts the reference to a corba object from this dynany.
org.omg.DynamicAny._DynFixedStub.get_short(),extracts the short value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_string(),extracts the string value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_typecode(),extracts the typecode object from this dynany.
org.omg.DynamicAny._DynFixedStub.get_ulong(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_ulonglong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_ushort(),extracts the short value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_val(),extracts a serializable object from this dynany.
org.omg.DynamicAny._DynFixedStub.get_value(),returns the value of a dynfixed.
org.omg.DynamicAny._DynFixedStub.get_wchar(),extracts the long value from this dynany.
org.omg.DynamicAny._DynFixedStub.get_wstring(),extracts the string value from this dynany.
org.omg.DynamicAny._DynFixedStub.insert_any(org.omg.CORBA.Any),inserts an any value into the any represented by this dynany.
org.omg.DynamicAny._DynFixedStub.insert_boolean(boolean),inserts a boolean value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_char(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_double(double),inserts a double value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_dyn_any(org.omg.DynamicAny.DynAny),inserts the any value contained in the parameter dynany into the any represented by this dynany.
org.omg.DynamicAny._DynFixedStub.insert_float(float),inserts a float value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_long(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_longlong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_octet(byte),inserts a byte value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_reference(org.omg.CORBA.Object),inserts a reference to a corba object into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_short(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_string(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_typecode(org.omg.CORBA.TypeCode),inserts a typecode object into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_ulong(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_ulonglong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_ushort(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_val(java.io.Serializable),inserts a reference to a serializable object into this dynany.
org.omg.DynamicAny._DynFixedStub.insert_wchar(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynFixedStub.insert_wstring(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynFixedStub.next(),advances the current position to the next component.
org.omg.DynamicAny._DynFixedStub.rewind(),is equivalent to seek(0).
org.omg.DynamicAny._DynFixedStub.seek(int),sets the current position to index.
org.omg.DynamicAny._DynFixedStub.set_value(java.lang.String),sets the value of the dynfixed.
org.omg.DynamicAny._DynFixedStub.to_any(),creates an any value from a dynany object.
org.omg.DynamicAny._DynFixedStub.type(),returns the typecode associated with this dynany object.
org.omg.DynamicAny._DynSequenceStub.assign(org.omg.DynamicAny.DynAny),initializes the value associated with a dynany object with the value associated with another dynany object.
org.omg.DynamicAny._DynSequenceStub.component_count(),returns the number of components of a dynany.
org.omg.DynamicAny._DynSequenceStub.copy(),creates a new dynany object whose value is a deep copy of the dynany on which it is invoked.
org.omg.DynamicAny._DynSequenceStub.current_component(),returns the dynany for the component at the current position.
org.omg.DynamicAny._DynSequenceStub.destroy(),destroys a dynany object.
org.omg.DynamicAny._DynSequenceStub.equal(org.omg.DynamicAny.DynAny),compares two dynany values for equality.
org.omg.DynamicAny._DynSequenceStub.from_any(org.omg.CORBA.Any),initializes the value associated with a dynany object with the value contained in an any.
org.omg.DynamicAny._DynSequenceStub.get_any(),extracts an any value contained in the any represented by this dynany.
org.omg.DynamicAny._DynSequenceStub.get_boolean(),extracts the boolean value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_char(),extracts the char value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_double(),extracts the double value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_dyn_any(),extracts the any value contained in the any represented by this dynany and returns it wrapped into a new dynany.
org.omg.DynamicAny._DynSequenceStub.get_elements_as_dyn_any(),returns the dynanys representing the elements of the sequence.
org.omg.DynamicAny._DynSequenceStub.get_elements(),returns the elements of the sequence.
org.omg.DynamicAny._DynSequenceStub.get_float(),extracts the float value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_length(),returns the current length of the sequence.
org.omg.DynamicAny._DynSequenceStub.get_long(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_longlong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_octet(),extracts the byte value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_reference(),extracts the reference to a corba object from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_short(),extracts the short value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_string(),extracts the string value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_typecode(),extracts the typecode object from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_ulong(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_ulonglong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_ushort(),extracts the short value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_val(),extracts a serializable object from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_wchar(),extracts the long value from this dynany.
org.omg.DynamicAny._DynSequenceStub.get_wstring(),extracts the string value from this dynany.
org.omg.DynamicAny._DynSequenceStub.insert_any(org.omg.CORBA.Any),inserts an any value into the any represented by this dynany.
org.omg.DynamicAny._DynSequenceStub.insert_boolean(boolean),inserts a boolean value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_char(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_double(double),inserts a double value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_dyn_any(org.omg.DynamicAny.DynAny),inserts the any value contained in the parameter dynany into the any represented by this dynany.
org.omg.DynamicAny._DynSequenceStub.insert_float(float),inserts a float value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_long(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_longlong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_octet(byte),inserts a byte value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_reference(org.omg.CORBA.Object),inserts a reference to a corba object into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_short(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_string(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_typecode(org.omg.CORBA.TypeCode),inserts a typecode object into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_ulong(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_ulonglong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_ushort(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_val(java.io.Serializable),inserts a reference to a serializable object into this dynany.
org.omg.DynamicAny._DynSequenceStub.insert_wchar(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynSequenceStub.insert_wstring(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynSequenceStub.next(),advances the current position to the next component.
org.omg.DynamicAny._DynSequenceStub.rewind(),is equivalent to seek(0).
org.omg.DynamicAny._DynSequenceStub.seek(int),sets the current position to index.
org.omg.DynamicAny._DynSequenceStub.set_elements_as_dyn_any(org.omg.DynamicAny.DynAny[]),sets the elements of a sequence using dynanys.
org.omg.DynamicAny._DynSequenceStub.set_elements(org.omg.CORBA.Any[]),sets the elements of a sequence.
org.omg.DynamicAny._DynSequenceStub.set_length(int),sets the length of the sequence.
org.omg.DynamicAny._DynSequenceStub.to_any(),creates an any value from a dynany object.
org.omg.DynamicAny._DynSequenceStub.type(),returns the typecode associated with this dynany object.
org.omg.DynamicAny._DynStructStub.assign(org.omg.DynamicAny.DynAny),initializes the value associated with a dynany object with the value associated with another dynany object.
org.omg.DynamicAny._DynStructStub.component_count(),returns the number of components of a dynany.
org.omg.DynamicAny._DynStructStub.copy(),creates a new dynany object whose value is a deep copy of the dynany on which it is invoked.
org.omg.DynamicAny._DynStructStub.current_component(),returns the dynany for the component at the current position.
org.omg.DynamicAny._DynStructStub.current_member_kind(),returns the tckind associated with the member at the current position.
org.omg.DynamicAny._DynStructStub.current_member_name(),returns the name of the member at the current position.
org.omg.DynamicAny._DynStructStub.destroy(),destroys a dynany object.
org.omg.DynamicAny._DynStructStub.equal(org.omg.DynamicAny.DynAny),compares two dynany values for equality.
org.omg.DynamicAny._DynStructStub.from_any(org.omg.CORBA.Any),initializes the value associated with a dynany object with the value contained in an any.
org.omg.DynamicAny._DynStructStub.get_any(),extracts an any value contained in the any represented by this dynany.
org.omg.DynamicAny._DynStructStub.get_boolean(),extracts the boolean value from this dynany.
org.omg.DynamicAny._DynStructStub.get_char(),extracts the char value from this dynany.
org.omg.DynamicAny._DynStructStub.get_double(),extracts the double value from this dynany.
org.omg.DynamicAny._DynStructStub.get_dyn_any(),extracts the any value contained in the any represented by this dynany and returns it wrapped into a new dynany.
org.omg.DynamicAny._DynStructStub.get_float(),extracts the float value from this dynany.
org.omg.DynamicAny._DynStructStub.get_long(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynStructStub.get_longlong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynStructStub.get_members_as_dyn_any(),returns a sequence of namedynanypairs describing the name and the value of each member in the struct associated with a dynstruct object.
org.omg.DynamicAny._DynStructStub.get_members(),returns a sequence of namevaluepairs describing the name and the value of each member in the struct associated with a dynstruct object.
org.omg.DynamicAny._DynStructStub.get_octet(),extracts the byte value from this dynany.
org.omg.DynamicAny._DynStructStub.get_reference(),extracts the reference to a corba object from this dynany.
org.omg.DynamicAny._DynStructStub.get_short(),extracts the short value from this dynany.
org.omg.DynamicAny._DynStructStub.get_string(),extracts the string value from this dynany.
org.omg.DynamicAny._DynStructStub.get_typecode(),extracts the typecode object from this dynany.
org.omg.DynamicAny._DynStructStub.get_ulong(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynStructStub.get_ulonglong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynStructStub.get_ushort(),extracts the short value from this dynany.
org.omg.DynamicAny._DynStructStub.get_val(),extracts a serializable object from this dynany.
org.omg.DynamicAny._DynStructStub.get_wchar(),extracts the long value from this dynany.
org.omg.DynamicAny._DynStructStub.get_wstring(),extracts the string value from this dynany.
org.omg.DynamicAny._DynStructStub.insert_any(org.omg.CORBA.Any),inserts an any value into the any represented by this dynany.
org.omg.DynamicAny._DynStructStub.insert_boolean(boolean),inserts a boolean value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_char(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_double(double),inserts a double value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_dyn_any(org.omg.DynamicAny.DynAny),inserts the any value contained in the parameter dynany into the any represented by this dynany.
org.omg.DynamicAny._DynStructStub.insert_float(float),inserts a float value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_long(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_longlong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_octet(byte),inserts a byte value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_reference(org.omg.CORBA.Object),inserts a reference to a corba object into the dynany.
org.omg.DynamicAny._DynStructStub.insert_short(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_string(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_typecode(org.omg.CORBA.TypeCode),inserts a typecode object into the dynany.
org.omg.DynamicAny._DynStructStub.insert_ulong(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_ulonglong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_ushort(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_val(java.io.Serializable),inserts a reference to a serializable object into this dynany.
org.omg.DynamicAny._DynStructStub.insert_wchar(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynStructStub.insert_wstring(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynStructStub.next(),advances the current position to the next component.
org.omg.DynamicAny._DynStructStub.rewind(),is equivalent to seek(0).
org.omg.DynamicAny._DynStructStub.seek(int),sets the current position to index.
org.omg.DynamicAny._DynStructStub.set_members_as_dyn_any(org.omg.DynamicAny.NameDynAnyPair[]),initializes the struct data value associated with a dynstruct object from a sequence of namedynanypairs.
org.omg.DynamicAny._DynStructStub.set_members(org.omg.DynamicAny.NameValuePair[]),initializes the struct data value associated with a dynstruct object from a sequence of namevaluepairs.
org.omg.DynamicAny._DynStructStub.to_any(),creates an any value from a dynany object.
org.omg.DynamicAny._DynStructStub.type(),returns the typecode associated with this dynany object.
org.omg.DynamicAny._DynUnionStub.assign(org.omg.DynamicAny.DynAny),initializes the value associated with a dynany object with the value associated with another dynany object.
org.omg.DynamicAny._DynUnionStub.component_count(),returns the number of components of a dynany.
org.omg.DynamicAny._DynUnionStub.copy(),creates a new dynany object whose value is a deep copy of the dynany on which it is invoked.
org.omg.DynamicAny._DynUnionStub.current_component(),returns the dynany for the component at the current position.
org.omg.DynamicAny._DynUnionStub.destroy(),destroys a dynany object.
org.omg.DynamicAny._DynUnionStub.discriminator_kind(),returns the tckind value of the discriminators typecode.
org.omg.DynamicAny._DynUnionStub.equal(org.omg.DynamicAny.DynAny),compares two dynany values for equality.
org.omg.DynamicAny._DynUnionStub.from_any(org.omg.CORBA.Any),initializes the value associated with a dynany object with the value contained in an any.
org.omg.DynamicAny._DynUnionStub.get_any(),extracts an any value contained in the any represented by this dynany.
org.omg.DynamicAny._DynUnionStub.get_boolean(),extracts the boolean value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_char(),extracts the char value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_discriminator(),returns the current discriminator value.
org.omg.DynamicAny._DynUnionStub.get_double(),extracts the double value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_dyn_any(),extracts the any value contained in the any represented by this dynany and returns it wrapped into a new dynany.
org.omg.DynamicAny._DynUnionStub.get_float(),extracts the float value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_long(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_longlong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_octet(),extracts the byte value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_reference(),extracts the reference to a corba object from this dynany.
org.omg.DynamicAny._DynUnionStub.get_short(),extracts the short value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_string(),extracts the string value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_typecode(),extracts the typecode object from this dynany.
org.omg.DynamicAny._DynUnionStub.get_ulong(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_ulonglong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_ushort(),extracts the short value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_val(),extracts a serializable object from this dynany.
org.omg.DynamicAny._DynUnionStub.get_wchar(),extracts the long value from this dynany.
org.omg.DynamicAny._DynUnionStub.get_wstring(),extracts the string value from this dynany.
org.omg.DynamicAny._DynUnionStub.has_no_active_member(),"returns true if the union has no active member, that is, the unions value consists solely of its discriminator because the discriminator has a value that is not listed as an explicit case label."
org.omg.DynamicAny._DynUnionStub.insert_any(org.omg.CORBA.Any),inserts an any value into the any represented by this dynany.
org.omg.DynamicAny._DynUnionStub.insert_boolean(boolean),inserts a boolean value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_char(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_double(double),inserts a double value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_dyn_any(org.omg.DynamicAny.DynAny),inserts the any value contained in the parameter dynany into the any represented by this dynany.
org.omg.DynamicAny._DynUnionStub.insert_float(float),inserts a float value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_long(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_longlong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_octet(byte),inserts a byte value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_reference(org.omg.CORBA.Object),inserts a reference to a corba object into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_short(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_string(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_typecode(org.omg.CORBA.TypeCode),inserts a typecode object into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_ulong(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_ulonglong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_ushort(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_val(java.io.Serializable),inserts a reference to a serializable object into this dynany.
org.omg.DynamicAny._DynUnionStub.insert_wchar(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynUnionStub.insert_wstring(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynUnionStub.member_kind(),returns the tckind value of the currently active members typecode.
org.omg.DynamicAny._DynUnionStub.member_name(),returns the name of the currently active member.
org.omg.DynamicAny._DynUnionStub.member(),returns the currently active member.
org.omg.DynamicAny._DynUnionStub.next(),advances the current position to the next component.
org.omg.DynamicAny._DynUnionStub.rewind(),is equivalent to seek(0).
org.omg.DynamicAny._DynUnionStub.seek(int),sets the current position to index.
org.omg.DynamicAny._DynUnionStub.set_discriminator(org.omg.DynamicAny.DynAny),sets the discriminator of the dynunion to the specified value.
org.omg.DynamicAny._DynUnionStub.set_to_default_member(),sets the discriminator to a value that is consistent with the value of the default case of a union.
org.omg.DynamicAny._DynUnionStub.set_to_no_active_member(),sets the discriminator to a value that does not correspond to any of the unions case labels.
org.omg.DynamicAny._DynUnionStub.to_any(),creates an any value from a dynany object.
org.omg.DynamicAny._DynUnionStub.type(),returns the typecode associated with this dynany object.
org.omg.DynamicAny._DynValueStub.assign(org.omg.DynamicAny.DynAny),initializes the value associated with a dynany object with the value associated with another dynany object.
org.omg.DynamicAny._DynValueStub.component_count(),returns the number of components of a dynany.
org.omg.DynamicAny._DynValueStub.copy(),creates a new dynany object whose value is a deep copy of the dynany on which it is invoked.
org.omg.DynamicAny._DynValueStub.current_component(),returns the dynany for the component at the current position.
org.omg.DynamicAny._DynValueStub.current_member_kind(),returns the tckind associated with the member at the current position.
org.omg.DynamicAny._DynValueStub.current_member_name(),returns the name of the member at the current position.
org.omg.DynamicAny._DynValueStub.destroy(),destroys a dynany object.
org.omg.DynamicAny._DynValueStub.equal(org.omg.DynamicAny.DynAny),compares two dynany values for equality.
org.omg.DynamicAny._DynValueStub.from_any(org.omg.CORBA.Any),initializes the value associated with a dynany object with the value contained in an any.
org.omg.DynamicAny._DynValueStub.get_any(),extracts an any value contained in the any represented by this dynany.
org.omg.DynamicAny._DynValueStub.get_boolean(),extracts the boolean value from this dynany.
org.omg.DynamicAny._DynValueStub.get_char(),extracts the char value from this dynany.
org.omg.DynamicAny._DynValueStub.get_double(),extracts the double value from this dynany.
org.omg.DynamicAny._DynValueStub.get_dyn_any(),extracts the any value contained in the any represented by this dynany and returns it wrapped into a new dynany.
org.omg.DynamicAny._DynValueStub.get_float(),extracts the float value from this dynany.
org.omg.DynamicAny._DynValueStub.get_long(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynValueStub.get_longlong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynValueStub.get_members_as_dyn_any(),returns a sequence of namedynanypairs describing the name and the value of each member in the value type.
org.omg.DynamicAny._DynValueStub.get_members(),returns a sequence of namevaluepairs describing the name and the value of each member in the value type.
org.omg.DynamicAny._DynValueStub.get_octet(),extracts the byte value from this dynany.
org.omg.DynamicAny._DynValueStub.get_reference(),extracts the reference to a corba object from this dynany.
org.omg.DynamicAny._DynValueStub.get_short(),extracts the short value from this dynany.
org.omg.DynamicAny._DynValueStub.get_string(),extracts the string value from this dynany.
org.omg.DynamicAny._DynValueStub.get_typecode(),extracts the typecode object from this dynany.
org.omg.DynamicAny._DynValueStub.get_ulong(),extracts the integer value from this dynany.
org.omg.DynamicAny._DynValueStub.get_ulonglong(),extracts the long value from this dynany.
org.omg.DynamicAny._DynValueStub.get_ushort(),extracts the short value from this dynany.
org.omg.DynamicAny._DynValueStub.get_val(),extracts a serializable object from this dynany.
org.omg.DynamicAny._DynValueStub.get_wchar(),extracts the long value from this dynany.
org.omg.DynamicAny._DynValueStub.get_wstring(),extracts the string value from this dynany.
org.omg.DynamicAny._DynValueStub.insert_any(org.omg.CORBA.Any),inserts an any value into the any represented by this dynany.
org.omg.DynamicAny._DynValueStub.insert_boolean(boolean),inserts a boolean value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_char(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_double(double),inserts a double value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_dyn_any(org.omg.DynamicAny.DynAny),inserts the any value contained in the parameter dynany into the any represented by this dynany.
org.omg.DynamicAny._DynValueStub.insert_float(float),inserts a float value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_long(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_longlong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_octet(byte),inserts a byte value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_reference(org.omg.CORBA.Object),inserts a reference to a corba object into the dynany.
org.omg.DynamicAny._DynValueStub.insert_short(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_string(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_typecode(org.omg.CORBA.TypeCode),inserts a typecode object into the dynany.
org.omg.DynamicAny._DynValueStub.insert_ulong(int),inserts an integer value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_ulonglong(long),inserts a long value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_ushort(short),inserts a short value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_val(java.io.Serializable),inserts a reference to a serializable object into this dynany.
org.omg.DynamicAny._DynValueStub.insert_wchar(char),inserts a char value into the dynany.
org.omg.DynamicAny._DynValueStub.insert_wstring(java.lang.String),inserts a string value into the dynany.
org.omg.DynamicAny._DynValueStub.is_null(),returns true if the dynvaluecommon represents a null value type.
org.omg.DynamicAny._DynValueStub.next(),advances the current position to the next component.
org.omg.DynamicAny._DynValueStub.rewind(),is equivalent to seek(0).
org.omg.DynamicAny._DynValueStub.seek(int),sets the current position to index.
org.omg.DynamicAny._DynValueStub.set_members_as_dyn_any(org.omg.DynamicAny.NameDynAnyPair[]),initializes the value type's members from a sequence of namedynanypairs.
org.omg.DynamicAny._DynValueStub.set_members(org.omg.DynamicAny.NameValuePair[]),initializes the value type's members from a sequence of namevaluepairs.
org.omg.DynamicAny._DynValueStub.set_to_null(),changes the representation of a dynvaluecommon to a null value type.
org.omg.DynamicAny._DynValueStub.set_to_value(),replaces a null value type with a newly constructed value.
org.omg.DynamicAny._DynValueStub.to_any(),creates an any value from a dynany object.
org.omg.DynamicAny._DynValueStub.type(),returns the typecode associated with this dynany object.
org.omg.IOP.CodecFactoryOperations.create_codec(org.omg.IOP.Encoding),create a codec of the given encoding.
"org.omg.IOP.CodecOperations.decode_value(byte[],org.omg.CORBA.TypeCode)",decodes the given byte array into an any based on the given typecode and the encoding format effective for this codec.
org.omg.IOP.CodecOperations.decode(byte[]),decodes the given byte array into an any based on the encoding format effective for this codec.
org.omg.IOP.CodecOperations.encode_value(org.omg.CORBA.Any),converts the given any into a byte array based on the encoding format effective for this codec.
org.omg.IOP.CodecOperations.encode(org.omg.CORBA.Any),converts the given any into a byte array based on the encoding format effective for this codec.
"org.omg.PortableInterceptor.ClientRequestInfoOperations.add_request_service_context(org.omg.IOP.ServiceContext,boolean)",allows interceptors to add service contexts to the request.
org.omg.PortableInterceptor.ClientRequestInfoOperations.effective_profile(),returns the profile that will be used to send the request.
org.omg.PortableInterceptor.ClientRequestInfoOperations.effective_target(),returns the actual object on which the operation will be invoked.
org.omg.PortableInterceptor.ClientRequestInfoOperations.get_effective_component(int),returns the iop.
org.omg.PortableInterceptor.ClientRequestInfoOperations.get_effective_components(int),returns an array of all tagged components with the given id from the profile selected for this request.
org.omg.PortableInterceptor.ClientRequestInfoOperations.get_request_policy(int),returns the given policy in effect for this operation.
org.omg.PortableInterceptor.ClientRequestInfoOperations.received_exception_id(),returns the repository id of the exception to be returned to the client.
org.omg.PortableInterceptor.ClientRequestInfoOperations.received_exception(),returns an any which contains the exception to be returned to the client.
org.omg.PortableInterceptor.ClientRequestInfoOperations.target(),returns the object which the client called to perform the operation.
org.omg.PortableInterceptor.ClientRequestInterceptorOperations.receive_exception(org.omg.PortableInterceptor.ClientRequestInfo),indicates to the interceptor that an exception occurred.
org.omg.PortableInterceptor.ClientRequestInterceptorOperations.receive_other(org.omg.PortableInterceptor.ClientRequestInfo),allows an interceptor to query the information available when a request results in something other than a normal reply or an exception.
org.omg.PortableInterceptor.ClientRequestInterceptorOperations.receive_reply(org.omg.PortableInterceptor.ClientRequestInfo),allows an interceptor to query the information on a reply after it is returned from the server and before control is returned to the client.
org.omg.PortableInterceptor.ClientRequestInterceptorOperations.send_poll(org.omg.PortableInterceptor.ClientRequestInfo),allows an interceptor to query information during a time-independent invocation (tii) polling get reply sequence.
org.omg.PortableInterceptor.ClientRequestInterceptorOperations.send_request(org.omg.PortableInterceptor.ClientRequestInfo),allows an interceptor to query request information and modify the service context before the request is sent to the server.
org.omg.PortableInterceptor.CurrentOperations.get_slot(int),retrieves the slot data the application set in picurrent via get_slot.
"org.omg.PortableInterceptor.CurrentOperations.set_slot(int,org.omg.CORBA.Any)",sets data in a slot.
org.omg.PortableInterceptor.InterceptorOperations.destroy(),provides an opportunity to destroy this interceptor.
org.omg.PortableInterceptor.InterceptorOperations.name(),returns the name of the interceptor.
org.omg.PortableInterceptor.IORInfoOperations.adapter_template(),return the object reference template of the object adapter that was just created and is running ior interceptors.
"org.omg.PortableInterceptor.IORInfoOperations.add_ior_component_to_profile(org.omg.IOP.TaggedComponent,int)",a portable orb service implementation calls add_ior_component_to_profile from its implementation of establish_components to add a tagged component to the set which will be included when constructing iors.
org.omg.PortableInterceptor.IORInfoOperations.add_ior_component(org.omg.IOP.TaggedComponent),a portable orb service implementation calls add_ior_component from its implementation of establish_components to add a tagged component to the set which will be included when constructing iors.
org.omg.PortableInterceptor.IORInfoOperations.current_factory(),"on read, returns the current factory that will be used to create object references for the object adapter that was just created and is running ior interceptors."
org.omg.PortableInterceptor.IORInfoOperations.current_factory(org.omg.PortableInterceptor.ObjectReferenceFactory),"on read, returns the current factory that will be used to create object references for the object adapter that was just created and is running ior interceptors."
org.omg.PortableInterceptor.IORInfoOperations.get_effective_policy(int),allows an orb service implementation to determine what server side policy of a particular type is in effect for an ior being constructed.
org.omg.PortableInterceptor.IORInfoOperations.manager_id(),return the adapter manager id of the object adapter that was just created and is running ior interceptors.
org.omg.PortableInterceptor.IORInfoOperations.state(),return the adapter state of the object adapter that was just created and is running ior interceptors.
"org.omg.PortableInterceptor.IORInterceptor_3_0Operations.adapter_manager_state_changed(int,short)",called whenever the state of an adapter manager changes.
"org.omg.PortableInterceptor.IORInterceptor_3_0Operations.adapter_state_changed(org.omg.PortableInterceptor.ObjectReferenceTemplate[],short)","called whenever the state of an object adapter changes, and the state change is not caused by an adapter manager."
org.omg.PortableInterceptor.IORInterceptor_3_0Operations.components_established(org.omg.PortableInterceptor.IORInfo),the components_established method is invoked on all registered iorinterceptor_3_0 instances after establish_components has been invoked on all registered iorinterceptor instances.
org.omg.PortableInterceptor.IORInterceptorOperations.establish_components(org.omg.PortableInterceptor.IORInfo),a server side orb calls the establish_components operation on all registered iorinterceptor instances when it is assembling the list of components that will be included in the profile or profiles of an object reference.
"org.omg.PortableInterceptor.ObjectReferenceFactory.make_object(java.lang.String,byte[])","make_object creates a corba object reference according to the data in this template, with the given repository id and object id."
org.omg.PortableInterceptor.ORBInitializerOperations.post_init(org.omg.PortableInterceptor.ORBInitInfo),called during orb initialization.
org.omg.PortableInterceptor.ORBInitializerOperations.pre_init(org.omg.PortableInterceptor.ORBInitInfo),called during orb initialization.
org.omg.PortableInterceptor.ORBInitInfoOperations.add_client_request_interceptor(org.omg.PortableInterceptor.ClientRequestInterceptor),used to add a client-side request interceptor to the list of client-side request interceptors.
org.omg.PortableInterceptor.ORBInitInfoOperations.add_ior_interceptor(org.omg.PortableInterceptor.IORInterceptor),used to add an ior interceptor to the list of ior interceptors.
org.omg.PortableInterceptor.ORBInitInfoOperations.add_server_request_interceptor(org.omg.PortableInterceptor.ServerRequestInterceptor),used to add a server-side request interceptor to the list of server-side request interceptors.
org.omg.PortableInterceptor.ORBInitInfoOperations.allocate_slot_id(),called to allocate a slot on portableinterceptor.
org.omg.PortableInterceptor.ORBInitInfoOperations.arguments(),returns the arguments passed to orb.
org.omg.PortableInterceptor.ORBInitInfoOperations.codec_factory(),returns the iop.
org.omg.PortableInterceptor.ORBInitInfoOperations.orb_id(),returns the id of the orb being initialized.
"org.omg.PortableInterceptor.ORBInitInfoOperations.register_initial_reference(java.lang.String,org.omg.CORBA.Object)",identical to orb.
"org.omg.PortableInterceptor.ORBInitInfoOperations.register_policy_factory(int,org.omg.PortableInterceptor.PolicyFactory)",registers a policyfactory for the given policytype.
org.omg.PortableInterceptor.ORBInitInfoOperations.resolve_initial_references(java.lang.String),identical to orb.
"org.omg.PortableInterceptor.PolicyFactoryOperations.create_policy(int,org.omg.CORBA.Any)",returns an instance of the appropriate interface derived from corba.
org.omg.PortableInterceptor.RequestInfoOperations.arguments(),"returns an array of parameter objects, containing the arguments on the operation being invoked."
org.omg.PortableInterceptor.RequestInfoOperations.contexts(),returns an array of string objects describing the contexts that may be passed on this operation invocation.
org.omg.PortableInterceptor.RequestInfoOperations.exceptions(),returns an array of typecode objects describing the typecodes of the user exceptions that this operation invocation may throw.
org.omg.PortableInterceptor.RequestInfoOperations.forward_reference(),"contains the object to which the request will be forwarded, if the reply_status attribute is location_forward."
org.omg.PortableInterceptor.RequestInfoOperations.get_reply_service_context(int),returns a copy of the service context with the given id that is associated with the reply.
org.omg.PortableInterceptor.RequestInfoOperations.get_request_service_context(int),returns a copy of the service context with the given id that is associated with the request.
org.omg.PortableInterceptor.RequestInfoOperations.get_slot(int),returns the data from the given slot of the portableinterceptor.
org.omg.PortableInterceptor.RequestInfoOperations.operation_context(),returns an array of string objects containing the contexts being sent on the request.
org.omg.PortableInterceptor.RequestInfoOperations.operation(),returns the name of the operation being invoked.
org.omg.PortableInterceptor.RequestInfoOperations.reply_status(),describes the state of the result of the operation invocation.
org.omg.PortableInterceptor.RequestInfoOperations.request_id(),returns an id that uniquely identifies an active request/reply sequence.
org.omg.PortableInterceptor.RequestInfoOperations.response_expected(),indicates whether a response is expected.
org.omg.PortableInterceptor.RequestInfoOperations.result(),returns an any containing the result of the operation invocation.
org.omg.PortableInterceptor.RequestInfoOperations.sync_scope(),defines how far the request shall progress before control is returned to the client.
org.omg.PortableInterceptor.ServerRequestInfoOperations.adapter_id(),returns the opaque identifier for the object adapter.
org.omg.PortableInterceptor.ServerRequestInfoOperations.adapter_name(),returns the sequence of strings that identifies the object adapter instance that is handling this request.
"org.omg.PortableInterceptor.ServerRequestInfoOperations.add_reply_service_context(org.omg.IOP.ServiceContext,boolean)",allows interceptors to add service contexts to the request.
org.omg.PortableInterceptor.ServerRequestInfoOperations.get_server_policy(int),returns the policy in effect for this operation for the given policy type.
org.omg.PortableInterceptor.ServerRequestInfoOperations.object_id(),returns the opaque object_id describing the target of the operation invocation.
org.omg.PortableInterceptor.ServerRequestInfoOperations.orb_id(),returns the id that was used to create the orb.
org.omg.PortableInterceptor.ServerRequestInfoOperations.sending_exception(),returns an any which contains the exception to be returned to the client.
org.omg.PortableInterceptor.ServerRequestInfoOperations.server_id(),returns the server id that was specified on orb::init using the -orbserverid argument.
"org.omg.PortableInterceptor.ServerRequestInfoOperations.set_slot(int,org.omg.CORBA.Any)",allows an interceptor to set a slot in the portableinterceptor.
org.omg.PortableInterceptor.ServerRequestInfoOperations.target_is_a(java.lang.String),"returns true if the servant is the given repository id, false if it is not."
org.omg.PortableInterceptor.ServerRequestInfoOperations.target_most_derived_interface(),returns the repository id for the most derived interface of the servant.
org.omg.PortableInterceptor.ServerRequestInterceptorOperations.receive_request_service_contexts(org.omg.PortableInterceptor.ServerRequestInfo),allows the interceptor to process service context information.
org.omg.PortableInterceptor.ServerRequestInterceptorOperations.receive_request(org.omg.PortableInterceptor.ServerRequestInfo),"allows an interceptor to query request information after all the information, including operation parameters, are available."
org.omg.PortableInterceptor.ServerRequestInterceptorOperations.send_exception(org.omg.PortableInterceptor.ServerRequestInfo),allows an interceptor to query the exception information and modify the reply service context before the exception is thrown to the client.
org.omg.PortableInterceptor.ServerRequestInterceptorOperations.send_other(org.omg.PortableInterceptor.ServerRequestInfo),allows an interceptor to query the information available when a request results in something other than a normal reply or an exception.
org.omg.PortableInterceptor.ServerRequestInterceptorOperations.send_reply(org.omg.PortableInterceptor.ServerRequestInfo),allows an interceptor to query reply information and modify the reply service context after the target operation has been invoked and before the reply is returned to the client.
"org.omg.PortableServer.AdapterActivatorOperations.unknown_adapter(org.omg.PortableServer.POA,java.lang.String)",this operation is invoked when the orb receives a request for an object reference that identifies a target poa that does not exist.
org.omg.PortableServer.CurrentOperations.get_object_id(),returns the objectid identifying the object in whose context it is called.
org.omg.PortableServer.CurrentOperations.get_POA(),returns reference to the poa implementing the object in whose context it is called.
org.omg.PortableServer.IdAssignmentPolicyOperations.value(),specifies the policy value.
org.omg.PortableServer.IdUniquenessPolicyOperations.value(),specifies the policy value.
org.omg.PortableServer.ImplicitActivationPolicyOperations.value(),specifies the policy value.
org.omg.PortableServer.LifespanPolicyOperations.value(),specifies the policy value.
org.omg.PortableServer.POAManagerOperations.activate(),"this operation changes the state of the poa manager to active, causing associated poas to start processing requests."
"org.omg.PortableServer.POAManagerOperations.deactivate(boolean,boolean)","this operation changes the state of the poa manager to inactive, causing associated poas to reject the requests that have not begun executing as well as as any new requests."
org.omg.PortableServer.POAManagerOperations.discard_requests(boolean),this operation changes the state of the poa manager to discarding.
org.omg.PortableServer.POAManagerOperations.get_state(),this operation returns the state of the poa manager.
org.omg.PortableServer.POAManagerOperations.hold_requests(boolean),"this operation changes the state of the poa manager to holding, causing associated poas to queue incoming requests."
"org.omg.PortableServer.POAOperations.activate_object_with_id(byte[],org.omg.PortableServer.Servant)",this operation enters an association between the specified object id and the specified servant in the active object map.
org.omg.PortableServer.POAOperations.activate_object(org.omg.PortableServer.Servant),this operation generates an object id and enters the object id and the specified servant in the active object map.
org.omg.PortableServer.POAOperations.create_id_assignment_policy(org.omg.PortableServer.IdAssignmentPolicyValue),these operations each return a reference to a policy object with the specified value.
org.omg.PortableServer.POAOperations.create_id_uniqueness_policy(org.omg.PortableServer.IdUniquenessPolicyValue),these operations each return a reference to a policy object with the specified value.
org.omg.PortableServer.POAOperations.create_implicit_activation_policy(org.omg.PortableServer.ImplicitActivationPolicyValue),these operations each return a reference to a policy object with the specified value.
org.omg.PortableServer.POAOperations.create_lifespan_policy(org.omg.PortableServer.LifespanPolicyValue),these operations each return a reference to a policy object with the specified value.
"org.omg.PortableServer.POAOperations.create_POA(java.lang.String,org.omg.PortableServer.POAManager,org.omg.CORBA.Policy[])",this operation creates a new poa as a child of the target poa.
"org.omg.PortableServer.POAOperations.create_reference_with_id(byte[],java.lang.String)",this operation creates an object reference that encapsulates the specified object id and interface repository id values.
org.omg.PortableServer.POAOperations.create_reference(java.lang.String),this operation creates an object reference that encapsulates a poa-generated object id value and the specified interface repository id.
org.omg.PortableServer.POAOperations.create_request_processing_policy(org.omg.PortableServer.RequestProcessingPolicyValue),these operations each return a reference to a policy object with the specified value.
org.omg.PortableServer.POAOperations.create_servant_retention_policy(org.omg.PortableServer.ServantRetentionPolicyValue),these operations each return a reference to a policy object with the specified value.
org.omg.PortableServer.POAOperations.create_thread_policy(org.omg.PortableServer.ThreadPolicyValue),these operations each return a reference to a policy object with the specified value.
org.omg.PortableServer.POAOperations.deactivate_object(byte[]),this operation causes the objectid specified in the oid parameter to be deactivated.
"org.omg.PortableServer.POAOperations.destroy(boolean,boolean)",this operation destroys the poa and all descendant poas.
"org.omg.PortableServer.POAOperations.find_POA(java.lang.String,boolean)","if the target poa is the parent of a child poa with the specified name (relative to the target poa), that child poa is returned."
org.omg.PortableServer.POAOperations.get_servant_manager(),"if the servantretentionpolicy of the poa is retain, then the servantmanager argument (imgr) shall support the servantactivator interface."
org.omg.PortableServer.POAOperations.get_servant(),this operation returns the default servant associated with the poa.
org.omg.PortableServer.POAOperations.id_to_reference(byte[]),"if an object with the specified object id value is currently active, a reference encapsulating the information used to activate the object is returned."
org.omg.PortableServer.POAOperations.id_to_servant(byte[]),"if the poa has the retain policy and the specified objectid is in the active object map, this operation returns the servant associated with that object in the active object map."
org.omg.PortableServer.POAOperations.id(),this returns the unique id of the poa in the process in which it is created.
org.omg.PortableServer.POAOperations.reference_to_id(org.omg.CORBA.Object),this operation returns the object id value encapsulated by the specified reference.
org.omg.PortableServer.POAOperations.reference_to_servant(org.omg.CORBA.Object),"if the poa has the retain policy and the specified object is present in the active object map, this operation returns the servant associated with that object in the active object map."
org.omg.PortableServer.POAOperations.servant_to_id(org.omg.PortableServer.Servant),this operation has four possible behaviors.
org.omg.PortableServer.POAOperations.servant_to_reference(org.omg.PortableServer.Servant),this operation requires the retain policy and either the unique_id or implicit_activation policies if invoked outside the context of an operation dispatched by this poa.
org.omg.PortableServer.POAOperations.set_servant_manager(org.omg.PortableServer.ServantManager),this operation sets the default servant manager associated with the poa.
org.omg.PortableServer.POAOperations.set_servant(org.omg.PortableServer.Servant),this operation registers the specified servant with the poa as the default servant.
org.omg.PortableServer.POAOperations.the_activator(),this attribute identifies the adapter activator associated with the poa.
org.omg.PortableServer.POAOperations.the_activator(org.omg.PortableServer.AdapterActivator),this attribute identifies the adapter activator associated with the poa.
org.omg.PortableServer.POAOperations.the_children(),this attribute identifies the current set of all child poas of the poa.
org.omg.PortableServer.POAOperations.the_name(),this attribute identifies the poa relative to its parent.
org.omg.PortableServer.POAOperations.the_parent(),this attribute identifies the parent of the poa.
org.omg.PortableServer.POAOperations.the_POAManager(),this attribute identifies the poa manager associated with the poa.
org.omg.PortableServer.RequestProcessingPolicyOperations.value(),specifies the policy value.
"org.omg.PortableServer.ServantActivatorOperations.etherealize(byte[],org.omg.PortableServer.POA,org.omg.PortableServer.Servant,boolean,boolean)","this operation is invoked whenever a servant for an object is deactivated, assuming the poa has the use_servant_manager and retain policies."
"org.omg.PortableServer.ServantActivatorOperations.incarnate(byte[],org.omg.PortableServer.POA)","this operation is invoked by the poa whenever the poa receives a request for an object that is not currently active, assuming the poa has the use_servant_manager and retain policies."
"org.omg.PortableServer.ServantLocatorOperations.postinvoke(byte[],org.omg.PortableServer.POA,java.lang.String,java.lang.Object,org.omg.PortableServer.Servant)",this operation is invoked whenener a servant completes a request.
"org.omg.PortableServer.ServantLocatorOperations.preinvoke(byte[],org.omg.PortableServer.POA,java.lang.String,org.omg.PortableServer.ServantLocatorPackage.CookieHolder)",this operations is used to get a servant that will be used to process the request that caused preinvoke to be called.
org.omg.PortableServer.ServantRetentionPolicyOperations.value(),specifies the policy value.
org.omg.PortableServer.ThreadPolicyOperations.value(),specifies the policy value.
"org.omg.PortableServer._ServantActivatorStub.etherealize(byte[],org.omg.PortableServer.POA,org.omg.PortableServer.Servant,boolean,boolean)","this operation is invoked whenever a servant for an object is deactivated, assuming the poa has the use_servant_manager and retain policies."
"org.omg.PortableServer._ServantActivatorStub.incarnate(byte[],org.omg.PortableServer.POA)","this operation is invoked by the poa whenever the poa receives a request for an object that is not currently active, assuming the poa has the use_servant_manager and retain policies."
"org.omg.PortableServer._ServantLocatorStub.postinvoke(byte[],org.omg.PortableServer.POA,java.lang.String,java.lang.Object,org.omg.PortableServer.Servant)",this operation is invoked whenener a servant completes a request.
"org.omg.PortableServer._ServantLocatorStub.preinvoke(byte[],org.omg.PortableServer.POA,java.lang.String,org.omg.PortableServer.ServantLocatorPackage.CookieHolder)",this operations is used to get a servant that will be used to process the request that caused preinvoke to be called.
org.omg.PortableServer.DynamicImplementation.invoke(org.omg.CORBA.ServerRequest),receives requests issued to any corba object incarnated by the dsi servant and performs the processing necessary to execute the request.
"org.omg.PortableServer.Servant._all_interfaces(org.omg.PortableServer.POA,byte[])",used by the orb to obtain complete type information from the servant.
org.omg.PortableServer.Servant._default_POA(),returns the root poa from the orb instance associated with the servant.
org.omg.PortableServer.Servant._get_delegate(),gets the orb vendor-specific implementation of portableserver::servant.
org.omg.PortableServer.Servant._get_interface_def(),returns an interfacedef object as a corba::object that defines the runtime type of the corba::object implemented by the servant.
org.omg.PortableServer.Servant._is_a(java.lang.String),checks to see if the specified repository_id is present on the list returned by _all_interfaces() or is the repository_id for the generic corba object.
org.omg.PortableServer.Servant._non_existent(),checks for the existence of an object.
org.omg.PortableServer.Servant._object_id(),"allows easy execution of common methods, equivalent to calling portableserver::current::get_object_id."
org.omg.PortableServer.Servant._orb(),returns the instance of the orb currently associated with the servant (convenience method).
org.omg.PortableServer.Servant._poa(),"allows easy execution of common methods, equivalent to portableserver::current:get_poa."
org.omg.PortableServer.Servant._set_delegate(org.omg.PortableServer.portable.Delegate),supports the java orb portability interfaces by providing a method for classes that support orb portability through delegation to set their delegate.
org.omg.PortableServer.Servant._this_object(),allows the servant to obtain the object reference for the target corba object it is incarnating for that request.
org.omg.PortableServer.Servant._this_object(org.omg.CORBA.ORB),allows the servant to obtain the object reference for the target corba object it is incarnating for that request.
org.omg.PortableServer.portable.Delegate.default_POA(org.omg.PortableServer.Servant),the default behavior of this function is to return the root poa from the orb instance associated with the servant.
org.omg.PortableServer.portable.Delegate.get_interface_def(org.omg.PortableServer.Servant),this operation returns an object in the interface repository which provides type information that may be useful to a program.
"org.omg.PortableServer.portable.Delegate.is_a(org.omg.PortableServer.Servant,java.lang.String)",this method checks to see if the specified repid is present on the list returned by _all_interfaces() or is the repository id for the generic corba object.
org.omg.PortableServer.portable.Delegate.non_existent(org.omg.PortableServer.Servant),this operation is used to check for the existence of the object.
org.omg.PortableServer.portable.Delegate.object_id(org.omg.PortableServer.Servant),the method _object_id() is equivalent to calling portableserver::current::get_object_id.
org.omg.PortableServer.portable.Delegate.orb(org.omg.PortableServer.Servant),convenience method that returns the instance of the orb currently associated with the servant.
org.omg.PortableServer.portable.Delegate.poa(org.omg.PortableServer.Servant),the method _poa() is equivalent to calling portableserver::current:get_poa.
org.omg.PortableServer.portable.Delegate.this_object(org.omg.PortableServer.Servant),this allows the servant to obtain the object reference for the target corba object it is incarnating for that request.
org.omg.stub.java.rmi._Remote_Stub._ids(),returns an array of repository ids that an object implements.
org.w3c.dom.Attr.getName(),returns the name of this attribute.
org.w3c.dom.Attr.getOwnerElement(),the element node this attribute is attached to or null if this attribute is not in use.
org.w3c.dom.Attr.getSchemaTypeInfo(),the type information associated with this attribute.
org.w3c.dom.Attr.getSpecified(),"true if this attribute was explicitly given a value in the instance document, false otherwise."
org.w3c.dom.Attr.getValue(),"on retrieval, the value of the attribute is returned as a string."
org.w3c.dom.Attr.isId(),returns whether this attribute is known to be of type id (i.
org.w3c.dom.Attr.setValue(java.lang.String),"on retrieval, the value of the attribute is returned as a string."
org.w3c.dom.CharacterData.appendData(java.lang.String),append the string to the end of the character data of the node.
"org.w3c.dom.CharacterData.deleteData(int,int)",remove a range of 16-bit units from the node.
org.w3c.dom.CharacterData.getData(),the character data of the node that implements this interface.
org.w3c.dom.CharacterData.getLength(),the number of 16-bit units that are available through data and the substringdata method below.
"org.w3c.dom.CharacterData.insertData(int,java.lang.String)",insert a string at the specified 16-bit unit offset.
"org.w3c.dom.CharacterData.replaceData(int,int,java.lang.String)",replace the characters starting at the specified 16-bit unit offset with the specified string.
org.w3c.dom.CharacterData.setData(java.lang.String),the character data of the node that implements this interface.
"org.w3c.dom.CharacterData.substringData(int,int)",extracts a range of data from the node.
org.w3c.dom.Document.adoptNode(org.w3c.dom.Node),attempts to adopt a node from another document to this document.
org.w3c.dom.Document.createAttribute(java.lang.String),creates an attr of the given name.
"org.w3c.dom.Document.createAttributeNS(java.lang.String,java.lang.String)",creates an attribute of the given qualified name and namespace uri.
org.w3c.dom.Document.createCDATASection(java.lang.String),creates a cdatasection node whose value is the specified string.
org.w3c.dom.Document.createComment(java.lang.String),creates a comment node given the specified string.
org.w3c.dom.Document.createDocumentFragment(),creates an empty documentfragment object.
org.w3c.dom.Document.createElement(java.lang.String),creates an element of the type specified.
"org.w3c.dom.Document.createElementNS(java.lang.String,java.lang.String)",creates an element of the given qualified name and namespace uri.
org.w3c.dom.Document.createEntityReference(java.lang.String),creates an entityreference object.
"org.w3c.dom.Document.createProcessingInstruction(java.lang.String,java.lang.String)",creates a processinginstruction node given the specified name and data strings.
org.w3c.dom.Document.createTextNode(java.lang.String),creates a text node given the specified string.
org.w3c.dom.Document.getDoctype(),the document type declaration (see documenttype) associated with this document.
org.w3c.dom.Document.getDocumentElement(),this is a convenience attribute that allows direct access to the child node that is the document element of the document.
org.w3c.dom.Document.getDocumentURI(),the location of the document or null if undefined or if the document was created using domimplementation.
org.w3c.dom.Document.getDomConfig(),the configuration used when document.
org.w3c.dom.Document.getElementById(java.lang.String),returns the element that has an id attribute with the given value.
org.w3c.dom.Document.getElementsByTagName(java.lang.String),returns a nodelist of all the elements in document order with a given tag name and are contained in the document.
"org.w3c.dom.Document.getElementsByTagNameNS(java.lang.String,java.lang.String)",returns a nodelist of all the elements with a given local name and namespace uri in document order.
org.w3c.dom.Document.getImplementation(),the domimplementation object that handles this document.
org.w3c.dom.Document.getInputEncoding(),an attribute specifying the encoding used for this document at the time of the parsing.
org.w3c.dom.Document.getStrictErrorChecking(),an attribute specifying whether error checking is enforced or not.
org.w3c.dom.Document.getXmlEncoding(),"an attribute specifying, as part of the xml declaration, the encoding of this document."
org.w3c.dom.Document.getXmlStandalone(),"an attribute specifying, as part of the xml declaration, whether this document is standalone."
org.w3c.dom.Document.getXmlVersion(),"an attribute specifying, as part of the xml declaration, the version number of this document."
"org.w3c.dom.Document.importNode(org.w3c.dom.Node,boolean)","imports a node from another document to this document, without altering or removing the source node from the original document; this method creates a new copy of the source node."
org.w3c.dom.Document.normalizeDocument(),"this method acts as if the document was going through a save and load cycle, putting the document in a ""normal"" form."
"org.w3c.dom.Document.renameNode(org.w3c.dom.Node,java.lang.String,java.lang.String)",rename an existing node of type element_node or attribute_node.
org.w3c.dom.Document.setDocumentURI(java.lang.String),the location of the document or null if undefined or if the document was created using domimplementation.
org.w3c.dom.Document.setStrictErrorChecking(boolean),an attribute specifying whether error checking is enforced or not.
org.w3c.dom.Document.setXmlStandalone(boolean),"an attribute specifying, as part of the xml declaration, whether this document is standalone."
org.w3c.dom.Document.setXmlVersion(java.lang.String),"an attribute specifying, as part of the xml declaration, the version number of this document."
org.w3c.dom.DocumentType.getEntities(),"a namednodemap containing the general entities, both external and internal, declared in the dtd."
org.w3c.dom.DocumentType.getInternalSubset(),"the internal subset as a string, or null if there is none."
org.w3c.dom.DocumentType.getName(),the name of dtd; i.
org.w3c.dom.DocumentType.getNotations(),a namednodemap containing the notations declared in the dtd.
org.w3c.dom.DocumentType.getPublicId(),the public identifier of the external subset.
org.w3c.dom.DocumentType.getSystemId(),the system identifier of the external subset.
"org.w3c.dom.DOMConfiguration.canSetParameter(java.lang.String,java.lang.Object)",check if setting a parameter to a specific value is supported.
org.w3c.dom.DOMConfiguration.getParameter(java.lang.String),return the value of a parameter if known.
org.w3c.dom.DOMConfiguration.getParameterNames(),the list of the parameters supported by this domconfiguration object and for which at least one value can be set by the application.
"org.w3c.dom.DOMConfiguration.setParameter(java.lang.String,java.lang.Object)",set the value of a parameter.
org.w3c.dom.DOMError.getLocation(),the location of the error.
org.w3c.dom.DOMError.getMessage(),an implementation specific string describing the error that occurred.
org.w3c.dom.DOMError.getRelatedData(),the related domerror.
org.w3c.dom.DOMError.getRelatedException(),the related platform dependent exception if any.
org.w3c.dom.DOMError.getSeverity(),"the severity of the error, either severity_warning, severity_error, or severity_fatal_error."
org.w3c.dom.DOMError.getType(),a domstring indicating which related data is expected in relateddata.
org.w3c.dom.DOMErrorHandler.handleError(org.w3c.dom.DOMError),this method is called on the error handler when an error occurs.
"org.w3c.dom.DOMImplementation.createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)",creates a dom document object of the specified type with its document element.
"org.w3c.dom.DOMImplementation.createDocumentType(java.lang.String,java.lang.String,java.lang.String)",creates an empty documenttype node.
"org.w3c.dom.DOMImplementation.getFeature(java.lang.String,java.lang.String)","this method returns a specialized object which implements the specialized apis of the specified feature and version, as specified in dom features."
"org.w3c.dom.DOMImplementation.hasFeature(java.lang.String,java.lang.String)","test if the dom implementation implements a specific feature and version, as specified in dom features."
org.w3c.dom.DOMImplementationList.getLength(),the number of domimplementations in the list.
org.w3c.dom.DOMImplementationList.item(int),returns the indexth item in the collection.
org.w3c.dom.DOMImplementationSource.getDOMImplementation(java.lang.String),a method to request the first dom implementation that supports the specified features.
org.w3c.dom.DOMImplementationSource.getDOMImplementationList(java.lang.String),"a method to request a list of dom implementations that support the specified features and versions, as specified in ."
org.w3c.dom.DOMLocator.getByteOffset(),the byte offset into the input source this locator is pointing to or -1 if there is no byte offset available.
org.w3c.dom.DOMLocator.getColumnNumber(),"the column number this locator is pointing to, or -1 if there is no column number available."
org.w3c.dom.DOMLocator.getLineNumber(),"the line number this locator is pointing to, or -1 if there is no column number available."
org.w3c.dom.DOMLocator.getRelatedNode(),"the node this locator is pointing to, or null if no node is available."
org.w3c.dom.DOMLocator.getUri(),"the uri this locator is pointing to, or null if no uri is available."
org.w3c.dom.DOMLocator.getUtf16Offset(),"the utf-16, as defined in [unicode] and amendment 1 of [iso/iec 10646], offset into the input source this locator is pointing to or -1 if there is no utf-16 offset available."
org.w3c.dom.DOMStringList.contains(java.lang.String),test if a string is part of this domstringlist.
org.w3c.dom.DOMStringList.getLength(),the number of domstrings in the list.
org.w3c.dom.DOMStringList.item(int),returns the indexth item in the collection.
org.w3c.dom.Element.getAttribute(java.lang.String),retrieves an attribute value by name.
org.w3c.dom.Element.getAttributeNode(java.lang.String),retrieves an attribute node by name.
"org.w3c.dom.Element.getAttributeNodeNS(java.lang.String,java.lang.String)",retrieves an attr node by local name and namespace uri.
"org.w3c.dom.Element.getAttributeNS(java.lang.String,java.lang.String)",retrieves an attribute value by local name and namespace uri.
org.w3c.dom.Element.getElementsByTagName(java.lang.String),"returns a nodelist of all descendant elements with a given tag name, in document order."
"org.w3c.dom.Element.getElementsByTagNameNS(java.lang.String,java.lang.String)",returns a nodelist of all the descendant elements with a given local name and namespace uri in document order.
org.w3c.dom.Element.getSchemaTypeInfo(),the type information associated with this element.
org.w3c.dom.Element.getTagName(),the name of the element.
org.w3c.dom.Element.hasAttribute(java.lang.String),"returns true when an attribute with a given name is specified on this element or has a default value, false otherwise."
"org.w3c.dom.Element.hasAttributeNS(java.lang.String,java.lang.String)","returns true when an attribute with a given local name and namespace uri is specified on this element or has a default value, false otherwise."
org.w3c.dom.Element.removeAttribute(java.lang.String),removes an attribute by name.
org.w3c.dom.Element.removeAttributeNode(org.w3c.dom.Attr),removes the specified attribute node.
"org.w3c.dom.Element.removeAttributeNS(java.lang.String,java.lang.String)",removes an attribute by local name and namespace uri.
"org.w3c.dom.Element.setAttribute(java.lang.String,java.lang.String)",adds a new attribute.
org.w3c.dom.Element.setAttributeNode(org.w3c.dom.Attr),adds a new attribute node.
org.w3c.dom.Element.setAttributeNodeNS(org.w3c.dom.Attr),adds a new attribute.
"org.w3c.dom.Element.setAttributeNS(java.lang.String,java.lang.String,java.lang.String)",adds a new attribute.
"org.w3c.dom.Element.setIdAttribute(java.lang.String,boolean)","if the parameter isid is true, this method declares the specified attribute to be a user-determined id attribute ."
"org.w3c.dom.Element.setIdAttributeNode(org.w3c.dom.Attr,boolean)","if the parameter isid is true, this method declares the specified attribute to be a user-determined id attribute ."
"org.w3c.dom.Element.setIdAttributeNS(java.lang.String,java.lang.String,boolean)","if the parameter isid is true, this method declares the specified attribute to be a user-determined id attribute ."
org.w3c.dom.Entity.getInputEncoding(),"an attribute specifying the encoding used for this entity at the time of parsing, when it is an external parsed entity."
org.w3c.dom.Entity.getNotationName(),"for unparsed entities, the name of the notation for the entity."
org.w3c.dom.Entity.getPublicId(),"the public identifier associated with the entity if specified, and null otherwise."
org.w3c.dom.Entity.getSystemId(),"the system identifier associated with the entity if specified, and null otherwise."
org.w3c.dom.Entity.getXmlEncoding(),"an attribute specifying, as part of the text declaration, the encoding of this entity, when it is an external parsed entity."
org.w3c.dom.Entity.getXmlVersion(),"an attribute specifying, as part of the text declaration, the version number of this entity, when it is an external parsed entity."
org.w3c.dom.NamedNodeMap.getLength(),the number of nodes in this map.
org.w3c.dom.NamedNodeMap.getNamedItem(java.lang.String),retrieves a node specified by name.
"org.w3c.dom.NamedNodeMap.getNamedItemNS(java.lang.String,java.lang.String)",retrieves a node specified by local name and namespace uri.
org.w3c.dom.NamedNodeMap.item(int),returns the indexth item in the map.
org.w3c.dom.NamedNodeMap.removeNamedItem(java.lang.String),removes a node specified by name.
"org.w3c.dom.NamedNodeMap.removeNamedItemNS(java.lang.String,java.lang.String)",removes a node specified by local name and namespace uri.
org.w3c.dom.NamedNodeMap.setNamedItem(org.w3c.dom.Node),adds a node using its nodename attribute.
org.w3c.dom.NamedNodeMap.setNamedItemNS(org.w3c.dom.Node),adds a node using its namespaceuri and localname.
org.w3c.dom.NameList.contains(java.lang.String),test if a name is part of this namelist.
"org.w3c.dom.NameList.containsNS(java.lang.String,java.lang.String)",test if the pair namespaceuri/name is part of this namelist.
org.w3c.dom.NameList.getLength(),the number of pairs (name and namespaceuri) in the list.
org.w3c.dom.NameList.getName(int),returns the indexth name item in the collection.
org.w3c.dom.NameList.getNamespaceURI(int),returns the indexth namespaceuri item in the collection.
org.w3c.dom.Node.appendChild(org.w3c.dom.Node),adds the node newchild to the end of the list of children of this node.
org.w3c.dom.Node.cloneNode(boolean),"returns a duplicate of this node, i."
org.w3c.dom.Node.compareDocumentPosition(org.w3c.dom.Node),"compares the reference node, i."
org.w3c.dom.Node.getAttributes(),a namednodemap containing the attributes of this node (if it is an element) or null otherwise.
org.w3c.dom.Node.getBaseURI(),the absolute base uri of this node or null if the implementation wasn't able to obtain an absolute uri.
org.w3c.dom.Node.getChildNodes(),a nodelist that contains all children of this node.
"org.w3c.dom.Node.getFeature(java.lang.String,java.lang.String)","this method returns a specialized object which implements the specialized apis of the specified feature and version, as specified in ."
org.w3c.dom.Node.getFirstChild(),the first child of this node.
org.w3c.dom.Node.getLastChild(),the last child of this node.
org.w3c.dom.Node.getLocalName(),returns the local part of the qualified name of this node.
org.w3c.dom.Node.getNamespaceURI(),"the namespace uri of this node, or null if it is unspecified (see )."
org.w3c.dom.Node.getNextSibling(),the node immediately following this node.
org.w3c.dom.Node.getNodeName(),"the name of this node, depending on its type; see the table above."
org.w3c.dom.Node.getNodeType(),"a code representing the type of the underlying object, as defined above."
org.w3c.dom.Node.getNodeValue(),"the value of this node, depending on its type; see the table above."
org.w3c.dom.Node.getOwnerDocument(),the document object associated with this node.
org.w3c.dom.Node.getParentNode(),the parent of this node.
org.w3c.dom.Node.getPrefix(),"the namespace prefix of this node, or null if it is unspecified."
org.w3c.dom.Node.getPreviousSibling(),the node immediately preceding this node.
org.w3c.dom.Node.getTextContent(),this attribute returns the text content of this node and its descendants.
org.w3c.dom.Node.getUserData(java.lang.String),retrieves the object associated to a key on a this node.
org.w3c.dom.Node.hasAttributes(),returns whether this node (if it is an element) has any attributes.
org.w3c.dom.Node.hasChildNodes(),returns whether this node has any children.
"org.w3c.dom.Node.insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)",inserts the node newchild before the existing child node refchild.
org.w3c.dom.Node.isDefaultNamespace(java.lang.String),this method checks if the specified namespaceuri is the default namespace or not.
org.w3c.dom.Node.isEqualNode(org.w3c.dom.Node),tests whether two nodes are equal.
org.w3c.dom.Node.isSameNode(org.w3c.dom.Node),returns whether this node is the same node as the given one.
"org.w3c.dom.Node.isSupported(java.lang.String,java.lang.String)","tests whether the dom implementation implements a specific feature and that feature is supported by this node, as specified in ."
org.w3c.dom.Node.lookupNamespaceURI(java.lang.String),"look up the namespace uri associated to the given prefix, starting from this node."
org.w3c.dom.Node.lookupPrefix(java.lang.String),"look up the prefix associated to the given namespace uri, starting from this node."
org.w3c.dom.Node.normalize(),"puts all text nodes in the full depth of the sub-tree underneath this node, including attribute nodes, into a ""normal"" form where only structure (e."
org.w3c.dom.Node.removeChild(org.w3c.dom.Node),"removes the child node indicated by oldchild from the list of children, and returns it."
"org.w3c.dom.Node.replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)","replaces the child node oldchild with newchild in the list of children, and returns the oldchild node."
org.w3c.dom.Node.setNodeValue(java.lang.String),"the value of this node, depending on its type; see the table above."
org.w3c.dom.Node.setPrefix(java.lang.String),"the namespace prefix of this node, or null if it is unspecified."
org.w3c.dom.Node.setTextContent(java.lang.String),this attribute returns the text content of this node and its descendants.
"org.w3c.dom.Node.setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)",associate an object to a key on this node.
org.w3c.dom.NodeList.getLength(),the number of nodes in the list.
org.w3c.dom.NodeList.item(int),returns the indexth item in the collection.
org.w3c.dom.Notation.getPublicId(),the public identifier of this notation.
org.w3c.dom.Notation.getSystemId(),the system identifier of this notation.
org.w3c.dom.ProcessingInstruction.getData(),the content of this processing instruction.
org.w3c.dom.ProcessingInstruction.getTarget(),the target of this processing instruction.
org.w3c.dom.ProcessingInstruction.setData(java.lang.String),the content of this processing instruction.
org.w3c.dom.Text.getWholeText(),"returns all text of text nodes logically-adjacent text nodes to this node, concatenated in document order."
org.w3c.dom.Text.isElementContentWhitespace(),"returns whether this text node contains element content whitespace, often abusively called ""ignorable whitespace""."
org.w3c.dom.Text.replaceWholeText(java.lang.String),replaces the text of the current node and all logically-adjacent text nodes with the specified text.
org.w3c.dom.Text.splitText(int),"breaks this node into two nodes at the specified offset, keeping both in the tree as siblings."
org.w3c.dom.TypeInfo.getTypeName(),"the name of a type declared for the associated element or attribute, or null if unknown."
org.w3c.dom.TypeInfo.getTypeNamespace(),the namespace of the type declared for the associated element or attribute or null if the element does not have declaration or if no namespace information is available.
"org.w3c.dom.TypeInfo.isDerivedFrom(java.lang.String,java.lang.String,int)","this method returns if there is a derivation between the reference type definition, i."
"org.w3c.dom.UserDataHandler.handle(short,java.lang.String,java.lang.Object,org.w3c.dom.Node,org.w3c.dom.Node)",this method is called whenever the node for which this handler is registered is imported or cloned.
org.w3c.dom.bootstrap.DOMImplementationRegistry.addSource(org.w3c.dom.DOMImplementationSource),register an implementation.
org.w3c.dom.bootstrap.DOMImplementationRegistry.getDOMImplementation(java.lang.String),"return the first implementation that has the desired features, or null if none is found."
org.w3c.dom.bootstrap.DOMImplementationRegistry.getDOMImplementationList(java.lang.String),return a list of implementations that support the desired features.
org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance(),obtain a new instance of a domimplementationregistry.
org.w3c.dom.events.Event.getBubbles(),used to indicate whether or not an event is a bubbling event.
org.w3c.dom.events.Event.getCancelable(),used to indicate whether or not an event can have its default action prevented.
org.w3c.dom.events.Event.getCurrentTarget(),used to indicate the eventtarget whose eventlisteners are currently being processed.
org.w3c.dom.events.Event.getEventPhase(),used to indicate which phase of event flow is currently being evaluated.
org.w3c.dom.events.Event.getTarget(),used to indicate the eventtarget to which the event was originally dispatched.
org.w3c.dom.events.Event.getTimeStamp(),used to specify the time (in milliseconds relative to the epoch) at which the event was created.
org.w3c.dom.events.Event.getType(),the name of the event (case-insensitive).
"org.w3c.dom.events.Event.initEvent(java.lang.String,boolean,boolean)",the initevent method is used to initialize the value of an event created through the documentevent interface.
org.w3c.dom.events.Event.preventDefault(),"if an event is cancelable, the preventdefault method is used to signify that the event is to be canceled, meaning any default action normally taken by the implementation as a result of the event will not occur."
org.w3c.dom.events.Event.stopPropagation(),the stoppropagation method is used prevent further propagation of an event during event flow.
org.w3c.dom.events.EventListener.handleEvent(org.w3c.dom.events.Event),this method is called whenever an event occurs of the type for which the eventlistener interface was registered.
"org.w3c.dom.events.EventTarget.addEventListener(java.lang.String,org.w3c.dom.events.EventListener,boolean)",this method allows the registration of event listeners on the event target.
org.w3c.dom.events.EventTarget.dispatchEvent(org.w3c.dom.events.Event),this method allows the dispatch of events into the implementations event model.
"org.w3c.dom.events.EventTarget.removeEventListener(java.lang.String,org.w3c.dom.events.EventListener,boolean)",this method allows the removal of event listeners from the event target.
org.w3c.dom.events.MouseEvent.getAltKey(),used to indicate whether the 'alt' key was depressed during the firing of the event.
org.w3c.dom.events.MouseEvent.getButton(),"during mouse events caused by the depression or release of a mouse button, button is used to indicate which mouse button changed state."
org.w3c.dom.events.MouseEvent.getClientX(),the horizontal coordinate at which the event occurred relative to the dom implementation's client area.
org.w3c.dom.events.MouseEvent.getClientY(),the vertical coordinate at which the event occurred relative to the dom implementation's client area.
org.w3c.dom.events.MouseEvent.getCtrlKey(),used to indicate whether the 'ctrl' key was depressed during the firing of the event.
org.w3c.dom.events.MouseEvent.getMetaKey(),used to indicate whether the 'meta' key was depressed during the firing of the event.
org.w3c.dom.events.MouseEvent.getRelatedTarget(),used to identify a secondary eventtarget related to a ui event.
org.w3c.dom.events.MouseEvent.getScreenX(),the horizontal coordinate at which the event occurred relative to the origin of the screen coordinate system.
org.w3c.dom.events.MouseEvent.getScreenY(),the vertical coordinate at which the event occurred relative to the origin of the screen coordinate system.
org.w3c.dom.events.MouseEvent.getShiftKey(),used to indicate whether the 'shift' key was depressed during the firing of the event.
"org.w3c.dom.events.MouseEvent.initMouseEvent(java.lang.String,boolean,boolean,org.w3c.dom.views.AbstractView,int,int,int,int,int,boolean,boolean,boolean,boolean,short,org.w3c.dom.events.EventTarget)",the initmouseevent method is used to initialize the value of a mouseevent created through the documentevent interface.
org.w3c.dom.events.MutationEvent.getAttrChange(),attrchange indicates the type of change which triggered the domattrmodified event.
org.w3c.dom.events.MutationEvent.getAttrName(),attrname indicates the name of the changed attr node in a domattrmodified event.
org.w3c.dom.events.MutationEvent.getNewValue(),"newvalue indicates the new value of the attr node in domattrmodified events, and of the characterdata node in domcharacterdatamodified events."
org.w3c.dom.events.MutationEvent.getPrevValue(),"prevvalue indicates the previous value of the attr node in domattrmodified events, and of the characterdata node in domcharacterdatamodified events."
org.w3c.dom.events.MutationEvent.getRelatedNode(),relatednode is used to identify a secondary node related to a mutation event.
"org.w3c.dom.events.MutationEvent.initMutationEvent(java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String,short)",the initmutationevent method is used to initialize the value of a mutationevent created through the documentevent interface.
org.w3c.dom.events.UIEvent.getDetail(),"specifies some detail information about the event, depending on the type of event."
org.w3c.dom.events.UIEvent.getView(),the view attribute identifies the abstractview from which the event was generated.
"org.w3c.dom.events.UIEvent.initUIEvent(java.lang.String,boolean,boolean,org.w3c.dom.views.AbstractView,int)",the inituievent method is used to initialize the value of a uievent created through the documentevent interface.
org.w3c.dom.ls.DOMImplementationLS.createLSInput(),create a new empty input source object where lsinput.
org.w3c.dom.ls.DOMImplementationLS.createLSOutput(),create a new empty output destination object where lsoutput.
"org.w3c.dom.ls.DOMImplementationLS.createLSParser(short,java.lang.String)",create a new lsparser.
org.w3c.dom.ls.DOMImplementationLS.createLSSerializer(),create a new lsserializer object.
org.w3c.dom.ls.LSInput.getBaseURI(),the base uri to be used (see section 5.
org.w3c.dom.ls.LSInput.getByteStream(),an attribute of a language and binding dependent type that represents a stream of bytes.
org.w3c.dom.ls.LSInput.getCertifiedText(),"if set to true, assume that the input is certified (see section 2."
org.w3c.dom.ls.LSInput.getCharacterStream(),an attribute of a language and binding dependent type that represents a stream of 16-bit units.
org.w3c.dom.ls.LSInput.getEncoding(),"the character encoding, if known."
org.w3c.dom.ls.LSInput.getPublicId(),the public identifier for this input source.
org.w3c.dom.ls.LSInput.getStringData(),string data to parse.
org.w3c.dom.ls.LSInput.getSystemId(),"the system identifier, a uri reference [ietf rfc 2396], for this input source."
org.w3c.dom.ls.LSInput.setBaseURI(java.lang.String),the base uri to be used (see section 5.
org.w3c.dom.ls.LSInput.setByteStream(java.io.InputStream),an attribute of a language and binding dependent type that represents a stream of bytes.
org.w3c.dom.ls.LSInput.setCertifiedText(boolean),"if set to true, assume that the input is certified (see section 2."
org.w3c.dom.ls.LSInput.setCharacterStream(java.io.Reader),an attribute of a language and binding dependent type that represents a stream of 16-bit units.
org.w3c.dom.ls.LSInput.setEncoding(java.lang.String),"the character encoding, if known."
org.w3c.dom.ls.LSInput.setPublicId(java.lang.String),the public identifier for this input source.
org.w3c.dom.ls.LSInput.setStringData(java.lang.String),string data to parse.
org.w3c.dom.ls.LSInput.setSystemId(java.lang.String),"the system identifier, a uri reference [ietf rfc 2396], for this input source."
org.w3c.dom.ls.LSLoadEvent.getInput(),the input source that was parsed.
org.w3c.dom.ls.LSLoadEvent.getNewDocument(),the document that finished loading.
org.w3c.dom.ls.LSOutput.getByteStream(),an attribute of a language and binding dependent type that represents a writable stream of bytes.
org.w3c.dom.ls.LSOutput.getCharacterStream(),an attribute of a language and binding dependent type that represents a writable stream to which 16-bit units can be output.
org.w3c.dom.ls.LSOutput.getEncoding(),the character encoding to use for the output.
org.w3c.dom.ls.LSOutput.getSystemId(),"the system identifier, a uri reference [ietf rfc 2396], for this output destination."
org.w3c.dom.ls.LSOutput.setByteStream(java.io.OutputStream),an attribute of a language and binding dependent type that represents a writable stream of bytes.
org.w3c.dom.ls.LSOutput.setCharacterStream(java.io.Writer),an attribute of a language and binding dependent type that represents a writable stream to which 16-bit units can be output.
org.w3c.dom.ls.LSOutput.setEncoding(java.lang.String),the character encoding to use for the output.
org.w3c.dom.ls.LSOutput.setSystemId(java.lang.String),"the system identifier, a uri reference [ietf rfc 2396], for this output destination."
org.w3c.dom.ls.LSParser.abort(),abort the loading of the document that is currently being loaded by the lsparser.
org.w3c.dom.ls.LSParser.getAsync(),"true if the lsparser is asynchronous, false if it is synchronous."
org.w3c.dom.ls.LSParser.getBusy(),"true if the lsparser is currently busy loading a document, otherwise false."
org.w3c.dom.ls.LSParser.getDomConfig(),the domconfiguration object used when parsing an input source.
org.w3c.dom.ls.LSParser.getFilter(),"when a filter is provided, the implementation will call out to the filter as it is constructing the dom tree structure."
org.w3c.dom.ls.LSParser.parse(org.w3c.dom.ls.LSInput),parse an xml document from a resource identified by a lsinput.
org.w3c.dom.ls.LSParser.parseURI(java.lang.String),parse an xml document from a location identified by a uri reference [ietf rfc 2396].
"org.w3c.dom.ls.LSParser.parseWithContext(org.w3c.dom.ls.LSInput,org.w3c.dom.Node,short)",parse an xml fragment from a resource identified by a lsinput and insert the content into an existing document at the position specified with the context and action arguments.
org.w3c.dom.ls.LSParser.setFilter(org.w3c.dom.ls.LSParserFilter),"when a filter is provided, the implementation will call out to the filter as it is constructing the dom tree structure."
org.w3c.dom.ls.LSParserFilter.acceptNode(org.w3c.dom.Node),this method will be called by the parser at the completion of the parsing of each node.
org.w3c.dom.ls.LSParserFilter.getWhatToShow(),tells the lsparser what types of nodes to show to the method lsparserfilter.
org.w3c.dom.ls.LSParserFilter.startElement(org.w3c.dom.Element),"the parser will call this method after each element start tag has been scanned, but before the remainder of the element is processed."
org.w3c.dom.ls.LSProgressEvent.getInput(),the input source that is being parsed.
org.w3c.dom.ls.LSProgressEvent.getPosition(),"the current position in the input source, including all external entities and other resources that have been read."
org.w3c.dom.ls.LSProgressEvent.getTotalSize(),"the total size of the document including all external resources, this number might change as a document is being parsed if references to more external resources are seen."
"org.w3c.dom.ls.LSResourceResolver.resolveResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",allow the application to resolve external resources.
org.w3c.dom.ls.LSSerializer.getDomConfig(),the domconfiguration object used by the lsserializer when serializing a dom node.
org.w3c.dom.ls.LSSerializer.getFilter(),"when the application provides a filter, the serializer will call out to the filter before serializing each node."
org.w3c.dom.ls.LSSerializer.getNewLine(),the end-of-line sequence of characters to be used in the xml being written out.
org.w3c.dom.ls.LSSerializer.setFilter(org.w3c.dom.ls.LSSerializerFilter),"when the application provides a filter, the serializer will call out to the filter before serializing each node."
org.w3c.dom.ls.LSSerializer.setNewLine(java.lang.String),the end-of-line sequence of characters to be used in the xml being written out.
"org.w3c.dom.ls.LSSerializer.write(org.w3c.dom.Node,org.w3c.dom.ls.LSOutput)",serialize the specified node as described above in the general description of the lsserializer interface.
org.w3c.dom.ls.LSSerializer.writeToString(org.w3c.dom.Node),serialize the specified node as described above in the general description of the lsserializer interface.
"org.w3c.dom.ls.LSSerializer.writeToURI(org.w3c.dom.Node,java.lang.String)",a convenience method that acts as if lsserializer.
org.w3c.dom.ls.LSSerializerFilter.getWhatToShow(),tells the lsserializer what types of nodes to show to the filter.
org.w3c.dom.views.AbstractView.getDocument(),the source documentview of which this is an abstractview.
org.w3c.dom.views.DocumentView.getDefaultView(),"the default abstractview for this document, or null if none available."
"org.xml.sax.Attributes.getIndex(java.lang.String,java.lang.String)",look up the index of an attribute by namespace name.
org.xml.sax.Attributes.getIndex(java.lang.String),look up the index of an attribute by xml qualified (prefixed) name.
org.xml.sax.Attributes.getLength(),return the number of attributes in the list.
org.xml.sax.Attributes.getLocalName(int),look up an attribute's local name by index.
org.xml.sax.Attributes.getQName(int),look up an attribute's xml qualified (prefixed) name by index.
org.xml.sax.Attributes.getType(int),look up an attribute's type by index.
"org.xml.sax.Attributes.getType(java.lang.String,java.lang.String)",look up an attribute's type by namespace name.
org.xml.sax.Attributes.getType(java.lang.String),look up an attribute's type by xml qualified (prefixed) name.
org.xml.sax.Attributes.getURI(int),look up an attribute's namespace uri by index.
org.xml.sax.Attributes.getValue(int),look up an attribute's value by index.
"org.xml.sax.Attributes.getValue(java.lang.String,java.lang.String)",look up an attribute's value by namespace name.
org.xml.sax.Attributes.getValue(java.lang.String),look up an attribute's value by xml qualified (prefixed) name.
"org.xml.sax.ContentHandler.characters(char[],int,int)",receive notification of character data.
org.xml.sax.ContentHandler.endDocument(),receive notification of the end of a document.
"org.xml.sax.ContentHandler.endElement(java.lang.String,java.lang.String,java.lang.String)",receive notification of the end of an element.
org.xml.sax.ContentHandler.endPrefixMapping(java.lang.String),end the scope of a prefix-uri mapping.
"org.xml.sax.ContentHandler.ignorableWhitespace(char[],int,int)",receive notification of ignorable whitespace in element content.
"org.xml.sax.ContentHandler.processingInstruction(java.lang.String,java.lang.String)",receive notification of a processing instruction.
org.xml.sax.ContentHandler.setDocumentLocator(org.xml.sax.Locator),receive an object for locating the origin of sax document events.
org.xml.sax.ContentHandler.skippedEntity(java.lang.String),receive notification of a skipped entity.
org.xml.sax.ContentHandler.startDocument(),receive notification of the beginning of a document.
"org.xml.sax.ContentHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)",receive notification of the beginning of an element.
"org.xml.sax.ContentHandler.startPrefixMapping(java.lang.String,java.lang.String)",begin the scope of a prefix-uri namespace mapping.
"org.xml.sax.DTDHandler.notationDecl(java.lang.String,java.lang.String,java.lang.String)",receive notification of a notation declaration event.
"org.xml.sax.DTDHandler.unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",receive notification of an unparsed entity declaration event.
"org.xml.sax.EntityResolver.resolveEntity(java.lang.String,java.lang.String)",allow the application to resolve external entities.
org.xml.sax.ErrorHandler.error(org.xml.sax.SAXParseException),receive notification of a recoverable error.
org.xml.sax.ErrorHandler.fatalError(org.xml.sax.SAXParseException),receive notification of a non-recoverable error.
org.xml.sax.ErrorHandler.warning(org.xml.sax.SAXParseException),receive notification of a warning.
org.xml.sax.Locator.getColumnNumber(),return the column number where the current document event ends.
org.xml.sax.Locator.getLineNumber(),return the line number where the current document event ends.
org.xml.sax.Locator.getPublicId(),return the public identifier for the current document event.
org.xml.sax.Locator.getSystemId(),return the system identifier for the current document event.
org.xml.sax.XMLFilter.getParent(),get the parent reader.
org.xml.sax.XMLFilter.setParent(org.xml.sax.XMLReader),set the parent reader.
org.xml.sax.XMLReader.getContentHandler(),return the current content handler.
org.xml.sax.XMLReader.getDTDHandler(),return the current dtd handler.
org.xml.sax.XMLReader.getEntityResolver(),return the current entity resolver.
org.xml.sax.XMLReader.getErrorHandler(),return the current error handler.
org.xml.sax.XMLReader.getFeature(java.lang.String),look up the value of a feature flag.
org.xml.sax.XMLReader.getProperty(java.lang.String),look up the value of a property.
org.xml.sax.XMLReader.parse(org.xml.sax.InputSource),parse an xml document.
org.xml.sax.XMLReader.parse(java.lang.String),parse an xml document from a system identifier (uri).
org.xml.sax.XMLReader.setContentHandler(org.xml.sax.ContentHandler),allow an application to register a content event handler.
org.xml.sax.XMLReader.setDTDHandler(org.xml.sax.DTDHandler),allow an application to register a dtd event handler.
org.xml.sax.XMLReader.setEntityResolver(org.xml.sax.EntityResolver),allow an application to register an entity resolver.
org.xml.sax.XMLReader.setErrorHandler(org.xml.sax.ErrorHandler),allow an application to register an error event handler.
"org.xml.sax.XMLReader.setFeature(java.lang.String,boolean)",set the value of a feature flag.
"org.xml.sax.XMLReader.setProperty(java.lang.String,java.lang.Object)",set the value of a property.
org.xml.sax.InputSource.getByteStream(),get the byte stream for this input source.
org.xml.sax.InputSource.getCharacterStream(),get the character stream for this input source.
org.xml.sax.InputSource.getEncoding(),get the character encoding for a byte stream or uri.
org.xml.sax.InputSource.getPublicId(),get the public identifier for this input source.
org.xml.sax.InputSource.getSystemId(),get the system identifier for this input source.
org.xml.sax.InputSource.setByteStream(java.io.InputStream),set the byte stream for this input source.
org.xml.sax.InputSource.setCharacterStream(java.io.Reader),set the character stream for this input source.
org.xml.sax.InputSource.setEncoding(java.lang.String),"set the character encoding, if known."
org.xml.sax.InputSource.setPublicId(java.lang.String),set the public identifier for this input source.
org.xml.sax.InputSource.setSystemId(java.lang.String),set the system identifier for this input source.
org.xml.sax.SAXException.getCause(),return the cause of the exception.
org.xml.sax.SAXException.getException(),"return the embedded exception, if any."
org.xml.sax.SAXException.getMessage(),return a detail message for this exception.
org.xml.sax.SAXParseException.getColumnNumber(),the column number of the end of the text where the exception occurred.
org.xml.sax.SAXParseException.getLineNumber(),the line number of the end of the text where the exception occurred.
org.xml.sax.SAXParseException.getPublicId(),get the public identifier of the entity where the exception occurred.
org.xml.sax.SAXParseException.getSystemId(),get the system identifier of the entity where the exception occurred.
org.xml.sax.ext.Attributes2.isDeclared(int),returns false unless the attribute was declared in the dtd.
org.xml.sax.ext.Attributes2.isDeclared(java.lang.String),returns false unless the attribute was declared in the dtd.
"org.xml.sax.ext.Attributes2.isDeclared(java.lang.String,java.lang.String)",returns false unless the attribute was declared in the dtd.
org.xml.sax.ext.Attributes2.isSpecified(int),returns true unless the attribute value was provided by dtd defaulting.
"org.xml.sax.ext.Attributes2.isSpecified(java.lang.String,java.lang.String)",returns true unless the attribute value was provided by dtd defaulting.
org.xml.sax.ext.Attributes2.isSpecified(java.lang.String),returns true unless the attribute value was provided by dtd defaulting.
"org.xml.sax.ext.DeclHandler.attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",report an attribute type declaration.
"org.xml.sax.ext.DeclHandler.elementDecl(java.lang.String,java.lang.String)",report an element type declaration.
"org.xml.sax.ext.DeclHandler.externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)",report a parsed external entity declaration.
"org.xml.sax.ext.DeclHandler.internalEntityDecl(java.lang.String,java.lang.String)",report an internal entity declaration.
"org.xml.sax.ext.EntityResolver2.getExternalSubset(java.lang.String,java.lang.String)",allows applications to provide an external subset for documents that don't explicitly define one.
"org.xml.sax.ext.EntityResolver2.resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","allows applications to map references to external entities into input sources, or tell the parser it should use conventional uri resolution."
"org.xml.sax.ext.LexicalHandler.comment(char[],int,int)",report an xml comment anywhere in the document.
org.xml.sax.ext.LexicalHandler.endCDATA(),report the end of a cdata section.
org.xml.sax.ext.LexicalHandler.endDTD(),report the end of dtd declarations.
org.xml.sax.ext.LexicalHandler.endEntity(java.lang.String),report the end of an entity.
org.xml.sax.ext.LexicalHandler.startCDATA(),report the start of a cdata section.
"org.xml.sax.ext.LexicalHandler.startDTD(java.lang.String,java.lang.String,java.lang.String)","report the start of dtd declarations, if any."
org.xml.sax.ext.LexicalHandler.startEntity(java.lang.String),report the beginning of some internal and external xml entities.
org.xml.sax.ext.Locator2.getEncoding(),returns the name of the character encoding for the entity.
org.xml.sax.ext.Locator2.getXMLVersion(),returns the version of xml used for the entity.
"org.xml.sax.ext.Attributes2Impl.addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)","add an attribute to the end of the list, setting its ""specified"" flag to true."
org.xml.sax.ext.Attributes2Impl.isDeclared(int),"returns the current value of the attribute's ""declared"" flag."
"org.xml.sax.ext.Attributes2Impl.isDeclared(java.lang.String,java.lang.String)","returns the current value of the attribute's ""declared"" flag."
org.xml.sax.ext.Attributes2Impl.isDeclared(java.lang.String),"returns the current value of the attribute's ""declared"" flag."
org.xml.sax.ext.Attributes2Impl.isSpecified(int),"returns the current value of an attribute's ""specified"" flag."
"org.xml.sax.ext.Attributes2Impl.isSpecified(java.lang.String,java.lang.String)","returns the current value of an attribute's ""specified"" flag."
org.xml.sax.ext.Attributes2Impl.isSpecified(java.lang.String),"returns the current value of an attribute's ""specified"" flag."
org.xml.sax.ext.Attributes2Impl.setAttributes(org.xml.sax.Attributes),copy an entire attributes object.
"org.xml.sax.ext.Attributes2Impl.setDeclared(int,boolean)","assign a value to the ""declared"" flag of a specific attribute."
"org.xml.sax.ext.Attributes2Impl.setSpecified(int,boolean)","assign a value to the ""specified"" flag of a specific attribute."
"org.xml.sax.ext.DefaultHandler2.getExternalSubset(java.lang.String,java.lang.String)","tells the parser that if no external subset has been declared in the document text, none should be used."
"org.xml.sax.ext.DefaultHandler2.resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",tells the parser to resolve the systemid against the baseuri and read the entity text from that resulting absolute uri.
"org.xml.sax.ext.DefaultHandler2.resolveEntity(java.lang.String,java.lang.String)",invokes entityresolver2.
org.xml.sax.ext.Locator2Impl.getEncoding(),returns the current value of the encoding property.
org.xml.sax.ext.Locator2Impl.getXMLVersion(),returns the current value of the version property.
org.xml.sax.ext.Locator2Impl.setEncoding(java.lang.String),assigns the current value of the encoding property.
org.xml.sax.ext.Locator2Impl.setXMLVersion(java.lang.String),assigns the current value of the version property.
"org.xml.sax.helpers.AttributesImpl.addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",add an attribute to the end of the list.
org.xml.sax.helpers.AttributesImpl.clear(),clear the attribute list for reuse.
"org.xml.sax.helpers.AttributesImpl.getIndex(java.lang.String,java.lang.String)",look up an attribute's index by namespace name.
org.xml.sax.helpers.AttributesImpl.getIndex(java.lang.String),look up an attribute's index by qualified (prefixed) name.
org.xml.sax.helpers.AttributesImpl.getLength(),return the number of attributes in the list.
org.xml.sax.helpers.AttributesImpl.getLocalName(int),return an attribute's local name.
org.xml.sax.helpers.AttributesImpl.getQName(int),return an attribute's qualified (prefixed) name.
org.xml.sax.helpers.AttributesImpl.getType(int),return an attribute's type by index.
"org.xml.sax.helpers.AttributesImpl.getType(java.lang.String,java.lang.String)",look up an attribute's type by namespace-qualified name.
org.xml.sax.helpers.AttributesImpl.getType(java.lang.String),look up an attribute's type by qualified (prefixed) name.
org.xml.sax.helpers.AttributesImpl.getURI(int),return an attribute's namespace uri.
org.xml.sax.helpers.AttributesImpl.getValue(int),return an attribute's value by index.
"org.xml.sax.helpers.AttributesImpl.getValue(java.lang.String,java.lang.String)",look up an attribute's value by namespace-qualified name.
org.xml.sax.helpers.AttributesImpl.getValue(java.lang.String),look up an attribute's value by qualified (prefixed) name.
org.xml.sax.helpers.AttributesImpl.removeAttribute(int),remove an attribute from the list.
"org.xml.sax.helpers.AttributesImpl.setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",set an attribute in the list.
org.xml.sax.helpers.AttributesImpl.setAttributes(org.xml.sax.Attributes),copy an entire attributes object.
"org.xml.sax.helpers.AttributesImpl.setLocalName(int,java.lang.String)",set the local name of a specific attribute.
"org.xml.sax.helpers.AttributesImpl.setQName(int,java.lang.String)",set the qualified name of a specific attribute.
"org.xml.sax.helpers.AttributesImpl.setType(int,java.lang.String)",set the type of a specific attribute.
"org.xml.sax.helpers.AttributesImpl.setURI(int,java.lang.String)",set the namespace uri of a specific attribute.
"org.xml.sax.helpers.AttributesImpl.setValue(int,java.lang.String)",set the value of a specific attribute.
"org.xml.sax.helpers.DefaultHandler.characters(char[],int,int)",receive notification of character data inside an element.
org.xml.sax.helpers.DefaultHandler.endDocument(),receive notification of the end of the document.
"org.xml.sax.helpers.DefaultHandler.endElement(java.lang.String,java.lang.String,java.lang.String)",receive notification of the end of an element.
org.xml.sax.helpers.DefaultHandler.endPrefixMapping(java.lang.String),receive notification of the end of a namespace mapping.
org.xml.sax.helpers.DefaultHandler.error(org.xml.sax.SAXParseException),receive notification of a recoverable parser error.
org.xml.sax.helpers.DefaultHandler.fatalError(org.xml.sax.SAXParseException),report a fatal xml parsing error.
"org.xml.sax.helpers.DefaultHandler.ignorableWhitespace(char[],int,int)",receive notification of ignorable whitespace in element content.
"org.xml.sax.helpers.DefaultHandler.notationDecl(java.lang.String,java.lang.String,java.lang.String)",receive notification of a notation declaration.
"org.xml.sax.helpers.DefaultHandler.processingInstruction(java.lang.String,java.lang.String)",receive notification of a processing instruction.
"org.xml.sax.helpers.DefaultHandler.resolveEntity(java.lang.String,java.lang.String)",resolve an external entity.
org.xml.sax.helpers.DefaultHandler.setDocumentLocator(org.xml.sax.Locator),receive a locator object for document events.
org.xml.sax.helpers.DefaultHandler.skippedEntity(java.lang.String),receive notification of a skipped entity.
org.xml.sax.helpers.DefaultHandler.startDocument(),receive notification of the beginning of the document.
"org.xml.sax.helpers.DefaultHandler.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)",receive notification of the start of an element.
"org.xml.sax.helpers.DefaultHandler.startPrefixMapping(java.lang.String,java.lang.String)",receive notification of the start of a namespace mapping.
"org.xml.sax.helpers.DefaultHandler.unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",receive notification of an unparsed entity declaration.
org.xml.sax.helpers.DefaultHandler.warning(org.xml.sax.SAXParseException),receive notification of a parser warning.
org.xml.sax.helpers.LocatorImpl.getColumnNumber(),return the saved column number (1-based).
org.xml.sax.helpers.LocatorImpl.getLineNumber(),return the saved line number (1-based).
org.xml.sax.helpers.LocatorImpl.getPublicId(),return the saved public identifier.
org.xml.sax.helpers.LocatorImpl.getSystemId(),return the saved system identifier.
org.xml.sax.helpers.LocatorImpl.setColumnNumber(int),set the column number for this locator (1-based).
org.xml.sax.helpers.LocatorImpl.setLineNumber(int),set the line number for this locator (1-based).
org.xml.sax.helpers.LocatorImpl.setPublicId(java.lang.String),set the public identifier for this locator.
org.xml.sax.helpers.LocatorImpl.setSystemId(java.lang.String),set the system identifier for this locator.
"org.xml.sax.helpers.NamespaceSupport.declarePrefix(java.lang.String,java.lang.String)",declare a namespace prefix.
org.xml.sax.helpers.NamespaceSupport.getDeclaredPrefixes(),return an enumeration of all prefixes declared in this context.
org.xml.sax.helpers.NamespaceSupport.getPrefix(java.lang.String),return one of the prefixes mapped to a namespace uri.
org.xml.sax.helpers.NamespaceSupport.getPrefixes(),return an enumeration of all prefixes whose declarations are active in the current context.
org.xml.sax.helpers.NamespaceSupport.getPrefixes(java.lang.String),return an enumeration of all prefixes for a given uri whose declarations are active in the current context.
org.xml.sax.helpers.NamespaceSupport.getURI(java.lang.String),look up a prefix and get the currently-mapped namespace uri.
org.xml.sax.helpers.NamespaceSupport.isNamespaceDeclUris(),returns true if namespace declaration attributes are placed into a namespace.
org.xml.sax.helpers.NamespaceSupport.popContext(),revert to the previous namespace context.
"org.xml.sax.helpers.NamespaceSupport.processName(java.lang.String,java.lang.String[],boolean)","process a raw xml qualified name, after all declarations in the current context have been handled by declareprefix()."
org.xml.sax.helpers.NamespaceSupport.pushContext(),start a new namespace context.
org.xml.sax.helpers.NamespaceSupport.reset(),reset this namespace support object for reuse.
org.xml.sax.helpers.NamespaceSupport.setNamespaceDeclUris(boolean),controls whether namespace declaration attributes are placed into the nsdecl namespace by processname().
"org.xml.sax.helpers.ParserAdapter.characters(char[],int,int)",adapter implementation method; do not call.
org.xml.sax.helpers.ParserAdapter.endDocument(),adapter implementation method; do not call.
org.xml.sax.helpers.ParserAdapter.endElement(java.lang.String),adapter implementation method; do not call.
org.xml.sax.helpers.ParserAdapter.getContentHandler(),return the current content handler.
org.xml.sax.helpers.ParserAdapter.getDTDHandler(),return the current dtd handler.
org.xml.sax.helpers.ParserAdapter.getEntityResolver(),return the current entity resolver.
org.xml.sax.helpers.ParserAdapter.getErrorHandler(),return the current error handler.
org.xml.sax.helpers.ParserAdapter.getFeature(java.lang.String),check a parser feature flag.
org.xml.sax.helpers.ParserAdapter.getProperty(java.lang.String),get a parser property.
"org.xml.sax.helpers.ParserAdapter.ignorableWhitespace(char[],int,int)",adapter implementation method; do not call.
org.xml.sax.helpers.ParserAdapter.parse(java.lang.String),parse an xml document.
org.xml.sax.helpers.ParserAdapter.parse(org.xml.sax.InputSource),parse an xml document.
"org.xml.sax.helpers.ParserAdapter.processingInstruction(java.lang.String,java.lang.String)",adapter implementation method; do not call.
org.xml.sax.helpers.ParserAdapter.setContentHandler(org.xml.sax.ContentHandler),set the content handler.
org.xml.sax.helpers.ParserAdapter.setDocumentLocator(org.xml.sax.Locator),adapter implementation method; do not call.
org.xml.sax.helpers.ParserAdapter.setDTDHandler(org.xml.sax.DTDHandler),set the dtd handler.
org.xml.sax.helpers.ParserAdapter.setEntityResolver(org.xml.sax.EntityResolver),set the entity resolver.
org.xml.sax.helpers.ParserAdapter.setErrorHandler(org.xml.sax.ErrorHandler),set the error handler.
"org.xml.sax.helpers.ParserAdapter.setFeature(java.lang.String,boolean)",set a feature flag for the parser.
"org.xml.sax.helpers.ParserAdapter.setProperty(java.lang.String,java.lang.Object)",set a parser property.
org.xml.sax.helpers.ParserAdapter.startDocument(),adapter implementation method; do not call.
"org.xml.sax.helpers.ParserAdapter.startElement(java.lang.String,org.xml.sax.AttributeList)",adapter implementation method; do not call.
"org.xml.sax.helpers.XMLFilterImpl.characters(char[],int,int)",filter a character data event.
org.xml.sax.helpers.XMLFilterImpl.endDocument(),filter an end document event.
"org.xml.sax.helpers.XMLFilterImpl.endElement(java.lang.String,java.lang.String,java.lang.String)",filter an end element event.
org.xml.sax.helpers.XMLFilterImpl.endPrefixMapping(java.lang.String),filter an end namespace prefix mapping event.
org.xml.sax.helpers.XMLFilterImpl.error(org.xml.sax.SAXParseException),filter an error event.
org.xml.sax.helpers.XMLFilterImpl.fatalError(org.xml.sax.SAXParseException),filter a fatal error event.
org.xml.sax.helpers.XMLFilterImpl.getContentHandler(),get the content event handler.
org.xml.sax.helpers.XMLFilterImpl.getDTDHandler(),get the current dtd event handler.
org.xml.sax.helpers.XMLFilterImpl.getEntityResolver(),get the current entity resolver.
org.xml.sax.helpers.XMLFilterImpl.getErrorHandler(),get the current error event handler.
org.xml.sax.helpers.XMLFilterImpl.getFeature(java.lang.String),look up the value of a feature.
org.xml.sax.helpers.XMLFilterImpl.getParent(),get the parent reader.
org.xml.sax.helpers.XMLFilterImpl.getProperty(java.lang.String),look up the value of a property.
"org.xml.sax.helpers.XMLFilterImpl.ignorableWhitespace(char[],int,int)",filter an ignorable whitespace event.
"org.xml.sax.helpers.XMLFilterImpl.notationDecl(java.lang.String,java.lang.String,java.lang.String)",filter a notation declaration event.
org.xml.sax.helpers.XMLFilterImpl.parse(org.xml.sax.InputSource),parse a document.
org.xml.sax.helpers.XMLFilterImpl.parse(java.lang.String),parse a document.
"org.xml.sax.helpers.XMLFilterImpl.processingInstruction(java.lang.String,java.lang.String)",filter a processing instruction event.
"org.xml.sax.helpers.XMLFilterImpl.resolveEntity(java.lang.String,java.lang.String)",filter an external entity resolution.
org.xml.sax.helpers.XMLFilterImpl.setContentHandler(org.xml.sax.ContentHandler),set the content event handler.
org.xml.sax.helpers.XMLFilterImpl.setDocumentLocator(org.xml.sax.Locator),filter a new document locator event.
org.xml.sax.helpers.XMLFilterImpl.setDTDHandler(org.xml.sax.DTDHandler),set the dtd event handler.
org.xml.sax.helpers.XMLFilterImpl.setEntityResolver(org.xml.sax.EntityResolver),set the entity resolver.
org.xml.sax.helpers.XMLFilterImpl.setErrorHandler(org.xml.sax.ErrorHandler),set the error event handler.
"org.xml.sax.helpers.XMLFilterImpl.setFeature(java.lang.String,boolean)",set the value of a feature.
org.xml.sax.helpers.XMLFilterImpl.setParent(org.xml.sax.XMLReader),set the parent reader.
"org.xml.sax.helpers.XMLFilterImpl.setProperty(java.lang.String,java.lang.Object)",set the value of a property.
org.xml.sax.helpers.XMLFilterImpl.skippedEntity(java.lang.String),filter a skipped entity event.
org.xml.sax.helpers.XMLFilterImpl.startDocument(),filter a start document event.
"org.xml.sax.helpers.XMLFilterImpl.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)",filter a start element event.
"org.xml.sax.helpers.XMLFilterImpl.startPrefixMapping(java.lang.String,java.lang.String)",filter a start namespace prefix mapping event.
"org.xml.sax.helpers.XMLFilterImpl.unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",filter an unparsed entity declaration event.
org.xml.sax.helpers.XMLFilterImpl.warning(org.xml.sax.SAXParseException),filter a warning event.
"org.xml.sax.helpers.XMLReaderAdapter.characters(char[],int,int)",adapt a sax2 characters event.
org.xml.sax.helpers.XMLReaderAdapter.endDocument(),end document event.
"org.xml.sax.helpers.XMLReaderAdapter.endElement(java.lang.String,java.lang.String,java.lang.String)",adapt a sax2 end element event.
org.xml.sax.helpers.XMLReaderAdapter.endPrefixMapping(java.lang.String),adapt a sax2 end prefix mapping event.
"org.xml.sax.helpers.XMLReaderAdapter.ignorableWhitespace(char[],int,int)",adapt a sax2 ignorable whitespace event.
org.xml.sax.helpers.XMLReaderAdapter.parse(java.lang.String),parse the document.
org.xml.sax.helpers.XMLReaderAdapter.parse(org.xml.sax.InputSource),parse the document.
"org.xml.sax.helpers.XMLReaderAdapter.processingInstruction(java.lang.String,java.lang.String)",adapt a sax2 processing instruction event.
org.xml.sax.helpers.XMLReaderAdapter.setDocumentHandler(org.xml.sax.DocumentHandler),register the sax1 document event handler.
org.xml.sax.helpers.XMLReaderAdapter.setDocumentLocator(org.xml.sax.Locator),set a document locator.
org.xml.sax.helpers.XMLReaderAdapter.setDTDHandler(org.xml.sax.DTDHandler),register the dtd event handler.
org.xml.sax.helpers.XMLReaderAdapter.setEntityResolver(org.xml.sax.EntityResolver),register the entity resolver.
org.xml.sax.helpers.XMLReaderAdapter.setErrorHandler(org.xml.sax.ErrorHandler),register the error event handler.
org.xml.sax.helpers.XMLReaderAdapter.setLocale(java.util.Locale),set the locale for error reporting.
org.xml.sax.helpers.XMLReaderAdapter.skippedEntity(java.lang.String),adapt a sax2 skipped entity event.
org.xml.sax.helpers.XMLReaderAdapter.startDocument(),start document event.
"org.xml.sax.helpers.XMLReaderAdapter.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)",adapt a sax2 start element event.
"org.xml.sax.helpers.XMLReaderAdapter.startPrefixMapping(java.lang.String,java.lang.String)",adapt a sax2 start prefix mapping event.
org.xml.sax.helpers.XMLReaderFactory.createXMLReader(),attempt to create an xmlreader from system defaults.
org.xml.sax.helpers.XMLReaderFactory.createXMLReader(java.lang.String),attempt to create an xml reader from a class name.
java.lang.invoke.MethodHandles.Lookup.unreflectConstructor(java.lang.reflect.Constructor),produces a method handle for a reflected constructor.
"java.net.URL.set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)",sets the fields of the url.
"java.net.URL.set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",sets the specified 8 fields of the url.
"javax.crypto.SecretKeyFactory.getKeySpec(javax.crypto.SecretKey,java.lang.Class)",returns a specification (key material) of the given key object in the requested format.
"javax.crypto.SecretKeyFactorySpi.engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class)",returns a specification (key material) of the given key object in the requested format.
javax.swing.JComponent.getAccessibleContext(),returns the accessiblecontext associated with this jcomponent.
"java.io.Console.format(java.lang.String,java.lang.Object)",writes a formatted string to this console's output stream using the specified format string and arguments.
"java.io.Console.printf(java.lang.String,java.lang.Object)",a convenience method to write a formatted string to this console's output stream using the specified format string and arguments.
"java.io.Console.readLine(java.lang.String,java.lang.Object)","provides a formatted prompt, then reads a single line of text from the console."
"java.io.Console.readPassword(java.lang.String,java.lang.Object)","provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled."
java.io.ObjectInputStream.resolveProxyClass(java.lang.String),"returns a proxy class that implements the interfaces named in a proxy class descriptor; subclasses may implement this method to read custom data from the stream along with the descriptors for dynamic proxy classes, allowing them to use an alternate loading mechanism for the interfaces and the proxy class."
"java.io.PrintStream.format(java.util.Locale,java.lang.String,java.lang.Object)",writes a formatted string to this output stream using the specified format string and arguments.
"java.io.PrintStream.format(java.lang.String,java.lang.Object)",writes a formatted string to this output stream using the specified format string and arguments.
"java.io.PrintStream.printf(java.lang.String,java.lang.Object)",a convenience method to write a formatted string to this output stream using the specified format string and arguments.
"java.io.PrintStream.printf(java.util.Locale,java.lang.String,java.lang.Object)",a convenience method to write a formatted string to this output stream using the specified format string and arguments.
"java.io.PrintWriter.format(java.util.Locale,java.lang.String,java.lang.Object)",writes a formatted string to this writer using the specified format string and arguments.
"java.io.PrintWriter.format(java.lang.String,java.lang.Object)",writes a formatted string to this writer using the specified format string and arguments.
"java.io.PrintWriter.printf(java.lang.String,java.lang.Object)",a convenience method to write a formatted string to this writer using the specified format string and arguments.
"java.io.PrintWriter.printf(java.util.Locale,java.lang.String,java.lang.Object)",a convenience method to write a formatted string to this writer using the specified format string and arguments.
java.io.RandomAccessFile.finalize(),called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
java.lang.SuppressWarnings.value(),the set of warnings that are to be suppressed by the compiler in the annotated element.
java.lang.Comparable.compareTo(T),compares this object with the specified object for order.
java.lang.Iterable.forEach(java.util.function.Consumer<? super T>),performs the given action for each element of the iterable until all elements have been processed or the action throws an exception.
java.lang.Class.getConstructor(java.lang.Class<?>),returns a constructor object that reflects the specified public constructor of the class represented by this class object.
java.lang.Class.getDeclaredConstructor(java.lang.Class<?>),returns a constructor object that reflects the specified constructor of the class or interface represented by this class object.
"java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>)",returns a method object that reflects the specified declared method of the class or interface represented by this class object.
"java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>)",returns a method object that reflects the specified public member method of the class or interface represented by this class object.
"java.lang.ClassLoader.setSigners(java.lang.Class<?>,java.lang.Object)",sets the signers of a class.
java.lang.Enum.compareTo(E),compares this enum with the specified object for order.
java.lang.InheritableThreadLocal.childValue(T),computes the child's initial value for this inheritable thread-local variable as a function of the parent's value at the time the child thread is created.
java.lang.ProcessBuilder.command(java.lang.String),sets this process builder's operating system program and arguments.
"java.lang.Runtime.exec(java.lang.String,java.lang.String)",executes the specified command and arguments in a separate process with the specified environment.
"java.lang.Runtime.exec(java.lang.String,java.lang.String,java.io.File)",executes the specified command and arguments in a separate process with the specified environment and working directory.
"java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object)","returns a formatted string using the specified locale, format string, and arguments."
"java.lang.String.format(java.lang.String,java.lang.Object)",returns a formatted string using the specified format string and arguments.
"java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence)",returns a new string composed of copies of the charsequence elements joined together with a copy of the specified delimiter.
java.lang.Thread.enumerate(java.lang.Thread),copies into the specified array every active thread in the current thread's thread group and its subgroups.
java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup),copies into the specified array references to every active subgroup in this thread group and its subgroups.
"java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup,boolean)",copies into the specified array references to every active subgroup in this thread group.
java.lang.ThreadGroup.enumerate(java.lang.Thread),copies into the specified array every active thread in this thread group and its subgroups.
"java.lang.ThreadGroup.enumerate(java.lang.Thread,boolean)",copies into the specified array every active thread in this thread group.
java.lang.ThreadLocal.set(T),sets the current thread's copy of this thread-local variable to the specified value.
java.lang.Throwable.setStackTrace(java.lang.StackTraceElement),sets the stack trace elements that will be returned by getstacktrace() and printed by printstacktrace() and related methods.
java.lang.annotation.Repeatable.value(),indicates the containing annotation type for the repeatable annotation type.
java.lang.annotation.Retention.value(),returns the retention policy.
java.lang.annotation.Target.value(),returns an array of the kinds of elements an annotation type can be applied to.
java.lang.invoke.MethodHandle.invoke(java.lang.Object),"invokes the method handle, allowing any caller type descriptor, and optionally performing conversions on arguments and return values."
java.lang.invoke.MethodHandle.invokeExact(java.lang.Object),"invokes the method handle, allowing any caller type descriptor, but requiring an exact type match."
java.lang.invoke.MethodHandle.invokeWithArguments(java.lang.Object),"performs a variable arity invocation, passing the arguments in the given list to the method handle, as if via an inexact invoke from a call site which mentions only the type object, and whose arity is the length of the argument list."
"java.lang.invoke.MethodHandles.dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class<?>)",produces a method handle which will discard some dummy arguments before calling some other specified target method handle.
"java.lang.invoke.MethodHandles.filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)","adapts a target method handle by pre-processing one or more of its arguments, each with its own unary filter function, and then calling the target with each pre-processed argument replaced by the result of its corresponding filter function."
"java.lang.invoke.MethodHandles.insertArguments(java.lang.invoke.MethodHandle,int,java.lang.Object)",provides a target method handle with one or more bound arguments in advance of the method handle's invocation.
java.lang.invoke.MethodType.appendParameterTypes(java.lang.Class<?>),finds or creates a method type with additional parameter types.
"java.lang.invoke.MethodType.insertParameterTypes(int,java.lang.Class<?>)",finds or creates a method type with additional parameter types.
"java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.lang.Class<?>,java.lang.Class<?>)",finds or creates a method type with the given components.
"java.lang.reflect.InvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object)",processes a method invocation on a proxy instance and returns the result.
"java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject,boolean)",convenience method to set the accessible flag for an array of objects with a single security check (for efficiency).
java.lang.reflect.Constructor.newInstance(java.lang.Object),"uses the constructor represented by this constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters."
java.lang.reflect.Executable.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>),"returns true if an annotation for the specified type is present on this element, else false."
java.lang.reflect.Field.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>),"returns true if an annotation for the specified type is present on this element, else false."
"java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object)","invokes the underlying method represented by this method object, on the specified object with the specified parameters."
"java.lang.reflect.Proxy.getProxyClass(java.lang.ClassLoader,java.lang.Class<?>)",returns the java.
"java.lang.reflect.Proxy.newProxyInstance(java.lang.ClassLoader,java.lang.Class<?>,java.lang.reflect.InvocationHandler)",returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.
"java.net.ContentHandler.getContent(java.net.URLConnection,java.lang.Class)","given a url connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object that matches one of the types specified."
java.net.URL.getContent(java.lang.Class),gets the contents of this url.
"java.net.URLClassLoader.newInstance(java.net.URL,java.lang.ClassLoader)",creates a new instance of urlclassloader for the specified urls and parent class loader.
java.net.URLClassLoader.newInstance(java.net.URL),creates a new instance of urlclassloader for the specified urls and default parent class loader.
java.net.URLConnection.getContent(java.lang.Class),retrieves the contents of this url connection.
"java.nio.channels.CompletionHandler.completed(V,A)",invoked when an operation has completed.
"java.nio.channels.CompletionHandler.failed(java.lang.Throwable,A)",invoked when an operation fails.
java.nio.channels.GatheringByteChannel.write(java.nio.ByteBuffer),writes a sequence of bytes to this channel from the given buffers.
"java.nio.channels.GatheringByteChannel.write(java.nio.ByteBuffer,int,int)",writes a sequence of bytes to this channel from a subsequence of the given buffers.
"java.nio.channels.ScatteringByteChannel.read(java.nio.ByteBuffer,int,int)",reads a sequence of bytes from this channel into a subsequence of the given buffers.
java.nio.channels.ScatteringByteChannel.read(java.nio.ByteBuffer),reads a sequence of bytes from this channel into the given buffers.
"java.nio.channels.AsynchronousFileChannel.open(java.nio.file.Path,java.nio.file.OpenOption)","opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file."
"java.nio.channels.AsynchronousFileChannel.open(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute<?>)","opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file."
"java.nio.channels.DatagramChannel.read(java.nio.ByteBuffer,int,int)",reads a datagram from this channel.
"java.nio.channels.DatagramChannel.write(java.nio.ByteBuffer,int,int)",writes a datagram to this channel.
"java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption)","opens or creates a file, returning a file channel to access the file."
"java.nio.channels.FileChannel.open(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>)","opens or creates a file, returning a file channel to access the file."
"java.nio.channels.FileChannel.read(java.nio.ByteBuffer,int,int)",reads a sequence of bytes from this channel into a subsequence of the given buffers.
"java.nio.channels.FileChannel.write(java.nio.ByteBuffer,int,int)",writes a sequence of bytes to this channel from a subsequence of the given buffers.
"java.nio.channels.SocketChannel.read(java.nio.ByteBuffer,int,int)",reads a sequence of bytes from this channel into a subsequence of the given buffers.
"java.nio.channels.SocketChannel.write(java.nio.ByteBuffer,int,int)",writes a sequence of bytes to this channel from a subsequence of the given buffers.
java.nio.file.DirectoryStream.Filter.accept(T),decides if the given directory entry should be accepted or filtered.
"java.nio.file.FileVisitor.postVisitDirectory(T,java.io.IOException)","invoked for a directory after entries in the directory, and all of their descendants, have been visited."
"java.nio.file.FileVisitor.preVisitDirectory(T,java.nio.file.attribute.BasicFileAttributes)",invoked for a directory before entries in the directory are visited.
"java.nio.file.FileVisitor.visitFile(T,java.nio.file.attribute.BasicFileAttributes)",invoked for a file in a directory.
"java.nio.file.FileVisitor.visitFileFailed(T,java.io.IOException)",invoked for a file that could not be visited.
"java.nio.file.Path.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>)",registers the file located by this path with a watch service.
"java.nio.file.Path.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>,java.nio.file.WatchEvent.Modifier)",registers the file located by this path with a watch service.
java.nio.file.Path.toRealPath(java.nio.file.LinkOption),returns the real path of an existing file.
java.nio.file.SecureDirectoryStream.deleteDirectory(T),deletes a directory.
java.nio.file.SecureDirectoryStream.deleteFile(T),deletes a file.
"java.nio.file.SecureDirectoryStream.move(T,java.nio.file.SecureDirectoryStream<T>,T)",move a file from this directory to another directory.
"java.nio.file.SecureDirectoryStream.newByteChannel(T,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>)","opens or creates a file in this directory, returning a seekable byte channel to access the file."
"java.nio.file.SecureDirectoryStream.newDirectoryStream(T,java.nio.file.LinkOption)","opens the directory identified by the given path, returning a securedirectorystream to iterate over the entries in the directory."
"java.nio.file.Watchable.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>,java.nio.file.WatchEvent.Modifier)",registers an object with a watch service.
"java.nio.file.Watchable.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>)",registers an object with a watch service.
"java.nio.file.Files.copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption)",copy a file to a target file.
"java.nio.file.Files.copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption)",copies all bytes from an input stream to a file.
"java.nio.file.Files.createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>)",creates a directory by creating all nonexistent parent directories first.
"java.nio.file.Files.createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>)",creates a new directory.
"java.nio.file.Files.createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>)","creates a new and empty file, failing if the file already exists."
"java.nio.file.Files.createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>)",creates a symbolic link to a target (optional operation).
"java.nio.file.Files.createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute<?>)","creates a new directory in the default temporary-file directory, using the given prefix to generate its name."
"java.nio.file.Files.createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute<?>)","creates a new directory in the specified directory, using the given prefix to generate its name."
"java.nio.file.Files.createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute<?>)","creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name."
"java.nio.file.Files.createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute<?>)","creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name."
"java.nio.file.Files.exists(java.nio.file.Path,java.nio.file.LinkOption)",tests whether a file exists.
"java.nio.file.Files.getAttribute(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption)",reads the value of a file attribute.
"java.nio.file.Files.getFileAttributeView(java.nio.file.Path,java.lang.Class<V>,java.nio.file.LinkOption)",returns a file attribute view of a given type.
"java.nio.file.Files.getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption)",returns a file's last modified time.
"java.nio.file.Files.getOwner(java.nio.file.Path,java.nio.file.LinkOption)",returns the owner of a file.
"java.nio.file.Files.getPosixFilePermissions(java.nio.file.Path,java.nio.file.LinkOption)",returns a file's posix file permissions.
"java.nio.file.Files.isDirectory(java.nio.file.Path,java.nio.file.LinkOption)",tests whether a file is a directory.
"java.nio.file.Files.isRegularFile(java.nio.file.Path,java.nio.file.LinkOption)",tests whether a file is a regular file with opaque content.
"java.nio.file.Files.move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption)",move or rename a file to a target file.
"java.nio.file.Files.newBufferedWriter(java.nio.file.Path,java.nio.file.OpenOption)","opens or creates a file for writing, returning a bufferedwriter to write text to the file in an efficient manner."
"java.nio.file.Files.newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption)","opens or creates a file for writing, returning a bufferedwriter that may be used to write text to the file in an efficient manner."
"java.nio.file.Files.newByteChannel(java.nio.file.Path,java.nio.file.OpenOption)","opens or creates a file, returning a seekable byte channel to access the file."
"java.nio.file.Files.newByteChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>)","opens or creates a file, returning a seekable byte channel to access the file."
"java.nio.file.Files.newInputStream(java.nio.file.Path,java.nio.file.OpenOption)","opens a file, returning an input stream to read from the file."
"java.nio.file.Files.newOutputStream(java.nio.file.Path,java.nio.file.OpenOption)","opens or creates a file, returning an output stream that may be used to write bytes to the file."
"java.nio.file.Files.notExists(java.nio.file.Path,java.nio.file.LinkOption)",tests whether the file located by this path does not exist.
"java.nio.file.Files.readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption)",reads a set of file attributes as a bulk operation.
"java.nio.file.Files.setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption)",sets the value of a file attribute.
"java.nio.file.Files.walk(java.nio.file.Path,java.nio.file.FileVisitOption)",return a stream that is lazily populated with path by walking the file tree rooted at a given starting file.
"java.nio.file.Files.walk(java.nio.file.Path,int,java.nio.file.FileVisitOption)",return a stream that is lazily populated with path by walking the file tree rooted at a given starting file.
"java.nio.file.Files.write(java.nio.file.Path,java.lang.Iterable<? extends java.lang.CharSequence>,java.nio.file.OpenOption)",write lines of text to a file.
"java.nio.file.Files.write(java.nio.file.Path,java.lang.Iterable<? extends java.lang.CharSequence>,java.nio.charset.Charset,java.nio.file.OpenOption)",write lines of text to a file.
"java.nio.file.Files.write(java.nio.file.Path,byte[],java.nio.file.OpenOption)",writes bytes to a file.
"java.nio.file.FileSystem.getPath(java.lang.String,java.lang.String)","converts a path string, or a sequence of strings that when joined form a path string, to a path."
"java.nio.file.Paths.get(java.lang.String,java.lang.String)","converts a path string, or a sequence of strings that when joined form a path string, to a path."
"java.nio.file.SimpleFileVisitor.postVisitDirectory(T,java.io.IOException)","invoked for a directory after entries in the directory, and all of their descendants, have been visited."
"java.nio.file.SimpleFileVisitor.preVisitDirectory(T,java.nio.file.attribute.BasicFileAttributes)",invoked for a directory before entries in the directory are visited.
"java.nio.file.SimpleFileVisitor.visitFile(T,java.nio.file.attribute.BasicFileAttributes)",invoked for a file in a directory.
"java.nio.file.SimpleFileVisitor.visitFileFailed(T,java.io.IOException)",invoked for a file that could not be visited.
java.nio.file.attribute.AclEntry.Builder.setFlags(java.nio.file.attribute.AclEntryFlag),sets the flags component of this builder.
java.nio.file.attribute.AclEntry.Builder.setPermissions(java.nio.file.attribute.AclEntryPermission),sets the permissions component of this builder.
"java.nio.file.spi.FileSystemProvider.checkAccess(java.nio.file.Path,java.nio.file.AccessMode)","checks the existence, and optionally the accessibility, of a file."
"java.nio.file.spi.FileSystemProvider.copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption)",copy a file to a target file.
"java.nio.file.spi.FileSystemProvider.createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>)",creates a new directory.
"java.nio.file.spi.FileSystemProvider.createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>)",creates a symbolic link to a target.
"java.nio.file.spi.FileSystemProvider.getFileAttributeView(java.nio.file.Path,java.lang.Class<V>,java.nio.file.LinkOption)",returns a file attribute view of a given type.
"java.nio.file.spi.FileSystemProvider.move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption)",move or rename a file to a target file.
"java.nio.file.spi.FileSystemProvider.newAsynchronousFileChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute<?>)","opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file."
"java.nio.file.spi.FileSystemProvider.newByteChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>)","opens or creates a file, returning a seekable byte channel to access the file."
"java.nio.file.spi.FileSystemProvider.newFileChannel(java.nio.file.Path,java.util.Set<? extends java.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>)","opens or creates a file for reading and/or writing, returning a file channel to access the file."
"java.nio.file.spi.FileSystemProvider.newInputStream(java.nio.file.Path,java.nio.file.OpenOption)","opens a file, returning an input stream to read from the file."
"java.nio.file.spi.FileSystemProvider.newOutputStream(java.nio.file.Path,java.nio.file.OpenOption)","opens or creates a file, returning an output stream that may be used to write bytes to the file."
"java.nio.file.spi.FileSystemProvider.readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption)",reads a set of file attributes as a bulk operation.
"java.nio.file.spi.FileSystemProvider.setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption)",sets the value of a file attribute.
"java.security.KeyStore.setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate)","assigns the given key to the given alias, protecting it with the given password."
"java.security.KeyStore.setKeyEntry(java.lang.String,byte[],java.security.cert.Certificate)",assigns the given key (that has already been protected) to the given alias.
"java.security.KeyStoreSpi.engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate)","assigns the given key to the given alias, protecting it with the given password."
"java.security.KeyStoreSpi.engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate)",assigns the given key (that has already been protected) to the given alias.
"java.sql.Connection.createArrayOf(java.lang.String,java.lang.Object)",factory method for creating array objects.
"java.sql.Connection.createStruct(java.lang.String,java.lang.Object)",factory method for creating struct objects.
"java.sql.Connection.prepareStatement(java.lang.String,java.lang.String)",creates a default preparedstatement object capable of returning the auto-generated keys designated by the given array.
"java.sql.DatabaseMetaData.getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",retrieves a description of the tables available in the given catalog.
"java.sql.Statement.execute(java.lang.String,java.lang.String)","executes the given sql statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval."
"java.sql.Statement.executeUpdate(java.lang.String,java.lang.String)",executes the given sql statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval.
java.text.AttributedString.getIterator(java.text.AttributedCharacterIterator.Attribute),creates an attributedcharacteriterator instance that provides access to selected contents of this string.
"java.text.AttributedString.getIterator(java.text.AttributedCharacterIterator.Attribute,int,int)",creates an attributedcharacteriterator instance that provides access to selected contents of this string.
"java.text.Bidi.reorderVisually(byte[],int,java.lang.Object,int,int)",reorder the objects in the array into visual order based on their levels.
"java.text.ChoiceFormat.setChoices(double[],java.lang.String)",set the choices to be used in formatting.
java.text.DateFormatSymbols.setAmPmStrings(java.lang.String),sets ampm strings.
java.text.DateFormatSymbols.setEras(java.lang.String),sets era strings.
java.text.DateFormatSymbols.setMonths(java.lang.String),sets month strings.
java.text.DateFormatSymbols.setShortMonths(java.lang.String),sets short month strings.
java.text.DateFormatSymbols.setShortWeekdays(java.lang.String),sets short weekday strings.
java.text.DateFormatSymbols.setWeekdays(java.lang.String),sets weekday strings.
java.text.DateFormatSymbols.setZoneStrings(java.lang.String),sets time zone strings.
java.text.DecimalFormat.isGroupingUsed(),returns true if grouping is used in this format.
java.text.DecimalFormat.isParseIntegerOnly(),returns true if this format will parse numbers as integers only.
java.text.DecimalFormat.setParseIntegerOnly(boolean),sets whether or not numbers should be parsed as integers only.
"java.text.MessageFormat.format(java.lang.String,java.lang.Object)",creates a messageformat with the given pattern and uses it to format the given arguments.
java.text.MessageFormat.setFormats(java.text.Format),sets the formats to use for the format elements in the previously set pattern string.
java.text.MessageFormat.setFormatsByArgumentIndex(java.text.Format),sets the formats to use for the values passed into format methods or returned from parse methods.
"java.time.format.DateTimeFormatter.parseBest(java.lang.CharSequence,java.time.temporal.TemporalQuery<?>)",fully parses the text producing an object of one of the specified types.
java.time.format.DateTimeFormatter.withResolverFields(java.time.temporal.TemporalField),returns a copy of this formatter with a new set of resolver fields.
java.util.Collection.add(E),ensures that this collection contains the specified element (optional operation).
java.util.Collection.addAll(java.util.Collection<? extends E>),adds all of the elements in the specified collection to this collection (optional operation).
java.util.Collection.removeIf(java.util.function.Predicate<? super E>),removes all of the elements of this collection that satisfy the given predicate.
"java.util.Comparator.compare(T,T)",compares its two arguments for order.
java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>),returns a lexicographic-order comparator with a function that extracts a double sort key.
java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>),returns a lexicographic-order comparator with a function that extracts a int sort key.
java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>),returns a lexicographic-order comparator with a function that extracts a long sort key.
java.util.Deque.add(E),"inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an illegalstateexception if no space is currently available."
java.util.Deque.addFirst(E),"inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.Deque.addLast(E),"inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.Deque.offer(E),"inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
java.util.Deque.offerFirst(E),inserts the specified element at the front of this deque unless it would violate capacity restrictions.
java.util.Deque.offerLast(E),inserts the specified element at the end of this deque unless it would violate capacity restrictions.
java.util.Deque.push(E),"pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>),performs the given action for each remaining element until all elements have been processed or the action throws an exception.
java.util.List.add(E),appends the specified element to the end of this list (optional operation).
"java.util.List.add(int,E)",inserts the specified element at the specified position in this list (optional operation).
java.util.List.addAll(java.util.Collection<? extends E>),"appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation)."
"java.util.List.addAll(int,java.util.Collection<? extends E>)",inserts all of the elements in the specified collection into this list at the specified position (optional operation).
java.util.List.replaceAll(java.util.function.UnaryOperator<E>),replaces each element of this list with the result of applying the operator to that element.
"java.util.List.set(int,E)",replaces the element at the specified position in this list with the specified element (optional operation).
java.util.List.sort(java.util.Comparator<? super E>),sorts this list according to the order induced by the specified comparator.
java.util.ListIterator.add(E),inserts the specified element into the list (optional operation).
java.util.ListIterator.set(E),replaces the last element returned by next() or previous() with the specified element (optional operation).
"java.util.Map.compute(K,java.util.function.BiFunction<? super,? super,? extends V>)",attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
"java.util.Map.computeIfAbsent(K,java.util.function.Function<? super,? extends V>)","if the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null."
"java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super,? super,? extends V>)","if the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
"java.util.Map.forEach(java.util.function.BiConsumer<? super,? super V>)",performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
"java.util.Map.getOrDefault(java.lang.Object,V)","returns the value to which the specified key is mapped, or defaultvalue if this map contains no mapping for the key."
"java.util.Map.merge(K,V,java.util.function.BiFunction<? super,? super,? extends V>)","if the specified key is not already associated with a value or is associated with null, associates it with the given non-null value."
"java.util.Map.put(K,V)",associates the specified value with the specified key in this map (optional operation).
"java.util.Map.putAll(java.util.Map<? extends,? extends V>)",copies all of the mappings from the specified map to this map (optional operation).
"java.util.Map.putIfAbsent(K,V)","if the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value."
"java.util.Map.replace(K,V,V)",replaces the entry for the specified key only if currently mapped to the specified value.
"java.util.Map.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)",replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
java.util.Map.Entry.setValue(V),replaces the value corresponding to this entry with the specified value (optional operation).
java.util.NavigableMap.ceilingEntry(K),"returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key."
java.util.NavigableMap.ceilingKey(K),"returns the least key greater than or equal to the given key, or null if there is no such key."
java.util.NavigableMap.floorEntry(K),"returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key."
java.util.NavigableMap.floorKey(K),"returns the greatest key less than or equal to the given key, or null if there is no such key."
java.util.NavigableMap.headMap(K),returns a view of the portion of this map whose keys are strictly less than tokey.
"java.util.NavigableMap.headMap(K,boolean)","returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) tokey."
java.util.NavigableMap.higherEntry(K),"returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key."
java.util.NavigableMap.higherKey(K),"returns the least key strictly greater than the given key, or null if there is no such key."
java.util.NavigableMap.lowerEntry(K),"returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key."
java.util.NavigableMap.lowerKey(K),"returns the greatest key strictly less than the given key, or null if there is no such key."
"java.util.NavigableMap.subMap(K,K)","returns a view of the portion of this map whose keys range from fromkey, inclusive, to tokey, exclusive."
"java.util.NavigableMap.subMap(K,boolean,K,boolean)",returns a view of the portion of this map whose keys range from fromkey to tokey.
"java.util.NavigableMap.tailMap(K,boolean)","returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromkey."
java.util.NavigableMap.tailMap(K),returns a view of the portion of this map whose keys are greater than or equal to fromkey.
java.util.NavigableSet.ceiling(E),"returns the least element in this set greater than or equal to the given element, or null if there is no such element."
java.util.NavigableSet.floor(E),"returns the greatest element in this set less than or equal to the given element, or null if there is no such element."
"java.util.NavigableSet.headSet(E,boolean)","returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toelement."
java.util.NavigableSet.headSet(E),returns a view of the portion of this set whose elements are strictly less than toelement.
java.util.NavigableSet.higher(E),"returns the least element in this set strictly greater than the given element, or null if there is no such element."
java.util.NavigableSet.lower(E),"returns the greatest element in this set strictly less than the given element, or null if there is no such element."
"java.util.NavigableSet.subSet(E,boolean,E,boolean)",returns a view of the portion of this set whose elements range from fromelement to toelement.
"java.util.NavigableSet.subSet(E,E)","returns a view of the portion of this set whose elements range from fromelement, inclusive, to toelement, exclusive."
java.util.NavigableSet.tailSet(E),returns a view of the portion of this set whose elements are greater than or equal to fromelement.
"java.util.NavigableSet.tailSet(E,boolean)","returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromelement."
java.util.PrimitiveIterator.forEachRemaining(T_CONS),"performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception."
java.util.Queue.add(E),"inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an illegalstateexception if no space is currently available."
java.util.Queue.offer(E),inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.
java.util.Set.add(E),adds the specified element to this set if it is not already present (optional operation).
java.util.Set.addAll(java.util.Collection<? extends E>),adds all of the elements in the specified collection to this set if they're not already present (optional operation).
java.util.SortedMap.headMap(K),returns a view of the portion of this map whose keys are strictly less than tokey.
"java.util.SortedMap.subMap(K,K)","returns a view of the portion of this map whose keys range from fromkey, inclusive, to tokey, exclusive."
java.util.SortedMap.tailMap(K),returns a view of the portion of this map whose keys are greater than or equal to fromkey.
java.util.SortedSet.headSet(E),returns a view of the portion of this set whose elements are strictly less than toelement.
"java.util.SortedSet.subSet(E,E)","returns a view of the portion of this set whose elements range from fromelement, inclusive, to toelement, exclusive."
java.util.SortedSet.tailSet(E),returns a view of the portion of this set whose elements are greater than or equal to fromelement.
java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super T>),"performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception."
java.util.Spliterator.tryAdvance(java.util.function.Consumer<? super T>),"if a remaining element exists, performs the given action on it, returning true; else returns false."
java.util.Spliterator.OfPrimitive.forEachRemaining(T_CONS),"performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception."
java.util.Spliterator.OfPrimitive.tryAdvance(T_CONS),"if a remaining element exists, performs the given action on it, returning true; else returns false."
java.util.AbstractCollection.add(E),ensures that this collection contains the specified element (optional operation).
java.util.AbstractCollection.addAll(java.util.Collection<? extends E>),adds all of the elements in the specified collection to this collection (optional operation).
"java.util.AbstractList.add(int,E)",inserts the specified element at the specified position in this list (optional operation).
java.util.AbstractList.add(E),appends the specified element to the end of this list (optional operation).
"java.util.AbstractList.addAll(int,java.util.Collection<? extends E>)",inserts all of the elements in the specified collection into this list at the specified position (optional operation).
"java.util.AbstractList.set(int,E)",replaces the element at the specified position in this list with the specified element (optional operation).
"java.util.AbstractMap.put(K,V)",associates the specified value with the specified key in this map (optional operation).
"java.util.AbstractMap.putAll(java.util.Map<? extends,? extends V>)",copies all of the mappings from the specified map to this map (optional operation).
java.util.AbstractMap.SimpleEntry.setValue(V),replaces the value corresponding to this entry with the specified value.
java.util.AbstractMap.SimpleImmutableEntry.setValue(V),replaces the value corresponding to this entry with the specified value (optional operation).
java.util.AbstractQueue.add(E),"inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an illegalstateexception if no space is currently available."
java.util.AbstractQueue.addAll(java.util.Collection<? extends E>),adds all of the elements in the specified collection to this queue.
"java.util.AbstractSequentialList.add(int,E)",inserts the specified element at the specified position in this list (optional operation).
"java.util.AbstractSequentialList.addAll(int,java.util.Collection<? extends E>)",inserts all of the elements in the specified collection into this list at the specified position (optional operation).
"java.util.AbstractSequentialList.set(int,E)",replaces the element at the specified position in this list with the specified element (optional operation).
java.util.ArrayDeque.add(E),inserts the specified element at the end of this deque.
java.util.ArrayDeque.addFirst(E),inserts the specified element at the front of this deque.
java.util.ArrayDeque.addLast(E),inserts the specified element at the end of this deque.
java.util.ArrayDeque.offer(E),inserts the specified element at the end of this deque.
java.util.ArrayDeque.offerFirst(E),inserts the specified element at the front of this deque.
java.util.ArrayDeque.offerLast(E),inserts the specified element at the end of this deque.
java.util.ArrayDeque.push(E),pushes an element onto the stack represented by this deque.
java.util.ArrayList.add(E),appends the specified element to the end of this list.
"java.util.ArrayList.add(int,E)",inserts the specified element at the specified position in this list.
java.util.ArrayList.addAll(java.util.Collection<? extends E>),"appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator."
"java.util.ArrayList.addAll(int,java.util.Collection<? extends E>)","inserts all of the elements in the specified collection into this list, starting at the specified position."
java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>),removes all of the elements of this collection that satisfy the given predicate.
java.util.ArrayList.replaceAll(java.util.function.UnaryOperator<E>),replaces each element of this list with the result of applying the operator to that element.
"java.util.ArrayList.set(int,E)",replaces the element at the specified position in this list with the specified element.
java.util.ArrayList.sort(java.util.Comparator<? super E>),sorts this list according to the order induced by the specified comparator.
"java.util.Arrays.binarySearch(java.lang.Object,java.lang.Object)",searches the specified array for the specified object using the binary search algorithm.
"java.util.Arrays.binarySearch(java.lang.Object,int,int,java.lang.Object)",searches a range of the specified array for the specified object using the binary search algorithm.
"java.util.Arrays.deepEquals(java.lang.Object,java.lang.Object)",returns true if the two specified arrays are deeply equal to one another.
java.util.Arrays.deepHashCode(java.lang.Object),"returns a hash code based on the ""deep contents"" of the specified array."
java.util.Arrays.deepToString(java.lang.Object),"returns a string representation of the ""deep contents"" of the specified array."
"java.util.Arrays.equals(java.lang.Object,java.lang.Object)",returns true if the two specified arrays of objects are equal to one another.
"java.util.Arrays.fill(java.lang.Object,java.lang.Object)",assigns the specified object reference to each element of the specified array of objects.
"java.util.Arrays.fill(java.lang.Object,int,int,java.lang.Object)",assigns the specified object reference to each element of the specified range of the specified array of objects.
java.util.Arrays.hashCode(java.lang.Object),returns a hash code based on the contents of the specified array.
"java.util.Arrays.sort(java.lang.Object,int,int)","sorts the specified range of the specified array of objects into ascending order, according to the natural ordering of its elements."
java.util.Arrays.sort(java.lang.Object),"sorts the specified array of objects into ascending order, according to the natural ordering of its elements."
java.util.Arrays.toString(java.lang.Object),returns a string representation of the contents of the specified array.
"java.util.Dictionary.put(K,V)",maps the specified key to the specified value in this dictionary.
"java.util.EnumMap.put(K,V)",associates the specified value with the specified key in this map.
"java.util.EnumMap.putAll(java.util.Map<? extends,? extends V>)",copies all of the mappings from the specified map to this map.
"java.util.Formatter.format(java.util.Locale,java.lang.String,java.lang.Object)","writes a formatted string to this object's destination using the specified locale, format string, and arguments."
"java.util.Formatter.format(java.lang.String,java.lang.Object)",writes a formatted string to this object's destination using the specified format string and arguments.
"java.util.HashMap.compute(K,java.util.function.BiFunction<? super,? super,? extends V>)",attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
"java.util.HashMap.computeIfAbsent(K,java.util.function.Function<? super,? extends V>)","if the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null."
"java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction<? super,? super,? extends V>)","if the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
"java.util.HashMap.forEach(java.util.function.BiConsumer<? super,? super V>)",performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
"java.util.HashMap.getOrDefault(java.lang.Object,V)","returns the value to which the specified key is mapped, or defaultvalue if this map contains no mapping for the key."
"java.util.HashMap.merge(K,V,java.util.function.BiFunction<? super,? super,? extends V>)","if the specified key is not already associated with a value or is associated with null, associates it with the given non-null value."
"java.util.HashMap.put(K,V)",associates the specified value with the specified key in this map.
"java.util.HashMap.putAll(java.util.Map<? extends,? extends V>)",copies all of the mappings from the specified map to this map.
"java.util.HashMap.putIfAbsent(K,V)","if the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value."
"java.util.HashMap.replace(K,V,V)",replaces the entry for the specified key only if currently mapped to the specified value.
"java.util.HashMap.replace(K,V)",replaces the entry for the specified key only if it is currently mapped to some value.
"java.util.HashMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)",replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
java.util.HashSet.add(E),adds the specified element to this set if it is not already present.
"java.util.Hashtable.compute(K,java.util.function.BiFunction<? super,? super,? extends V>)",attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
"java.util.Hashtable.computeIfAbsent(K,java.util.function.Function<? super,? extends V>)","if the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null."
"java.util.Hashtable.computeIfPresent(K,java.util.function.BiFunction<? super,? super,? extends V>)","if the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
"java.util.Hashtable.forEach(java.util.function.BiConsumer<? super,? super V>)",performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
"java.util.Hashtable.getOrDefault(java.lang.Object,V)","returns the value to which the specified key is mapped, or defaultvalue if this map contains no mapping for the key."
"java.util.Hashtable.merge(K,V,java.util.function.BiFunction<? super,? super,? extends V>)","if the specified key is not already associated with a value or is associated with null, associates it with the given non-null value."
"java.util.Hashtable.put(K,V)",maps the specified key to the specified value in this hashtable.
"java.util.Hashtable.putAll(java.util.Map<? extends,? extends V>)",copies all of the mappings from the specified map to this hashtable.
"java.util.Hashtable.putIfAbsent(K,V)","if the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value."
"java.util.Hashtable.replace(K,V,V)",replaces the entry for the specified key only if currently mapped to the specified value.
"java.util.Hashtable.replace(K,V)",replaces the entry for the specified key only if it is currently mapped to some value.
"java.util.Hashtable.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)",replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
"java.util.IdentityHashMap.forEach(java.util.function.BiConsumer<? super,? super V>)",performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
"java.util.IdentityHashMap.put(K,V)",associates the specified value with the specified key in this identity hash map.
"java.util.IdentityHashMap.putAll(java.util.Map<? extends,? extends V>)",copies all of the mappings from the specified map to this map.
"java.util.IdentityHashMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)",replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
"java.util.LinkedHashMap.forEach(java.util.function.BiConsumer<? super,? super V>)",performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
"java.util.LinkedHashMap.getOrDefault(java.lang.Object,V)","returns the value to which the specified key is mapped, or defaultvalue if this map contains no mapping for the key."
"java.util.LinkedHashMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)",replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
java.util.LinkedList.add(E),appends the specified element to the end of this list.
"java.util.LinkedList.add(int,E)",inserts the specified element at the specified position in this list.
java.util.LinkedList.addAll(java.util.Collection<? extends E>),"appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator."
"java.util.LinkedList.addAll(int,java.util.Collection<? extends E>)","inserts all of the elements in the specified collection into this list, starting at the specified position."
java.util.LinkedList.addFirst(E),inserts the specified element at the beginning of this list.
java.util.LinkedList.addLast(E),appends the specified element to the end of this list.
java.util.LinkedList.offer(E),adds the specified element as the tail (last element) of this list.
java.util.LinkedList.offerFirst(E),inserts the specified element at the front of this list.
java.util.LinkedList.offerLast(E),inserts the specified element at the end of this list.
java.util.LinkedList.push(E),pushes an element onto the stack represented by this list.
"java.util.LinkedList.set(int,E)",replaces the element at the specified position in this list with the specified element.
java.util.Objects.hash(java.lang.Object),generates a hash code for a sequence of input values.
java.util.Optional.filter(java.util.function.Predicate<? super T>),"if a value is present, and the value matches the given predicate, return an optional describing the value, otherwise return an empty optional."
java.util.Optional.ifPresent(java.util.function.Consumer<? super T>),"if a value is present, invoke the specified consumer with the value, otherwise do nothing."
java.util.Optional.orElse(T),"return the value if present, otherwise return other."
java.util.Optional.orElseGet(java.util.function.Supplier<? extends T>),"return the value if present, otherwise invoke other and return the result of that invocation."
java.util.PriorityQueue.add(E),inserts the specified element into this priority queue.
java.util.PriorityQueue.offer(E),inserts the specified element into this priority queue.
java.util.Stack.push(E),pushes an item onto the top of this stack.
java.util.TreeMap.ceilingEntry(K),"returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key."
java.util.TreeMap.ceilingKey(K),"returns the least key greater than or equal to the given key, or null if there is no such key."
java.util.TreeMap.floorEntry(K),"returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key."
java.util.TreeMap.floorKey(K),"returns the greatest key less than or equal to the given key, or null if there is no such key."
"java.util.TreeMap.forEach(java.util.function.BiConsumer<? super,? super V>)",performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
java.util.TreeMap.headMap(K),returns a view of the portion of this map whose keys are strictly less than tokey.
"java.util.TreeMap.headMap(K,boolean)","returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) tokey."
java.util.TreeMap.higherEntry(K),"returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key."
java.util.TreeMap.higherKey(K),"returns the least key strictly greater than the given key, or null if there is no such key."
java.util.TreeMap.lowerEntry(K),"returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key."
java.util.TreeMap.lowerKey(K),"returns the greatest key strictly less than the given key, or null if there is no such key."
"java.util.TreeMap.put(K,V)",associates the specified value with the specified key in this map.
"java.util.TreeMap.putAll(java.util.Map<? extends,? extends V>)",copies all of the mappings from the specified map to this map.
"java.util.TreeMap.replace(K,V,V)",replaces the entry for the specified key only if currently mapped to the specified value.
"java.util.TreeMap.replace(K,V)",replaces the entry for the specified key only if it is currently mapped to some value.
"java.util.TreeMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)",replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
"java.util.TreeMap.subMap(K,K)","returns a view of the portion of this map whose keys range from fromkey, inclusive, to tokey, exclusive."
"java.util.TreeMap.subMap(K,boolean,K,boolean)",returns a view of the portion of this map whose keys range from fromkey to tokey.
"java.util.TreeMap.tailMap(K,boolean)","returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromkey."
java.util.TreeMap.tailMap(K),returns a view of the portion of this map whose keys are greater than or equal to fromkey.
java.util.TreeSet.add(E),adds the specified element to this set if it is not already present.
java.util.TreeSet.addAll(java.util.Collection<? extends E>),adds all of the elements in the specified collection to this set.
java.util.TreeSet.ceiling(E),"returns the least element in this set greater than or equal to the given element, or null if there is no such element."
java.util.TreeSet.floor(E),"returns the greatest element in this set less than or equal to the given element, or null if there is no such element."
"java.util.TreeSet.headSet(E,boolean)","returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toelement."
java.util.TreeSet.headSet(E),returns a view of the portion of this set whose elements are strictly less than toelement.
java.util.TreeSet.higher(E),"returns the least element in this set strictly greater than the given element, or null if there is no such element."
java.util.TreeSet.lower(E),"returns the greatest element in this set strictly less than the given element, or null if there is no such element."
"java.util.TreeSet.subSet(E,boolean,E,boolean)",returns a view of the portion of this set whose elements range from fromelement to toelement.
"java.util.TreeSet.subSet(E,E)","returns a view of the portion of this set whose elements range from fromelement, inclusive, to toelement, exclusive."
"java.util.TreeSet.tailSet(E,boolean)","returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromelement."
java.util.TreeSet.tailSet(E),returns a view of the portion of this set whose elements are greater than or equal to fromelement.
"java.util.Vector.add(int,E)",inserts the specified element at the specified position in this vector.
java.util.Vector.add(E),appends the specified element to the end of this vector.
"java.util.Vector.addAll(int,java.util.Collection<? extends E>)",inserts all of the elements in the specified collection into this vector at the specified position.
java.util.Vector.addAll(java.util.Collection<? extends E>),"appends all of the elements in the specified collection to the end of this vector, in the order that they are returned by the specified collection's iterator."
java.util.Vector.addElement(E),"adds the specified component to the end of this vector, increasing its size by one."
java.util.Vector.copyInto(java.lang.Object),copies the components of this vector into the specified array.
"java.util.Vector.insertElementAt(E,int)",inserts the specified object as a component in this vector at the specified index.
java.util.Vector.removeIf(java.util.function.Predicate<? super E>),removes all of the elements of this collection that satisfy the given predicate.
java.util.Vector.replaceAll(java.util.function.UnaryOperator<E>),replaces each element of this list with the result of applying the operator to that element.
"java.util.Vector.set(int,E)",replaces the element at the specified position in this vector with the specified element.
"java.util.Vector.setElementAt(E,int)",sets the component at the specified index of this vector to be the specified object.
java.util.Vector.sort(java.util.Comparator<? super E>),sorts this list according to the order induced by the specified comparator.
"java.util.WeakHashMap.forEach(java.util.function.BiConsumer<? super,? super V>)",performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
"java.util.WeakHashMap.put(K,V)",associates the specified value with the specified key in this map.
"java.util.WeakHashMap.putAll(java.util.Map<? extends,? extends V>)",copies all of the mappings from the specified map to this map.
"java.util.WeakHashMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)",replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
java.util.concurrent.BlockingDeque.add(E),"inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an illegalstateexception if no space is currently available."
java.util.concurrent.BlockingDeque.addFirst(E),"inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.concurrent.BlockingDeque.addLast(E),"inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
"java.util.concurrent.BlockingDeque.offer(E,long,java.util.concurrent.TimeUnit)","inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available."
java.util.concurrent.BlockingDeque.offer(E),"inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
java.util.concurrent.BlockingDeque.offerFirst(E),"inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
"java.util.concurrent.BlockingDeque.offerFirst(E,long,java.util.concurrent.TimeUnit)","inserts the specified element at the front of this deque, waiting up to the specified wait time if necessary for space to become available."
java.util.concurrent.BlockingDeque.offerLast(E),"inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
"java.util.concurrent.BlockingDeque.offerLast(E,long,java.util.concurrent.TimeUnit)","inserts the specified element at the end of this deque, waiting up to the specified wait time if necessary for space to become available."
java.util.concurrent.BlockingDeque.push(E),"pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.concurrent.BlockingDeque.put(E),"inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting if necessary for space to become available."
java.util.concurrent.BlockingDeque.putFirst(E),"inserts the specified element at the front of this deque, waiting if necessary for space to become available."
java.util.concurrent.BlockingDeque.putLast(E),"inserts the specified element at the end of this deque, waiting if necessary for space to become available."
java.util.concurrent.BlockingQueue.add(E),"inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an illegalstateexception if no space is currently available."
java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<? super E>),removes all available elements from this queue and adds them to the given collection.
"java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<? super E>,int)",removes at most the given number of available elements from this queue and adds them to the given collection.
java.util.concurrent.BlockingQueue.offer(E),"inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
"java.util.concurrent.BlockingQueue.offer(E,long,java.util.concurrent.TimeUnit)","inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available."
java.util.concurrent.BlockingQueue.put(E),"inserts the specified element into this queue, waiting if necessary for space to become available."
"java.util.concurrent.CompletionService.submit(java.lang.Runnable,V)",submits a runnable task for execution and returns a future representing that task.
java.util.concurrent.CompletionService.submit(java.util.concurrent.Callable<V>),submits a value-returning task for execution and returns a future representing the pending results of the task.
"java.util.concurrent.CompletionStage.acceptEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)","returns a new completionstage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied action."
"java.util.concurrent.CompletionStage.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>,java.util.concurrent.Executor)","returns a new completionstage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied action."
"java.util.concurrent.CompletionStage.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)","returns a new completionstage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied action."
"java.util.concurrent.CompletionStage.applyToEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super,U>)","returns a new completionstage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied function."
"java.util.concurrent.CompletionStage.applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super,U>,java.util.concurrent.Executor)","returns a new completionstage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function."
"java.util.concurrent.CompletionStage.exceptionally(,? extends T>)","returns a new completionstage that, when this stage completes exceptionally, is executed with this stage's exception as the argument to the supplied function."
java.util.concurrent.CompletionStage.thenAccept(java.util.function.Consumer<? super T>),"returns a new completionstage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied action."
"java.util.concurrent.CompletionStage.thenAcceptAsync(java.util.function.Consumer<? super T>,java.util.concurrent.Executor)","returns a new completionstage that, when this stage completes normally, is executed using the supplied executor, with this stage's result as the argument to the supplied action."
java.util.concurrent.CompletionStage.thenAcceptAsync(java.util.function.Consumer<? super T>),"returns a new completionstage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied action."
"java.util.concurrent.ConcurrentMap.compute(K,java.util.function.BiFunction<? super,? super,? extends V>)",attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
"java.util.concurrent.ConcurrentMap.computeIfAbsent(K,java.util.function.Function<? super,? extends V>)","if the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null."
"java.util.concurrent.ConcurrentMap.computeIfPresent(K,java.util.function.BiFunction<? super,? super,? extends V>)","if the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
"java.util.concurrent.ConcurrentMap.forEach(java.util.function.BiConsumer<? super,? super V>)",performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
"java.util.concurrent.ConcurrentMap.getOrDefault(java.lang.Object,V)","returns the value to which the specified key is mapped, or defaultvalue if this map contains no mapping for the key."
"java.util.concurrent.ConcurrentMap.merge(K,V,java.util.function.BiFunction<? super,? super,? extends V>)","if the specified key is not already associated with a value or is associated with null, associates it with the given non-null value."
"java.util.concurrent.ConcurrentMap.putIfAbsent(K,V)","if the specified key is not already associated with a value, associates it with the given value."
"java.util.concurrent.ConcurrentMap.replace(K,V,V)",replaces the entry for a key only if currently mapped to a given value.
"java.util.concurrent.ConcurrentMap.replace(K,V)",replaces the entry for a key only if currently mapped to some value.
"java.util.concurrent.ConcurrentMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)",replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
java.util.concurrent.ConcurrentNavigableMap.headMap(K),returns a view of the portion of this map whose keys are strictly less than tokey.
"java.util.concurrent.ConcurrentNavigableMap.headMap(K,boolean)","returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) tokey."
"java.util.concurrent.ConcurrentNavigableMap.subMap(K,K)","returns a view of the portion of this map whose keys range from fromkey, inclusive, to tokey, exclusive."
"java.util.concurrent.ConcurrentNavigableMap.subMap(K,boolean,K,boolean)",returns a view of the portion of this map whose keys range from fromkey to tokey.
"java.util.concurrent.ConcurrentNavigableMap.tailMap(K,boolean)","returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromkey."
java.util.concurrent.ConcurrentNavigableMap.tailMap(K),returns a view of the portion of this map whose keys are greater than or equal to fromkey.
java.util.concurrent.TransferQueue.transfer(E),"transfers the element to a consumer, waiting if necessary to do so."
java.util.concurrent.TransferQueue.tryTransfer(E),"transfers the element to a waiting consumer immediately, if possible."
"java.util.concurrent.TransferQueue.tryTransfer(E,long,java.util.concurrent.TimeUnit)",transfers the element to a consumer if it is possible to do so before the timeout elapses.
java.util.concurrent.ArrayBlockingQueue.add(E),"inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and throwing an illegalstateexception if this queue is full."
"java.util.concurrent.ArrayBlockingQueue.drainTo(java.util.Collection<? super E>,int)",removes at most the given number of available elements from this queue and adds them to the given collection.
java.util.concurrent.ArrayBlockingQueue.drainTo(java.util.Collection<? super E>),removes all available elements from this queue and adds them to the given collection.
java.util.concurrent.ArrayBlockingQueue.offer(E),"inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full."
"java.util.concurrent.ArrayBlockingQueue.offer(E,long,java.util.concurrent.TimeUnit)","inserts the specified element at the tail of this queue, waiting up to the specified wait time for space to become available if the queue is full."
java.util.concurrent.ArrayBlockingQueue.put(E),"inserts the specified element at the tail of this queue, waiting for space to become available if the queue is full."
"java.util.concurrent.CompletableFuture.acceptEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)","returns a new completionstage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied action."
"java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)","returns a new completionstage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied action."
"java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>,java.util.concurrent.Executor)","returns a new completionstage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied action."
java.util.concurrent.CompletableFuture.allOf(java.util.concurrent.CompletableFuture<?>),returns a new completablefuture that is completed when all of the given completablefutures complete.
java.util.concurrent.CompletableFuture.anyOf(java.util.concurrent.CompletableFuture<?>),"returns a new completablefuture that is completed when any of the given completablefutures complete, with the same result."
"java.util.concurrent.CompletableFuture.applyToEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super,U>)","returns a new completionstage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied function."
"java.util.concurrent.CompletableFuture.applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super,U>)","returns a new completionstage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied function."
java.util.concurrent.CompletableFuture.complete(T),"if not already completed, sets the value returned by get() and related methods to the given value."
"java.util.concurrent.CompletableFuture.exceptionally(,? extends T>)","returns a new completablefuture that is completed when this completablefuture completes, with the result of the given function of the exception triggering this completablefuture's completion when it completes exceptionally; otherwise, if this completablefuture completes normally, then the returned completablefuture also completes normally with the same value."
java.util.concurrent.CompletableFuture.getNow(T),"returns the result value (or throws any encountered exception) if completed, else returns the given valueifabsent."
java.util.concurrent.CompletableFuture.obtrudeValue(T),"forcibly sets or resets the value subsequently returned by method get() and related methods, whether or not already completed."
java.util.concurrent.CompletableFuture.thenAccept(java.util.function.Consumer<? super T>),"returns a new completionstage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied action."
"java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer<? super T>,java.util.concurrent.Executor)","returns a new completionstage that, when this stage completes normally, is executed using the supplied executor, with this stage's result as the argument to the supplied action."
java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer<? super T>),"returns a new completionstage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied action."
"java.util.concurrent.ConcurrentHashMap.compute(K,java.util.function.BiFunction<? super,? super,? extends V>)",attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
"java.util.concurrent.ConcurrentHashMap.computeIfAbsent(K,java.util.function.Function<? super,? extends V>)","if the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null."
"java.util.concurrent.ConcurrentHashMap.computeIfPresent(K,java.util.function.BiFunction<? super,? super,? extends V>)","if the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value."
"java.util.concurrent.ConcurrentHashMap.forEach(java.util.function.BiConsumer<? super,? super V>)",performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
"java.util.concurrent.ConcurrentHashMap.forEach(long,java.util.function.BiConsumer<? super,? super V>)","performs the given action for each (key, value)."
"java.util.concurrent.ConcurrentHashMap.forEachEntry(long,java.util.function.Consumer<? super,V>>)",performs the given action for each entry.
"java.util.concurrent.ConcurrentHashMap.forEachKey(long,java.util.function.Consumer<? super K>)",performs the given action for each key.
"java.util.concurrent.ConcurrentHashMap.forEachValue(long,java.util.function.Consumer<? super V>)",performs the given action for each value.
"java.util.concurrent.ConcurrentHashMap.getOrDefault(java.lang.Object,V)","returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key."
java.util.concurrent.ConcurrentHashMap.keySet(V),"returns a set view of the keys in this map, using the given common mapped value for any additions (i."
"java.util.concurrent.ConcurrentHashMap.merge(K,V,java.util.function.BiFunction<? super,? super,? extends V>)","if the specified key is not already associated with a (non-null) value, associates it with the given value."
"java.util.concurrent.ConcurrentHashMap.put(K,V)",maps the specified key to the specified value in this table.
"java.util.concurrent.ConcurrentHashMap.putAll(java.util.Map<? extends,? extends V>)",copies all of the mappings from the specified map to this one.
"java.util.concurrent.ConcurrentHashMap.putIfAbsent(K,V)","if the specified key is not already associated with a value, associates it with the given value."
"java.util.concurrent.ConcurrentHashMap.reduceEntries(long,,,,,? extends,V>>)","returns the result of accumulating all entries using the given reducer to combine values, or null if none."
"java.util.concurrent.ConcurrentHashMap.reduceKeys(long,java.util.function.BiFunction<? super,? super,? extends K>)","returns the result of accumulating all keys using the given reducer to combine values, or null if none."
"java.util.concurrent.ConcurrentHashMap.reduceKeysToDouble(long,java.util.function.ToDoubleFunction<? super K>,double,java.util.function.DoubleBinaryOperator)","returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceKeysToInt(long,java.util.function.ToIntFunction<? super K>,int,java.util.function.IntBinaryOperator)","returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceKeysToLong(long,java.util.function.ToLongFunction<? super K>,long,java.util.function.LongBinaryOperator)","returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceToDouble(long,java.util.function.ToDoubleBiFunction<? super,? super V>,double,java.util.function.DoubleBinaryOperator)","returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceToInt(long,java.util.function.ToIntBiFunction<? super,? super V>,int,java.util.function.IntBinaryOperator)","returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceToLong(long,java.util.function.ToLongBiFunction<? super,? super V>,long,java.util.function.LongBinaryOperator)","returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceValues(long,java.util.function.BiFunction<? super,? super,? extends V>)","returns the result of accumulating all values using the given reducer to combine values, or null if none."
"java.util.concurrent.ConcurrentHashMap.reduceValuesToDouble(long,java.util.function.ToDoubleFunction<? super V>,double,java.util.function.DoubleBinaryOperator)","returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceValuesToInt(long,java.util.function.ToIntFunction<? super V>,int,java.util.function.IntBinaryOperator)","returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.reduceValuesToLong(long,java.util.function.ToLongFunction<? super V>,long,java.util.function.LongBinaryOperator)","returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value."
"java.util.concurrent.ConcurrentHashMap.replace(K,V,V)",replaces the entry for a key only if currently mapped to a given value.
"java.util.concurrent.ConcurrentHashMap.replace(K,V)",replaces the entry for a key only if currently mapped to some value.
"java.util.concurrent.ConcurrentHashMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)",replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
java.util.concurrent.ConcurrentHashMap.KeySetView.add(K),"adds the specified key to this set view by mapping the key to the default mapped value in the backing map, if defined."
java.util.concurrent.ConcurrentHashMap.KeySetView.addAll(java.util.Collection<? extends K>),"adds all of the elements in the specified collection to this set, as if by calling add(e) on each one."
java.util.concurrent.ConcurrentLinkedDeque.add(E),inserts the specified element at the tail of this deque.
java.util.concurrent.ConcurrentLinkedDeque.addAll(java.util.Collection<? extends E>),"appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator."
java.util.concurrent.ConcurrentLinkedDeque.addFirst(E),inserts the specified element at the front of this deque.
java.util.concurrent.ConcurrentLinkedDeque.addLast(E),inserts the specified element at the end of this deque.
java.util.concurrent.ConcurrentLinkedDeque.offer(E),inserts the specified element at the tail of this deque.
java.util.concurrent.ConcurrentLinkedDeque.offerFirst(E),inserts the specified element at the front of this deque.
java.util.concurrent.ConcurrentLinkedDeque.offerLast(E),inserts the specified element at the end of this deque.
java.util.concurrent.ConcurrentLinkedDeque.push(E),"pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.concurrent.ConcurrentLinkedDeque.toString(),returns a string representation of this collection.
java.util.concurrent.ConcurrentLinkedQueue.add(E),inserts the specified element at the tail of this queue.
java.util.concurrent.ConcurrentLinkedQueue.addAll(java.util.Collection<? extends E>),"appends all of the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collection's iterator."
java.util.concurrent.ConcurrentLinkedQueue.offer(E),inserts the specified element at the tail of this queue.
java.util.concurrent.ConcurrentLinkedQueue.toString(),returns a string representation of this collection.
java.util.concurrent.ConcurrentSkipListMap.ceilingEntry(K),"returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such entry."
java.util.concurrent.ConcurrentSkipListMap.ceilingKey(K),"returns the least key greater than or equal to the given key, or null if there is no such key."
"java.util.concurrent.ConcurrentSkipListMap.compute(K,java.util.function.BiFunction<? super,? super,? extends V>)",attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
"java.util.concurrent.ConcurrentSkipListMap.computeIfAbsent(K,java.util.function.Function<? super,? extends V>)","if the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null."
"java.util.concurrent.ConcurrentSkipListMap.computeIfPresent(K,java.util.function.BiFunction<? super,? super,? extends V>)","if the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value."
java.util.concurrent.ConcurrentSkipListMap.floorEntry(K),"returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key."
java.util.concurrent.ConcurrentSkipListMap.floorKey(K),"returns the greatest key less than or equal to the given key, or null if there is no such key."
"java.util.concurrent.ConcurrentSkipListMap.forEach(java.util.function.BiConsumer<? super,? super V>)",performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
"java.util.concurrent.ConcurrentSkipListMap.getOrDefault(java.lang.Object,V)","returns the value to which the specified key is mapped, or the given defaultvalue if this map contains no mapping for the key."
java.util.concurrent.ConcurrentSkipListMap.headMap(K),returns a view of the portion of this map whose keys are strictly less than tokey.
"java.util.concurrent.ConcurrentSkipListMap.headMap(K,boolean)","returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) tokey."
java.util.concurrent.ConcurrentSkipListMap.higherEntry(K),"returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key."
java.util.concurrent.ConcurrentSkipListMap.higherKey(K),"returns the least key strictly greater than the given key, or null if there is no such key."
java.util.concurrent.ConcurrentSkipListMap.lowerEntry(K),"returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key."
java.util.concurrent.ConcurrentSkipListMap.lowerKey(K),"returns the greatest key strictly less than the given key, or null if there is no such key."
"java.util.concurrent.ConcurrentSkipListMap.merge(K,V,java.util.function.BiFunction<? super,? super,? extends V>)","if the specified key is not already associated with a value, associates it with the given value."
"java.util.concurrent.ConcurrentSkipListMap.put(K,V)",associates the specified value with the specified key in this map.
"java.util.concurrent.ConcurrentSkipListMap.putIfAbsent(K,V)","if the specified key is not already associated with a value, associates it with the given value."
"java.util.concurrent.ConcurrentSkipListMap.replace(K,V,V)",replaces the entry for a key only if currently mapped to a given value.
"java.util.concurrent.ConcurrentSkipListMap.replace(K,V)",replaces the entry for a key only if currently mapped to some value.
"java.util.concurrent.ConcurrentSkipListMap.replaceAll(java.util.function.BiFunction<? super,? super,? extends V>)",replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
"java.util.concurrent.ConcurrentSkipListMap.subMap(K,K)","returns a view of the portion of this map whose keys range from fromkey, inclusive, to tokey, exclusive."
"java.util.concurrent.ConcurrentSkipListMap.subMap(K,boolean,K,boolean)",returns a view of the portion of this map whose keys range from fromkey to tokey.
"java.util.concurrent.ConcurrentSkipListMap.tailMap(K,boolean)","returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromkey."
java.util.concurrent.ConcurrentSkipListMap.tailMap(K),returns a view of the portion of this map whose keys are greater than or equal to fromkey.
java.util.concurrent.ConcurrentSkipListSet.add(E),adds the specified element to this set if it is not already present.
java.util.concurrent.ConcurrentSkipListSet.ceiling(E),"returns the least element in this set greater than or equal to the given element, or null if there is no such element."
java.util.concurrent.ConcurrentSkipListSet.floor(E),"returns the greatest element in this set less than or equal to the given element, or null if there is no such element."
"java.util.concurrent.ConcurrentSkipListSet.headSet(E,boolean)","returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toelement."
java.util.concurrent.ConcurrentSkipListSet.headSet(E),returns a view of the portion of this set whose elements are strictly less than toelement.
java.util.concurrent.ConcurrentSkipListSet.higher(E),"returns the least element in this set strictly greater than the given element, or null if there is no such element."
java.util.concurrent.ConcurrentSkipListSet.lower(E),"returns the greatest element in this set strictly less than the given element, or null if there is no such element."
"java.util.concurrent.ConcurrentSkipListSet.subSet(E,boolean,E,boolean)",returns a view of the portion of this set whose elements range from fromelement to toelement.
"java.util.concurrent.ConcurrentSkipListSet.subSet(E,E)","returns a view of the portion of this set whose elements range from fromelement, inclusive, to toelement, exclusive."
"java.util.concurrent.ConcurrentSkipListSet.tailSet(E,boolean)","returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromelement."
java.util.concurrent.ConcurrentSkipListSet.tailSet(E),returns a view of the portion of this set whose elements are greater than or equal to fromelement.
java.util.concurrent.CopyOnWriteArrayList.add(E),appends the specified element to the end of this list.
"java.util.concurrent.CopyOnWriteArrayList.add(int,E)",inserts the specified element at the specified position in this list.
java.util.concurrent.CopyOnWriteArrayList.addAll(java.util.Collection<? extends E>),"appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator."
"java.util.concurrent.CopyOnWriteArrayList.addAll(int,java.util.Collection<? extends E>)","inserts all of the elements in the specified collection into this list, starting at the specified position."
java.util.concurrent.CopyOnWriteArrayList.addAllAbsent(java.util.Collection<? extends E>),"appends all of the elements in the specified collection that are not already contained in this list, to the end of this list, in the order that they are returned by the specified collection's iterator."
java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(E),"appends the element, if not present."
"java.util.concurrent.CopyOnWriteArrayList.indexOf(E,int)","returns the index of the first occurrence of the specified element in this list, searching forwards from index, or returns -1 if the element is not found."
"java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(E,int)","returns the index of the last occurrence of the specified element in this list, searching backwards from index, or returns -1 if the element is not found."
java.util.concurrent.CopyOnWriteArrayList.removeIf(java.util.function.Predicate<? super E>),removes all of the elements of this collection that satisfy the given predicate.
java.util.concurrent.CopyOnWriteArrayList.replaceAll(java.util.function.UnaryOperator<E>),replaces each element of this list with the result of applying the operator to that element.
"java.util.concurrent.CopyOnWriteArrayList.set(int,E)",replaces the element at the specified position in this list with the specified element.
java.util.concurrent.CopyOnWriteArrayList.sort(java.util.Comparator<? super E>),sorts this list according to the order induced by the specified comparator.
java.util.concurrent.CopyOnWriteArraySet.add(E),adds the specified element to this set if it is not already present.
java.util.concurrent.CopyOnWriteArraySet.addAll(java.util.Collection<? extends E>),adds all of the elements in the specified collection to this set if they're not already present.
java.util.concurrent.CountedCompleter.complete(T),"regardless of pending count, invokes oncompletion(countedcompleter), marks this task as complete and further triggers trycomplete() on this task's completer, if one exists."
java.util.concurrent.CountedCompleter.setRawResult(T),a method that result-bearing countedcompleters may optionally use to help maintain result data.
java.util.concurrent.DelayQueue.add(E),inserts the specified element into this delay queue.
"java.util.concurrent.DelayQueue.drainTo(java.util.Collection<? super E>,int)",removes at most the given number of available elements from this queue and adds them to the given collection.
java.util.concurrent.DelayQueue.drainTo(java.util.Collection<? super E>),removes all available elements from this queue and adds them to the given collection.
java.util.concurrent.DelayQueue.offer(E),inserts the specified element into this delay queue.
"java.util.concurrent.DelayQueue.offer(E,long,java.util.concurrent.TimeUnit)",inserts the specified element into this delay queue.
java.util.concurrent.DelayQueue.put(E),inserts the specified element into this delay queue.
"java.util.concurrent.Exchanger.exchange(V,long,java.util.concurrent.TimeUnit)","waits for another thread to arrive at this exchange point (unless the current thread is interrupted or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return."
java.util.concurrent.Exchanger.exchange(V),"waits for another thread to arrive at this exchange point (unless the current thread is interrupted), and then transfers the given object to it, receiving its object in return."
"java.util.concurrent.ExecutorCompletionService.submit(java.lang.Runnable,V)",submits a runnable task for execution and returns a future representing that task.
java.util.concurrent.ExecutorCompletionService.submit(java.util.concurrent.Callable<V>),submits a value-returning task for execution and returns a future representing the pending results of the task.
java.util.concurrent.ForkJoinTask.complete(V),"completes this task, and if not already aborted or cancelled, returning the given value as the result of subsequent invocations of join and related operations."
java.util.concurrent.ForkJoinTask.invokeAll(java.util.concurrent.ForkJoinTask<?>),"forks the given tasks, returning when isdone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown."
java.util.concurrent.ForkJoinTask.setRawResult(V),forces the given value to be returned as a result.
java.util.concurrent.FutureTask.set(V),sets the result of this future to the given value unless this future has already been set or has been cancelled.
java.util.concurrent.LinkedBlockingDeque.add(E),inserts the specified element at the end of this deque unless it would violate capacity restrictions.
java.util.concurrent.LinkedBlockingDeque.addFirst(E),"inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.concurrent.LinkedBlockingDeque.addLast(E),"inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
"java.util.concurrent.LinkedBlockingDeque.drainTo(java.util.Collection<? super E>,int)",removes at most the given number of available elements from this queue and adds them to the given collection.
java.util.concurrent.LinkedBlockingDeque.drainTo(java.util.Collection<? super E>),removes all available elements from this queue and adds them to the given collection.
"java.util.concurrent.LinkedBlockingDeque.offer(E,long,java.util.concurrent.TimeUnit)","inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available."
java.util.concurrent.LinkedBlockingDeque.offer(E),"inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
java.util.concurrent.LinkedBlockingDeque.offerFirst(E),"inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
"java.util.concurrent.LinkedBlockingDeque.offerFirst(E,long,java.util.concurrent.TimeUnit)","inserts the specified element at the front of this deque, waiting up to the specified wait time if necessary for space to become available."
java.util.concurrent.LinkedBlockingDeque.offerLast(E),"inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
"java.util.concurrent.LinkedBlockingDeque.offerLast(E,long,java.util.concurrent.TimeUnit)","inserts the specified element at the end of this deque, waiting up to the specified wait time if necessary for space to become available."
java.util.concurrent.LinkedBlockingDeque.push(E),"pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an illegalstateexception if no space is currently available."
java.util.concurrent.LinkedBlockingDeque.put(E),"inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting if necessary for space to become available."
java.util.concurrent.LinkedBlockingDeque.putFirst(E),"inserts the specified element at the front of this deque, waiting if necessary for space to become available."
java.util.concurrent.LinkedBlockingDeque.putLast(E),"inserts the specified element at the end of this deque, waiting if necessary for space to become available."
"java.util.concurrent.LinkedBlockingQueue.drainTo(java.util.Collection<? super E>,int)",removes at most the given number of available elements from this queue and adds them to the given collection.
java.util.concurrent.LinkedBlockingQueue.drainTo(java.util.Collection<? super E>),removes all available elements from this queue and adds them to the given collection.
java.util.concurrent.LinkedBlockingQueue.offer(E),"inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full."
"java.util.concurrent.LinkedBlockingQueue.offer(E,long,java.util.concurrent.TimeUnit)","inserts the specified element at the tail of this queue, waiting if necessary up to the specified wait time for space to become available."
java.util.concurrent.LinkedBlockingQueue.put(E),"inserts the specified element at the tail of this queue, waiting if necessary for space to become available."
java.util.concurrent.LinkedTransferQueue.add(E),inserts the specified element at the tail of this queue.
"java.util.concurrent.LinkedTransferQueue.drainTo(java.util.Collection<? super E>,int)",removes at most the given number of available elements from this queue and adds them to the given collection.
java.util.concurrent.LinkedTransferQueue.drainTo(java.util.Collection<? super E>),removes all available elements from this queue and adds them to the given collection.
"java.util.concurrent.LinkedTransferQueue.offer(E,long,java.util.concurrent.TimeUnit)",inserts the specified element at the tail of this queue.
java.util.concurrent.LinkedTransferQueue.offer(E),inserts the specified element at the tail of this queue.
java.util.concurrent.LinkedTransferQueue.put(E),inserts the specified element at the tail of this queue.
java.util.concurrent.LinkedTransferQueue.toArray(),"returns an array containing all of the elements in this queue, in proper sequence."
java.util.concurrent.LinkedTransferQueue.toString(),returns a string representation of this collection.
java.util.concurrent.LinkedTransferQueue.transfer(E),"transfers the element to a consumer, waiting if necessary to do so."
java.util.concurrent.LinkedTransferQueue.tryTransfer(E),"transfers the element to a waiting consumer immediately, if possible."
"java.util.concurrent.LinkedTransferQueue.tryTransfer(E,long,java.util.concurrent.TimeUnit)",transfers the element to a consumer if it is possible to do so before the timeout elapses.
java.util.concurrent.PriorityBlockingQueue.add(E),inserts the specified element into this priority queue.
"java.util.concurrent.PriorityBlockingQueue.drainTo(java.util.Collection<? super E>,int)",removes at most the given number of available elements from this queue and adds them to the given collection.
java.util.concurrent.PriorityBlockingQueue.drainTo(java.util.Collection<? super E>),removes all available elements from this queue and adds them to the given collection.
java.util.concurrent.PriorityBlockingQueue.offer(E),inserts the specified element into this priority queue.
"java.util.concurrent.PriorityBlockingQueue.offer(E,long,java.util.concurrent.TimeUnit)",inserts the specified element into this priority queue.
java.util.concurrent.PriorityBlockingQueue.put(E),inserts the specified element into this priority queue.
java.util.concurrent.RecursiveTask.setRawResult(V),forces the given value to be returned as a result.
"java.util.concurrent.SynchronousQueue.drainTo(java.util.Collection<? super E>,int)",removes at most the given number of available elements from this queue and adds them to the given collection.
java.util.concurrent.SynchronousQueue.drainTo(java.util.Collection<? super E>),removes all available elements from this queue and adds them to the given collection.
java.util.concurrent.SynchronousQueue.offer(E),"inserts the specified element into this queue, if another thread is waiting to receive it."
"java.util.concurrent.SynchronousQueue.offer(E,long,java.util.concurrent.TimeUnit)","inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it."
java.util.concurrent.SynchronousQueue.put(E),"adds the specified element to this queue, waiting if necessary for another thread to receive it."
java.util.concurrent.SynchronousQueue.toString(),"always returns ""[]""."
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.accumulateAndGet(T,int,java.util.function.IntBinaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value."
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.addAndGet(T,int)",atomically adds the given value to the current value of the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(T,int,int)",atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.decrementAndGet(T),atomically decrements by one the current value of the field of the given object managed by this updater.
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.get(T),gets the current value held in the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAccumulate(T,int,java.util.function.IntBinaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value."
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAdd(T,int)",atomically adds the given value to the current value of the field of the given object managed by this updater.
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndDecrement(T),atomically decrements by one the current value of the field of the given object managed by this updater.
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndIncrement(T),atomically increments by one the current value of the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndSet(T,int)",atomically sets the field of the given object managed by this updater to the given value and returns the old value.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndUpdate(T,java.util.function.IntUnaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value."
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(T),atomically increments by one the current value of the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.lazySet(T,int)",eventually sets the field of the given object managed by this updater to the given updated value.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.set(T,int)",sets the field of the given object managed by this updater to the given updated value.
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.updateAndGet(T,java.util.function.IntUnaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicIntegerFieldUpdater.weakCompareAndSet(T,int,int)",atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.accumulateAndGet(T,long,java.util.function.LongBinaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value."
"java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(T,long)",atomically adds the given value to the current value of the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(T,long,long)",atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicLongFieldUpdater.decrementAndGet(T),atomically decrements by one the current value of the field of the given object managed by this updater.
java.util.concurrent.atomic.AtomicLongFieldUpdater.get(T),gets the current value held in the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAccumulate(T,long,java.util.function.LongBinaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value."
"java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAdd(T,long)",atomically adds the given value to the current value of the field of the given object managed by this updater.
java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(T),atomically decrements by one the current value of the field of the given object managed by this updater.
java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(T),atomically increments by one the current value of the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndSet(T,long)",atomically sets the field of the given object managed by this updater to the given value and returns the old value.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndUpdate(T,java.util.function.LongUnaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value."
java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(T),atomically increments by one the current value of the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.lazySet(T,long)",eventually sets the field of the given object managed by this updater to the given updated value.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.set(T,long)",sets the field of the given object managed by this updater to the given updated value.
"java.util.concurrent.atomic.AtomicLongFieldUpdater.updateAndGet(T,java.util.function.LongUnaryOperator)","atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicLongFieldUpdater.weakCompareAndSet(T,long,long)",atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(V,boolean)",atomically sets the value of the mark to the given update value if the current reference is == to the expected reference.
"java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(V,V,boolean,boolean)",atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.
"java.util.concurrent.atomic.AtomicMarkableReference.set(V,boolean)",unconditionally sets the value of both the reference and mark.
"java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(V,V,boolean,boolean)",atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.
"java.util.concurrent.atomic.AtomicReference.accumulateAndGet(V,java.util.function.BinaryOperator<V>)","atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value."
"java.util.concurrent.atomic.AtomicReference.compareAndSet(V,V)",atomically sets the value to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicReference.getAndAccumulate(V,java.util.function.BinaryOperator<V>)","atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value."
java.util.concurrent.atomic.AtomicReference.getAndSet(V),atomically sets to the given value and returns the old value.
java.util.concurrent.atomic.AtomicReference.getAndUpdate(java.util.function.UnaryOperator<V>),"atomically updates the current value with the results of applying the given function, returning the previous value."
java.util.concurrent.atomic.AtomicReference.lazySet(V),eventually sets to the given value.
java.util.concurrent.atomic.AtomicReference.set(V),sets to the given value.
java.util.concurrent.atomic.AtomicReference.updateAndGet(java.util.function.UnaryOperator<V>),"atomically updates the current value with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(V,V)",atomically sets the value to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicReferenceArray.accumulateAndGet(int,E,java.util.function.BinaryOperator<E>)","atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value."
"java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int,E,E)",atomically sets the element at position i to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicReferenceArray.getAndAccumulate(int,E,java.util.function.BinaryOperator<E>)","atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value."
"java.util.concurrent.atomic.AtomicReferenceArray.getAndSet(int,E)",atomically sets the element at position i to the given value and returns the old value.
"java.util.concurrent.atomic.AtomicReferenceArray.getAndUpdate(int,java.util.function.UnaryOperator<E>)","atomically updates the element at index i with the results of applying the given function, returning the previous value."
"java.util.concurrent.atomic.AtomicReferenceArray.lazySet(int,E)",eventually sets the element at position i to the given value.
"java.util.concurrent.atomic.AtomicReferenceArray.set(int,E)",sets the element at position i to the given value.
"java.util.concurrent.atomic.AtomicReferenceArray.updateAndGet(int,java.util.function.UnaryOperator<E>)","atomically updates the element at index i with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicReferenceArray.weakCompareAndSet(int,E,E)",atomically sets the element at position i to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.accumulateAndGet(T,V,java.util.function.BinaryOperator<V>)","atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value."
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(T,V,V)",atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
java.util.concurrent.atomic.AtomicReferenceFieldUpdater.get(T),gets the current value held in the field of the given object managed by this updater.
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndAccumulate(T,V,java.util.function.BinaryOperator<V>)","atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value."
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(T,V)",atomically sets the field of the given object managed by this updater to the given value and returns the old value.
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndUpdate(T,java.util.function.UnaryOperator<V>)","atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value."
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.lazySet(T,V)",eventually sets the field of the given object managed by this updater to the given updated value.
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.set(T,V)",sets the field of the given object managed by this updater to the given updated value.
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.updateAndGet(T,java.util.function.UnaryOperator<V>)","atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value."
"java.util.concurrent.atomic.AtomicReferenceFieldUpdater.weakCompareAndSet(T,V,V)",atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
"java.util.concurrent.atomic.AtomicStampedReference.attemptStamp(V,int)",atomically sets the value of the stamp to the given update value if the current reference is == to the expected reference.
"java.util.concurrent.atomic.AtomicStampedReference.compareAndSet(V,V,int,int)",atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.
"java.util.concurrent.atomic.AtomicStampedReference.set(V,int)",unconditionally sets the value of both the reference and stamp.
"java.util.concurrent.atomic.AtomicStampedReference.weakCompareAndSet(V,V,int,int)",atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.await(),implements interruptible condition wait.
"java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.await(long,java.util.concurrent.TimeUnit)",implements timed condition wait.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitNanos(long),implements timed condition wait.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitUninterruptibly(),implements uninterruptible condition wait.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitUntil(java.util.Date),implements absolute timed condition wait.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.signal(),"moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock."
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.signalAll(),moves all threads from the wait queue for this condition to the wait queue for the owning lock.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.getWaitQueueLength(),returns an estimate of the number of threads waiting on this condition.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.getWaitingThreads(),returns a collection containing those threads that may be waiting on this condition.
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.hasWaiters(),queries whether any threads are waiting on this condition.
java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.await(),implements interruptible condition wait.
"java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.await(long,java.util.concurrent.TimeUnit)",implements timed condition wait.
java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.awaitNanos(long),implements timed condition wait.
java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.awaitUninterruptibly(),implements uninterruptible condition wait.
java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.awaitUntil(java.util.Date),implements absolute timed condition wait.
java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.signal(),"moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock."
java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.signalAll(),moves all threads from the wait queue for this condition to the wait queue for the owning lock.
java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.getWaitQueueLength(),returns an estimate of the number of threads waiting on this condition.
java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.getWaitingThreads(),returns a collection containing those threads that may be waiting on this condition.
java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.hasWaiters(),queries whether any threads are waiting on this condition.
"java.util.function.BiConsumer.accept(T,U)",performs this operation on the given arguments.
"java.util.function.BiConsumer.andThen(java.util.function.BiConsumer<? super,? super U>)","returns a composed biconsumer that performs, in sequence, this operation followed by the after operation."
"java.util.function.BiFunction.apply(T,U)",applies this function to the given arguments.
"java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super,? super U>)",returns a composed predicate that represents a short-circuiting logical and of this predicate and another.
"java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super,? super U>)",returns a composed predicate that represents a short-circuiting logical or of this predicate and another.
"java.util.function.BiPredicate.test(T,U)",evaluates this predicate on the given arguments.
java.util.function.Consumer.accept(T),performs this operation on the given argument.
java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>),"returns a composed consumer that performs, in sequence, this operation followed by the after operation."
java.util.function.Function.apply(T),applies this function to the given argument.
"java.util.function.Function.compose(java.util.function.Function<? super,? extends T>)","returns a composed function that first applies the before function to its input, and then applies this function to the result."
"java.util.function.ObjDoubleConsumer.accept(T,double)",performs this operation on the given arguments.
"java.util.function.ObjIntConsumer.accept(T,int)",performs this operation on the given arguments.
"java.util.function.ObjLongConsumer.accept(T,long)",performs this operation on the given arguments.
java.util.function.Predicate.and(java.util.function.Predicate<? super T>),returns a composed predicate that represents a short-circuiting logical and of this predicate and another.
java.util.function.Predicate.or(java.util.function.Predicate<? super T>),returns a composed predicate that represents a short-circuiting logical or of this predicate and another.
java.util.function.Predicate.test(T),evaluates this predicate on the given argument.
"java.util.function.ToDoubleBiFunction.applyAsDouble(T,U)",applies this function to the given arguments.
java.util.function.ToDoubleFunction.applyAsDouble(T),applies this function to the given argument.
"java.util.function.ToIntBiFunction.applyAsInt(T,U)",applies this function to the given arguments.
java.util.function.ToIntFunction.applyAsInt(T),applies this function to the given argument.
"java.util.function.ToLongBiFunction.applyAsLong(T,U)",applies this function to the given arguments.
java.util.function.ToLongFunction.applyAsLong(T),applies this function to the given argument.
"java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Object)","log a message, specifying source class, method, and resource bundle, with an optional list of message parameters."
java.util.logging.LogRecord.setParameters(java.lang.Object),set the parameters to the log message.
"java.util.stream.Collector.of(java.util.function.Supplier<A>,,T>,java.util.function.BinaryOperator<A>,,R>,java.util.stream.Collector.Characteristics)","returns a new collector described by the given supplier, accumulator, combiner, and finisher functions."
java.util.stream.Stream.allMatch(java.util.function.Predicate<? super T>),returns whether all elements of this stream match the provided predicate.
java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>),returns whether any elements of this stream match the provided predicate.
java.util.stream.Stream.filter(java.util.function.Predicate<? super T>),returns a stream consisting of the elements of this stream that match the given predicate.
java.util.stream.Stream.forEach(java.util.function.Consumer<? super T>),performs an action for each element of this stream.
java.util.stream.Stream.forEachOrdered(java.util.function.Consumer<? super T>),"performs an action for each element of this stream, in the encounter order of the stream if the stream has a defined encounter order."
java.util.stream.Stream.mapToDouble(java.util.function.ToDoubleFunction<? super T>),returns a doublestream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.Stream.mapToInt(java.util.function.ToIntFunction<? super T>),returns an intstream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.Stream.mapToLong(java.util.function.ToLongFunction<? super T>),returns a longstream consisting of the results of applying the given function to the elements of this stream.
java.util.stream.Stream.max(java.util.Comparator<? super T>),returns the maximum element of this stream according to the provided comparator.
java.util.stream.Stream.min(java.util.Comparator<? super T>),returns the minimum element of this stream according to the provided comparator.
java.util.stream.Stream.noneMatch(java.util.function.Predicate<? super T>),returns whether no elements of this stream match the provided predicate.
java.util.stream.Stream.peek(java.util.function.Consumer<? super T>),"returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream."
"java.util.stream.Stream.reduce(T,java.util.function.BinaryOperator<T>)","performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value."
java.util.stream.Stream.reduce(java.util.function.BinaryOperator<T>),"performs a reduction on the elements of this stream, using an associative accumulation function, and returns an optional describing the reduced value, if any."
java.util.stream.Stream.sorted(java.util.Comparator<? super T>),"returns a stream consisting of the elements of this stream, sorted according to the provided comparator."
java.util.stream.Stream.Builder.accept(T),adds an element to the stream being built.
java.util.stream.Stream.Builder.add(T),adds an element to the stream being built.
"javax.net.ssl.X509KeyManager.chooseClientAlias(java.lang.String,java.security.Principal,java.net.Socket)",choose an alias to authenticate the client side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
"javax.net.ssl.X509KeyManager.chooseServerAlias(java.lang.String,java.security.Principal,java.net.Socket)",choose an alias to authenticate the server side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
"javax.net.ssl.X509KeyManager.getClientAliases(java.lang.String,java.security.Principal)",get the matching aliases for authenticating the client side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
"javax.net.ssl.X509KeyManager.getServerAliases(java.lang.String,java.security.Principal)",get the matching aliases for authenticating the server side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
"javax.net.ssl.X509TrustManager.checkClientTrusted(java.security.cert.X509Certificate,java.lang.String)","given the partial or complete certificate chain provided by the peer, build a certificate path to a trusted root and return if it can be validated and is trusted for client ssl authentication based on the authentication type."
"javax.net.ssl.X509TrustManager.checkServerTrusted(java.security.cert.X509Certificate,java.lang.String)","given the partial or complete certificate chain provided by the peer, build a certificate path to a trusted root and return if it can be validated and is trusted for server ssl authentication based on the authentication type."
"javax.net.ssl.SSLContext.init(javax.net.ssl.KeyManager,javax.net.ssl.TrustManager,java.security.SecureRandom)",initializes this context.
"javax.net.ssl.SSLContextSpi.engineInit(javax.net.ssl.KeyManager,javax.net.ssl.TrustManager,java.security.SecureRandom)",initializes this context.
javax.net.ssl.SSLEngine.setEnabledCipherSuites(java.lang.String),sets the cipher suites enabled for use on this engine.
javax.net.ssl.SSLEngine.setEnabledProtocols(java.lang.String),set the protocol versions enabled for use on this engine.
"javax.net.ssl.SSLEngine.unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer,int,int)",attempts to decode ssl/tls network data into a subsequence of plaintext application data buffers.
"javax.net.ssl.SSLEngine.wrap(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer)",attempts to encode plaintext bytes from a subsequence of data buffers into ssl/tls network data.
javax.net.ssl.SSLParameters.setCipherSuites(java.lang.String),sets the array of ciphersuites.
javax.net.ssl.SSLParameters.setProtocols(java.lang.String),sets the array of protocols.
javax.net.ssl.SSLServerSocket.setEnabledCipherSuites(java.lang.String),sets the cipher suites enabled for use by accepted connections.
javax.net.ssl.SSLServerSocket.setEnabledProtocols(java.lang.String),controls which particular protocols are enabled for use by accepted connections.
javax.net.ssl.SSLServerSocket.toString(),returns the implementation address and implementation port of this socket as a string.
javax.net.ssl.SSLSocket.setEnabledCipherSuites(java.lang.String),sets the cipher suites enabled for use on this connection.
javax.net.ssl.SSLSocket.setEnabledProtocols(java.lang.String),sets the protocol versions enabled for use on this connection.
javax.net.ssl.SSLSocket.toString(),converts this socket to a string.
"javax.net.ssl.X509ExtendedKeyManager.chooseEngineClientAlias(java.lang.String,java.security.Principal,javax.net.ssl.SSLEngine)",choose an alias to authenticate the client side of an sslengine connection given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
"javax.net.ssl.X509ExtendedKeyManager.chooseEngineServerAlias(java.lang.String,java.security.Principal,javax.net.ssl.SSLEngine)",choose an alias to authenticate the server side of an sslengine connection given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
"javax.net.ssl.X509ExtendedTrustManager.checkClientTrusted(java.security.cert.X509Certificate,java.lang.String,java.net.Socket)","given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
"javax.net.ssl.X509ExtendedTrustManager.checkClientTrusted(java.security.cert.X509Certificate,java.lang.String,javax.net.ssl.SSLEngine)","given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
"javax.net.ssl.X509ExtendedTrustManager.checkServerTrusted(java.security.cert.X509Certificate,java.lang.String,javax.net.ssl.SSLEngine)","given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
"javax.net.ssl.X509ExtendedTrustManager.checkServerTrusted(java.security.cert.X509Certificate,java.lang.String,java.net.Socket)","given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
javax.security.auth.callback.CallbackHandler.handle(javax.security.auth.callback.Callback),retrieve or display the information requested in the provided callbacks.
"javax.sql.RowSet.setURL(int,java.net.URL)",sets the designated parameter to the given java.
javax.sql.RowSet.setUrl(java.lang.String),sets the url this rowset object will use when it uses the drivermanager to create a connection.
javax.xml.datatype.DatatypeConfigurationException.printStackTrace(),print the the trace of methods from where the error originated.
javax.xml.datatype.DatatypeConfigurationException.printStackTrace(java.io.PrintWriter),print the the trace of methods from where the error originated.
javax.xml.datatype.DatatypeConfigurationException.printStackTrace(java.io.PrintStream),print the the trace of methods from where the error originated.
"org.xml.sax.helpers.NamespaceSupport.processName(java.lang.String,java.lang.String,boolean)","process a raw xml qualified name, after all declarations in the current context have been handled by declareprefix()."
